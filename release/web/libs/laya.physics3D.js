window.Physics3D = function (pages, interactive) {
                function init(initialMemory,interactive,exports){
                var getWorldTransform=interactive.getWorldTransform;
                var setWorldTransform=interactive.setWorldTransform;
                var fd_close=() => { console.log('fd_close')};
                var fd_write=() => { console.log('fd_write')};
                var fd_seek=() => { console.log('fd_seek')};
                var clearLine=()=>{console.log('clearLine')};
                var drawLine=()=>{console.log('drawLine')};
                if(!window.atob){
                    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                    window.atob=function atob(input) {
                        var str = (String (input)).replace (/[=]+$/, ''); // #31: ExtendScript bad parse of /=
                        if (str.length % 4 === 1) {
                        throw new InvalidCharacterError ("'atob' failed: The string to be decoded is not correctly encoded.");
                        }
                        for (
                        // initialize result and counters
                        var bc = 0, bs, buffer, idx = 0, output = '';
                        // get next character
                        buffer = str.charAt (idx++); // eslint-disable-line no-cond-assign
                        // character found in table? initialize bit storage and add its ascii value;
                        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
                            // and if not first of each 4 characters,
                            // convert the first 8 bits to one ascii character
                            bc++ % 4) ? output += String.fromCharCode (255 & bs >> (-2 * bc & 6)) : 0
                        ) {
                        // try to find character in table (0-63, not found => -1)
                        buffer = chars.indexOf (buffer);
                        }
                        return output;
                    }
                }







  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 30632, "BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAGx4AAAAAAAAAAAAAAAAAAACAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAAAAcAAAAHQAAAB4AAAB7FK5H4XqUPwEAAAAAAAAASK+8mvLXej4BAAAAsAEAALEBAAAAAAAAAAAAAAAAAEAAAAAAAADwPw==");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var __imported_wasi_snapshot_preview1_fd_close = env.fd_close;
 var __imported_wasi_snapshot_preview1_fd_write = env.fd_write;
 var layaMotionStateGetWorldTransform = env.getWorldTransform;
 var layaMotionStateSetWorldTransform = env.setWorldTransform;
 var layaDrawline = env.drawLine;
 var layaClearLine = env.clearLine;
 var legalimport$__imported_wasi_snapshot_preview1_fd_seek = env.fd_seek;
 var __stack_pointer = 100816;
 var global$1 = 100816;
 var i64toi32_i32$HIGH_BITS = 0;
 function __wasm_call_ctors() {
  
 }
 
 function __wasm_init_memory() {
  wasm2js_memory_fill(30816, 0, 4456);
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  $0 = __imported_wasi_snapshot_preview1_fd_close(HEAP32[$0 + 56 >> 2]) & 65535;
  if ($0) {
   HEAP32[7704] = $0;
   $0 = -1;
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function writev($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = -1;
  label$1 : {
   if (($2 | 0) < 0) {
    HEAP32[7704] = 28;
    break label$1;
   }
   $0 = __imported_wasi_snapshot_preview1_fd_write($0 | 0, $1 | 0, $2 | 0, $3 + 12 | 0) & 65535;
   if ($0) {
    HEAP32[7704] = $0;
    break label$1;
   }
   $4 = HEAP32[$3 + 12 >> 2];
  }
  __stack_pointer = $3 + 16 | 0;
  return $4;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $2;
  HEAP32[$4 + 8 >> 2] = $1;
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP32[$4 >> 2] = $1;
  $1 = HEAP32[$0 + 20 >> 2] - $1 | 0;
  HEAP32[$4 + 4 >> 2] = $1;
  $8 = 2;
  $9 = $1 + $2 | 0;
  $3 = writev(HEAP32[$0 + 56 >> 2], $4, 2);
  label$1 : {
   if (($9 | 0) != ($3 | 0)) {
    $1 = $4;
    while (1) {
     if (($3 | 0) < 0) {
      HEAP32[$0 + 24 >> 2] = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
      $0 = 0;
      if (($8 | 0) == 2) {
       break label$1
      }
      $0 = $2 - HEAP32[$1 + 4 >> 2] | 0;
      break label$1;
     }
     $5 = HEAP32[$1 + 4 >> 2];
     $6 = $5 >>> 0 < $3 >>> 0;
     $7 = ($6 << 3) + $1 | 0;
     $5 = $3 - ($6 ? $5 : 0) | 0;
     HEAP32[$7 >> 2] = $5 + HEAP32[$7 >> 2];
     $7 = ($6 ? 12 : 4) + $1 | 0;
     HEAP32[$7 >> 2] = HEAP32[$7 >> 2] - $5;
     $9 = $9 - $3 | 0;
     $1 = $6 ? $1 + 8 | 0 : $1;
     $8 = $8 - $6 | 0;
     $3 = writev(HEAP32[$0 + 56 >> 2], $1, $8);
     if (($9 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $1 = HEAP32[$0 + 40 >> 2];
   HEAP32[$0 + 24 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 44 >> 2];
   $0 = $2;
  }
  $3 = $0;
  __stack_pointer = $4 + 16 | 0;
  return $3 | 0;
 }
 
 function __stdio_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = legalimport$__imported_wasi_snapshot_preview1_fd_seek(HEAP32[$0 + 56 >> 2], $1 | 0, $2 | 0, $3 & 255, $4 + 8 | 0) & 65535;
  label$1 : {
   if ($0) {
    HEAP32[7704] = ($0 | 0) == 76 ? 70 : $0;
    $0 = -1;
    $1 = -1;
    break label$1;
   }
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
  }
  __stack_pointer = $4 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $0;
  return $1 | 0;
 }
 
 function __towrite($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 60 >> 2];
  HEAP32[$0 + 60 >> 2] = $1 - 1 | $1;
  $1 = HEAP32[$0 >> 2];
  if ($1 & 8) {
   HEAP32[$0 >> 2] = $1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  HEAP32[$0 + 24 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 44 >> 2];
  return 0;
 }
 
 function memcpy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 <= 32) {
     if (!($1 & 3) | !$2) {
      break label$2
     }
     HEAP8[$0 | 0] = HEAPU8[$1 | 0];
     $4 = $1 + 1 | 0;
     $5 = $2 - 1 | 0;
     $3 = $0 + 1 | 0;
     if (!($4 & 3) | !$5) {
      break label$1
     }
     HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 1 | 0];
     $4 = $1 + 2 | 0;
     $5 = $2 - 2 | 0;
     $3 = $0 + 2 | 0;
     if (!($4 & 3) | !$5) {
      break label$1
     }
     HEAP8[$0 + 2 | 0] = HEAPU8[$1 + 2 | 0];
     $4 = $1 + 3 | 0;
     $5 = $2 - 3 | 0;
     $3 = $0 + 3 | 0;
     if (!($4 & 3) | !$5) {
      break label$1
     }
     HEAP8[$0 + 3 | 0] = HEAPU8[$1 + 3 | 0];
     $5 = $2 - 4 | 0;
     $4 = $1 + 4 | 0;
     $3 = $0 + 4 | 0;
     break label$1;
    }
    wasm2js_memory_copy($0, $1, $2);
    return $0;
   }
   $5 = $2;
   $4 = $1;
   $3 = $0;
  }
  $1 = $3 & 3;
  label$4 : {
   if (!$1) {
    label$6 : {
     if ($5 >>> 0 >= 16) {
      $2 = $5 - 16 | 0;
      if (!($2 & 16)) {
       $1 = HEAP32[$4 + 4 >> 2];
       HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$3 + 4 >> 2] = $1;
       $1 = HEAP32[$4 + 12 >> 2];
       HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
       HEAP32[$3 + 12 >> 2] = $1;
       $3 = $3 + 16 | 0;
       $4 = $4 + 16 | 0;
       $5 = $2;
      }
      if ($2 >>> 0 < 16) {
       break label$6
      }
      while (1) {
       $1 = HEAP32[$4 + 4 >> 2];
       HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$3 + 4 >> 2] = $1;
       $2 = $4 + 8 | 0;
       $6 = HEAP32[$2 + 4 >> 2];
       $1 = $3 + 8 | 0;
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $6;
       $2 = $4 + 16 | 0;
       $6 = HEAP32[$2 + 4 >> 2];
       $1 = $3 + 16 | 0;
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $6;
       $2 = $4 + 24 | 0;
       $6 = HEAP32[$2 + 4 >> 2];
       $1 = $3 + 24 | 0;
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $6;
       $3 = $3 + 32 | 0;
       $4 = $4 + 32 | 0;
       $5 = $5 - 32 | 0;
       if ($5 >>> 0 > 15) {
        continue
       }
       break;
      };
     }
     $2 = $5;
    }
    if ($2 & 8) {
     $1 = HEAP32[$4 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$3 + 4 >> 2] = $1;
     $4 = $4 + 8 | 0;
     $3 = $3 + 8 | 0;
    }
    if ($2 & 4) {
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     $4 = $4 + 4 | 0;
     $3 = $3 + 4 | 0;
    }
    if ($2 & 2) {
     $1 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8;
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     $4 = $4 + 2 | 0;
     $3 = $3 + 2 | 0;
    }
    if (!($2 & 1)) {
     break label$4
    }
    HEAP8[$3 | 0] = HEAPU8[$4 | 0];
    return $0;
   }
   label$13 : {
    label$14 : {
     label$15 : {
      label$16 : {
       if ($5 >>> 0 >= 32) {
        label$18 : {
         switch ($1 - 1 | 0) {
         case 1:
          $1 = HEAP32[$4 >> 2];
          HEAP8[$3 | 0] = $1;
          HEAP8[$3 + 1 | 0] = $1 >>> 8;
          $1 = $4 + 2 | 0;
          HEAP32[$3 + 2 >> 2] = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
          $1 = $4 + 6 | 0;
          $2 = HEAPU16[$1 + 4 >> 1] | HEAPU16[$1 + 6 >> 1] << 16;
          HEAP32[$3 + 6 >> 2] = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
          HEAP32[$3 + 10 >> 2] = $2;
          $2 = $4 + 14 | 0;
          $6 = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
          $2 = 18;
          $5 = 14;
          $1 = 14;
          break label$15;
         case 0:
          break label$16;
         case 2:
          break label$18;
         default:
          break label$4;
         };
        }
        HEAP8[$3 | 0] = HEAP32[$4 >> 2];
        $1 = $4 + 1 | 0;
        HEAP32[$3 + 1 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
        $1 = $4 + 5 | 0;
        $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
        HEAP32[$3 + 5 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
        HEAP32[$3 + 9 >> 2] = $2;
        $2 = $4 + 13 | 0;
        $6 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
        $5 = 15;
        $2 = 17;
        $1 = 13;
        break label$15;
       }
       if ($5 & 16) {
        HEAP8[$3 | 0] = HEAPU8[$4 | 0];
        $1 = HEAPU8[$4 + 1 | 0] | HEAPU8[$4 + 2 | 0] << 8 | (HEAPU8[$4 + 3 | 0] << 16 | HEAPU8[$4 + 4 | 0] << 24);
        HEAP8[$3 + 1 | 0] = $1;
        HEAP8[$3 + 2 | 0] = $1 >>> 8;
        HEAP8[$3 + 3 | 0] = $1 >>> 16;
        HEAP8[$3 + 4 | 0] = $1 >>> 24;
        $1 = HEAPU8[$4 + 9 | 0] | HEAPU8[$4 + 10 | 0] << 8 | (HEAPU8[$4 + 11 | 0] << 16 | HEAPU8[$4 + 12 | 0] << 24);
        $2 = HEAPU8[$4 + 5 | 0] | HEAPU8[$4 + 6 | 0] << 8 | (HEAPU8[$4 + 7 | 0] << 16 | HEAPU8[$4 + 8 | 0] << 24);
        HEAP8[$3 + 5 | 0] = $2;
        HEAP8[$3 + 6 | 0] = $2 >>> 8;
        HEAP8[$3 + 7 | 0] = $2 >>> 16;
        HEAP8[$3 + 8 | 0] = $2 >>> 24;
        HEAP8[$3 + 9 | 0] = $1;
        HEAP8[$3 + 10 | 0] = $1 >>> 8;
        HEAP8[$3 + 11 | 0] = $1 >>> 16;
        HEAP8[$3 + 12 | 0] = $1 >>> 24;
        $1 = HEAPU8[$4 + 13 | 0] | HEAPU8[$4 + 14 | 0] << 8;
        HEAP8[$3 + 13 | 0] = $1;
        HEAP8[$3 + 14 | 0] = $1 >>> 8;
        HEAP8[$3 + 15 | 0] = HEAPU8[$4 + 15 | 0];
        $4 = $4 + 16 | 0;
        $3 = $3 + 16 | 0;
       }
       if ($5 & 8) {
        break label$14
       }
       break label$13;
      }
      $1 = HEAP32[$4 >> 2];
      HEAP8[$3 | 0] = $1;
      HEAP8[$3 + 2 | 0] = $1 >>> 16;
      HEAP8[$3 + 1 | 0] = $1 >>> 8;
      $1 = $4 + 3 | 0;
      HEAP32[$3 + 3 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      $1 = $4 + 7 | 0;
      $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      HEAP32[$3 + 7 >> 2] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP32[$3 + 11 >> 2] = $2;
      $2 = $4 + 15 | 0;
      $6 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
      $5 = 13;
      $2 = 19;
      $1 = 15;
     }
     HEAP32[$1 + $3 >> 2] = $6;
     $4 = $2 + $4 | 0;
     $3 = $2 + $3 | 0;
    }
    $1 = HEAPU8[$4 + 4 | 0] | HEAPU8[$4 + 5 | 0] << 8 | (HEAPU8[$4 + 6 | 0] << 16 | HEAPU8[$4 + 7 | 0] << 24);
    $2 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
    HEAP8[$3 | 0] = $2;
    HEAP8[$3 + 1 | 0] = $2 >>> 8;
    HEAP8[$3 + 2 | 0] = $2 >>> 16;
    HEAP8[$3 + 3 | 0] = $2 >>> 24;
    HEAP8[$3 + 4 | 0] = $1;
    HEAP8[$3 + 5 | 0] = $1 >>> 8;
    HEAP8[$3 + 6 | 0] = $1 >>> 16;
    HEAP8[$3 + 7 | 0] = $1 >>> 24;
    $3 = $3 + 8 | 0;
    $4 = $4 + 8 | 0;
   }
   if ($5 & 4) {
    $1 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    $4 = $4 + 4 | 0;
    $3 = $3 + 4 | 0;
   }
   if ($5 & 2) {
    $1 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8;
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    $4 = $4 + 2 | 0;
    $3 = $3 + 2 | 0;
   }
   if (!($5 & 1)) {
    break label$4
   }
   HEAP8[$3 | 0] = HEAPU8[$4 | 0];
  }
  return $0;
 }
 
 function __fwritex($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   $3 = HEAP32[$2 + 16 >> 2];
   if (!$3) {
    if (__towrite($2)) {
     break label$1
    }
    $3 = HEAP32[$2 + 16 >> 2];
   }
   $4 = HEAP32[$2 + 20 >> 2];
   if ($1 >>> 0 > $3 - $4 >>> 0) {
    FUNCTION_TABLE[HEAP32[$2 + 32 >> 2]]($2, $0, $1) | 0;
    return;
   }
   label$4 : {
    if (HEAP32[$2 + 64 >> 2] < 0) {
     break label$4
    }
    $3 = $0;
    while (1) {
     if (($1 | 0) == ($5 | 0)) {
      break label$4
     }
     $5 = $5 + 1 | 0;
     $6 = $1 + $3 | 0;
     $3 = $3 - 1 | 0;
     if (HEAPU8[$6 - 1 | 0] != 10) {
      continue
     }
     break;
    };
    $4 = $0;
    $0 = ($1 - $5 | 0) + 1 | 0;
    if (FUNCTION_TABLE[HEAP32[$2 + 32 >> 2]]($2, $4, $0) >>> 0 < $0 >>> 0) {
     break label$1
    }
    $0 = ($1 + $3 | 0) + 1 | 0;
    $4 = HEAP32[$2 + 20 >> 2];
    $1 = $5 - 1 | 0;
   }
   memcpy($4, $0, $1);
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
  }
 }
 
 function wctomb($0, $1) {
  if (!$0) {
   return 0
  }
  if ($0) {
   __inlined_func$wcrtomb : {
    if ($1 >>> 0 <= 127) {
     HEAP8[$0 | 0] = $1;
     $0 = 1;
     break __inlined_func$wcrtomb;
    }
    label$3 : {
     if (!HEAP32[7707]) {
      if (($1 & -128) != 57216) {
       break label$3
      }
      HEAP8[$0 | 0] = $1;
      $0 = 1;
      break __inlined_func$wcrtomb;
     }
     if ($1 >>> 0 <= 2047) {
      HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 6 | 192;
      $0 = 2;
      break __inlined_func$wcrtomb;
     }
     if (!(($1 & -8192) != 57344 & $1 >>> 0 >= 55296)) {
      HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 12 | 224;
      HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
      $0 = 3;
      break __inlined_func$wcrtomb;
     }
     if ($1 - 65536 >>> 0 <= 1048575) {
      HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 18 | 240;
      HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
      HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
      $0 = 4;
      break __inlined_func$wcrtomb;
     }
    }
    HEAP32[7704] = 25;
    $0 = -1;
   }
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function memset($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  if ($2 >>> 0 >= 33) {
   wasm2js_memory_fill($0, $1, $2);
   return $0;
  }
  label$2 : {
   if (!$2) {
    break label$2
   }
   HEAP8[$0 | 0] = $1;
   $3 = $0 + $2 | 0;
   HEAP8[$3 - 1 | 0] = $1;
   if ($2 >>> 0 < 3) {
    break label$2
   }
   HEAP8[$0 + 2 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1;
   HEAP8[$3 - 3 | 0] = $1;
   HEAP8[$3 - 2 | 0] = $1;
   if ($2 >>> 0 < 7) {
    break label$2
   }
   HEAP8[$0 + 3 | 0] = $1;
   HEAP8[$3 - 4 | 0] = $1;
   if ($2 >>> 0 < 9) {
    break label$2
   }
   $5 = 0 - $0 & 3;
   $4 = $5 + $0 | 0;
   $3 = Math_imul($1 & 255, 16843009);
   HEAP32[$4 >> 2] = $3;
   $2 = $2 - $5 & -4;
   $1 = $2 + $4 | 0;
   HEAP32[$1 - 4 >> 2] = $3;
   if ($2 >>> 0 < 9) {
    break label$2
   }
   HEAP32[$4 + 8 >> 2] = $3;
   HEAP32[$4 + 4 >> 2] = $3;
   HEAP32[$1 - 8 >> 2] = $3;
   HEAP32[$1 - 12 >> 2] = $3;
   if ($2 >>> 0 < 25) {
    break label$2
   }
   HEAP32[$4 + 24 >> 2] = $3;
   HEAP32[$4 + 20 >> 2] = $3;
   HEAP32[$4 + 16 >> 2] = $3;
   HEAP32[$4 + 12 >> 2] = $3;
   HEAP32[$1 - 16 >> 2] = $3;
   HEAP32[$1 - 20 >> 2] = $3;
   HEAP32[$1 - 24 >> 2] = $3;
   HEAP32[$1 - 28 >> 2] = $3;
   $1 = $2;
   $2 = $4 & 4 | 24;
   $1 = $1 - $2 | 0;
   if ($1 >>> 0 < 32) {
    break label$2
   }
   $5 = __wasm_i64_mul($3, 0, 1, 1);
   $3 = i64toi32_i32$HIGH_BITS;
   $2 = $2 + $4 | 0;
   while (1) {
    HEAP32[$2 >> 2] = $5;
    HEAP32[$2 + 4 >> 2] = $3;
    $4 = $2 + 24 | 0;
    HEAP32[$4 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = $3;
    $4 = $2 + 16 | 0;
    HEAP32[$4 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = $3;
    $4 = $2 + 8 | 0;
    HEAP32[$4 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $2 + 32 | 0;
    $1 = $1 - 32 | 0;
    if ($1 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function frexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $3 >>> 20 & 2047;
  if (($2 | 0) != 2047) {
   if (!$2) {
    if ($0 == 0.0) {
     HEAP32[$1 >> 2] = 0;
     return $0;
    }
    $0 = frexp($0 * 18446744073709551615.0, $1);
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + -64;
    return $0;
   }
   HEAP32[$1 >> 2] = $2 - 1022;
   wasm2js_scratch_store_i32(0, $4 | 0);
   wasm2js_scratch_store_i32(1, $3 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function vfprintf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 208 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 204 >> 2] = $2;
  $5 = $3 + 160 | 0;
  $4 = $5 + 32 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 184 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 176 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 168 >> 2] = 0;
  HEAP32[$3 + 172 >> 2] = 0;
  HEAP32[$3 + 160 >> 2] = 0;
  HEAP32[$3 + 164 >> 2] = 0;
  HEAP32[$3 + 200 >> 2] = $2;
  if ((printf_core(0, $1, $3 + 200 | 0, $3 + 80 | 0, $5) | 0) < 0) {
   $0 = -1
  } else {
   $4 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 60 >> 2] <= 0) {
    HEAP32[$0 >> 2] = $4 & -33
   }
   label$4 : {
    label$5 : {
     label$6 : {
      if (!HEAP32[$0 + 44 >> 2]) {
       HEAP32[$0 + 44 >> 2] = 80;
       HEAP32[$0 + 24 >> 2] = 0;
       HEAP32[$0 + 16 >> 2] = 0;
       HEAP32[$0 + 20 >> 2] = 0;
       $5 = HEAP32[$0 + 40 >> 2];
       HEAP32[$0 + 40 >> 2] = $3;
       break label$6;
      }
      $5 = 0;
      if (HEAP32[$0 + 16 >> 2]) {
       break label$5
      }
     }
     $2 = -1;
     if (__towrite($0)) {
      break label$4
     }
    }
    $2 = printf_core($0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
   }
   if ($5) {
    FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, 0, 0) | 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = $5;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    $2 = 0;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $4 & 32;
   $0 = 0;
  }
  __stack_pointer = $3 + 208 | 0;
 }
 
 function printf_core($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9 = __stack_pointer - 880 | 0;
  __stack_pointer = $9;
  $6 = $9 + 68 | 0;
  $32 = $6 + 12 | 0;
  $34 = $9 + 55 | 0;
  $5 = $9 + 80 | 0;
  $35 = -2 - $5 | 0;
  $36 = $6 + 11 | 0;
  $33 = $5 | 8;
  $29 = $5 | 9;
  $37 = -10 - $6 | 0;
  $38 = $6 + 10 | 0;
  $39 = $9 + 404 | 0;
  $40 = $9 + 112 | 4;
  $41 = $9 + 400 | 0;
  $27 = $9 + 56 | 0;
  $5 = 0;
  label$1 : {
   label$2 : {
    label$4 : while (1) {
     label$3 : {
      $6 = $1;
      if ((2147483647 - $22 | 0) < ($5 | 0)) {
       break label$3
      }
      $22 = $5 + $22 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $5 = HEAPU8[$6 | 0];
          if ($5) {
           while (1) {
            label$11 : {
             $5 = $5 & 255;
             label$12 : {
              if ($5) {
               if (($5 | 0) != 37) {
                break label$11
               }
               $5 = $1;
               while (1) {
                if (HEAPU8[$1 + 1 | 0] != 37) {
                 break label$12
                }
                $5 = $5 + 1 | 0;
                $1 = $1 + 2 | 0;
                if (HEAPU8[$1 | 0] == 37) {
                 continue
                }
                break;
               };
               break label$12;
              }
              $5 = $1;
             }
             $5 = $5 - $6 | 0;
             $20 = 2147483647 - $22 | 0;
             if (($5 | 0) > ($20 | 0)) {
              break label$3
             }
             if (!(!$0 | HEAPU8[$0 | 0] & 32)) {
              __fwritex($6, $5, $0)
             }
             if ($5) {
              continue label$4
             }
             $5 = $1 + 1 | 0;
             $11 = -1;
             $10 = HEAP8[$1 + 1 | 0];
             $8 = $10 - 48 | 0;
             if (!(HEAPU8[$1 + 2 | 0] != 36 | $8 >>> 0 > 9)) {
              $10 = HEAP8[$1 + 3 | 0];
              $30 = 1;
              $11 = $8;
              $5 = $1 + 3 | 0;
             }
             $12 = 0;
             $1 = $10 - 32 | 0;
             label$17 : {
              if ($1 >>> 0 > 31) {
               break label$17
              }
              $1 = 1 << $1;
              if (!($1 & 75913)) {
               break label$17
              }
              $7 = $5 + 1 | 0;
              while (1) {
               $12 = $1 | $12;
               $5 = $7;
               $10 = HEAP8[$5 | 0];
               $1 = $10 - 32 | 0;
               if ($1 >>> 0 >= 32) {
                break label$17
               }
               $7 = $5 + 1 | 0;
               $1 = 1 << $1;
               if ($1 & 75913) {
                continue
               }
               break;
              };
             }
             if (($10 | 0) == 42) {
              $1 = HEAP8[$5 + 1 | 0] - 48 | 0;
              label$20 : {
               if (!(HEAPU8[$5 + 2 | 0] != 36 | $1 >>> 0 > 9)) {
                HEAP32[($1 << 2) + $4 >> 2] = 10;
                $7 = $5 + 3 | 0;
                $30 = 1;
                $13 = HEAP32[((HEAP8[$5 + 1 | 0] << 3) + $3 | 0) - 384 >> 2];
                break label$20;
               }
               if ($30) {
                break label$7
               }
               $7 = $5 + 1 | 0;
               if (!$0) {
                $30 = 0;
                $13 = 0;
                break label$8;
               }
               $1 = HEAP32[$2 >> 2];
               HEAP32[$2 >> 2] = $1 + 4;
               $30 = 0;
               $13 = HEAP32[$1 >> 2];
              }
              if (($13 | 0) >= 0) {
               break label$8
              }
              $13 = 0 - $13 | 0;
              $12 = $12 | 8192;
              break label$8;
             }
             $13 = 0;
             $1 = $10 - 48 | 0;
             if ($1 >>> 0 > 9) {
              $7 = $5;
              break label$8;
             }
             while (1) {
              if ($13 >>> 0 <= 214748364) {
               $8 = Math_imul($13, 10);
               $13 = 2147483647 - $8 >>> 0 < $1 >>> 0 ? -1 : $8 + $1 | 0;
               $1 = HEAP8[$5 + 1 | 0];
               $7 = $5 + 1 | 0;
               $5 = $7;
               $1 = $1 - 48 | 0;
               if ($1 >>> 0 < 10) {
                continue
               }
               if (($13 | 0) < 0) {
                break label$3
               }
               break label$8;
              }
              $1 = HEAP8[$5 + 1 | 0];
              $13 = -1;
              $5 = $5 + 1 | 0;
              $1 = $1 - 48 | 0;
              if ($1 >>> 0 < 10) {
               continue
              }
              break;
             };
             break label$3;
            }
            $1 = $1 + 1 | 0;
            $5 = HEAPU8[$1 | 0];
            continue;
           }
          }
          if ($0) {
           break label$1
          }
          if (!$30) {
           $22 = 0;
           break label$1;
          }
          label$27 : {
           $0 = HEAP32[$4 + 4 >> 2];
           if (!$0) {
            $1 = 1;
            break label$27;
           }
           pop_arg($3 + 8 | 0, $0, $2);
           $0 = HEAP32[$4 + 8 >> 2];
           if (!$0) {
            $1 = 2;
            break label$27;
           }
           pop_arg($3 + 16 | 0, $0, $2);
           $0 = HEAP32[$4 + 12 >> 2];
           if (!$0) {
            $1 = 3;
            break label$27;
           }
           pop_arg($3 + 24 | 0, $0, $2);
           $0 = HEAP32[$4 + 16 >> 2];
           if (!$0) {
            $1 = 4;
            break label$27;
           }
           pop_arg($3 + 32 | 0, $0, $2);
           $0 = HEAP32[$4 + 20 >> 2];
           if (!$0) {
            $1 = 5;
            break label$27;
           }
           pop_arg($3 + 40 | 0, $0, $2);
           $0 = HEAP32[$4 + 24 >> 2];
           if (!$0) {
            $1 = 6;
            break label$27;
           }
           pop_arg($3 + 48 | 0, $0, $2);
           $0 = HEAP32[$4 + 28 >> 2];
           if (!$0) {
            $1 = 7;
            break label$27;
           }
           pop_arg($3 + 56 | 0, $0, $2);
           $0 = HEAP32[$4 + 32 >> 2];
           if (!$0) {
            $1 = 8;
            break label$27;
           }
           pop_arg($3 - -64 | 0, $0, $2);
           $0 = HEAP32[$4 + 36 >> 2];
           if (!$0) {
            $1 = 9;
            break label$27;
           }
           pop_arg($3 + 72 | 0, $0, $2);
           $22 = 1;
           break label$1;
          }
          $1 = $1 << 2;
          while (1) {
           if (HEAP32[$1 + $4 >> 2]) {
            break label$7
           }
           $1 = $1 + 4 | 0;
           if (($1 | 0) != 40) {
            continue
           }
           break;
          };
          $22 = 1;
          break label$1;
         }
         $5 = 0;
         $10 = -1;
         label$38 : {
          if (HEAPU8[$7 | 0] != 46) {
           $1 = $7;
           $26 = 0;
           break label$38;
          }
          $8 = HEAP8[$7 + 1 | 0];
          if (($8 | 0) == 42) {
           $1 = HEAP8[$7 + 2 | 0] - 48 | 0;
           label$41 : {
            if (!(HEAPU8[$7 + 3 | 0] != 36 | $1 >>> 0 > 9)) {
             HEAP32[($1 << 2) + $4 >> 2] = 10;
             $1 = $7 + 4 | 0;
             $10 = HEAP32[((HEAP8[$7 + 2 | 0] << 3) + $3 | 0) - 384 >> 2];
             break label$41;
            }
            if ($30) {
             break label$7
            }
            $1 = $7 + 2 | 0;
            $10 = 0;
            if (!$0) {
             break label$41
            }
            $8 = HEAP32[$2 >> 2];
            HEAP32[$2 >> 2] = $8 + 4;
            $10 = HEAP32[$8 >> 2];
           }
           $26 = ($10 ^ -1) >>> 31 | 0;
           break label$38;
          }
          $1 = $7 + 1 | 0;
          $14 = $8 - 48 | 0;
          if ($14 >>> 0 > 9) {
           $26 = 1;
           $10 = 0;
           break label$38;
          }
          $7 = 0;
          while (1) {
           $10 = -1;
           $26 = 1;
           if ($7 >>> 0 <= 214748364) {
            $8 = Math_imul($7, 10);
            $10 = 2147483647 - $8 >>> 0 < $14 >>> 0 ? -1 : $8 + $14 | 0;
           }
           $7 = $10;
           $1 = $1 + 1 | 0;
           $14 = HEAP8[$1 | 0] - 48 | 0;
           if ($14 >>> 0 < 10) {
            continue
           }
           break;
          };
         }
         while (1) {
          $8 = $5;
          $5 = HEAP8[$1 | 0];
          if ($5 - 123 >>> 0 < 4294967238) {
           break label$7
          }
          $1 = $1 + 1 | 0;
          $5 = HEAPU8[($5 + Math_imul($8, 58) | 0) + 4623 | 0];
          if ($5 - 1 >>> 0 < 8) {
           continue
          }
          break;
         };
         label$48 : {
          label$49 : {
           if (($5 | 0) != 27) {
            if (!$5) {
             break label$7
            }
            if (($11 | 0) >= 0) {
             HEAP32[($11 << 2) + $4 >> 2] = $5;
             $7 = ($11 << 3) + $3 | 0;
             $5 = HEAP32[$7 + 4 >> 2];
             HEAP32[$9 + 56 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$9 + 60 >> 2] = $5;
             break label$49;
            }
            if (!$0) {
             $22 = 0;
             break label$1;
            }
            pop_arg($9 + 56 | 0, $5, $2);
            break label$48;
           }
           if (($11 | 0) >= 0) {
            break label$7
           }
          }
          $5 = 0;
          if (!$0) {
           continue
          }
         }
         $14 = $12 & -65537;
         $17 = $12 & 8192 ? $14 : $12;
         label$53 : {
          label$54 : {
           label$55 : {
            label$56 : {
             label$57 : {
              label$58 : {
               label$59 : {
                label$60 : {
                 label$61 : {
                  label$62 : {
                   label$63 : {
                    label$64 : {
                     label$65 : {
                      label$66 : {
                       label$67 : {
                        label$68 : {
                         label$69 : {
                          label$70 : {
                           label$71 : {
                            $5 = HEAP8[$1 - 1 | 0];
                            $24 = $8 ? (($5 & 15) == 3 ? $5 & -33 : $5) : $5;
                            switch ($24 - 65 | 0) {
                            case 0:
                            case 4:
                            case 5:
                            case 6:
                            case 32:
                            case 36:
                            case 37:
                            case 38:
                             break label$55;
                            case 2:
                             break label$58;
                            case 18:
                             break label$59;
                            case 50:
                             break label$61;
                            case 44:
                             break label$62;
                            case 34:
                             break label$63;
                            case 35:
                            case 40:
                             break label$66;
                            case 46:
                             break label$67;
                            case 23:
                            case 55:
                             break label$68;
                            case 47:
                             break label$69;
                            case 45:
                             break label$70;
                            case 52:
                             break label$71;
                            default:
                             break label$54;
                            };
                           }
                           $11 = 0;
                           $7 = HEAP32[$9 + 56 >> 2];
                           $5 = HEAP32[$9 + 60 >> 2];
                           $18 = 2750;
                           break label$65;
                          }
                          $5 = 0;
                          label$72 : {
                           switch ($8 & 255) {
                           case 0:
                            HEAP32[HEAP32[$9 + 56 >> 2] >> 2] = $22;
                            continue;
                           case 1:
                            HEAP32[HEAP32[$9 + 56 >> 2] >> 2] = $22;
                            continue;
                           case 2:
                            $6 = HEAP32[$9 + 56 >> 2];
                            HEAP32[$6 >> 2] = $22;
                            HEAP32[$6 + 4 >> 2] = $22 >> 31;
                            continue;
                           case 3:
                            HEAP16[HEAP32[$9 + 56 >> 2] >> 1] = $22;
                            continue;
                           case 4:
                            HEAP8[HEAP32[$9 + 56 >> 2]] = $22;
                            continue;
                           case 6:
                            HEAP32[HEAP32[$9 + 56 >> 2] >> 2] = $22;
                            continue;
                           case 7:
                            break label$72;
                           default:
                            continue;
                           };
                          }
                          $6 = HEAP32[$9 + 56 >> 2];
                          HEAP32[$6 >> 2] = $22;
                          HEAP32[$6 + 4 >> 2] = $22 >> 31;
                          continue;
                         }
                         $10 = $10 >>> 0 > 8 ? $10 : 8;
                         $17 = $17 | 8;
                         $24 = 120;
                        }
                        $11 = 0;
                        $18 = 2750;
                        $7 = HEAP32[$9 + 56 >> 2];
                        $5 = HEAP32[$9 + 60 >> 2];
                        if (!($7 | $5)) {
                         $6 = $27;
                         break label$64;
                        }
                        $15 = $24 & 32;
                        $6 = $27;
                        while (1) {
                         $6 = $6 - 1 | 0;
                         HEAP8[$6 | 0] = $15 | HEAPU8[($7 & 15) + 5152 | 0];
                         $8 = !$5 & $7 >>> 0 > 15 | ($5 | 0) != 0;
                         $7 = ($5 & 15) << 28 | $7 >>> 4;
                         $5 = $5 >>> 4 | 0;
                         if ($8) {
                          continue
                         }
                         break;
                        };
                        if (!($17 & 8)) {
                         break label$64
                        }
                        $18 = ($24 >> 4) + 2750 | 0;
                        $11 = 2;
                        break label$64;
                       }
                       $6 = $27;
                       $7 = HEAP32[$9 + 56 >> 2];
                       $5 = HEAP32[$9 + 60 >> 2];
                       if ($7 | $5) {
                        while (1) {
                         $6 = $6 - 1 | 0;
                         HEAP8[$6 | 0] = $7 & 7 | 48;
                         $8 = !$5 & $7 >>> 0 > 7 | ($5 | 0) != 0;
                         $7 = ($5 & 7) << 29 | $7 >>> 3;
                         $5 = $5 >>> 3 | 0;
                         if ($8) {
                          continue
                         }
                         break;
                        }
                       }
                       $11 = 0;
                       $18 = 2750;
                       if (!($17 & 8)) {
                        break label$64
                       }
                       $5 = $27 - $6 | 0;
                       $10 = ($5 | 0) < ($10 | 0) ? $10 : $5 + 1 | 0;
                       break label$64;
                      }
                      $7 = HEAP32[$9 + 56 >> 2];
                      $5 = HEAP32[$9 + 60 >> 2];
                      if (($5 | 0) < 0) {
                       $5 = 0 - ((($7 | 0) != 0) + $5 | 0) | 0;
                       $7 = 0 - $7 | 0;
                       HEAP32[$9 + 56 >> 2] = $7;
                       HEAP32[$9 + 60 >> 2] = $5;
                       $11 = 1;
                       $18 = 2750;
                       break label$65;
                      }
                      if ($17 & 2048) {
                       $11 = 1;
                       $18 = 2751;
                       break label$65;
                      }
                      $11 = $17 & 1;
                      $18 = $11 ? 2752 : 2750;
                     }
                     label$85 : {
                      if (!(($5 | 0) == 1 | $5 >>> 0 > 1)) {
                       $8 = $7;
                       $6 = $27;
                       break label$85;
                      }
                      $6 = $27;
                      while (1) {
                       $6 = $6 - 1 | 0;
                       $8 = __wasm_i64_udiv($7, $5, 10);
                       $15 = i64toi32_i32$HIGH_BITS;
                       (wasm2js_i32$0 = $6, wasm2js_i32$1 = $7 - __wasm_i64_mul($8, $15, 10, 0) | 48), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
                       $14 = $5 >>> 0 > 9;
                       $7 = $8;
                       $5 = $15;
                       if ($14) {
                        continue
                       }
                       break;
                      };
                     }
                     $5 = $8;
                     if (!$5) {
                      break label$64
                     }
                     while (1) {
                      $6 = $6 - 1 | 0;
                      $8 = ($5 >>> 0) / 10 | 0;
                      HEAP8[$6 | 0] = $5 - Math_imul($8, 10) | 48;
                      $7 = $5 >>> 0 > 9;
                      $5 = $8;
                      if ($7) {
                       continue
                      }
                      break;
                     };
                    }
                    if (!!$26 & ($10 | 0) < 0) {
                     break label$3
                    }
                    $14 = $26 ? $17 & -65537 : $17;
                    label$90 : {
                     $8 = HEAP32[$9 + 56 >> 2];
                     $5 = HEAP32[$9 + 60 >> 2];
                     if ($8 | $5) {
                      break label$90
                     }
                     $12 = 0;
                     if ($10) {
                      break label$90
                     }
                     $6 = $27;
                     $5 = $6;
                     break label$53;
                    }
                    $5 = !($5 | $8) + ($27 - $6 | 0) | 0;
                    $12 = ($5 | 0) < ($10 | 0) ? $10 : $5;
                    $5 = $27;
                    break label$53;
                   }
                   HEAP8[$9 + 55 | 0] = HEAP32[$9 + 56 >> 2];
                   $11 = 0;
                   $18 = 2750;
                   $12 = 1;
                   $6 = $34;
                   $5 = $27;
                   break label$53;
                  }
                  $5 = HEAP32[7704];
                  if (!HEAP32[7713]) {
                   HEAP32[7713] = 30828
                  }
                  $6 = HEAPU16[(($5 >>> 0 > 76 ? 0 : $5) << 1) + 2592 >> 1] + 1028 | 0;
                  break label$60;
                 }
                 $5 = HEAP32[$9 + 56 >> 2];
                 $6 = $5 ? $5 : 4366;
                }
                $11 = 0;
                $18 = 2750;
                $5 = ($10 | 0) < 0 ? 2147483647 : $10;
                $15 = ($5 | 0) != 0;
                __inlined_func$memchr : {
                 label$13 : {
                  label$25 : {
                   label$36 : {
                    if (!(!($6 & 3) | !$5)) {
                     if (!HEAPU8[$6 | 0]) {
                      $7 = $6;
                      $8 = $5;
                      break label$25;
                     }
                     $8 = $5 - 1 | 0;
                     $15 = ($8 | 0) != 0;
                     $7 = $6 + 1 | 0;
                     if (!($7 & 3) | !$8) {
                      break label$36
                     }
                     if (!HEAPU8[$7 | 0]) {
                      break label$25
                     }
                     $8 = $5 - 2 | 0;
                     $15 = ($8 | 0) != 0;
                     $7 = $6 + 2 | 0;
                     if (!($7 & 3) | !$8) {
                      break label$36
                     }
                     if (!HEAPU8[$7 | 0]) {
                      break label$25
                     }
                     $8 = $5 - 3 | 0;
                     $15 = ($8 | 0) != 0;
                     $7 = $6 + 3 | 0;
                     if (!($7 & 3) | !$8) {
                      break label$36
                     }
                     if (!HEAPU8[$7 | 0]) {
                      break label$25
                     }
                     $7 = $6 + 4 | 0;
                     $8 = $5 - 4 | 0;
                     $15 = ($8 | 0) != 0;
                     break label$36;
                    }
                    $8 = $5;
                    $7 = $6;
                   }
                   if (!$15) {
                    break label$13
                   }
                  }
                  label$610 : {
                   if (!HEAPU8[$7 | 0] | $8 >>> 0 < 4) {
                    break label$610
                   }
                   while (1) {
                    $15 = HEAP32[$7 >> 2];
                    if (($15 ^ -1) & $15 - 16843009 & -2139062144) {
                     break label$610
                    }
                    $7 = $7 + 4 | 0;
                    $8 = $8 - 4 | 0;
                    if ($8 >>> 0 > 3) {
                     continue
                    }
                    break;
                   };
                  }
                  if (!$8) {
                   break label$13
                  }
                  while (1) {
                   if (!HEAPU8[$7 | 0]) {
                    break __inlined_func$memchr
                   }
                   $7 = $7 + 1 | 0;
                   $8 = $8 - 1 | 0;
                   if ($8) {
                    continue
                   }
                   break;
                  };
                 }
                 $7 = 0;
                }
                $8 = $7;
                $12 = $8 ? $8 - $6 | 0 : $5;
                $5 = $12 + $6 | 0;
                if (!HEAPU8[$5 | 0] | ($10 | 0) >= 0) {
                 break label$53
                }
                break label$3;
               }
               $7 = HEAP32[$9 + 56 >> 2];
               if ($10) {
                break label$57
               }
               $5 = 0;
               break label$56;
              }
              HEAP32[$9 + 12 >> 2] = 0;
              HEAP32[$9 + 8 >> 2] = HEAP32[$9 + 56 >> 2];
              $5 = $9 + 8 | 0;
              HEAP32[$9 + 56 >> 2] = $5;
              $10 = -1;
              $7 = $5;
             }
             $5 = 0;
             $6 = $7;
             label$91 : {
              while (1) {
               $8 = HEAP32[$6 >> 2];
               if (!$8) {
                break label$91
               }
               $11 = wctomb($9 + 4 | 0, $8);
               $8 = ($11 | 0) < 0;
               if (!($8 | $11 >>> 0 > $10 - $5 >>> 0)) {
                $6 = $6 + 4 | 0;
                $5 = $5 + $11 | 0;
                if ($10 >>> 0 > $5 >>> 0) {
                 continue
                }
                break label$91;
               }
               break;
              };
              if ($8) {
               break label$2
              }
             }
             if (($5 | 0) < 0) {
              break label$3
             }
            }
            $11 = $17 & 73728;
            label$94 : {
             if ($11 | ($5 | 0) >= ($13 | 0)) {
              break label$94
             }
             $6 = $13 - $5 | 0;
             $8 = $6 >>> 0 < 256;
             memset($9 + 112 | 0, 32, $8 ? $6 : 256);
             if (!$8) {
              while (1) {
               if (!(HEAPU8[$0 | 0] & 32)) {
                __fwritex($9 + 112 | 0, 256, $0)
               }
               $6 = $6 - 256 | 0;
               if ($6 >>> 0 > 255) {
                continue
               }
               break;
              }
             }
             if (HEAPU8[$0 | 0] & 32) {
              break label$94
             }
             __fwritex($9 + 112 | 0, $6, $0);
            }
            label$98 : {
             if (!$5) {
              break label$98
             }
             $6 = 0;
             while (1) {
              $8 = HEAP32[$7 >> 2];
              if (!$8) {
               break label$98
              }
              $8 = wctomb($9 + 4 | 0, $8);
              $6 = $8 + $6 | 0;
              if ($6 >>> 0 > $5 >>> 0) {
               break label$98
              }
              if (!(HEAPU8[$0 | 0] & 32)) {
               __fwritex($9 + 4 | 0, $8, $0)
              }
              $7 = $7 + 4 | 0;
              if ($5 >>> 0 > $6 >>> 0) {
               continue
              }
              break;
             };
            }
            label$101 : {
             if (($11 | 0) != 8192 | ($5 | 0) >= ($13 | 0)) {
              break label$101
             }
             $6 = $13 - $5 | 0;
             $8 = $6 >>> 0 < 256;
             memset($9 + 112 | 0, 32, $8 ? $6 : 256);
             if (!$8) {
              while (1) {
               if (!(HEAPU8[$0 | 0] & 32)) {
                __fwritex($9 + 112 | 0, 256, $0)
               }
               $6 = $6 - 256 | 0;
               if ($6 >>> 0 > 255) {
                continue
               }
               break;
              }
             }
             if (HEAPU8[$0 | 0] & 32) {
              break label$101
             }
             __fwritex($9 + 112 | 0, $6, $0);
            }
            $5 = ($5 | 0) < ($13 | 0) ? $13 : $5;
            continue;
           }
           if (!!$26 & ($10 | 0) < 0) {
            break label$3
           }
           $16 = HEAPF64[$9 + 56 >> 3];
           HEAP32[$9 + 108 >> 2] = 0;
           wasm2js_scratch_store_f64(+$16);
           $5 = wasm2js_scratch_load_i32(1) | 0;
           wasm2js_scratch_load_i32(0) | 0;
           label$106 : {
            if (($5 | 0) < 0) {
             $16 = -$16;
             $28 = 1;
             $31 = 2760;
             $25 = 0;
             break label$106;
            }
            if ($17 & 2048) {
             $28 = 1;
             $31 = 2763;
             $25 = 0;
             break label$106;
            }
            $28 = $17 & 1;
            $31 = $28 ? 2766 : 2761;
            $25 = !$28;
           }
           if (!(Math_abs($16) < infinity)) {
            $8 = $28 + 3 | 0;
            label$110 : {
             if ($17 & 8192 | ($8 | 0) >= ($13 | 0)) {
              break label$110
             }
             $5 = $13 - $8 | 0;
             $6 = $5 >>> 0 < 256;
             memset($9 + 624 | 0, 32, $6 ? $5 : 256);
             if (!$6) {
              while (1) {
               if (!(HEAPU8[$0 | 0] & 32)) {
                __fwritex($9 + 624 | 0, 256, $0)
               }
               $5 = $5 - 256 | 0;
               if ($5 >>> 0 > 255) {
                continue
               }
               break;
              }
             }
             if (HEAPU8[$0 | 0] & 32) {
              break label$110
             }
             __fwritex($9 + 624 | 0, $5, $0);
            }
            $5 = HEAP32[$0 >> 2];
            if (!($5 & 32)) {
             __fwritex($31, $28, $0);
             $5 = HEAP32[$0 >> 2];
            }
            if (!($5 & 32)) {
             $5 = $24 & 32;
             __fwritex($16 != $16 ? ($5 ? 3473 : 4250) : $5 ? 3509 : 4270, 3, $0);
            }
            label$116 : {
             if (($17 & 73728) != 8192 | ($8 | 0) >= ($13 | 0)) {
              break label$116
             }
             $5 = $13 - $8 | 0;
             $6 = $5 >>> 0 < 256;
             memset($9 + 624 | 0, 32, $6 ? $5 : 256);
             if (!$6) {
              while (1) {
               if (!(HEAPU8[$0 | 0] & 32)) {
                __fwritex($9 + 624 | 0, 256, $0)
               }
               $5 = $5 - 256 | 0;
               if ($5 >>> 0 > 255) {
                continue
               }
               break;
              }
             }
             if (HEAPU8[$0 | 0] & 32) {
              break label$116
             }
             __fwritex($9 + 624 | 0, $5, $0);
            }
            $5 = ($8 | 0) < ($13 | 0) ? $13 : $8;
            continue;
           }
           label$120 : {
            label$121 : {
             $23 = frexp($16, $9 + 108 | 0);
             $16 = $23 + $23;
             if ($16 != 0.0) {
              $5 = HEAP32[$9 + 108 >> 2];
              HEAP32[$9 + 108 >> 2] = $5 - 1;
              $18 = $24 | 32;
              if (($18 | 0) != 97) {
               break label$121
              }
              break label$6;
             }
             $18 = $24 | 32;
             if (($18 | 0) == 97) {
              break label$6
             }
             $7 = HEAP32[$9 + 108 >> 2];
             $11 = ($10 | 0) < 0 ? 6 : $10;
             break label$120;
            }
            $7 = $5 - 29 | 0;
            HEAP32[$9 + 108 >> 2] = $7;
            $16 = $16 * 268435456.0;
            $11 = ($10 | 0) < 0 ? 6 : $10;
           }
           $20 = ($7 | 0) < 0;
           $15 = $20 ? $9 + 112 | 0 : $41;
           $6 = $15;
           while (1) {
            $5 = $16 < 4294967296.0 & $16 >= 0.0 ? ~~$16 >>> 0 : 0;
            HEAP32[$6 >> 2] = $5;
            $6 = $6 + 4 | 0;
            $16 = ($16 - +($5 >>> 0)) * 1.0e9;
            if ($16 != 0.0) {
             continue
            }
            break;
           };
           label$126 : {
            if (($7 | 0) <= 0) {
             $5 = $6;
             $8 = $15;
             break label$126;
            }
            $8 = $15;
            while (1) {
             $14 = $7 >>> 0 < 29 ? $7 : 29;
             $5 = $6 - 4 | 0;
             label$129 : {
              if ($8 >>> 0 > $5 >>> 0) {
               break label$129
              }
              $7 = 0;
              while (1) {
               $10 = HEAP32[$5 >> 2];
               $21 = $14 & 31;
               if (($14 & 63) >>> 0 >= 32) {
                $12 = $10 << $21;
                $10 = 0;
               } else {
                $12 = (1 << $21) - 1 & $10 >>> 32 - $21;
                $10 = $10 << $21;
               }
               $10 = $10 + $7 | 0;
               $7 = __wasm_i64_udiv($10, $7 >>> 0 > $10 >>> 0 ? $12 + 1 | 0 : $12, 1e9);
               (wasm2js_i32$0 = $5, wasm2js_i32$1 = $10 - __wasm_i64_mul($7, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               $5 = $5 - 4 | 0;
               if ($8 >>> 0 <= $5 >>> 0) {
                continue
               }
               break;
              };
              if (!$7) {
               break label$129
              }
              $8 = $8 - 4 | 0;
              HEAP32[$8 >> 2] = $7;
             }
             while (1) {
              $5 = $6;
              if ($5 >>> 0 > $8 >>> 0) {
               $6 = $5 - 4 | 0;
               if (!HEAP32[$6 >> 2]) {
                continue
               }
              }
              break;
             };
             $7 = HEAP32[$9 + 108 >> 2] - $14 | 0;
             HEAP32[$9 + 108 >> 2] = $7;
             $6 = $5;
             if (($7 | 0) > 0) {
              continue
             }
             break;
            };
           }
           if (($7 | 0) < 0) {
            $21 = (($11 + 25 >>> 0) / 9 | 0) + 1 | 0;
            while (1) {
             $6 = 0 - $7 | 0;
             $19 = $6 >>> 0 < 9 ? $6 : 9;
             label$135 : {
              if ($5 >>> 0 <= $8 >>> 0) {
               $6 = HEAP32[$8 >> 2];
               break label$135;
              }
              $12 = 1e9 >>> $19 | 0;
              $14 = -1 << $19 ^ -1;
              $7 = 0;
              $6 = $8;
              while (1) {
               $10 = HEAP32[$6 >> 2];
               HEAP32[$6 >> 2] = $7 + ($10 >>> $19 | 0);
               $7 = Math_imul($12, $10 & $14);
               $6 = $6 + 4 | 0;
               if ($6 >>> 0 < $5 >>> 0) {
                continue
               }
               break;
              };
              $6 = HEAP32[$8 >> 2];
              if (!$7) {
               break label$135
              }
              HEAP32[$5 >> 2] = $7;
              $5 = $5 + 4 | 0;
             }
             $7 = $19 + HEAP32[$9 + 108 >> 2] | 0;
             HEAP32[$9 + 108 >> 2] = $7;
             $8 = (!$6 << 2) + $8 | 0;
             $6 = ($18 | 0) == 102 ? $15 : $8;
             $5 = ($21 | 0) < $5 - $6 >> 2 ? $6 + ($21 << 2) | 0 : $5;
             if (($7 | 0) < 0) {
              continue
             }
             break;
            };
           }
           $12 = 0;
           label$138 : {
            if ($5 >>> 0 <= $8 >>> 0) {
             break label$138
            }
            $12 = Math_imul($15 - $8 >> 2, 9);
            $7 = HEAP32[$8 >> 2];
            if ($7 >>> 0 < 10) {
             break label$138
            }
            $6 = 10;
            while (1) {
             $12 = $12 + 1 | 0;
             $6 = Math_imul($6, 10);
             if ($7 >>> 0 >= $6 >>> 0) {
              continue
             }
             break;
            };
           }
           $26 = ($18 | 0) == 103;
           $6 = ($11 - (($18 | 0) == 102 ? 0 : $12) | 0) - ($26 & ($11 | 0) != 0) | 0;
           if (($6 | 0) < (Math_imul($5 - $15 >> 2, 9) - 9 | 0)) {
            $10 = $6 + 9216 | 0;
            $7 = ($10 | 0) / 9 | 0;
            $20 = ($7 << 2) + ($20 ? $40 : $39) | 0;
            $14 = $20 - 4096 | 0;
            $6 = 10;
            $21 = $10 - Math_imul($7, 9) | 0;
            label$141 : {
             if (($21 | 0) > 7) {
              break label$141
             }
             $10 = 8 - $21 | 0;
             $7 = $10 & 7;
             if ($21 - 1 >>> 0 >= 7) {
              $10 = $10 & -8;
              while (1) {
               $6 = Math_imul($6, 1e8);
               $10 = $10 - 8 | 0;
               if ($10) {
                continue
               }
               break;
              };
             }
             if (!$7) {
              break label$141
             }
             while (1) {
              $6 = Math_imul($6, 10);
              $7 = $7 - 1 | 0;
              if ($7) {
               continue
              }
              break;
             };
            }
            $21 = HEAP32[$14 >> 2];
            $10 = ($21 >>> 0) / ($6 >>> 0) | 0;
            $19 = $21 - Math_imul($6, $10) | 0;
            $7 = $14 + 4 | 0;
            label$145 : {
             if (!$19 & ($7 | 0) == ($5 | 0)) {
              break label$145
             }
             label$147 : {
              if (!($10 & 1)) {
               $16 = 9007199254740992.0;
               if (!(HEAP8[$14 - 4 | 0] & 1) | (($6 | 0) != 1e9 | $8 >>> 0 >= $14 >>> 0)) {
                break label$147
               }
              }
              $16 = 9007199254740994.0;
             }
             $23 = ($5 | 0) == ($7 | 0) ? 1.0 : 1.5;
             $7 = $6 >>> 1 | 0;
             $23 = $7 >>> 0 > $19 >>> 0 ? .5 : ($7 | 0) == ($19 | 0) ? $23 : 1.5;
             if (!(HEAPU8[$31 | 0] != 45 | $25)) {
              $16 = -$16;
              $23 = -$23;
             }
             $7 = $21 - $19 | 0;
             HEAP32[$14 >> 2] = $7;
             if ($16 + $23 == $16) {
              break label$145
             }
             $6 = $6 + $7 | 0;
             HEAP32[$14 >> 2] = $6;
             if ($6 >>> 0 >= 1e9) {
              $6 = $20 - 4100 | 0;
              while (1) {
               HEAP32[$6 + 4 >> 2] = 0;
               if ($6 >>> 0 < $8 >>> 0) {
                $8 = $8 - 4 | 0;
                HEAP32[$8 >> 2] = 0;
               }
               $7 = HEAP32[$6 >> 2] + 1 | 0;
               HEAP32[$6 >> 2] = $7;
               $6 = $6 - 4 | 0;
               if ($7 >>> 0 > 999999999) {
                continue
               }
               break;
              };
              $14 = $6 + 4 | 0;
             }
             $12 = Math_imul($15 - $8 >> 2, 9);
             $7 = HEAP32[$8 >> 2];
             if ($7 >>> 0 < 10) {
              break label$145
             }
             $6 = 10;
             while (1) {
              $12 = $12 + 1 | 0;
              $6 = Math_imul($6, 10);
              if ($7 >>> 0 >= $6 >>> 0) {
               continue
              }
              break;
             };
            }
            $6 = $14 + 4 | 0;
            $5 = $5 >>> 0 > $6 >>> 0 ? $6 : $5;
           }
           $6 = $5 - $15 | 0;
           while (1) {
            label$154 : {
             $7 = $6;
             $14 = $5;
             $10 = $5 >>> 0 <= $8 >>> 0;
             if ($10) {
              break label$154
             }
             $6 = $7 - 4 | 0;
             $5 = $14 - 4 | 0;
             if (!HEAP32[$5 >> 2]) {
              continue
             }
            }
            break;
           };
           label$156 : {
            if (!$26) {
             $18 = $17 & 8;
             break label$156;
            }
            $6 = $11 ? $11 : 1;
            $5 = ($6 | 0) > ($12 | 0) & ($12 | 0) > -5;
            $11 = ($5 ? $12 ^ -1 : -1) + $6 | 0;
            $24 = ($5 ? -1 : -2) + $24 | 0;
            $18 = $17 & 8;
            if ($18) {
             break label$156
            }
            $5 = -9;
            label$158 : {
             if ($10) {
              break label$158
             }
             $10 = HEAP32[$14 - 4 >> 2];
             if (!$10) {
              break label$158
             }
             $5 = 0;
             if (($10 >>> 0) % 10 | 0) {
              break label$158
             }
             $6 = 10;
             while (1) {
              $5 = $5 - 1 | 0;
              $6 = Math_imul($6, 10);
              if (!(($10 >>> 0) % ($6 >>> 0) | 0)) {
               continue
              }
              break;
             };
            }
            $6 = Math_imul($7 >> 2, 9) - 9 | 0;
            if (($24 & -33) == 70) {
             $18 = 0;
             $5 = $5 + $6 | 0;
             $5 = ($5 | 0) > 0 ? $5 : 0;
             $11 = ($5 | 0) > ($11 | 0) ? $11 : $5;
             break label$156;
            }
            $18 = 0;
            $5 = ($6 + $12 | 0) + $5 | 0;
            $5 = ($5 | 0) > 0 ? $5 : 0;
            $11 = ($5 | 0) > ($11 | 0) ? $11 : $5;
           }
           $21 = $11 | $18;
           if ((($21 ? 2147483645 : 2147483646) | 0) < ($11 | 0)) {
            break label$3
           }
           $19 = ((($21 | 0) != 0) + $11 | 0) + 1 | 0;
           $25 = ($24 & -33) != 70;
           label$161 : {
            if (!$25) {
             if ((2147483647 - $19 | 0) < ($12 | 0)) {
              break label$3
             }
             $5 = ($12 | 0) > 0 ? $12 : 0;
             break label$161;
            }
            $7 = $32;
            $6 = $7;
            $5 = $12 >> 31;
            $5 = $5 + $12 ^ $5;
            if ($5) {
             while (1) {
              $6 = $6 - 1 | 0;
              $10 = ($5 >>> 0) / 10 | 0;
              HEAP8[$6 | 0] = $5 - Math_imul($10, 10) | 48;
              $7 = $7 - 1 | 0;
              $20 = $5 >>> 0 > 9;
              $5 = $10;
              if ($20) {
               continue
              }
              break;
             }
            }
            if (($32 - $7 | 0) <= 1) {
             $6 = ($38 - $7 | 0) + $6 | 0;
             memset($6, 48, $7 + $37 | 0);
            }
            $26 = $6 - 2 | 0;
            HEAP8[$26 | 0] = $24;
            HEAP8[$6 - 1 | 0] = ($12 | 0) < 0 ? 45 : 43;
            $5 = $32 - $26 | 0;
            if (($5 | 0) > (2147483647 - $19 | 0)) {
             break label$3
            }
           }
           $5 = $5 + $19 | 0;
           if (($5 | 0) > ($28 ^ 2147483647)) {
            break label$3
           }
           $20 = $17 & 73728;
           $19 = $5 + $28 | 0;
           label$166 : {
            if ($20 | ($19 | 0) >= ($13 | 0)) {
             break label$166
            }
            $5 = $13 - $19 | 0;
            $6 = $5 >>> 0 < 256;
            memset($9 + 624 | 0, 32, $6 ? $5 : 256);
            if (!$6) {
             while (1) {
              if (!(HEAPU8[$0 | 0] & 32)) {
               __fwritex($9 + 624 | 0, 256, $0)
              }
              $5 = $5 - 256 | 0;
              if ($5 >>> 0 > 255) {
               continue
              }
              break;
             }
            }
            if (HEAPU8[$0 | 0] & 32) {
             break label$166
            }
            __fwritex($9 + 624 | 0, $5, $0);
           }
           if (!(HEAPU8[$0 | 0] & 32)) {
            __fwritex($31, $28, $0)
           }
           label$171 : {
            if (($20 | 0) != 65536 | ($13 | 0) <= ($19 | 0)) {
             break label$171
            }
            $5 = $13 - $19 | 0;
            $6 = $5 >>> 0 < 256;
            memset($9 + 624 | 0, 48, $6 ? $5 : 256);
            if (!$6) {
             while (1) {
              if (!(HEAPU8[$0 | 0] & 32)) {
               __fwritex($9 + 624 | 0, 256, $0)
              }
              $5 = $5 - 256 | 0;
              if ($5 >>> 0 > 255) {
               continue
              }
              break;
             }
            }
            if (HEAPU8[$0 | 0] & 32) {
             break label$171
            }
            __fwritex($9 + 624 | 0, $5, $0);
           }
           label$175 : {
            if (!$25) {
             $12 = $8 >>> 0 > $15 >>> 0 ? $15 : $8;
             $10 = $12;
             while (1) {
              $5 = HEAP32[$10 >> 2];
              label$178 : {
               if (!$5) {
                $8 = $29;
                $6 = $8;
                break label$178;
               }
               $8 = $29;
               $6 = $8;
               while (1) {
                $6 = $6 - 1 | 0;
                $7 = ($5 >>> 0) / 10 | 0;
                HEAP8[$6 | 0] = $5 - Math_imul($7, 10) | 48;
                $8 = $8 - 1 | 0;
                $17 = $5 >>> 0 > 9;
                $5 = $7;
                if ($17) {
                 continue
                }
                break;
               };
              }
              label$181 : {
               if (($10 | 0) != ($12 | 0)) {
                if ($9 + 80 >>> 0 >= $6 >>> 0) {
                 break label$181
                }
                $5 = $9 + 80 | 0;
                $6 = ($5 + $6 | 0) - $8 | 0;
                memset($6, 48, $8 - $5 | 0);
                break label$181;
               }
               if (($6 | 0) != ($29 | 0)) {
                break label$181
               }
               HEAP8[$9 + 88 | 0] = 48;
               $6 = $33;
              }
              if (!(HEAPU8[$0 | 0] & 32)) {
               __fwritex($6, $29 - $6 | 0, $0)
              }
              $10 = $10 + 4 | 0;
              if ($15 >>> 0 >= $10 >>> 0) {
               continue
              }
              break;
             };
             if (!(!$21 | HEAPU8[$0 | 0] & 32)) {
              __fwritex(4364, 1, $0)
             }
             label$185 : {
              if ($10 >>> 0 >= $14 >>> 0) {
               $5 = $11;
               break label$185;
              }
              if (($11 | 0) <= 0) {
               $5 = $11;
               break label$185;
              }
              while (1) {
               $5 = HEAP32[$10 >> 2];
               label$189 : {
                label$190 : {
                 if (!$5) {
                  $6 = $29;
                  $8 = $6;
                  break label$190;
                 }
                 $8 = $29;
                 $6 = $8;
                 while (1) {
                  $6 = $6 - 1 | 0;
                  $7 = ($5 >>> 0) / 10 | 0;
                  HEAP8[$6 | 0] = $5 - Math_imul($7, 10) | 48;
                  $8 = $8 - 1 | 0;
                  $15 = $5 >>> 0 > 9;
                  $5 = $7;
                  if ($15) {
                   continue
                  }
                  break;
                 };
                 if ($9 + 80 >>> 0 >= $6 >>> 0) {
                  break label$189
                 }
                }
                $5 = $9 + 80 | 0;
                $6 = ($5 + $6 | 0) - $8 | 0;
                memset($6, 48, $8 - $5 | 0);
               }
               if (!(HEAPU8[$0 | 0] & 32)) {
                __fwritex($6, ($11 | 0) < 9 ? $11 : 9, $0)
               }
               $5 = $11 - 9 | 0;
               $10 = $10 + 4 | 0;
               if ($14 >>> 0 <= $10 >>> 0) {
                break label$185
               }
               $6 = ($11 | 0) > 9;
               $11 = $5;
               if ($6) {
                continue
               }
               break;
              };
             }
             pad($0, $5 + 9 | 0, 9);
             break label$175;
            }
            label$194 : {
             if (($11 | 0) < 0) {
              break label$194
             }
             $14 = $8 >>> 0 < $14 >>> 0 ? $14 : $8 + 4 | 0;
             $10 = $8;
             while (1) {
              label$196 : {
               label$197 : {
                $5 = HEAP32[$10 >> 2];
                if (!$5) {
                 break label$197
                }
                $6 = 0;
                while (1) {
                 $7 = ($5 >>> 0) / 10 | 0;
                 HEAP8[($6 + $9 | 0) + 88 | 0] = $5 - Math_imul($7, 10) | 48;
                 $6 = $6 - 1 | 0;
                 $15 = $5 >>> 0 > 9;
                 $5 = $7;
                 if ($15) {
                  continue
                 }
                 break;
                };
                if (!$6) {
                 break label$197
                }
                $5 = ($6 + $9 | 0) + 89 | 0;
                break label$196;
               }
               HEAP8[$9 + 88 | 0] = 48;
               $5 = $33;
              }
              label$199 : {
               if (($8 | 0) != ($10 | 0)) {
                if ($9 + 80 >>> 0 >= $5 >>> 0) {
                 break label$199
                }
                $6 = $9 + 80 | 0;
                memset($6, 48, $5 - $6 | 0);
                $5 = $6;
                break label$199;
               }
               if (!(HEAPU8[$0 | 0] & 32)) {
                __fwritex($5, 1, $0)
               }
               $5 = $5 + 1 | 0;
               if (!$18 & ($11 | 0) <= 0 | HEAPU8[$0 | 0] & 32) {
                break label$199
               }
               __fwritex(4364, 1, $0);
              }
              $6 = $29 - $5 | 0;
              if (!(HEAPU8[$0 | 0] & 32)) {
               __fwritex($5, ($6 | 0) < ($11 | 0) ? $6 : $11, $0)
              }
              $11 = $11 - $6 | 0;
              $10 = $10 + 4 | 0;
              if ($14 >>> 0 <= $10 >>> 0) {
               break label$194
              }
              if (($11 | 0) >= 0) {
               continue
              }
              break;
             };
            }
            pad($0, $11 + 18 | 0, 18);
            if (HEAPU8[$0 | 0] & 32) {
             break label$175
            }
            __fwritex($26, $32 - $26 | 0, $0);
           }
           label$204 : {
            if (($20 | 0) != 8192 | ($13 | 0) <= ($19 | 0)) {
             break label$204
            }
            $5 = $13 - $19 | 0;
            $6 = $5 >>> 0 < 256;
            memset($9 + 624 | 0, 32, $6 ? $5 : 256);
            if (!$6) {
             while (1) {
              if (!(HEAPU8[$0 | 0] & 32)) {
               __fwritex($9 + 624 | 0, 256, $0)
              }
              $5 = $5 - 256 | 0;
              if ($5 >>> 0 > 255) {
               continue
              }
              break;
             }
            }
            if (HEAPU8[$0 | 0] & 32) {
             break label$204
            }
            __fwritex($9 + 624 | 0, $5, $0);
           }
           $5 = ($13 | 0) > ($19 | 0) ? $13 : $19;
           break label$5;
          }
          $11 = 0;
          $18 = 2750;
          $5 = $27;
          $14 = $17;
          $12 = $10;
         }
         $17 = $5 - $6 | 0;
         $15 = ($12 | 0) < ($17 | 0) ? $17 : $12;
         if (($15 | 0) > (2147483647 - $11 | 0)) {
          break label$3
         }
         $25 = $11 + $15 | 0;
         $5 = ($13 | 0) < ($25 | 0) ? $25 : $13;
         if (($20 | 0) < ($5 | 0)) {
          break label$3
         }
         $10 = $14 & 73728;
         label$208 : {
          if ($10 | ($13 | 0) <= ($25 | 0)) {
           break label$208
          }
          $8 = $5 - $25 | 0;
          $7 = $8 >>> 0 < 256;
          memset($9 + 112 | 0, 32, $7 ? $8 : 256);
          if (!$7) {
           while (1) {
            if (!(HEAPU8[$0 | 0] & 32)) {
             __fwritex($9 + 112 | 0, 256, $0)
            }
            $8 = $8 - 256 | 0;
            if ($8 >>> 0 > 255) {
             continue
            }
            break;
           }
          }
          if (HEAPU8[$0 | 0] & 32) {
           break label$208
          }
          __fwritex($9 + 112 | 0, $8, $0);
         }
         if (!(HEAPU8[$0 | 0] & 32)) {
          __fwritex($18, $11, $0)
         }
         label$213 : {
          if (($10 | 0) != 65536 | ($13 | 0) <= ($25 | 0)) {
           break label$213
          }
          $8 = $5 - $25 | 0;
          $7 = $8 >>> 0 < 256;
          memset($9 + 112 | 0, 48, $7 ? $8 : 256);
          if (!$7) {
           while (1) {
            if (!(HEAPU8[$0 | 0] & 32)) {
             __fwritex($9 + 112 | 0, 256, $0)
            }
            $8 = $8 - 256 | 0;
            if ($8 >>> 0 > 255) {
             continue
            }
            break;
           }
          }
          if (HEAPU8[$0 | 0] & 32) {
           break label$213
          }
          __fwritex($9 + 112 | 0, $8, $0);
         }
         label$217 : {
          if (($12 | 0) <= ($17 | 0)) {
           break label$217
          }
          $8 = $15 - $17 | 0;
          $7 = $8 >>> 0 < 256;
          memset($9 + 112 | 0, 48, $7 ? $8 : 256);
          if (!$7) {
           while (1) {
            if (!(HEAPU8[$0 | 0] & 32)) {
             __fwritex($9 + 112 | 0, 256, $0)
            }
            $8 = $8 - 256 | 0;
            if ($8 >>> 0 > 255) {
             continue
            }
            break;
           }
          }
          if (HEAPU8[$0 | 0] & 32) {
           break label$217
          }
          __fwritex($9 + 112 | 0, $8, $0);
         }
         if (!(HEAPU8[$0 | 0] & 32)) {
          __fwritex($6, $17, $0)
         }
         if (($10 | 0) != 8192 | ($13 | 0) <= ($25 | 0)) {
          continue
         }
         $6 = $5 - $25 | 0;
         $8 = $6 >>> 0 < 256;
         memset($9 + 112 | 0, 32, $8 ? $6 : 256);
         if (!$8) {
          while (1) {
           if (!(HEAPU8[$0 | 0] & 32)) {
            __fwritex($9 + 112 | 0, 256, $0)
           }
           $6 = $6 - 256 | 0;
           if ($6 >>> 0 > 255) {
            continue
           }
           break;
          }
         }
         if (HEAPU8[$0 | 0] & 32) {
          continue
         }
         __fwritex($9 + 112 | 0, $6, $0);
         continue;
        }
        HEAP32[7704] = 28;
        break label$2;
       }
       $12 = ($24 << 26 >> 31 & 9) + $31 | 0;
       label$225 : {
        if ($10 >>> 0 > 11) {
         break label$225
        }
        $5 = 12 - $10 | 0;
        $6 = $5 & 7;
        label$226 : {
         if (!$6) {
          $23 = 16.0;
          break label$226;
         }
         $5 = $10 - 12 | 0;
         $23 = 16.0;
         while (1) {
          $5 = $5 + 1 | 0;
          $23 = $23 * 16.0;
          $6 = $6 - 1 | 0;
          if ($6) {
           continue
          }
          break;
         };
         $5 = 0 - $5 | 0;
        }
        if ($10 - 5 >>> 0 >= 7) {
         while (1) {
          $23 = $23 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0;
          $5 = $5 - 8 | 0;
          if ($5) {
           continue
          }
          break;
         }
        }
        if (HEAPU8[$12 | 0] == 45) {
         $16 = -($23 + (-$16 - $23));
         break label$225;
        }
        $16 = $16 + $23 - $23;
       }
       $14 = $28 | 2;
       $11 = $24 & 32;
       label$232 : {
        label$233 : {
         $20 = HEAP32[$9 + 108 >> 2];
         if (!$20) {
          break label$233
         }
         $5 = $20 >> 31;
         $5 = $5 + $20 ^ $5;
         $6 = 0;
         while (1) {
          $8 = ($5 >>> 0) / 10 | 0;
          HEAP8[($6 + $9 | 0) + 79 | 0] = $5 - Math_imul($8, 10) | 48;
          $6 = $6 - 1 | 0;
          $7 = $5 >>> 0 > 9;
          $5 = $8;
          if ($7) {
           continue
          }
          break;
         };
         if (!$6) {
          break label$233
         }
         $5 = ($6 + $9 | 0) + 80 | 0;
         break label$232;
        }
        HEAP8[$9 + 79 | 0] = 48;
        $5 = $36;
       }
       $15 = $5 - 2 | 0;
       HEAP8[$15 | 0] = $24 + 15;
       HEAP8[$5 - 1 | 0] = ($20 | 0) < 0 ? 45 : 43;
       $7 = $17 & 8;
       $6 = $9 + 80 | 0;
       while (1) {
        $5 = $6;
        $8 = Math_abs($16) < 2147483648.0 ? ~~$16 : -2147483648;
        HEAP8[$5 | 0] = $11 | HEAPU8[$8 + 5152 | 0];
        $16 = ($16 - +($8 | 0)) * 16.0;
        $6 = $5 + 1 | 0;
        if (!(!(($10 | 0) > 0 | $7) & $16 == 0.0 | ($6 - ($9 + 80 | 0) | 0) != 1)) {
         HEAP8[$5 + 1 | 0] = 46;
         $6 = $5 + 2 | 0;
        }
        if ($16 != 0.0) {
         continue
        }
        break;
       };
       $8 = $32 - $15 | 0;
       $5 = $8 + $14 | 0;
       if ((2147483645 - $5 | 0) < ($10 | 0)) {
        break label$3
       }
       $11 = $17 & 73728;
       $17 = $6 - ($9 + 80 | 0) | 0;
       $6 = $10 ? (($6 + $35 | 0) < ($10 | 0) ? $10 + 2 | 0 : $17) : $17;
       $10 = $6 + $5 | 0;
       label$240 : {
        if ($11 | ($10 | 0) >= ($13 | 0)) {
         break label$240
        }
        $5 = $13 - $10 | 0;
        $7 = $5 >>> 0 < 256;
        memset($9 + 624 | 0, 32, $7 ? $5 : 256);
        if (!$7) {
         while (1) {
          if (!(HEAPU8[$0 | 0] & 32)) {
           __fwritex($9 + 624 | 0, 256, $0)
          }
          $5 = $5 - 256 | 0;
          if ($5 >>> 0 > 255) {
           continue
          }
          break;
         }
        }
        if (HEAPU8[$0 | 0] & 32) {
         break label$240
        }
        __fwritex($9 + 624 | 0, $5, $0);
       }
       if (!(HEAPU8[$0 | 0] & 32)) {
        __fwritex($12, $14, $0)
       }
       label$245 : {
        if (($11 | 0) != 65536 | ($10 | 0) >= ($13 | 0)) {
         break label$245
        }
        $5 = $13 - $10 | 0;
        $7 = $5 >>> 0 < 256;
        memset($9 + 624 | 0, 48, $7 ? $5 : 256);
        if (!$7) {
         while (1) {
          if (!(HEAPU8[$0 | 0] & 32)) {
           __fwritex($9 + 624 | 0, 256, $0)
          }
          $5 = $5 - 256 | 0;
          if ($5 >>> 0 > 255) {
           continue
          }
          break;
         }
        }
        if (HEAPU8[$0 | 0] & 32) {
         break label$245
        }
        __fwritex($9 + 624 | 0, $5, $0);
       }
       if (!(HEAPU8[$0 | 0] & 32)) {
        __fwritex($9 + 80 | 0, $17, $0)
       }
       $5 = $6 - $17 | 0;
       label$250 : {
        if (($5 | 0) <= 0) {
         break label$250
        }
        $6 = $5 >>> 0 < 256;
        memset($9 + 624 | 0, 48, $6 ? $5 : 256);
        if (!$6) {
         while (1) {
          if (!(HEAPU8[$0 | 0] & 32)) {
           __fwritex($9 + 624 | 0, 256, $0)
          }
          $5 = $5 - 256 | 0;
          if ($5 >>> 0 > 255) {
           continue
          }
          break;
         }
        }
        if (HEAPU8[$0 | 0] & 32) {
         break label$250
        }
        __fwritex($9 + 624 | 0, $5, $0);
       }
       if (!(HEAPU8[$0 | 0] & 32)) {
        __fwritex($15, $8, $0)
       }
       label$255 : {
        if (($11 | 0) != 8192 | ($10 | 0) >= ($13 | 0)) {
         break label$255
        }
        $5 = $13 - $10 | 0;
        $6 = $5 >>> 0 < 256;
        memset($9 + 624 | 0, 32, $6 ? $5 : 256);
        if (!$6) {
         while (1) {
          if (!(HEAPU8[$0 | 0] & 32)) {
           __fwritex($9 + 624 | 0, 256, $0)
          }
          $5 = $5 - 256 | 0;
          if ($5 >>> 0 > 255) {
           continue
          }
          break;
         }
        }
        if (HEAPU8[$0 | 0] & 32) {
         break label$255
        }
        __fwritex($9 + 624 | 0, $5, $0);
       }
       $5 = ($10 | 0) < ($13 | 0) ? $13 : $10;
      }
      if (($5 | 0) >= 0) {
       continue
      }
     }
     break;
    };
    HEAP32[7704] = 61;
   }
   $22 = -1;
  }
  __stack_pointer = $9 + 880 | 0;
  return $22;
 }
 
 function pop_arg($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  folding_inner4 : {
   folding_inner3 : {
    folding_inner2 : {
     switch ($1 - 9 | 0) {
     case 6:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      $1 = HEAP16[$1 >> 1];
      HEAP32[$0 >> 2] = $1;
      break folding_inner3;
     case 7:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
      break folding_inner4;
     case 8:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      $1 = HEAP8[$1 | 0];
      HEAP32[$0 >> 2] = $1;
      break folding_inner3;
     case 9:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
      break folding_inner4;
     case 16:
      $1 = HEAP32[$2 >> 2] + 7 & -8;
      HEAP32[$2 >> 2] = $1 + 8;
      HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
      return;
     case 17:
      $2 = 0;
      $0 = 4492;
      label$10 : {
       label$21 : {
        if (!($0 & 3)) {
         break label$21
        }
        if (!HEAPU8[4492]) {
         break label$10
        }
        $0 = 4493;
        if (!($0 & 3)) {
         break label$21
        }
        if (!HEAPU8[4493]) {
         break label$10
        }
        $0 = 4494;
        if (!($0 & 3)) {
         break label$21
        }
        if (!HEAPU8[4494]) {
         break label$10
        }
        $0 = 4495;
        if (!($0 & 3)) {
         break label$21
        }
        if (!HEAPU8[4495]) {
         break label$10
        }
        $0 = 4496;
       }
       $0 = $0 - 4 | 0;
       while (1) {
        $0 = $0 + 4 | 0;
        $1 = HEAP32[$0 >> 2];
        if (!(($1 ^ -1) & $1 - 16843009 & -2139062144)) {
         continue
        }
        break;
       };
       if (!($1 & 255)) {
        break label$10
       }
       while (1) {
        $0 = $0 + 1 | 0;
        if (HEAPU8[$0 | 0]) {
         continue
        }
        break;
       };
      }
      $1 = $0 - 4492 | 0;
      $7 = $1;
      $5 = 4492;
      $0 = HEAP32[7662];
      label$104 : {
       if (!$0) {
        $0 = 0;
        if (__towrite(30632)) {
         break label$104
        }
        $0 = HEAP32[7662];
       }
       $4 = HEAP32[7663];
       if ($0 - $4 >>> 0 < $1 >>> 0) {
        $0 = FUNCTION_TABLE[HEAP32[7666]](30632, 4492, $1) | 0;
        break label$104;
       }
       $3 = $1;
       label$41 : {
        if (HEAP32[7674] < 0) {
         break label$41
        }
        $6 = $1 + 4492 | 0;
        $0 = 0;
        while (1) {
         $3 = $1;
         if (!($0 + $1 | 0)) {
          break label$41
         }
         $8 = $0 + $6 | 0;
         $3 = $0 - 1 | 0;
         $0 = $3;
         if (HEAPU8[$8 - 1 | 0] != 10) {
          continue
         }
         break;
        };
        $2 = ($1 + $3 | 0) + 1 | 0;
        $0 = FUNCTION_TABLE[HEAP32[7666]](30632, 4492, $2) | 0;
        if ($0 >>> 0 < $2 >>> 0) {
         break label$104
        }
        $5 = ($3 + $6 | 0) + 1 | 0;
        $4 = HEAP32[7663];
        $3 = $3 ^ -1;
       }
       $0 = $3;
       memcpy($4, $5, $0);
       HEAP32[7663] = HEAP32[7663] + $0;
       $0 = $0 + $2 | 0;
      }
      __inlined_func$fwrite : {
       if (($0 | 0) == ($1 | 0)) {
        break __inlined_func$fwrite
       }
       $1 = $0;
      }
      abort();
     case 0:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     default:
      return;
     case 1:
     case 4:
     case 14:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      $1 = HEAP32[$1 >> 2];
      HEAP32[$0 >> 2] = $1;
      break folding_inner3;
     case 2:
     case 5:
     case 11:
     case 15:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
      break folding_inner4;
     case 3:
     case 10:
     case 12:
     case 13:
      break folding_inner2;
     };
    }
    $1 = HEAP32[$2 >> 2] + 7 & -8;
    HEAP32[$2 >> 2] = $1 + 8;
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    return;
   }
   HEAP32[$0 + 4 >> 2] = $1 >> 31;
   return;
  }
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function pad($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 256 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (($1 | 0) <= ($2 | 0)) {
    break label$1
   }
   $1 = $1 - $2 | 0;
   $2 = $1 >>> 0 < 256;
   $4 = memset($3, 48, $2 ? $1 : 256);
   if (!$2) {
    while (1) {
     if (!(HEAPU8[$0 | 0] & 32)) {
      __fwritex($4, 256, $0)
     }
     $1 = $1 - 256 | 0;
     if ($1 >>> 0 > 255) {
      continue
     }
     break;
    }
   }
   if (HEAPU8[$0 | 0] & 32) {
    break label$1
   }
   __fwritex($4, $1, $0);
  }
  __stack_pointer = $3 + 256 | 0;
 }
 
 function fprintf($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = 0;
  vfprintf($0, $1, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __cxa_pure_virtual() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 4373;
  fprintf(HEAP32[256], 4403);
  HEAP32[$0 + 8 >> 2] = 0;
  vfprintf(HEAP32[256], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
  fprintf(HEAP32[256], 4686);
  abort();
 }
 
 function sbrk($0) {
  if (!$0) {
   return __wasm_memory_size() << 16
  }
  if (!($0 & 65535 | ($0 | 0) < 0)) {
   $0 = __wasm_memory_grow($0 >>> 16 | 0);
   if (($0 | 0) == -1) {
    HEAP32[7704] = 48;
    return -1;
   }
   return $0 << 16;
  }
  abort();
 }
 
 function dlmalloc($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  label$1 : {
   if (HEAP32[7720]) {
    break label$1
   }
   $2 = sbrk(0) - 100816 | 0;
   if ($2 >>> 0 < 89) {
    break label$1
   }
   $4 = HEAP32[7832];
   if (!$4) {
    HEAP32[7835] = -1;
    HEAP32[7836] = -1;
    HEAP32[7833] = 65536;
    HEAP32[7834] = 65536;
    $4 = $10 + 8 & -16 ^ 1431655768;
    HEAP32[7832] = $4;
    HEAP32[7837] = 0;
    HEAP32[7825] = 0;
   }
   HEAP32[7827] = $2;
   HEAP32[7826] = 100816;
   HEAP32[7718] = 100816;
   HEAP32[7723] = $4;
   HEAP32[7722] = -1;
   while (1) {
    $3 = $1 + 30904 | 0;
    HEAP32[$1 + 30916 >> 2] = $3;
    $4 = $1 + 30896 | 0;
    HEAP32[$3 >> 2] = $4;
    HEAP32[$1 + 30908 >> 2] = $4;
    $4 = $1 + 30912 | 0;
    HEAP32[$1 + 30924 >> 2] = $4;
    HEAP32[$4 >> 2] = $3;
    $3 = $1 + 30920 | 0;
    HEAP32[$1 + 30932 >> 2] = $3;
    HEAP32[$3 >> 2] = $4;
    HEAP32[$1 + 30928 >> 2] = $3;
    $1 = $1 + 32 | 0;
    if (($1 | 0) != 256) {
     continue
    }
    break;
   };
   $1 = $2 - 56 | 0;
   $2 = $1 - 8 | 0;
   HEAP32[25207] = $2 | 1;
   HEAP32[7721] = HEAP32[7836];
   HEAP32[7717] = $2;
   HEAP32[7720] = 100824;
   HEAP32[($1 + 100816 | 0) + 4 >> 2] = 56;
  }
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             if ($0 >>> 0 <= 236) {
              $5 = HEAP32[7714];
              $6 = $0 >>> 0 < 11 ? 16 : $0 + 19 & -16;
              $0 = $6 >>> 3 | 0;
              $1 = $5 >>> $0 | 0;
              if ($1 & 3) {
               $2 = ($0 | $1 & 1) ^ 1;
               $4 = $2 << 3;
               $0 = HEAP32[$4 + 30904 >> 2];
               $1 = $0 + 8 | 0;
               $3 = HEAP32[$0 + 8 >> 2];
               $4 = $4 + 30896 | 0;
               label$17 : {
                if (($3 | 0) == ($4 | 0)) {
                 (wasm2js_i32$0 = 30856, wasm2js_i32$1 = __wasm_rotl_i32($2) & $5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$17;
                }
                HEAP32[$4 + 8 >> 2] = $3;
                HEAP32[$3 + 12 >> 2] = $4;
               }
               $2 = $2 << 3;
               HEAP32[$0 + 4 >> 2] = $2 | 3;
               $0 = $0 + $2 | 0;
               HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
               break label$4;
              }
              $8 = HEAP32[7716];
              if ($8 >>> 0 >= $6 >>> 0) {
               break label$14
              }
              if ($1) {
               $1 = $1 << $0;
               $0 = 2 << $0;
               $0 = $1 & (0 - $0 | $0);
               $0 = (0 - $0 & $0) - 1 | 0;
               $1 = $0 >>> 12 & 16;
               $2 = $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 5 & 8;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 2 & 4;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 2;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 1;
               $2 = ($2 | $1) + ($0 >>> $1 | 0) | 0;
               $3 = $2 << 3;
               $0 = HEAP32[$3 + 30904 >> 2];
               $1 = HEAP32[$0 + 8 >> 2];
               $3 = $3 + 30896 | 0;
               label$20 : {
                if (($1 | 0) == ($3 | 0)) {
                 $5 = __wasm_rotl_i32($2) & $5;
                 HEAP32[7714] = $5;
                 break label$20;
                }
                HEAP32[$3 + 8 >> 2] = $1;
                HEAP32[$1 + 12 >> 2] = $3;
               }
               $1 = $0 + 8 | 0;
               HEAP32[$0 + 4 >> 2] = $6 | 3;
               $2 = $2 << 3;
               $4 = $2 - $6 | 0;
               HEAP32[$0 + $2 >> 2] = $4;
               $6 = $0 + $6 | 0;
               HEAP32[$6 + 4 >> 2] = $4 | 1;
               if ($8) {
                $3 = $8 >>> 3 | 0;
                $0 = ($3 << 3) + 30896 | 0;
                $2 = HEAP32[7719];
                $3 = 1 << $3;
                label$23 : {
                 if (!($3 & $5)) {
                  HEAP32[7714] = $3 | $5;
                  $3 = $0;
                  break label$23;
                 }
                 $3 = HEAP32[$0 + 8 >> 2];
                }
                HEAP32[$3 + 12 >> 2] = $2;
                HEAP32[$0 + 8 >> 2] = $2;
                HEAP32[$2 + 12 >> 2] = $0;
                HEAP32[$2 + 8 >> 2] = $3;
               }
               HEAP32[7719] = $6;
               HEAP32[7716] = $4;
               break label$4;
              }
              $11 = HEAP32[7715];
              if (!$11) {
               break label$14
              }
              $0 = ($11 & 0 - $11) - 1 | 0;
              $1 = $0 >>> 12 & 16;
              $2 = $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 5 & 8;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 2 & 4;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 2;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 1;
              $0 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 31160 >> 2];
              $4 = (HEAP32[$0 + 4 >> 2] & -8) - $6 | 0;
              $2 = $0;
              while (1) {
               label$25 : {
                $1 = HEAP32[$2 + 16 >> 2];
                if (!$1) {
                 $1 = HEAP32[$2 + 20 >> 2];
                 if (!$1) {
                  break label$25
                 }
                }
                $3 = (HEAP32[$1 + 4 >> 2] & -8) - $6 | 0;
                $2 = $3 >>> 0 < $4 >>> 0;
                $4 = $2 ? $3 : $4;
                $0 = $2 ? $1 : $0;
                $2 = $1;
                continue;
               }
               break;
              };
              $9 = HEAP32[$0 + 24 >> 2];
              $3 = HEAP32[$0 + 12 >> 2];
              if (($0 | 0) != ($3 | 0)) {
               $1 = HEAP32[$0 + 8 >> 2];
               HEAP32[$3 + 8 >> 2] = $1;
               HEAP32[$1 + 12 >> 2] = $3;
               break label$5;
              }
              $2 = $0 + 20 | 0;
              $1 = HEAP32[$2 >> 2];
              if (!$1) {
               $1 = HEAP32[$0 + 16 >> 2];
               if (!$1) {
                break label$13
               }
               $2 = $0 + 16 | 0;
              }
              while (1) {
               $7 = $2;
               $3 = $1;
               $2 = $1 + 20 | 0;
               $1 = HEAP32[$2 >> 2];
               if ($1) {
                continue
               }
               $2 = $3 + 16 | 0;
               $1 = HEAP32[$3 + 16 >> 2];
               if ($1) {
                continue
               }
               break;
              };
              HEAP32[$7 >> 2] = 0;
              break label$5;
             }
             $6 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$14
             }
             $0 = $0 + 19 | 0;
             $6 = $0 & -16;
             $8 = HEAP32[7715];
             if (!$8) {
              break label$14
             }
             $4 = 0 - $6 | 0;
             $7 = 0;
             label$31 : {
              if ($6 >>> 0 < 256) {
               break label$31
              }
              $7 = 31;
              if ($6 >>> 0 > 16777215) {
               break label$31
              }
              $1 = $0 >>> 8 | 0;
              $0 = $1 + 1048320 >>> 16 & 8;
              $2 = $1 << $0;
              $1 = $2 + 520192 >>> 16 & 4;
              $3 = $2 << $1;
              $2 = $3 + 245760 >>> 16 & 2;
              $0 = ($3 << $2 >>> 15 | 0) - ($2 | ($0 | $1)) | 0;
              $7 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
             }
             $2 = HEAP32[($7 << 2) + 31160 >> 2];
             label$32 : {
              label$33 : {
               label$34 : {
                if (!$2) {
                 $1 = 0;
                 $3 = 0;
                 break label$34;
                }
                $1 = 0;
                $0 = $6 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
                $3 = 0;
                while (1) {
                 label$37 : {
                  $5 = (HEAP32[$2 + 4 >> 2] & -8) - $6 | 0;
                  if ($5 >>> 0 >= $4 >>> 0) {
                   break label$37
                  }
                  $3 = $2;
                  $4 = $5;
                  if ($4) {
                   break label$37
                  }
                  $4 = 0;
                  $1 = $2;
                  break label$33;
                 }
                 $5 = HEAP32[$2 + 20 >> 2];
                 $2 = HEAP32[(($0 >>> 29 & 4) + $2 | 0) + 16 >> 2];
                 $1 = $5 ? (($5 | 0) == ($2 | 0) ? $1 : $5) : $1;
                 $0 = $0 << 1;
                 if ($2) {
                  continue
                 }
                 break;
                };
               }
               if (!($1 | $3)) {
                $3 = 0;
                $0 = 2 << $7;
                $0 = (0 - $0 | $0) & $8;
                if (!$0) {
                 break label$14
                }
                $0 = ($0 & 0 - $0) - 1 | 0;
                $1 = $0 >>> 12 & 16;
                $2 = $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 5 & 8;
                $2 = $2 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 2 & 4;
                $2 = $2 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 1 & 2;
                $2 = $2 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 1 & 1;
                $1 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 31160 >> 2];
               }
               if (!$1) {
                break label$32
               }
              }
              while (1) {
               $5 = (HEAP32[$1 + 4 >> 2] & -8) - $6 | 0;
               $0 = $5 >>> 0 < $4 >>> 0;
               $4 = $0 ? $5 : $4;
               $3 = $0 ? $1 : $3;
               $2 = HEAP32[$1 + 16 >> 2];
               if ($2) {
                $1 = $2
               } else {
                $1 = HEAP32[$1 + 20 >> 2]
               }
               if ($1) {
                continue
               }
               break;
              };
             }
             if (!$3 | HEAP32[7716] - $6 >>> 0 <= $4 >>> 0) {
              break label$14
             }
             $7 = HEAP32[$3 + 24 >> 2];
             $0 = HEAP32[$3 + 12 >> 2];
             if (($0 | 0) != ($3 | 0)) {
              $1 = HEAP32[$3 + 8 >> 2];
              HEAP32[$0 + 8 >> 2] = $1;
              HEAP32[$1 + 12 >> 2] = $0;
              break label$6;
             }
             $2 = $3 + 20 | 0;
             $1 = HEAP32[$2 >> 2];
             if (!$1) {
              $1 = HEAP32[$3 + 16 >> 2];
              if (!$1) {
               break label$12
              }
              $2 = $3 + 16 | 0;
             }
             while (1) {
              $5 = $2;
              $0 = $1;
              $2 = $1 + 20 | 0;
              $1 = HEAP32[$2 >> 2];
              if ($1) {
               continue
              }
              $2 = $0 + 16 | 0;
              $1 = HEAP32[$0 + 16 >> 2];
              if ($1) {
               continue
              }
              break;
             };
             HEAP32[$5 >> 2] = 0;
             break label$6;
            }
            $1 = HEAP32[7716];
            if ($6 >>> 0 <= $1 >>> 0) {
             $0 = HEAP32[7719];
             $2 = $1 - $6 | 0;
             label$45 : {
              if ($2 >>> 0 >= 16) {
               $3 = $0 + $6 | 0;
               HEAP32[$3 + 4 >> 2] = $2 | 1;
               HEAP32[7716] = $2;
               HEAP32[7719] = $3;
               HEAP32[$0 + $1 >> 2] = $2;
               HEAP32[$0 + 4 >> 2] = $6 | 3;
               break label$45;
              }
              HEAP32[$0 + 4 >> 2] = $1 | 3;
              $1 = $0 + $1 | 0;
              HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
              HEAP32[7719] = 0;
              HEAP32[7716] = 0;
             }
             $1 = $0 + 8 | 0;
             break label$4;
            }
            $0 = HEAP32[7717];
            if ($6 >>> 0 < $0 >>> 0) {
             $1 = HEAP32[7720];
             $2 = $1 + $6 | 0;
             $0 = $0 - $6 | 0;
             HEAP32[$2 + 4 >> 2] = $0 | 1;
             HEAP32[7717] = $0;
             HEAP32[7720] = $2;
             HEAP32[$1 + 4 >> 2] = $6 | 3;
             $1 = $1 + 8 | 0;
             break label$4;
            }
            $1 = 0;
            if (HEAP32[7832]) {
             $4 = HEAP32[7834]
            } else {
             HEAP32[7835] = -1;
             HEAP32[7836] = -1;
             HEAP32[7833] = 65536;
             HEAP32[7834] = 65536;
             HEAP32[7832] = $10 + 12 & -16 ^ 1431655768;
             HEAP32[7837] = 0;
             HEAP32[7825] = 0;
             $4 = 65536;
            }
            $7 = $6 + 71 | 0;
            $5 = $4 + $7 | 0;
            $4 = 0 - $4 | 0;
            $2 = $5 & $4;
            if ($6 >>> 0 >= $2 >>> 0) {
             HEAP32[7704] = 48;
             break label$4;
            }
            label$51 : {
             $3 = HEAP32[7824];
             if (!$3) {
              break label$51
             }
             $8 = HEAP32[7822];
             $1 = $8 + $2 | 0;
             if ($1 >>> 0 > $8 >>> 0) {
              if ($1 >>> 0 <= $3 >>> 0) {
               break label$51
              }
             }
             $1 = 0;
             HEAP32[7704] = 48;
             break label$4;
            }
            if (HEAPU8[31300] & 4) {
             break label$9
            }
            label$53 : {
             label$54 : {
              $3 = HEAP32[7720];
              if ($3) {
               $1 = 31304;
               while (1) {
                $8 = HEAP32[$1 >> 2];
                if ($3 >>> 0 >= $8 >>> 0 & $3 >>> 0 < $8 + HEAP32[$1 + 4 >> 2] >>> 0) {
                 break label$54
                }
                $1 = HEAP32[$1 + 8 >> 2];
                if ($1) {
                 continue
                }
                break;
               };
              }
              $0 = sbrk(0);
              if (($0 | 0) == -1) {
               break label$10
              }
              $5 = $2;
              $1 = HEAP32[7833];
              $3 = $1 - 1 | 0;
              if ($3 & $0) {
               $5 = ($2 - $0 | 0) + ($0 + $3 & 0 - $1) | 0
              }
              if ($5 >>> 0 > 2147483646 | $6 >>> 0 >= $5 >>> 0) {
               break label$10
              }
              $3 = HEAP32[7824];
              if ($3) {
               $4 = HEAP32[7822];
               $1 = $4 + $5 | 0;
               if ($1 >>> 0 <= $4 >>> 0 | $1 >>> 0 > $3 >>> 0) {
                break label$10
               }
              }
              $1 = sbrk($5);
              if (($1 | 0) != ($0 | 0)) {
               break label$53
              }
              break label$8;
             }
             $5 = $4 & $5 - $0;
             if ($5 >>> 0 > 2147483646) {
              break label$10
             }
             $0 = sbrk($5);
             if (($0 | 0) == (HEAP32[$1 >> 2] + HEAP32[$1 + 4 >> 2] | 0)) {
              break label$11
             }
             $1 = $0;
            }
            if (!(($1 | 0) == -1 | $6 + 72 >>> 0 <= $5 >>> 0)) {
             $0 = HEAP32[7834];
             $0 = $0 + ($7 - $5 | 0) & 0 - $0;
             if ($0 >>> 0 > 2147483646) {
              $0 = $1;
              break label$8;
             }
             if ((sbrk($0) | 0) != -1) {
              $5 = $0 + $5 | 0;
              $0 = $1;
              break label$8;
             }
             sbrk(0 - $5 | 0);
             break label$10;
            }
            $0 = $1;
            if (($1 | 0) != -1) {
             break label$8
            }
            break label$10;
           }
           $3 = 0;
           break label$5;
          }
          $0 = 0;
          break label$6;
         }
         if (($0 | 0) != -1) {
          break label$8
         }
        }
        HEAP32[7825] = HEAP32[7825] | 4;
       }
       if ($2 >>> 0 > 2147483646) {
        break label$7
       }
       $0 = sbrk($2);
       $1 = sbrk(0);
       if (($0 | 0) == -1 | ($1 | 0) == -1 | $0 >>> 0 >= $1 >>> 0) {
        break label$7
       }
       $5 = $1 - $0 | 0;
       if ($5 >>> 0 <= $6 + 56 >>> 0) {
        break label$7
       }
      }
      $1 = HEAP32[7822] + $5 | 0;
      HEAP32[7822] = $1;
      if (HEAPU32[7823] < $1 >>> 0) {
       HEAP32[7823] = $1
      }
      label$64 : {
       label$65 : {
        label$66 : {
         $3 = HEAP32[7720];
         if ($3) {
          $1 = 31304;
          while (1) {
           $2 = HEAP32[$1 >> 2];
           $4 = HEAP32[$1 + 4 >> 2];
           if (($2 + $4 | 0) == ($0 | 0)) {
            break label$66
           }
           $1 = HEAP32[$1 + 8 >> 2];
           if ($1) {
            continue
           }
           break;
          };
          break label$65;
         }
         $1 = HEAP32[7718];
         if (!(!!$1 & $0 >>> 0 >= $1 >>> 0)) {
          HEAP32[7718] = $0
         }
         $1 = 0;
         HEAP32[7827] = $5;
         HEAP32[7826] = $0;
         HEAP32[7722] = -1;
         HEAP32[7723] = HEAP32[7832];
         HEAP32[7829] = 0;
         while (1) {
          $2 = $1 + 30904 | 0;
          HEAP32[$1 + 30916 >> 2] = $2;
          $3 = $1 + 30896 | 0;
          HEAP32[$2 >> 2] = $3;
          HEAP32[$1 + 30908 >> 2] = $3;
          $3 = $1 + 30912 | 0;
          HEAP32[$1 + 30924 >> 2] = $3;
          HEAP32[$3 >> 2] = $2;
          $2 = $1 + 30920 | 0;
          HEAP32[$1 + 30932 >> 2] = $2;
          HEAP32[$2 >> 2] = $3;
          HEAP32[$1 + 30928 >> 2] = $2;
          $1 = $1 + 32 | 0;
          if (($1 | 0) != 256) {
           continue
          }
          break;
         };
         $1 = $0 + 8 & 15 ? -8 - $0 & 15 : 0;
         $2 = $1 + $0 | 0;
         $3 = $5 - 56 | 0;
         $1 = $3 - $1 | 0;
         HEAP32[$2 + 4 >> 2] = $1 | 1;
         HEAP32[7721] = HEAP32[7836];
         HEAP32[7717] = $1;
         HEAP32[7720] = $2;
         HEAP32[($0 + $3 | 0) + 4 >> 2] = 56;
         break label$64;
        }
        if (HEAPU8[$1 + 12 | 0] & 8 | $2 >>> 0 > $3 >>> 0 | $0 >>> 0 <= $3 >>> 0) {
         break label$65
        }
        $0 = $3 + 8 & 15 ? -8 - $3 & 15 : 0;
        $2 = $0 + $3 | 0;
        $7 = HEAP32[7717] + $5 | 0;
        $0 = $7 - $0 | 0;
        HEAP32[$2 + 4 >> 2] = $0 | 1;
        HEAP32[$1 + 4 >> 2] = $4 + $5;
        HEAP32[7721] = HEAP32[7836];
        HEAP32[7717] = $0;
        HEAP32[7720] = $2;
        HEAP32[($3 + $7 | 0) + 4 >> 2] = 56;
        break label$64;
       }
       if ($0 >>> 0 < HEAPU32[7718]) {
        HEAP32[7718] = $0
       }
       $2 = $0 + $5 | 0;
       $1 = 31304;
       label$73 : {
        label$74 : {
         label$75 : {
          label$76 : {
           label$77 : {
            label$78 : {
             while (1) {
              if (HEAP32[$1 >> 2] != ($2 | 0)) {
               $1 = HEAP32[$1 + 8 >> 2];
               if ($1) {
                continue
               }
               break label$78;
              }
              break;
             };
             if (!(HEAPU8[$1 + 12 | 0] & 8)) {
              break label$77
             }
            }
            $1 = 31304;
            while (1) {
             $2 = HEAP32[$1 >> 2];
             if ($3 >>> 0 >= $2 >>> 0) {
              $4 = $2 + HEAP32[$1 + 4 >> 2] | 0;
              if ($4 >>> 0 > $3 >>> 0) {
               break label$76
              }
             }
             $1 = HEAP32[$1 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$1 >> 2] = $0;
           HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + $5;
           $8 = ($0 + 8 & 15 ? -8 - $0 & 15 : 0) + $0 | 0;
           HEAP32[$8 + 4 >> 2] = $6 | 3;
           $5 = $2 + ($2 + 8 & 15 ? -8 - $2 & 15 : 0) | 0;
           $6 = $6 + $8 | 0;
           $2 = $5 - $6 | 0;
           if (($3 | 0) == ($5 | 0)) {
            HEAP32[7720] = $6;
            $0 = HEAP32[7717] + $2 | 0;
            HEAP32[7717] = $0;
            HEAP32[$6 + 4 >> 2] = $0 | 1;
            break label$74;
           }
           if (($5 | 0) == HEAP32[7719]) {
            HEAP32[7719] = $6;
            $0 = HEAP32[7716] + $2 | 0;
            HEAP32[7716] = $0;
            HEAP32[$6 + 4 >> 2] = $0 | 1;
            HEAP32[$0 + $6 >> 2] = $0;
            break label$74;
           }
           $0 = HEAP32[$5 + 4 >> 2];
           if (($0 & 3) == 1) {
            $9 = $0 & -8;
            label$86 : {
             if ($0 >>> 0 <= 255) {
              $1 = HEAP32[$5 + 8 >> 2];
              $3 = $0 >>> 3 | 0;
              $0 = HEAP32[$5 + 12 >> 2];
              if (($1 | 0) == ($0 | 0)) {
               (wasm2js_i32$0 = 30856, wasm2js_i32$1 = HEAP32[7714] & __wasm_rotl_i32($3)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$86;
              }
              HEAP32[$0 + 8 >> 2] = $1;
              HEAP32[$1 + 12 >> 2] = $0;
              break label$86;
             }
             $7 = HEAP32[$5 + 24 >> 2];
             $0 = HEAP32[$5 + 12 >> 2];
             label$89 : {
              if (($0 | 0) != ($5 | 0)) {
               $1 = HEAP32[$5 + 8 >> 2];
               HEAP32[$0 + 8 >> 2] = $1;
               HEAP32[$1 + 12 >> 2] = $0;
               break label$89;
              }
              label$91 : {
               $1 = $5 + 20 | 0;
               $4 = HEAP32[$1 >> 2];
               if ($4) {
                break label$91
               }
               $1 = $5 + 16 | 0;
               $4 = HEAP32[$1 >> 2];
               if ($4) {
                break label$91
               }
               $0 = 0;
               break label$89;
              }
              while (1) {
               $3 = $1;
               $0 = $4;
               $1 = $0 + 20 | 0;
               $4 = HEAP32[$1 >> 2];
               if ($4) {
                continue
               }
               $1 = $0 + 16 | 0;
               $4 = HEAP32[$0 + 16 >> 2];
               if ($4) {
                continue
               }
               break;
              };
              HEAP32[$3 >> 2] = 0;
             }
             if (!$7) {
              break label$86
             }
             $1 = HEAP32[$5 + 28 >> 2];
             $3 = ($1 << 2) + 31160 | 0;
             label$93 : {
              if (($5 | 0) == HEAP32[$3 >> 2]) {
               HEAP32[$3 >> 2] = $0;
               if ($0) {
                break label$93
               }
               (wasm2js_i32$0 = 30860, wasm2js_i32$1 = HEAP32[7715] & __wasm_rotl_i32($1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$86;
              }
              HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) >> 2] = $0;
              if (!$0) {
               break label$86
              }
             }
             HEAP32[$0 + 24 >> 2] = $7;
             $1 = HEAP32[$5 + 16 >> 2];
             if ($1) {
              HEAP32[$0 + 16 >> 2] = $1;
              HEAP32[$1 + 24 >> 2] = $0;
             }
             $1 = HEAP32[$5 + 20 >> 2];
             if (!$1) {
              break label$86
             }
             HEAP32[$0 + 20 >> 2] = $1;
             HEAP32[$1 + 24 >> 2] = $0;
            }
            $5 = $5 + $9 | 0;
            $2 = $2 + $9 | 0;
           }
           HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] & -2;
           HEAP32[$2 + $6 >> 2] = $2;
           HEAP32[$6 + 4 >> 2] = $2 | 1;
           if ($2 >>> 0 <= 255) {
            $1 = $2 >>> 3 | 0;
            $0 = ($1 << 3) + 30896 | 0;
            $2 = HEAP32[7714];
            $1 = 1 << $1;
            label$97 : {
             if (!($2 & $1)) {
              HEAP32[7714] = $1 | $2;
              $4 = $0;
              break label$97;
             }
             $4 = HEAP32[$0 + 8 >> 2];
            }
            HEAP32[$4 + 12 >> 2] = $6;
            HEAP32[$0 + 8 >> 2] = $6;
            HEAP32[$6 + 12 >> 2] = $0;
            HEAP32[$6 + 8 >> 2] = $4;
            break label$74;
           }
           $1 = 31;
           if ($2 >>> 0 <= 16777215) {
            $1 = $2 >>> 8 | 0;
            $0 = $1 + 1048320 >>> 16 & 8;
            $3 = $1 << $0;
            $1 = $3 + 520192 >>> 16 & 4;
            $4 = $3 << $1;
            $3 = $4 + 245760 >>> 16 & 2;
            $0 = ($4 << $3 >>> 15 | 0) - ($3 | ($0 | $1)) | 0;
            $1 = ($0 << 1 | $2 >>> $0 + 21 & 1) + 28 | 0;
           }
           HEAP32[$6 + 28 >> 2] = $1;
           HEAP32[$6 + 16 >> 2] = 0;
           HEAP32[$6 + 20 >> 2] = 0;
           $0 = ($1 << 2) + 31160 | 0;
           $3 = HEAP32[7715];
           $4 = 1 << $1;
           if (!($3 & $4)) {
            HEAP32[$0 >> 2] = $6;
            HEAP32[7715] = $3 | $4;
            HEAP32[$6 + 24 >> 2] = $0;
            HEAP32[$6 + 8 >> 2] = $6;
            HEAP32[$6 + 12 >> 2] = $6;
            break label$74;
           }
           $1 = $2 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
           $0 = HEAP32[$0 >> 2];
           while (1) {
            $3 = $0;
            if ((HEAP32[$0 + 4 >> 2] & -8) == ($2 | 0)) {
             break label$75
            }
            $0 = $1 >>> 29 | 0;
            $1 = $1 << 1;
            $4 = ($3 + ($0 & 4) | 0) + 16 | 0;
            $0 = HEAP32[$4 >> 2];
            if ($0) {
             continue
            }
            break;
           };
           HEAP32[$4 >> 2] = $6;
           HEAP32[$6 + 24 >> 2] = $3;
           HEAP32[$6 + 12 >> 2] = $6;
           HEAP32[$6 + 8 >> 2] = $6;
           break label$74;
          }
          $1 = $0 + 8 & 15 ? -8 - $0 & 15 : 0;
          $7 = $1 + $0 | 0;
          $2 = $5 - 56 | 0;
          $1 = $2 - $1 | 0;
          HEAP32[$7 + 4 >> 2] = $1 | 1;
          HEAP32[($0 + $2 | 0) + 4 >> 2] = 56;
          $2 = ($4 + ($4 - 55 & 15 ? 55 - $4 & 15 : 0) | 0) - 63 | 0;
          $2 = $2 >>> 0 < $3 + 16 >>> 0 ? $3 : $2;
          HEAP32[$2 + 4 >> 2] = 35;
          HEAP32[7721] = HEAP32[7836];
          HEAP32[7717] = $1;
          HEAP32[7720] = $7;
          $7 = HEAP32[7829];
          $1 = $2 + 16 | 0;
          HEAP32[$1 >> 2] = HEAP32[7828];
          HEAP32[$1 + 4 >> 2] = $7;
          $1 = HEAP32[7827];
          HEAP32[$2 + 8 >> 2] = HEAP32[7826];
          HEAP32[$2 + 12 >> 2] = $1;
          HEAP32[7828] = $2 + 8;
          HEAP32[7827] = $5;
          HEAP32[7826] = $0;
          HEAP32[7829] = 0;
          $1 = $2 + 36 | 0;
          while (1) {
           HEAP32[$1 >> 2] = 7;
           $1 = $1 + 4 | 0;
           if ($4 >>> 0 > $1 >>> 0) {
            continue
           }
           break;
          };
          if (($2 | 0) == ($3 | 0)) {
           break label$64
          }
          HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
          $4 = $2 - $3 | 0;
          HEAP32[$2 >> 2] = $4;
          HEAP32[$3 + 4 >> 2] = $4 | 1;
          if ($4 >>> 0 <= 255) {
           $1 = $4 >>> 3 | 0;
           $0 = ($1 << 3) + 30896 | 0;
           $2 = HEAP32[7714];
           $1 = 1 << $1;
           label$104 : {
            if (!($2 & $1)) {
             HEAP32[7714] = $1 | $2;
             $2 = $0;
             break label$104;
            }
            $2 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$2 + 12 >> 2] = $3;
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$3 + 12 >> 2] = $0;
           HEAP32[$3 + 8 >> 2] = $2;
           break label$64;
          }
          $1 = 31;
          HEAP32[$3 + 16 >> 2] = 0;
          HEAP32[$3 + 20 >> 2] = 0;
          if ($4 >>> 0 <= 16777215) {
           $1 = $4 >>> 8 | 0;
           $0 = $1 + 1048320 >>> 16 & 8;
           $2 = $1 << $0;
           $1 = $2 + 520192 >>> 16 & 4;
           $5 = $2 << $1;
           $2 = $5 + 245760 >>> 16 & 2;
           $0 = ($5 << $2 >>> 15 | 0) - ($2 | ($0 | $1)) | 0;
           $1 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
          }
          HEAP32[$3 + 28 >> 2] = $1;
          $0 = ($1 << 2) + 31160 | 0;
          $2 = HEAP32[7715];
          $5 = 1 << $1;
          if (!($2 & $5)) {
           HEAP32[$0 >> 2] = $3;
           HEAP32[7715] = $2 | $5;
           HEAP32[$3 + 24 >> 2] = $0;
           HEAP32[$3 + 8 >> 2] = $3;
           HEAP32[$3 + 12 >> 2] = $3;
           break label$64;
          }
          $1 = $4 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
          $0 = HEAP32[$0 >> 2];
          while (1) {
           $2 = $0;
           if (($4 | 0) == (HEAP32[$0 + 4 >> 2] & -8)) {
            break label$73
           }
           $0 = $1 >>> 29 | 0;
           $1 = $1 << 1;
           $5 = ($2 + ($0 & 4) | 0) + 16 | 0;
           $0 = HEAP32[$5 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          HEAP32[$5 >> 2] = $3;
          HEAP32[$3 + 24 >> 2] = $2;
          HEAP32[$3 + 12 >> 2] = $3;
          HEAP32[$3 + 8 >> 2] = $3;
          break label$64;
         }
         $0 = HEAP32[$3 + 8 >> 2];
         HEAP32[$0 + 12 >> 2] = $6;
         HEAP32[$3 + 8 >> 2] = $6;
         HEAP32[$6 + 24 >> 2] = 0;
         HEAP32[$6 + 12 >> 2] = $3;
         HEAP32[$6 + 8 >> 2] = $0;
        }
        $1 = $8 + 8 | 0;
        break label$4;
       }
       $0 = HEAP32[$2 + 8 >> 2];
       HEAP32[$0 + 12 >> 2] = $3;
       HEAP32[$2 + 8 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = 0;
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$3 + 8 >> 2] = $0;
      }
      $1 = HEAP32[7717];
      if ($1 >>> 0 <= $6 >>> 0) {
       break label$7
      }
      $0 = HEAP32[7720];
      $2 = $0 + $6 | 0;
      $1 = $1 - $6 | 0;
      HEAP32[$2 + 4 >> 2] = $1 | 1;
      HEAP32[7717] = $1;
      HEAP32[7720] = $2;
      HEAP32[$0 + 4 >> 2] = $6 | 3;
      $1 = $0 + 8 | 0;
      break label$4;
     }
     $1 = 0;
     HEAP32[7704] = 48;
     break label$4;
    }
    label$109 : {
     if (!$7) {
      break label$109
     }
     $1 = HEAP32[$3 + 28 >> 2];
     $2 = ($1 << 2) + 31160 | 0;
     label$110 : {
      if (($3 | 0) == HEAP32[$2 >> 2]) {
       HEAP32[$2 >> 2] = $0;
       if ($0) {
        break label$110
       }
       $8 = __wasm_rotl_i32($1) & $8;
       HEAP32[7715] = $8;
       break label$109;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $0;
      if (!$0) {
       break label$109
      }
     }
     HEAP32[$0 + 24 >> 2] = $7;
     $1 = HEAP32[$3 + 16 >> 2];
     if ($1) {
      HEAP32[$0 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $0;
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if (!$1) {
      break label$109
     }
     HEAP32[$0 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $0;
    }
    label$113 : {
     if ($4 >>> 0 <= 15) {
      $0 = $4 + $6 | 0;
      HEAP32[$3 + 4 >> 2] = $0 | 3;
      $0 = $0 + $3 | 0;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
      break label$113;
     }
     $2 = $3 + $6 | 0;
     HEAP32[$2 + 4 >> 2] = $4 | 1;
     HEAP32[$3 + 4 >> 2] = $6 | 3;
     HEAP32[$2 + $4 >> 2] = $4;
     if ($4 >>> 0 <= 255) {
      $1 = $4 >>> 3 | 0;
      $0 = ($1 << 3) + 30896 | 0;
      $4 = HEAP32[7714];
      $1 = 1 << $1;
      label$116 : {
       if (!($4 & $1)) {
        HEAP32[7714] = $1 | $4;
        $4 = $0;
        break label$116;
       }
       $4 = HEAP32[$0 + 8 >> 2];
      }
      HEAP32[$4 + 12 >> 2] = $2;
      HEAP32[$0 + 8 >> 2] = $2;
      HEAP32[$2 + 12 >> 2] = $0;
      HEAP32[$2 + 8 >> 2] = $4;
      break label$113;
     }
     $1 = 31;
     if ($4 >>> 0 <= 16777215) {
      $1 = $4 >>> 8 | 0;
      $0 = $1 + 1048320 >>> 16 & 8;
      $5 = $1 << $0;
      $1 = $5 + 520192 >>> 16 & 4;
      $6 = $5 << $1;
      $5 = $6 + 245760 >>> 16 & 2;
      $0 = ($6 << $5 >>> 15 | 0) - ($5 | ($0 | $1)) | 0;
      $1 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
     }
     HEAP32[$2 + 28 >> 2] = $1;
     HEAP32[$2 + 16 >> 2] = 0;
     HEAP32[$2 + 20 >> 2] = 0;
     $0 = ($1 << 2) + 31160 | 0;
     $5 = 1 << $1;
     if (!($5 & $8)) {
      HEAP32[$0 >> 2] = $2;
      HEAP32[7715] = $5 | $8;
      HEAP32[$2 + 24 >> 2] = $0;
      HEAP32[$2 + 8 >> 2] = $2;
      HEAP32[$2 + 12 >> 2] = $2;
      break label$113;
     }
     $1 = $4 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
     $6 = HEAP32[$0 >> 2];
     label$120 : {
      while (1) {
       $0 = $6;
       if ((HEAP32[$0 + 4 >> 2] & -8) == ($4 | 0)) {
        break label$120
       }
       $5 = $1 >>> 29 | 0;
       $1 = $1 << 1;
       $5 = ($0 + ($5 & 4) | 0) + 16 | 0;
       $6 = HEAP32[$5 >> 2];
       if ($6) {
        continue
       }
       break;
      };
      HEAP32[$5 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $0;
      HEAP32[$2 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $2;
      break label$113;
     }
     $1 = HEAP32[$0 + 8 >> 2];
     HEAP32[$1 + 12 >> 2] = $2;
     HEAP32[$0 + 8 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = 0;
     HEAP32[$2 + 12 >> 2] = $0;
     HEAP32[$2 + 8 >> 2] = $1;
    }
    $1 = $3 + 8 | 0;
    break label$4;
   }
   label$122 : {
    if (!$9) {
     break label$122
    }
    $1 = HEAP32[$0 + 28 >> 2];
    $2 = ($1 << 2) + 31160 | 0;
    label$123 : {
     if (($0 | 0) == HEAP32[$2 >> 2]) {
      HEAP32[$2 >> 2] = $3;
      if ($3) {
       break label$123
      }
      (wasm2js_i32$0 = 30860, wasm2js_i32$1 = __wasm_rotl_i32($1) & $11), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$122;
     }
     HEAP32[(HEAP32[$9 + 16 >> 2] == ($0 | 0) ? 16 : 20) + $9 >> 2] = $3;
     if (!$3) {
      break label$122
     }
    }
    HEAP32[$3 + 24 >> 2] = $9;
    $1 = HEAP32[$0 + 16 >> 2];
    if ($1) {
     HEAP32[$3 + 16 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $3;
    }
    $1 = HEAP32[$0 + 20 >> 2];
    if (!$1) {
     break label$122
    }
    HEAP32[$3 + 20 >> 2] = $1;
    HEAP32[$1 + 24 >> 2] = $3;
   }
   label$126 : {
    if ($4 >>> 0 <= 15) {
     $1 = $4 + $6 | 0;
     HEAP32[$0 + 4 >> 2] = $1 | 3;
     $1 = $0 + $1 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     break label$126;
    }
    $7 = $0 + $6 | 0;
    HEAP32[$7 + 4 >> 2] = $4 | 1;
    HEAP32[$0 + 4 >> 2] = $6 | 3;
    HEAP32[$4 + $7 >> 2] = $4;
    if ($8) {
     $3 = $8 >>> 3 | 0;
     $1 = ($3 << 3) + 30896 | 0;
     $2 = HEAP32[7719];
     $3 = 1 << $3;
     label$129 : {
      if (!($3 & $5)) {
       HEAP32[7714] = $3 | $5;
       $3 = $1;
       break label$129;
      }
      $3 = HEAP32[$1 + 8 >> 2];
     }
     HEAP32[$3 + 12 >> 2] = $2;
     HEAP32[$1 + 8 >> 2] = $2;
     HEAP32[$2 + 12 >> 2] = $1;
     HEAP32[$2 + 8 >> 2] = $3;
    }
    HEAP32[7719] = $7;
    HEAP32[7716] = $4;
   }
   $1 = $0 + 8 | 0;
  }
  __stack_pointer = $10 + 16 | 0;
  return $1;
 }
 
 function free($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  __inlined_func$dlfree : {
   if (!$0) {
    break __inlined_func$dlfree
   }
   $1 = HEAP32[$0 - 4 >> 2];
   $4 = $1 & -8;
   $2 = $0 - 8 | 0;
   $5 = $4 + $2 | 0;
   label$2 : {
    if ($1 & 1) {
     break label$2
    }
    if (!($1 & 3)) {
     break __inlined_func$dlfree
    }
    $0 = HEAP32[$2 >> 2];
    $2 = $2 - $0 | 0;
    if ($2 >>> 0 < HEAPU32[7718]) {
     break __inlined_func$dlfree
    }
    $4 = $0 + $4 | 0;
    if (($2 | 0) != HEAP32[7719]) {
     if ($0 >>> 0 <= 255) {
      $1 = HEAP32[$2 + 8 >> 2];
      $3 = $0 >>> 3 | 0;
      $0 = HEAP32[$2 + 12 >> 2];
      if (($1 | 0) == ($0 | 0)) {
       (wasm2js_i32$0 = 30856, wasm2js_i32$1 = HEAP32[7714] & __wasm_rotl_i32($3)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$0 + 8 >> 2] = $1;
      HEAP32[$1 + 12 >> 2] = $0;
      break label$2;
     }
     $7 = HEAP32[$2 + 24 >> 2];
     $0 = HEAP32[$2 + 12 >> 2];
     label$6 : {
      if (($2 | 0) != ($0 | 0)) {
       $1 = HEAP32[$2 + 8 >> 2];
       HEAP32[$0 + 8 >> 2] = $1;
       HEAP32[$1 + 12 >> 2] = $0;
       break label$6;
      }
      label$8 : {
       $1 = $2 + 20 | 0;
       $3 = HEAP32[$1 >> 2];
       if ($3) {
        break label$8
       }
       $1 = $2 + 16 | 0;
       $3 = HEAP32[$1 >> 2];
       if ($3) {
        break label$8
       }
       $0 = 0;
       break label$6;
      }
      while (1) {
       $6 = $1;
       $0 = $3;
       $1 = $0 + 20 | 0;
       $3 = HEAP32[$1 >> 2];
       if ($3) {
        continue
       }
       $1 = $0 + 16 | 0;
       $3 = HEAP32[$0 + 16 >> 2];
       if ($3) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     $1 = HEAP32[$2 + 28 >> 2];
     $3 = ($1 << 2) + 31160 | 0;
     label$10 : {
      if (($2 | 0) == HEAP32[$3 >> 2]) {
       HEAP32[$3 >> 2] = $0;
       if ($0) {
        break label$10
       }
       (wasm2js_i32$0 = 30860, wasm2js_i32$1 = HEAP32[7715] & __wasm_rotl_i32($1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($2 | 0) ? 16 : 20) >> 2] = $0;
      if (!$0) {
       break label$2
      }
     }
     HEAP32[$0 + 24 >> 2] = $7;
     $1 = HEAP32[$2 + 16 >> 2];
     if ($1) {
      HEAP32[$0 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $0;
     }
     $1 = HEAP32[$2 + 20 >> 2];
     if (!$1) {
      break label$2
     }
     HEAP32[$0 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $0;
     break label$2;
    }
    $0 = HEAP32[$5 + 4 >> 2];
    if (($0 & 3) != 3) {
     break label$2
    }
    HEAP32[$5 + 4 >> 2] = $0 & -2;
    HEAP32[7716] = $4;
    HEAP32[$2 + $4 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $4 | 1;
    break __inlined_func$dlfree;
   }
   if ($2 >>> 0 >= $5 >>> 0) {
    break __inlined_func$dlfree
   }
   $0 = HEAP32[$5 + 4 >> 2];
   if (!($0 & 1)) {
    break __inlined_func$dlfree
   }
   label$13 : {
    if (!($0 & 2)) {
     if (HEAP32[7720] == ($5 | 0)) {
      HEAP32[7720] = $2;
      $0 = HEAP32[7717] + $4 | 0;
      HEAP32[7717] = $0;
      HEAP32[$2 + 4 >> 2] = $0 | 1;
      if (HEAP32[7719] != ($2 | 0)) {
       break __inlined_func$dlfree
      }
      HEAP32[7716] = 0;
      HEAP32[7719] = 0;
      break __inlined_func$dlfree;
     }
     if (HEAP32[7719] == ($5 | 0)) {
      HEAP32[7719] = $2;
      $0 = HEAP32[7716] + $4 | 0;
      HEAP32[7716] = $0;
      HEAP32[$2 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $2 >> 2] = $0;
      break __inlined_func$dlfree;
     }
     $4 = ($0 & -8) + $4 | 0;
     label$17 : {
      if ($0 >>> 0 <= 255) {
       $1 = HEAP32[$5 + 8 >> 2];
       $3 = $0 >>> 3 | 0;
       $0 = HEAP32[$5 + 12 >> 2];
       if (($1 | 0) == ($0 | 0)) {
        (wasm2js_i32$0 = 30856, wasm2js_i32$1 = HEAP32[7714] & __wasm_rotl_i32($3)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[$0 + 8 >> 2] = $1;
       HEAP32[$1 + 12 >> 2] = $0;
       break label$17;
      }
      $7 = HEAP32[$5 + 24 >> 2];
      $0 = HEAP32[$5 + 12 >> 2];
      label$20 : {
       if (($0 | 0) != ($5 | 0)) {
        $1 = HEAP32[$5 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $1;
        HEAP32[$1 + 12 >> 2] = $0;
        break label$20;
       }
       label$22 : {
        $1 = $5 + 20 | 0;
        $3 = HEAP32[$1 >> 2];
        if ($3) {
         break label$22
        }
        $1 = $5 + 16 | 0;
        $3 = HEAP32[$1 >> 2];
        if ($3) {
         break label$22
        }
        $0 = 0;
        break label$20;
       }
       while (1) {
        $6 = $1;
        $0 = $3;
        $1 = $0 + 20 | 0;
        $3 = HEAP32[$1 >> 2];
        if ($3) {
         continue
        }
        $1 = $0 + 16 | 0;
        $3 = HEAP32[$0 + 16 >> 2];
        if ($3) {
         continue
        }
        break;
       };
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      $1 = HEAP32[$5 + 28 >> 2];
      $3 = ($1 << 2) + 31160 | 0;
      label$24 : {
       if (HEAP32[$3 >> 2] == ($5 | 0)) {
        HEAP32[$3 >> 2] = $0;
        if ($0) {
         break label$24
        }
        (wasm2js_i32$0 = 30860, wasm2js_i32$1 = HEAP32[7715] & __wasm_rotl_i32($1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[$7 + (($5 | 0) == HEAP32[$7 + 16 >> 2] ? 16 : 20) >> 2] = $0;
       if (!$0) {
        break label$17
       }
      }
      HEAP32[$0 + 24 >> 2] = $7;
      $1 = HEAP32[$5 + 16 >> 2];
      if ($1) {
       HEAP32[$0 + 16 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $0;
      }
      $1 = HEAP32[$5 + 20 >> 2];
      if (!$1) {
       break label$17
      }
      HEAP32[$0 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $0;
     }
     HEAP32[$2 + $4 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $4 | 1;
     if (HEAP32[7719] != ($2 | 0)) {
      break label$13
     }
     HEAP32[7716] = $4;
     break __inlined_func$dlfree;
    }
    HEAP32[$5 + 4 >> 2] = $0 & -2;
    HEAP32[$2 + $4 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $4 | 1;
   }
   if ($4 >>> 0 <= 255) {
    $1 = $4 >>> 3 | 0;
    $0 = ($1 << 3) + 30896 | 0;
    $3 = HEAP32[7714];
    $1 = 1 << $1;
    label$28 : {
     if (!($3 & $1)) {
      HEAP32[7714] = $1 | $3;
      $1 = $0;
      break label$28;
     }
     $1 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = $2;
    HEAP32[$0 + 8 >> 2] = $2;
    HEAP32[$2 + 12 >> 2] = $0;
    HEAP32[$2 + 8 >> 2] = $1;
    break __inlined_func$dlfree;
   }
   $1 = 31;
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   if ($4 >>> 0 <= 16777215) {
    $1 = $4 >>> 8 | 0;
    $0 = $1 + 1048320 >>> 16 & 8;
    $3 = $1 << $0;
    $1 = $3 + 520192 >>> 16 & 4;
    $6 = $3 << $1;
    $3 = $6 + 245760 >>> 16 & 2;
    $0 = ($6 << $3 >>> 15 | 0) - ($3 | ($0 | $1)) | 0;
    $1 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
   }
   HEAP32[$2 + 28 >> 2] = $1;
   $0 = ($1 << 2) + 31160 | 0;
   $3 = HEAP32[7715];
   $6 = 1 << $1;
   label$31 : {
    if (!($3 & $6)) {
     HEAP32[$0 >> 2] = $2;
     HEAP32[7715] = $3 | $6;
     HEAP32[$2 + 24 >> 2] = $0;
     HEAP32[$2 + 8 >> 2] = $2;
     HEAP32[$2 + 12 >> 2] = $2;
     break label$31;
    }
    $1 = $4 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
    $0 = HEAP32[$0 >> 2];
    label$33 : {
     while (1) {
      $3 = $0;
      if ((HEAP32[$0 + 4 >> 2] & -8) == ($4 | 0)) {
       break label$33
      }
      $0 = $1 >>> 29 | 0;
      $1 = $1 << 1;
      $6 = ($3 + ($0 & 4) | 0) + 16 | 0;
      $0 = HEAP32[$6 >> 2];
      if ($0) {
       continue
      }
      break;
     };
     HEAP32[$6 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
     HEAP32[$2 + 12 >> 2] = $2;
     HEAP32[$2 + 8 >> 2] = $2;
     break label$31;
    }
    $0 = HEAP32[$3 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$3 + 8 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = $3;
    HEAP32[$2 + 8 >> 2] = $0;
   }
   $0 = HEAP32[7722] - 1 | 0;
   HEAP32[7722] = $0 ? $0 : -1;
  }
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 1
  }
  while (1) {
   label$2 : {
    $0 = dlmalloc(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 8 >> 2] = $0;
    if ($0) {
     break label$2
    }
    $0 = __stack_pointer - 16 | 0;
    HEAP32[$0 + 12 >> 2] = 31352;
    HEAP32[$0 + 8 >> 2] = 2;
    HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2];
    if (!HEAP32[$1 + 4 >> 2]) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]();
    continue;
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function operator_20delete_28void__29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  free(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 }
 
 function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  __stack_pointer = $0 + 16 | 0;
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function __cxxabiv1____class_type_info_____class_type_info_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____class_type_info_____class_type_info_28_29($0);
  operator_20delete_28void__29($0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____class_type_info_____class_type_info_28_29($0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0);
  operator_20delete_28void__29($0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0);
  operator_20delete_28void__29($0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP8[$3 + 3 | 0] = $2;
  label$1 : {
   if (!(HEAP8[$3 + 3 | 0] & 1)) {
    $1 = HEAP32[$3 + 4 >> 2];
    $0 = __stack_pointer - 16 | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$0 >> 2] = $1;
    $1 = HEAP32[HEAP32[$0 >> 2] + 4 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2];
    HEAP32[$0 + 8 >> 2] = $1;
    HEAP8[$3 + 15 | 0] = HEAP32[$0 + 12 >> 2] == HEAP32[$0 + 8 >> 2];
    break label$1;
   }
   if (HEAP32[$3 + 8 >> 2] != HEAP32[$3 + 4 >> 2]) {
    $2 = std__type_info__name_28_29_20const(HEAP32[$3 + 8 >> 2]);
    $4 = std__type_info__name_28_29_20const(HEAP32[$3 + 4 >> 2]);
    $0 = HEAPU8[$2 | 0];
    $1 = HEAPU8[$4 | 0];
    label$10 : {
     if (!$0 | ($1 | 0) != ($0 | 0)) {
      break label$10
     }
     $2 = $2 + 1 | 0;
     $4 = $4 + 1 | 0;
     while (1) {
      $1 = HEAPU8[$4 | 0];
      $0 = HEAPU8[$2 | 0];
      if (!$0) {
       break label$10
      }
      $2 = $2 + 1 | 0;
      $4 = $4 + 1 | 0;
      if (($0 | 0) == ($1 | 0)) {
       continue
      }
      break;
     };
    }
    $0 = $0 - $1 | 0;
   } else {
    $0 = 0
   }
   HEAP8[$3 + 15 | 0] = !$0;
  }
  __stack_pointer = $3 + 16 | 0;
  return HEAP8[$3 + 15 | 0] & 1;
 }
 
 function std__type_info__name_28_29_20const($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
  return HEAP32[$1 + 12 >> 2];
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 72 >> 2] = $0;
  HEAP32[$3 + 68 >> 2] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  $1 = HEAP32[$3 + 72 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1, HEAP32[$3 + 68 >> 2], 0) & 1) {
    HEAP8[$3 + 79 | 0] = 1;
    break label$1;
   }
   $2 = HEAP32[$3 + 68 >> 2];
   label$3 : {
    if ($2) {
     $0 = __stack_pointer - 96 | 0;
     __stack_pointer = $0;
     HEAP32[$0 + 92 >> 2] = $2;
     HEAP32[$0 + 88 >> 2] = 5228;
     HEAP32[$0 + 84 >> 2] = 5276;
     HEAP32[$0 + 80 >> 2] = 0;
     HEAP32[$0 + 76 >> 2] = HEAP32[HEAP32[$0 + 92 >> 2] >> 2];
     HEAP32[$0 + 72 >> 2] = HEAP32[HEAP32[$0 + 76 >> 2] - 8 >> 2];
     HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 92 >> 2] + HEAP32[$0 + 72 >> 2];
     HEAP32[$0 + 64 >> 2] = HEAP32[HEAP32[$0 + 76 >> 2] - 4 >> 2];
     HEAP32[$0 + 60 >> 2] = 0;
     HEAP32[$0 >> 2] = HEAP32[$0 + 84 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 92 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 88 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 80 >> 2];
     HEAP32[$0 + 16 >> 2] = 0;
     HEAP32[$0 + 20 >> 2] = 0;
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     HEAP32[$0 + 32 >> 2] = 0;
     HEAP32[$0 + 36 >> 2] = 0;
     HEAP32[$0 + 40 >> 2] = 0;
     HEAP32[$0 + 44 >> 2] = 0;
     HEAP32[$0 + 48 >> 2] = 0;
     HEAP8[$0 + 52 | 0] = 0;
     HEAP8[$0 + 53 | 0] = 0;
     HEAP8[$0 + 54 | 0] = 0;
     label$10 : {
      if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 84 >> 2], 0) & 1) {
       HEAP32[$0 + 48 >> 2] = 1;
       $2 = HEAP32[$0 + 64 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $0, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 68 >> 2], 1, 0);
       if (HEAP32[$0 + 24 >> 2] == 1) {
        HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 68 >> 2]
       }
       break label$10;
      }
      $2 = HEAP32[$0 + 64 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $0, HEAP32[$0 + 68 >> 2], 1, 0);
      label$4 : {
       label$5 : {
        switch (HEAP32[$0 + 36 >> 2]) {
        case 0:
         if (!(HEAP32[$0 + 40 >> 2] != 1 | HEAP32[$0 + 28 >> 2] != 1 | HEAP32[$0 + 32 >> 2] != 1)) {
          HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 20 >> 2]
         }
         break label$4;
        case 1:
         break label$5;
        default:
         break label$4;
        };
       }
       if (!(HEAP32[$0 + 40 >> 2] | HEAP32[$0 + 28 >> 2] != 1 | HEAP32[$0 + 32 >> 2] != 1 ? HEAP32[$0 + 24 >> 2] != 1 : 0)) {
        HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 16 >> 2]
       }
      }
     }
     __stack_pointer = $0 + 96 | 0;
     $0 = HEAP32[$0 + 60 >> 2];
     break label$3;
    }
    $0 = 0;
   }
   HEAP32[$3 + 60 >> 2] = $0;
   if (!HEAP32[$3 + 60 >> 2]) {
    HEAP8[$3 + 79 | 0] = 0;
    break label$1;
   }
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $0 = $3 + 48 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $3 + 40 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $3 + 32 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $3 + 24 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $3 + 16 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $3 + 8 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$3 >> 2] = HEAP32[$3 + 60 >> 2];
   HEAP32[$3 + 8 >> 2] = $1;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 1;
   $0 = HEAP32[$3 + 60 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3, HEAP32[HEAP32[$3 + 64 >> 2] >> 2], 1);
   if (HEAP32[$3 + 24 >> 2] == 1) {
    HEAP32[HEAP32[$3 + 64 >> 2] >> 2] = HEAP32[$3 + 16 >> 2];
    HEAP8[$3 + 79 | 0] = 1;
    break label$1;
   }
   HEAP8[$3 + 79 | 0] = 0;
  }
  __stack_pointer = $3 + 80 | 0;
  return HEAP8[$3 + 79 | 0] & 1;
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  label$1 : {
   if (!HEAP32[HEAP32[$4 + 8 >> 2] + 16 >> 2]) {
    HEAP32[HEAP32[$4 + 8 >> 2] + 16 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] = HEAP32[$4 >> 2];
    HEAP32[HEAP32[$4 + 8 >> 2] + 36 >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (HEAP32[HEAP32[$4 + 8 >> 2] + 16 >> 2] == HEAP32[$4 + 4 >> 2]) {
     if (HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] == 2) {
      HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] = HEAP32[$4 >> 2]
     }
     break label$3;
    }
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
    HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] = 2;
    HEAP8[HEAP32[$4 + 8 >> 2] + 54 | 0] = 1;
   }
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = HEAP32[$4 + 12 >> 2];
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2], 0) & 1) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2])
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = HEAP32[$4 + 12 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2], 0) & 1) {
    __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
    break label$1;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 12 >> 2] = 0;
  if (HEAP32[$4 + 20 >> 2]) {
   HEAP32[$4 + 12 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
   if (HEAP32[$0 + 4 >> 2] & 1) {
    HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
    (wasm2js_i32$0 = $4, wasm2js_i32$1 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 12 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   }
  }
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$4 + 24 >> 2];
  $3 = HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 12 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$4 + 16 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $2, $3, $0);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function update_offset_to_base_28char_20const__2c_20long_29($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return HEAP32[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] >> 2];
 }
 
 function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2], 0) & 1) {
    __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
    break label$1;
   }
   $1 = $0 + 16 | 0;
   HEAP32[$4 + 12 >> 2] = $1 + (HEAP32[$0 + 12 >> 2] << 3);
   HEAP32[$4 + 8 >> 2] = $1;
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   $0 = HEAP32[$4 + 8 >> 2] + 8 | 0;
   HEAP32[$4 + 8 >> 2] = $0;
   if (HEAPU32[$4 + 12 >> 2] > $0 >>> 0) {
    while (1) {
     label$4 : {
      __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
      if (HEAP8[HEAP32[$4 + 24 >> 2] + 54 | 0] & 1) {
       break label$4
      }
      $0 = HEAP32[$4 + 8 >> 2] + 8 | 0;
      HEAP32[$4 + 8 >> 2] = $0;
      if (HEAPU32[$4 + 12 >> 2] > $0 >>> 0) {
       continue
      }
     }
     break;
    }
   }
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  HEAP8[HEAP32[$5 + 24 >> 2] + 53 | 0] = 1;
  if (HEAP32[$5 + 16 >> 2] == HEAP32[HEAP32[$5 + 24 >> 2] + 4 >> 2]) {
   HEAP8[HEAP32[$5 + 24 >> 2] + 52 | 0] = 1;
   label$2 : {
    if (!HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2]) {
     HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2] = HEAP32[$5 + 20 >> 2];
     HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] = HEAP32[$5 + 12 >> 2];
     HEAP32[HEAP32[$5 + 24 >> 2] + 36 >> 2] = 1;
     if (!(HEAP32[HEAP32[$5 + 24 >> 2] + 48 >> 2] != 1 | HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 1)) {
      HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1
     }
     break label$2;
    }
    label$5 : {
     if (HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2] == HEAP32[$5 + 20 >> 2]) {
      if (HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] == 2) {
       HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] = HEAP32[$5 + 12 >> 2]
      }
      if (!(HEAP32[HEAP32[$5 + 24 >> 2] + 48 >> 2] != 1 | HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 1)) {
       HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1
      }
      break label$5;
     }
     $0 = HEAP32[$5 + 24 >> 2];
     HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
     HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1;
    }
   }
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  if (HEAP32[$4 + 4 >> 2] == HEAP32[HEAP32[$4 + 8 >> 2] + 4 >> 2] & HEAP32[HEAP32[$4 + 8 >> 2] + 28 >> 2] != 1) {
   HEAP32[HEAP32[$4 + 8 >> 2] + 28 >> 2] = HEAP32[$4 >> 2]
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 44 >> 2] = $0;
  HEAP32[$5 + 40 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 32 >> 2] = $3;
  HEAP8[$5 + 31 | 0] = $4;
  $0 = HEAP32[$5 + 44 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 40 >> 2] + 8 >> 2], HEAP8[$5 + 31 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2]);
    break label$1;
   }
   label$3 : {
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 40 >> 2] >> 2], HEAP8[$5 + 31 | 0] & 1) & 1) {
     if (!(HEAP32[$5 + 36 >> 2] != HEAP32[HEAP32[$5 + 40 >> 2] + 16 >> 2] & HEAP32[$5 + 36 >> 2] != HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2])) {
      if (HEAP32[$5 + 32 >> 2] == 1) {
       HEAP32[HEAP32[$5 + 40 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5 + 40 >> 2] + 32 >> 2] = HEAP32[$5 + 32 >> 2];
     HEAP8[$5 + 30 | 0] = 0;
     if (HEAP32[HEAP32[$5 + 40 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5 + 29 | 0] = 0;
      $1 = $0 + 16 | 0;
      HEAP32[$5 + 24 >> 2] = $1 + (HEAP32[$0 + 12 >> 2] << 3);
      HEAP32[$5 + 20 >> 2] = $1;
      while (1) {
       label$10 : {
        if (HEAPU32[$5 + 20 >> 2] >= HEAPU32[$5 + 24 >> 2]) {
         break label$10
        }
        HEAP8[HEAP32[$5 + 40 >> 2] + 52 | 0] = 0;
        HEAP8[HEAP32[$5 + 40 >> 2] + 53 | 0] = 0;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 20 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2], 1, HEAP8[$5 + 31 | 0] & 1);
        if (HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1) {
         break label$10
        }
        if (HEAP8[HEAP32[$5 + 40 >> 2] + 53 | 0] & 1) {
         HEAP8[$5 + 29 | 0] = 1;
         label$14 : {
          if (HEAP8[HEAP32[$5 + 40 >> 2] + 52 | 0] & 1) {
           HEAP8[$5 + 30 | 0] = 1;
           if (!(HEAP32[$0 + 8 >> 2] & 2) | HEAP32[HEAP32[$5 + 40 >> 2] + 24 >> 2] == 1) {
            break label$10
           }
           break label$14;
          }
          if (!(HEAP32[$0 + 8 >> 2] & 1)) {
           break label$10
          }
         }
        }
        HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 8;
        continue;
       }
       break;
      };
      label$19 : {
       if (HEAP8[$5 + 29 | 0] & 1) {
        HEAP32[HEAP32[$5 + 40 >> 2] + 44 >> 2] = 3;
        break label$19;
       }
       HEAP32[HEAP32[$5 + 40 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5 + 30 | 0] & 1)) {
      HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2] = HEAP32[$5 + 36 >> 2];
      $0 = HEAP32[$5 + 40 >> 2];
      HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
      if (!(HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5 + 40 >> 2] + 24 >> 2] != 2)) {
       HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] = 1
      }
     }
     break label$3;
    }
    $1 = $0 + 16 | 0;
    HEAP32[$5 + 16 >> 2] = $1 + (HEAP32[$0 + 12 >> 2] << 3);
    HEAP32[$5 + 12 >> 2] = $1;
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
    $1 = HEAP32[$5 + 12 >> 2] + 8 | 0;
    HEAP32[$5 + 12 >> 2] = $1;
    if (HEAPU32[$5 + 16 >> 2] > $1 >>> 0) {
     label$24 : {
      if (!(!(HEAP32[$0 + 8 >> 2] & 2) & HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] != 1)) {
       while (1) {
        if (!(HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1)) {
         __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
         $0 = HEAP32[$5 + 12 >> 2] + 8 | 0;
         HEAP32[$5 + 12 >> 2] = $0;
         if (HEAPU32[$5 + 16 >> 2] > $0 >>> 0) {
          continue
         }
        }
        break;
       };
       break label$24;
      }
      label$30 : {
       if (HEAP32[$0 + 8 >> 2] & 1) {
        while (1) {
         if (!(!(HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5 + 40 >> 2] + 24 >> 2] != 1) | HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1)) {
          __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
          $0 = HEAP32[$5 + 12 >> 2] + 8 | 0;
          HEAP32[$5 + 12 >> 2] = $0;
          if (HEAPU32[$5 + 16 >> 2] > $0 >>> 0) {
           continue
          }
         }
         break;
        };
        break label$30;
       }
       while (1) {
        if (!(HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1 | HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] == 1)) {
         __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
         $0 = HEAP32[$5 + 12 >> 2] + 8 | 0;
         HEAP32[$5 + 12 >> 2] = $0;
         if (HEAPU32[$5 + 16 >> 2] > $0 >>> 0) {
          continue
         }
        }
        break;
       };
      }
     }
    }
   }
  }
  __stack_pointer = $5 + 48 | 0;
 }
 
 function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
  if (HEAP32[$0 + 4 >> 2] & 1) {
   HEAP32[$6 >> 2] = HEAP32[HEAP32[$6 + 16 >> 2] >> 2];
   (wasm2js_i32$0 = $6, wasm2js_i32$1 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$6 >> 2], HEAP32[$6 + 4 >> 2])), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  }
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$6 + 24 >> 2];
  $3 = HEAP32[$6 + 20 >> 2];
  $4 = HEAP32[$6 + 16 >> 2] + HEAP32[$6 + 4 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$6 + 12 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, $2, $3, $4, $0, HEAP8[$6 + 11 | 0] & 1);
  __stack_pointer = $6 + 32 | 0;
 }
 
 function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP8[$5 + 15 | 0] = $4;
  $0 = HEAP32[$5 + 28 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
  if (HEAP32[$0 + 4 >> 2] & 1) {
   HEAP32[$5 + 4 >> 2] = HEAP32[HEAP32[$5 + 20 >> 2] >> 2];
   (wasm2js_i32$0 = $5, wasm2js_i32$1 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2])), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  }
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$5 + 24 >> 2];
  $3 = HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 8 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$5 + 16 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, $2, $3, $0, HEAP8[$5 + 15 | 0] & 1);
  __stack_pointer = $5 + 32 | 0;
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP8[$5 + 15 | 0] = $4;
  $0 = HEAP32[$5 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] + 8 >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2]);
    break label$1;
   }
   label$3 : {
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
     if (!(HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2] & HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2])) {
      if (HEAP32[$5 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = HEAP32[$5 + 16 >> 2];
     HEAP8[$5 + 14 | 0] = 0;
     if (HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5 + 13 | 0] = 0;
      HEAP8[HEAP32[$5 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$5 + 24 >> 2] + 53 | 0] = 0;
      $0 = HEAP32[$0 + 8 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 20 >> 2], 1, HEAP8[$5 + 15 | 0] & 1);
      if (HEAP8[HEAP32[$5 + 24 >> 2] + 53 | 0] & 1) {
       HEAP8[$5 + 13 | 0] = 1;
       if (HEAP8[HEAP32[$5 + 24 >> 2] + 52 | 0] & 1) {
        HEAP8[$5 + 14 | 0] = 1
       }
      }
      label$12 : {
       if (HEAP8[$5 + 13 | 0] & 1) {
        HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] = 3;
        break label$12;
       }
       HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5 + 14 | 0] & 1)) {
      HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2] = HEAP32[$5 + 20 >> 2];
      $0 = HEAP32[$5 + 24 >> 2];
      HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
      if (!(HEAP32[HEAP32[$5 + 24 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 2)) {
       HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1
      }
     }
     break label$3;
    }
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP8[$5 + 15 | 0] & 1);
   }
  }
  __stack_pointer = $5 + 32 | 0;
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP8[$5 + 15 | 0] = $4;
  $0 = HEAP32[$5 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] + 8 >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2]);
    break label$1;
   }
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
    label$4 : {
     if (!(HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2] & HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2])) {
      if (HEAP32[$5 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$4;
     }
     HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = HEAP32[$5 + 16 >> 2];
     HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2] = HEAP32[$5 + 20 >> 2];
     $0 = HEAP32[$5 + 24 >> 2];
     HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
     if (!(HEAP32[HEAP32[$5 + 24 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 2)) {
      HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1
     }
     HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] = 4;
    }
   }
  }
  __stack_pointer = $5 + 32 | 0;
 }
 
 function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$6 + 24 >> 2] + 8 >> 2], HEAP8[$6 + 11 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2]);
    break label$1;
   }
   HEAP8[$6 + 10 | 0] = HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1;
   HEAP8[$6 + 9 | 0] = HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1;
   $1 = $0 + 16 | 0;
   HEAP32[$6 + 4 >> 2] = $1 + (HEAP32[$0 + 12 >> 2] << 3);
   HEAP32[$6 >> 2] = $1;
   HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] = 0;
   HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] = 0;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$6 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP8[$6 + 11 | 0] & 1);
   HEAP8[$6 + 10 | 0] = HEAP8[$6 + 10 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1;
   HEAP8[$6 + 9 | 0] = HEAP8[$6 + 9 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1;
   $1 = HEAP32[$6 >> 2] + 8 | 0;
   HEAP32[$6 >> 2] = $1;
   if (HEAPU32[$6 + 4 >> 2] > $1 >>> 0) {
    while (1) {
     label$4 : {
      if (HEAP8[HEAP32[$6 + 24 >> 2] + 54 | 0] & 1) {
       break label$4
      }
      label$7 : {
       if (HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1) {
        if (!(HEAP32[$0 + 8 >> 2] & 2) | HEAP32[HEAP32[$6 + 24 >> 2] + 24 >> 2] == 1) {
         break label$4
        }
        break label$7;
       }
       if (HEAP32[$0 + 8 >> 2] & 1 ? 0 : HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1) {
        break label$4
       }
      }
      HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] = 0;
      __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$6 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP8[$6 + 11 | 0] & 1);
      HEAP8[$6 + 10 | 0] = HEAP8[$6 + 10 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1;
      HEAP8[$6 + 9 | 0] = HEAP8[$6 + 9 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1;
      $1 = HEAP32[$6 >> 2] + 8 | 0;
      HEAP32[$6 >> 2] = $1;
      if (HEAPU32[$6 + 4 >> 2] > $1 >>> 0) {
       continue
      }
     }
     break;
    }
   }
   HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] = HEAP8[$6 + 10 | 0] & 1;
   HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] = HEAP8[$6 + 9 | 0] & 1;
  }
  __stack_pointer = $6 + 32 | 0;
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$6 + 24 >> 2] + 8 >> 2], HEAP8[$6 + 11 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2]);
    break label$1;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP8[$6 + 11 | 0] & 1);
  }
  __stack_pointer = $6 + 32 | 0;
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$6 + 24 >> 2] + 8 >> 2], HEAP8[$6 + 11 | 0] & 1) & 1) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2])
  }
  __stack_pointer = $6 + 32 | 0;
 }
 
 function btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1) {
  HEAP32[$0 >> 2] = 5520;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 }
 
 function btCollisionAlgorithm___btCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function btCollisionAlgorithm___btCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  abort();
 }
 
 function btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1) {
  btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
  HEAP32[$0 >> 2] = 5548;
 }
 
 function btAlignedFreeDefault_28void__29($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[7689]](HEAP32[$0 - 4 >> 2])
  }
 }
 
 function btAlignedAllocDefault_28unsigned_20long_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $0 = FUNCTION_TABLE[HEAP32[7688]](($0 + $1 | 0) + 3 | 0) | 0;
  if ($0) {
   $2 = ($0 + $1 | 0) + 3 & 0 - $1;
   HEAP32[$2 - 4 >> 2] = $0;
  }
  return $2 | 0;
 }
 
 function btFreeDefault_28void__29($0) {
  $0 = $0 | 0;
  free($0);
 }
 
 function btAllocDefault_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return dlmalloc($0) | 0;
 }
 
 function btAlignedAllocInternal_28unsigned_20long_2c_20int_29($0) {
  HEAP32[7839] = HEAP32[7839] + 1;
  return FUNCTION_TABLE[HEAP32[7686]]($0, 16) | 0;
 }
 
 function btAlignedFreeInternal_28void__29($0) {
  if ($0) {
   HEAP32[7840] = HEAP32[7840] + 1;
   FUNCTION_TABLE[HEAP32[7687]]($0);
  }
 }
 
 function btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0;
  $28 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $28 + 1;
  $30 = $3 - $2 | 0;
  label$1 : {
   if (($30 | 0) == 1) {
    $13 = HEAPF64[$0 + 72 >> 3];
    $4 = HEAPF64[$0 + 40 >> 3];
    $1 = HEAP32[$1 + 12 >> 2] + Math_imul($2, 72) | 0;
    $5 = HEAPF64[$1 + 16 >> 3];
    $5 = $4 > $5 ? $4 : $5;
    $15 = HEAPF64[$0 + 104 >> 3];
    $5 = (($5 > $13 ? $13 : $5) - $4) * $15 + .5;
    label$3 : {
     if ($5 < 4294967296.0 & $5 >= 0.0) {
      $6 = ~~$5 >>> 0;
      break label$3;
     }
     $6 = 0;
    }
    $9 = HEAPF64[$1 >> 3];
    $8 = HEAPF64[$1 + 8 >> 3];
    $2 = HEAP32[$0 + 16 >> 2];
    $3 = $2 + ($28 << 4) | 0;
    HEAP16[$3 + 4 >> 1] = $6;
    $10 = HEAPF64[$0 - -64 >> 3];
    $5 = HEAPF64[$0 + 32 >> 3];
    $8 = $5 > $8 ? $5 : $8;
    $31 = HEAPF64[$0 + 96 >> 3];
    $8 = (($8 > $10 ? $10 : $8) - $5) * $31 + .5;
    label$5 : {
     if ($8 < 4294967296.0 & $8 >= 0.0) {
      $6 = ~~$8 >>> 0;
      break label$5;
     }
     $6 = 0;
    }
    HEAP16[$3 + 2 >> 1] = $6;
    $17 = HEAPF64[$0 + 56 >> 3];
    $8 = HEAPF64[$0 + 24 >> 3];
    $9 = $8 > $9 ? $8 : $9;
    $32 = HEAPF64[$0 + 88 >> 3];
    $9 = (($9 > $17 ? $17 : $9) - $8) * $32 + .5;
    label$7 : {
     if ($9 < 4294967296.0 & $9 >= 0.0) {
      $0 = ~~$9 >>> 0;
      break label$7;
     }
     $0 = 0;
    }
    HEAP16[$3 >> 1] = $0;
    $9 = HEAPF64[$1 + 32 >> 3];
    $21 = HEAPF64[$1 + 40 >> 3];
    $6 = $3 + 10 | 0;
    $34 = $15;
    $15 = HEAPF64[$1 + 48 >> 3];
    $15 = $4 > $15 ? $4 : $15;
    $4 = $34 * (($13 < $15 ? $13 : $15) - $4) + .5;
    label$9 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $0 = ~~$4 >>> 0;
      break label$9;
     }
     $0 = 0;
    }
    HEAP16[$6 >> 1] = $0;
    $6 = $3 + 8 | 0;
    $4 = $5 > $21 ? $5 : $21;
    $4 = $31 * (($4 > $10 ? $10 : $4) - $5) + .5;
    label$11 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $0 = ~~$4 >>> 0;
      break label$11;
     }
     $0 = 0;
    }
    HEAP16[$6 >> 1] = $0;
    $4 = $8 > $9 ? $8 : $9;
    $4 = $32 * (($4 > $17 ? $17 : $4) - $8) + .5;
    label$13 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $0 = ~~$4 >>> 0;
      break label$13;
     }
     $0 = 0;
    }
    HEAP16[$3 + 6 >> 1] = $0;
    $0 = HEAP32[$1 + 64 >> 2];
    break label$1;
   }
   $20 = $3 - $2 | 0;
   label$10 : {
    label$2 : {
     label$31 : {
      if (($2 | 0) >= ($3 | 0)) {
       $10 = +($20 | 0);
       break label$31;
      }
      $11 = (HEAP32[$1 + 12 >> 2] + Math_imul($2, 72) | 0) + 48 | 0;
      $6 = $20;
      while (1) {
       $5 = $5 + (HEAPF64[$11 - 8 >> 3] + HEAPF64[$11 - 40 >> 3]) * .5;
       $13 = $13 + (HEAPF64[$11 - 16 >> 3] + HEAPF64[$11 - 48 >> 3]) * .5;
       $4 = $4 + (HEAPF64[$11 >> 3] + HEAPF64[$11 - 32 >> 3]) * .5;
       $11 = $11 + 72 | 0;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue
       }
       break;
      };
      $10 = +($20 | 0);
      if (($2 | 0) < ($3 | 0)) {
       break label$2
      }
     }
     $4 = 0.0;
     $5 = 0.0;
     break label$10;
    }
    $8 = 1.0 / $10;
    $17 = $8 * $4;
    $9 = $8 * $5;
    $13 = $8 * $13;
    $6 = $3 - $2 | 0;
    $11 = (HEAP32[$1 + 12 >> 2] + Math_imul($2, 72) | 0) + 48 | 0;
    $5 = 0.0;
    $4 = 0.0;
    $8 = 0.0;
    while (1) {
     $15 = $4;
     $4 = (HEAPF64[$11 - 8 >> 3] + HEAPF64[$11 - 40 >> 3]) * .5 - $9;
     $4 = $15 + $4 * $4;
     $15 = $8;
     $8 = (HEAPF64[$11 - 16 >> 3] + HEAPF64[$11 - 48 >> 3]) * .5 - $13;
     $8 = $15 + $8 * $8;
     $15 = $5;
     $5 = (HEAPF64[$11 >> 3] + HEAPF64[$11 - 32 >> 3]) * .5 - $17;
     $5 = $15 + $5 * $5;
     $11 = $11 + 72 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   $13 = 1.0 / ($10 + -1.0);
   $8 = $13 * $8;
   $4 = $13 * $4;
   $6 = $8 < $4;
   $11 = $13 * $5 > ($6 ? $4 : $8) ? 2 : $6;
   $4 = 0.0;
   $5 = 0.0;
   $8 = 0.0;
   $16 = __stack_pointer - 128 | 0;
   __stack_pointer = $16;
   HEAP32[$16 + 56 >> 2] = 0;
   HEAP32[$16 + 60 >> 2] = 0;
   $7 = ($2 | 0) >= ($3 | 0);
   if (!$7) {
    $23 = $3 - $2 | 0;
    $6 = (HEAP32[$1 + 12 >> 2] + Math_imul($2, 72) | 0) + 48 | 0;
    while (1) {
     $4 = (HEAPF64[$6 - 8 >> 3] + HEAPF64[$6 - 40 >> 3]) * .5 + $4;
     $5 = (HEAPF64[$6 - 16 >> 3] + HEAPF64[$6 - 48 >> 3]) * .5 + $5;
     $8 = (HEAPF64[$6 >> 3] + HEAPF64[$6 - 32 >> 3]) * .5 + $8;
     $6 = $6 + 72 | 0;
     $23 = $23 - 1 | 0;
     if ($23) {
      continue
     }
     break;
    };
   }
   $20 = $3 - $2 | 0;
   $13 = 1.0 / +($20 | 0);
   HEAPF64[$16 + 48 >> 3] = $13 * $8;
   HEAPF64[$16 + 40 >> 3] = $13 * $4;
   HEAPF64[$16 + 32 >> 3] = $13 * $5;
   $6 = $2;
   if (!$7) {
    $11 = $11 << 3;
    $4 = HEAPF64[$11 + ($16 + 32 | 0) >> 3];
    $23 = Math_imul($2, 72);
    $35 = $11 + $16 | 0;
    $24 = $16 + 96 | 0;
    $11 = $20;
    while (1) {
     HEAP32[$16 + 24 >> 2] = 0;
     HEAP32[$16 + 28 >> 2] = 0;
     $33 = HEAP32[$1 + 12 >> 2];
     $7 = $33 + $23 | 0;
     $14 = $7 + 48 | 0;
     $22 = $7 + 16 | 0;
     HEAPF64[$16 + 16 >> 3] = (HEAPF64[$14 >> 3] + HEAPF64[$22 >> 3]) * .5;
     $19 = $7 + 40 | 0;
     $12 = $7 + 8 | 0;
     HEAPF64[$16 + 8 >> 3] = (HEAPF64[$19 >> 3] + HEAPF64[$12 >> 3]) * .5;
     $27 = $7 + 32 | 0;
     HEAPF64[$16 >> 3] = (HEAPF64[$27 >> 3] + HEAPF64[$7 >> 3]) * .5;
     if (HEAPF64[$35 >> 3] > $4) {
      $25 = $7 + 24 | 0;
      $29 = HEAP32[$25 + 4 >> 2];
      $18 = $16 - -64 | 0;
      $26 = $18 + 24 | 0;
      HEAP32[$26 >> 2] = HEAP32[$25 >> 2];
      HEAP32[$26 + 4 >> 2] = $29;
      $29 = HEAP32[$22 + 4 >> 2];
      $25 = $18 + 16 | 0;
      HEAP32[$25 >> 2] = HEAP32[$22 >> 2];
      HEAP32[$25 + 4 >> 2] = $29;
      $29 = HEAP32[$12 + 4 >> 2];
      $22 = $18 + 8 | 0;
      HEAP32[$22 >> 2] = HEAP32[$12 >> 2];
      HEAP32[$22 + 4 >> 2] = $29;
      $12 = HEAP32[$27 + 4 >> 2];
      HEAP32[$24 >> 2] = HEAP32[$27 >> 2];
      HEAP32[$24 + 4 >> 2] = $12;
      $12 = HEAP32[$19 + 4 >> 2];
      $27 = $24 + 8 | 0;
      HEAP32[$27 >> 2] = HEAP32[$19 >> 2];
      HEAP32[$27 + 4 >> 2] = $12;
      $19 = HEAP32[$14 + 4 >> 2];
      $12 = $24 + 16 | 0;
      HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$12 + 4 >> 2] = $19;
      $14 = $7 + 56 | 0;
      $19 = HEAP32[$14 + 4 >> 2];
      $12 = $24 + 24 | 0;
      HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$12 + 4 >> 2] = $19;
      $14 = HEAP32[$7 + 4 >> 2];
      HEAP32[$16 + 64 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$16 + 68 >> 2] = $14;
      $14 = HEAP32[$7 - -64 >> 2];
      $12 = $7;
      $7 = Math_imul($6, 72);
      memcpy($12, $7 + $33 | 0, 68);
      $19 = HEAP32[$16 + 68 >> 2];
      $7 = $7 + HEAP32[$1 + 12 >> 2] | 0;
      HEAP32[$7 >> 2] = HEAP32[$16 + 64 >> 2];
      HEAP32[$7 + 4 >> 2] = $19;
      HEAP32[$7 + 64 >> 2] = $14;
      $14 = $18 + 56 | 0;
      $19 = HEAP32[$14 + 4 >> 2];
      $12 = $7 + 56 | 0;
      HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$12 + 4 >> 2] = $19;
      $14 = $18 + 48 | 0;
      $19 = HEAP32[$14 + 4 >> 2];
      $12 = $7 + 48 | 0;
      HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$12 + 4 >> 2] = $19;
      $18 = $18 + 40 | 0;
      $14 = HEAP32[$18 + 4 >> 2];
      $19 = $7 + 40 | 0;
      HEAP32[$19 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$19 + 4 >> 2] = $14;
      $18 = HEAP32[$24 + 4 >> 2];
      $14 = $7 + 32 | 0;
      HEAP32[$14 >> 2] = HEAP32[$24 >> 2];
      HEAP32[$14 + 4 >> 2] = $18;
      $18 = HEAP32[$26 + 4 >> 2];
      $14 = $7 + 24 | 0;
      HEAP32[$14 >> 2] = HEAP32[$26 >> 2];
      HEAP32[$14 + 4 >> 2] = $18;
      $18 = HEAP32[$25 + 4 >> 2];
      $26 = $7 + 16 | 0;
      HEAP32[$26 >> 2] = HEAP32[$25 >> 2];
      HEAP32[$26 + 4 >> 2] = $18;
      $18 = HEAP32[$22 + 4 >> 2];
      $7 = $7 + 8 | 0;
      HEAP32[$7 >> 2] = HEAP32[$22 >> 2];
      HEAP32[$7 + 4 >> 2] = $18;
      $6 = $6 + 1 | 0;
     }
     $23 = $23 + 72 | 0;
     $11 = $11 - 1 | 0;
     if ($11) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $16 + 128 | 0;
   $11 = ($20 >> 1) + $2 | 0;
   $20 = ($20 | 0) / 3 | 0;
   $20 = ($2 + $20 | 0) >= ($6 | 0) ? $11 : (($20 ^ -1) + $3 | 0) <= ($6 | 0) ? $11 : $6;
   label$15 : {
    if (($2 | 0) >= ($3 | 0)) {
     $4 = 1797693134862315708145274.0e284;
     $5 = -1797693134862315708145274.0e284;
     $8 = -1797693134862315708145274.0e284;
     $13 = 1797693134862315708145274.0e284;
     $10 = -1797693134862315708145274.0e284;
     $17 = 1797693134862315708145274.0e284;
     break label$15;
    }
    $6 = (HEAP32[$1 + 12 >> 2] + Math_imul($2, 72) | 0) + 32 | 0;
    $10 = -1797693134862315708145274.0e284;
    $17 = 1797693134862315708145274.0e284;
    $13 = 1797693134862315708145274.0e284;
    $4 = 1797693134862315708145274.0e284;
    $8 = -1797693134862315708145274.0e284;
    $5 = -1797693134862315708145274.0e284;
    while (1) {
     $9 = HEAPF64[$6 + 16 >> 3];
     $5 = $5 < $9 ? $9 : $5;
     $9 = HEAPF64[$6 + 8 >> 3];
     $8 = $8 < $9 ? $9 : $8;
     $9 = HEAPF64[$6 - 16 >> 3];
     $4 = $4 > $9 ? $9 : $4;
     $9 = HEAPF64[$6 - 24 >> 3];
     $13 = $9 < $13 ? $9 : $13;
     $9 = HEAPF64[$6 - 32 >> 3];
     $17 = $9 < $17 ? $9 : $17;
     $9 = HEAPF64[$6 >> 3];
     $10 = $9 > $10 ? $9 : $10;
     $6 = $6 + 72 | 0;
     $30 = $30 - 1 | 0;
     if ($30) {
      continue
     }
     break;
    };
   }
   $11 = $0 + 16 | 0;
   $6 = HEAP32[$11 >> 2] + ($28 << 4) | 0;
   $15 = HEAPF64[$0 + 88 >> 3];
   $21 = HEAPF64[$0 + 56 >> 3];
   $9 = HEAPF64[$0 + 24 >> 3];
   $10 = $9 > $10 ? $9 : $10;
   $10 = $15 * (($10 > $21 ? $21 : $10) - $9) + .5;
   label$18 : {
    if ($10 < 4294967296.0 & $10 >= 0.0) {
     $7 = ~~$10 >>> 0;
     break label$18;
    }
    $7 = 0;
   }
   HEAP16[$6 + 6 >> 1] = $7;
   $10 = $9 > $17 ? $9 : $17;
   $10 = (($10 > $21 ? $21 : $10) - $9) * $15 + .5;
   label$20 : {
    if ($10 < 4294967296.0 & $10 >= 0.0) {
     $7 = ~~$10 >>> 0;
     break label$20;
    }
    $7 = 0;
   }
   HEAP16[$6 >> 1] = $7;
   $12 = $6 + 10 | 0;
   $21 = HEAPF64[$0 + 104 >> 3];
   $17 = HEAPF64[$0 + 72 >> 3];
   $10 = HEAPF64[$0 + 40 >> 3];
   $5 = $5 < $10 ? $10 : $5;
   $5 = $21 * (($5 > $17 ? $17 : $5) - $10) + .5;
   label$22 : {
    if ($5 < 4294967296.0 & $5 >= 0.0) {
     $7 = ~~$5 >>> 0;
     break label$22;
    }
    $7 = 0;
   }
   HEAP16[$12 >> 1] = $7;
   $12 = $6 + 8 | 0;
   $15 = HEAPF64[$0 + 96 >> 3];
   $9 = HEAPF64[$0 - -64 >> 3];
   $5 = HEAPF64[$0 + 32 >> 3];
   $8 = $5 > $8 ? $5 : $8;
   $8 = $15 * (($8 > $9 ? $9 : $8) - $5) + .5;
   label$24 : {
    if ($8 < 4294967296.0 & $8 >= 0.0) {
     $7 = ~~$8 >>> 0;
     break label$24;
    }
    $7 = 0;
   }
   HEAP16[$12 >> 1] = $7;
   $4 = $4 < $10 ? $10 : $4;
   $4 = (($4 > $17 ? $17 : $4) - $10) * $21 + .5;
   label$26 : {
    if ($4 < 4294967296.0 & $4 >= 0.0) {
     $7 = ~~$4 >>> 0;
     break label$26;
    }
    $7 = 0;
   }
   HEAP16[$6 + 4 >> 1] = $7;
   $4 = $5 > $13 ? $5 : $13;
   $4 = (($4 > $9 ? $9 : $4) - $5) * $15 + .5;
   label$28 : {
    if ($4 < 4294967296.0 & $4 >= 0.0) {
     $7 = ~~$4 >>> 0;
     break label$28;
    }
    $7 = 0;
   }
   HEAP16[$6 + 2 >> 1] = $7;
   btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, $2, $20);
   btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, $20, $3);
   $2 = HEAP32[$11 >> 2];
   $0 = $28 - HEAP32[$0 >> 2] | 0;
  }
  HEAP32[(($28 << 4) + $2 | 0) + 12 >> 2] = $0;
 }
 
 function btGImpactQuantizedBvh__boxQuery_28btAABB_20const__2c_20btAlignedObjectArray_int___29_20const($0, $1, $2) {
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
  $18 = HEAPF64[$0 + 104 >> 3];
  $6 = HEAPF64[$0 + 72 >> 3];
  $4 = HEAPF64[$0 + 40 >> 3];
  $5 = HEAPF64[$1 + 48 >> 3];
  $5 = $4 > $5 ? $4 : $5;
  $5 = $18 * (($5 > $6 ? $6 : $5) - $4) + .5;
  label$1 : {
   if ($5 < 4294967296.0 & $5 >= 0.0) {
    $19 = ~~$5 >>> 0;
    break label$1;
   }
   $19 = 0;
  }
  $20 = HEAPF64[$0 + 96 >> 3];
  $9 = HEAPF64[$0 - -64 >> 3];
  $5 = HEAPF64[$0 + 32 >> 3];
  $7 = HEAPF64[$1 + 40 >> 3];
  $7 = $5 > $7 ? $5 : $7;
  $7 = $20 * (($7 > $9 ? $9 : $7) - $5) + .5;
  label$3 : {
   if ($7 < 4294967296.0 & $7 >= 0.0) {
    $21 = ~~$7 >>> 0;
    break label$3;
   }
   $21 = 0;
  }
  $7 = HEAPF64[$1 + 16 >> 3];
  $7 = $4 > $7 ? $4 : $7;
  $4 = (($6 < $7 ? $6 : $7) - $4) * $18 + .5;
  label$5 : {
   if ($4 < 4294967296.0 & $4 >= 0.0) {
    $16 = ~~$4 >>> 0;
    break label$5;
   }
   $16 = 0;
  }
  $4 = HEAPF64[$1 + 8 >> 3];
  $4 = $4 < $5 ? $5 : $4;
  $4 = (($4 > $9 ? $9 : $4) - $5) * $20 + .5;
  label$7 : {
   if ($4 < 4294967296.0 & $4 >= 0.0) {
    $22 = ~~$4 >>> 0;
    break label$7;
   }
   $22 = 0;
  }
  $9 = HEAPF64[$0 + 88 >> 3];
  $5 = HEAPF64[$0 + 56 >> 3];
  $4 = HEAPF64[$0 + 24 >> 3];
  $6 = HEAPF64[$1 + 32 >> 3];
  $6 = $4 > $6 ? $4 : $6;
  $6 = $9 * (($5 < $6 ? $5 : $6) - $4) + .5;
  label$9 : {
   if ($6 < 4294967296.0 & $6 >= 0.0) {
    $23 = ~~$6 >>> 0;
    break label$9;
   }
   $23 = 0;
  }
  $6 = HEAPF64[$1 >> 3];
  $6 = $4 > $6 ? $4 : $6;
  $4 = (($5 < $6 ? $5 : $6) - $4) * $9 + .5;
  label$11 : {
   if ($4 < 4294967296.0 & $4 >= 0.0) {
    $24 = ~~$4 >>> 0;
    break label$11;
   }
   $24 = 0;
  }
  $25 = HEAP32[$0 >> 2];
  if (($25 | 0) > 0) {
   $1 = 0;
   while (1) {
    $26 = $1 << 4;
    $3 = $26 + HEAP32[$0 + 16 >> 2] | 0;
    label$15 : {
     if (!(!(HEAPU16[$3 >> 1] > $23 >>> 0 | HEAPU16[$3 + 6 >> 1] < $24 >>> 0 | (HEAPU16[$3 + 8 >> 1] < $22 >>> 0 | HEAPU16[$3 + 2 >> 1] > $21 >>> 0)) & HEAPU16[$3 + 4 >> 1] <= $19 >>> 0)) {
      $27 = HEAP32[$3 + 12 >> 2] >= 0;
      $28 = 0;
      break label$15;
     }
     $17 = HEAP32[$3 + 12 >> 2];
     $27 = ($17 | 0) >= 0;
     $3 = HEAPU16[$3 + 10 >> 1];
     $28 = $3 >>> 0 >= $16 >>> 0;
     if (($17 | 0) < 0 | $3 >>> 0 < $16 >>> 0) {
      break label$15
     }
     $3 = HEAP32[$2 + 4 >> 2];
     label$18 : {
      if (($3 | 0) != HEAP32[$2 + 8 >> 2]) {
       break label$18
      }
      $10 = $3 ? $3 << 1 : 1;
      if (($10 | 0) <= ($3 | 0)) {
       break label$18
      }
      label$19 : {
       if (!$10) {
        $11 = 0;
        break label$19;
       }
       $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
       $3 = HEAP32[$2 + 4 >> 2];
      }
      $12 = HEAP32[$2 + 12 >> 2];
      label$21 : {
       label$22 : {
        if (($3 | 0) > 0) {
         $13 = $3 & 3;
         $8 = 0;
         if ($3 - 1 >>> 0 >= 3) {
          $29 = $3 & -4;
          $3 = 0;
          while (1) {
           $14 = $3 + $11 | 0;
           $15 = $3 + $12 | 0;
           HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
           HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
           HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
           HEAP32[$14 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
           $3 = $3 + 16 | 0;
           $8 = $8 + 4 | 0;
           if (($29 | 0) != ($8 | 0)) {
            continue
           }
           break;
          };
         }
         if (!$13) {
          break label$22
         }
         $8 = $8 << 2;
         $3 = $8 + $11 | 0;
         $8 = $8 + $12 | 0;
         while (1) {
          HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
          $3 = $3 + 4 | 0;
          $8 = $8 + 4 | 0;
          $13 = $13 - 1 | 0;
          if ($13) {
           continue
          }
          break;
         };
         break label$22;
        }
        if (!$12) {
         break label$21
        }
       }
       if (HEAPU8[$2 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($12)
       }
       $3 = HEAP32[$2 + 4 >> 2];
      }
      HEAP32[$2 + 12 >> 2] = $11;
      HEAP8[$2 + 16 | 0] = 1;
      HEAP32[$2 + 8 >> 2] = $10;
     }
     HEAP32[HEAP32[$2 + 12 >> 2] + ($3 << 2) >> 2] = $17;
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    }
    $1 = $27 | $28 ? $1 + 1 | 0 : $1 - HEAP32[(HEAP32[$0 + 16 >> 2] + $26 | 0) + 12 >> 2] | 0;
    if (($25 | 0) > ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0.0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
  $8 = __stack_pointer - 128 | 0;
  __stack_pointer = $8;
  $32 = $4 << 4;
  $15 = $32 + HEAP32[$0 + 16 >> 2] | 0;
  $11 = HEAPU16[$15 >> 1];
  $12 = HEAPU16[$15 + 2 >> 1];
  $9 = HEAPU16[$15 + 4 >> 1];
  HEAP32[$8 + 88 >> 2] = 0;
  HEAP32[$8 + 92 >> 2] = 0;
  $21 = HEAPF64[$0 + 104 >> 3];
  $16 = HEAPF64[$0 + 40 >> 3];
  HEAPF64[$8 + 80 >> 3] = +($9 >>> 0) / $21 + $16;
  $17 = HEAPF64[$0 + 96 >> 3];
  $18 = HEAPF64[$0 + 32 >> 3];
  HEAPF64[$8 + 72 >> 3] = +($12 >>> 0) / $17 + $18;
  $10 = HEAPF64[$0 + 88 >> 3];
  $7 = HEAPF64[$0 + 24 >> 3];
  HEAPF64[$8 + 64 >> 3] = +($11 >>> 0) / $10 + $7;
  $31 = HEAPU16[$15 + 6 >> 1];
  $13 = HEAPU16[$15 + 10 >> 1];
  $11 = HEAPU16[$15 + 8 >> 1];
  $9 = $8 - -64 | 0;
  $12 = $9 + 56 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  HEAPF64[$9 + 40 >> 3] = $18 + +($11 >>> 0) / $17;
  HEAPF64[$9 + 48 >> 3] = $16 + +($13 >>> 0) / $21;
  HEAPF64[$8 + 96 >> 3] = $7 + +($31 >>> 0) / $10;
  $15 = $5 << 4;
  $28 = $15 + HEAP32[$1 + 16 >> 2] | 0;
  $13 = HEAPU16[$28 >> 1];
  $11 = HEAPU16[$28 + 2 >> 1];
  $12 = HEAPU16[$28 + 4 >> 1];
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  $21 = HEAPF64[$1 + 104 >> 3];
  $16 = HEAPF64[$1 + 40 >> 3];
  HEAPF64[$8 + 16 >> 3] = +($12 >>> 0) / $21 + $16;
  $17 = HEAPF64[$1 + 96 >> 3];
  $18 = HEAPF64[$1 + 32 >> 3];
  HEAPF64[$8 + 8 >> 3] = +($11 >>> 0) / $17 + $18;
  $10 = HEAPF64[$1 + 88 >> 3];
  $7 = HEAPF64[$1 + 24 >> 3];
  HEAPF64[$8 >> 3] = +($13 >>> 0) / $10 + $7;
  $31 = HEAPU16[$28 + 6 >> 1];
  $13 = HEAPU16[$28 + 10 >> 1];
  $11 = HEAPU16[$28 + 8 >> 1];
  $12 = $8 + 56 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  $28 = $8 + 40 | 0;
  HEAPF64[$28 >> 3] = $18 + +($11 >>> 0) / $17;
  $11 = $8 + 48 | 0;
  HEAPF64[$11 >> 3] = $16 + +($13 >>> 0) / $21;
  HEAPF64[$8 + 32 >> 3] = $7 + +($31 >>> 0) / $10;
  $12 = 0;
  $39 = HEAPF64[$3 + 48 >> 3];
  $16 = HEAPF64[$11 >> 3];
  $14 = ($16 + HEAPF64[$8 + 16 >> 3]) * .5;
  $40 = HEAPF64[$3 + 32 >> 3];
  $17 = HEAPF64[$8 + 32 >> 3];
  $19 = ($17 + HEAPF64[$8 >> 3]) * .5;
  $18 = HEAPF64[$28 >> 3];
  $20 = ($18 + HEAPF64[$8 + 8 >> 3]) * .5;
  $41 = HEAPF64[$3 + 40 >> 3];
  $10 = HEAPF64[$9 + 32 >> 3];
  $7 = ($10 + HEAPF64[$9 >> 3]) * .5;
  $29 = HEAPF64[$3 >> 3] + ($39 * $14 + ($40 * $19 + $20 * $41)) - $7;
  $22 = $10 - $7;
  $33 = HEAPF64[$3 + 144 >> 3];
  $23 = $16 - $14;
  $34 = HEAPF64[$3 + 128 >> 3];
  $24 = $17 - $19;
  $25 = $18 - $20;
  $35 = HEAPF64[$3 + 136 >> 3];
  label$10 : {
   if (Math_abs($29) > $22 + ($33 * $23 + ($34 * $24 + $25 * $35))) {
    break label$10
   }
   $42 = HEAPF64[$3 + 80 >> 3];
   $43 = HEAPF64[$3 - -64 >> 3];
   $21 = HEAPF64[$3 + 72 >> 3];
   $10 = HEAPF64[$9 + 40 >> 3];
   $7 = ($10 + HEAPF64[$9 + 8 >> 3]) * .5;
   $30 = HEAPF64[$3 + 8 >> 3] + ($42 * $14 + ($43 * $19 + $20 * $21)) - $7;
   $26 = $10 - $7;
   $36 = HEAPF64[$3 + 176 >> 3];
   $37 = HEAPF64[$3 + 160 >> 3];
   $38 = HEAPF64[$3 + 168 >> 3];
   if (Math_abs($30) > $26 + ($36 * $23 + ($37 * $24 + $25 * $38))) {
    break label$10
   }
   $16 = HEAPF64[$3 + 112 >> 3];
   $17 = HEAPF64[$3 + 96 >> 3];
   $18 = HEAPF64[$3 + 104 >> 3];
   $10 = HEAPF64[$9 + 48 >> 3];
   $7 = ($10 + HEAPF64[$9 + 16 >> 3]) * .5;
   $14 = HEAPF64[$3 + 16 >> 3] + ($16 * $14 + ($17 * $19 + $20 * $18)) - $7;
   $27 = $10 - $7;
   $19 = HEAPF64[$3 + 208 >> 3];
   $20 = HEAPF64[$3 + 192 >> 3];
   $10 = HEAPF64[$3 + 200 >> 3];
   if (Math_abs($14) > $27 + ($19 * $23 + ($20 * $24 + $25 * $10)) | Math_abs($14 * $17 + ($29 * $40 + $30 * $43)) > $24 + ($27 * $20 + ($22 * $34 + $26 * $37)) | Math_abs($14 * $18 + ($29 * $41 + $30 * $21)) > $25 + ($27 * $10 + ($22 * $35 + $26 * $38))) {
    break label$10
   }
   $9 = Math_abs($14 * $16 + ($29 * $39 + $30 * $42)) > $23 + ($27 * $19 + ($22 * $33 + $26 * $36));
   $12 = !$9;
   if (!$6 | $9) {
    break label$10
   }
   label$2 : {
    if (Math_abs($14 * $43 - $17 * $30) > $23 * $35 + ($25 * $33 + ($26 * $20 + $27 * $37))) {
     break label$2
    }
    $7 = -$30;
    if (Math_abs($14 * $21 + $18 * $7) > $23 * $34 + ($24 * $33 + ($26 * $10 + $27 * $38)) | Math_abs($14 * $42 + $16 * $7) > $25 * $34 + ($24 * $35 + ($26 * $19 + $27 * $36)) | Math_abs($29 * $17 - $40 * $14) > $23 * $38 + ($25 * $36 + ($22 * $20 + $27 * $34))) {
     break label$2
    }
    $7 = -$14;
    if (Math_abs($29 * $18 + $41 * $7) > $23 * $37 + ($24 * $36 + ($22 * $10 + $27 * $35)) | Math_abs($29 * $16 + $39 * $7) > $25 * $37 + ($24 * $38 + ($22 * $19 + $27 * $33)) | Math_abs($30 * $40 - $43 * $29) > $23 * $10 + ($25 * $19 + ($22 * $37 + $26 * $34))) {
     break label$2
    }
    $7 = -$29;
    if (Math_abs($30 * $41 + $21 * $7) > $23 * $20 + ($24 * $19 + ($22 * $38 + $26 * $35))) {
     break label$2
    }
    $12 = 1;
    if (!(Math_abs($30 * $39 + $42 * $7) > $25 * $20 + ($24 * $10 + ($22 * $36 + $26 * $33)))) {
     break label$10
    }
   }
   $12 = 0;
  }
  label$1 : {
   if (!$12) {
    break label$1
   }
   $15 = HEAP32[($15 + HEAP32[$1 + 16 >> 2] | 0) + 12 >> 2];
   $11 = HEAP32[($32 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   if (($11 | 0) >= 0) {
    if (($15 | 0) >= 0) {
     $0 = HEAP32[$2 + 4 >> 2];
     label$4 : {
      if (($0 | 0) != HEAP32[$2 + 8 >> 2]) {
       break label$4
      }
      $31 = $0 ? $0 << 1 : 1;
      if (($31 | 0) <= ($0 | 0)) {
       break label$4
      }
      label$5 : {
       if (!$31) {
        $4 = 0;
        break label$5;
       }
       $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($31 << 3);
       $0 = HEAP32[$2 + 4 >> 2];
      }
      $32 = HEAP32[$2 + 12 >> 2];
      label$7 : {
       label$8 : {
        if (($0 | 0) > 0) {
         $3 = 0;
         if (($0 | 0) != 1) {
          $12 = $0 & -2;
          $1 = 0;
          while (1) {
           $6 = $1 + $32 | 0;
           $5 = HEAP32[$6 + 4 >> 2];
           $13 = $1 + $4 | 0;
           HEAP32[$13 >> 2] = HEAP32[$6 >> 2];
           HEAP32[$13 + 4 >> 2] = $5;
           $9 = $6 + 8 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $5 = $13 + 8 | 0;
           HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$5 + 4 >> 2] = $6;
           $1 = $1 + 16 | 0;
           $3 = $3 + 2 | 0;
           if (($12 | 0) != ($3 | 0)) {
            continue
           }
           break;
          };
         }
         if ($0 & 1) {
          $1 = $3 << 3;
          $5 = $1 + $4 | 0;
          $3 = $1 + $32 | 0;
          $1 = HEAP32[$3 + 4 >> 2];
          HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
          HEAP32[$5 + 4 >> 2] = $1;
         }
         if (HEAPU8[$2 + 16 | 0]) {
          break label$8
         }
         break label$7;
        }
        if (!$32 | !HEAPU8[$2 + 16 | 0]) {
         break label$7
        }
       }
       btAlignedFreeInternal_28void__29($32);
       $0 = HEAP32[$2 + 4 >> 2];
      }
      HEAP32[$2 + 12 >> 2] = $4;
      HEAP8[$2 + 16 | 0] = 1;
      HEAP32[$2 + 8 >> 2] = $31;
     }
     HEAP32[$2 + 4 >> 2] = $0 + 1;
     $0 = HEAP32[$2 + 12 >> 2] + ($0 << 3) | 0;
     HEAP32[$0 + 4 >> 2] = $15;
     HEAP32[$0 >> 2] = $11;
     break label$1;
    }
    $6 = $5 + 1 | 0;
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $4, $6, 0);
    $9 = $0;
    $0 = HEAP32[(HEAP32[$1 + 16 >> 2] + ($6 << 4) | 0) + 12 >> 2];
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($9, $1, $2, $3, $4, ($0 | 0) >= 0 ? $5 + 2 | 0 : $6 - $0 | 0, 0);
    break label$1;
   }
   $13 = $4 + 1 | 0;
   if (($15 | 0) >= 0) {
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $13, $5, 0);
    $6 = $0;
    $0 = HEAP32[(HEAP32[$0 + 16 >> 2] + ($13 << 4) | 0) + 12 >> 2];
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($6, $1, $2, $3, ($0 | 0) >= 0 ? $4 + 2 | 0 : $13 - $0 | 0, $5, 0);
    break label$1;
   }
   $11 = $5 + 1 | 0;
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $13, $11, 0);
   $12 = $5 + 2 | 0;
   $9 = $11 << 4;
   $5 = HEAP32[($9 + HEAP32[$1 + 16 >> 2] | 0) + 12 >> 2];
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $13, ($5 | 0) >= 0 ? $12 : $11 - $5 | 0, 0);
   $6 = $4 + 2 | 0;
   $5 = $13 << 4;
   $4 = HEAP32[($5 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, ($4 | 0) >= 0 ? $6 : $13 - $4 | 0, $11, 0);
   $4 = $0;
   $0 = HEAP32[($5 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   $5 = ($0 | 0) >= 0 ? $6 : $13 - $0 | 0;
   $0 = HEAP32[($9 + HEAP32[$1 + 16 >> 2] | 0) + 12 >> 2];
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($4, $1, $2, $3, $5, ($0 | 0) >= 0 ? $12 : $11 - $0 | 0, 0);
  }
  __stack_pointer = $8 + 128 | 0;
 }
 
 function btCollisionShape__getBoundingSphere_28btVector3__2c_20double__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  $3 = $4 + 80 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 88 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 96 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 112 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 104 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 120 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 128 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 136 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 152 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 144 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 160 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 168 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 176 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 184 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$4 + 72 >> 2] = 0;
  HEAP32[$4 + 76 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 68 >> 2] = 1072693248;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4 - -64 | 0, $4 + 32 | 0, $4);
  $7 = HEAPF64[$4 + 16 >> 3];
  $8 = HEAPF64[$4 + 48 >> 3];
  $5 = $7 - $8;
  $12 = $5 * $5;
  $5 = HEAPF64[$4 >> 3];
  $9 = HEAPF64[$4 + 32 >> 3];
  $6 = $5 - $9;
  $13 = $6 * $6;
  $6 = HEAPF64[$4 + 8 >> 3];
  $10 = HEAPF64[$4 + 40 >> 3];
  $11 = $6 - $10;
  HEAPF64[$2 >> 3] = Math_sqrt($12 + ($13 + $11 * $11)) * .5;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
  HEAPF64[$1 + 16 >> 3] = ($7 + $8) * .5;
  HEAPF64[$1 + 8 >> 3] = ($6 + $10) * .5;
  HEAPF64[$1 >> 3] = ($5 + $9) * .5;
  __stack_pointer = $4 + 192 | 0;
 }
 
 function btCollisionShape__getContactBreakingThreshold_28double_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +(+FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) * $1);
 }
 
 function btCollisionShape__getAngularMotionDisc_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1 + 16 | 0, $1 + 8 | 0);
  __stack_pointer = $1 + 48 | 0;
  $2 = HEAPF64[$1 + 32 >> 3];
  $3 = $2 * $2;
  $2 = HEAPF64[$1 + 16 >> 3];
  $4 = $2 * $2;
  $2 = HEAPF64[$1 + 24 >> 3];
  return +(HEAPF64[$1 + 8 >> 3] + Math_sqrt($3 + ($4 + $2 * $2)));
 }
 
 function btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $4, $5);
  $10 = HEAPF64[$3 + 16 >> 3];
  $11 = HEAPF64[$3 >> 3];
  $12 = HEAPF64[$3 + 8 >> 3];
  $13 = HEAPF64[$5 >> 3];
  $14 = HEAPF64[$5 + 8 >> 3];
  $15 = HEAPF64[$5 + 16 >> 3];
  $7 = HEAPF64[$4 >> 3];
  $16 = HEAPF64[$2 >> 3];
  $8 = HEAPF64[$4 + 8 >> 3];
  $17 = HEAPF64[$2 + 8 >> 3];
  $6 = HEAPF64[$4 + 16 >> 3];
  $18 = HEAPF64[$2 + 16 >> 3];
  $19 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  $9 = $6;
  $6 = $18 * 1.0;
  HEAPF64[$4 + 16 >> 3] = $9 + ($6 >= 0.0 ? -0.0 : $6);
  $9 = $8;
  $8 = $17 * 1.0;
  HEAPF64[$4 + 8 >> 3] = $9 + ($8 >= 0.0 ? -0.0 : $8);
  $9 = $7;
  $7 = $16 * 1.0;
  HEAPF64[$4 >> 3] = $9 + ($7 >= 0.0 ? -0.0 : $7);
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  HEAPF64[$5 + 16 >> 3] = $15 + ($6 > -0.0 ? $6 : -0.0);
  HEAPF64[$5 + 8 >> 3] = $14 + ($8 > -0.0 ? $8 : -0.0);
  HEAPF64[$5 >> 3] = $13 + ($7 > -0.0 ? $7 : -0.0);
  $6 = $19 * Math_sqrt($10 * $10 + ($11 * $11 + $12 * $12)) * 1.0;
  HEAPF64[$4 >> 3] = HEAPF64[$4 >> 3] - $6;
  HEAPF64[$4 + 8 >> 3] = HEAPF64[$4 + 8 >> 3] - $6;
  HEAPF64[$4 + 16 >> 3] = HEAPF64[$4 + 16 >> 3] - $6;
  HEAPF64[$5 >> 3] = $6 + HEAPF64[$5 >> 3];
  HEAPF64[$5 + 8 >> 3] = $6 + HEAPF64[$5 + 8 >> 3];
  HEAPF64[$5 + 16 >> 3] = $6 + HEAPF64[$5 + 16 >> 3];
 }
 
 function btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0;
  HEAP32[$1 >> 2] = $4;
  if ($4) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $3)
  }
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = $0;
  return 3770;
 }
 
 function btCollisionShape__serializeSingleShape_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function btConvexShape__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
  $7 = __stack_pointer - 96 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 88 >> 2] = 0;
  HEAP32[$7 + 92 >> 2] = 0;
  $8 = HEAPF64[$2 + 16 >> 3];
  $9 = HEAPF64[$2 >> 3];
  $10 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$7 + 64 >> 3] = HEAPF64[$1 + 64 >> 3] * $8 + (HEAPF64[$1 >> 3] * $9 + HEAPF64[$1 + 32 >> 3] * $10);
  $16 = $1 + 80 | 0;
  $17 = $1 + 48 | 0;
  HEAPF64[$7 + 80 >> 3] = $8 * HEAPF64[$16 >> 3] + ($9 * HEAPF64[$1 + 16 >> 3] + $10 * HEAPF64[$17 >> 3]);
  $18 = $1 + 72 | 0;
  $19 = $1 + 40 | 0;
  HEAPF64[$7 + 72 >> 3] = $8 * HEAPF64[$18 >> 3] + ($9 * HEAPF64[$1 + 8 >> 3] + $10 * HEAPF64[$19 >> 3]);
  $20 = $7 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($20, $0, $7 - -64 | 0);
  $21 = $1 + 112 | 0;
  $14 = HEAPF64[$21 >> 3];
  $15 = HEAPF64[$16 >> 3];
  $23 = HEAPF64[$18 >> 3];
  $22 = $1 + 104 | 0;
  $24 = HEAPF64[$22 >> 3];
  $25 = HEAPF64[$17 >> 3];
  $26 = HEAPF64[$19 >> 3];
  $27 = HEAPF64[$1 + 64 >> 3];
  $28 = HEAPF64[$1 + 96 >> 3];
  $29 = HEAPF64[$1 + 16 >> 3];
  $30 = HEAPF64[$1 >> 3];
  $31 = HEAPF64[$1 + 8 >> 3];
  $32 = HEAPF64[$1 + 32 >> 3];
  $8 = HEAPF64[$7 + 48 >> 3];
  $9 = HEAPF64[$7 + 32 >> 3];
  $10 = HEAPF64[$7 + 40 >> 3];
  HEAP32[$7 + 24 >> 2] = 0;
  HEAP32[$7 + 28 >> 2] = 0;
  HEAPF64[$7 + 16 >> 3] = -HEAPF64[$7 + 80 >> 3];
  HEAPF64[$7 + 8 >> 3] = -HEAPF64[$7 + 72 >> 3];
  HEAPF64[$7 >> 3] = -HEAPF64[$7 + 64 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($20, $0, $7);
  $33 = HEAPF64[$21 >> 3];
  $34 = HEAPF64[$16 >> 3];
  $35 = HEAPF64[$18 >> 3];
  $36 = HEAPF64[$22 >> 3];
  $37 = HEAPF64[$17 >> 3];
  $38 = HEAPF64[$19 >> 3];
  $39 = HEAPF64[$1 + 64 >> 3];
  $40 = HEAPF64[$1 + 96 >> 3];
  $41 = HEAPF64[$1 + 16 >> 3];
  $42 = HEAPF64[$1 >> 3];
  $43 = HEAPF64[$1 + 8 >> 3];
  $44 = HEAPF64[$1 + 32 >> 3];
  $11 = HEAPF64[$7 + 48 >> 3];
  $12 = HEAPF64[$7 + 32 >> 3];
  $13 = HEAPF64[$7 + 40 >> 3];
  $14 = $14 + ($8 * $15 + ($9 * $27 + $10 * $23));
  $15 = $28 + ($8 * $29 + ($9 * $30 + $10 * $31));
  $8 = $24 + ($8 * $25 + ($9 * $32 + $10 * $26));
  HEAPF64[$3 >> 3] = $14 * HEAPF64[$2 + 16 >> 3] + ($15 * HEAPF64[$2 >> 3] + $8 * HEAPF64[$2 + 8 >> 3]);
  $9 = $33 + ($11 * $34 + ($12 * $39 + $13 * $35));
  $10 = $40 + ($11 * $41 + ($12 * $42 + $13 * $43));
  $11 = $36 + ($11 * $37 + ($12 * $44 + $13 * $38));
  HEAPF64[$4 >> 3] = $9 * HEAPF64[$2 + 16 >> 3] + ($10 * HEAPF64[$2 >> 3] + $11 * HEAPF64[$2 + 8 >> 3]);
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  HEAPF64[$6 + 16 >> 3] = $9;
  HEAPF64[$6 + 8 >> 3] = $11;
  HEAPF64[$6 >> 3] = $10;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  HEAPF64[$5 + 16 >> 3] = $14;
  HEAPF64[$5 + 8 >> 3] = $8;
  HEAPF64[$5 >> 3] = $15;
  $12 = HEAPF64[$3 >> 3];
  $13 = HEAPF64[$4 >> 3];
  if ($12 > $13) {
   HEAPF64[$3 >> 3] = $13;
   HEAPF64[$4 >> 3] = $12;
   HEAP32[$6 + 24 >> 2] = 0;
   HEAP32[$6 + 28 >> 2] = 0;
   HEAPF64[$6 + 16 >> 3] = $14;
   HEAPF64[$6 + 8 >> 3] = $8;
   HEAPF64[$6 >> 3] = $15;
   HEAP32[$5 + 24 >> 2] = 0;
   HEAP32[$5 + 28 >> 2] = 0;
   HEAPF64[$5 + 16 >> 3] = $9;
   HEAPF64[$5 + 8 >> 3] = $11;
   HEAPF64[$5 >> 3] = $10;
  }
  __stack_pointer = $7 + 96 | 0;
 }
 
 function btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    switch (HEAP32[$1 + 4 >> 2]) {
    case 8:
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     $1 = $0 + 24 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $0 + 16 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $0 = $0 + 8 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     break label$1;
    case 0:
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     $4 = HEAPF64[$1 + 64 >> 3];
     HEAPF64[$0 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] >= 0.0 ? $4 : -$4;
     $4 = HEAPF64[$1 + 48 >> 3];
     HEAPF64[$0 >> 3] = HEAPF64[$2 >> 3] >= 0.0 ? $4 : -$4;
     $4 = HEAPF64[$1 + 56 >> 3];
     HEAPF64[$0 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] >= 0.0 ? $4 : -$4;
     break label$1;
    case 1:
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     $4 = HEAPF64[$2 + 16 >> 3];
     $8 = HEAPF64[$2 >> 3];
     $5 = $1 + 104 | 0;
     $7 = HEAPF64[$2 + 8 >> 3];
     $9 = $4 * HEAPF64[$1 + 120 >> 3] + ($8 * HEAPF64[$5 >> 3] + $7 * HEAPF64[$1 + 112 >> 3]);
     $11 = $4 * HEAPF64[$1 + 152 >> 3] + ($8 * HEAPF64[$1 + 136 >> 3] + $7 * HEAPF64[$1 + 144 >> 3]);
     $2 = $9 < $11;
     $1 = (($4 * HEAPF64[$1 + 184 >> 3] + ($8 * HEAPF64[$1 + 168 >> 3] + $7 * HEAPF64[$1 + 176 >> 3]) > ($2 ? $11 : $9) ? 2 : $2) << 5) + $5 | 0;
     HEAPF64[$0 + 16 >> 3] = HEAPF64[$1 + 16 >> 3];
     HEAPF64[$0 + 8 >> 3] = HEAPF64[$1 + 8 >> 3];
     HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
     break label$1;
    case 13:
     $6 = $1 + 72 | 0;
     $10 = HEAP32[$6 + 4 >> 2];
     $5 = $3 + 88 | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = $10;
     $6 = $1 - -64 | 0;
     $10 = HEAP32[$6 + 4 >> 2];
     $5 = $3 + 80 | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = $10;
     $6 = $1 + 56 | 0;
     $10 = HEAP32[$6 + 4 >> 2];
     $5 = $3 + 72 | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = $10;
     $5 = HEAP32[$1 + 52 >> 2];
     HEAP32[$3 + 64 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$3 + 68 >> 2] = $5;
     HEAP32[$3 + 56 >> 2] = 0;
     HEAP32[$3 + 60 >> 2] = 0;
     HEAPF64[$3 + 32 >> 3] = HEAPF64[$2 >> 3];
     $8 = HEAPF64[$2 + 8 >> 3];
     HEAPF64[$3 + 40 >> 3] = $8;
     $4 = HEAPF64[$2 + 16 >> 3];
     HEAPF64[$3 + 48 >> 3] = $4;
     $6 = 1;
     $2 = 0;
     $5 = 2;
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         $1 = HEAP32[$1 + 96 >> 2];
         switch ($1 - 1 | 0) {
         case 1:
          break label$12;
         case 0:
          break label$13;
         default:
          break label$10;
         };
        }
        $6 = 0;
        break label$11;
       }
       $5 = 1;
       $4 = $8;
       $6 = 0;
      }
      $2 = $1;
     }
     $10 = $3 - -64 | 0;
     $8 = HEAPF64[$10 + ($1 << 3) >> 3];
     $1 = $6 << 3;
     $7 = HEAPF64[$1 + $10 >> 3];
     $9 = HEAPF64[$1 + ($3 + 32 | 0) >> 3];
     $11 = Math_sqrt($9 * $9 + $4 * $4);
     label$14 : {
      if ($11 != 0.0) {
       $7 = $7 / $11;
       HEAPF64[$1 + $3 >> 3] = $9 * $7;
       $1 = $2 << 3;
       HEAPF64[$1 + $3 >> 3] = HEAPF64[$1 + ($3 + 32 | 0) >> 3] < 0.0 ? -$8 : $8;
       HEAPF64[($5 << 3) + $3 >> 3] = $4 * $7;
       break label$14;
      }
      HEAPF64[$1 + $3 >> 3] = $7;
      $1 = $2 << 3;
      HEAPF64[$1 + $3 >> 3] = HEAPF64[$1 + ($3 + 32 | 0) >> 3] < 0.0 ? -$8 : $8;
      $1 = ($5 << 3) + $3 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
     }
     $4 = HEAPF64[$3 >> 3];
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     HEAPF64[$0 + 16 >> 3] = HEAPF64[$3 + 16 >> 3];
     HEAPF64[$0 + 8 >> 3] = HEAPF64[$3 + 8 >> 3];
     HEAPF64[$0 >> 3] = $4;
     break label$1;
    case 10:
     $6 = HEAP32[$1 + 96 >> 2];
     $10 = $6 << 3;
     $16 = HEAPF64[($10 + $1 | 0) + 48 >> 3];
     $4 = 1.0;
     $7 = HEAPF64[$2 + 16 >> 3];
     $9 = HEAPF64[$2 >> 3];
     $11 = HEAPF64[$2 + 8 >> 3];
     $12 = $7 * $7 + ($9 * $9 + $11 * $11);
     if (!($12 < 4.930380657631324e-32)) {
      $4 = 1.0 / Math_sqrt($12);
      $17 = $7 * $4;
      $18 = $11 * $4;
      $4 = $9 * $4;
     }
     $5 = $3 + 88 | 0;
     $1 = $5;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $3 + 80 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $2 = $3 + 72 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$3 + 64 >> 2] = 0;
     HEAP32[$3 + 68 >> 2] = 0;
     HEAPF64[$10 + ($3 - -64 | 0) >> 3] = $16;
     $7 = -1.e+30;
     $9 = 0.0;
     $11 = 0.0;
     $12 = HEAPF64[$1 >> 3];
     $14 = HEAPF64[$3 + 64 >> 3];
     $13 = HEAPF64[$2 >> 3];
     $19 = $17 * $12 + ($4 * $14 + $18 * $13);
     if ($19 > -1.e+30) {
      $9 = $13;
      $11 = $12;
      $7 = $19;
      $8 = $14;
     }
     HEAP32[$5 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$3 + 64 >> 2] = 0;
     HEAP32[$3 + 68 >> 2] = 0;
     HEAPF64[($3 - -64 | 0) + ($6 << 3) >> 3] = -$16;
     $12 = HEAPF64[$1 >> 3];
     $14 = HEAPF64[$2 >> 3];
     $13 = HEAPF64[$3 + 64 >> 3];
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     $1 = $17 * $12 + ($4 * $13 + $18 * $14) > $7;
     HEAPF64[$0 + 16 >> 3] = $1 ? $12 : $11;
     HEAPF64[$0 + 8 >> 3] = $1 ? $14 : $9;
     HEAPF64[$0 >> 3] = $1 ? $13 : $8;
     break label$1;
    case 5:
     $8 = HEAPF64[$1 + 32 >> 3];
     $7 = HEAPF64[$1 + 24 >> 3];
     $9 = HEAPF64[$1 + 16 >> 3];
     $5 = HEAP32[$1 + 172 >> 2];
     $15 = HEAP32[$1 + 176 >> 2];
     label$18 : {
      if (($15 | 0) <= 0) {
       $6 = -1;
       break label$18;
      }
      $11 = HEAPF64[$2 + 16 >> 3] * $8;
      $12 = HEAPF64[$2 + 8 >> 3] * $7;
      $14 = HEAPF64[$2 >> 3] * $9;
      $2 = 0;
      $6 = -1;
      $4 = -1797693134862315708145274.0e284;
      $1 = $5;
      while (1) {
       $13 = HEAPF64[$1 + 16 >> 3] * $11 + (HEAPF64[$1 >> 3] * $14 + $12 * HEAPF64[$1 + 8 >> 3]);
       $10 = $13 > $4;
       $4 = $10 ? $13 : $4;
       $6 = $10 ? $2 : $6;
       $1 = $1 + 32 | 0;
       $2 = $2 + 1 | 0;
       if (($15 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
     }
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     $1 = $5 + ($6 << 5) | 0;
     HEAPF64[$0 + 16 >> 3] = $8 * HEAPF64[$1 + 16 >> 3];
     HEAPF64[$0 + 8 >> 3] = $7 * HEAPF64[$1 + 8 >> 3];
     HEAPF64[$0 >> 3] = $9 * HEAPF64[$1 >> 3];
     break label$1;
    case 4:
     $8 = HEAPF64[$1 + 32 >> 3];
     $7 = HEAPF64[$1 + 24 >> 3];
     $9 = HEAPF64[$1 + 16 >> 3];
     $5 = HEAP32[$1 + 184 >> 2];
     $15 = HEAP32[$1 + 176 >> 2];
     label$21 : {
      if (($15 | 0) <= 0) {
       $6 = -1;
       break label$21;
      }
      $11 = HEAPF64[$2 + 16 >> 3] * $8;
      $12 = HEAPF64[$2 + 8 >> 3] * $7;
      $14 = HEAPF64[$2 >> 3] * $9;
      $2 = 0;
      $6 = -1;
      $4 = -1797693134862315708145274.0e284;
      $1 = $5;
      while (1) {
       $13 = HEAPF64[$1 + 16 >> 3] * $11 + (HEAPF64[$1 >> 3] * $14 + $12 * HEAPF64[$1 + 8 >> 3]);
       $10 = $13 > $4;
       $4 = $10 ? $13 : $4;
       $6 = $10 ? $2 : $6;
       $1 = $1 + 32 | 0;
       $2 = $2 + 1 | 0;
       if (($15 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
     }
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     $1 = $5 + ($6 << 5) | 0;
     HEAPF64[$0 + 16 >> 3] = $8 * HEAPF64[$1 + 16 >> 3];
     HEAPF64[$0 + 8 >> 3] = $7 * HEAPF64[$1 + 8 >> 3];
     HEAPF64[$0 >> 3] = $9 * HEAPF64[$1 >> 3];
     break label$1;
    default:
     break label$2;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
  }
  __stack_pointer = $3 + 96 | 0;
 }
 
 function btConvexShape__localGetSupportVertexNonVirtual_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  $6 = $2 + 8 | 0;
  $5 = HEAP32[$6 + 4 >> 2];
  $9 = $3 + 32 | 0;
  $11 = $9 + 8 | 0;
  HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$11 + 4 >> 2] = $5;
  $5 = $2 + 16 | 0;
  $10 = HEAP32[$5 + 4 >> 2];
  $6 = $9 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $10;
  $5 = $9 + 24 | 0;
  $10 = $2 + 24 | 0;
  $9 = HEAP32[$10 + 4 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$5 + 4 >> 2] = $9;
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 36 >> 2] = $5;
  $4 = HEAPF64[$6 >> 3];
  $7 = HEAPF64[$3 + 32 >> 3];
  $8 = HEAPF64[$11 >> 3];
  if ($4 * $4 + ($7 * $7 + $8 * $8) < 4.930380657631324e-32) {
   HEAP32[$3 + 56 >> 2] = 0;
   HEAP32[$3 + 60 >> 2] = 0;
   $8 = -1.0;
   $7 = -1.0;
   $4 = -1.0;
  }
  $12 = $4;
  $4 = 1.0 / Math_sqrt($4 * $4 + ($7 * $7 + $8 * $8));
  HEAPF64[$3 + 48 >> 3] = $12 * $4;
  HEAPF64[$3 + 40 >> 3] = $8 * $4;
  HEAPF64[$3 + 32 >> 3] = $7 * $4;
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($3, $1, $3 + 32 | 0);
  label$2 : {
   label$3 : {
    switch (HEAP32[$1 + 4 >> 2]) {
    case 8:
     $4 = HEAPF64[$1 + 48 >> 3] * HEAPF64[$1 + 16 >> 3];
     break label$2;
    case 0:
    case 1:
    case 4:
    case 5:
    case 10:
    case 11:
    case 13:
     $4 = HEAPF64[$1 + 80 >> 3];
     break label$2;
    default:
     break label$3;
    };
   }
   $4 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF64[$0 + 16 >> 3] = $4 * HEAPF64[$3 + 48 >> 3] + HEAPF64[$3 + 16 >> 3];
  HEAPF64[$0 + 8 >> 3] = $4 * HEAPF64[$3 + 40 >> 3] + HEAPF64[$3 + 8 >> 3];
  HEAPF64[$0 >> 3] = $4 * HEAPF64[$3 + 32 >> 3] + HEAPF64[$3 >> 3];
  __stack_pointer = $3 - -64 | 0;
 }
 
 function btConvexShape__getMarginNonVirtual_28_29_20const($0) {
  label$1 : {
   switch (HEAP32[$0 + 4 >> 2]) {
   case 8:
    return HEAPF64[$0 + 48 >> 3] * HEAPF64[$0 + 16 >> 3];
   case 0:
   case 1:
   case 4:
   case 5:
   case 10:
   case 11:
   case 13:
    return HEAPF64[$0 + 80 >> 3];
   default:
    break label$1;
   };
  }
  return +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
 }
 
 function btCollisionShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 12;
 }
 
 function btConvexInternalShape__btConvexInternalShape_28_29($0) {
  var $1 = 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 4 >> 2] = 35;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 5680;
  HEAP32[$0 + 80 >> 2] = 1202590843;
  HEAP32[$0 + 84 >> 2] = 1067743969;
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 1072693248;
  HEAP32[$0 >> 2] = 5808;
  return $0;
 }
 
 function btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0;
  $2 = HEAPF64[$1 >> 3];
  $3 = HEAPF64[$1 + 8 >> 3];
  $4 = HEAPF64[$1 + 16 >> 3];
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF64[$0 + 32 >> 3] = Math_abs($4);
  HEAPF64[$0 + 24 >> 3] = Math_abs($3);
  HEAPF64[$0 + 16 >> 3] = Math_abs($2);
 }
 
 function btConvexInternalShape__getAabbSlow_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  $12 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $11 = $4 + 144 | 0;
  while (1) {
   $8 = $4 + 128 | 0;
   $9 = $8 + 24 | 0;
   HEAP32[$9 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$11 + 4 >> 2] = 0;
   $9 = $8 + 8 | 0;
   HEAP32[$9 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$4 + 128 >> 2] = 0;
   HEAP32[$4 + 132 >> 2] = 0;
   $8 = $8 + $10 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 1072693248;
   HEAP32[$4 + 88 >> 2] = 0;
   HEAP32[$4 + 92 >> 2] = 0;
   $5 = HEAPF64[$11 >> 3];
   $6 = HEAPF64[$4 + 128 >> 3];
   $7 = HEAPF64[$9 >> 3];
   HEAPF64[$4 + 80 >> 3] = HEAPF64[$1 + 80 >> 3] * $5 + (HEAPF64[$1 + 16 >> 3] * $6 + $7 * HEAPF64[$1 + 48 >> 3]);
   HEAPF64[$4 + 72 >> 3] = $5 * HEAPF64[$1 + 72 >> 3] + ($6 * HEAPF64[$1 + 8 >> 3] + $7 * HEAPF64[$1 + 40 >> 3]);
   HEAPF64[$4 + 64 >> 3] = $5 * HEAPF64[$1 + 64 >> 3] + ($6 * HEAPF64[$1 >> 3] + $7 * HEAPF64[$1 + 32 >> 3]);
   $13 = $4 - -64 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 96 | 0, $0, $13);
   HEAP32[$4 + 88 >> 2] = 0;
   HEAP32[$4 + 92 >> 2] = 0;
   $5 = HEAPF64[$4 + 112 >> 3];
   $6 = HEAPF64[$4 + 96 >> 3];
   $7 = HEAPF64[$4 + 104 >> 3];
   HEAPF64[$4 + 80 >> 3] = $5 * HEAPF64[$1 + 80 >> 3] + ($6 * HEAPF64[$1 + 64 >> 3] + $7 * HEAPF64[$1 + 72 >> 3]) + HEAPF64[$1 + 112 >> 3];
   HEAPF64[$4 + 72 >> 3] = $5 * HEAPF64[$1 + 48 >> 3] + ($6 * HEAPF64[$1 + 32 >> 3] + $7 * HEAPF64[$1 + 40 >> 3]) + HEAPF64[$1 + 104 >> 3];
   HEAPF64[$4 + 64 >> 3] = $5 * HEAPF64[$1 + 16 >> 3] + ($6 * HEAPF64[$1 >> 3] + $7 * HEAPF64[$1 + 8 >> 3]) + HEAPF64[$1 + 96 >> 3];
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = -1074790400;
   $8 = $10 + $13 | 0;
   HEAPF64[$3 + $10 >> 3] = $12 + HEAPF64[$8 >> 3];
   HEAP32[$4 + 24 >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 0;
   $5 = HEAPF64[$11 >> 3];
   $6 = HEAPF64[$4 + 128 >> 3];
   $7 = HEAPF64[$9 >> 3];
   HEAPF64[$4 + 16 >> 3] = HEAPF64[$1 + 80 >> 3] * $5 + (HEAPF64[$1 + 16 >> 3] * $6 + $7 * HEAPF64[$1 + 48 >> 3]);
   HEAPF64[$4 + 8 >> 3] = $5 * HEAPF64[$1 + 72 >> 3] + ($6 * HEAPF64[$1 + 8 >> 3] + $7 * HEAPF64[$1 + 40 >> 3]);
   HEAPF64[$4 >> 3] = $5 * HEAPF64[$1 + 64 >> 3] + ($6 * HEAPF64[$1 >> 3] + $7 * HEAPF64[$1 + 32 >> 3]);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 32 | 0, $0, $4);
   HEAP32[$4 + 88 >> 2] = 0;
   HEAP32[$4 + 92 >> 2] = 0;
   $5 = HEAPF64[$4 + 48 >> 3];
   $6 = HEAPF64[$4 + 32 >> 3];
   $7 = HEAPF64[$4 + 40 >> 3];
   HEAPF64[$4 + 80 >> 3] = $5 * HEAPF64[$1 + 80 >> 3] + ($6 * HEAPF64[$1 + 64 >> 3] + $7 * HEAPF64[$1 + 72 >> 3]) + HEAPF64[$1 + 112 >> 3];
   HEAPF64[$4 + 72 >> 3] = $5 * HEAPF64[$1 + 48 >> 3] + ($6 * HEAPF64[$1 + 32 >> 3] + $7 * HEAPF64[$1 + 40 >> 3]) + HEAPF64[$1 + 104 >> 3];
   HEAPF64[$4 + 64 >> 3] = $5 * HEAPF64[$1 + 16 >> 3] + ($6 * HEAPF64[$1 >> 3] + $7 * HEAPF64[$1 + 8 >> 3]) + HEAPF64[$1 + 96 >> 3];
   HEAPF64[$2 + $10 >> 3] = HEAPF64[$8 >> 3] - $12;
   $10 = $10 + 8 | 0;
   if (($10 | 0) != 24) {
    continue
   }
   break;
  };
  __stack_pointer = $4 + 160 | 0;
 }
 
 function btConvexInternalShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
  if (+FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1) != 0.0) {
   $4 = HEAPF64[$2 + 8 >> 3];
   $3 = HEAPF64[$2 >> 3];
   $5 = HEAPF64[$2 + 16 >> 3];
   $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
   $1 = $5 * $5 + ($3 * $3 + $4 * $4) < 4.930380657631324e-32;
   $3 = $1 ? -1.0 : $3;
   $7 = $3;
   $5 = $1 ? -1.0 : $5;
   $4 = $1 ? -1.0 : $4;
   $3 = 1.0 / Math_sqrt($5 * $5 + ($3 * $3 + $4 * $4));
   HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + $6 * ($7 * $3);
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + $6 * ($4 * $3);
   HEAPF64[$0 + 16 >> 3] = HEAPF64[$0 + 16 >> 3] + $6 * ($5 * $3);
  }
 }
 
 function btConvexPolyhedron___btConvexPolyhedron_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 >> 2] = 5944;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $3 = HEAP32[$0 + 28 >> 2];
  if (($3 | 0) > 0) {
   $1 = 8;
   while (1) {
    $2 = HEAP32[$0 + 36 >> 2] + $1 | 0;
    $4 = $2 + 8 | 0;
    $5 = $2 + 4 | 0;
    $6 = HEAP32[$5 >> 2];
    if (!(!$6 | !HEAPU8[$4 | 0])) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$5 >> 2] = 0;
    HEAP8[$4 | 0] = 1;
    $2 = $2 - 4 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $1 = $1 + 56 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btConvexPolyhedron___btConvexPolyhedron_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btConvexPolyhedron___btConvexPolyhedron_28_29($0));
 }
 
 function btConvexPolyhedron__testContainment_28_29_20const($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0;
  $8 = 1;
  $2 = HEAP32[$0 + 28 >> 2];
  label$1 : {
   if (($2 | 0) <= 0) {
    break label$1
   }
   $6 = HEAPF64[$0 + 104 >> 3];
   $7 = HEAPF64[$0 + 72 >> 3];
   $9 = $6 + $7;
   $3 = HEAPF64[$0 + 112 >> 3];
   $4 = HEAPF64[$0 + 80 >> 3];
   $10 = $3 + $4;
   $11 = $4 - $3;
   $6 = $7 - $6;
   $3 = HEAPF64[$0 + 96 >> 3];
   $4 = HEAPF64[$0 + 64 >> 3];
   $7 = $3 + $4;
   $3 = $4 - $3;
   $5 = HEAP32[$0 + 36 >> 2];
   $0 = $5 + 48 | 0;
   $1 = $2;
   while (1) {
    $8 = 0;
    if (HEAPF64[$0 >> 3] + ($10 * HEAPF64[$0 - 8 >> 3] + ($7 * HEAPF64[$0 - 24 >> 3] + $9 * HEAPF64[$0 - 16 >> 3])) > 0.0) {
     break label$1
    }
    $0 = $0 + 56 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $0 = $5 + 48 | 0;
   $1 = $2;
   while (1) {
    if (HEAPF64[$0 >> 3] + ($11 * HEAPF64[$0 - 8 >> 3] + ($7 * HEAPF64[$0 - 24 >> 3] + $9 * HEAPF64[$0 - 16 >> 3])) > 0.0) {
     break label$1
    }
    $0 = $0 + 56 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $0 = $5 + 48 | 0;
   $1 = $2;
   while (1) {
    if (HEAPF64[$0 >> 3] + ($10 * HEAPF64[$0 - 8 >> 3] + ($7 * HEAPF64[$0 - 24 >> 3] + $6 * HEAPF64[$0 - 16 >> 3])) > 0.0) {
     break label$1
    }
    $0 = $0 + 56 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $0 = $5 + 48 | 0;
   $1 = $2;
   while (1) {
    if (HEAPF64[$0 >> 3] + ($11 * HEAPF64[$0 - 8 >> 3] + ($7 * HEAPF64[$0 - 24 >> 3] + $6 * HEAPF64[$0 - 16 >> 3])) > 0.0) {
     break label$1
    }
    $0 = $0 + 56 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $0 = $5 + 48 | 0;
   $1 = $2;
   while (1) {
    if (HEAPF64[$0 >> 3] + ($10 * HEAPF64[$0 - 8 >> 3] + ($3 * HEAPF64[$0 - 24 >> 3] + $9 * HEAPF64[$0 - 16 >> 3])) > 0.0) {
     break label$1
    }
    $0 = $0 + 56 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $0 = $5 + 48 | 0;
   $1 = $2;
   while (1) {
    if (HEAPF64[$0 >> 3] + ($11 * HEAPF64[$0 - 8 >> 3] + ($3 * HEAPF64[$0 - 24 >> 3] + $9 * HEAPF64[$0 - 16 >> 3])) > 0.0) {
     break label$1
    }
    $0 = $0 + 56 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $0 = $5 + 48 | 0;
   $1 = $2;
   while (1) {
    if (HEAPF64[$0 >> 3] + ($10 * HEAPF64[$0 - 8 >> 3] + ($3 * HEAPF64[$0 - 24 >> 3] + $6 * HEAPF64[$0 - 16 >> 3])) > 0.0) {
     break label$1
    }
    $0 = $0 + 56 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $0 = $5 + 48 | 0;
   $8 = $2 - 1 | 0;
   while (1) {
    $4 = HEAPF64[$0 >> 3] + ($11 * HEAPF64[$0 - 8 >> 3] + ($3 * HEAPF64[$0 - 24 >> 3] + $6 * HEAPF64[$0 - 16 >> 3]));
    if (!($4 > 0.0)) {
     $0 = $0 + 56 | 0;
     $2 = $8;
     $8 = $2 - 1 | 0;
     if ($2) {
      continue
     }
    }
    break;
   };
   $8 = !($4 > 0.0);
  }
  return $8;
 }
 
 function btConvexPolyhedron__initialize_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0;
  $8 = __stack_pointer - 96 | 0;
  __stack_pointer = $8;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP8[$8 + 52 | 0] = 1;
  $1 = $8 + 16 | 0;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP8[$1 + 56 | 0] = 1;
  $2 = $1 + 24 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$8 + 68 >> 2] = 0;
  HEAP8[$8 + 92 | 0] = 1;
  $2 = $8 + 60 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  $2 = $1 - -64 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 72 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 80 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 88 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  HEAP8[$8 + 32 | 0] = 1;
  HEAP32[$8 + 20 >> 2] = 0;
  HEAP32[$8 + 24 >> 2] = 0;
  $2 = HEAP32[$0 + 28 >> 2];
  label$1 : {
   if (($2 | 0) <= 0) {
    break label$1
   }
   while (1) {
    $5 = HEAP32[$0 + 36 >> 2];
    $28 = Math_imul($23, 56);
    $29 = HEAP32[($5 + $28 | 0) + 4 >> 2];
    if (($29 | 0) > 0) {
     $31 = 0;
     while (1) {
      $2 = HEAP32[($5 + $28 | 0) + 12 >> 2];
      $3 = HEAP32[$2 + ($31 << 2) >> 2];
      HEAP16[$8 + 8 >> 1] = $3;
      $31 = $31 + 1 | 0;
      $30 = ($29 | 0) == ($31 | 0);
      $1 = HEAP32[$2 + (($30 ? 0 : $31) << 2) >> 2];
      HEAP16[$8 + 10 >> 1] = $1;
      $4 = $1 << 16 >> 16;
      $2 = $3 << 16 >> 16;
      if (($4 | 0) > ($2 | 0)) {
       HEAP16[$8 + 10 >> 1] = $3;
       HEAP16[$8 + 8 >> 1] = $1;
       $4 = $3;
       $2 = $1;
      }
      $17 = 0;
      $21 = $4 << 16;
      $9 = $2 << 16 >> 16;
      $1 = $21 + $9 & HEAP32[$8 + 64 >> 2] - 1;
      label$6 : {
       if ($1 >>> 0 >= HEAPU32[$8 + 20 >> 2]) {
        break label$6
       }
       $5 = HEAP32[HEAP32[$8 + 28 >> 2] + ($1 << 2) >> 2];
       if (($5 | 0) == -1) {
        break label$6
       }
       $6 = HEAP32[$8 + 48 >> 2];
       $3 = HEAP32[$8 + 88 >> 2];
       while (1) {
        $10 = $5 << 2;
        $1 = $10 + $3 | 0;
        if (!(HEAPU16[$1 >> 1] == ($2 & 65535) & HEAPU16[$1 + 2 >> 1] == ($4 & 65535))) {
         $5 = HEAP32[$6 + $10 >> 2];
         if (($5 | 0) != -1) {
          continue
         }
         break label$6;
        }
        break;
       };
       $17 = $10 + HEAP32[$8 + 68 >> 2] | 0;
      }
      $2 = HEAP32[$0 + 16 >> 2];
      $1 = $2 + ($21 >> 16 << 5) | 0;
      $2 = $2 + ($9 << 5) | 0;
      $7 = HEAPF64[$1 + 16 >> 3] - HEAPF64[$2 + 16 >> 3];
      $32 = $7;
      $16 = HEAPF64[$1 >> 3] - HEAPF64[$2 >> 3];
      $13 = HEAPF64[$1 + 8 >> 3] - HEAPF64[$2 + 8 >> 3];
      $7 = 1.0 / Math_sqrt($7 * $7 + ($16 * $16 + $13 * $13));
      $20 = $32 * $7;
      $18 = $13 * $7;
      $22 = $16 * $7;
      $2 = HEAP32[$0 + 48 >> 2];
      label$10 : {
       if (($2 | 0) > 0) {
        $5 = HEAP32[$0 + 56 >> 2];
        $1 = $2;
        while (1) {
         $16 = HEAPF64[$5 >> 3];
         $13 = HEAPF64[$5 + 8 >> 3];
         $7 = HEAPF64[$5 + 16 >> 3];
         if (!(Math_abs($16 - $22) > 1.0e-06 | Math_abs($13 - $18) > 1.0e-06 | Math_abs($7 - $20) > 1.0e-06) | !(Math_abs($22 + $16) > 1.0e-06 | Math_abs($18 + $13) > 1.0e-06 | Math_abs($20 + $7) > 1.0e-06)) {
          break label$10
         }
         $5 = $5 + 32 | 0;
         $1 = $1 - 1 | 0;
         if ($1) {
          continue
         }
         break;
        };
       }
       label$15 : {
        if (HEAP32[$0 + 52 >> 2] != ($2 | 0)) {
         break label$15
        }
        $11 = $2 ? $2 << 1 : 1;
        if (($11 | 0) <= ($2 | 0)) {
         break label$15
        }
        label$16 : {
         if (!$11) {
          $5 = 0;
          break label$16;
         }
         $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 5);
         $2 = HEAP32[$0 + 48 >> 2];
        }
        label$18 : {
         if (($2 | 0) <= 0) {
          break label$18
         }
         $4 = 0;
         if (($2 | 0) != 1) {
          $21 = $2 & -2;
          $1 = 0;
          while (1) {
           $10 = HEAP32[$0 + 56 >> 2] + $1 | 0;
           $3 = HEAP32[$10 + 4 >> 2];
           $19 = $1 + $5 | 0;
           HEAP32[$19 >> 2] = HEAP32[$10 >> 2];
           HEAP32[$19 + 4 >> 2] = $3;
           $9 = $10 + 24 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $3 = $19 + 24 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $6;
           $9 = $10 + 16 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $3 = $19 + 16 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $6;
           $9 = $10 + 8 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $3 = $19 + 8 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $6;
           $10 = HEAP32[$0 + 56 >> 2] + $1 | 0;
           $9 = $10 + 40 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $3 = $19 + 40 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $6;
           $9 = $10 + 48 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $3 = $19 + 48 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $6;
           $9 = $10 + 56 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $3 = $19 + 56 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $6;
           $9 = $10 + 32 | 0;
           $6 = HEAP32[$9 + 4 >> 2];
           $3 = $19 + 32 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $6;
           $1 = $1 - -64 | 0;
           $4 = $4 + 2 | 0;
           if (($21 | 0) != ($4 | 0)) {
            continue
           }
           break;
          };
         }
         if (!($2 & 1)) {
          break label$18
         }
         $2 = $4 << 5;
         $6 = $2 + $5 | 0;
         $4 = $2 + HEAP32[$0 + 56 >> 2] | 0;
         $2 = HEAP32[$4 + 4 >> 2];
         HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$6 + 4 >> 2] = $2;
         $3 = $4 + 24 | 0;
         $1 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 24 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $1;
         $3 = $4 + 16 | 0;
         $1 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 16 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $1;
         $3 = $4 + 8 | 0;
         $1 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 8 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $1;
        }
        $2 = HEAP32[$0 + 56 >> 2];
        if (!(!$2 | !HEAPU8[$0 + 60 | 0])) {
         btAlignedFreeInternal_28void__29($2)
        }
        HEAP32[$0 + 56 >> 2] = $5;
        HEAP8[$0 + 60 | 0] = 1;
        HEAP32[$0 + 52 >> 2] = $11;
        $2 = HEAP32[$0 + 48 >> 2];
       }
       $2 = HEAP32[$0 + 56 >> 2] + ($2 << 5) | 0;
       HEAP32[$2 + 24 >> 2] = 0;
       HEAP32[$2 + 28 >> 2] = 0;
       HEAPF64[$2 + 16 >> 3] = $20;
       HEAPF64[$2 + 8 >> 3] = $18;
       HEAPF64[$2 >> 3] = $22;
       HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
      }
      label$22 : {
       if ($17) {
        HEAP16[$17 + 2 >> 1] = $23;
        break label$22;
       }
       HEAP16[$8 >> 1] = $23;
       HEAP16[$8 + 2 >> 1] = 65535;
       $5 = 0;
       $12 = 0;
       __inlined_func$btHashMap_btInternalVertexPair_2c_20btInternalEdge___insert_28btInternalVertexPair_20const__2c_20btInternalEdge_20const__29 : {
        label$11 : {
         $19 = $8 + 8 | 0;
         $4 = HEAP16[$19 >> 1];
         $11 = HEAPU16[$19 + 2 >> 1];
         $3 = $8 + 16 | 0;
         $2 = HEAP32[$3 + 48 >> 2];
         $17 = $4 + ($11 << 16) & $2 - 1;
         label$23 : {
          if ($17 >>> 0 >= HEAPU32[$3 + 4 >> 2]) {
           break label$23
          }
          $1 = HEAP32[HEAP32[$3 + 12 >> 2] + ($17 << 2) >> 2];
          if (($1 | 0) == -1) {
           break label$23
          }
          $10 = HEAP32[$3 + 32 >> 2];
          $21 = HEAP32[$3 + 72 >> 2];
          $9 = $4 & 65535;
          while (1) {
           $6 = $1 << 2;
           $4 = $6 + $21 | 0;
           if (HEAPU16[$4 >> 1] == ($9 | 0) & HEAPU16[$4 + 2 >> 1] == ($11 | 0)) {
            break label$11
           }
           $1 = HEAP32[$6 + $10 >> 2];
           if (($1 | 0) != -1) {
            continue
           }
           break;
          };
         }
         $21 = HEAP32[$3 + 44 >> 2];
         $1 = $21;
         label$5 : {
          if (($1 | 0) != ($2 | 0)) {
           break label$5
          }
          $1 = $2;
          $11 = $1 ? $1 << 1 : 1;
          if (($1 | 0) >= ($11 | 0)) {
           break label$5
          }
          if ($11) {
           $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 2);
           $1 = HEAP32[$3 + 44 >> 2];
          } else {
           $1 = $2
          }
          label$84 : {
           if (($1 | 0) <= 0) {
            break label$84
           }
           $14 = $1 & 3;
           if ($1 - 1 >>> 0 >= 3) {
            $9 = $1 & -4;
            $1 = 0;
            while (1) {
             $10 = $1 + $5 | 0;
             $4 = HEAP32[$3 + 52 >> 2] + $1 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$10 >> 1] = $4;
             HEAP16[$10 + 2 >> 1] = $4 >>> 16;
             $6 = $10 + 4 | 0;
             $4 = (HEAP32[$3 + 52 >> 2] + $1 | 0) + 4 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$6 >> 1] = $4;
             HEAP16[$6 + 2 >> 1] = $4 >>> 16;
             $6 = $10 + 8 | 0;
             $4 = (HEAP32[$3 + 52 >> 2] + $1 | 0) + 8 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$6 >> 1] = $4;
             HEAP16[$6 + 2 >> 1] = $4 >>> 16;
             $6 = $10 + 12 | 0;
             $4 = (HEAP32[$3 + 52 >> 2] + $1 | 0) + 12 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$6 >> 1] = $4;
             HEAP16[$6 + 2 >> 1] = $4 >>> 16;
             $1 = $1 + 16 | 0;
             $12 = $12 + 4 | 0;
             if (($9 | 0) != ($12 | 0)) {
              continue
             }
             break;
            };
           }
           if (!$14) {
            break label$84
           }
           $1 = $12 << 2;
           while (1) {
            $6 = $1 + $5 | 0;
            $4 = HEAP32[$3 + 52 >> 2] + $1 | 0;
            $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
            HEAP16[$6 >> 1] = $4;
            HEAP16[$6 + 2 >> 1] = $4 >>> 16;
            $1 = $1 + 4 | 0;
            $14 = $14 - 1 | 0;
            if ($14) {
             continue
            }
            break;
           };
          }
          $1 = HEAP32[$3 + 52 >> 2];
          if (!(!$1 | !HEAPU8[$3 + 56 | 0])) {
           btAlignedFreeInternal_28void__29($1)
          }
          HEAP32[$3 + 52 >> 2] = $5;
          HEAP8[$3 + 56 | 0] = 1;
          HEAP32[$3 + 48 >> 2] = $11;
          $1 = HEAP32[$3 + 44 >> 2];
         }
         $4 = HEAP32[$3 + 52 >> 2] + ($1 << 2) | 0;
         $1 = HEAPU16[$8 >> 1] | HEAPU16[$8 + 2 >> 1] << 16;
         HEAP16[$4 >> 1] = $1;
         HEAP16[$4 + 2 >> 1] = $1 >>> 16;
         HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
         $1 = HEAP32[$3 - -64 >> 2];
         label$13 : {
          if (($1 | 0) != HEAP32[$3 + 68 >> 2]) {
           break label$13
          }
          $10 = $1 ? $1 << 1 : 1;
          if (($10 | 0) <= ($1 | 0)) {
           break label$13
          }
          label$14 : {
           if (!$10) {
            $5 = 0;
            break label$14;
           }
           $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
           $1 = HEAP32[$3 + 64 >> 2];
          }
          label$168 : {
           if (($1 | 0) <= 0) {
            break label$168
           }
           $14 = $1 & 3;
           $12 = 0;
           if ($1 - 1 >>> 0 >= 3) {
            $9 = $1 & -4;
            $1 = 0;
            while (1) {
             $11 = $1 + $5 | 0;
             $4 = HEAP32[$3 + 72 >> 2] + $1 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$11 >> 1] = $4;
             HEAP16[$11 + 2 >> 1] = $4 >>> 16;
             $6 = $11 + 4 | 0;
             $4 = (HEAP32[$3 + 72 >> 2] + $1 | 0) + 4 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$6 >> 1] = $4;
             HEAP16[$6 + 2 >> 1] = $4 >>> 16;
             $6 = $11 + 8 | 0;
             $4 = (HEAP32[$3 + 72 >> 2] + $1 | 0) + 8 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$6 >> 1] = $4;
             HEAP16[$6 + 2 >> 1] = $4 >>> 16;
             $6 = $11 + 12 | 0;
             $4 = (HEAP32[$3 + 72 >> 2] + $1 | 0) + 12 | 0;
             $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
             HEAP16[$6 >> 1] = $4;
             HEAP16[$6 + 2 >> 1] = $4 >>> 16;
             $1 = $1 + 16 | 0;
             $12 = $12 + 4 | 0;
             if (($9 | 0) != ($12 | 0)) {
              continue
             }
             break;
            };
           }
           if (!$14) {
            break label$168
           }
           $1 = $12 << 2;
           while (1) {
            $6 = $1 + $5 | 0;
            $4 = HEAP32[$3 + 72 >> 2] + $1 | 0;
            $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
            HEAP16[$6 >> 1] = $4;
            HEAP16[$6 + 2 >> 1] = $4 >>> 16;
            $1 = $1 + 4 | 0;
            $14 = $14 - 1 | 0;
            if ($14) {
             continue
            }
            break;
           };
          }
          $1 = HEAP32[$3 + 72 >> 2];
          if (!(!$1 | !HEAPU8[$3 + 76 | 0])) {
           btAlignedFreeInternal_28void__29($1)
          }
          HEAP32[$3 + 72 >> 2] = $5;
          HEAP8[$3 + 76 | 0] = 1;
          HEAP32[$3 + 68 >> 2] = $10;
          $1 = HEAP32[$3 + 64 >> 2];
         }
         $4 = HEAP32[$3 + 72 >> 2] + ($1 << 2) | 0;
         $1 = HEAPU16[$19 >> 1] | HEAPU16[$19 + 2 >> 1] << 16;
         HEAP16[$4 >> 1] = $1;
         HEAP16[$4 + 2 >> 1] = $1 >>> 16;
         HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] + 1;
         if (($2 | 0) < HEAP32[$3 + 48 >> 2]) {
          $5 = 0;
          $14 = 0;
          $1 = HEAP32[$3 + 4 >> 2];
          $12 = HEAP32[$3 + 48 >> 2];
          label$17 : {
           if (($1 | 0) >= ($12 | 0)) {
            break label$17
           }
           label$28 : {
            if (HEAP32[$3 + 8 >> 2] >= ($12 | 0)) {
             $14 = HEAP32[$3 + 12 >> 2];
             break label$28;
            }
            if ($12) {
             $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 2);
             $2 = HEAP32[$3 + 4 >> 2];
            } else {
             $2 = $1
            }
            $9 = HEAP32[$3 + 12 >> 2];
            label$69 : {
             label$7 : {
              if (($2 | 0) > 0) {
               $17 = $2 & 3;
               if ($2 - 1 >>> 0 >= 3) {
                $2 = $2 & -4;
                $15 = 0;
                while (1) {
                 $6 = $14 + $15 | 0;
                 $4 = $9 + $15 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
                 HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
                 HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
                 HEAP32[$6 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
                 $15 = $15 + 16 | 0;
                 $5 = $5 + 4 | 0;
                 if (($2 | 0) != ($5 | 0)) {
                  continue
                 }
                 break;
                };
               }
               if (!$17) {
                break label$7
               }
               $2 = $5 << 2;
               $15 = $2 + $14 | 0;
               $5 = $2 + $9 | 0;
               while (1) {
                HEAP32[$15 >> 2] = HEAP32[$5 >> 2];
                $15 = $15 + 4 | 0;
                $5 = $5 + 4 | 0;
                $17 = $17 - 1 | 0;
                if ($17) {
                 continue
                }
                break;
               };
               break label$7;
              }
              if ($9) {
               break label$7
              }
              break label$69;
             }
             if (HEAPU8[$3 + 16 | 0]) {
              btAlignedFreeInternal_28void__29($9)
             }
            }
            HEAP32[$3 + 12 >> 2] = $14;
            HEAP8[$3 + 16 | 0] = 1;
            HEAP32[$3 + 8 >> 2] = $12;
           }
           memset(($1 << 2) + $14 | 0, 0, $12 - $1 << 2);
           HEAP32[$3 + 4 >> 2] = $12;
           $10 = $12 << 2;
           $9 = HEAP32[$3 + 24 >> 2];
           if (($9 | 0) < ($12 | 0)) {
            label$1412 : {
             if (HEAP32[$3 + 28 >> 2] >= ($12 | 0)) {
              $14 = HEAP32[$3 + 32 >> 2];
              break label$1412;
             }
             label$1613 : {
              if (!$12) {
               $14 = 0;
               $2 = $9;
               break label$1613;
              }
              $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10);
              $2 = HEAP32[$3 + 24 >> 2];
             }
             $11 = HEAP32[$3 + 32 >> 2];
             label$1814 : {
              if (($2 | 0) > 0) {
               $17 = $2 & 3;
               $5 = 0;
               if ($2 - 1 >>> 0 >= 3) {
                $2 = $2 & -4;
                $15 = 0;
                while (1) {
                 $6 = $14 + $15 | 0;
                 $4 = $11 + $15 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
                 HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
                 HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
                 HEAP32[$6 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
                 $15 = $15 + 16 | 0;
                 $5 = $5 + 4 | 0;
                 if (($2 | 0) != ($5 | 0)) {
                  continue
                 }
                 break;
                };
               }
               if (!$17) {
                break label$1814
               }
               $2 = $5 << 2;
               $15 = $2 + $14 | 0;
               $5 = $2 + $11 | 0;
               while (1) {
                HEAP32[$15 >> 2] = HEAP32[$5 >> 2];
                $15 = $15 + 4 | 0;
                $5 = $5 + 4 | 0;
                $17 = $17 - 1 | 0;
                if ($17) {
                 continue
                }
                break;
               };
               break label$1814;
              }
              if ($11) {
               break label$1814
              }
              HEAP32[$3 + 32 >> 2] = $14;
              HEAP32[$3 + 28 >> 2] = $12;
              HEAP8[$3 + 36 | 0] = 1;
              break label$1412;
             }
             if (HEAPU8[$3 + 36 | 0]) {
              btAlignedFreeInternal_28void__29($11)
             }
             HEAP32[$3 + 32 >> 2] = $14;
             HEAP8[$3 + 36 | 0] = 1;
             HEAP32[$3 + 28 >> 2] = $12;
            }
            memset(($9 << 2) + $14 | 0, 0, $12 - $9 << 2);
           }
           HEAP32[$3 + 24 >> 2] = $12;
           if (($12 | 0) > 0) {
            memset(HEAP32[$3 + 12 >> 2], 255, $10);
            memset(HEAP32[$3 + 32 >> 2], 255, $10);
           }
           if (($1 | 0) <= 0) {
            break label$17
           }
           $5 = HEAP32[$3 + 32 >> 2];
           $15 = HEAP32[$3 + 72 >> 2];
           $4 = HEAP32[$3 + 12 >> 2];
           $6 = 0;
           while (1) {
            $2 = $4 + ((HEAP16[$15 >> 1] + (HEAPU16[$15 + 2 >> 1] << 16) & HEAP32[$3 + 48 >> 2] - 1) << 2) | 0;
            HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
            HEAP32[$2 >> 2] = $6;
            $15 = $15 + 4 | 0;
            $5 = $5 + 4 | 0;
            $6 = $6 + 1 | 0;
            if (($6 | 0) != ($1 | 0)) {
             continue
            }
            break;
           };
          }
          $17 = HEAP16[$19 >> 1] + (HEAPU16[$19 + 2 >> 1] << 16) & HEAP32[$3 + 48 >> 2] - 1;
         }
         $2 = HEAP32[$3 + 12 >> 2] + ($17 << 2) | 0;
         HEAP32[HEAP32[$3 + 32 >> 2] + ($21 << 2) >> 2] = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $21;
         break __inlined_func$btHashMap_btInternalVertexPair_2c_20btInternalEdge___insert_28btInternalVertexPair_20const__2c_20btInternalEdge_20const__29;
        }
        $1 = HEAP32[$3 + 52 >> 2] + ($1 << 2) | 0;
        $2 = HEAPU16[$8 >> 1] | HEAPU16[$8 + 2 >> 1] << 16;
        HEAP16[$1 >> 1] = $2;
        HEAP16[$1 + 2 >> 1] = $2 >>> 16;
       }
      }
      if (!$30) {
       $5 = HEAP32[$0 + 36 >> 2];
       continue;
      }
      break;
     };
     $2 = HEAP32[$0 + 28 >> 2];
    }
    $23 = $23 + 1 | 0;
    if (($23 | 0) < ($2 | 0)) {
     continue
    }
    break;
   };
   $4 = 0;
   if (($2 | 0) <= 0) {
    break label$1
   }
   $4 = ($2 | 0) > 0;
   $30 = HEAP32[$0 + 16 >> 2];
   $9 = HEAP32[$0 + 36 >> 2];
   $23 = 0;
   while (1) {
    $1 = $9 + Math_imul($23, 56) | 0;
    $28 = HEAP32[$1 + 4 >> 2];
    if (($28 | 0) >= 3) {
     $29 = HEAP32[$1 + 12 >> 2];
     $5 = $29 + 4 | 0;
     $11 = $30 + (HEAP32[$29 >> 2] << 5) | 0;
     $6 = $11 + 16 | 0;
     $3 = $11 + 8 | 0;
     $24 = HEAPF64[$0 + 80 >> 3];
     $25 = HEAPF64[$0 + 72 >> 3];
     $26 = HEAPF64[$0 + 64 >> 3];
     $1 = 2;
     while (1) {
      $10 = $30 + (HEAP32[$5 >> 2] << 5) | 0;
      $36 = HEAPF64[$10 + 16 >> 3];
      $21 = $30 + (HEAP32[$29 + (($1 | 0) % ($28 | 0) << 2) >> 2] << 5) | 0;
      $37 = HEAPF64[$21 + 16 >> 3];
      $33 = HEAPF64[$11 >> 3];
      $38 = HEAPF64[$10 >> 3];
      $39 = $33 - $38;
      $34 = HEAPF64[$3 >> 3];
      $40 = HEAPF64[$21 + 8 >> 3];
      $20 = $34 - $40;
      $18 = HEAPF64[$21 >> 3];
      $22 = $33 - $18;
      $16 = HEAPF64[$10 + 8 >> 3];
      $7 = $34 - $16;
      $41 = $39 * $20 - $22 * $7;
      $35 = HEAPF64[$6 >> 3];
      $13 = $35 - $37;
      $32 = $7 * $13;
      $7 = $35 - $36;
      $20 = $32 - $20 * $7;
      $7 = $7 * $22 - $13 * $39;
      $7 = Math_sqrt($41 * $41 + ($20 * $20 + $7 * $7)) * .5;
      $24 = $24 + ($35 + $36 + $37) * .3333333333333333 * $7;
      HEAPF64[$0 + 80 >> 3] = $24;
      $25 = $25 + ($40 + ($34 + $16)) * .3333333333333333 * $7;
      HEAPF64[$0 + 72 >> 3] = $25;
      $26 = $26 + ($18 + ($33 + $38)) * .3333333333333333 * $7;
      HEAPF64[$0 + 64 >> 3] = $26;
      $27 = $27 + $7;
      $5 = $5 + 4 | 0;
      $1 = $1 + 1 | 0;
      if (($28 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
    }
    $23 = $23 + 1 | 0;
    if (($23 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 128 >> 2] = -536870912;
  HEAP32[$0 + 132 >> 2] = 1206910975;
  $7 = 1.0 / $27;
  $18 = $7 * HEAPF64[$0 + 64 >> 3];
  HEAPF64[$0 + 64 >> 3] = $18;
  $22 = $7 * HEAPF64[$0 + 72 >> 3];
  HEAPF64[$0 + 72 >> 3] = $22;
  $16 = $7 * HEAPF64[$0 + 80 >> 3];
  HEAPF64[$0 + 80 >> 3] = $16;
  $20 = 3402823466385288598117041.0e14;
  $13 = 3402823466385288598117041.0e14;
  if ($4) {
   $5 = HEAP32[$0 + 36 >> 2] + 24 | 0;
   while (1) {
    $7 = Math_abs(HEAPF64[$5 + 24 >> 3] + ($16 * HEAPF64[$5 + 16 >> 3] + ($18 * HEAPF64[$5 >> 3] + HEAPF64[$5 + 8 >> 3] * $22)));
    if ($13 > $7) {
     HEAPF64[$0 + 128 >> 3] = $7;
     $13 = $7;
    }
    $5 = $5 + 56 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 8 >> 2];
  label$31 : {
   if (($1 | 0) <= 0) {
    $18 = -3402823466385288598117041.0e14;
    $24 = 3402823466385288598117041.0e14;
    $25 = -3402823466385288598117041.0e14;
    $26 = -3402823466385288598117041.0e14;
    $27 = 3402823466385288598117041.0e14;
    break label$31;
   }
   $5 = HEAP32[$0 + 16 >> 2];
   $26 = -3402823466385288598117041.0e14;
   $27 = 3402823466385288598117041.0e14;
   $25 = -3402823466385288598117041.0e14;
   $18 = -3402823466385288598117041.0e14;
   $24 = 3402823466385288598117041.0e14;
   while (1) {
    $7 = HEAPF64[$5 + 16 >> 3];
    $26 = $7 > $26 ? $7 : $26;
    $24 = $7 < $24 ? $7 : $24;
    $7 = HEAPF64[$5 + 8 >> 3];
    $25 = $7 > $25 ? $7 : $25;
    $20 = $7 < $20 ? $7 : $20;
    $7 = HEAPF64[$5 >> 3];
    $18 = $7 > $18 ? $7 : $18;
    $27 = $7 < $27 ? $7 : $27;
    $5 = $5 + 32 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
  }
  $2 = $0 + 192 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $7 = $26 - $24;
  HEAPF64[$0 + 184 >> 3] = $7;
  $22 = $25 - $20;
  HEAPF64[$0 + 176 >> 3] = $22;
  $16 = $18 - $27;
  HEAPF64[$0 + 168 >> 3] = $16;
  $13 = $13 / 1.7320507764816284;
  HEAPF64[$0 + 112 >> 3] = $13;
  HEAPF64[$0 + 104 >> 3] = $13;
  HEAPF64[$0 + 96 >> 3] = $13;
  $2 = $0 + 160 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAPF64[$0 + 152 >> 3] = $24 + $26;
  HEAPF64[$0 + 144 >> 3] = $20 + $25;
  HEAPF64[$0 + 136 >> 3] = $18 + $27;
  $2 = $16 < $22;
  $3 = $7 > ($2 ? $22 : $16) ? 2 : $2;
  $2 = $3 << 3;
  $4 = $2 + ($0 + 96 | 0) | 0;
  $7 = HEAPF64[$2 + ($0 + 168 | 0) >> 3] * .5;
  HEAPF64[$4 >> 3] = $7;
  $7 = ($7 - $13) * .0009765625;
  $1 = 1024;
  label$34 : {
   label$35 : {
    while (1) {
     if (btConvexPolyhedron__testContainment_28_29_20const($0)) {
      break label$35
     }
     HEAPF64[$4 >> 3] = HEAPF64[$4 >> 3] - $7;
     $1 = $1 - 1 | 0;
     if ($1) {
      continue
     }
     break;
    };
    HEAPF64[$0 + 104 >> 3] = $13;
    HEAPF64[$0 + 112 >> 3] = $13;
    HEAPF64[$0 + 96 >> 3] = $13;
    break label$34;
   }
   $1 = $0 + 96 | 0;
   $2 = 1 << $3 & 3;
   $3 = $1 + ($2 << 3) | 0;
   $1 = $1 + ((1 << $2 & 3) << 3) | 0;
   $16 = (HEAPF64[$0 + 128 >> 3] - $13) * .0009765625;
   $2 = 1024;
   while (1) {
    label$37 : {
     $13 = HEAPF64[$1 >> 3];
     $7 = HEAPF64[$3 >> 3];
     HEAPF64[$3 >> 3] = $16 + $7;
     HEAPF64[$1 >> 3] = $16 + HEAPF64[$1 >> 3];
     if (!btConvexPolyhedron__testContainment_28_29_20const($0)) {
      break label$37
     }
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break label$34;
    }
    break;
   };
   HEAPF64[$3 >> 3] = $7;
   HEAPF64[$1 >> 3] = $13;
  }
  $0 = HEAP32[$8 + 88 >> 2];
  if (!(!$0 | !HEAPU8[$8 + 92 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$8 + 88 >> 2] = 0;
  HEAP8[$8 + 92 | 0] = 1;
  HEAP32[$8 + 80 >> 2] = 0;
  HEAP32[$8 + 84 >> 2] = 0;
  $0 = HEAP32[$8 + 68 >> 2];
  if (!(!$0 | !HEAPU8[$8 + 72 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$8 + 68 >> 2] = 0;
  HEAP8[$8 + 72 | 0] = 1;
  HEAP32[$8 + 60 >> 2] = 0;
  HEAP32[$8 + 64 >> 2] = 0;
  $0 = HEAP32[$8 + 48 >> 2];
  if (!(!$0 | !HEAPU8[$8 + 52 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$8 + 48 >> 2] = 0;
  HEAP8[$8 + 52 | 0] = 1;
  HEAP32[$8 + 40 >> 2] = 0;
  HEAP32[$8 + 44 >> 2] = 0;
  $0 = HEAP32[$8 + 28 >> 2];
  if (!(!$0 | !HEAPU8[$8 + 32 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  __stack_pointer = $8 + 96 | 0;
 }
 
 function btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  HEAP32[$3 >> 2] = -536870912;
  HEAP32[$3 + 4 >> 2] = 1206910975;
  HEAP32[$4 >> 2] = -536870912;
  HEAP32[$4 + 4 >> 2] = -940572673;
  $9 = HEAP32[$0 + 8 >> 2];
  if (($9 | 0) <= 0) {
   $7 = -3402823466385288598117041.0e14
  } else {
   $10 = 8;
   while (1) {
    $11 = HEAP32[$0 + 16 >> 2] + $10 | 0;
    $7 = HEAPF64[$11 + 8 >> 3];
    $8 = HEAPF64[$11 - 8 >> 3];
    $12 = HEAPF64[$11 >> 3];
    $13 = $7 * HEAPF64[$1 + 80 >> 3] + ($8 * HEAPF64[$1 + 64 >> 3] + $12 * HEAPF64[$1 + 72 >> 3]) + HEAPF64[$1 + 112 >> 3];
    $14 = $7 * HEAPF64[$1 + 16 >> 3] + ($8 * HEAPF64[$1 >> 3] + $12 * HEAPF64[$1 + 8 >> 3]) + HEAPF64[$1 + 96 >> 3];
    $8 = $7 * HEAPF64[$1 + 48 >> 3] + ($8 * HEAPF64[$1 + 32 >> 3] + $12 * HEAPF64[$1 + 40 >> 3]) + HEAPF64[$1 + 104 >> 3];
    $7 = $13 * HEAPF64[$2 + 16 >> 3] + ($14 * HEAPF64[$2 >> 3] + $8 * HEAPF64[$2 + 8 >> 3]);
    if ($7 < HEAPF64[$3 >> 3]) {
     HEAPF64[$3 >> 3] = $7;
     HEAP32[$5 + 24 >> 2] = 0;
     HEAP32[$5 + 28 >> 2] = 0;
     HEAPF64[$5 + 16 >> 3] = $13;
     HEAPF64[$5 + 8 >> 3] = $8;
     HEAPF64[$5 >> 3] = $14;
    }
    if (HEAPF64[$4 >> 3] < $7) {
     HEAPF64[$4 >> 3] = $7;
     HEAP32[$6 + 24 >> 2] = 0;
     HEAP32[$6 + 28 >> 2] = 0;
     HEAPF64[$6 + 16 >> 3] = $13;
     HEAPF64[$6 + 8 >> 3] = $8;
     HEAPF64[$6 >> 3] = $14;
    }
    $10 = $10 + 32 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue
    }
    break;
   };
   $7 = HEAPF64[$4 >> 3];
  }
  $8 = HEAPF64[$3 >> 3];
  if ($7 < $8) {
   HEAPF64[$3 >> 3] = $7;
   HEAPF64[$4 >> 3] = $8;
   $0 = $5 + 24 | 0;
   $4 = HEAP32[$0 >> 2];
   $10 = HEAP32[$0 + 4 >> 2];
   $1 = $6 + 24 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   $0 = $5 + 16 | 0;
   $9 = HEAP32[$0 >> 2];
   $11 = HEAP32[$0 + 4 >> 2];
   $2 = $6 + 16 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 4 >> 2] = $3;
   $0 = $5 + 8 | 0;
   $16 = HEAP32[$0 >> 2];
   $17 = HEAP32[$0 + 4 >> 2];
   $3 = $6 + 8 | 0;
   $15 = HEAP32[$3 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$0 + 4 >> 2] = $15;
   $0 = HEAP32[$5 >> 2];
   $15 = HEAP32[$5 + 4 >> 2];
   $18 = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = $18;
   HEAP32[$6 >> 2] = $0;
   HEAP32[$6 + 4 >> 2] = $15;
   HEAP32[$1 >> 2] = $4;
   HEAP32[$1 + 4 >> 2] = $10;
   HEAP32[$2 >> 2] = $9;
   HEAP32[$2 + 4 >> 2] = $11;
   HEAP32[$3 >> 2] = $16;
   HEAP32[$3 + 4 >> 2] = $17;
  }
 }
 
 function btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $12 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  if (($12 | 0) != ($2 | 0)) {
   return $12 - $2 | 0
  }
  if (!$12) {
   return 0
  }
  $13 = -1;
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$1 + 8 >> 2];
  $7 = HEAP32[$1 + 12 >> 2];
  $2 = 0;
  $10 = HEAP32[$0 >> 2];
  $9 = __wasm_i64_mul($7, $2, $10, 0);
  $6 = i64toi32_i32$HIGH_BITS;
  $7 = __wasm_i64_mul($7, $2, $4, 0);
  $6 = $6 + $7 | 0;
  $2 = i64toi32_i32$HIGH_BITS + $5 | 0;
  $2 = $7 >>> 0 > $6 >>> 0 ? $2 + 1 | 0 : $2;
  $5 = __wasm_i64_mul($3, 0, $4, $5);
  $7 = i64toi32_i32$HIGH_BITS;
  $4 = $6 + $7 | 0;
  $2 = $4 >>> 0 < $7 >>> 0 ? $2 + 1 | 0 : $2;
  $7 = $4;
  $4 = $2;
  $2 = 0;
  $6 = $5 + $9 | 0;
  $2 = $6 >>> 0 < $5 >>> 0 ? $2 + 1 | 0 : $2;
  $9 = $6;
  $14 = $2;
  $7 = $2 + $7 | 0;
  $2 = $4;
  $4 = $7;
  $5 = $4 >>> 0 < $14 >>> 0 ? $2 + 1 | 0 : $2;
  $4 = 0;
  $3 = __wasm_i64_mul($3, $8, $10, $15);
  $6 = $4 + $3 | 0;
  $2 = i64toi32_i32$HIGH_BITS + $9 | 0;
  $2 = $3 >>> 0 > $6 >>> 0 ? $2 + 1 | 0 : $2;
  $15 = $6;
  $3 = $6;
  $6 = $2;
  $4 = ($9 | 0) == ($2 | 0) & $3 >>> 0 < $4 >>> 0 | $2 >>> 0 < $9 >>> 0;
  $9 = $7 + $4 | 0;
  $2 = $5;
  $2 = $4 >>> 0 > $9 >>> 0 ? $2 + 1 | 0 : $2;
  $4 = $2;
  $3 = HEAP32[$0 + 12 >> 2];
  $10 = HEAP32[$1 >> 2];
  $8 = HEAP32[$1 + 4 >> 2];
  $2 = 0;
  $7 = HEAP32[$0 + 8 >> 2];
  $14 = 0;
  $1 = __wasm_i64_mul($8, $2, $7, $14);
  $5 = i64toi32_i32$HIGH_BITS;
  $0 = $8;
  $8 = $3;
  $11 = __wasm_i64_mul($0, $2, $3, 0);
  $3 = $5 + $11 | 0;
  $5 = i64toi32_i32$HIGH_BITS;
  $5 = $3 >>> 0 < $11 >>> 0 ? $5 + 1 | 0 : $5;
  $11 = 0;
  $0 = __wasm_i64_mul($10, $11, $8, $2);
  $8 = i64toi32_i32$HIGH_BITS;
  $3 = $8 + $3 | 0;
  $2 = $5;
  $2 = $3 >>> 0 < $8 >>> 0 ? $2 + 1 | 0 : $2;
  $5 = $2;
  $2 = 0;
  $1 = $0 + $1 | 0;
  $2 = $1 >>> 0 < $0 >>> 0 ? $2 + 1 | 0 : $2;
  $3 = $2 + $3 | 0;
  $5 = $3 >>> 0 < $2 >>> 0 ? $5 + 1 | 0 : $5;
  $16 = $3;
  $8 = 0;
  $3 = __wasm_i64_mul($10, $11, $7, $14);
  $0 = $8 + $3 | 0;
  $2 = i64toi32_i32$HIGH_BITS + $1 | 0;
  $2 = $0 >>> 0 < $3 >>> 0 ? $2 + 1 | 0 : $2;
  $3 = $0;
  $0 = $2;
  $10 = ($1 | 0) == ($2 | 0) & $3 >>> 0 < $8 >>> 0 | $1 >>> 0 > $2 >>> 0;
  $1 = $16 + $10 | 0;
  $2 = $5;
  $2 = $1 >>> 0 < $10 >>> 0 ? $2 + 1 | 0 : $2;
  label$3 : {
   if (($2 | 0) == ($4 | 0) & $1 >>> 0 > $9 >>> 0 | $2 >>> 0 > $4 >>> 0) {
    break label$3
   }
   $13 = 1;
   if (($2 | 0) == ($4 | 0) & $1 >>> 0 < $9 >>> 0 | $2 >>> 0 < $4 >>> 0) {
    break label$3
   }
   $13 = -1;
   if (($0 | 0) == ($6 | 0) & $3 >>> 0 > $15 >>> 0 | $0 >>> 0 > $6 >>> 0) {
    break label$3
   }
   $13 = ($0 | 0) == ($6 | 0) & $3 >>> 0 < $15 >>> 0 | $0 >>> 0 < $6 >>> 0;
  }
  return Math_imul($13, $12);
 }
 
 function btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = HEAP32[$0 + 88 >> 2];
  label$1 : {
   if ($7) {
    break label$1
   }
   $3 = HEAP32[$0 + 84 >> 2];
   label$2 : {
    if ($3) {
     HEAP32[$0 + 84 >> 2] = HEAP32[$3 + 8 >> 2];
     break label$2;
    }
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12);
    HEAP32[$3 + 8 >> 2] = 0;
    $4 = HEAP32[$0 + 92 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($4, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4 = HEAP32[$0 + 80 >> 2];
    HEAP32[$0 + 80 >> 2] = $3;
    HEAP32[$3 + 8 >> 2] = $4;
   }
   $7 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   if (($5 | 0) <= 0) {
    break label$1
   }
   $9 = $5 & 3;
   $4 = $7;
   if ($5 - 1 >>> 0 >= 3) {
    $8 = $5 & -4;
    $3 = $7;
    while (1) {
     $12 = $3 + 72 | 0;
     $4 = $3 + 96 | 0;
     $10 = $6 + 4 | 0;
     HEAP32[$12 >> 2] = ($5 | 0) > ($10 | 0) ? $4 : 0;
     $11 = $3 + 48 | 0;
     HEAP32[$11 >> 2] = ($5 | 0) > ($6 + 3 | 0) ? $12 : 0;
     $12 = $3 + 24 | 0;
     HEAP32[$12 >> 2] = ($5 | 0) > ($6 + 2 | 0) ? $11 : 0;
     HEAP32[$3 >> 2] = ($5 | 0) > ($6 + 1 | 0) ? $12 : 0;
     $3 = $4;
     $6 = $10;
     if (($8 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$9) {
    break label$1
   }
   $3 = $10 + 1 | 0;
   while (1) {
    $6 = $4;
    $4 = $4 + 24 | 0;
    HEAP32[$6 >> 2] = ($3 | 0) < ($5 | 0) ? $4 : 0;
    $3 = $3 + 1 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 88 >> 2] = HEAP32[$7 >> 2];
  $4 = $7 + 8 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $7 + 16 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $5 = HEAP32[$0 + 88 >> 2];
  label$7 : {
   if ($5) {
    break label$7
   }
   $3 = HEAP32[$0 + 84 >> 2];
   label$8 : {
    if ($3) {
     HEAP32[$0 + 84 >> 2] = HEAP32[$3 + 8 >> 2];
     break label$8;
    }
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12);
    HEAP32[$3 + 8 >> 2] = 0;
    $4 = HEAP32[$0 + 92 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($4, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4 = HEAP32[$0 + 80 >> 2];
    HEAP32[$0 + 80 >> 2] = $3;
    HEAP32[$3 + 8 >> 2] = $4;
   }
   $5 = HEAP32[$3 >> 2];
   $8 = HEAP32[$3 + 4 >> 2];
   if (($8 | 0) <= 0) {
    break label$7
   }
   $9 = $8 & 3;
   $10 = 0;
   $4 = $5;
   if ($8 - 1 >>> 0 >= 3) {
    $12 = $8 & -4;
    $6 = 0;
    $3 = $5;
    while (1) {
     $11 = $3 + 72 | 0;
     $4 = $3 + 96 | 0;
     $10 = $6 + 4 | 0;
     HEAP32[$11 >> 2] = ($8 | 0) > ($10 | 0) ? $4 : 0;
     $13 = $3 + 48 | 0;
     HEAP32[$13 >> 2] = ($8 | 0) > ($6 + 3 | 0) ? $11 : 0;
     $11 = $3 + 24 | 0;
     HEAP32[$11 >> 2] = ($8 | 0) > ($6 + 2 | 0) ? $13 : 0;
     HEAP32[$3 >> 2] = ($8 | 0) > ($6 + 1 | 0) ? $11 : 0;
     $3 = $4;
     $6 = $10;
     if (($12 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$9) {
    break label$7
   }
   $3 = $10 + 1 | 0;
   while (1) {
    $6 = $4;
    $4 = $4 + 24 | 0;
    HEAP32[$6 >> 2] = ($3 | 0) < ($8 | 0) ? $4 : 0;
    $3 = $3 + 1 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 88 >> 2] = HEAP32[$5 >> 2];
  $4 = $5 + 8 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $3 = $5 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = $5;
  HEAP32[$7 + 12 >> 2] = $2;
  HEAP32[$7 + 16 >> 2] = 0;
  $2 = HEAP32[$0 + 132 >> 2];
  HEAP32[$7 + 20 >> 2] = $2;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$5 + 12 >> 2] = $1;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$5 + 20 >> 2] = $2;
  $1 = HEAP32[$0 + 148 >> 2];
  $2 = $1 + 1 | 0;
  HEAP32[$0 + 148 >> 2] = $2;
  if (HEAP32[$0 + 152 >> 2] <= ($1 | 0)) {
   HEAP32[$0 + 152 >> 2] = $2
  }
  return $7;
 }
 
 function btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
  $23 = __stack_pointer - 16 | 0;
  __stack_pointer = $23;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4 = $2 - $1 | 0;
       switch ($4 | 0) {
       case 1:
        break label$3;
       case 2:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$2;
       };
      }
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $0 = $3 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      break label$1;
     }
     $2 = HEAP32[HEAP32[$0 + 124 >> 2] + ($1 << 2) >> 2];
     $4 = HEAP32[$2 + 204 >> 2];
     label$6 : {
      $10 = HEAP32[$2 + 88 >> 2];
      $11 = HEAP32[$2 + 200 >> 2];
      $6 = HEAP32[$2 + 92 >> 2];
      if (!(($10 | 0) != ($11 | 0) | ($6 | 0) != ($4 | 0))) {
       $4 = $6;
       if (HEAP32[$2 + 96 >> 2] == HEAP32[$2 + 208 >> 2]) {
        break label$6
       }
      }
      $1 = $2 + 112 | 0;
      $10 = $10 - $11 | 0;
      $4 = $6 - $4 | 0;
      label$8 : {
       if (!($10 | $4)) {
        $4 = HEAP32[$2 + 96 >> 2] > HEAP32[$2 + 208 >> 2];
        $6 = $4 ? $1 : $2;
        HEAP32[$3 + 4 >> 2] = $6;
        HEAP32[$3 >> 2] = $6;
        HEAP32[$6 + 4 >> 2] = $6;
        HEAP32[$6 >> 2] = $6;
        $1 = $4 ? $2 : $1;
        $4 = $6;
        $2 = $6;
        break label$8;
       }
       HEAP32[$2 + 4 >> 2] = $1;
       HEAP32[$2 >> 2] = $1;
       HEAP32[$2 + 116 >> 2] = $2;
       $6 = ($10 | 0) < 0;
       $11 = ($4 | 0) < 0;
       $10 = $6 | $11 & !$10;
       HEAP32[$3 + 4 >> 2] = $10 ? $1 : $2;
       HEAP32[$3 >> 2] = $10 ? $2 : $1;
       HEAP32[$2 + 112 >> 2] = $2;
       if ($11) {
        $6 = $2;
        $4 = $1;
        break label$8;
       }
       $6 = $6 & !$4;
       $4 = $6 ? $1 : $2;
       $6 = $6 ? $2 : $1;
      }
      HEAP32[$3 + 12 >> 2] = $4;
      HEAP32[$3 + 8 >> 2] = $6;
      $0 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $2, $1);
      HEAP32[$2 + 8 >> 2] = $0;
      $2 = $1;
      $1 = HEAP32[$0 + 8 >> 2];
      HEAP32[$2 + 8 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = $0;
      HEAP32[$0 >> 2] = $0;
      HEAP32[$1 + 4 >> 2] = $1;
      HEAP32[$1 >> 2] = $1;
      break label$1;
     }
     HEAP32[$2 + 8 >> 2] = 0;
     HEAP32[$3 + 12 >> 2] = $2;
     HEAP32[$3 + 8 >> 2] = $2;
     HEAP32[$3 + 4 >> 2] = $2;
     HEAP32[$3 >> 2] = $2;
     HEAP32[$2 + 4 >> 2] = $2;
     HEAP32[$2 >> 2] = $2;
     break label$1;
    }
    $0 = HEAP32[HEAP32[$0 + 124 >> 2] + ($1 << 2) >> 2];
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$3 + 8 >> 2] = $0;
    HEAP32[$3 + 4 >> 2] = $0;
    HEAP32[$3 >> 2] = $0;
    HEAP32[$0 + 4 >> 2] = $0;
    HEAP32[$0 >> 2] = $0;
    break label$1;
   }
   $10 = (($4 | 0) / 2 | 0) + $1 | 0;
   $4 = $10;
   label$11 : {
    if (($4 | 0) >= ($2 | 0)) {
     break label$11
    }
    $6 = HEAP32[$0 + 124 >> 2] + ($10 << 2) | 0;
    $4 = HEAP32[$6 - 4 >> 2];
    $13 = HEAP32[$4 + 88 >> 2];
    $7 = HEAP32[$4 + 96 >> 2];
    $9 = HEAP32[$4 + 92 >> 2];
    $4 = $10;
    while (1) {
     $11 = HEAP32[$6 >> 2];
     if (($13 | 0) != HEAP32[$11 + 88 >> 2] | HEAP32[$11 + 92 >> 2] != ($9 | 0) | HEAP32[$11 + 96 >> 2] != ($7 | 0)) {
      break label$11
     }
     $6 = $6 + 4 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ($2 | 0)) {
      continue
     }
     break;
    };
    $4 = $2;
   }
   btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $10, $3);
   $1 = $23 + 8 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$23 >> 2] = 0;
   HEAP32[$23 + 4 >> 2] = 0;
   btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $4, $2, $23);
   $16 = $0;
   $10 = 0;
   $8 = __stack_pointer - 128 | 0;
   __stack_pointer = $8;
   label$10 : {
    if (!HEAP32[$23 + 4 >> 2]) {
     break label$10
    }
    if (!HEAP32[$3 + 4 >> 2]) {
     $0 = HEAP32[$23 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$3 + 4 >> 2] = $0;
     $0 = $23 + 8 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
     $2 = $3 + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$2 + 4 >> 2] = $1;
     break label$10;
    }
    HEAP32[$16 + 132 >> 2] = HEAP32[$16 + 132 >> 2] - 1;
    HEAP32[$8 + 124 >> 2] = 0;
    HEAP32[$8 + 120 >> 2] = 0;
    $24 = $8 + 124 | 0;
    $21 = $8 + 120 | 0;
    $25 = $3;
    $0 = HEAP32[$3 + 12 >> 2];
    $4 = HEAP32[$23 + 8 >> 2];
    __inlined_func$btConvexHullInternal__mergeProjection_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__Vertex___2c_20btConvexHullInternal__Vertex___29 : {
     label$13 : {
      label$24 : {
       if (HEAP32[$0 + 88 >> 2] != HEAP32[$4 + 88 >> 2] | HEAP32[$0 + 92 >> 2] != HEAP32[$4 + 92 >> 2]) {
        break label$24
       }
       $1 = HEAP32[$4 + 4 >> 2];
       if (($4 | 0) == ($1 | 0)) {
        HEAP32[$24 >> 2] = $0;
        $0 = HEAP32[$4 + 8 >> 2];
        $1 = 0;
        if (!$0) {
         break label$13
        }
        HEAP32[$21 >> 2] = HEAP32[$0 + 12 >> 2];
        $0 = 0;
        break __inlined_func$btConvexHullInternal__mergeProjection_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__Vertex___2c_20btConvexHullInternal__Vertex___29;
       }
       $0 = HEAP32[$4 >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       HEAP32[$1 >> 2] = $0;
       if (($4 | 0) == HEAP32[$23 >> 2]) {
        $2 = HEAP32[$0 + 88 >> 2];
        $3 = HEAP32[$1 + 88 >> 2];
        HEAP32[$23 >> 2] = ($2 | 0) < ($3 | 0) | ($2 | 0) == ($3 | 0) & HEAP32[$0 + 92 >> 2] < HEAP32[$1 + 92 >> 2] ? $0 : $1;
       }
       if (HEAP32[$23 + 4 >> 2] != ($4 | 0)) {
        break label$24
       }
       $2 = HEAP32[$0 + 88 >> 2];
       $3 = HEAP32[$1 + 88 >> 2];
       HEAP32[$23 + 4 >> 2] = ($2 | 0) > ($3 | 0) | ($2 | 0) == ($3 | 0) & HEAP32[$0 + 92 >> 2] > HEAP32[$1 + 92 >> 2] ? $0 : $1;
      }
      $6 = HEAP32[$23 >> 2];
      $11 = HEAP32[$25 >> 2];
      $13 = HEAP32[$23 + 4 >> 2];
      $7 = HEAP32[$25 + 4 >> 2];
      $3 = HEAP32[$7 + 88 >> 2];
      $1 = HEAP32[$13 + 88 >> 2] - $3 | 0;
      label$9 : {
       if (($1 | 0) > 0) {
        $0 = $13;
        $2 = $7;
        while (1) {
         $4 = $0;
         $9 = HEAP32[$0 + 92 >> 2];
         $3 = $1;
         while (1) {
          label$127 : {
           $1 = HEAP32[$2 + 92 >> 2];
           $12 = $9 - $1 | 0;
           $0 = HEAP32[$2 + 4 >> 2];
           if (($0 | 0) == ($2 | 0)) {
            break label$127
           }
           $5 = HEAP32[$0 + 92 >> 2] - $1 | 0;
           if (($5 | 0) > 0) {
            break label$127
           }
           $17 = HEAP32[$0 + 88 >> 2];
           $1 = $17 - HEAP32[$2 + 88 >> 2] | 0;
           if (!!$1 & ((Math_imul($3, $5) | 0) > (Math_imul($1, $12) | 0) | ($1 | 0) >= 0)) {
            break label$127
           }
           $3 = HEAP32[$4 + 88 >> 2] - $17 | 0;
           $2 = $0;
           continue;
          }
          break;
         };
         $0 = HEAP32[$4 + 4 >> 2];
         if (($0 | 0) == ($4 | 0)) {
          break label$9
         }
         $5 = HEAP32[$0 + 88 >> 2];
         $1 = $5 - HEAP32[$2 + 88 >> 2] | 0;
         if (($1 | 0) <= 0) {
          break label$9
         }
         $17 = HEAP32[$0 + 92 >> 2] - $9 | 0;
         if (($17 | 0) >= 0) {
          break label$9
         }
         $9 = $5 - HEAP32[$4 + 88 >> 2] | 0;
         if (!$9) {
          continue
         }
         if (($9 | 0) >= 0) {
          break label$9
         }
         if ((Math_imul($3, $17) | 0) < (Math_imul($9, $12) | 0)) {
          continue
         }
         break;
        };
        break label$9;
       }
       if (($1 | 0) < 0) {
        $4 = $13;
        $0 = $7;
        label$16 : while (1) {
         $12 = HEAP32[$4 + 92 >> 2];
         $3 = HEAP32[$4 >> 2];
         while (1) {
          $9 = $1;
          $2 = $0;
          $17 = HEAP32[$0 + 92 >> 2];
          $5 = $12 - $17 | 0;
          label$18 : {
           if (($3 | 0) == ($4 | 0)) {
            break label$18
           }
           $1 = HEAP32[$3 + 92 >> 2] - $12 | 0;
           if (($1 | 0) < 0) {
            break label$18
           }
           $18 = HEAP32[$3 + 88 >> 2];
           $0 = $18 - HEAP32[$4 + 88 >> 2] | 0;
           if (!!$0 & ((Math_imul($1, $9) | 0) > (Math_imul($0, $5) | 0) | ($0 | 0) >= 0)) {
            break label$18
           }
           $1 = $18 - HEAP32[$2 + 88 >> 2] | 0;
           $4 = $3;
           $0 = $2;
           continue label$16;
          }
          $0 = HEAP32[$2 >> 2];
          if (($0 | 0) == ($2 | 0)) {
           break label$9
          }
          $18 = HEAP32[$0 + 88 >> 2];
          $1 = HEAP32[$4 + 88 >> 2] - $18 | 0;
          if (($1 | 0) >= 0) {
           break label$9
          }
          $19 = HEAP32[$0 + 92 >> 2] - $17 | 0;
          if (($19 | 0) <= 0) {
           break label$9
          }
          $17 = $18 - HEAP32[$2 + 88 >> 2] | 0;
          if (!$17) {
           continue
          }
          if (($17 | 0) >= 0) {
           break label$9
          }
          if ((Math_imul($9, $19) | 0) < (Math_imul($5, $17) | 0)) {
           continue
          }
          break;
         };
         break;
        };
        break label$9;
       }
       $1 = HEAP32[$7 + 92 >> 2];
       $0 = $7;
       while (1) {
        label$20 : {
         $2 = $0;
         $0 = HEAP32[$0 + 4 >> 2];
         if (($7 | 0) == ($0 | 0) | ($3 | 0) != HEAP32[$0 + 88 >> 2]) {
          break label$20
         }
         $4 = $1;
         $1 = HEAP32[$0 + 92 >> 2];
         if (($4 | 0) >= ($1 | 0)) {
          continue
         }
        }
        break;
       };
       $1 = HEAP32[$13 + 92 >> 2];
       $0 = $13;
       while (1) {
        $4 = $0;
        $0 = HEAP32[$0 >> 2];
        if (($13 | 0) == ($0 | 0) | ($3 | 0) != HEAP32[$0 + 88 >> 2]) {
         break label$9
        }
        $9 = $1;
        $1 = HEAP32[$0 + 92 >> 2];
        if (($9 | 0) <= ($1 | 0)) {
         continue
        }
        break;
       };
      }
      $12 = HEAP32[$11 + 88 >> 2];
      $9 = $12 - HEAP32[$6 + 88 >> 2] | 0;
      label$23 : {
       if (($9 | 0) > 0) {
        $1 = $6;
        $0 = $11;
        while (1) {
         $3 = $1;
         $5 = HEAP32[$1 + 92 >> 2];
         $12 = $9;
         while (1) {
          label$26 : {
           $9 = HEAP32[$0 + 92 >> 2];
           $17 = $5 - $9 | 0;
           $1 = HEAP32[$0 >> 2];
           if (($1 | 0) == ($0 | 0)) {
            break label$26
           }
           $18 = HEAP32[$1 + 92 >> 2] - $9 | 0;
           if (($18 | 0) > 0) {
            break label$26
           }
           $19 = HEAP32[$1 + 88 >> 2];
           $9 = HEAP32[$0 + 88 >> 2] - $19 | 0;
           if (!!$9 & ((Math_imul($12, $18) | 0) > (Math_imul($9, $17) | 0) | ($9 | 0) >= 0)) {
            break label$26
           }
           $12 = $19 - HEAP32[$3 + 88 >> 2] | 0;
           $0 = $1;
           continue;
          }
          break;
         };
         $1 = HEAP32[$3 >> 2];
         if (($3 | 0) == ($1 | 0)) {
          break label$23
         }
         $18 = HEAP32[$1 + 88 >> 2];
         $9 = HEAP32[$0 + 88 >> 2] - $18 | 0;
         if (($9 | 0) <= 0) {
          break label$23
         }
         $19 = HEAP32[$1 + 92 >> 2] - $5 | 0;
         if (($19 | 0) >= 0) {
          break label$23
         }
         $5 = HEAP32[$3 + 88 >> 2] - $18 | 0;
         if (!$5) {
          continue
         }
         if (($5 | 0) >= 0) {
          break label$23
         }
         if ((Math_imul($12, $19) | 0) < (Math_imul($5, $17) | 0)) {
          continue
         }
         break;
        };
        break label$23;
       }
       if (($9 | 0) < 0) {
        $3 = $6;
        $1 = $11;
        label$30 : while (1) {
         $17 = HEAP32[$3 + 92 >> 2];
         $12 = HEAP32[$3 + 4 >> 2];
         while (1) {
          $5 = $9;
          $0 = $1;
          $19 = HEAP32[$0 + 92 >> 2];
          $18 = $17 - $19 | 0;
          label$32 : {
           if (($3 | 0) == ($12 | 0)) {
            break label$32
           }
           $9 = HEAP32[$12 + 92 >> 2] - $17 | 0;
           if (($9 | 0) < 0) {
            break label$32
           }
           $26 = HEAP32[$12 + 88 >> 2];
           $1 = HEAP32[$3 + 88 >> 2] - $26 | 0;
           if (!!$1 & ((Math_imul($5, $9) | 0) > (Math_imul($1, $18) | 0) | ($1 | 0) >= 0)) {
            break label$32
           }
           $9 = HEAP32[$0 + 88 >> 2] - $26 | 0;
           $3 = $12;
           $1 = $0;
           continue label$30;
          }
          $1 = HEAP32[$0 + 4 >> 2];
          if (($1 | 0) == ($0 | 0)) {
           break label$23
          }
          $26 = HEAP32[$1 + 88 >> 2];
          $9 = $26 - HEAP32[$3 + 88 >> 2] | 0;
          if (($9 | 0) >= 0) {
           break label$23
          }
          $29 = HEAP32[$1 + 92 >> 2] - $19 | 0;
          if (($29 | 0) <= 0) {
           break label$23
          }
          $19 = HEAP32[$0 + 88 >> 2] - $26 | 0;
          if (!$19) {
           continue
          }
          if (($19 | 0) >= 0) {
           break label$23
          }
          if ((Math_imul($5, $29) | 0) < (Math_imul($18, $19) | 0)) {
           continue
          }
          break;
         };
         break;
        };
        break label$23;
       }
       $9 = HEAP32[$11 + 92 >> 2];
       $1 = $11;
       while (1) {
        $0 = $1;
        $1 = HEAP32[$0 >> 2];
        if (!(($11 | 0) == ($1 | 0) | ($12 | 0) != HEAP32[$1 + 88 >> 2])) {
         $3 = $9;
         $9 = HEAP32[$1 + 92 >> 2];
         if (($3 | 0) >= ($9 | 0)) {
          continue
         }
        }
        break;
       };
       $9 = HEAP32[$6 + 92 >> 2];
       $1 = $6;
       while (1) {
        $3 = $1;
        $1 = HEAP32[$1 + 4 >> 2];
        if (($6 | 0) == ($1 | 0) | ($12 | 0) != HEAP32[$1 + 88 >> 2]) {
         break label$23
        }
        $5 = $9;
        $9 = HEAP32[$1 + 92 >> 2];
        if (($5 | 0) <= ($9 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$3 >> 2] = $0;
      HEAP32[$0 + 4 >> 2] = $3;
      HEAP32[$2 >> 2] = $4;
      HEAP32[$4 + 4 >> 2] = $2;
      if (HEAP32[$6 + 88 >> 2] < HEAP32[$11 + 88 >> 2]) {
       HEAP32[$25 >> 2] = $6
      }
      if (HEAP32[$13 + 88 >> 2] >= HEAP32[$7 + 88 >> 2]) {
       HEAP32[$25 + 4 >> 2] = $13
      }
      HEAP32[$25 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
      HEAP32[$24 >> 2] = $2;
      $1 = 1;
     }
     $0 = $1;
     HEAP32[$21 >> 2] = $4;
    }
    $24 = HEAP32[$8 + 120 >> 2];
    label$318 : {
     if ($0) {
      $17 = HEAP32[$8 + 124 >> 2];
      $11 = HEAP32[$17 + 96 >> 2];
      $13 = HEAP32[$24 + 96 >> 2];
      $7 = HEAP32[$17 + 92 >> 2];
      $9 = HEAP32[$24 + 92 >> 2];
      $1 = HEAP32[$17 + 8 >> 2];
      $12 = HEAP32[$17 + 88 >> 2];
      $25 = HEAP32[$24 + 88 >> 2];
      HEAP32[$8 + 80 >> 2] = 0;
      $0 = $13 - $11 | 0;
      $5 = $0;
      $29 = $0 >> 31;
      $0 = $9 - $7 | 0;
      $2 = $0;
      $3 = $0 >> 31;
      $21 = __wasm_i64_mul($5, $29, $0, $3);
      $18 = i64toi32_i32$HIGH_BITS;
      $0 = $25 - $12 | 0;
      $4 = 0 - $0 | 0;
      $6 = $4 >> 31;
      $0 = __wasm_i64_mul($4, $6, $0, $0 >> 31);
      $26 = i64toi32_i32$HIGH_BITS;
      $30 = __wasm_i64_mul($2, $3, $2, $3);
      $19 = $0 - $30 | 0;
      $26 = $26 - (i64toi32_i32$HIGH_BITS + ($0 >>> 0 < $30 >>> 0) | 0) | 0;
      $0 = __wasm_i64_mul($4, $6, $5, $29);
      $29 = 0 - $0 | 0;
      $30 = 0 - (i64toi32_i32$HIGH_BITS + (($0 | 0) != 0) | 0) | 0;
      if ($1) {
       $0 = $1;
       while (1) {
        $5 = HEAP32[$0 + 12 >> 2];
        $22 = HEAP32[$5 + 92 >> 2];
        $14 = $22 - $7 | 0;
        $20 = $14 >> 31;
        $27 = __wasm_i64_mul($14, $20, $4, $6);
        $28 = i64toi32_i32$HIGH_BITS;
        $31 = HEAP32[$5 + 88 >> 2];
        $15 = $31 - $12 | 0;
        $32 = $15 >> 31;
        $33 = __wasm_i64_mul($2, $3, $15, $32);
        label$7 : {
         if (($27 | 0) != (0 - $33 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($33 | 0) != 0) | 0) | 0) != ($28 | 0)) {
          break label$7
         }
         $14 = __wasm_i64_mul($21, $18, $14, $20);
         $20 = i64toi32_i32$HIGH_BITS;
         $27 = __wasm_i64_mul($15, $32, $29, $30);
         $14 = $14 + $27 | 0;
         $15 = i64toi32_i32$HIGH_BITS + $20 | 0;
         $20 = HEAP32[$5 + 96 >> 2];
         $5 = $20 - $11 | 0;
         $5 = __wasm_i64_mul($19, $26, $5, $5 >> 31);
         $28 = $14 + $5 | 0;
         $14 = i64toi32_i32$HIGH_BITS + ($14 >>> 0 < $27 >>> 0 ? $15 + 1 | 0 : $15) | 0;
         $5 = $5 >>> 0 > $28 >>> 0 ? $14 + 1 | 0 : $14;
         if (!$28 & ($5 | 0) <= 0 | ($5 | 0) < 0) {
          break label$7
         }
         label$83 : {
          if (!$10) {
           break label$83
          }
          $5 = HEAP32[$10 + 4 >> 2];
          if (($0 | 0) == HEAP32[$10 >> 2]) {
           if (($0 | 0) != ($5 | 0)) {
            break label$7
           }
           $5 = HEAP32[$10 + 12 >> 2];
           $14 = HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2];
           $27 = HEAP32[$14 + 96 >> 2];
           $15 = HEAP32[$5 + 96 >> 2] - $27 | 0;
           $28 = HEAP32[$14 + 92 >> 2];
           $32 = Math_imul($15, $28 - $22 | 0);
           $22 = $20 - $27 | 0;
           $20 = $32 + Math_imul($22, HEAP32[$5 + 92 >> 2] - $28 | 0) | 0;
           $20 = __wasm_i64_mul($20, $20 >> 31, $2, $3);
           $27 = i64toi32_i32$HIGH_BITS;
           $14 = HEAP32[$14 + 88 >> 2];
           $5 = Math_imul($22, $14 - HEAP32[$5 + 88 >> 2] | 0) + Math_imul($15, $31 - $14 | 0) | 0;
           $5 = __wasm_i64_mul($5, $5 >> 31, $4, $6);
           $14 = $20 + $5 | 0;
           $15 = i64toi32_i32$HIGH_BITS + $27 | 0;
           $5 = $5 >>> 0 > $14 >>> 0 ? $15 + 1 | 0 : $15;
           if (!$14 & ($5 | 0) <= 0 | ($5 | 0) < 0) {
            break label$83
           }
           break label$7;
          }
          if (($0 | 0) != ($5 | 0)) {
           break label$7
          }
         }
         $10 = $0;
        }
        $0 = HEAP32[$0 >> 2];
        if (($1 | 0) != ($0 | 0)) {
         continue
        }
        break;
       };
       HEAP32[$8 + 80 >> 2] = $10;
      }
      $1 = HEAP32[$24 + 8 >> 2];
      $5 = 0;
      HEAP32[$8 + 56 >> 2] = 0;
      if ($1) {
       $0 = $1;
       while (1) {
        $11 = HEAP32[$0 + 12 >> 2];
        $14 = HEAP32[$11 + 92 >> 2];
        $7 = $14 - $9 | 0;
        $15 = $7 >> 31;
        $22 = __wasm_i64_mul($7, $15, $4, $6);
        $20 = i64toi32_i32$HIGH_BITS;
        $27 = HEAP32[$11 + 88 >> 2];
        $12 = $27 - $25 | 0;
        $28 = $12 >> 31;
        $31 = __wasm_i64_mul($2, $3, $12, $28);
        label$125 : {
         if (($22 | 0) != (0 - $31 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($31 | 0) != 0) | 0) | 0) != ($20 | 0)) {
          break label$125
         }
         $7 = __wasm_i64_mul($21, $18, $7, $15);
         $15 = i64toi32_i32$HIGH_BITS;
         $22 = __wasm_i64_mul($12, $28, $29, $30);
         $7 = $7 + $22 | 0;
         $12 = i64toi32_i32$HIGH_BITS + $15 | 0;
         $15 = HEAP32[$11 + 96 >> 2];
         $11 = $15 - $13 | 0;
         $11 = __wasm_i64_mul($19, $26, $11, $11 >> 31);
         $20 = $7 + $11 | 0;
         $7 = i64toi32_i32$HIGH_BITS + ($7 >>> 0 < $22 >>> 0 ? $12 + 1 | 0 : $12) | 0;
         $11 = $11 >>> 0 > $20 >>> 0 ? $7 + 1 | 0 : $7;
         if (!$20 & ($11 | 0) <= 0 | ($11 | 0) < 0) {
          break label$125
         }
         label$139 : {
          if (!$5) {
           break label$139
          }
          if (HEAP32[$5 >> 2] != ($0 | 0)) {
           break label$125
          }
          if (HEAP32[$5 + 4 >> 2] != ($0 | 0)) {
           break label$139
          }
          $11 = HEAP32[$5 + 12 >> 2];
          $7 = HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2];
          $22 = HEAP32[$7 + 96 >> 2];
          $12 = HEAP32[$11 + 96 >> 2] - $22 | 0;
          $20 = HEAP32[$7 + 92 >> 2];
          $28 = Math_imul($12, $20 - $14 | 0);
          $14 = $15 - $22 | 0;
          $15 = $28 + Math_imul($14, HEAP32[$11 + 92 >> 2] - $20 | 0) | 0;
          $15 = __wasm_i64_mul($15, $15 >> 31, $2, $3);
          $22 = i64toi32_i32$HIGH_BITS;
          $7 = HEAP32[$7 + 88 >> 2];
          $11 = Math_imul($14, $7 - HEAP32[$11 + 88 >> 2] | 0) + Math_imul($12, $27 - $7 | 0) | 0;
          $11 = __wasm_i64_mul($11, $11 >> 31, $4, $6);
          $7 = $15 + $11 | 0;
          $12 = i64toi32_i32$HIGH_BITS + $22 | 0;
          $11 = $7 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
          if (!$7 & ($11 | 0) <= 0 | ($11 | 0) < 0) {
           break label$125
          }
         }
         $5 = $0;
        }
        $0 = HEAP32[$0 >> 2];
        if (($1 | 0) != ($0 | 0)) {
         continue
        }
        break;
       };
       HEAP32[$8 + 56 >> 2] = $5;
      }
      label$14 : {
       if (!($5 | $10)) {
        break label$14
       }
       btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($16, $17, $24, $8 + 80 | 0, $8 + 56 | 0);
       $0 = HEAP32[$8 + 80 >> 2];
       if ($0) {
        $17 = HEAP32[$0 + 12 >> 2];
        HEAP32[$8 + 124 >> 2] = $17;
       }
       $0 = HEAP32[$8 + 56 >> 2];
       if (!$0) {
        break label$14
       }
       $24 = HEAP32[$0 + 12 >> 2];
       HEAP32[$8 + 120 >> 2] = $24;
      }
      $26 = HEAP32[$24 + 96 >> 2] + 1 | 0;
      $29 = HEAP32[$24 + 92 >> 2];
      $30 = HEAP32[$24 + 88 >> 2];
      break label$318;
     }
     $26 = HEAP32[$24 + 96 >> 2];
     $29 = HEAP32[$24 + 92 >> 2];
     $17 = HEAP32[$8 + 124 >> 2];
     $30 = HEAP32[$24 + 88 >> 2] + 1 | 0;
    }
    $0 = $17;
    $2 = $24;
    $13 = 0;
    $11 = 0;
    $12 = 0;
    $18 = 0;
    $7 = 1;
    $4 = 0;
    $1 = 0;
    $25 = 0;
    $19 = 0;
    while (1) {
     HEAP32[$8 + 116 >> 2] = -1;
     $9 = HEAP32[$0 + 92 >> 2];
     $3 = HEAP32[$2 + 92 >> 2] - $9 | 0;
     HEAP32[$8 + 108 >> 2] = $3;
     $5 = HEAP32[$0 + 96 >> 2];
     $6 = HEAP32[$2 + 96 >> 2] - $5 | 0;
     HEAP32[$8 + 112 >> 2] = $6;
     $21 = HEAP32[$0 + 88 >> 2];
     $10 = HEAP32[$2 + 88 >> 2] - $21 | 0;
     HEAP32[$8 + 104 >> 2] = $10;
     $15 = $29 - $9 | 0;
     $14 = $26 - $5 | 0;
     $9 = Math_imul($15, $6) - Math_imul($14, $3) | 0;
     $5 = $9 >> 31;
     HEAP32[$8 + 80 >> 2] = $9;
     HEAP32[$8 + 84 >> 2] = $5;
     $22 = $30 - $21 | 0;
     $21 = Math_imul($10, $14) - Math_imul($22, $6) | 0;
     $14 = $21 >> 31;
     HEAP32[$8 + 88 >> 2] = $21;
     HEAP32[$8 + 92 >> 2] = $14;
     $15 = Math_imul($3, $22) - Math_imul($10, $15) | 0;
     $22 = $15 >> 31;
     HEAP32[$8 + 96 >> 2] = $15;
     HEAP32[$8 + 100 >> 2] = $22;
     $27 = $10 >> 31;
     $20 = __wasm_i64_mul($21, $14, $10, $27);
     $28 = i64toi32_i32$HIGH_BITS;
     $31 = $3 >> 31;
     $32 = __wasm_i64_mul($9, $5, $3, $31);
     HEAP32[$8 + 72 >> 2] = $20 - $32;
     HEAP32[$8 + 76 >> 2] = $28 - (i64toi32_i32$HIGH_BITS + ($20 >>> 0 < $32 >>> 0) | 0);
     $20 = $5;
     $5 = $6 >> 31;
     $9 = __wasm_i64_mul($9, $20, $6, $5);
     $20 = i64toi32_i32$HIGH_BITS;
     $10 = __wasm_i64_mul($15, $22, $10, $27);
     HEAP32[$8 + 64 >> 2] = $9 - $10;
     HEAP32[$8 + 68 >> 2] = $20 - (i64toi32_i32$HIGH_BITS + ($10 >>> 0 > $9 >>> 0) | 0);
     $3 = __wasm_i64_mul($15, $22, $3, $31);
     $10 = i64toi32_i32$HIGH_BITS;
     $6 = __wasm_i64_mul($21, $14, $6, $5);
     HEAP32[$8 + 56 >> 2] = $3 - $6;
     HEAP32[$8 + 60 >> 2] = $10 - (i64toi32_i32$HIGH_BITS + ($3 >>> 0 < $6 >>> 0) | 0);
     $3 = $8 + 32 | 0;
     HEAP32[$3 + 16 >> 2] = 0;
     $6 = $3 + 8 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$8 + 32 >> 2] = 0;
     HEAP32[$8 + 36 >> 2] = 0;
     $6 = $8 + 104 | 0;
     $10 = $8 + 80 | 0;
     $9 = $8 + 56 | 0;
     $21 = btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($16, 0, $0, $6, $10, $9, $3);
     $3 = $8 + 8 | 0;
     HEAP32[$3 + 16 >> 2] = 0;
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$8 + 8 >> 2] = 0;
     HEAP32[$8 + 12 >> 2] = 0;
     $9 = btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($16, 1, $2, $6, $10, $9, $3);
     if (!($9 | $21)) {
      $1 = $0;
      $0 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($16, $0, $2);
      HEAP32[$1 + 8 >> 2] = $0;
      $1 = HEAP32[$0 + 8 >> 2];
      HEAP32[$2 + 8 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = $0;
      HEAP32[$0 >> 2] = $0;
      HEAP32[$1 + 4 >> 2] = $1;
      HEAP32[$1 >> 2] = $1;
      break label$10;
     }
     $5 = $21 ? -1 : 1;
     if (!(!$21 | !$9)) {
      $5 = btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($8 + 32 | 0, $8 + 8 | 0)
     }
     label$19 : {
      label$2011 : {
       label$2112 : {
        if ($7 & 1) {
         break label$2112
        }
        if (($5 | 0) >= 0) {
         if (HEAP32[$8 + 16 >> 2] | HEAP32[$8 + 20 >> 2] | HEAP32[$8 + 24 >> 2] >= 0) {
          break label$2112
         }
         $7 = $13;
         $2 = $11;
         $6 = $4;
         $3 = $1;
         break label$2011;
        }
        if (HEAP32[$8 + 40 >> 2] | HEAP32[$8 + 44 >> 2] | HEAP32[$8 + 48 >> 2] >= 0) {
         break label$2112
        }
        HEAP32[$8 + 4 >> 2] = $21;
        $6 = $4;
        $3 = $1;
        break label$19;
       }
       $6 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($16, $0, $2);
       $3 = $6;
       if ($4) {
        HEAP32[$4 + 4 >> 2] = $6;
        $3 = $1;
       }
       HEAP32[$6 >> 2] = $4;
       $7 = HEAP32[$6 + 8 >> 2];
       $2 = $7;
       if ($13) {
        HEAP32[$13 >> 2] = $7;
        $2 = $11;
       }
       HEAP32[$7 + 4 >> 2] = $13;
      }
      HEAP32[$8 + 4 >> 2] = $21;
      HEAP32[$8 >> 2] = $9;
      $4 = $9;
      if (!$5) {
       btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($16, HEAP32[$8 + 124 >> 2], HEAP32[$8 + 120 >> 2], $8 + 4 | 0, $8);
       $4 = HEAP32[$8 >> 2];
      }
      if (!(!$4 | ($5 | 0) < 0)) {
       label$2713 : {
        label$28 : {
         if ($18) {
          $0 = HEAP32[$18 >> 2];
          if (($0 | 0) != ($9 | 0)) {
           while (1) {
            $13 = HEAP32[$0 + 8 >> 2];
            $1 = 0;
            $10 = 0;
            $11 = HEAP32[$0 >> 2];
            if (($0 | 0) != ($11 | 0)) {
             HEAP32[$11 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
             HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $11;
             $10 = $11;
            }
            HEAP32[HEAP32[$13 + 12 >> 2] + 8 >> 2] = $10;
            $10 = HEAP32[$13 >> 2];
            if (($13 | 0) != ($10 | 0)) {
             HEAP32[$10 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
             HEAP32[HEAP32[$13 + 4 >> 2] >> 2] = $10;
             $1 = $10;
            }
            HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2] = $1;
            HEAP32[$0 + 16 >> 2] = 0;
            $1 = $0 + 8 | 0;
            HEAP32[$1 >> 2] = 0;
            HEAP32[$1 + 4 >> 2] = 0;
            HEAP32[$0 >> 2] = 0;
            HEAP32[$0 + 4 >> 2] = 0;
            HEAP32[$0 >> 2] = HEAP32[$16 + 88 >> 2];
            HEAP32[$16 + 88 >> 2] = $0;
            HEAP32[$13 + 16 >> 2] = 0;
            $0 = $13 + 8 | 0;
            HEAP32[$0 >> 2] = 0;
            HEAP32[$0 + 4 >> 2] = 0;
            HEAP32[$13 >> 2] = 0;
            HEAP32[$13 + 4 >> 2] = 0;
            HEAP32[$13 >> 2] = HEAP32[$16 + 88 >> 2];
            HEAP32[$16 + 88 >> 2] = $13;
            HEAP32[$16 + 148 >> 2] = HEAP32[$16 + 148 >> 2] - 1;
            $0 = $11;
            if (($9 | 0) != ($0 | 0)) {
             continue
            }
            break;
           }
          }
          if ($7) {
           break label$28
          }
          break label$2713;
         }
         if (!$7) {
          $12 = $9;
          break label$2713;
         }
         $18 = HEAP32[$9 + 4 >> 2];
         $12 = $2;
        }
        HEAP32[$18 >> 2] = $2;
        HEAP32[$2 + 4 >> 2] = $18;
        HEAP32[$7 >> 2] = $9;
        HEAP32[$9 + 4 >> 2] = $7;
        $4 = HEAP32[$8 >> 2];
        $2 = 0;
       }
       $11 = $2;
       $0 = HEAP32[$8 + 120 >> 2];
       HEAP32[$8 + 120 >> 2] = HEAP32[$4 + 12 >> 2];
       $26 = HEAP32[$0 + 96 >> 2];
       $29 = HEAP32[$0 + 92 >> 2];
       $18 = HEAP32[$4 + 8 >> 2];
       $30 = HEAP32[$0 + 88 >> 2];
       $13 = 0;
       break label$19;
      }
      $13 = $7;
      $11 = $2;
     }
     label$3514 : {
      label$3615 : {
       if (($5 | 0) <= 0) {
        $5 = HEAP32[$8 + 4 >> 2];
        if ($5) {
         break label$3615
        }
       }
       $0 = HEAP32[$8 + 124 >> 2];
       break label$3514;
      }
      label$38 : {
       label$39 : {
        if ($19) {
         $0 = HEAP32[$19 + 4 >> 2];
         if (($0 | 0) != ($21 | 0)) {
          while (1) {
           $7 = HEAP32[$0 + 8 >> 2];
           $10 = HEAP32[$0 + 4 >> 2];
           $1 = 0;
           $2 = 0;
           $4 = HEAP32[$0 >> 2];
           if (($0 | 0) != ($4 | 0)) {
            HEAP32[$4 + 4 >> 2] = $10;
            HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $4;
            $2 = $4;
           }
           HEAP32[HEAP32[$7 + 12 >> 2] + 8 >> 2] = $2;
           $2 = HEAP32[$7 >> 2];
           if (($7 | 0) != ($2 | 0)) {
            HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
            HEAP32[HEAP32[$7 + 4 >> 2] >> 2] = $2;
            $1 = $2;
           }
           HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2] = $1;
           HEAP32[$0 + 16 >> 2] = 0;
           $1 = $0 + 8 | 0;
           HEAP32[$1 >> 2] = 0;
           HEAP32[$1 + 4 >> 2] = 0;
           HEAP32[$0 >> 2] = 0;
           HEAP32[$0 + 4 >> 2] = 0;
           HEAP32[$0 >> 2] = HEAP32[$16 + 88 >> 2];
           HEAP32[$16 + 88 >> 2] = $0;
           HEAP32[$7 + 16 >> 2] = 0;
           $0 = $7 + 8 | 0;
           HEAP32[$0 >> 2] = 0;
           HEAP32[$0 + 4 >> 2] = 0;
           HEAP32[$7 >> 2] = 0;
           HEAP32[$7 + 4 >> 2] = 0;
           HEAP32[$7 >> 2] = HEAP32[$16 + 88 >> 2];
           HEAP32[$16 + 88 >> 2] = $7;
           HEAP32[$16 + 148 >> 2] = HEAP32[$16 + 148 >> 2] - 1;
           $0 = $10;
           if (($21 | 0) != ($0 | 0)) {
            continue
           }
           break;
          }
         }
         if (!$6) {
          break label$38
         }
         HEAP32[$3 >> 2] = $19;
         $0 = $19 + 4 | 0;
         break label$39;
        }
        if (!$6) {
         $25 = $21;
         break label$38;
        }
        $0 = HEAP32[$21 >> 2];
        HEAP32[$3 >> 2] = $0;
        $25 = $3;
        $0 = $0 + 4 | 0;
       }
       HEAP32[$0 >> 2] = $3;
       HEAP32[$21 >> 2] = $6;
       HEAP32[$6 + 4 >> 2] = $21;
       $3 = 0;
       $5 = HEAP32[$8 + 4 >> 2];
      }
      $1 = HEAP32[$8 + 124 >> 2];
      $0 = HEAP32[$5 + 12 >> 2];
      HEAP32[$8 + 124 >> 2] = $0;
      $26 = HEAP32[$1 + 96 >> 2];
      $29 = HEAP32[$1 + 92 >> 2];
      $19 = HEAP32[$5 + 8 >> 2];
      $30 = HEAP32[$1 + 88 >> 2];
      $6 = 0;
     }
     $2 = HEAP32[$8 + 120 >> 2];
     if (($0 | 0) != ($17 | 0) | ($24 | 0) != ($2 | 0)) {
      $7 = 0;
      $4 = $6;
      $1 = $3;
      continue;
     } else {
      label$47 : {
       if (!$19) {
        HEAP32[$3 >> 2] = $6;
        HEAP32[$6 + 4 >> 2] = $3;
        HEAP32[HEAP32[$8 + 124 >> 2] + 8 >> 2] = $6;
        break label$47;
       }
       $0 = HEAP32[$19 + 4 >> 2];
       if (($0 | 0) != ($25 | 0)) {
        while (1) {
         $7 = HEAP32[$0 + 8 >> 2];
         $4 = HEAP32[$0 + 4 >> 2];
         $1 = 0;
         $2 = HEAP32[$0 >> 2];
         if (($0 | 0) != ($2 | 0)) {
          HEAP32[$2 + 4 >> 2] = $4;
          HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $2;
          $1 = $2;
         }
         HEAP32[HEAP32[$7 + 12 >> 2] + 8 >> 2] = $1;
         $10 = HEAP32[$7 >> 2];
         label$52 : {
          if (($10 | 0) == ($7 | 0)) {
           $10 = 0;
           break label$52;
          }
          HEAP32[$10 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
          HEAP32[HEAP32[$7 + 4 >> 2] >> 2] = $10;
         }
         HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2] = $10;
         HEAP32[$0 + 16 >> 2] = 0;
         $1 = $0 + 8 | 0;
         HEAP32[$1 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         HEAP32[$0 >> 2] = 0;
         HEAP32[$0 + 4 >> 2] = 0;
         HEAP32[$0 >> 2] = HEAP32[$16 + 88 >> 2];
         HEAP32[$16 + 88 >> 2] = $0;
         HEAP32[$7 + 16 >> 2] = 0;
         $0 = $7 + 8 | 0;
         HEAP32[$0 >> 2] = 0;
         HEAP32[$0 + 4 >> 2] = 0;
         HEAP32[$7 >> 2] = 0;
         HEAP32[$7 + 4 >> 2] = 0;
         HEAP32[$7 >> 2] = HEAP32[$16 + 88 >> 2];
         HEAP32[$16 + 88 >> 2] = $7;
         HEAP32[$16 + 148 >> 2] = HEAP32[$16 + 148 >> 2] - 1;
         $0 = $4;
         if (($25 | 0) != ($0 | 0)) {
          continue
         }
         break;
        }
       }
       if (!$6) {
        break label$47
       }
       HEAP32[$19 + 4 >> 2] = $3;
       HEAP32[$3 >> 2] = $19;
       HEAP32[$6 + 4 >> 2] = $25;
       HEAP32[$25 >> 2] = $6;
      }
      if (!$18) {
       HEAP32[$13 >> 2] = $11;
       HEAP32[$11 + 4 >> 2] = $13;
       HEAP32[HEAP32[$8 + 120 >> 2] + 8 >> 2] = $13;
       break label$10;
      }
      $0 = HEAP32[$18 >> 2];
      if (($0 | 0) != ($12 | 0)) {
       while (1) {
        $2 = HEAP32[$0 + 8 >> 2];
        $10 = 0;
        $1 = HEAP32[$0 >> 2];
        if (($0 | 0) != ($1 | 0)) {
         HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
         HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1;
         $10 = $1;
        }
        HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $10;
        $10 = HEAP32[$2 >> 2];
        label$58 : {
         if (($10 | 0) == ($2 | 0)) {
          $10 = 0;
          break label$58;
         }
         HEAP32[$10 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
         HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $10;
        }
        HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2] = $10;
        HEAP32[$0 + 16 >> 2] = 0;
        $3 = $0 + 8 | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 0;
        HEAP32[$0 >> 2] = 0;
        HEAP32[$0 + 4 >> 2] = 0;
        HEAP32[$0 >> 2] = HEAP32[$16 + 88 >> 2];
        HEAP32[$16 + 88 >> 2] = $0;
        HEAP32[$2 + 16 >> 2] = 0;
        $0 = $2 + 8 | 0;
        HEAP32[$0 >> 2] = 0;
        HEAP32[$0 + 4 >> 2] = 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        HEAP32[$2 >> 2] = HEAP32[$16 + 88 >> 2];
        HEAP32[$16 + 88 >> 2] = $2;
        HEAP32[$16 + 148 >> 2] = HEAP32[$16 + 148 >> 2] - 1;
        $0 = $1;
        if (($12 | 0) != ($0 | 0)) {
         continue
        }
        break;
       }
      }
      if (!$13) {
       break label$10
      }
      HEAP32[$11 + 4 >> 2] = $18;
      HEAP32[$18 >> 2] = $11;
      HEAP32[$12 + 4 >> 2] = $13;
      HEAP32[$13 >> 2] = $12;
     }
     break;
    };
   }
   __stack_pointer = $8 + 128 | 0;
  }
  __stack_pointer = $23 + 16 | 0;
 }
 
 function btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  $6 = $1;
  $18 = HEAP32[$3 >> 2];
  if ($18) {
   $6 = HEAP32[$18 + 12 >> 2]
  }
  $21 = HEAP32[$6 + 96 >> 2];
  $22 = HEAP32[$6 + 92 >> 2];
  $25 = HEAP32[$6 + 88 >> 2];
  $20 = HEAP32[$4 >> 2];
  $7 = $20 ? HEAP32[$20 + 12 >> 2] : $2;
  $6 = HEAP32[$1 + 96 >> 2];
  $33 = HEAP32[$2 + 96 >> 2] - $6 | 0;
  $8 = HEAP32[($18 ? $18 : $20) + 12 >> 2];
  $5 = HEAP32[$1 + 92 >> 2];
  $9 = HEAP32[$8 + 92 >> 2] - $5 | 0;
  $34 = HEAP32[$2 + 92 >> 2] - $5 | 0;
  $12 = HEAP32[$8 + 96 >> 2] - $6 | 0;
  $13 = Math_imul($33, $9) - Math_imul($34, $12) | 0;
  $40 = $13;
  $36 = $13 >> 31;
  $16 = $33 >> 31;
  $13 = __wasm_i64_mul($13, $36, $33, $16);
  $17 = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$1 + 88 >> 2];
  $8 = HEAP32[$8 + 88 >> 2] - $1 | 0;
  $35 = HEAP32[$2 + 88 >> 2] - $1 | 0;
  $2 = Math_imul($8, $34) - Math_imul($9, $35) | 0;
  $41 = $2;
  $37 = $2 >> 31;
  $9 = $35 >> 31;
  $2 = __wasm_i64_mul($2, $37, $35, $9);
  $27 = $13 - $2 | 0;
  $28 = $17 - (i64toi32_i32$HIGH_BITS + ($2 >>> 0 > $13 >>> 0) | 0) | 0;
  $13 = __wasm_i64_mul($27, $28, $22, $22 >> 31);
  $17 = i64toi32_i32$HIGH_BITS;
  $24 = $34 >> 31;
  $2 = __wasm_i64_mul($41, $37, $34, $24);
  $11 = i64toi32_i32$HIGH_BITS;
  $8 = Math_imul($12, $35) - Math_imul($8, $33) | 0;
  $42 = $8;
  $38 = $8 >> 31;
  $8 = __wasm_i64_mul($8, $38, $33, $16);
  $29 = $2 - $8 | 0;
  $30 = $11 - (i64toi32_i32$HIGH_BITS + ($2 >>> 0 < $8 >>> 0) | 0) | 0;
  $12 = __wasm_i64_mul($29, $30, $25, $25 >> 31);
  $2 = $13 + $12 | 0;
  $13 = i64toi32_i32$HIGH_BITS + $17 | 0;
  $8 = __wasm_i64_mul($42, $38, $35, $9);
  $9 = i64toi32_i32$HIGH_BITS;
  $16 = __wasm_i64_mul($40, $36, $34, $24);
  $31 = $8 - $16 | 0;
  $32 = $9 - (i64toi32_i32$HIGH_BITS + ($8 >>> 0 < $16 >>> 0) | 0) | 0;
  $9 = __wasm_i64_mul($31, $32, $21, $21 >> 31);
  $8 = $2 + $9 | 0;
  $2 = i64toi32_i32$HIGH_BITS + ($2 >>> 0 < $12 >>> 0 ? $13 + 1 | 0 : $13) | 0;
  $13 = $8 >>> 0 < $9 >>> 0 ? $2 + 1 | 0 : $2;
  $1 = __wasm_i64_mul($40, $36, $1, $1 >> 31);
  $2 = i64toi32_i32$HIGH_BITS;
  $6 = __wasm_i64_mul($41, $37, $6, $6 >> 31);
  $1 = $6 + $1 | 0;
  $2 = i64toi32_i32$HIGH_BITS + $2 | 0;
  $5 = __wasm_i64_mul($42, $38, $5, $5 >> 31);
  $9 = $5 + $1 | 0;
  $26 = $9;
  $1 = i64toi32_i32$HIGH_BITS + ($1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2) | 0;
  $14 = $5 >>> 0 > $9 >>> 0 ? $1 + 1 | 0 : $1;
  $16 = HEAP32[$7 + 96 >> 2];
  $17 = HEAP32[$7 + 92 >> 2];
  $24 = HEAP32[$7 + 88 >> 2];
  $1 = $20;
  label$3 : {
   if (!$18) {
    break label$3
   }
   $1 = $20;
   if (!HEAP32[$18 + 12 >> 2]) {
    break label$3
   }
   $1 = HEAP32[HEAP32[$18 + 8 >> 2] + 4 >> 2];
   $6 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$6 + 92 >> 2];
   $7 = $2 >> 31;
   $5 = __wasm_i64_mul($2, $7, $42, $38);
   $11 = i64toi32_i32$HIGH_BITS;
   $9 = HEAP32[$6 + 88 >> 2];
   $12 = $9;
   $9 = $9 >> 31;
   $23 = __wasm_i64_mul($12, $9, $40, $36);
   $5 = $5 + $23 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $11 | 0;
   $6 = HEAP32[$6 + 96 >> 2];
   $15 = $6;
   $19 = $6 >> 31;
   $39 = __wasm_i64_mul($6, $19, $41, $37);
   $6 = $5 + $39 | 0;
   $5 = i64toi32_i32$HIGH_BITS + ($5 >>> 0 < $23 >>> 0 ? $11 + 1 | 0 : $11) | 0;
   $5 = $6 >>> 0 < $39 >>> 0 ? $5 + 1 | 0 : $5;
   label$6 : {
    if ($6 >>> 0 < $26 >>> 0 & ($14 | 0) >= ($5 | 0) | ($5 | 0) < ($14 | 0)) {
     break label$6
    }
    $6 = $1 + 12 | 0;
    $39 = HEAP32[$0 + 132 >> 2];
    while (1) {
     if (($39 | 0) == HEAP32[$1 + 20 >> 2]) {
      break label$6
     }
     $2 = __wasm_i64_mul($27, $28, $2, $7);
     $5 = i64toi32_i32$HIGH_BITS;
     $9 = __wasm_i64_mul($29, $30, $12, $9);
     $7 = $9 + $2 | 0;
     $5 = i64toi32_i32$HIGH_BITS + $5 | 0;
     $12 = __wasm_i64_mul($31, $32, $15, $19);
     $2 = $12 + $7 | 0;
     $7 = i64toi32_i32$HIGH_BITS + ($7 >>> 0 < $9 >>> 0 ? $5 + 1 | 0 : $5) | 0;
     $7 = $2 >>> 0 < $12 >>> 0 ? $7 + 1 | 0 : $7;
     if (($7 | 0) <= ($13 | 0) & $2 >>> 0 <= $8 >>> 0 | ($7 | 0) < ($13 | 0)) {
      break label$6
     }
     HEAP32[$3 >> 2] = $1;
     $8 = HEAP32[$6 >> 2];
     $21 = HEAP32[$8 + 96 >> 2];
     $22 = HEAP32[$8 + 92 >> 2];
     $25 = HEAP32[$8 + 88 >> 2];
     if ($8) {
      $1 = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
      $6 = $1 + 12 | 0;
      $8 = $2;
      $13 = $7;
      $5 = HEAP32[$1 + 12 >> 2];
      $2 = HEAP32[$5 + 92 >> 2];
      $7 = $2 >> 31;
      $11 = __wasm_i64_mul($2, $7, $42, $38);
      $15 = i64toi32_i32$HIGH_BITS;
      $9 = HEAP32[$5 + 88 >> 2];
      $12 = $9;
      $9 = $9 >> 31;
      $44 = __wasm_i64_mul($12, $9, $40, $36);
      $11 = $11 + $44 | 0;
      $23 = i64toi32_i32$HIGH_BITS + $15 | 0;
      $5 = HEAP32[$5 + 96 >> 2];
      $15 = $5;
      $19 = $5 >> 31;
      $43 = __wasm_i64_mul($5, $19, $41, $37);
      $5 = $43 + $11 | 0;
      $11 = i64toi32_i32$HIGH_BITS + ($11 >>> 0 < $44 >>> 0 ? $23 + 1 | 0 : $23) | 0;
      $11 = $5 >>> 0 < $43 >>> 0 ? $11 + 1 | 0 : $11;
      if ($5 >>> 0 < $26 >>> 0 & ($14 | 0) >= ($11 | 0) | ($11 | 0) < ($14 | 0)) {
       break label$6
      }
      continue;
     }
     break;
    };
    $8 = $2;
    $13 = $7;
   }
   $1 = HEAP32[$4 >> 2];
  }
  $2 = __wasm_i64_mul($27, $28, $17, $17 >> 31);
  $6 = i64toi32_i32$HIGH_BITS;
  $5 = __wasm_i64_mul($29, $30, $24, $24 >> 31);
  $7 = $5 + $2 | 0;
  $6 = i64toi32_i32$HIGH_BITS + $6 | 0;
  $9 = __wasm_i64_mul($31, $32, $16, $16 >> 31);
  $2 = $9 + $7 | 0;
  $7 = i64toi32_i32$HIGH_BITS + ($5 >>> 0 > $7 >>> 0 ? $6 + 1 | 0 : $6) | 0;
  $7 = $2 >>> 0 < $9 >>> 0 ? $7 + 1 | 0 : $7;
  label$9 : {
   if (!$1) {
    $1 = 0;
    break label$9;
   }
   if (!HEAP32[$1 + 12 >> 2]) {
    break label$9
   }
   $6 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
   $5 = HEAP32[$6 + 12 >> 2];
   $12 = HEAP32[$5 + 92 >> 2];
   $9 = $12 >> 31;
   $11 = __wasm_i64_mul($12, $9, $42, $38);
   $23 = i64toi32_i32$HIGH_BITS;
   $15 = HEAP32[$5 + 88 >> 2];
   $19 = $15 >> 31;
   $43 = __wasm_i64_mul($15, $19, $40, $36);
   $11 = $11 + $43 | 0;
   $23 = i64toi32_i32$HIGH_BITS + $23 | 0;
   $5 = HEAP32[$5 + 96 >> 2];
   $39 = $5;
   $44 = $5 >> 31;
   $45 = __wasm_i64_mul($5, $44, $41, $37);
   $5 = $45 + $11 | 0;
   $11 = i64toi32_i32$HIGH_BITS + ($11 >>> 0 < $43 >>> 0 ? $23 + 1 | 0 : $23) | 0;
   $11 = $5 >>> 0 < $45 >>> 0 ? $11 + 1 | 0 : $11;
   if ($5 >>> 0 < $26 >>> 0 & ($14 | 0) >= ($11 | 0) | ($11 | 0) < ($14 | 0)) {
    break label$9
   }
   $11 = $6 + 12 | 0;
   $45 = HEAP32[$0 + 132 >> 2];
   while (1) {
    $5 = $6;
    if (($45 | 0) == HEAP32[$5 + 20 >> 2]) {
     break label$9
    }
    $6 = __wasm_i64_mul($27, $28, $12, $9);
    $9 = i64toi32_i32$HIGH_BITS;
    $15 = __wasm_i64_mul($29, $30, $15, $19);
    $6 = $15 + $6 | 0;
    $12 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $19 = __wasm_i64_mul($31, $32, $39, $44);
    $9 = $19 + $6 | 0;
    $6 = i64toi32_i32$HIGH_BITS + ($6 >>> 0 < $15 >>> 0 ? $12 + 1 | 0 : $12) | 0;
    $6 = $9 >>> 0 < $19 >>> 0 ? $6 + 1 | 0 : $6;
    $12 = $6;
    if (($7 | 0) >= ($6 | 0) & $2 >>> 0 >= $9 >>> 0 | ($6 | 0) < ($7 | 0)) {
     break label$9
    }
    HEAP32[$4 >> 2] = $5;
    $1 = HEAP32[$11 >> 2];
    $16 = HEAP32[$1 + 96 >> 2];
    $17 = HEAP32[$1 + 92 >> 2];
    $24 = HEAP32[$1 + 88 >> 2];
    if ($1) {
     $6 = HEAP32[HEAP32[$5 + 8 >> 2] >> 2];
     $11 = $6 + 12 | 0;
     $2 = $9;
     $7 = $12;
     $1 = $5;
     $5 = HEAP32[$6 + 12 >> 2];
     $9 = HEAP32[$5 + 92 >> 2];
     $12 = $9;
     $9 = $9 >> 31;
     $23 = __wasm_i64_mul($12, $9, $42, $38);
     $39 = i64toi32_i32$HIGH_BITS;
     $15 = HEAP32[$5 + 88 >> 2];
     $19 = $15 >> 31;
     $46 = __wasm_i64_mul($15, $19, $40, $36);
     $23 = $23 + $46 | 0;
     $43 = i64toi32_i32$HIGH_BITS + $39 | 0;
     $5 = HEAP32[$5 + 96 >> 2];
     $39 = $5;
     $44 = $5 >> 31;
     $47 = __wasm_i64_mul($5, $44, $41, $37);
     $5 = $23 + $47 | 0;
     $23 = i64toi32_i32$HIGH_BITS + ($23 >>> 0 < $46 >>> 0 ? $43 + 1 | 0 : $43) | 0;
     $23 = $5 >>> 0 < $47 >>> 0 ? $23 + 1 | 0 : $23;
     if ($5 >>> 0 < $26 >>> 0 & ($14 | 0) >= ($23 | 0) | ($14 | 0) > ($23 | 0)) {
      break label$9
     }
     continue;
    }
    break;
   };
   $1 = $5;
   $2 = $9;
   $7 = $12;
  }
  $13 = $7 - (($2 >>> 0 < $8 >>> 0) + $13 | 0) | 0;
  label$13 : {
   $8 = $2 - $8 | 0;
   if (!(!$8 & ($13 | 0) <= 0 | ($13 | 0) < 0)) {
    while (1) {
     $1 = HEAP32[$3 >> 2];
     while (1) {
      label$16 : {
       $6 = (Math_imul($17 - $22 | 0, $34) + Math_imul($24 - $25 | 0, $35) | 0) + Math_imul($16 - $21 | 0, $33) | 0;
       $9 = $6 >> 31;
       if (!$1 | !HEAP32[$1 + 12 >> 2]) {
        break label$16
       }
       $12 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
       if (HEAP32[$12 + 20 >> 2] <= HEAP32[$0 + 132 >> 2]) {
        break label$16
       }
       $2 = HEAP32[$12 + 12 >> 2];
       $7 = HEAP32[$2 + 92 >> 2];
       $14 = $7 - $22 | 0;
       $11 = HEAP32[$2 + 88 >> 2];
       $20 = $11 - $25 | 0;
       $2 = HEAP32[$2 + 96 >> 2];
       $15 = $2 - $21 | 0;
       $5 = (Math_imul($14, $34) + Math_imul($20, $35) | 0) + Math_imul($15, $33) | 0;
       $14 = __wasm_i64_mul($27, $28, $14, $14 >> 31);
       $19 = i64toi32_i32$HIGH_BITS;
       $26 = __wasm_i64_mul($29, $30, $20, $20 >> 31);
       $20 = $26 + $14 | 0;
       $19 = i64toi32_i32$HIGH_BITS + $19 | 0;
       $15 = __wasm_i64_mul($31, $32, $15, $15 >> 31);
       $14 = $15 + $20 | 0;
       $20 = i64toi32_i32$HIGH_BITS + ($20 >>> 0 < $26 >>> 0 ? $19 + 1 | 0 : $19) | 0;
       $20 = $14 >>> 0 < $15 >>> 0 ? $20 + 1 | 0 : $20;
       label$18 : {
        if (!($14 | $20)) {
         if (($5 | 0) < 0) {
          break label$18
         }
         break label$16;
        }
        if (($20 | 0) >= 0) {
         break label$16
        }
        HEAP32[$10 + 32 >> 2] = 0 - $14;
        HEAP32[$10 + 36 >> 2] = 0 - ((($14 | 0) != 0) + $20 | 0);
        $1 = ($5 | 0) > 0;
        HEAP32[$10 + 40 >> 2] = $1 ? -1 : $5 >>> 31 | 0;
        $2 = ($5 | 0) < 0;
        HEAP32[$10 + 24 >> 2] = $1 ? $5 : $2 ? 0 - $5 | 0 : 0;
        $7 = $5 >> 31;
        HEAP32[$10 + 28 >> 2] = $1 ? $7 : $2 ? 0 - ((($5 | 0) != 0) + $7 | 0) | 0 : 0;
        label$20 : {
         if (($6 | 0) > 0) {
          HEAP32[$10 + 16 >> 2] = 1;
          $2 = $6;
          $7 = $9;
          $1 = -1;
          break label$20;
         }
         if (($6 | 0) < 0) {
          HEAP32[$10 + 16 >> 2] = -1;
          $2 = 0 - $6 | 0;
          $7 = 0 - ((($6 | 0) != 0) + $9 | 0) | 0;
          $1 = 1;
          break label$20;
         }
         HEAP32[$10 + 16 >> 2] = 0;
         $2 = 0;
         $7 = 0;
         $1 = 0;
        }
        HEAP32[$10 >> 2] = $2;
        HEAP32[$10 + 4 >> 2] = $7;
        $2 = $8;
        $7 = $13;
        label$23 : {
         if (!!$2 & ($13 | 0) >= 0 | ($13 | 0) > 0) {
          break label$23
         }
         $2 = 0;
         $7 = 0;
         if (($13 | 0) >= 0) {
          break label$23
         }
         HEAP32[$10 + 16 >> 2] = $1;
         $2 = 0 - $8 | 0;
         $7 = 0 - ((($8 | 0) != 0) + $13 | 0) | 0;
        }
        $1 = $7;
        HEAP32[$10 + 8 >> 2] = $2;
        HEAP32[$10 + 12 >> 2] = $1;
        if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($10 + 24 | 0, $10) | 0) < 0) {
         break label$16
        }
        $8 = HEAP32[$12 + 12 >> 2];
        $2 = HEAP32[$8 + 96 >> 2];
        $7 = HEAP32[$8 + 92 >> 2];
        $1 = HEAP32[$3 >> 2];
        $11 = HEAP32[$8 + 88 >> 2];
       }
       $1 = ($1 | 0) == ($18 | 0) ? 0 : $12;
       HEAP32[$3 >> 2] = $1;
       $8 = $17 - $7 | 0;
       $8 = __wasm_i64_mul($27, $28, $8, $8 >> 31);
       $13 = i64toi32_i32$HIGH_BITS;
       $6 = $24 - $11 | 0;
       $5 = __wasm_i64_mul($29, $30, $6, $6 >> 31);
       $6 = $8 + $5 | 0;
       $13 = i64toi32_i32$HIGH_BITS + $13 | 0;
       $8 = $16 - $2 | 0;
       $9 = __wasm_i64_mul($31, $32, $8, $8 >> 31);
       $8 = $6 + $9 | 0;
       $6 = i64toi32_i32$HIGH_BITS + ($5 >>> 0 > $6 >>> 0 ? $13 + 1 | 0 : $13) | 0;
       $13 = $8 >>> 0 < $9 >>> 0 ? $6 + 1 | 0 : $6;
       $25 = $11;
       $22 = $7;
       $21 = $2;
       continue;
      }
      break;
     };
     $1 = HEAP32[$4 >> 2];
     if (!$1 | !HEAP32[$1 + 12 >> 2]) {
      break label$13
     }
     $5 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
     if (HEAP32[$5 + 20 >> 2] <= HEAP32[$0 + 132 >> 2]) {
      break label$13
     }
     $1 = HEAP32[$5 + 12 >> 2];
     $11 = HEAP32[$1 + 92 >> 2];
     $12 = $11 - $17 | 0;
     $2 = $12;
     $14 = $2 >> 31;
     $2 = __wasm_i64_mul($2, $14, $42, $38);
     $7 = i64toi32_i32$HIGH_BITS;
     $20 = HEAP32[$1 + 88 >> 2];
     $17 = $20 - $24 | 0;
     $24 = $17 >> 31;
     $15 = __wasm_i64_mul($17, $24, $40, $36);
     $2 = $2 + $15 | 0;
     $7 = i64toi32_i32$HIGH_BITS + $7 | 0;
     $1 = HEAP32[$1 + 96 >> 2];
     $16 = $1 - $16 | 0;
     $19 = $16 >> 31;
     $26 = __wasm_i64_mul($41, $37, $16, $19);
     if (($2 | 0) != (0 - $26 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($26 | 0) != 0) | 0) | 0) != (($2 >>> 0 < $15 >>> 0 ? $7 + 1 | 0 : $7) | 0)) {
      break label$13
     }
     $2 = $11 - $22 | 0;
     $2 = __wasm_i64_mul($27, $28, $2, $2 >> 31);
     $7 = i64toi32_i32$HIGH_BITS;
     $11 = $20 - $25 | 0;
     $11 = __wasm_i64_mul($29, $30, $11, $11 >> 31);
     $2 = $2 + $11 | 0;
     $7 = i64toi32_i32$HIGH_BITS + $7 | 0;
     $1 = $1 - $21 | 0;
     $20 = __wasm_i64_mul($31, $32, $1, $1 >> 31);
     $1 = $2 + $20 | 0;
     $2 = i64toi32_i32$HIGH_BITS + ($2 >>> 0 < $11 >>> 0 ? $7 + 1 | 0 : $7) | 0;
     $2 = $1 >>> 0 < $20 >>> 0 ? $2 + 1 | 0 : $2;
     $7 = $2;
     if (!$1 & ($2 | 0) <= 0 | ($2 | 0) < 0) {
      break label$13
     }
     $2 = (Math_imul($12, $34) + Math_imul($17, $35) | 0) + Math_imul($16, $33) | 0;
     $12 = __wasm_i64_mul($27, $28, $12, $14);
     $11 = i64toi32_i32$HIGH_BITS;
     $14 = __wasm_i64_mul($29, $30, $17, $24);
     $17 = $14 + $12 | 0;
     $24 = i64toi32_i32$HIGH_BITS + $11 | 0;
     $16 = __wasm_i64_mul($31, $32, $16, $19);
     $12 = $16 + $17 | 0;
     $17 = i64toi32_i32$HIGH_BITS + ($14 >>> 0 > $17 >>> 0 ? $24 + 1 | 0 : $24) | 0;
     $16 = $12 >>> 0 < $16 >>> 0 ? $17 + 1 | 0 : $17;
     label$24 : {
      if (!($12 | $16)) {
       if (($2 | 0) < 0) {
        break label$24
       }
       break label$13;
      }
      if (($16 | 0) >= 0) {
       break label$13
      }
      HEAP32[$10 + 32 >> 2] = 0 - $12;
      HEAP32[$10 + 36 >> 2] = 0 - ((($12 | 0) != 0) + $16 | 0);
      $12 = ($2 | 0) > 0;
      HEAP32[$10 + 40 >> 2] = $12 ? -1 : $2 >>> 31 | 0;
      $16 = ($2 | 0) < 0;
      HEAP32[$10 + 24 >> 2] = $12 ? $2 : $16 ? 0 - $2 | 0 : 0;
      $17 = $2 >> 31;
      HEAP32[$10 + 28 >> 2] = $12 ? $17 : $16 ? 0 - ((($2 | 0) != 0) + $17 | 0) | 0 : 0;
      label$26 : {
       if (($6 | 0) > 0) {
        HEAP32[$10 + 16 >> 2] = 1;
        $12 = -1;
        break label$26;
       }
       if (($6 | 0) < 0) {
        HEAP32[$10 + 16 >> 2] = -1;
        $2 = $6;
        $6 = 0 - $2 | 0;
        $9 = 0 - ((($2 | 0) != 0) + $9 | 0) | 0;
        $12 = 1;
        break label$26;
       }
       HEAP32[$10 + 16 >> 2] = 0;
       $6 = 0;
       $9 = 0;
       $12 = 0;
      }
      HEAP32[$10 >> 2] = $6;
      HEAP32[$10 + 4 >> 2] = $9;
      label$29 : {
       if (!(!$8 & ($13 | 0) <= 0 | ($13 | 0) < 0)) {
        $2 = $8;
        $6 = $13;
        break label$29;
       }
       $2 = 0;
       $6 = 0;
       if (($13 | 0) >= 0) {
        break label$29
       }
       HEAP32[$10 + 16 >> 2] = $12;
       $2 = 0 - $8 | 0;
       $6 = 0 - ((($8 | 0) != 0) + $13 | 0) | 0;
      }
      $8 = $6;
      HEAP32[$10 + 8 >> 2] = $2;
      HEAP32[$10 + 12 >> 2] = $8;
      if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($10 + 24 | 0, $10) | 0) <= 0) {
       break label$13
      }
     }
     HEAP32[$4 >> 2] = $5;
     $2 = HEAP32[$5 + 12 >> 2];
     $16 = HEAP32[$2 + 96 >> 2];
     $17 = HEAP32[$2 + 92 >> 2];
     $24 = HEAP32[$2 + 88 >> 2];
     $8 = $1;
     $13 = $7;
     continue;
    }
   }
   if (($13 | 0) >= 0) {
    break label$13
   }
   while (1) {
    $6 = (Math_imul($17 - $22 | 0, $34) + Math_imul($24 - $25 | 0, $35) | 0) + Math_imul($16 - $21 | 0, $33) | 0;
    $9 = $6 >> 31;
    label$32 : {
     if (!$1 | !HEAP32[$1 + 12 >> 2]) {
      break label$32
     }
     $11 = HEAP32[HEAP32[$1 + 4 >> 2] + 8 >> 2];
     if (HEAP32[$11 + 20 >> 2] <= HEAP32[$0 + 132 >> 2]) {
      break label$32
     }
     $5 = HEAP32[$11 + 12 >> 2];
     $7 = HEAP32[$5 + 92 >> 2];
     $14 = $7 - $17 | 0;
     $2 = HEAP32[$5 + 88 >> 2];
     $18 = $2 - $24 | 0;
     $12 = HEAP32[$5 + 96 >> 2];
     $15 = $12 - $16 | 0;
     $5 = (Math_imul($14, $34) + Math_imul($18, $35) | 0) + Math_imul($15, $33) | 0;
     $14 = __wasm_i64_mul($27, $28, $14, $14 >> 31);
     $19 = i64toi32_i32$HIGH_BITS;
     $26 = __wasm_i64_mul($29, $30, $18, $18 >> 31);
     $18 = $26 + $14 | 0;
     $19 = i64toi32_i32$HIGH_BITS + $19 | 0;
     $15 = __wasm_i64_mul($31, $32, $15, $15 >> 31);
     $14 = $15 + $18 | 0;
     $18 = i64toi32_i32$HIGH_BITS + ($18 >>> 0 < $26 >>> 0 ? $19 + 1 | 0 : $19) | 0;
     $18 = $14 >>> 0 < $15 >>> 0 ? $18 + 1 | 0 : $18;
     label$33 : {
      if (!($14 | $18)) {
       if (($5 | 0) > 0) {
        break label$33
       }
       break label$32;
      }
      if (($18 | 0) >= 0) {
       break label$32
      }
      HEAP32[$10 + 32 >> 2] = 0 - $14;
      HEAP32[$10 + 36 >> 2] = 0 - ((($14 | 0) != 0) + $18 | 0);
      $1 = ($5 | 0) > 0;
      HEAP32[$10 + 40 >> 2] = $1 ? -1 : $5 >>> 31 | 0;
      $2 = ($5 | 0) < 0;
      HEAP32[$10 + 24 >> 2] = $1 ? $5 : $2 ? 0 - $5 | 0 : 0;
      $7 = $5 >> 31;
      HEAP32[$10 + 28 >> 2] = $1 ? $7 : $2 ? 0 - ((($5 | 0) != 0) + $7 | 0) | 0 : 0;
      label$35 : {
       if (($6 | 0) > 0) {
        HEAP32[$10 + 16 >> 2] = 1;
        $2 = $6;
        $7 = $9;
        $1 = -1;
        break label$35;
       }
       if (($6 | 0) < 0) {
        HEAP32[$10 + 16 >> 2] = -1;
        $2 = 0 - $6 | 0;
        $7 = 0 - ((($6 | 0) != 0) + $9 | 0) | 0;
        $1 = 1;
        break label$35;
       }
       HEAP32[$10 + 16 >> 2] = 0;
       $2 = 0;
       $7 = 0;
       $1 = 0;
      }
      HEAP32[$10 >> 2] = $2;
      HEAP32[$10 + 4 >> 2] = $7;
      $2 = $8;
      $7 = $13;
      label$38 : {
       if (!!$2 & ($13 | 0) >= 0 | ($13 | 0) > 0) {
        break label$38
       }
       $2 = 0;
       $7 = 0;
       if (($13 | 0) >= 0) {
        break label$38
       }
       HEAP32[$10 + 16 >> 2] = $1;
       $2 = 0 - $8 | 0;
       $7 = 0 - ((($8 | 0) != 0) + $13 | 0) | 0;
      }
      $1 = $7;
      HEAP32[$10 + 8 >> 2] = $2;
      HEAP32[$10 + 12 >> 2] = $1;
      if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($10 + 24 | 0, $10) | 0) > 0) {
       break label$32
      }
      $2 = HEAP32[$11 + 12 >> 2];
      $12 = HEAP32[$2 + 96 >> 2];
      $7 = HEAP32[$2 + 92 >> 2];
      $1 = HEAP32[$4 >> 2];
      $2 = HEAP32[$2 + 88 >> 2];
     }
     $1 = ($1 | 0) == ($20 | 0) ? 0 : $11;
     HEAP32[$4 >> 2] = $1;
     $8 = $7 - $22 | 0;
     $8 = __wasm_i64_mul($27, $28, $8, $8 >> 31);
     $13 = i64toi32_i32$HIGH_BITS;
     $6 = $2 - $25 | 0;
     $5 = __wasm_i64_mul($29, $30, $6, $6 >> 31);
     $6 = $8 + $5 | 0;
     $13 = i64toi32_i32$HIGH_BITS + $13 | 0;
     $8 = $12 - $21 | 0;
     $9 = __wasm_i64_mul($31, $32, $8, $8 >> 31);
     $8 = $6 + $9 | 0;
     $6 = i64toi32_i32$HIGH_BITS + ($5 >>> 0 > $6 >>> 0 ? $13 + 1 | 0 : $13) | 0;
     $13 = $8 >>> 0 < $9 >>> 0 ? $6 + 1 | 0 : $6;
     $24 = $2;
     $17 = $7;
     $16 = $12;
     continue;
    }
    $1 = HEAP32[$3 >> 2];
    if (!$1 | !HEAP32[$1 + 12 >> 2]) {
     break label$13
    }
    $12 = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
    if (HEAP32[$12 + 20 >> 2] <= HEAP32[$0 + 132 >> 2]) {
     break label$13
    }
    $1 = HEAP32[$12 + 12 >> 2];
    $11 = HEAP32[$1 + 92 >> 2];
    $2 = $11 - $22 | 0;
    $14 = $2 >> 31;
    $7 = __wasm_i64_mul($2, $14, $42, $38);
    $5 = i64toi32_i32$HIGH_BITS;
    $18 = HEAP32[$1 + 88 >> 2];
    $22 = $18 - $25 | 0;
    $25 = $22 >> 31;
    $15 = __wasm_i64_mul($22, $25, $40, $36);
    $7 = $7 + $15 | 0;
    $5 = i64toi32_i32$HIGH_BITS + $5 | 0;
    $19 = HEAP32[$1 + 96 >> 2];
    $21 = $19 - $21 | 0;
    $1 = $21;
    $26 = $1 >> 31;
    $1 = __wasm_i64_mul($41, $37, $1, $26);
    if (($7 | 0) != (0 - $1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($1 | 0) != 0) | 0) | 0) != (($7 >>> 0 < $15 >>> 0 ? $5 + 1 | 0 : $5) | 0)) {
     break label$13
    }
    $1 = $17 - $11 | 0;
    $1 = __wasm_i64_mul($27, $28, $1, $1 >> 31);
    $7 = i64toi32_i32$HIGH_BITS;
    $5 = $24 - $18 | 0;
    $11 = __wasm_i64_mul($29, $30, $5, $5 >> 31);
    $1 = $1 + $11 | 0;
    $5 = i64toi32_i32$HIGH_BITS + $7 | 0;
    $7 = $16 - $19 | 0;
    $18 = __wasm_i64_mul($31, $32, $7, $7 >> 31);
    $7 = $1 + $18 | 0;
    $1 = i64toi32_i32$HIGH_BITS + ($1 >>> 0 < $11 >>> 0 ? $5 + 1 | 0 : $5) | 0;
    $1 = $7 >>> 0 < $18 >>> 0 ? $1 + 1 | 0 : $1;
    $5 = $1;
    if (($1 | 0) >= 0) {
     break label$13
    }
    $1 = (Math_imul($2, $34) + Math_imul($22, $35) | 0) + Math_imul($21, $33) | 0;
    $2 = __wasm_i64_mul($27, $28, $2, $14);
    $11 = i64toi32_i32$HIGH_BITS;
    $14 = __wasm_i64_mul($29, $30, $22, $25);
    $22 = $14 + $2 | 0;
    $25 = i64toi32_i32$HIGH_BITS + $11 | 0;
    $21 = __wasm_i64_mul($31, $32, $21, $26);
    $2 = $21 + $22 | 0;
    $22 = i64toi32_i32$HIGH_BITS + ($14 >>> 0 > $22 >>> 0 ? $25 + 1 | 0 : $25) | 0;
    $21 = $2 >>> 0 < $21 >>> 0 ? $22 + 1 | 0 : $22;
    label$39 : {
     if (!($2 | $21)) {
      if (($1 | 0) <= 0) {
       break label$13
      }
      break label$39;
     }
     if (($21 | 0) >= 0) {
      break label$13
     }
     HEAP32[$10 + 32 >> 2] = 0 - $2;
     HEAP32[$10 + 36 >> 2] = 0 - ((($2 | 0) != 0) + $21 | 0);
     $2 = ($1 | 0) > 0;
     HEAP32[$10 + 40 >> 2] = $2 ? -1 : $1 >>> 31 | 0;
     $21 = ($1 | 0) < 0;
     HEAP32[$10 + 24 >> 2] = $2 ? $1 : $21 ? 0 - $1 | 0 : 0;
     $22 = $1 >> 31;
     HEAP32[$10 + 28 >> 2] = $2 ? $22 : $21 ? 0 - ((($1 | 0) != 0) + $22 | 0) | 0 : 0;
     label$41 : {
      if (($6 | 0) > 0) {
       HEAP32[$10 + 16 >> 2] = 1;
       $1 = -1;
       break label$41;
      }
      if (($6 | 0) < 0) {
       HEAP32[$10 + 16 >> 2] = -1;
       $1 = $6;
       $6 = 0 - $1 | 0;
       $9 = 0 - ((($1 | 0) != 0) + $9 | 0) | 0;
       $1 = 1;
       break label$41;
      }
      HEAP32[$10 + 16 >> 2] = 0;
      $6 = 0;
      $9 = 0;
      $1 = 0;
     }
     HEAP32[$10 >> 2] = $6;
     HEAP32[$10 + 4 >> 2] = $9;
     label$44 : {
      if (!(!$8 & ($13 | 0) <= 0 | ($13 | 0) < 0)) {
       $2 = $8;
       $6 = $13;
       break label$44;
      }
      $2 = 0;
      $6 = 0;
      if (($13 | 0) >= 0) {
       break label$44
      }
      HEAP32[$10 + 16 >> 2] = $1;
      $2 = 0 - $8 | 0;
      $6 = 0 - ((($8 | 0) != 0) + $13 | 0) | 0;
     }
     $1 = $6;
     HEAP32[$10 + 8 >> 2] = $2;
     HEAP32[$10 + 12 >> 2] = $1;
     if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($10 + 24 | 0, $10) | 0) >= 0) {
      break label$13
     }
    }
    HEAP32[$3 >> 2] = $12;
    $2 = HEAP32[$12 + 12 >> 2];
    $21 = HEAP32[$2 + 96 >> 2];
    $22 = HEAP32[$2 + 92 >> 2];
    $1 = HEAP32[$4 >> 2];
    $25 = HEAP32[$2 + 88 >> 2];
    $8 = $7;
    $13 = $5;
    continue;
   };
  }
  __stack_pointer = $10 + 48 | 0;
 }
 
 function btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
  $11 = __stack_pointer - 48 | 0;
  __stack_pointer = $11;
  $10 = HEAP32[$2 + 8 >> 2];
  if ($10) {
   $15 = $10;
   while (1) {
    if (HEAP32[$15 + 20 >> 2] > HEAP32[$0 + 132 >> 2]) {
     HEAP32[$11 + 44 >> 2] = -1;
     $10 = HEAP32[$15 + 12 >> 2];
     $8 = HEAP32[$10 + 96 >> 2] - HEAP32[$2 + 96 >> 2] | 0;
     HEAP32[$11 + 40 >> 2] = $8;
     $9 = HEAP32[$10 + 92 >> 2] - HEAP32[$2 + 92 >> 2] | 0;
     HEAP32[$11 + 36 >> 2] = $9;
     $13 = HEAP32[$10 + 88 >> 2] - HEAP32[$2 + 88 >> 2] | 0;
     HEAP32[$11 + 32 >> 2] = $13;
     $16 = $9 >> 31;
     $10 = __wasm_i64_mul(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 12 >> 2], $9, $16);
     $12 = i64toi32_i32$HIGH_BITS;
     $17 = $13 >> 31;
     $18 = __wasm_i64_mul(HEAP32[$4 >> 2], HEAP32[$4 + 4 >> 2], $13, $17);
     $14 = $10 + $18 | 0;
     $12 = i64toi32_i32$HIGH_BITS + $12 | 0;
     $19 = $8 >> 31;
     $20 = __wasm_i64_mul(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2], $8, $19);
     $10 = $14 + $20 | 0;
     $14 = i64toi32_i32$HIGH_BITS + ($14 >>> 0 < $18 >>> 0 ? $12 + 1 | 0 : $12) | 0;
     $14 = $10 >>> 0 < $20 >>> 0 ? $14 + 1 | 0 : $14;
     $9 = __wasm_i64_mul(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], $9, $16);
     $12 = i64toi32_i32$HIGH_BITS;
     $16 = __wasm_i64_mul(HEAP32[$5 >> 2], HEAP32[$5 + 4 >> 2], $13, $17);
     $9 = $16 + $9 | 0;
     $13 = i64toi32_i32$HIGH_BITS + $12 | 0;
     $12 = __wasm_i64_mul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], $8, $19);
     $8 = $12 + $9 | 0;
     $9 = i64toi32_i32$HIGH_BITS + ($9 >>> 0 < $16 >>> 0 ? $13 + 1 | 0 : $13) | 0;
     $9 = $8 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
     $13 = $9;
     label$5 : {
      if (!(!$8 & ($9 | 0) <= 0 | ($9 | 0) < 0)) {
       HEAP32[$11 + 24 >> 2] = 1;
       $9 = -1;
       $12 = 0;
       break label$5;
      }
      if (($13 | 0) < 0) {
       HEAP32[$11 + 24 >> 2] = -1;
       $9 = $8;
       $8 = 0 - $8 | 0;
       $13 = 0 - ((($9 | 0) != 0) + $13 | 0) | 0;
       $9 = 1;
       $12 = 0;
       break label$5;
      }
      $9 = 0;
      HEAP32[$11 + 24 >> 2] = 0;
      $8 = 0;
      $13 = 0;
      $12 = 1;
     }
     HEAP32[$11 + 8 >> 2] = $8;
     HEAP32[$11 + 12 >> 2] = $13;
     label$8 : {
      label$9 : {
       label$10 : {
        if (!(!!$10 & ($14 | 0) >= 0 | ($14 | 0) > 0)) {
         if (($14 | 0) >= 0) {
          break label$10
         }
         HEAP32[$11 + 24 >> 2] = $9;
         $8 = $10;
         $10 = 0 - $8 | 0;
         $14 = 0 - ((($8 | 0) != 0) + $14 | 0) | 0;
        }
        HEAP32[$11 + 16 >> 2] = $10;
        HEAP32[$11 + 20 >> 2] = $14;
        break label$9;
       }
       HEAP32[$11 + 16 >> 2] = 0;
       HEAP32[$11 + 20 >> 2] = 0;
       if ($12) {
        break label$8
       }
      }
      if (!$7) {
       $7 = HEAP32[$11 + 12 >> 2];
       HEAP32[$6 >> 2] = HEAP32[$11 + 8 >> 2];
       HEAP32[$6 + 4 >> 2] = $7;
       $7 = $11 + 8 | 0;
       HEAP32[$6 + 16 >> 2] = HEAP32[$7 + 16 >> 2];
       $7 = $7 + 8 | 0;
       $10 = HEAP32[$7 + 4 >> 2];
       $8 = $6 + 8 | 0;
       HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$8 + 4 >> 2] = $10;
       $7 = $15;
       break label$8;
      }
      $10 = btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($11 + 8 | 0, $6);
      if (($10 | 0) < 0) {
       $7 = HEAP32[$11 + 12 >> 2];
       HEAP32[$6 >> 2] = HEAP32[$11 + 8 >> 2];
       HEAP32[$6 + 4 >> 2] = $7;
       $7 = $11 + 8 | 0;
       HEAP32[$6 + 16 >> 2] = HEAP32[$7 + 16 >> 2];
       $7 = $7 + 8 | 0;
       $10 = HEAP32[$7 + 4 >> 2];
       $8 = $6 + 8 | 0;
       HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$8 + 4 >> 2] = $10;
       $7 = $15;
       break label$8;
      }
      if ($10) {
       break label$8
      }
      $24 = $7;
      $10 = $11 + 32 | 0;
      $8 = HEAP32[$7 + 4 >> 2];
      __inlined_func$btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29 : {
       label$11 : {
        if (($15 | 0) == HEAP32[$7 >> 2]) {
         $9 = 2;
         if (($8 | 0) != ($15 | 0)) {
          break label$11
         }
         $8 = HEAP32[$15 + 12 >> 2];
         $9 = HEAP32[HEAP32[$15 + 8 >> 2] + 12 >> 2];
         $14 = HEAP32[$9 + 96 >> 2];
         $13 = HEAP32[$8 + 96 >> 2] - $14 | 0;
         $7 = HEAP32[$7 + 12 >> 2];
         $12 = HEAP32[$9 + 92 >> 2];
         $16 = HEAP32[$7 + 92 >> 2] - $12 | 0;
         $12 = HEAP32[$8 + 92 >> 2] - $12 | 0;
         $14 = HEAP32[$7 + 96 >> 2] - $14 | 0;
         $17 = Math_imul($13, $16) - Math_imul($12, $14) | 0;
         $21 = $17;
         $23 = $17 >> 31;
         $17 = HEAP32[$3 + 8 >> 2];
         $18 = HEAP32[$10 + 4 >> 2];
         $19 = HEAP32[$3 + 4 >> 2];
         $20 = HEAP32[$10 + 8 >> 2];
         $22 = Math_imul($17, $18) - Math_imul($19, $20) | 0;
         $22 = __wasm_i64_mul($21, $23, $22, $22 >> 31);
         $23 = i64toi32_i32$HIGH_BITS;
         $21 = HEAP32[$7 + 88 >> 2];
         $7 = HEAP32[$9 + 88 >> 2];
         $9 = $21 - $7 | 0;
         $8 = HEAP32[$8 + 88 >> 2] - $7 | 0;
         $7 = Math_imul($12, $9) - Math_imul($8, $16) | 0;
         $21 = $7;
         $25 = $7 >> 31;
         $12 = HEAP32[$10 >> 2];
         $16 = HEAP32[$3 >> 2];
         $7 = Math_imul($12, $19) - Math_imul($16, $18) | 0;
         $18 = __wasm_i64_mul($21, $25, $7, $7 >> 31);
         $7 = $18 + $22 | 0;
         $10 = i64toi32_i32$HIGH_BITS + $23 | 0;
         $8 = Math_imul($8, $14) - Math_imul($9, $13) | 0;
         $9 = $8;
         $13 = $8 >> 31;
         $8 = Math_imul($16, $20) - Math_imul($12, $17) | 0;
         $8 = __wasm_i64_mul($9, $13, $8, $8 >> 31);
         $9 = $7 + $8 | 0;
         $7 = i64toi32_i32$HIGH_BITS + ($7 >>> 0 < $18 >>> 0 ? $10 + 1 | 0 : $10) | 0;
         $7 = $8 >>> 0 > $9 >>> 0 ? $7 + 1 | 0 : $7;
         $9 = !!$9 & ($7 | 0) >= 0 | ($7 | 0) > 0 ? 2 : 1;
         break __inlined_func$btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29;
        }
        $9 = ($8 | 0) == ($15 | 0);
       }
      }
      $7 = ($9 | 0) != 2 ^ $1 ? $15 : $24;
     }
     $10 = HEAP32[$2 + 8 >> 2];
    }
    $15 = HEAP32[$15 >> 2];
    if (($15 | 0) != ($10 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $11 + 48 | 0;
  return $7;
 }
 
 function void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  while (1) {
   $14 = $2;
   $8 = HEAP32[$0 + 12 >> 2];
   $6 = $8 + (($2 + $3 | 0) / 2 << 4) | 0;
   $15 = HEAP32[$6 + 8 >> 2];
   $11 = HEAP32[$6 + 4 >> 2];
   $12 = HEAP32[$6 >> 2];
   $6 = $3;
   while (1) {
    $4 = ($2 << 4) + $8 | 0;
    while (1) {
     label$3 : {
      $5 = HEAP32[$4 + 4 >> 2];
      label$5 : {
       if (($5 | 0) < ($11 | 0)) {
        break label$5
       }
       if (($5 | 0) != ($11 | 0)) {
        break label$3
       }
       $5 = HEAP32[$4 >> 2];
       if (($5 | 0) < ($12 | 0)) {
        break label$5
       }
       if (($5 | 0) != ($12 | 0) | HEAP32[$4 + 8 >> 2] >= ($15 | 0)) {
        break label$3
       }
      }
      $4 = $4 + 16 | 0;
      $2 = $2 + 1 | 0;
      continue;
     }
     break;
    };
    $13 = $6 << 4;
    while (1) {
     label$6 : {
      $5 = $8 + $13 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      label$8 : {
       if (($7 | 0) > ($11 | 0)) {
        break label$8
       }
       if (($7 | 0) != ($11 | 0)) {
        break label$6
       }
       $7 = HEAP32[$5 >> 2];
       if (($7 | 0) > ($12 | 0)) {
        break label$8
       }
       if (($7 | 0) != ($12 | 0) | HEAP32[$5 + 8 >> 2] <= ($15 | 0)) {
        break label$6
       }
      }
      $13 = $13 - 16 | 0;
      $6 = $6 - 1 | 0;
      continue;
     }
     break;
    };
    if (($2 | 0) <= ($6 | 0)) {
     $7 = $4 + 8 | 0;
     $10 = HEAP32[$7 + 4 >> 2];
     $8 = $9 + 8 | 0;
     HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$8 + 4 >> 2] = $10;
     $10 = HEAP32[$4 + 4 >> 2];
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $10;
     $10 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = $10;
     $4 = $5 + 8 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$7 + 4 >> 2] = $5;
     $5 = HEAP32[$9 + 4 >> 2];
     $4 = HEAP32[$0 + 12 >> 2] + $13 | 0;
     HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $5 = HEAP32[$8 + 4 >> 2];
     $4 = $4 + 8 | 0;
     HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $6 = $6 - 1 | 0;
     $2 = $2 + 1 | 0;
    }
    if (($2 | 0) <= ($6 | 0)) {
     $8 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($6 | 0) > ($14 | 0)) {
    void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $14, $6)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
  __stack_pointer = $9 + 16 | 0;
 }
 
 function btConvexHullInternal__Int128__toScalar_28_29_20const($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[$0 + 8 >> 2];
  $4 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (($4 | 0) >= 0) {
    $5 = (+($2 >>> 0) + +($4 >>> 0) * 4294967296.0) * 18446744073709551615.0 + (+HEAPU32[$0 >> 2] + +HEAPU32[$0 + 4 >> 2] * 4294967296.0);
    break label$1;
   }
   $3 = HEAP32[$0 + 4 >> 2];
   $0 = HEAP32[$0 >> 2];
   HEAP32[$1 >> 2] = 0 - $0;
   HEAP32[$1 + 4 >> 2] = 0 - ($3 + (($0 | 0) != 0) | 0);
   $0 = !($0 | $3);
   $3 = $2 ^ -1;
   $2 = $0 + $3 | 0;
   $0 = $4 ^ -1;
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = $2 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
   $5 = -btConvexHullInternal__Int128__toScalar_28_29_20const($1);
  }
  __stack_pointer = $1 + 16 | 0;
  return $5;
 }
 
 function btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20double_2c_20double_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10 = __stack_pointer - 192 | 0;
  __stack_pointer = $10;
  label$1 : {
   if (($2 | 0) <= 0) {
    $1 = HEAP32[$0 + 12 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 16 | 0])) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $1 = HEAP32[$0 + 32 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 36 | 0])) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP8[$0 + 36 | 0] = 1;
    $1 = $0 + 24 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = HEAP32[$0 + 52 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 56 | 0])) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP32[$0 + 52 >> 2] = 0;
    HEAP8[$0 + 56 | 0] = 1;
    $0 = $0 + 44 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    break label$1;
   }
   HEAP8[$10 + 160 | 0] = 1;
   $4 = $10 + 136 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 256;
   $4 = $10 + 120 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 256;
   $4 = $10 + 104 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 256;
   HEAP32[$10 + 156 >> 2] = 0;
   $4 = $10 + 148 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$10 + 128 >> 2] = 0;
   HEAP32[$10 + 132 >> 2] = 0;
   HEAP32[$10 + 112 >> 2] = 0;
   HEAP32[$10 + 116 >> 2] = 0;
   HEAP32[$10 + 96 >> 2] = 0;
   HEAP32[$10 + 100 >> 2] = 0;
   $6 = $10 + 32 | 0;
   $8 = __stack_pointer + -64 | 0;
   __stack_pointer = $8;
   $4 = $2;
   label$10 : {
    if (($2 | 0) > 0) {
     $15 = -1.e+30;
     $19 = 1.e+30;
     $3 = $4;
     $2 = $1;
     $20 = 1.e+30;
     $23 = 1.e+30;
     $24 = -1.e+30;
     $25 = -1.e+30;
     while (1) {
      $16 = HEAPF64[$2 + 16 >> 3];
      $15 = $15 < $16 ? $16 : $15;
      $22 = HEAPF64[$2 + 8 >> 3];
      $24 = $24 < $22 ? $22 : $24;
      $19 = $19 > $16 ? $16 : $19;
      $20 = $20 > $22 ? $22 : $20;
      $16 = HEAPF64[$2 >> 3];
      $25 = $16 > $25 ? $16 : $25;
      $23 = $16 < $23 ? $16 : $23;
      $2 = $2 + 32 | 0;
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
      break;
     };
     break label$10;
    }
    $23 = 1.e+30;
    $25 = -1.e+30;
    $24 = -1.e+30;
    $15 = -1.e+30;
    $20 = 1.e+30;
    $19 = 1.e+30;
   }
   $16 = $25 - $23;
   $22 = $24 - $20;
   $3 = $16 < $22;
   $28 = $15 - $19;
   $2 = $28 > ($3 ? $22 : $16) ? 2 : $3;
   HEAP32[$6 + 144 >> 2] = $2;
   $3 = ($3 ? $16 : $22) < $28 ? !$3 : 2;
   if (($3 | 0) == ($2 | 0)) {
    $3 = ($2 + 1 >>> 0) % 3 | 0
   }
   HEAP32[$6 + 136 >> 2] = $3;
   HEAP32[$6 + 24 >> 2] = 0;
   HEAP32[$6 + 28 >> 2] = 0;
   $5 = $6 + 56 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   $3 = $2 + $3 | 0;
   HEAP32[$6 + 140 >> 2] = 3 - $3;
   HEAPF64[$6 + 48 >> 3] = ($15 + $19) * .5;
   HEAPF64[$6 + 40 >> 3] = ($24 + $20) * .5;
   HEAPF64[$6 + 32 >> 3] = ($25 + $23) * .5;
   $15 = $28 * 9.788566953797964e-05;
   $2 = ($2 | 0) == (((4 - $3 & 255) >>> 0) % 3 | 0);
   $15 = $2 ? $15 : -$15;
   HEAPF64[$6 + 16 >> 3] = $15;
   $19 = $22 * 9.788566953797964e-05;
   $19 = $2 ? $19 : -$19;
   HEAPF64[$6 + 8 >> 3] = $19;
   $20 = $16 * 9.788566953797964e-05;
   $20 = $2 ? $20 : -$20;
   HEAPF64[$6 >> 3] = $20;
   HEAP32[$8 + 48 >> 2] = 0;
   HEAP32[$8 + 52 >> 2] = 0;
   HEAP8[$8 + 56 | 0] = 1;
   label$8 : {
    label$101 : {
     if (($4 | 0) > 0) {
      $15 = $15 != 0.0 ? 1.0 / $15 : $15;
      $19 = $19 != 0.0 ? 1.0 / $19 : $19;
      $20 = $20 != 0.0 ? 1.0 / $20 : $20;
      (wasm2js_i32$0 = $8, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 4)), HEAP32[wasm2js_i32$0 + 52 >> 2] = wasm2js_i32$1;
      HEAP8[$8 + 56 | 0] = 1;
      HEAP32[$8 + 48 >> 2] = $4;
      HEAP32[$8 + 44 >> 2] = $4;
      break label$101;
     }
     HEAP32[$8 + 44 >> 2] = $4;
     break label$8;
    }
    if (($4 | 0) <= 0) {
     break label$8
    }
    $2 = HEAP32[$8 + 52 >> 2] + 8 | 0;
    $3 = $8 + 8 | 0;
    $5 = $3 + (HEAP32[$6 + 136 >> 2] << 3) | 0;
    $7 = (HEAP32[$6 + 144 >> 2] << 3) + $3 | 0;
    $14 = (HEAP32[$6 + 140 >> 2] << 3) + $3 | 0;
    $23 = HEAPF64[$6 + 48 >> 3];
    $24 = HEAPF64[$6 + 40 >> 3];
    $25 = HEAPF64[$6 + 32 >> 3];
    $3 = 0;
    while (1) {
     HEAP32[$2 + 4 >> 2] = $3;
     HEAP32[$8 + 32 >> 2] = 0;
     HEAP32[$8 + 36 >> 2] = 0;
     HEAPF64[$8 + 8 >> 3] = $20 * (HEAPF64[$1 >> 3] - $25);
     HEAPF64[$8 + 24 >> 3] = $15 * (HEAPF64[$1 + 16 >> 3] - $23);
     HEAPF64[$8 + 16 >> 3] = $19 * (HEAPF64[$1 + 8 >> 3] - $24);
     $11 = $2 - 8 | 0;
     $16 = HEAPF64[$14 >> 3];
     label$20 : {
      if (Math_abs($16) < 2147483648.0) {
       $17 = ~~$16;
       break label$20;
      }
      $17 = -2147483648;
     }
     HEAP32[$11 >> 2] = $17;
     $11 = $2 - 4 | 0;
     $16 = HEAPF64[$7 >> 3];
     label$22 : {
      if (Math_abs($16) < 2147483648.0) {
       $17 = ~~$16;
       break label$22;
      }
      $17 = -2147483648;
     }
     HEAP32[$11 >> 2] = $17;
     $16 = HEAPF64[$5 >> 3];
     label$24 : {
      if (Math_abs($16) < 2147483648.0) {
       $17 = ~~$16;
       break label$24;
      }
      $17 = -2147483648;
     }
     HEAP32[$2 >> 2] = $17;
     $2 = $2 + 16 | 0;
     $1 = $1 + 32 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
    if (($4 | 0) < 2) {
     break label$8
    }
    void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($8 + 40 | 0, $8 + 8 | 0, 0, $4 - 1 | 0);
   }
   HEAP32[$6 + 76 >> 2] = $4;
   HEAP32[$6 + 72 >> 2] = 0;
   HEAP32[$6 + 68 >> 2] = HEAP32[$6 + 64 >> 2];
   $2 = HEAP32[$6 + 116 >> 2];
   label$26 : {
    if (($2 | 0) >= ($4 | 0)) {
     break label$26
    }
    if (($4 | 0) > HEAP32[$6 + 120 >> 2]) {
     label$28 : {
      if (!$4) {
       $7 = 0;
       $1 = $2;
       break label$28;
      }
      $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
      $1 = HEAP32[$6 + 116 >> 2];
     }
     label$30 : {
      if (($1 | 0) <= 0) {
       break label$30
      }
      $3 = $1 & 3;
      if ($1 - 1 >>> 0 >= 3) {
       $14 = $1 & -4;
       $1 = 0;
       while (1) {
        $5 = $1 + $7 | 0;
        HEAP32[$5 >> 2] = HEAP32[HEAP32[$6 + 124 >> 2] + $1 >> 2];
        HEAP32[$5 + 4 >> 2] = HEAP32[(HEAP32[$6 + 124 >> 2] + $1 | 0) + 4 >> 2];
        HEAP32[$5 + 8 >> 2] = HEAP32[(HEAP32[$6 + 124 >> 2] + $1 | 0) + 8 >> 2];
        HEAP32[$5 + 12 >> 2] = HEAP32[(HEAP32[$6 + 124 >> 2] + $1 | 0) + 12 >> 2];
        $1 = $1 + 16 | 0;
        $18 = $18 + 4 | 0;
        if (($14 | 0) != ($18 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$3) {
       break label$30
      }
      $1 = $18 << 2;
      while (1) {
       HEAP32[$1 + $7 >> 2] = HEAP32[HEAP32[$6 + 124 >> 2] + $1 >> 2];
       $1 = $1 + 4 | 0;
       $3 = $3 - 1 | 0;
       if ($3) {
        continue
       }
       break;
      };
     }
     $1 = HEAP32[$6 + 124 >> 2];
     if (!(!$1 | !HEAPU8[$6 + 128 | 0])) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP32[$6 + 124 >> 2] = $7;
     HEAP8[$6 + 128 | 0] = 1;
     HEAP32[$6 + 120 >> 2] = $4;
    }
    $3 = ($2 ^ -1) + $4 | 0;
    $5 = $4 - $2 & 3;
    if ($5) {
     $1 = $2 << 2;
     while (1) {
      HEAP32[HEAP32[$6 + 124 >> 2] + $1 >> 2] = 0;
      $1 = $1 + 4 | 0;
      $2 = $2 + 1 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    if ($3 >>> 0 < 3) {
     break label$26
    }
    $1 = $2 << 2;
    $2 = $4 - $2 | 0;
    while (1) {
     HEAP32[HEAP32[$6 + 124 >> 2] + $1 >> 2] = 0;
     HEAP32[(HEAP32[$6 + 124 >> 2] + $1 | 0) + 4 >> 2] = 0;
     HEAP32[(HEAP32[$6 + 124 >> 2] + $1 | 0) + 8 >> 2] = 0;
     HEAP32[(HEAP32[$6 + 124 >> 2] + $1 | 0) + 12 >> 2] = 0;
     $1 = $1 + 16 | 0;
     $2 = $2 - 4 | 0;
     if ($2) {
      continue
     }
     break;
    };
   }
   HEAP32[$6 + 116 >> 2] = $4;
   if (($4 | 0) > 0) {
    while (1) {
     $5 = HEAP32[$6 + 72 >> 2];
     label$40 : {
      if ($5) {
       break label$40
      }
      $1 = HEAP32[$6 + 68 >> 2];
      label$41 : {
       if ($1) {
        HEAP32[$6 + 68 >> 2] = HEAP32[$1 + 8 >> 2];
        break label$41;
       }
       $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12);
       HEAP32[$1 + 8 >> 2] = 0;
       $2 = HEAP32[$6 + 76 >> 2];
       HEAP32[$1 + 4 >> 2] = $2;
       (wasm2js_i32$0 = $1, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($2, 112))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $2 = HEAP32[$6 + 64 >> 2];
       HEAP32[$6 + 64 >> 2] = $1;
       HEAP32[$1 + 8 >> 2] = $2;
      }
      $5 = HEAP32[$1 >> 2];
      $14 = HEAP32[$1 + 4 >> 2];
      if (($14 | 0) <= 0) {
       break label$40
      }
      $18 = $14 & 3;
      $7 = 0;
      $2 = $5;
      if ($14 - 1 >>> 0 >= 3) {
       $17 = $14 & -4;
       $3 = 0;
       $1 = $5;
       while (1) {
        $12 = $1 + 336 | 0;
        $2 = $1 + 448 | 0;
        $7 = $3 + 4 | 0;
        HEAP32[$12 >> 2] = ($14 | 0) > ($7 | 0) ? $2 : 0;
        $9 = $1 + 224 | 0;
        HEAP32[$9 >> 2] = ($14 | 0) > ($3 + 3 | 0) ? $12 : 0;
        $12 = $1 + 112 | 0;
        HEAP32[$12 >> 2] = ($14 | 0) > ($3 + 2 | 0) ? $9 : 0;
        HEAP32[$1 >> 2] = ($14 | 0) > ($3 + 1 | 0) ? $12 : 0;
        $1 = $2;
        $3 = $7;
        if (($17 | 0) != ($3 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$18) {
       break label$40
      }
      $1 = $7 + 1 | 0;
      while (1) {
       $3 = $2;
       $2 = $2 + 112 | 0;
       HEAP32[$3 >> 2] = ($1 | 0) < ($14 | 0) ? $2 : 0;
       $1 = $1 + 1 | 0;
       $18 = $18 - 1 | 0;
       if ($18) {
        continue
       }
       break;
      };
     }
     HEAP32[$6 + 72 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$5 + 16 >> 2] = 0;
     $1 = $5 + 8 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$5 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$5 + 104 >> 2] = -1;
     $1 = HEAP32[$8 + 52 >> 2] + ($26 << 4) | 0;
     $2 = HEAP32[$1 + 4 >> 2];
     HEAP32[$5 + 88 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 92 >> 2] = $2;
     $1 = $1 + 8 | 0;
     $2 = HEAP32[$1 + 4 >> 2];
     $3 = $5 + 96 | 0;
     HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$3 + 4 >> 2] = $2;
     HEAP32[HEAP32[$6 + 124 >> 2] + ($26 << 2) >> 2] = $5;
     $26 = $26 + 1 | 0;
     if (($26 | 0) != ($4 | 0)) {
      continue
     }
     break;
    }
   }
   $1 = HEAP32[$8 + 52 >> 2];
   if (!(!$1 | !HEAPU8[$8 + 56 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$6 + 148 >> 2] = 0;
   HEAP32[$6 + 152 >> 2] = 0;
   HEAP32[$6 + 132 >> 2] = -3;
   HEAP32[$6 + 92 >> 2] = Math_imul($4, 6);
   HEAP32[$6 + 88 >> 2] = 0;
   HEAP32[$6 + 84 >> 2] = HEAP32[$6 + 80 >> 2];
   HEAP32[$8 + 52 >> 2] = 0;
   HEAP8[$8 + 56 | 0] = 1;
   HEAP32[$8 + 44 >> 2] = 0;
   HEAP32[$8 + 48 >> 2] = 0;
   $1 = $8 + 16 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$8 + 8 >> 2] = 0;
   HEAP32[$8 + 12 >> 2] = 0;
   btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($6, 0, $4, $8 + 8 | 0);
   HEAP32[$6 + 156 >> 2] = HEAP32[$8 + 8 >> 2];
   $1 = HEAP32[$8 + 52 >> 2];
   if (!(!$1 | !HEAPU8[$8 + 56 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   __stack_pointer = $8 - -64 | 0;
   if ((HEAP32[$0 + 4 >> 2] & HEAP32[$0 + 8 >> 2]) < 0) {
    $1 = HEAP32[$0 + 12 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 16 | 0])) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 4 >> 2] = 0;
   $4 = HEAP32[$0 + 24 >> 2];
   label$13 : {
    if (($4 | 0) >= 0) {
     break label$13
    }
    if (HEAP32[$0 + 28 >> 2] < 0) {
     $1 = HEAP32[$0 + 32 >> 2];
     if (!(!$1 | !HEAPU8[$0 + 36 | 0])) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP8[$0 + 36 | 0] = 1;
     HEAP32[$0 + 28 >> 2] = 0;
     HEAP32[$0 + 32 >> 2] = 0;
    }
    $1 = $4;
    $3 = 0 - $1 & 3;
    if ($3) {
     $2 = Math_imul($4, 12);
     while (1) {
      $5 = HEAP32[$0 + 32 >> 2] + $2 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      $2 = $2 + 12 | 0;
      $1 = $1 + 1 | 0;
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    if ($4 >>> 0 > 4294967292) {
     break label$13
    }
    $2 = Math_imul($1, 12);
    while (1) {
     $4 = HEAP32[$0 + 32 >> 2] + $2 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $4 = HEAP32[$0 + 32 >> 2] + $2 | 0;
     HEAP32[$4 + 20 >> 2] = 0;
     $4 = $4 + 12 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     $4 = HEAP32[$0 + 32 >> 2] + $2 | 0;
     HEAP32[$4 + 32 >> 2] = 0;
     $4 = $4 + 24 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     $4 = HEAP32[$0 + 32 >> 2] + $2 | 0;
     HEAP32[$4 + 44 >> 2] = 0;
     $4 = $4 + 36 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     $2 = $2 + 48 | 0;
     $1 = $1 + 4 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 24 >> 2] = 0;
   $2 = HEAP32[$0 + 44 >> 2];
   if (($2 | 0) < 0) {
    $1 = HEAP32[$0 + 52 >> 2];
    if (HEAP32[$0 + 48 >> 2] < 0) {
     if (!(!$1 | !HEAPU8[$0 + 56 | 0])) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP8[$0 + 56 | 0] = 1;
     HEAP32[$0 + 48 >> 2] = 0;
     HEAP32[$0 + 52 >> 2] = 0;
     $3 = 0;
    } else {
     $3 = $1
    }
    $1 = $2 << 2;
    memset($3 + $1 | 0, 0, 0 - $1 | 0);
   }
   HEAP32[$0 + 44 >> 2] = 0;
   $1 = HEAP32[$10 + 188 >> 2];
   label$6 : {
    if (HEAP32[$1 + 104 >> 2] >= 0) {
     break label$6
    }
    HEAP32[$1 + 104 >> 2] = 0;
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4);
    HEAP32[$6 >> 2] = $1;
    $2 = 0;
    $4 = 1;
    $8 = 1;
    while (1) {
     $26 = $2;
     $1 = $10 + 32 | 0;
     $3 = __stack_pointer - 32 | 0;
     __stack_pointer = $3;
     label$14 : {
      label$2 : {
       label$3 : {
        label$4 : {
         $17 = HEAP32[($2 << 2) + $6 >> 2];
         $2 = $17;
         label$55 : {
          if (HEAP32[$2 + 100 >> 2] >= 0) {
           HEAPF64[(HEAP32[$1 + 140 >> 2] << 3) + $3 >> 3] = HEAP32[$2 + 88 >> 2];
           break label$55;
          }
          $15 = btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 24 | 0);
          $5 = $2 + 72 | 0;
          $19 = btConvexHullInternal__Int128__toScalar_28_29_20const($5);
          HEAPF64[(HEAP32[$1 + 140 >> 2] << 3) + $3 >> 3] = $15 / $19;
          if (HEAP32[$2 + 100 >> 2] < 0) {
           break label$4
          }
         }
         HEAPF64[(HEAP32[$1 + 144 >> 2] << 3) + $3 >> 3] = HEAP32[$2 + 92 >> 2];
         break label$3;
        }
        $15 = btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 40 | 0);
        $19 = btConvexHullInternal__Int128__toScalar_28_29_20const($5);
        HEAPF64[(HEAP32[$1 + 144 >> 2] << 3) + $3 >> 3] = $15 / $19;
        if (HEAP32[$2 + 100 >> 2] < 0) {
         break label$2
        }
       }
       $15 = +HEAP32[$2 + 96 >> 2];
       break label$14;
      }
      $15 = btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 56 | 0) / btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 72 | 0);
     }
     HEAPF64[(HEAP32[$1 + 136 >> 2] << 3) + $3 >> 3] = $15;
     HEAP32[$10 + 24 >> 2] = 0;
     HEAP32[$10 + 28 >> 2] = 0;
     HEAPF64[$10 + 16 >> 3] = HEAPF64[$3 + 16 >> 3] * HEAPF64[$1 + 16 >> 3] + HEAPF64[$1 + 48 >> 3];
     HEAPF64[$10 + 8 >> 3] = HEAPF64[$3 + 8 >> 3] * HEAPF64[$1 + 8 >> 3] + HEAPF64[$1 + 40 >> 3];
     HEAPF64[$10 >> 3] = HEAPF64[$3 >> 3] * HEAPF64[$1 >> 3] + HEAPF64[$1 + 32 >> 3];
     __stack_pointer = $3 + 32 | 0;
     $2 = HEAP32[$0 + 4 >> 2];
     label$23 : {
      if (($2 | 0) != HEAP32[$0 + 8 >> 2]) {
       break label$23
      }
      $14 = $2 ? $2 << 1 : 1;
      if (($14 | 0) <= ($2 | 0)) {
       break label$23
      }
      label$246 : {
       if (!$14) {
        $18 = 0;
        break label$246;
       }
       $18 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 5);
       $2 = HEAP32[$0 + 4 >> 2];
      }
      label$267 : {
       if (($2 | 0) <= 0) {
        break label$267
       }
       $5 = 0;
       if (($2 | 0) != 1) {
        $12 = $2 & -2;
        $1 = 0;
        while (1) {
         $7 = HEAP32[$0 + 12 >> 2] + $1 | 0;
         $9 = HEAP32[$7 + 4 >> 2];
         $3 = $1 + $18 | 0;
         HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$3 + 4 >> 2] = $9;
         $9 = $7 + 24 | 0;
         $11 = HEAP32[$9 + 4 >> 2];
         $13 = $3 + 24 | 0;
         HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$13 + 4 >> 2] = $11;
         $9 = $7 + 16 | 0;
         $11 = HEAP32[$9 + 4 >> 2];
         $13 = $3 + 16 | 0;
         HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$13 + 4 >> 2] = $11;
         $7 = $7 + 8 | 0;
         $9 = HEAP32[$7 + 4 >> 2];
         $11 = $3 + 8 | 0;
         HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$11 + 4 >> 2] = $9;
         $7 = HEAP32[$0 + 12 >> 2] + $1 | 0;
         $9 = $7 + 40 | 0;
         $11 = HEAP32[$9 + 4 >> 2];
         $13 = $3 + 40 | 0;
         HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$13 + 4 >> 2] = $11;
         $9 = $7 + 48 | 0;
         $11 = HEAP32[$9 + 4 >> 2];
         $13 = $3 + 48 | 0;
         HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$13 + 4 >> 2] = $11;
         $9 = $7 + 56 | 0;
         $11 = HEAP32[$9 + 4 >> 2];
         $13 = $3 + 56 | 0;
         HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$13 + 4 >> 2] = $11;
         $7 = $7 + 32 | 0;
         $9 = HEAP32[$7 + 4 >> 2];
         $3 = $3 + 32 | 0;
         HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$3 + 4 >> 2] = $9;
         $1 = $1 - -64 | 0;
         $5 = $5 + 2 | 0;
         if (($12 | 0) != ($5 | 0)) {
          continue
         }
         break;
        };
       }
       if (!($2 & 1)) {
        break label$267
       }
       $2 = $5 << 5;
       $1 = $2 + $18 | 0;
       $2 = $2 + HEAP32[$0 + 12 >> 2] | 0;
       $3 = HEAP32[$2 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $3;
       $3 = $2 + 24 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       $7 = $1 + 24 | 0;
       HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$7 + 4 >> 2] = $5;
       $3 = $2 + 16 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       $7 = $1 + 16 | 0;
       HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$7 + 4 >> 2] = $5;
       $2 = $2 + 8 | 0;
       $3 = HEAP32[$2 + 4 >> 2];
       $1 = $1 + 8 | 0;
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $3;
      }
      $1 = HEAP32[$0 + 12 >> 2];
      if (!(!$1 | !HEAPU8[$0 + 16 | 0])) {
       btAlignedFreeInternal_28void__29($1)
      }
      HEAP32[$0 + 12 >> 2] = $18;
      HEAP8[$0 + 16 | 0] = 1;
      HEAP32[$0 + 8 >> 2] = $14;
      $2 = HEAP32[$0 + 4 >> 2];
     }
     $3 = HEAP32[$10 + 4 >> 2];
     $1 = HEAP32[$0 + 12 >> 2] + ($2 << 5) | 0;
     HEAP32[$1 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$1 + 4 >> 2] = $3;
     $2 = $10 + 24 | 0;
     $3 = HEAP32[$2 + 4 >> 2];
     $5 = $1 + 24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $2 = $10 + 16 | 0;
     $3 = HEAP32[$2 + 4 >> 2];
     $5 = $1 + 16 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $2 = $10 + 8 | 0;
     $3 = HEAP32[$2 + 4 >> 2];
     $1 = $1 + 8 | 0;
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = $3;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
     $17 = HEAP32[$17 + 8 >> 2];
     if ($17) {
      $18 = -1;
      $2 = $17;
      $14 = -1;
      while (1) {
       if (HEAP32[$2 + 20 >> 2] < 0) {
        $3 = HEAP32[$0 + 24 >> 2];
        $1 = $3;
        label$339 : {
         if (($1 | 0) != HEAP32[$0 + 28 >> 2]) {
          break label$339
         }
         $1 = $3;
         $12 = $1 ? $1 << 1 : 1;
         if (($1 | 0) >= ($12 | 0)) {
          break label$339
         }
         label$34 : {
          if (!$12) {
           $5 = 0;
           $1 = $3;
           break label$34;
          }
          $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($12, 12));
          $1 = HEAP32[$0 + 24 >> 2];
         }
         $11 = $1;
         label$3610 : {
          if (($11 | 0) <= 0) {
           break label$3610
          }
          $7 = 0;
          if (($11 | 0) != 1) {
           $27 = $11 & -2;
           $1 = 0;
           while (1) {
            $13 = HEAP32[$0 + 32 >> 2] + $1 | 0;
            $21 = HEAP32[$13 + 4 >> 2];
            $9 = $1 + $5 | 0;
            HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
            HEAP32[$9 + 4 >> 2] = $21;
            HEAP32[$9 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
            $13 = HEAP32[$0 + 32 >> 2] + $1 | 0;
            HEAP32[$9 + 20 >> 2] = HEAP32[$13 + 20 >> 2];
            $13 = $13 + 12 | 0;
            $21 = HEAP32[$13 + 4 >> 2];
            $9 = $9 + 12 | 0;
            HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
            HEAP32[$9 + 4 >> 2] = $21;
            $1 = $1 + 24 | 0;
            $7 = $7 + 2 | 0;
            if (($27 | 0) != ($7 | 0)) {
             continue
            }
            break;
           };
          }
          if (!($11 & 1)) {
           break label$3610
          }
          $7 = Math_imul($7, 12);
          $1 = $7 + HEAP32[$0 + 32 >> 2] | 0;
          $9 = HEAP32[$1 + 4 >> 2];
          $7 = $5 + $7 | 0;
          HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$7 + 4 >> 2] = $9;
          HEAP32[$7 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
         }
         $1 = HEAP32[$0 + 32 >> 2];
         if (!(!$1 | !HEAPU8[$0 + 36 | 0])) {
          btAlignedFreeInternal_28void__29($1)
         }
         HEAP32[$0 + 32 >> 2] = $5;
         HEAP8[$0 + 36 | 0] = 1;
         HEAP32[$0 + 28 >> 2] = $12;
         $1 = HEAP32[$0 + 24 >> 2];
        }
        $1 = HEAP32[$0 + 32 >> 2] + Math_imul($1, 12) | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        $1 = HEAP32[$0 + 24 >> 2] + 1 | 0;
        HEAP32[$0 + 24 >> 2] = $1;
        label$4011 : {
         if (HEAP32[$0 + 28 >> 2] != ($1 | 0)) {
          break label$4011
         }
         $9 = $1 ? $1 << 1 : 1;
         if (($9 | 0) <= ($1 | 0)) {
          break label$4011
         }
         label$4112 : {
          if (!$9) {
           $5 = 0;
           break label$4112;
          }
          $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($9, 12));
          $1 = HEAP32[$0 + 24 >> 2];
         }
         label$43 : {
          if (($1 | 0) <= 0) {
           break label$43
          }
          $13 = $1 & 1;
          $7 = 0;
          if (($1 | 0) != 1) {
           $27 = $1 & -2;
           $1 = 0;
           while (1) {
            $11 = HEAP32[$0 + 32 >> 2] + $1 | 0;
            $21 = HEAP32[$11 + 4 >> 2];
            $12 = $1 + $5 | 0;
            HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
            HEAP32[$12 + 4 >> 2] = $21;
            HEAP32[$12 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
            $11 = HEAP32[$0 + 32 >> 2] + $1 | 0;
            HEAP32[$12 + 20 >> 2] = HEAP32[$11 + 20 >> 2];
            $11 = $11 + 12 | 0;
            $21 = HEAP32[$11 + 4 >> 2];
            $12 = $12 + 12 | 0;
            HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
            HEAP32[$12 + 4 >> 2] = $21;
            $1 = $1 + 24 | 0;
            $7 = $7 + 2 | 0;
            if (($27 | 0) != ($7 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$13) {
           break label$43
          }
          $7 = Math_imul($7, 12);
          $1 = $7 + HEAP32[$0 + 32 >> 2] | 0;
          $12 = HEAP32[$1 + 4 >> 2];
          $7 = $5 + $7 | 0;
          HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$7 + 4 >> 2] = $12;
          HEAP32[$7 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
         }
         $1 = HEAP32[$0 + 32 >> 2];
         if (!(!$1 | !HEAPU8[$0 + 36 | 0])) {
          btAlignedFreeInternal_28void__29($1)
         }
         HEAP32[$0 + 32 >> 2] = $5;
         HEAP8[$0 + 36 | 0] = 1;
         HEAP32[$0 + 28 >> 2] = $9;
         $1 = HEAP32[$0 + 24 >> 2];
        }
        $1 = HEAP32[$0 + 32 >> 2] + Math_imul($1, 12) | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        HEAP32[$2 + 20 >> 2] = $3;
        $27 = $3 + 1 | 0;
        HEAP32[HEAP32[$2 + 8 >> 2] + 20 >> 2] = $27;
        HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
        $21 = HEAP32[$0 + 32 >> 2];
        $11 = $21 + Math_imul($3, 12) | 0;
        HEAP32[$11 + 4 >> 2] = 1;
        HEAP32[$11 + 16 >> 2] = -1;
        $13 = HEAP32[$2 + 12 >> 2];
        $3 = HEAP32[$13 + 104 >> 2];
        label$47 : {
         if (($3 | 0) >= 0) {
          $1 = $4;
          $4 = $3;
          break label$47;
         }
         HEAP32[$13 + 104 >> 2] = $4;
         label$49 : {
          label$50 : {
           if (($4 | 0) != ($8 | 0)) {
            break label$50
           }
           $7 = $8 ? $8 << 1 : 1;
           if (($7 | 0) <= ($8 | 0)) {
            break label$50
           }
           if ($7) {
            $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2)
           } else {
            $5 = 0
           }
           label$53 : {
            if (($8 | 0) > 0) {
             $12 = $8 & 3;
             $3 = 0;
             if ($8 - 1 >>> 0 >= 3) {
              $29 = $8 & -4;
              $1 = 0;
              while (1) {
               $8 = $1 + $5 | 0;
               $9 = $1 + $6 | 0;
               HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
               HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
               HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
               HEAP32[$8 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
               $1 = $1 + 16 | 0;
               $3 = $3 + 4 | 0;
               if (($29 | 0) != ($3 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$12) {
              break label$53
             }
             $3 = $3 << 2;
             $1 = $3 + $5 | 0;
             $3 = $3 + $6 | 0;
             while (1) {
              HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
              $1 = $1 + 4 | 0;
              $3 = $3 + 4 | 0;
              $12 = $12 - 1 | 0;
              if ($12) {
               continue
              }
              break;
             };
             break label$53;
            }
            if (!$6) {
             break label$49
            }
           }
           btAlignedFreeInternal_28void__29($6);
           break label$49;
          }
          $5 = $6;
          $7 = $8;
         }
         HEAP32[($4 << 2) + $5 >> 2] = $13;
         $1 = $4 + 1 | 0;
         $6 = $5;
         $8 = $7;
        }
        HEAP32[($21 + Math_imul($27, 12) | 0) + 8 >> 2] = $26;
        HEAP32[$11 + 8 >> 2] = $4;
        $4 = $1;
       }
       $1 = HEAP32[$2 + 20 >> 2];
       $3 = $1;
       if (($18 | 0) >= 0) {
        HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($1, 12) >> 2] = $18 - $1;
        $3 = $14;
       }
       $18 = $1;
       $14 = $3;
       $2 = HEAP32[$2 >> 2];
       if (($17 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
      HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($3, 12) >> 2] = $1 - $3;
     }
     $2 = $26 + 1 | 0;
     if (($4 | 0) > ($2 | 0)) {
      continue
     }
     break;
    };
    $4 = 0;
    while (1) {
     $5 = HEAP32[HEAP32[($4 << 2) + $6 >> 2] + 8 >> 2];
     if ($5) {
      $1 = $5;
      while (1) {
       $3 = HEAP32[$1 + 20 >> 2];
       if (($3 | 0) >= 0) {
        $2 = HEAP32[$0 + 44 >> 2];
        label$63 : {
         if (($2 | 0) != HEAP32[$0 + 48 >> 2]) {
          break label$63
         }
         $14 = $2 ? $2 << 1 : 1;
         if (($14 | 0) <= ($2 | 0)) {
          break label$63
         }
         label$64 : {
          if (!$14) {
           $12 = 0;
           break label$64;
          }
          $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 2);
          $2 = HEAP32[$0 + 44 >> 2];
         }
         $8 = HEAP32[$0 + 52 >> 2];
         label$66 : {
          label$67 : {
           if (($2 | 0) > 0) {
            $18 = $2 & 3;
            $7 = 0;
            if ($2 - 1 >>> 0 >= 3) {
             $9 = $2 & -4;
             $2 = 0;
             while (1) {
              $3 = $2 + $12 | 0;
              $17 = $2 + $8 | 0;
              HEAP32[$3 >> 2] = HEAP32[$17 >> 2];
              HEAP32[$3 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
              HEAP32[$3 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
              HEAP32[$3 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
              $2 = $2 + 16 | 0;
              $7 = $7 + 4 | 0;
              if (($9 | 0) != ($7 | 0)) {
               continue
              }
              break;
             };
            }
            if (!$18) {
             break label$67
            }
            $3 = $7 << 2;
            $2 = $3 + $12 | 0;
            $3 = $3 + $8 | 0;
            while (1) {
             HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
             $2 = $2 + 4 | 0;
             $3 = $3 + 4 | 0;
             $18 = $18 - 1 | 0;
             if ($18) {
              continue
             }
             break;
            };
            break label$67;
           }
           if (!$8) {
            break label$66
           }
          }
          if (HEAPU8[$0 + 56 | 0]) {
           btAlignedFreeInternal_28void__29($8)
          }
          $2 = HEAP32[$0 + 44 >> 2];
         }
         HEAP32[$0 + 48 >> 2] = $14;
         HEAP32[$0 + 52 >> 2] = $12;
         HEAP8[$0 + 56 | 0] = 1;
         $3 = HEAP32[$1 + 20 >> 2];
        }
        HEAP32[HEAP32[$0 + 52 >> 2] + ($2 << 2) >> 2] = $3;
        HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
        $2 = $1;
        while (1) {
         HEAP32[$2 + 20 >> 2] = -1;
         $2 = HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
         if (($2 | 0) != ($1 | 0)) {
          continue
         }
         break;
        };
       }
       $1 = HEAP32[$1 >> 2];
       if (($5 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $1 = ($4 | 0) == ($26 | 0);
     $4 = $4 + 1 | 0;
     if (!$1) {
      continue
     }
     break;
    };
    if (!$6) {
     break label$6
    }
    btAlignedFreeInternal_28void__29($6);
   }
   $0 = HEAP32[$10 + 156 >> 2];
   if (!(!$0 | !HEAPU8[$10 + 160 | 0])) {
    btAlignedFreeInternal_28void__29($0)
   }
   HEAP32[$10 + 156 >> 2] = 0;
   HEAP8[$10 + 160 | 0] = 1;
   HEAP32[$10 + 148 >> 2] = 0;
   HEAP32[$10 + 152 >> 2] = 0;
   while (1) {
    $0 = HEAP32[$10 + 128 >> 2];
    if ($0) {
     HEAP32[$10 + 128 >> 2] = HEAP32[$0 + 8 >> 2];
     btAlignedFreeInternal_28void__29(HEAP32[$0 >> 2]);
     btAlignedFreeInternal_28void__29($0);
     continue;
    }
    break;
   };
   while (1) {
    $0 = HEAP32[$10 + 112 >> 2];
    if ($0) {
     HEAP32[$10 + 112 >> 2] = HEAP32[$0 + 8 >> 2];
     btAlignedFreeInternal_28void__29(HEAP32[$0 >> 2]);
     btAlignedFreeInternal_28void__29($0);
     continue;
    }
    break;
   };
   while (1) {
    $0 = HEAP32[$10 + 96 >> 2];
    if (!$0) {
     break label$1
    }
    HEAP32[$10 + 96 >> 2] = HEAP32[$0 + 8 >> 2];
    btAlignedFreeInternal_28void__29(HEAP32[$0 >> 2]);
    btAlignedFreeInternal_28void__29($0);
    continue;
   };
  }
  __stack_pointer = $10 + 192 | 0;
 }
 
 function btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($0) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 >> 2] = 5992;
  return $0;
 }
 
 function btPolyhedralConvexShape__initializePolyhedralFeatures_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
  $14 = __stack_pointer - 272 | 0;
  __stack_pointer = $14;
  $2 = HEAP32[$0 + 96 >> 2];
  if ($2) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 96 >> 2]);
  }
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(200);
  HEAP32[$2 >> 2] = 5944;
  HEAP8[$2 + 20 | 0] = 1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP8[$2 + 40 | 0] = 1;
  $4 = $2 + 8 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP8[$2 + 60 | 0] = 1;
  $4 = $2 + 28 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  $4 = $2 + 48 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = $2;
  HEAP32[$14 + 260 >> 2] = 0;
  HEAP32[$14 + 252 >> 2] = 0;
  HEAP32[$14 + 256 >> 2] = 0;
  HEAP8[$14 + 264 | 0] = 1;
  label$2 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) <= 0) {
    $4 = 0;
    break label$2;
   }
   $4 = 0;
   while (1) {
    label$5 : {
     if (($5 | 0) != ($8 | 0)) {
      break label$5
     }
     $8 = $5 ? $5 << 1 : 1;
     if ($5 >>> 0 >= $8 >>> 0) {
      $8 = $5;
      break label$5;
     }
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 5);
     label$7 : {
      label$8 : {
       if ($5) {
        $7 = 0;
        if ($5 - 1 >>> 0 >= 3) {
         $15 = $5 & -4;
         $18 = 0;
         while (1) {
          $2 = $9 + $18 | 0;
          $16 = HEAP32[$2 + 4 >> 2];
          $3 = $4 + $18 | 0;
          HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$3 + 4 >> 2] = $16;
          $16 = $2 + 24 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 24 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 16 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 16 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 8 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 8 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 56 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 56 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 48 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 48 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 40 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 40 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 32 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 32 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 88 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 88 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 80 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 80 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 72 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 72 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 - -64 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 - -64 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 96 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 96 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 104 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 104 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $16 = $2 + 112 | 0;
          $17 = HEAP32[$16 + 4 >> 2];
          $19 = $3 + 112 | 0;
          HEAP32[$19 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$19 + 4 >> 2] = $17;
          $2 = $2 + 120 | 0;
          $16 = HEAP32[$2 + 4 >> 2];
          $3 = $3 + 120 | 0;
          HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$3 + 4 >> 2] = $16;
          $18 = $18 + 128 | 0;
          $7 = $7 + 4 | 0;
          if (($15 | 0) != ($7 | 0)) {
           continue
          }
          break;
         };
        }
        if (!($5 & 3)) {
         break label$8
        }
        $18 = $13 & 3;
        $3 = $7 << 5;
        $2 = $3 + $4 | 0;
        $3 = $3 + $9 | 0;
        while (1) {
         $15 = HEAP32[$3 + 4 >> 2];
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $15;
         $15 = $3 + 24 | 0;
         $16 = HEAP32[$15 + 4 >> 2];
         $17 = $2 + 24 | 0;
         HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
         HEAP32[$17 + 4 >> 2] = $16;
         $15 = $3 + 16 | 0;
         $16 = HEAP32[$15 + 4 >> 2];
         $17 = $2 + 16 | 0;
         HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
         HEAP32[$17 + 4 >> 2] = $16;
         $15 = $3 + 8 | 0;
         $16 = HEAP32[$15 + 4 >> 2];
         $17 = $2 + 8 | 0;
         HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
         HEAP32[$17 + 4 >> 2] = $16;
         $2 = $2 + 32 | 0;
         $3 = $3 + 32 | 0;
         $18 = $18 - 1 | 0;
         if ($18) {
          continue
         }
         break;
        };
        break label$8;
       }
       if (!$9) {
        break label$7
       }
      }
      btAlignedFreeInternal_28void__29($9);
     }
     HEAP32[$14 + 260 >> 2] = $4;
     HEAP8[$14 + 264 | 0] = 1;
     HEAP32[$14 + 256 >> 2] = $8;
     $9 = $4;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $5, ($5 << 5) + $9 | 0);
    $13 = $13 + 1 | 0;
    $5 = $5 + 1 | 0;
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) > ($5 | 0)) {
     continue
    }
    break;
   };
   HEAP32[$14 + 252 >> 2] = $5;
  }
  HEAP8[$14 + 220 | 0] = 1;
  HEAP32[$14 + 216 >> 2] = 0;
  HEAP8[$14 + 240 | 0] = 1;
  $8 = $14 + 208 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$14 + 236 >> 2] = 0;
  $8 = $14 + 228 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$14 + 196 >> 2] = 0;
  HEAP8[$14 + 200 | 0] = 1;
  HEAP32[$14 + 188 >> 2] = 0;
  HEAP32[$14 + 192 >> 2] = 0;
  label$13 : {
   label$14 : {
    if ($1) {
     HEAP32[$14 + 44 >> 2] = 0;
     HEAP8[$14 + 48 | 0] = 1;
     HEAP32[$14 + 36 >> 2] = 0;
     HEAP32[$14 + 40 >> 2] = 0;
     $16 = $14 + 32 | 0;
     $8 = 0;
     $7 = $14 + 248 | 0;
     $9 = HEAP32[$7 + 4 >> 2];
     if (($9 | 0) > 0) {
      while (1) {
       label$3 : {
        $1 = $8;
        $8 = $1 + 1 | 0;
        if (($8 | 0) >= ($9 | 0)) {
         break label$3
        }
        $15 = HEAP32[$7 + 12 >> 2];
        $13 = $15 + ($1 << 5) | 0;
        $12 = $13 + 16 | 0;
        $30 = $13 + 8 | 0;
        $1 = $8;
        while (1) {
         label$52 : {
          $4 = $1 + 1 | 0;
          if (($4 | 0) >= ($9 | 0)) {
           break label$52
          }
          $33 = ($1 << 5) + $15 | 0;
          $23 = $33 + 16 | 0;
          $22 = $33 + 8 | 0;
          $2 = $4;
          while (1) {
           $21 = HEAPF64[$13 >> 3];
           $27 = HEAPF64[$33 >> 3] - $21;
           $1 = ($2 << 5) + $15 | 0;
           $26 = HEAPF64[$30 >> 3];
           $29 = HEAPF64[$1 + 8 >> 3] - $26;
           $21 = HEAPF64[$1 >> 3] - $21;
           $26 = HEAPF64[$22 >> 3] - $26;
           $37 = $27 * $29 - $21 * $26;
           $32 = HEAPF64[$12 >> 3];
           $35 = HEAPF64[$23 >> 3] - $32;
           $34 = $35 * $21;
           $21 = HEAPF64[$1 + 16 >> 3] - $32;
           $36 = $34 - $21 * $27;
           $35 = $26 * $21 - $29 * $35;
           $21 = 1.0;
           $3 = 1;
           while (1) {
            $27 = $37 * $21;
            $26 = $35 * $21;
            $29 = $36 * $21;
            $21 = $27 * $27 + ($26 * $26 + $29 * $29);
            label$84 : {
             if (!($21 > .0001)) {
              break label$84
             }
             $32 = 1.0 / Math_sqrt($21);
             $21 = $27 * $32;
             $27 = $29 * $32;
             $26 = $26 * $32;
             $17 = HEAP32[$16 + 4 >> 2];
             if (($17 | 0) > 0) {
              $1 = HEAP32[$16 + 12 >> 2];
              if ($21 * HEAPF64[$1 + 16 >> 3] + ($26 * HEAPF64[$1 >> 3] + $27 * HEAPF64[$1 + 8 >> 3]) > .999) {
               break label$84
              }
              $15 = $1 + 32 | 0;
              $1 = 1;
              while (1) {
               label$10 : {
                $5 = $1;
                if (($1 | 0) == ($17 | 0)) {
                 break label$10
                }
                $29 = HEAPF64[$15 >> 3];
                $19 = $15 + 8 | 0;
                $18 = $15 + 16 | 0;
                $15 = $15 + 32 | 0;
                $1 = $5 + 1 | 0;
                if (!($21 * HEAPF64[$18 >> 3] + ($26 * $29 + $27 * HEAPF64[$19 >> 3]) > .999)) {
                 continue
                }
               }
               break;
              };
              if (($5 | 0) < ($17 | 0)) {
               break label$84
              }
             }
             $29 = $21 * HEAPF64[$12 >> 3] + ($26 * HEAPF64[$13 >> 3] + $27 * HEAPF64[$30 >> 3]);
             $19 = HEAP32[$7 + 4 >> 2];
             if (($19 | 0) > 0) {
              $1 = HEAP32[$7 + 12 >> 2];
              if ($21 * HEAPF64[$1 + 16 >> 3] + ($26 * HEAPF64[$1 >> 3] + $27 * HEAPF64[$1 + 8 >> 3]) - $29 + -.01 > 0.0) {
               break label$84
              }
              $15 = $1 + 32 | 0;
              $1 = 1;
              while (1) {
               label$137 : {
                $5 = $1;
                if (($1 | 0) == ($19 | 0)) {
                 break label$137
                }
                $32 = HEAPF64[$15 >> 3];
                $18 = $15 + 8 | 0;
                $24 = $15 + 16 | 0;
                $15 = $15 + 32 | 0;
                $1 = $5 + 1 | 0;
                if (!($21 * HEAPF64[$24 >> 3] + ($26 * $32 + $27 * HEAPF64[$18 >> 3]) - $29 + -.01 > 0.0)) {
                 continue
                }
               }
               break;
              };
              if (($5 | 0) < ($19 | 0)) {
               break label$84
              }
             }
             $29 = -$29;
             label$15 : {
              if (HEAP32[$16 + 8 >> 2] != ($17 | 0)) {
               break label$15
              }
              $24 = $17 ? $17 << 1 : 1;
              if (($24 | 0) <= ($17 | 0)) {
               break label$15
              }
              label$16 : {
               if (!$24) {
                $15 = 0;
                break label$16;
               }
               $15 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($24 << 5);
               $17 = HEAP32[$16 + 4 >> 2];
              }
              label$18 : {
               if (($17 | 0) <= 0) {
                break label$18
               }
               $18 = 0;
               if (($17 | 0) != 1) {
                $28 = $17 & -2;
                $1 = 0;
                while (1) {
                 $19 = HEAP32[$16 + 12 >> 2] + $1 | 0;
                 $11 = HEAP32[$19 + 4 >> 2];
                 $5 = $1 + $15 | 0;
                 HEAP32[$5 >> 2] = HEAP32[$19 >> 2];
                 HEAP32[$5 + 4 >> 2] = $11;
                 $11 = $19 + 24 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $5 + 24 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $19 + 16 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $5 + 16 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $19 = $19 + 8 | 0;
                 $11 = HEAP32[$19 + 4 >> 2];
                 $10 = $5 + 8 | 0;
                 HEAP32[$10 >> 2] = HEAP32[$19 >> 2];
                 HEAP32[$10 + 4 >> 2] = $11;
                 $19 = HEAP32[$16 + 12 >> 2] + $1 | 0;
                 $11 = $19 + 40 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $5 + 40 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $19 + 48 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $5 + 48 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $19 + 56 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $5 + 56 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $19 = $19 + 32 | 0;
                 $11 = HEAP32[$19 + 4 >> 2];
                 $5 = $5 + 32 | 0;
                 HEAP32[$5 >> 2] = HEAP32[$19 >> 2];
                 HEAP32[$5 + 4 >> 2] = $11;
                 $1 = $1 - -64 | 0;
                 $18 = $18 + 2 | 0;
                 if (($28 | 0) != ($18 | 0)) {
                  continue
                 }
                 break;
                };
               }
               if (!($17 & 1)) {
                break label$18
               }
               $5 = $18 << 5;
               $1 = $5 + $15 | 0;
               $5 = $5 + HEAP32[$16 + 12 >> 2] | 0;
               $17 = HEAP32[$5 + 4 >> 2];
               HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
               HEAP32[$1 + 4 >> 2] = $17;
               $17 = $5 + 24 | 0;
               $19 = HEAP32[$17 + 4 >> 2];
               $18 = $1 + 24 | 0;
               HEAP32[$18 >> 2] = HEAP32[$17 >> 2];
               HEAP32[$18 + 4 >> 2] = $19;
               $17 = $5 + 16 | 0;
               $19 = HEAP32[$17 + 4 >> 2];
               $18 = $1 + 16 | 0;
               HEAP32[$18 >> 2] = HEAP32[$17 >> 2];
               HEAP32[$18 + 4 >> 2] = $19;
               $5 = $5 + 8 | 0;
               $17 = HEAP32[$5 + 4 >> 2];
               $1 = $1 + 8 | 0;
               HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
               HEAP32[$1 + 4 >> 2] = $17;
              }
              $1 = HEAP32[$16 + 12 >> 2];
              if (!(!$1 | !HEAPU8[$16 + 16 | 0])) {
               btAlignedFreeInternal_28void__29($1)
              }
              HEAP32[$16 + 12 >> 2] = $15;
              HEAP8[$16 + 16 | 0] = 1;
              HEAP32[$16 + 8 >> 2] = $24;
              $17 = HEAP32[$16 + 4 >> 2];
             }
             $1 = HEAP32[$16 + 12 >> 2] + ($17 << 5) | 0;
             HEAPF64[$1 + 24 >> 3] = $29;
             HEAPF64[$1 + 16 >> 3] = $21;
             HEAPF64[$1 + 8 >> 3] = $27;
             HEAPF64[$1 >> 3] = $26;
             HEAP32[$16 + 4 >> 2] = HEAP32[$16 + 4 >> 2] + 1;
            }
            $1 = $3;
            $21 = -1.0;
            $3 = 0;
            if ($1) {
             continue
            }
            break;
           };
           $2 = $2 + 1 | 0;
           if (($2 | 0) >= ($9 | 0)) {
            break label$52
           }
           $15 = HEAP32[$7 + 12 >> 2];
           continue;
          };
         }
         if (($4 | 0) == ($9 | 0)) {
          break label$3
         }
         $15 = HEAP32[$7 + 12 >> 2];
         $1 = $4;
         continue;
        };
       }
       if (($8 | 0) != ($9 | 0)) {
        continue
       }
       break;
      }
     }
     HEAP32[$14 + 172 >> 2] = 0;
     HEAP8[$14 + 176 | 0] = 1;
     HEAP32[$14 + 164 >> 2] = 0;
     HEAP32[$14 + 168 >> 2] = 0;
     if (HEAP32[$14 + 36 >> 2] <= 0) {
      break label$14
     }
     $8 = 0;
     while (1) {
      $1 = HEAP32[$14 + 44 >> 2] + ($8 << 5) | 0;
      $2 = $1 + 8 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      $3 = $14 - -64 | 0;
      $17 = $3 + 8 | 0;
      $5 = $17;
      HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$5 + 4 >> 2] = $4;
      $2 = $1 + 16 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      $19 = $3 + 16 | 0;
      $3 = $19;
      HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$3 + 4 >> 2] = $4;
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP32[$14 + 64 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$14 + 68 >> 2] = $2;
      $21 = HEAPF64[$1 + 24 >> 3] - +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
      $9 = HEAP32[$14 + 164 >> 2];
      label$17 : {
       if (($9 | 0) != HEAP32[$14 + 168 >> 2]) {
        break label$17
       }
       $16 = $9 ? $9 << 1 : 1;
       if (($16 | 0) <= ($9 | 0)) {
        break label$17
       }
       label$1810 : {
        if (!$16) {
         $1 = 0;
         break label$1810;
        }
        $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($16 << 5);
        $9 = HEAP32[$14 + 164 >> 2];
       }
       $15 = HEAP32[$14 + 172 >> 2];
       label$2011 : {
        if (($9 | 0) <= 0) {
         break label$2011
        }
        $5 = $9 & 3;
        $7 = 0;
        if ($9 - 1 >>> 0 >= 3) {
         $3 = $9 & -4;
         $18 = 0;
         while (1) {
          $2 = $15 + $18 | 0;
          $13 = HEAP32[$2 + 4 >> 2];
          $4 = $1 + $18 | 0;
          HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$4 + 4 >> 2] = $13;
          $13 = $2 + 24 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 24 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 16 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 16 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 8 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 8 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 56 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 56 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 48 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 48 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 40 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 40 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 32 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 32 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 88 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 88 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 80 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 80 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 72 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 72 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 - -64 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 - -64 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 96 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 96 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 104 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 104 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $13 = $2 + 112 | 0;
          $24 = HEAP32[$13 + 4 >> 2];
          $12 = $4 + 112 | 0;
          HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$12 + 4 >> 2] = $24;
          $2 = $2 + 120 | 0;
          $13 = HEAP32[$2 + 4 >> 2];
          $4 = $4 + 120 | 0;
          HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$4 + 4 >> 2] = $13;
          $18 = $18 + 128 | 0;
          $7 = $7 + 4 | 0;
          if (($3 | 0) != ($7 | 0)) {
           continue
          }
          break;
         };
        }
        if (!$5) {
         break label$2011
        }
        $4 = $7 << 5;
        $2 = $4 + $1 | 0;
        $3 = $4 + $15 | 0;
        while (1) {
         $4 = HEAP32[$3 + 4 >> 2];
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $4 = $3 + 24 | 0;
         $7 = HEAP32[$4 + 4 >> 2];
         $13 = $2 + 24 | 0;
         HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$13 + 4 >> 2] = $7;
         $4 = $3 + 16 | 0;
         $7 = HEAP32[$4 + 4 >> 2];
         $13 = $2 + 16 | 0;
         HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$13 + 4 >> 2] = $7;
         $4 = $3 + 8 | 0;
         $7 = HEAP32[$4 + 4 >> 2];
         $13 = $2 + 8 | 0;
         HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$13 + 4 >> 2] = $7;
         $2 = $2 + 32 | 0;
         $3 = $3 + 32 | 0;
         $5 = $5 - 1 | 0;
         if ($5) {
          continue
         }
         break;
        };
       }
       if (!(!$15 | !HEAPU8[$14 + 176 | 0])) {
        btAlignedFreeInternal_28void__29($15);
        $9 = HEAP32[$14 + 164 >> 2];
       }
       HEAP32[$14 + 172 >> 2] = $1;
       HEAP8[$14 + 176 | 0] = 1;
       HEAP32[$14 + 168 >> 2] = $16;
      }
      $2 = HEAP32[$14 + 68 >> 2];
      $1 = HEAP32[$14 + 172 >> 2] + ($9 << 5) | 0;
      HEAP32[$1 >> 2] = HEAP32[$14 + 64 >> 2];
      HEAP32[$1 + 4 >> 2] = $2;
      HEAPF64[$1 + 24 >> 3] = $21;
      $2 = HEAP32[$17 + 4 >> 2];
      $4 = $1 + 8 | 0;
      HEAP32[$4 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$4 + 4 >> 2] = $2;
      $2 = HEAP32[$19 + 4 >> 2];
      $1 = $1 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$19 >> 2];
      HEAP32[$1 + 4 >> 2] = $2;
      HEAP32[$14 + 164 >> 2] = HEAP32[$14 + 164 >> 2] + 1;
      $8 = $8 + 1 | 0;
      if (($8 | 0) < HEAP32[$14 + 36 >> 2]) {
       continue
      }
      break;
     };
     break label$14;
    }
    btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20double_2c_20double_29($14 + 184 | 0, $4, $5);
    break label$13;
   }
   HEAP32[$14 + 76 >> 2] = 0;
   HEAP8[$14 + 80 | 0] = 1;
   HEAP32[$14 + 68 >> 2] = 0;
   HEAP32[$14 + 72 >> 2] = 0;
   $5 = $14 - -64 | 0;
   $8 = 0;
   $7 = $14 + 160 | 0;
   $17 = HEAP32[$7 + 4 >> 2];
   if (($17 | 0) > 0) {
    while (1) {
     label$313 : {
      $1 = $8;
      $8 = $1 + 1 | 0;
      if (($8 | 0) >= ($17 | 0)) {
       break label$313
      }
      $3 = HEAP32[$7 + 12 >> 2];
      $13 = $3 + ($1 << 5) | 0;
      $12 = $13 + 24 | 0;
      $30 = $13 + 8 | 0;
      $33 = $13 + 16 | 0;
      $1 = $8;
      while (1) {
       label$515 : {
        $4 = $1 + 1 | 0;
        if (($4 | 0) >= ($17 | 0)) {
         break label$515
        }
        $18 = ($1 << 5) + $3 | 0;
        $23 = $18 + 24 | 0;
        $22 = $18 + 16 | 0;
        $28 = $18 + 8 | 0;
        $2 = $4;
        while (1) {
         $29 = HEAPF64[$18 >> 3];
         $1 = ($2 << 5) + $3 | 0;
         $26 = HEAPF64[$1 + 8 >> 3];
         $32 = HEAPF64[$1 >> 3];
         $37 = HEAPF64[$28 >> 3];
         $35 = $29 * $26 - $32 * $37;
         $36 = HEAPF64[$1 + 16 >> 3];
         $34 = HEAPF64[$22 >> 3];
         $41 = $37 * $36 - $26 * $34;
         $42 = $34 * $32 - $36 * $29;
         label$717 : {
          if (!($35 * $35 + ($41 * $41 + $42 * $42) > .0001)) {
           break label$717
          }
          $21 = HEAPF64[$30 >> 3];
          $27 = HEAPF64[$13 >> 3];
          $45 = $32 * $21 - $27 * $26;
          $38 = $26;
          $26 = HEAPF64[$33 >> 3];
          $38 = $38 * $26 - $21 * $36;
          $32 = $36 * $27 - $26 * $32;
          if (!($45 * $45 + ($38 * $38 + $32 * $32) > .0001)) {
           break label$717
          }
          $36 = $27 * $37 - $29 * $21;
          $37 = $21 * $34 - $37 * $26;
          $29 = $26 * $29 - $34 * $27;
          if (!($36 * $36 + ($37 * $37 + $29 * $29) > .0001)) {
           break label$717
          }
          $21 = $26 * $35 + ($27 * $41 + $21 * $42);
          if (!(Math_abs($21) > 1.0e-06)) {
           break label$717
          }
          $21 = -1.0 / $21;
          $27 = HEAPF64[$1 + 24 >> 3];
          $26 = HEAPF64[$12 >> 3];
          $34 = $35 * $26;
          $35 = HEAPF64[$23 >> 3];
          $36 = $21 * ($36 * $27 + ($34 + $45 * $35));
          $29 = $21 * ($29 * $27 + ($42 * $26 + $32 * $35));
          $21 = $21 * ($37 * $27 + ($41 * $26 + $38 * $35));
          $15 = HEAP32[$7 + 4 >> 2];
          if (($15 | 0) > 0) {
           $1 = 0;
           $16 = 1;
           while (1) {
            if (!(HEAPF64[$3 + 24 >> 3] + (HEAPF64[$3 + 16 >> 3] * $36 + (HEAPF64[$3 >> 3] * $21 + $29 * HEAPF64[$3 + 8 >> 3])) + -.01 > 0.0)) {
             $3 = $3 + 32 | 0;
             $1 = $1 + 1 | 0;
             $16 = ($15 | 0) > ($1 | 0);
             if (($1 | 0) != ($15 | 0)) {
              continue
             }
            }
            break;
           };
           if ($16 & 1) {
            break label$717
           }
          }
          $3 = HEAP32[$5 + 4 >> 2];
          label$1119 : {
           if (($3 | 0) != HEAP32[$5 + 8 >> 2]) {
            break label$1119
           }
           $24 = $3 ? $3 << 1 : 1;
           if (($24 | 0) <= ($3 | 0)) {
            break label$1119
           }
           label$1220 : {
            if (!$24) {
             $9 = 0;
             break label$1220;
            }
            $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($24 << 5);
            $3 = HEAP32[$5 + 4 >> 2];
           }
           label$1421 : {
            if (($3 | 0) <= 0) {
             break label$1421
            }
            $16 = 0;
            if (($3 | 0) != 1) {
             $11 = $3 & -2;
             $1 = 0;
             while (1) {
              $19 = HEAP32[$5 + 12 >> 2] + $1 | 0;
              $10 = HEAP32[$19 + 4 >> 2];
              $15 = $1 + $9 | 0;
              HEAP32[$15 >> 2] = HEAP32[$19 >> 2];
              HEAP32[$15 + 4 >> 2] = $10;
              $10 = $19 + 24 | 0;
              $6 = HEAP32[$10 + 4 >> 2];
              $20 = $15 + 24 | 0;
              HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$20 + 4 >> 2] = $6;
              $10 = $19 + 16 | 0;
              $6 = HEAP32[$10 + 4 >> 2];
              $20 = $15 + 16 | 0;
              HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$20 + 4 >> 2] = $6;
              $19 = $19 + 8 | 0;
              $10 = HEAP32[$19 + 4 >> 2];
              $6 = $15 + 8 | 0;
              HEAP32[$6 >> 2] = HEAP32[$19 >> 2];
              HEAP32[$6 + 4 >> 2] = $10;
              $19 = HEAP32[$5 + 12 >> 2] + $1 | 0;
              $10 = $19 + 40 | 0;
              $6 = HEAP32[$10 + 4 >> 2];
              $20 = $15 + 40 | 0;
              HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$20 + 4 >> 2] = $6;
              $10 = $19 + 48 | 0;
              $6 = HEAP32[$10 + 4 >> 2];
              $20 = $15 + 48 | 0;
              HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$20 + 4 >> 2] = $6;
              $10 = $19 + 56 | 0;
              $6 = HEAP32[$10 + 4 >> 2];
              $20 = $15 + 56 | 0;
              HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$20 + 4 >> 2] = $6;
              $19 = $19 + 32 | 0;
              $10 = HEAP32[$19 + 4 >> 2];
              $15 = $15 + 32 | 0;
              HEAP32[$15 >> 2] = HEAP32[$19 >> 2];
              HEAP32[$15 + 4 >> 2] = $10;
              $1 = $1 - -64 | 0;
              $16 = $16 + 2 | 0;
              if (($11 | 0) != ($16 | 0)) {
               continue
              }
              break;
             };
            }
            if (!($3 & 1)) {
             break label$1421
            }
            $3 = $16 << 5;
            $1 = $3 + $9 | 0;
            $3 = $3 + HEAP32[$5 + 12 >> 2] | 0;
            $15 = HEAP32[$3 + 4 >> 2];
            HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
            HEAP32[$1 + 4 >> 2] = $15;
            $15 = $3 + 24 | 0;
            $16 = HEAP32[$15 + 4 >> 2];
            $19 = $1 + 24 | 0;
            HEAP32[$19 >> 2] = HEAP32[$15 >> 2];
            HEAP32[$19 + 4 >> 2] = $16;
            $15 = $3 + 16 | 0;
            $16 = HEAP32[$15 + 4 >> 2];
            $19 = $1 + 16 | 0;
            HEAP32[$19 >> 2] = HEAP32[$15 >> 2];
            HEAP32[$19 + 4 >> 2] = $16;
            $3 = $3 + 8 | 0;
            $15 = HEAP32[$3 + 4 >> 2];
            $1 = $1 + 8 | 0;
            HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
            HEAP32[$1 + 4 >> 2] = $15;
           }
           $1 = HEAP32[$5 + 12 >> 2];
           if (!(!$1 | !HEAPU8[$5 + 16 | 0])) {
            btAlignedFreeInternal_28void__29($1)
           }
           HEAP32[$5 + 12 >> 2] = $9;
           HEAP8[$5 + 16 | 0] = 1;
           HEAP32[$5 + 8 >> 2] = $24;
           $3 = HEAP32[$5 + 4 >> 2];
          }
          $1 = HEAP32[$5 + 12 >> 2] + ($3 << 5) | 0;
          HEAP32[$1 + 24 >> 2] = 0;
          HEAP32[$1 + 28 >> 2] = 0;
          HEAPF64[$1 + 16 >> 3] = $36;
          HEAPF64[$1 + 8 >> 3] = $29;
          HEAPF64[$1 >> 3] = $21;
          HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
         }
         $2 = $2 + 1 | 0;
         if (($2 | 0) >= ($17 | 0)) {
          break label$515
         }
         $3 = HEAP32[$7 + 12 >> 2];
         continue;
        };
       }
       if (($4 | 0) == ($17 | 0)) {
        break label$313
       }
       $3 = HEAP32[$7 + 12 >> 2];
       $1 = $4;
       continue;
      };
     }
     if (($8 | 0) != ($17 | 0)) {
      continue
     }
     break;
    }
   }
   btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20double_2c_20double_29($14 + 184 | 0, HEAP32[$14 + 76 >> 2], HEAP32[$14 + 68 >> 2]);
   $1 = HEAP32[$14 + 76 >> 2];
   if (!(!$1 | !HEAPU8[$14 + 80 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   $1 = HEAP32[$14 + 172 >> 2];
   if (!(!$1 | !HEAPU8[$14 + 176 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   $1 = HEAP32[$14 + 44 >> 2];
   if (!$1 | !HEAPU8[$14 + 48 | 0]) {
    break label$13
   }
   btAlignedFreeInternal_28void__29($1);
  }
  $19 = HEAP32[$14 + 228 >> 2];
  label$27 : {
   if (!$19) {
    break label$27
   }
   $47 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($19 << 5);
   $1 = $14 + 95 | 0;
   HEAP8[$1 | 0] = 0;
   HEAP8[$1 + 1 | 0] = 0;
   HEAP8[$1 + 2 | 0] = 0;
   HEAP8[$1 + 3 | 0] = 0;
   HEAP8[$1 + 4 | 0] = 0;
   HEAP8[$1 + 5 | 0] = 0;
   HEAP8[$1 + 6 | 0] = 0;
   HEAP8[$1 + 7 | 0] = 0;
   $1 = $14 - -64 | 0;
   $8 = $1 + 24 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   $8 = $1 + 16 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   $8 = $1 + 8 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$14 + 64 >> 2] = 0;
   HEAP32[$14 + 68 >> 2] = 0;
   $1 = $1 | 7;
   $5 = 0;
   $39 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($19, 56));
   if (($19 | 0) != 1) {
    $2 = $39 + 60 | 0;
    $13 = $19 & 2147483646;
    while (1) {
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     $15 = $2 - 56 | 0;
     $8 = $15;
     HEAP32[$8 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     HEAP8[$2 - 44 | 0] = 1;
     $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
     $9 = $2 - 36 | 0;
     $8 = $9;
     $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
     HEAP8[$8 | 0] = $3;
     $16 = $3 >>> 8 | 0;
     HEAP8[$8 + 1 | 0] = $16;
     $17 = $3 >>> 16 | 0;
     HEAP8[$8 + 2 | 0] = $17;
     $7 = $3 >>> 24 | 0;
     HEAP8[$8 + 3 | 0] = $7;
     HEAP8[$8 + 4 | 0] = $4;
     $18 = $4 >>> 8 | 0;
     HEAP8[$8 + 5 | 0] = $18;
     $24 = $4 >>> 16 | 0;
     HEAP8[$8 + 6 | 0] = $24;
     $12 = $4 >>> 24 | 0;
     HEAP8[$8 + 7 | 0] = $12;
     HEAP8[$2 + 12 | 0] = 1;
     HEAP32[$2 + 8 >> 2] = 0;
     $8 = $2 + 20 | 0;
     HEAP8[$8 | 0] = $3;
     HEAP8[$8 + 1 | 0] = $16;
     HEAP8[$8 + 2 | 0] = $17;
     HEAP8[$8 + 3 | 0] = $7;
     HEAP8[$8 + 4 | 0] = $4;
     HEAP8[$8 + 5 | 0] = $18;
     HEAP8[$8 + 6 | 0] = $24;
     HEAP8[$8 + 7 | 0] = $12;
     HEAP32[$15 + 8 >> 2] = 0;
     $8 = $1 + 8 | 0;
     $15 = HEAPU8[$8 + 4 | 0] | HEAPU8[$8 + 5 | 0] << 8 | (HEAPU8[$8 + 6 | 0] << 16 | HEAPU8[$8 + 7 | 0] << 24);
     $4 = $9 + 8 | 0;
     $17 = HEAPU8[$8 | 0] | HEAPU8[$8 + 1 | 0] << 8 | (HEAPU8[$8 + 2 | 0] << 16 | HEAPU8[$8 + 3 | 0] << 24);
     $8 = $17;
     HEAP8[$4 | 0] = $8;
     HEAP8[$4 + 1 | 0] = $8 >>> 8;
     HEAP8[$4 + 2 | 0] = $8 >>> 16;
     HEAP8[$4 + 3 | 0] = $8 >>> 24;
     HEAP8[$4 + 4 | 0] = $15;
     $18 = $15 >>> 8 | 0;
     HEAP8[$4 + 5 | 0] = $18;
     $24 = $15 >>> 16 | 0;
     HEAP8[$4 + 6 | 0] = $24;
     $12 = $15 >>> 24 | 0;
     HEAP8[$4 + 7 | 0] = $12;
     $8 = $1 + 16 | 0;
     $16 = HEAPU8[$8 + 4 | 0] | HEAPU8[$8 + 5 | 0] << 8 | (HEAPU8[$8 + 6 | 0] << 16 | HEAPU8[$8 + 7 | 0] << 24);
     $4 = $9 + 16 | 0;
     $7 = HEAPU8[$8 | 0] | HEAPU8[$8 + 1 | 0] << 8 | (HEAPU8[$8 + 2 | 0] << 16 | HEAPU8[$8 + 3 | 0] << 24);
     HEAP8[$4 | 0] = $7;
     HEAP8[$4 + 1 | 0] = $7 >>> 8;
     HEAP8[$4 + 2 | 0] = $7 >>> 16;
     HEAP8[$4 + 3 | 0] = $7 >>> 24;
     HEAP8[$4 + 4 | 0] = $16;
     $30 = $16 >>> 8 | 0;
     HEAP8[$4 + 5 | 0] = $30;
     $33 = $16 >>> 16 | 0;
     HEAP8[$4 + 6 | 0] = $33;
     $23 = $16 >>> 24 | 0;
     HEAP8[$4 + 7 | 0] = $23;
     $4 = $1 + 24 | 0;
     $8 = HEAPU8[$4 + 4 | 0] | HEAPU8[$4 + 5 | 0] << 8 | (HEAPU8[$4 + 6 | 0] << 16 | HEAPU8[$4 + 7 | 0] << 24);
     $3 = $9 + 24 | 0;
     $4 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
     HEAP8[$3 | 0] = $4;
     HEAP8[$3 + 1 | 0] = $4 >>> 8;
     HEAP8[$3 + 2 | 0] = $4 >>> 16;
     HEAP8[$3 + 3 | 0] = $4 >>> 24;
     HEAP8[$3 + 4 | 0] = $8;
     HEAP8[$3 + 5 | 0] = $8 >>> 8;
     HEAP8[$3 + 6 | 0] = $8 >>> 16;
     HEAP8[$3 + 7 | 0] = $8 >>> 24;
     $3 = $2 + 28 | 0;
     HEAP8[$3 | 0] = $17;
     HEAP8[$3 + 1 | 0] = $17 >>> 8;
     HEAP8[$3 + 2 | 0] = $17 >>> 16;
     HEAP8[$3 + 3 | 0] = $17 >>> 24;
     HEAP8[$3 + 4 | 0] = $15;
     HEAP8[$3 + 5 | 0] = $18;
     HEAP8[$3 + 6 | 0] = $24;
     HEAP8[$3 + 7 | 0] = $12;
     $3 = $2 + 36 | 0;
     HEAP8[$3 | 0] = $7;
     HEAP8[$3 + 1 | 0] = $7 >>> 8;
     HEAP8[$3 + 2 | 0] = $7 >>> 16;
     HEAP8[$3 + 3 | 0] = $7 >>> 24;
     HEAP8[$3 + 4 | 0] = $16;
     HEAP8[$3 + 5 | 0] = $30;
     HEAP8[$3 + 6 | 0] = $33;
     HEAP8[$3 + 7 | 0] = $23;
     $3 = $2 + 44 | 0;
     HEAP8[$3 | 0] = $4;
     HEAP8[$3 + 1 | 0] = $4 >>> 8;
     HEAP8[$3 + 2 | 0] = $4 >>> 16;
     HEAP8[$3 + 3 | 0] = $4 >>> 24;
     HEAP8[$3 + 4 | 0] = $8;
     HEAP8[$3 + 5 | 0] = $8 >>> 8;
     HEAP8[$3 + 6 | 0] = $8 >>> 16;
     HEAP8[$3 + 7 | 0] = $8 >>> 24;
     $2 = $2 + 112 | 0;
     $5 = $5 + 2 | 0;
     if (($13 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if (!($19 & 1)) {
    break label$27
   }
   $8 = Math_imul($5, 56) + $39 | 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$8 + 8 >> 2] = 0;
   HEAP8[$8 + 16 | 0] = 1;
   $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $4 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP8[$8 + 24 | 0] = $4;
   HEAP8[$8 + 25 | 0] = $4 >>> 8;
   HEAP8[$8 + 26 | 0] = $4 >>> 16;
   HEAP8[$8 + 27 | 0] = $4 >>> 24;
   HEAP8[$8 + 28 | 0] = $2;
   HEAP8[$8 + 29 | 0] = $2 >>> 8;
   HEAP8[$8 + 30 | 0] = $2 >>> 16;
   HEAP8[$8 + 31 | 0] = $2 >>> 24;
   HEAP32[$8 + 12 >> 2] = 0;
   $2 = $1 + 8 | 0;
   $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $4 = $8 + 32 | 0;
   $2 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   HEAP8[$4 | 0] = $2;
   HEAP8[$4 + 1 | 0] = $2 >>> 8;
   HEAP8[$4 + 2 | 0] = $2 >>> 16;
   HEAP8[$4 + 3 | 0] = $2 >>> 24;
   HEAP8[$4 + 4 | 0] = $3;
   HEAP8[$4 + 5 | 0] = $3 >>> 8;
   HEAP8[$4 + 6 | 0] = $3 >>> 16;
   HEAP8[$4 + 7 | 0] = $3 >>> 24;
   $2 = $1 + 16 | 0;
   $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $4 = $8 + 40 | 0;
   $2 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   HEAP8[$4 | 0] = $2;
   HEAP8[$4 + 1 | 0] = $2 >>> 8;
   HEAP8[$4 + 2 | 0] = $2 >>> 16;
   HEAP8[$4 + 3 | 0] = $2 >>> 24;
   HEAP8[$4 + 4 | 0] = $3;
   HEAP8[$4 + 5 | 0] = $3 >>> 8;
   HEAP8[$4 + 6 | 0] = $3 >>> 16;
   HEAP8[$4 + 7 | 0] = $3 >>> 24;
   $1 = $1 + 24 | 0;
   $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $8 = $8 + 48 | 0;
   $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP8[$8 | 0] = $1;
   HEAP8[$8 + 1 | 0] = $1 >>> 8;
   HEAP8[$8 + 2 | 0] = $1 >>> 16;
   HEAP8[$8 + 3 | 0] = $1 >>> 24;
   HEAP8[$8 + 4 | 0] = $2;
   HEAP8[$8 + 5 | 0] = $2 >>> 8;
   HEAP8[$8 + 6 | 0] = $2 >>> 16;
   HEAP8[$8 + 7 | 0] = $2 >>> 24;
  }
  $1 = HEAP32[$0 + 96 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  $8 = HEAP32[$14 + 188 >> 2];
  if (!(($2 | 0) >= ($8 | 0) | ($8 | 0) <= HEAP32[$1 + 12 >> 2])) {
   label$32 : {
    if (!$8) {
     $4 = 0;
     break label$32;
    }
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 5);
    $2 = HEAP32[$1 + 8 >> 2];
   }
   label$34 : {
    if (($2 | 0) <= 0) {
     break label$34
    }
    $9 = 0;
    if (($2 | 0) != 1) {
     $16 = $2 & -2;
     $3 = 0;
     while (1) {
      $15 = HEAP32[$1 + 16 >> 2] + $3 | 0;
      $17 = HEAP32[$15 + 4 >> 2];
      $5 = $3 + $4 | 0;
      HEAP32[$5 >> 2] = HEAP32[$15 >> 2];
      HEAP32[$5 + 4 >> 2] = $17;
      $17 = $15 + 24 | 0;
      $7 = HEAP32[$17 + 4 >> 2];
      $13 = $5 + 24 | 0;
      HEAP32[$13 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$13 + 4 >> 2] = $7;
      $17 = $15 + 16 | 0;
      $7 = HEAP32[$17 + 4 >> 2];
      $13 = $5 + 16 | 0;
      HEAP32[$13 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$13 + 4 >> 2] = $7;
      $15 = $15 + 8 | 0;
      $17 = HEAP32[$15 + 4 >> 2];
      $7 = $5 + 8 | 0;
      HEAP32[$7 >> 2] = HEAP32[$15 >> 2];
      HEAP32[$7 + 4 >> 2] = $17;
      $15 = HEAP32[$1 + 16 >> 2] + $3 | 0;
      $17 = $15 + 40 | 0;
      $7 = HEAP32[$17 + 4 >> 2];
      $13 = $5 + 40 | 0;
      HEAP32[$13 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$13 + 4 >> 2] = $7;
      $17 = $15 + 48 | 0;
      $7 = HEAP32[$17 + 4 >> 2];
      $13 = $5 + 48 | 0;
      HEAP32[$13 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$13 + 4 >> 2] = $7;
      $17 = $15 + 56 | 0;
      $7 = HEAP32[$17 + 4 >> 2];
      $13 = $5 + 56 | 0;
      HEAP32[$13 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$13 + 4 >> 2] = $7;
      $15 = $15 + 32 | 0;
      $17 = HEAP32[$15 + 4 >> 2];
      $5 = $5 + 32 | 0;
      HEAP32[$5 >> 2] = HEAP32[$15 >> 2];
      HEAP32[$5 + 4 >> 2] = $17;
      $3 = $3 - -64 | 0;
      $9 = $9 + 2 | 0;
      if (($16 | 0) != ($9 | 0)) {
       continue
      }
      break;
     };
    }
    if (!($2 & 1)) {
     break label$34
    }
    $3 = $9 << 5;
    $2 = $3 + $4 | 0;
    $3 = $3 + HEAP32[$1 + 16 >> 2] | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $5;
    $5 = $3 + 24 | 0;
    $15 = HEAP32[$5 + 4 >> 2];
    $16 = $2 + 24 | 0;
    HEAP32[$16 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$16 + 4 >> 2] = $15;
    $5 = $3 + 16 | 0;
    $15 = HEAP32[$5 + 4 >> 2];
    $16 = $2 + 16 | 0;
    HEAP32[$16 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$16 + 4 >> 2] = $15;
    $3 = $3 + 8 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $5;
   }
   $2 = HEAP32[$1 + 16 >> 2];
   if (!(!$2 | !HEAPU8[$1 + 20 | 0])) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$1 + 16 >> 2] = $4;
   HEAP8[$1 + 20 | 0] = 1;
   HEAP32[$1 + 12 >> 2] = $8;
  }
  HEAP32[$1 + 8 >> 2] = $8;
  label$38 : {
   if (($8 | 0) <= 0) {
    break label$38
   }
   $5 = 0;
   if (($8 | 0) != 1) {
    $3 = $8 & -2;
    $2 = 32;
    while (1) {
     $1 = (HEAP32[$14 + 196 >> 2] + $2 | 0) - 32 | 0;
     $15 = HEAP32[$1 + 4 >> 2];
     $4 = (HEAP32[HEAP32[$0 + 96 >> 2] + 16 >> 2] + $2 | 0) - 32 | 0;
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$4 + 4 >> 2] = $15;
     $15 = $1 + 24 | 0;
     $16 = HEAP32[$15 + 4 >> 2];
     $17 = $4 + 24 | 0;
     HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$17 + 4 >> 2] = $16;
     $15 = $1 + 16 | 0;
     $16 = HEAP32[$15 + 4 >> 2];
     $17 = $4 + 16 | 0;
     HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$17 + 4 >> 2] = $16;
     $1 = $1 + 8 | 0;
     $15 = HEAP32[$1 + 4 >> 2];
     $4 = $4 + 8 | 0;
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$4 + 4 >> 2] = $15;
     $1 = HEAP32[$14 + 196 >> 2] + $2 | 0;
     $15 = HEAP32[$1 + 4 >> 2];
     $4 = HEAP32[HEAP32[$0 + 96 >> 2] + 16 >> 2] + $2 | 0;
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$4 + 4 >> 2] = $15;
     $15 = $1 + 24 | 0;
     $16 = HEAP32[$15 + 4 >> 2];
     $17 = $4 + 24 | 0;
     HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$17 + 4 >> 2] = $16;
     $15 = $1 + 16 | 0;
     $16 = HEAP32[$15 + 4 >> 2];
     $17 = $4 + 16 | 0;
     HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$17 + 4 >> 2] = $16;
     $1 = $1 + 8 | 0;
     $15 = HEAP32[$1 + 4 >> 2];
     $4 = $4 + 8 | 0;
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$4 + 4 >> 2] = $15;
     $2 = $2 - -64 | 0;
     $5 = $5 + 2 | 0;
     if (($3 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if (!($8 & 1)) {
    break label$38
   }
   $8 = $5 << 5;
   $1 = $8 + HEAP32[HEAP32[$0 + 96 >> 2] + 16 >> 2] | 0;
   $8 = $8 + HEAP32[$14 + 196 >> 2] | 0;
   $2 = HEAP32[$8 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $2 = $8 + 24 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $1 + 24 | 0;
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $8 + 16 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $1 + 16 | 0;
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $8 = $8 + 8 | 0;
   $2 = HEAP32[$8 + 4 >> 2];
   $1 = $1 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
  }
  label$4123 : {
   label$42 : {
    label$43 : {
     label$44 : {
      if (!$19) {
       break label$44
      }
      while (1) {
       $1 = Math_imul($31, 56) + $39 | 0;
       $24 = $1 + 16 | 0;
       $16 = $1 + 12 | 0;
       $12 = $1 + 8 | 0;
       $15 = $1 + 4 | 0;
       $2 = HEAP32[$1 + 4 >> 2];
       $8 = 0;
       $30 = HEAP32[$14 + 216 >> 2] + Math_imul(HEAP32[HEAP32[$14 + 236 >> 2] + ($31 << 2) >> 2], 12) | 0;
       $7 = $30;
       label$46 : {
        while (1) {
         $33 = HEAP32[(Math_imul(HEAP32[$7 + 4 >> 2], 12) + $7 | 0) + 8 >> 2];
         label$48 : {
          if (HEAP32[$12 >> 2] != ($2 | 0)) {
           break label$48
          }
          $13 = $2 ? $2 << 1 : 1;
          if (($13 | 0) <= ($2 | 0)) {
           break label$48
          }
          label$49 : {
           if (!$13) {
            $4 = 0;
            break label$49;
           }
           $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2);
           $2 = HEAP32[$15 >> 2];
          }
          $17 = HEAP32[$16 >> 2];
          label$51 : {
           label$5224 : {
            if (($2 | 0) > 0) {
             $5 = $2 & 3;
             $9 = 0;
             if ($2 - 1 >>> 0 >= 3) {
              $23 = $2 & -4;
              $2 = 0;
              while (1) {
               $3 = $2 + $4 | 0;
               $18 = $2 + $17 | 0;
               HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
               HEAP32[$3 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
               HEAP32[$3 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
               HEAP32[$3 + 12 >> 2] = HEAP32[$18 + 12 >> 2];
               $2 = $2 + 16 | 0;
               $9 = $9 + 4 | 0;
               if (($23 | 0) != ($9 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$5) {
              break label$5224
             }
             $3 = $9 << 2;
             $2 = $3 + $4 | 0;
             $3 = $3 + $17 | 0;
             while (1) {
              HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
              $2 = $2 + 4 | 0;
              $3 = $3 + 4 | 0;
              $5 = $5 - 1 | 0;
              if ($5) {
               continue
              }
              break;
             };
             break label$5224;
            }
            if (!$17) {
             break label$51
            }
           }
           if (HEAPU8[$24 | 0]) {
            btAlignedFreeInternal_28void__29($17)
           }
           $2 = HEAP32[$15 >> 2];
          }
          HEAP32[$16 >> 2] = $4;
          HEAP8[$24 | 0] = 1;
          HEAP32[$12 >> 2] = $13;
         }
         HEAP32[HEAP32[$16 >> 2] + ($2 << 2) >> 2] = $33;
         $2 = HEAP32[$15 >> 2] + 1 | 0;
         HEAP32[$15 >> 2] = $2;
         label$58 : {
          if (($8 | 0) <= 1) {
           $3 = HEAP32[$14 + 196 >> 2];
           $4 = $3 + ($33 << 5) | 0;
           $21 = HEAPF64[$4 + 8 >> 3];
           $3 = $3 + (HEAP32[$7 + 8 >> 2] << 5) | 0;
           $29 = HEAPF64[$3 + 8 >> 3];
           $26 = HEAPF64[$4 >> 3];
           $32 = HEAPF64[$3 >> 3];
           $27 = HEAPF64[$4 + 16 >> 3];
           $37 = HEAPF64[$3 + 16 >> 3];
           $4 = ($14 - -64 | 0) + ($8 << 5) | 0;
           HEAP32[$4 + 24 >> 2] = 0;
           HEAP32[$4 + 28 >> 2] = 0;
           $27 = $37 - $27;
           $26 = $32 - $26;
           $29 = $29 - $21;
           $21 = 1.0 / Math_sqrt($27 * $27 + ($26 * $26 + $29 * $29));
           HEAPF64[$4 + 16 >> 3] = $27 * $21;
           HEAPF64[$4 + 8 >> 3] = $29 * $21;
           HEAPF64[$4 >> 3] = $26 * $21;
           $8 = $8 + 1 | 0;
           $4 = Math_imul(HEAP32[$7 + 4 >> 2], 12) + $7 | 0;
           $7 = Math_imul(HEAP32[$4 >> 2], 12) + $4 | 0;
           if (($30 | 0) != ($7 | 0)) {
            continue
           }
           if (($8 | 0) == 2) {
            break label$58
           }
           $8 = ($31 << 5) + $47 | 0;
           HEAP32[$8 >> 2] = 0;
           HEAP32[$8 + 4 >> 2] = 0;
           $2 = $8 + 24 | 0;
           HEAP32[$2 >> 2] = 0;
           HEAP32[$2 + 4 >> 2] = 0;
           $2 = $8 + 16 | 0;
           HEAP32[$2 >> 2] = 0;
           HEAP32[$2 + 4 >> 2] = 0;
           $8 = $8 + 8 | 0;
           HEAP32[$8 >> 2] = 0;
           HEAP32[$8 + 4 >> 2] = 0;
           break label$46;
          }
          $8 = 2;
          $4 = Math_imul(HEAP32[$7 + 4 >> 2], 12) + $7 | 0;
          $7 = Math_imul(HEAP32[$4 >> 2], 12) + $4 | 0;
          if (($30 | 0) != ($7 | 0)) {
           continue
          }
         }
         break;
        };
        $8 = ($31 << 5) + $47 | 0;
        HEAP32[$8 + 24 >> 2] = 0;
        HEAP32[$8 + 28 >> 2] = 0;
        $27 = HEAPF64[$14 + 64 >> 3];
        $26 = HEAPF64[$14 + 104 >> 3];
        $29 = HEAPF64[$14 + 96 >> 3];
        $32 = HEAPF64[$14 + 72 >> 3];
        $21 = $27 * $26 - $29 * $32;
        $34 = $21;
        $35 = $21 * $21;
        $21 = $32;
        $32 = HEAPF64[$14 + 112 >> 3];
        $38 = $26;
        $26 = HEAPF64[$14 + 80 >> 3];
        $21 = $21 * $32 - $38 * $26;
        $27 = $26 * $29 - $32 * $27;
        $26 = 1.0 / Math_sqrt($35 + ($21 * $21 + $27 * $27));
        HEAPF64[$8 + 16 >> 3] = $34 * $26;
        HEAPF64[$8 + 8 >> 3] = $27 * $26;
        $21 = $21 * $26;
        HEAPF64[$8 >> 3] = $21;
        HEAPF64[$1 + 24 >> 3] = $21;
        HEAPF64[$1 + 32 >> 3] = HEAPF64[$8 + 8 >> 3];
        HEAPF64[$1 + 40 >> 3] = HEAPF64[$8 + 16 >> 3];
        $8 = $1 + 48 | 0;
        HEAP32[$8 >> 2] = 1073741824;
        HEAP32[$8 + 4 >> 2] = 1177108057;
       }
       $18 = HEAP32[$15 >> 2];
       label$60 : {
        if (($18 | 0) <= 0) {
         $21 = 1000000015047466219876688.0e6;
         break label$60;
        }
        $8 = ($31 << 5) + $47 | 0;
        $27 = HEAPF64[$8 + 16 >> 3];
        $26 = HEAPF64[$8 + 8 >> 3];
        $29 = HEAPF64[$8 >> 3];
        $4 = HEAP32[HEAP32[$0 + 96 >> 2] + 16 >> 2];
        $2 = HEAP32[$16 >> 2];
        $21 = 1000000015047466219876688.0e6;
        while (1) {
         $8 = $4 + (HEAP32[$2 >> 2] << 5) | 0;
         $32 = HEAPF64[$8 + 16 >> 3] * $27 + (HEAPF64[$8 >> 3] * $29 + HEAPF64[$8 + 8 >> 3] * $26);
         $21 = $21 > $32 ? $32 : $21;
         $2 = $2 + 4 | 0;
         $18 = $18 - 1 | 0;
         if ($18) {
          continue
         }
         break;
        };
       }
       HEAPF64[$1 + 48 >> 3] = -$21;
       $31 = $31 + 1 | 0;
       if (($31 | 0) != ($19 | 0)) {
        continue
       }
       break;
      };
      if (!$19) {
       break label$44
      }
      $1 = 0;
      $5 = 0;
      $17 = 0;
      $8 = 0;
      while (1) {
       label$64 : {
        if (($5 | 0) != ($8 | 0)) {
         break label$64
        }
        $8 = $5 ? $5 << 1 : 1;
        if ($5 >>> 0 >= $8 >>> 0) {
         $8 = $5;
         break label$64;
        }
        $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2);
        label$66 : {
         label$67 : {
          if ($5) {
           $7 = 0;
           if ($5 - 1 >>> 0 >= 3) {
            $16 = $5 & -4;
            $2 = 0;
            while (1) {
             $3 = $2 + $4 | 0;
             $15 = $2 + $17 | 0;
             HEAP32[$3 >> 2] = HEAP32[$15 >> 2];
             HEAP32[$3 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
             HEAP32[$3 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
             HEAP32[$3 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
             $2 = $2 + 16 | 0;
             $7 = $7 + 4 | 0;
             if (($16 | 0) != ($7 | 0)) {
              continue
             }
             break;
            };
           }
           if (!($5 & 3)) {
            break label$67
           }
           $18 = $1 & 3;
           $3 = $7 << 2;
           $2 = $3 + $4 | 0;
           $3 = $3 + $17 | 0;
           while (1) {
            HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
            $2 = $2 + 4 | 0;
            $3 = $3 + 4 | 0;
            $18 = $18 - 1 | 0;
            if ($18) {
             continue
            }
            break;
           };
           break label$67;
          }
          if ($17) {
           break label$67
          }
          $8 = 1;
          break label$66;
         }
         btAlignedFreeInternal_28void__29($17);
        }
        $17 = $4;
       }
       HEAP32[($5 << 2) + $17 >> 2] = $5;
       $1 = $1 + 1 | 0;
       $5 = $5 + 1 | 0;
       if (($19 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
      $31 = $14 + 71 | 0;
      $49 = $14 + 56 | 0;
      $15 = $19;
      while (1) {
       $1 = $15 - 1 | 0;
       $2 = HEAP32[($1 << 2) + $17 >> 2];
       $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4);
       HEAP32[$8 >> 2] = $2;
       label$7325 : {
        label$74 : {
         if (($15 | 0) < 2) {
          $15 = $1;
          $16 = 1;
          break label$74;
         }
         $2 = Math_imul($2, 56) + $39 | 0;
         $21 = HEAPF64[$2 + 24 >> 3];
         $27 = HEAPF64[$2 + 40 >> 3];
         $26 = HEAPF64[$2 + 32 >> 3];
         $2 = $15 - 2 | 0;
         $16 = 1;
         $15 = $1;
         $13 = 1;
         while (1) {
          $5 = $2;
          $9 = HEAP32[($2 << 2) + $17 >> 2];
          $1 = Math_imul($9, 56) + $39 | 0;
          if ($27 * HEAPF64[$1 + 40 >> 3] + ($21 * HEAPF64[$1 + 24 >> 3] + $26 * HEAPF64[$1 + 32 >> 3]) > .9990000128746033) {
           label$78 : {
            if (($13 | 0) != ($16 | 0)) {
             $4 = $8;
             break label$78;
            }
            $13 = $16 ? $16 << 1 : 1;
            if (($13 | 0) <= ($16 | 0)) {
             $4 = $8;
             $13 = $16;
             break label$78;
            }
            if ($13) {
             $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2)
            } else {
             $4 = 0
            }
            label$83 : {
             if (($16 | 0) > 0) {
              $7 = $16 & 3;
              $1 = 0;
              if ($16 - 1 >>> 0 >= 3) {
               $24 = $16 & -4;
               $2 = 0;
               while (1) {
                $3 = $2 + $4 | 0;
                $18 = $2 + $8 | 0;
                HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
                HEAP32[$3 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
                HEAP32[$3 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
                HEAP32[$3 + 12 >> 2] = HEAP32[$18 + 12 >> 2];
                $2 = $2 + 16 | 0;
                $1 = $1 + 4 | 0;
                if (($24 | 0) != ($1 | 0)) {
                 continue
                }
                break;
               };
              }
              if (!$7) {
               break label$83
              }
              $1 = $1 << 2;
              $2 = $1 + $4 | 0;
              $3 = $1 + $8 | 0;
              while (1) {
               HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
               $2 = $2 + 4 | 0;
               $3 = $3 + 4 | 0;
               $7 = $7 - 1 | 0;
               if ($7) {
                continue
               }
               break;
              };
              break label$83;
             }
             if (!$8) {
              break label$78
             }
            }
            btAlignedFreeInternal_28void__29($8);
           }
           HEAP32[($16 << 2) + $4 >> 2] = $9;
           $16 = $16 + 1 | 0;
           label$88 : {
            if (($15 | 0) <= 0) {
             break label$88
            }
            $3 = 0;
            $2 = $17;
            while (1) {
             if (HEAP32[$2 >> 2] != ($9 | 0)) {
              $2 = $2 + 4 | 0;
              $3 = $3 + 1 | 0;
              if (($15 | 0) != ($3 | 0)) {
               continue
              }
              break label$88;
             }
             break;
            };
            if (($3 | 0) >= ($15 | 0)) {
             break label$88
            }
            $15 = $15 - 1 | 0;
            $1 = ($15 << 2) + $17 | 0;
            HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
            HEAP32[$1 >> 2] = $9;
           }
           $8 = $4;
          }
          $2 = $5 - 1 | 0;
          if (($5 | 0) > 0) {
           continue
          }
          break;
         };
         label$91 : {
          if (($16 | 0) > 1) {
           $7 = 0;
           HEAP32[$14 + 172 >> 2] = 0;
           HEAP8[$14 + 176 | 0] = 1;
           HEAP32[$14 + 164 >> 2] = 0;
           HEAP32[$14 + 168 >> 2] = 0;
           HEAP32[$49 >> 2] = 0;
           HEAP32[$49 + 4 >> 2] = 0;
           $1 = $14 + 32 | 0;
           $2 = $1 + 16 | 0;
           HEAP32[$2 >> 2] = 0;
           HEAP32[$2 + 4 >> 2] = 0;
           $1 = $1 + 8 | 0;
           HEAP32[$1 >> 2] = 0;
           HEAP32[$1 + 4 >> 2] = 0;
           HEAP32[$14 + 32 >> 2] = 0;
           HEAP32[$14 + 36 >> 2] = 0;
           $21 = 0.0;
           $27 = 0.0;
           $26 = 0.0;
           $18 = 0;
           while (1) {
            $1 = Math_imul(HEAP32[($18 << 2) + $8 >> 2], 56) + $39 | 0;
            $29 = HEAPF64[$1 + 32 >> 3];
            $32 = HEAPF64[$1 + 40 >> 3];
            HEAPF64[$14 + 32 >> 3] = HEAPF64[$1 + 24 >> 3] + $26;
            HEAPF64[$14 + 48 >> 3] = $32 + $21;
            HEAPF64[$14 + 40 >> 3] = $29 + $27;
            $5 = HEAP32[$1 + 4 >> 2];
            if (($5 | 0) > 0) {
             $28 = $1 + 4 | 0;
             $11 = $1 + 12 | 0;
             $1 = 0;
             while (1) {
              $12 = HEAP32[HEAP32[$11 >> 2] + ($1 << 2) >> 2];
              $4 = HEAP32[HEAP32[$0 + 96 >> 2] + 16 >> 2];
              label$96 : {
               if (($7 | 0) > 0) {
                $2 = HEAP32[$14 + 172 >> 2] + 40 | 0;
                $3 = $7;
                while (1) {
                 if (($12 | 0) == HEAP32[$2 >> 2]) {
                  break label$96
                 }
                 $2 = $2 + 48 | 0;
                 $3 = $3 - 1 | 0;
                 if ($3) {
                  continue
                 }
                 break;
                };
               }
               $2 = $4 + ($12 << 5) | 0;
               $3 = $2 + 24 | 0;
               $5 = HEAP32[$3 + 4 >> 2];
               $4 = $14 - -64 | 0;
               $33 = $4 + 24 | 0;
               $9 = $33;
               HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
               HEAP32[$9 + 4 >> 2] = $5;
               $3 = $2 + 16 | 0;
               $5 = HEAP32[$3 + 4 >> 2];
               $23 = $4 + 16 | 0;
               $9 = $23;
               HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
               HEAP32[$9 + 4 >> 2] = $5;
               $3 = $2 + 8 | 0;
               $5 = HEAP32[$3 + 4 >> 2];
               $22 = $4 + 8 | 0;
               $4 = $22;
               HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
               HEAP32[$4 + 4 >> 2] = $5;
               $4 = HEAP32[$2 + 4 >> 2];
               HEAP32[$14 + 64 >> 2] = HEAP32[$2 >> 2];
               HEAP32[$14 + 68 >> 2] = $4;
               label$99 : {
                if (HEAP32[$14 + 168 >> 2] != ($7 | 0)) {
                 break label$99
                }
                $30 = $7 ? $7 << 1 : 1;
                if (($30 | 0) <= ($7 | 0)) {
                 break label$99
                }
                label$100 : {
                 if (!$30) {
                  $13 = 0;
                  break label$100;
                 }
                 $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($30, 48));
                 $7 = HEAP32[$14 + 164 >> 2];
                }
                $24 = HEAP32[$14 + 172 >> 2];
                label$102 : {
                 if (($7 | 0) <= 0) {
                  break label$102
                 }
                 $9 = $7 & 3;
                 $4 = 0;
                 if ($7 - 1 >>> 0 >= 3) {
                  $10 = $7 & -4;
                  $5 = 0;
                  while (1) {
                   $2 = $5 + $24 | 0;
                   $6 = HEAP32[$2 + 4 >> 2];
                   $3 = $5 + $13 | 0;
                   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
                   HEAP32[$3 + 4 >> 2] = $6;
                   $6 = $2 + 40 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 40 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 32 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 32 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 24 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 24 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 16 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 16 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 8 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 8 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 48 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 48 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 56 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 56 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 - -64 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 - -64 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 72 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 72 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 80 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 80 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 88 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 88 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 136 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 136 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 128 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 128 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 120 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 120 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 112 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 112 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 104 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 104 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 96 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 96 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 144 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 144 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 152 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 152 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 160 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 160 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 168 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 168 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $6 = $2 + 176 | 0;
                   $20 = HEAP32[$6 + 4 >> 2];
                   $25 = $3 + 176 | 0;
                   HEAP32[$25 >> 2] = HEAP32[$6 >> 2];
                   HEAP32[$25 + 4 >> 2] = $20;
                   $2 = $2 + 184 | 0;
                   $6 = HEAP32[$2 + 4 >> 2];
                   $3 = $3 + 184 | 0;
                   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
                   HEAP32[$3 + 4 >> 2] = $6;
                   $5 = $5 + 192 | 0;
                   $4 = $4 + 4 | 0;
                   if (($10 | 0) != ($4 | 0)) {
                    continue
                   }
                   break;
                  };
                 }
                 if (!$9) {
                  break label$102
                 }
                 $4 = Math_imul($4, 48);
                 $2 = $4 + $13 | 0;
                 $3 = $4 + $24 | 0;
                 while (1) {
                  $4 = HEAP32[$3 + 4 >> 2];
                  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
                  HEAP32[$2 + 4 >> 2] = $4;
                  $4 = $3 + 40 | 0;
                  $5 = HEAP32[$4 + 4 >> 2];
                  $10 = $2 + 40 | 0;
                  HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
                  HEAP32[$10 + 4 >> 2] = $5;
                  $4 = $3 + 32 | 0;
                  $5 = HEAP32[$4 + 4 >> 2];
                  $10 = $2 + 32 | 0;
                  HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
                  HEAP32[$10 + 4 >> 2] = $5;
                  $4 = $3 + 24 | 0;
                  $5 = HEAP32[$4 + 4 >> 2];
                  $10 = $2 + 24 | 0;
                  HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
                  HEAP32[$10 + 4 >> 2] = $5;
                  $4 = $3 + 16 | 0;
                  $5 = HEAP32[$4 + 4 >> 2];
                  $10 = $2 + 16 | 0;
                  HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
                  HEAP32[$10 + 4 >> 2] = $5;
                  $4 = $3 + 8 | 0;
                  $5 = HEAP32[$4 + 4 >> 2];
                  $10 = $2 + 8 | 0;
                  HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
                  HEAP32[$10 + 4 >> 2] = $5;
                  $2 = $2 + 48 | 0;
                  $3 = $3 + 48 | 0;
                  $9 = $9 - 1 | 0;
                  if ($9) {
                   continue
                  }
                  break;
                 };
                }
                if (!(!$24 | !HEAPU8[$14 + 176 | 0])) {
                 btAlignedFreeInternal_28void__29($24);
                 $7 = HEAP32[$14 + 164 >> 2];
                }
                HEAP32[$14 + 172 >> 2] = $13;
                HEAP8[$14 + 176 | 0] = 1;
                HEAP32[$14 + 168 >> 2] = $30;
               }
               $4 = HEAP32[$14 + 68 >> 2];
               $2 = HEAP32[$14 + 172 >> 2] + Math_imul($7, 48) | 0;
               HEAP32[$2 >> 2] = HEAP32[$14 + 64 >> 2];
               HEAP32[$2 + 4 >> 2] = $4;
               HEAP32[$2 + 40 >> 2] = $12;
               $4 = HEAP32[$22 + 4 >> 2];
               $3 = $2 + 8 | 0;
               HEAP32[$3 >> 2] = HEAP32[$22 >> 2];
               HEAP32[$3 + 4 >> 2] = $4;
               $4 = HEAP32[$23 + 4 >> 2];
               $3 = $2 + 16 | 0;
               HEAP32[$3 >> 2] = HEAP32[$23 >> 2];
               HEAP32[$3 + 4 >> 2] = $4;
               $4 = HEAP32[$33 + 4 >> 2];
               $3 = $2 + 24 | 0;
               HEAP32[$3 >> 2] = HEAP32[$33 >> 2];
               HEAP32[$3 + 4 >> 2] = $4;
               $4 = $14 + 96 | 0;
               $3 = HEAP32[$4 + 4 >> 2];
               $2 = $2 + 32 | 0;
               HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$2 + 4 >> 2] = $3;
               $7 = HEAP32[$14 + 164 >> 2] + 1 | 0;
               HEAP32[$14 + 164 >> 2] = $7;
               $5 = HEAP32[$28 >> 2];
              }
              $1 = $1 + 1 | 0;
              if (($1 | 0) < ($5 | 0)) {
               continue
              }
              break;
             };
            }
            $21 = HEAPF64[$14 + 48 >> 3];
            $27 = HEAPF64[$14 + 40 >> 3];
            $26 = HEAPF64[$14 + 32 >> 3];
            $18 = $18 + 1 | 0;
            if (($18 | 0) != ($16 | 0)) {
             continue
            }
            break;
           };
           break label$91;
          }
          $1 = ($16 | 0) != 1;
          $16 = 1;
          if ($1) {
           break label$7325
          }
          break label$74;
         }
         $3 = Math_imul(HEAP32[$8 >> 2], 56) + $39 | 0;
         $1 = $3 + 48 | 0;
         $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
         $30 = $31 + 24 | 0;
         $2 = $30;
         $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
         HEAP8[$2 | 0] = $1;
         HEAP8[$2 + 1 | 0] = $1 >>> 8;
         HEAP8[$2 + 2 | 0] = $1 >>> 16;
         HEAP8[$2 + 3 | 0] = $1 >>> 24;
         HEAP8[$2 + 4 | 0] = $4;
         HEAP8[$2 + 5 | 0] = $4 >>> 8;
         HEAP8[$2 + 6 | 0] = $4 >>> 16;
         HEAP8[$2 + 7 | 0] = $4 >>> 24;
         $1 = $3 + 40 | 0;
         $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
         $33 = $31 + 16 | 0;
         $2 = $33;
         $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
         HEAP8[$2 | 0] = $1;
         HEAP8[$2 + 1 | 0] = $1 >>> 8;
         HEAP8[$2 + 2 | 0] = $1 >>> 16;
         HEAP8[$2 + 3 | 0] = $1 >>> 24;
         HEAP8[$2 + 4 | 0] = $4;
         HEAP8[$2 + 5 | 0] = $4 >>> 8;
         HEAP8[$2 + 6 | 0] = $4 >>> 16;
         HEAP8[$2 + 7 | 0] = $4 >>> 24;
         $1 = $3 + 32 | 0;
         $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
         $24 = $31 + 8 | 0;
         $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
         HEAP8[$24 | 0] = $1;
         HEAP8[$24 + 1 | 0] = $1 >>> 8;
         HEAP8[$24 + 2 | 0] = $1 >>> 16;
         HEAP8[$24 + 3 | 0] = $1 >>> 24;
         HEAP8[$24 + 4 | 0] = $2;
         HEAP8[$24 + 5 | 0] = $2 >>> 8;
         HEAP8[$24 + 6 | 0] = $2 >>> 16;
         HEAP8[$24 + 7 | 0] = $2 >>> 24;
         $1 = $3 + 24 | 0;
         $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
         $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
         HEAP8[$31 | 0] = $1;
         HEAP8[$31 + 1 | 0] = $1 >>> 8;
         HEAP8[$31 + 2 | 0] = $1 >>> 16;
         HEAP8[$31 + 3 | 0] = $1 >>> 24;
         HEAP8[$31 + 4 | 0] = $2;
         HEAP8[$31 + 5 | 0] = $2 >>> 8;
         HEAP8[$31 + 6 | 0] = $2 >>> 16;
         HEAP8[$31 + 7 | 0] = $2 >>> 24;
         $32 = $26;
         $26 = 1.0 / Math_sqrt($21 * $21 + ($26 * $26 + $27 * $27));
         HEAPF64[$14 + 32 >> 3] = $32 * $26;
         HEAPF64[$14 + 40 >> 3] = $27 * $26;
         HEAPF64[$14 + 48 >> 3] = $21 * $26;
         HEAP32[$14 + 20 >> 2] = 0;
         HEAP32[$14 + 12 >> 2] = 0;
         HEAP32[$14 + 16 >> 2] = 0;
         HEAP8[$14 + 24 | 0] = 1;
         $18 = $14 + 160 | 0;
         $1 = $14 + 8 | 0;
         $2 = 0;
         $3 = 0;
         $9 = 0;
         $13 = __stack_pointer - 48 | 0;
         __stack_pointer = $13;
         $23 = $14 + 32 | 0;
         $21 = HEAPF64[$23 + 16 >> 3];
         label$1 : {
          if (Math_abs($21) > .7071067811865476) {
           $29 = HEAPF64[$23 + 8 >> 3];
           $27 = $29 * $29 + $21 * $21;
           $26 = 1.0 / Math_sqrt($27);
           $37 = $27 * $26;
           $32 = HEAPF64[$23 >> 3];
           $27 = $26 * -$21;
           $35 = $32 * $27;
           $26 = $29 * $26;
           $36 = $26 * -$32;
           $29 = 0.0;
           break label$1;
          }
          $26 = HEAPF64[$23 >> 3];
          $29 = HEAPF64[$23 + 8 >> 3];
          $32 = $26 * $26 + $29 * $29;
          $27 = 1.0 / Math_sqrt($32);
          $35 = $32 * $27;
          $29 = $27 * -$29;
          $36 = $21 * $29;
          $27 = $26 * $27;
          $37 = $27 * -$21;
          $26 = 0.0;
         }
         $7 = HEAP32[$18 + 4 >> 2];
         label$326 : {
          if (($7 | 0) >= 2) {
           while (1) {
            $4 = HEAP32[$18 + 12 >> 2];
            $3 = $4 + $2 | 0;
            $20 = $3 + 16 | 0;
            $25 = $3 + 8 | 0;
            if (HEAPF64[$20 >> 3] * $26 + (HEAPF64[$3 >> 3] * $29 + $27 * HEAPF64[$25 >> 3]) < HEAPF64[$4 + 16 >> 3] * $26 + (HEAPF64[$4 >> 3] * $29 + $27 * HEAPF64[$4 + 8 >> 3])) {
             $40 = $4 + 40 | 0;
             $5 = $40;
             $7 = HEAP32[$5 + 4 >> 2];
             $44 = $13 + 40 | 0;
             $12 = $44;
             HEAP32[$12 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $5 = $4 + 32 | 0;
             $12 = HEAP32[$5 + 4 >> 2];
             $7 = $13 + 32 | 0;
             HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$7 + 4 >> 2] = $12;
             $12 = $4 + 24 | 0;
             $28 = HEAP32[$12 + 4 >> 2];
             $22 = $13 + 24 | 0;
             HEAP32[$22 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$22 + 4 >> 2] = $28;
             $28 = $4 + 16 | 0;
             $10 = HEAP32[$28 + 4 >> 2];
             $11 = $13 + 16 | 0;
             HEAP32[$11 >> 2] = HEAP32[$28 >> 2];
             HEAP32[$11 + 4 >> 2] = $10;
             $10 = $4 + 8 | 0;
             $43 = HEAP32[$10 + 4 >> 2];
             $6 = $13 + 8 | 0;
             HEAP32[$6 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$6 + 4 >> 2] = $43;
             $43 = HEAP32[$4 >> 2];
             $46 = HEAP32[$4 + 4 >> 2];
             $48 = HEAP32[$3 + 4 >> 2];
             HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$4 + 4 >> 2] = $48;
             $4 = HEAP32[$25 + 4 >> 2];
             HEAP32[$10 >> 2] = HEAP32[$25 >> 2];
             HEAP32[$10 + 4 >> 2] = $4;
             $4 = HEAP32[$20 + 4 >> 2];
             HEAP32[$28 >> 2] = HEAP32[$20 >> 2];
             HEAP32[$28 + 4 >> 2] = $4;
             $4 = $3 + 24 | 0;
             $28 = HEAP32[$4 + 4 >> 2];
             HEAP32[$12 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$12 + 4 >> 2] = $28;
             $4 = $3 + 32 | 0;
             $12 = HEAP32[$4 + 4 >> 2];
             HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$5 + 4 >> 2] = $12;
             HEAP32[$40 >> 2] = HEAP32[$3 + 40 >> 2];
             HEAP32[$13 >> 2] = $43;
             HEAP32[$13 + 4 >> 2] = $46;
             $3 = HEAP32[$13 + 4 >> 2];
             $4 = HEAP32[$18 + 12 >> 2] + $2 | 0;
             HEAP32[$4 >> 2] = HEAP32[$13 >> 2];
             HEAP32[$4 + 4 >> 2] = $3;
             HEAP32[$4 + 40 >> 2] = HEAP32[$44 >> 2];
             $3 = HEAP32[$7 + 4 >> 2];
             $5 = $4 + 32 | 0;
             HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$5 + 4 >> 2] = $3;
             $3 = HEAP32[$22 + 4 >> 2];
             $5 = $4 + 24 | 0;
             HEAP32[$5 >> 2] = HEAP32[$22 >> 2];
             HEAP32[$5 + 4 >> 2] = $3;
             $3 = HEAP32[$11 + 4 >> 2];
             $5 = $4 + 16 | 0;
             HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
             HEAP32[$5 + 4 >> 2] = $3;
             $3 = HEAP32[$6 + 4 >> 2];
             $4 = $4 + 8 | 0;
             HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
             HEAP32[$4 + 4 >> 2] = $3;
             $7 = HEAP32[$18 + 4 >> 2];
            }
            $2 = $2 + 48 | 0;
            $9 = $9 + 1 | 0;
            if (($9 | 0) < ($7 | 0)) {
             continue
            }
            break;
           };
           $2 = HEAP32[$18 + 12 >> 2];
           HEAP32[$2 + 32 >> 2] = 1073741824;
           HEAP32[$2 + 36 >> 2] = -970375591;
           if (($7 | 0) >= 2) {
            $3 = $7 - 1 | 0;
            $4 = $2 + 80 | 0;
            $41 = HEAPF64[$2 + 16 >> 3];
            $42 = HEAPF64[$2 + 8 >> 3];
            $45 = HEAPF64[$2 >> 3];
            while (1) {
             $21 = HEAPF64[$4 - 16 >> 3] - $41;
             $34 = HEAPF64[$4 - 32 >> 3] - $45;
             $38 = HEAPF64[$4 - 24 >> 3] - $42;
             $32 = $35 * $21 + ($37 * $34 + $36 * $38);
             $21 = $26 * $21 + ($29 * $34 + $27 * $38);
             if ($32 * $32 + $21 * $21 < 1.1920928955078125e-07) {
              $21 = 0.0
             } else {
              $34 = Math_abs($32);
              $38 = $21 + $34;
              $21 = $21 >= 0.0 ? ($21 - $34) / $38 * -.7853981633974483 + .7853981633974483 : $38 / ($34 - $21) * -.7853981633974483 + 2.356194490192345;
              $21 = $32 < 0.0 ? -$21 : $21;
             }
             HEAPF64[$4 >> 3] = $21;
             $4 = $4 + 48 | 0;
             $3 = $3 - 1 | 0;
             if ($3) {
              continue
             }
             break;
            };
           }
           $4 = $2 + 24 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $13 + 24 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $2 + 16 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $13 + 16 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $2 + 8 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $13 + 8 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = HEAP32[$2 + 4 >> 2];
           HEAP32[$13 >> 2] = HEAP32[$2 >> 2];
           HEAP32[$13 + 4 >> 2] = $4;
           void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($18, $13, 1, $7 - 1 | 0);
           $9 = HEAP32[$18 + 12 >> 2];
           $4 = HEAP32[$1 + 4 >> 2];
           label$1229 : {
            if (($4 | 0) != HEAP32[$1 + 8 >> 2]) {
             break label$1229
            }
            $22 = $4 ? $4 << 1 : 1;
            if (($22 | 0) <= ($4 | 0)) {
             break label$1229
            }
            label$1330 : {
             if (!$22) {
              $5 = 0;
              break label$1330;
             }
             $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($22, 48));
             $4 = HEAP32[$1 + 4 >> 2];
            }
            label$1531 : {
             if (($4 | 0) <= 0) {
              break label$1531
             }
             $7 = 0;
             if (($4 | 0) != 1) {
              $28 = $4 & -2;
              $2 = 0;
              while (1) {
               $12 = HEAP32[$1 + 12 >> 2] + $2 | 0;
               $11 = HEAP32[$12 + 4 >> 2];
               $3 = $2 + $5 | 0;
               HEAP32[$3 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$3 + 4 >> 2] = $11;
               $11 = $12 + 40 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 40 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 32 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 32 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 24 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 24 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 16 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 16 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $12 = $12 + 8 | 0;
               $11 = HEAP32[$12 + 4 >> 2];
               $10 = $3 + 8 | 0;
               HEAP32[$10 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$10 + 4 >> 2] = $11;
               $12 = HEAP32[$1 + 12 >> 2] + $2 | 0;
               $11 = $12 + 56 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 56 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 - -64 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 - -64 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 72 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 72 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 80 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 80 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 88 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 88 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $12 = $12 + 48 | 0;
               $11 = HEAP32[$12 + 4 >> 2];
               $3 = $3 + 48 | 0;
               HEAP32[$3 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$3 + 4 >> 2] = $11;
               $2 = $2 + 96 | 0;
               $7 = $7 + 2 | 0;
               if (($28 | 0) != ($7 | 0)) {
                continue
               }
               break;
              };
             }
             if (!($4 & 1)) {
              break label$1531
             }
             $4 = Math_imul($7, 48);
             $2 = $4 + $5 | 0;
             $4 = $4 + HEAP32[$1 + 12 >> 2] | 0;
             $3 = HEAP32[$4 + 4 >> 2];
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$2 + 4 >> 2] = $3;
             $3 = $4 + 40 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 40 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $3 = $4 + 32 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 32 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $3 = $4 + 24 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 24 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $3 = $4 + 16 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 16 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $4 = $4 + 8 | 0;
             $3 = HEAP32[$4 + 4 >> 2];
             $2 = $2 + 8 | 0;
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$2 + 4 >> 2] = $3;
            }
            $2 = HEAP32[$1 + 12 >> 2];
            if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
             btAlignedFreeInternal_28void__29($2)
            }
            HEAP32[$1 + 12 >> 2] = $5;
            HEAP8[$1 + 16 | 0] = 1;
            HEAP32[$1 + 8 >> 2] = $22;
            $4 = HEAP32[$1 + 4 >> 2];
           }
           $3 = HEAP32[$9 + 4 >> 2];
           $2 = HEAP32[$1 + 12 >> 2] + Math_imul($4, 48) | 0;
           HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$2 + 4 >> 2] = $3;
           $4 = $9 + 40 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 40 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 32 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 32 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 24 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 24 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 16 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 16 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 8 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $2 = $2 + 8 | 0;
           HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$2 + 4 >> 2] = $3;
           $4 = HEAP32[$1 + 4 >> 2] + 1 | 0;
           HEAP32[$1 + 4 >> 2] = $4;
           $9 = HEAP32[$18 + 12 >> 2] + 48 | 0;
           label$19 : {
            if (HEAP32[$1 + 8 >> 2] != ($4 | 0)) {
             break label$19
            }
            $22 = $4 ? $4 << 1 : 1;
            if (($22 | 0) <= ($4 | 0)) {
             break label$19
            }
            label$2033 : {
             if (!$22) {
              $5 = 0;
              break label$2033;
             }
             $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($22, 48));
             $4 = HEAP32[$1 + 4 >> 2];
            }
            label$2234 : {
             if (($4 | 0) <= 0) {
              break label$2234
             }
             $7 = 0;
             if (($4 | 0) != 1) {
              $28 = $4 & -2;
              $2 = 0;
              while (1) {
               $12 = HEAP32[$1 + 12 >> 2] + $2 | 0;
               $11 = HEAP32[$12 + 4 >> 2];
               $3 = $2 + $5 | 0;
               HEAP32[$3 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$3 + 4 >> 2] = $11;
               $11 = $12 + 40 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 40 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 32 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 32 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 24 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 24 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 16 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 16 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $12 = $12 + 8 | 0;
               $11 = HEAP32[$12 + 4 >> 2];
               $10 = $3 + 8 | 0;
               HEAP32[$10 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$10 + 4 >> 2] = $11;
               $12 = HEAP32[$1 + 12 >> 2] + $2 | 0;
               $11 = $12 + 56 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 56 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 - -64 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 - -64 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 72 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 72 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 80 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 80 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $12 + 88 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $3 + 88 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $12 = $12 + 48 | 0;
               $11 = HEAP32[$12 + 4 >> 2];
               $3 = $3 + 48 | 0;
               HEAP32[$3 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$3 + 4 >> 2] = $11;
               $2 = $2 + 96 | 0;
               $7 = $7 + 2 | 0;
               if (($28 | 0) != ($7 | 0)) {
                continue
               }
               break;
              };
             }
             if (!($4 & 1)) {
              break label$2234
             }
             $4 = Math_imul($7, 48);
             $2 = $4 + $5 | 0;
             $4 = $4 + HEAP32[$1 + 12 >> 2] | 0;
             $3 = HEAP32[$4 + 4 >> 2];
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$2 + 4 >> 2] = $3;
             $3 = $4 + 40 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 40 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $3 = $4 + 32 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 32 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $3 = $4 + 24 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 24 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $3 = $4 + 16 | 0;
             $7 = HEAP32[$3 + 4 >> 2];
             $12 = $2 + 16 | 0;
             HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$12 + 4 >> 2] = $7;
             $4 = $4 + 8 | 0;
             $3 = HEAP32[$4 + 4 >> 2];
             $2 = $2 + 8 | 0;
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$2 + 4 >> 2] = $3;
            }
            $2 = HEAP32[$1 + 12 >> 2];
            if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
             btAlignedFreeInternal_28void__29($2)
            }
            HEAP32[$1 + 12 >> 2] = $5;
            HEAP8[$1 + 16 | 0] = 1;
            HEAP32[$1 + 8 >> 2] = $22;
            $4 = HEAP32[$1 + 4 >> 2];
           }
           $3 = HEAP32[$9 + 4 >> 2];
           $2 = HEAP32[$1 + 12 >> 2] + Math_imul($4, 48) | 0;
           HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$2 + 4 >> 2] = $3;
           $4 = $9 + 40 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 40 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 32 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 32 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 24 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 24 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 16 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $5 = $2 + 16 | 0;
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $3;
           $4 = $9 + 8 | 0;
           $3 = HEAP32[$4 + 4 >> 2];
           $2 = $2 + 8 | 0;
           HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$2 + 4 >> 2] = $3;
           $3 = HEAP32[$1 + 4 >> 2] + 1 | 0;
           HEAP32[$1 + 4 >> 2] = $3;
           if (HEAP32[$18 + 4 >> 2] == 2) {
            break label$326
           }
           $12 = 2;
           while (1) {
            label$2735 : {
             if (($3 | 0) < 2) {
              break label$2735
             }
             $9 = Math_imul($3, 96);
             $2 = $3 << 1;
             $5 = HEAP32[$1 + 12 >> 2];
             $4 = ($5 + Math_imul($3, 48) | 0) - 96 | 0;
             $7 = HEAP32[$18 + 12 >> 2] + Math_imul($12, 48) | 0;
             $21 = HEAPF64[$7 + 16 >> 3];
             $27 = HEAPF64[$7 + 8 >> 3];
             $26 = HEAPF64[$7 >> 3];
             $29 = HEAPF64[$23 + 16 >> 3];
             $32 = HEAPF64[$23 + 8 >> 3];
             $37 = HEAPF64[$23 >> 3];
             while (1) {
              $35 = HEAPF64[$4 >> 3];
              $36 = $35 - HEAPF64[$4 + 48 >> 3];
              $34 = HEAPF64[$4 + 8 >> 3];
              $41 = $34 - $27;
              $35 = $35 - $26;
              $34 = $34 - HEAPF64[$4 + 56 >> 3];
              $45 = ($36 * $41 - $35 * $34) * $29;
              $38 = $34;
              $34 = HEAPF64[$4 + 16 >> 3];
              $42 = $34 - $21;
              $34 = $34 - HEAPF64[$4 - -64 >> 3];
              if ($45 + (($38 * $42 - $41 * $34) * $37 + $32 * ($34 * $35 - $42 * $36)) > 0.0) {
               if (!(HEAP32[$1 + 8 >> 2] != ($3 | 0) | ($2 | 0) <= ($3 | 0))) {
                $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9);
                $28 = HEAP32[$1 + 4 >> 2];
                label$31 : {
                 if (($28 | 0) <= 0) {
                  break label$31
                 }
                 $3 = 0;
                 if (($28 | 0) != 1) {
                  $11 = $28 & -2;
                  $9 = 0;
                  while (1) {
                   $22 = HEAP32[$1 + 12 >> 2] + $9 | 0;
                   $10 = HEAP32[$22 + 4 >> 2];
                   $4 = $5 + $9 | 0;
                   HEAP32[$4 >> 2] = HEAP32[$22 >> 2];
                   HEAP32[$4 + 4 >> 2] = $10;
                   $10 = $22 + 40 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 40 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $10 = $22 + 32 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 32 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $10 = $22 + 24 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 24 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $10 = $22 + 16 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 16 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $22 = $22 + 8 | 0;
                   $10 = HEAP32[$22 + 4 >> 2];
                   $6 = $4 + 8 | 0;
                   HEAP32[$6 >> 2] = HEAP32[$22 >> 2];
                   HEAP32[$6 + 4 >> 2] = $10;
                   $22 = HEAP32[$1 + 12 >> 2] + $9 | 0;
                   $10 = $22 + 56 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 56 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $10 = $22 - -64 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 - -64 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $10 = $22 + 72 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 72 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $10 = $22 + 80 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 80 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $10 = $22 + 88 | 0;
                   $6 = HEAP32[$10 + 4 >> 2];
                   $20 = $4 + 88 | 0;
                   HEAP32[$20 >> 2] = HEAP32[$10 >> 2];
                   HEAP32[$20 + 4 >> 2] = $6;
                   $22 = $22 + 48 | 0;
                   $10 = HEAP32[$22 + 4 >> 2];
                   $4 = $4 + 48 | 0;
                   HEAP32[$4 >> 2] = HEAP32[$22 >> 2];
                   HEAP32[$4 + 4 >> 2] = $10;
                   $9 = $9 + 96 | 0;
                   $3 = $3 + 2 | 0;
                   if (($11 | 0) != ($3 | 0)) {
                    continue
                   }
                   break;
                  };
                 }
                 if (!($28 & 1)) {
                  break label$31
                 }
                 $3 = Math_imul($3, 48);
                 $4 = $3 + $5 | 0;
                 $3 = $3 + HEAP32[$1 + 12 >> 2] | 0;
                 $9 = HEAP32[$3 + 4 >> 2];
                 HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
                 HEAP32[$4 + 4 >> 2] = $9;
                 $9 = $3 + 40 | 0;
                 $22 = HEAP32[$9 + 4 >> 2];
                 $28 = $4 + 40 | 0;
                 HEAP32[$28 >> 2] = HEAP32[$9 >> 2];
                 HEAP32[$28 + 4 >> 2] = $22;
                 $9 = $3 + 32 | 0;
                 $22 = HEAP32[$9 + 4 >> 2];
                 $28 = $4 + 32 | 0;
                 HEAP32[$28 >> 2] = HEAP32[$9 >> 2];
                 HEAP32[$28 + 4 >> 2] = $22;
                 $9 = $3 + 24 | 0;
                 $22 = HEAP32[$9 + 4 >> 2];
                 $28 = $4 + 24 | 0;
                 HEAP32[$28 >> 2] = HEAP32[$9 >> 2];
                 HEAP32[$28 + 4 >> 2] = $22;
                 $9 = $3 + 16 | 0;
                 $22 = HEAP32[$9 + 4 >> 2];
                 $28 = $4 + 16 | 0;
                 HEAP32[$28 >> 2] = HEAP32[$9 >> 2];
                 HEAP32[$28 + 4 >> 2] = $22;
                 $3 = $3 + 8 | 0;
                 $9 = HEAP32[$3 + 4 >> 2];
                 $4 = $4 + 8 | 0;
                 HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
                 HEAP32[$4 + 4 >> 2] = $9;
                }
                $4 = HEAP32[$1 + 12 >> 2];
                if (!(!$4 | !HEAPU8[$1 + 16 | 0])) {
                 btAlignedFreeInternal_28void__29($4)
                }
                HEAP32[$1 + 12 >> 2] = $5;
                HEAP8[$1 + 16 | 0] = 1;
                HEAP32[$1 + 8 >> 2] = $2;
                $3 = HEAP32[$1 + 4 >> 2];
               }
               $4 = HEAP32[$7 + 4 >> 2];
               $2 = Math_imul($3, 48) + $5 | 0;
               HEAP32[$2 >> 2] = HEAP32[$7 >> 2];
               HEAP32[$2 + 4 >> 2] = $4;
               $4 = $7 + 40 | 0;
               $3 = HEAP32[$4 + 4 >> 2];
               $5 = $2 + 40 | 0;
               HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$5 + 4 >> 2] = $3;
               $4 = $7 + 32 | 0;
               $3 = HEAP32[$4 + 4 >> 2];
               $5 = $2 + 32 | 0;
               HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$5 + 4 >> 2] = $3;
               $4 = $7 + 24 | 0;
               $3 = HEAP32[$4 + 4 >> 2];
               $5 = $2 + 24 | 0;
               HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$5 + 4 >> 2] = $3;
               $4 = $7 + 16 | 0;
               $3 = HEAP32[$4 + 4 >> 2];
               $5 = $2 + 16 | 0;
               HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$5 + 4 >> 2] = $3;
               $4 = $7 + 8 | 0;
               $3 = HEAP32[$4 + 4 >> 2];
               $2 = $2 + 8 | 0;
               HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$2 + 4 >> 2] = $3;
               $3 = HEAP32[$1 + 4 >> 2] + 1 | 0;
               HEAP32[$1 + 4 >> 2] = $3;
               break label$2735;
              }
              $3 = $3 - 1 | 0;
              HEAP32[$1 + 4 >> 2] = $3;
              $4 = $4 - 48 | 0;
              $9 = $9 - 96 | 0;
              $2 = $2 - 2 | 0;
              if (($3 + 1 | 0) > 2) {
               continue
              }
              break;
             };
            }
            if (($3 | 0) == 1) {
             $3 = HEAP32[$18 + 12 >> 2] + Math_imul($12, 48) | 0;
             $4 = 1;
             if (HEAP32[$1 + 8 >> 2] == 1) {
              $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(96);
              $22 = HEAP32[$1 + 4 >> 2];
              label$37 : {
               if (($22 | 0) <= 0) {
                break label$37
               }
               $9 = 0;
               if (($22 | 0) != 1) {
                $28 = $22 & -2;
                $2 = 0;
                while (1) {
                 $5 = HEAP32[$1 + 12 >> 2] + $2 | 0;
                 $11 = HEAP32[$5 + 4 >> 2];
                 $4 = $2 + $7 | 0;
                 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
                 HEAP32[$4 + 4 >> 2] = $11;
                 $11 = $5 + 40 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 40 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $5 + 32 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 32 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $5 + 24 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 24 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $5 + 16 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 16 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $5 = $5 + 8 | 0;
                 $11 = HEAP32[$5 + 4 >> 2];
                 $10 = $4 + 8 | 0;
                 HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
                 HEAP32[$10 + 4 >> 2] = $11;
                 $5 = HEAP32[$1 + 12 >> 2] + $2 | 0;
                 $11 = $5 + 56 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 56 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $5 - -64 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 - -64 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $5 + 72 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 72 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $5 + 80 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 80 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $11 = $5 + 88 | 0;
                 $10 = HEAP32[$11 + 4 >> 2];
                 $6 = $4 + 88 | 0;
                 HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
                 HEAP32[$6 + 4 >> 2] = $10;
                 $5 = $5 + 48 | 0;
                 $11 = HEAP32[$5 + 4 >> 2];
                 $4 = $4 + 48 | 0;
                 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
                 HEAP32[$4 + 4 >> 2] = $11;
                 $2 = $2 + 96 | 0;
                 $9 = $9 + 2 | 0;
                 if (($28 | 0) != ($9 | 0)) {
                  continue
                 }
                 break;
                };
               }
               if (!($22 & 1)) {
                break label$37
               }
               $4 = Math_imul($9, 48);
               $2 = $4 + $7 | 0;
               $4 = $4 + HEAP32[$1 + 12 >> 2] | 0;
               $5 = HEAP32[$4 + 4 >> 2];
               HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$2 + 4 >> 2] = $5;
               $5 = $4 + 40 | 0;
               $9 = HEAP32[$5 + 4 >> 2];
               $22 = $2 + 40 | 0;
               HEAP32[$22 >> 2] = HEAP32[$5 >> 2];
               HEAP32[$22 + 4 >> 2] = $9;
               $5 = $4 + 32 | 0;
               $9 = HEAP32[$5 + 4 >> 2];
               $22 = $2 + 32 | 0;
               HEAP32[$22 >> 2] = HEAP32[$5 >> 2];
               HEAP32[$22 + 4 >> 2] = $9;
               $5 = $4 + 24 | 0;
               $9 = HEAP32[$5 + 4 >> 2];
               $22 = $2 + 24 | 0;
               HEAP32[$22 >> 2] = HEAP32[$5 >> 2];
               HEAP32[$22 + 4 >> 2] = $9;
               $5 = $4 + 16 | 0;
               $9 = HEAP32[$5 + 4 >> 2];
               $22 = $2 + 16 | 0;
               HEAP32[$22 >> 2] = HEAP32[$5 >> 2];
               HEAP32[$22 + 4 >> 2] = $9;
               $4 = $4 + 8 | 0;
               $5 = HEAP32[$4 + 4 >> 2];
               $2 = $2 + 8 | 0;
               HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
               HEAP32[$2 + 4 >> 2] = $5;
              }
              $2 = HEAP32[$1 + 12 >> 2];
              if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
               btAlignedFreeInternal_28void__29($2)
              }
              HEAP32[$1 + 12 >> 2] = $7;
              HEAP8[$1 + 16 | 0] = 1;
              HEAP32[$1 + 8 >> 2] = 2;
              $4 = HEAP32[$1 + 4 >> 2];
             }
             $5 = HEAP32[$3 + 4 >> 2];
             $2 = HEAP32[$1 + 12 >> 2] + Math_imul($4, 48) | 0;
             HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
             HEAP32[$2 + 4 >> 2] = $5;
             $4 = $3 + 40 | 0;
             $5 = HEAP32[$4 + 4 >> 2];
             $7 = $2 + 40 | 0;
             HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$7 + 4 >> 2] = $5;
             $4 = $3 + 32 | 0;
             $5 = HEAP32[$4 + 4 >> 2];
             $7 = $2 + 32 | 0;
             HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$7 + 4 >> 2] = $5;
             $4 = $3 + 24 | 0;
             $5 = HEAP32[$4 + 4 >> 2];
             $7 = $2 + 24 | 0;
             HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$7 + 4 >> 2] = $5;
             $4 = $3 + 16 | 0;
             $5 = HEAP32[$4 + 4 >> 2];
             $7 = $2 + 16 | 0;
             HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$7 + 4 >> 2] = $5;
             $4 = $3 + 8 | 0;
             $3 = HEAP32[$4 + 4 >> 2];
             $2 = $2 + 8 | 0;
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$2 + 4 >> 2] = $3;
             $3 = HEAP32[$1 + 4 >> 2] + 1 | 0;
             HEAP32[$1 + 4 >> 2] = $3;
            }
            $12 = $12 + 1 | 0;
            if (($12 | 0) != HEAP32[$18 + 4 >> 2]) {
             continue
            }
            break;
           };
           break label$326;
          }
          if (($7 | 0) != 1) {
           break label$326
          }
          $4 = HEAP32[$1 + 4 >> 2];
          while (1) {
           $12 = HEAP32[$18 + 12 >> 2];
           label$4237 : {
            if (HEAP32[$1 + 8 >> 2] != ($4 | 0)) {
             break label$4237
            }
            $22 = $4 ? $4 << 1 : 1;
            if (($22 | 0) <= ($4 | 0)) {
             break label$4237
            }
            label$4338 : {
             if (!$22) {
              $5 = 0;
              break label$4338;
             }
             $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($22, 48));
             $4 = HEAP32[$1 + 4 >> 2];
            }
            label$4539 : {
             if (($4 | 0) <= 0) {
              break label$4539
             }
             $7 = 0;
             if (($4 | 0) != 1) {
              $28 = $4 & -2;
              $2 = 0;
              while (1) {
               $23 = HEAP32[$1 + 12 >> 2] + $2 | 0;
               $11 = HEAP32[$23 + 4 >> 2];
               $9 = $2 + $5 | 0;
               HEAP32[$9 >> 2] = HEAP32[$23 >> 2];
               HEAP32[$9 + 4 >> 2] = $11;
               $11 = $23 + 40 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 40 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $23 + 32 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 32 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $23 + 24 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 24 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $23 + 16 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 16 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $23 = $23 + 8 | 0;
               $11 = HEAP32[$23 + 4 >> 2];
               $10 = $9 + 8 | 0;
               HEAP32[$10 >> 2] = HEAP32[$23 >> 2];
               HEAP32[$10 + 4 >> 2] = $11;
               $23 = HEAP32[$1 + 12 >> 2] + $2 | 0;
               $11 = $23 + 56 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 56 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $23 - -64 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 - -64 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $23 + 72 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 72 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $23 + 80 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 80 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $11 = $23 + 88 | 0;
               $10 = HEAP32[$11 + 4 >> 2];
               $6 = $9 + 88 | 0;
               HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
               HEAP32[$6 + 4 >> 2] = $10;
               $23 = $23 + 48 | 0;
               $11 = HEAP32[$23 + 4 >> 2];
               $9 = $9 + 48 | 0;
               HEAP32[$9 >> 2] = HEAP32[$23 >> 2];
               HEAP32[$9 + 4 >> 2] = $11;
               $2 = $2 + 96 | 0;
               $7 = $7 + 2 | 0;
               if (($28 | 0) != ($7 | 0)) {
                continue
               }
               break;
              };
             }
             if (!($4 & 1)) {
              break label$4539
             }
             $4 = Math_imul($7, 48);
             $2 = $4 + $5 | 0;
             $4 = $4 + HEAP32[$1 + 12 >> 2] | 0;
             $7 = HEAP32[$4 + 4 >> 2];
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$2 + 4 >> 2] = $7;
             $7 = $4 + 40 | 0;
             $9 = HEAP32[$7 + 4 >> 2];
             $23 = $2 + 40 | 0;
             HEAP32[$23 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$23 + 4 >> 2] = $9;
             $7 = $4 + 32 | 0;
             $9 = HEAP32[$7 + 4 >> 2];
             $23 = $2 + 32 | 0;
             HEAP32[$23 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$23 + 4 >> 2] = $9;
             $7 = $4 + 24 | 0;
             $9 = HEAP32[$7 + 4 >> 2];
             $23 = $2 + 24 | 0;
             HEAP32[$23 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$23 + 4 >> 2] = $9;
             $7 = $4 + 16 | 0;
             $9 = HEAP32[$7 + 4 >> 2];
             $23 = $2 + 16 | 0;
             HEAP32[$23 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$23 + 4 >> 2] = $9;
             $4 = $4 + 8 | 0;
             $7 = HEAP32[$4 + 4 >> 2];
             $2 = $2 + 8 | 0;
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             HEAP32[$2 + 4 >> 2] = $7;
            }
            $2 = HEAP32[$1 + 12 >> 2];
            if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
             btAlignedFreeInternal_28void__29($2)
            }
            HEAP32[$1 + 12 >> 2] = $5;
            HEAP8[$1 + 16 | 0] = 1;
            HEAP32[$1 + 8 >> 2] = $22;
            $4 = HEAP32[$1 + 4 >> 2];
           }
           $5 = HEAP32[$12 + 4 >> 2];
           $2 = HEAP32[$1 + 12 >> 2] + Math_imul($4, 48) | 0;
           HEAP32[$2 >> 2] = HEAP32[$12 >> 2];
           HEAP32[$2 + 4 >> 2] = $5;
           $4 = $12 + 40 | 0;
           $5 = HEAP32[$4 + 4 >> 2];
           $7 = $2 + 40 | 0;
           HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$7 + 4 >> 2] = $5;
           $4 = $12 + 32 | 0;
           $5 = HEAP32[$4 + 4 >> 2];
           $7 = $2 + 32 | 0;
           HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$7 + 4 >> 2] = $5;
           $4 = $12 + 24 | 0;
           $5 = HEAP32[$4 + 4 >> 2];
           $7 = $2 + 24 | 0;
           HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$7 + 4 >> 2] = $5;
           $4 = $12 + 16 | 0;
           $5 = HEAP32[$4 + 4 >> 2];
           $7 = $2 + 16 | 0;
           HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$7 + 4 >> 2] = $5;
           $4 = $12 + 8 | 0;
           $5 = HEAP32[$4 + 4 >> 2];
           $2 = $2 + 8 | 0;
           HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$2 + 4 >> 2] = $5;
           $4 = HEAP32[$1 + 4 >> 2] + 1 | 0;
           HEAP32[$1 + 4 >> 2] = $4;
           $3 = $3 + 1 | 0;
           if (($3 | 0) < HEAP32[$18 + 4 >> 2]) {
            continue
           }
           break;
          };
         }
         __stack_pointer = $13 + 48 | 0;
         label$107 : {
          if (HEAP32[$14 + 12 >> 2] > 0) {
           $4 = 0;
           $1 = 0;
           $7 = 0;
           while (1) {
            $12 = Math_imul($7, 48);
            $23 = ($12 + HEAP32[$14 + 20 >> 2] | 0) + 40 | 0;
            label$110 : {
             if (($1 | 0) != ($7 | 0)) {
              break label$110
             }
             $13 = $1 ? $1 << 1 : 1;
             if (($13 | 0) <= ($1 | 0)) {
              break label$110
             }
             if ($13) {
              $18 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2)
             } else {
              $18 = 0
             }
             label$113 : {
              label$114 : {
               if (($1 | 0) > 0) {
                $5 = $1 & 3;
                $9 = 0;
                if ($1 - 1 >>> 0 >= 3) {
                 $22 = $1 & -4;
                 $2 = 0;
                 while (1) {
                  $1 = $2 + $18 | 0;
                  $3 = $2 + $4 | 0;
                  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
                  HEAP32[$1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
                  HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
                  HEAP32[$1 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
                  $2 = $2 + 16 | 0;
                  $9 = $9 + 4 | 0;
                  if (($22 | 0) != ($9 | 0)) {
                   continue
                  }
                  break;
                 };
                }
                if (!$5) {
                 break label$114
                }
                $1 = $9 << 2;
                $2 = $1 + $18 | 0;
                $3 = $1 + $4 | 0;
                while (1) {
                 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
                 $2 = $2 + 4 | 0;
                 $3 = $3 + 4 | 0;
                 $5 = $5 - 1 | 0;
                 if ($5) {
                  continue
                 }
                 break;
                };
                break label$114;
               }
               if (!$4) {
                break label$113
               }
              }
              btAlignedFreeInternal_28void__29($4);
             }
             $4 = $18;
             $1 = $13;
            }
            HEAP32[($7 << 2) + $4 >> 2] = HEAP32[$23 >> 2];
            $7 = $7 + 1 | 0;
            $5 = HEAP32[$14 + 164 >> 2];
            label$119 : {
             if (($5 | 0) <= 0) {
              break label$119
             }
             $2 = HEAP32[$14 + 172 >> 2] + 40 | 0;
             $9 = HEAP32[($12 + HEAP32[$14 + 20 >> 2] | 0) + 40 >> 2];
             $3 = $5;
             while (1) {
              if (HEAP32[$2 >> 2] != ($9 | 0)) {
               $2 = $2 + 48 | 0;
               $3 = $3 - 1 | 0;
               if ($3) {
                continue
               }
               break label$119;
              }
              break;
             };
             HEAP32[$2 >> 2] = -1;
            }
            if (HEAP32[$14 + 12 >> 2] > ($7 | 0)) {
             continue
            }
            break;
           };
           break label$107;
          }
          $4 = 0;
          $5 = HEAP32[$14 + 164 >> 2];
          $7 = 0;
         }
         label$122 : {
          if (($5 | 0) > 0) {
           $1 = 0;
           $13 = HEAP32[$14 + 172 >> 2];
           while (1) {
            $9 = HEAP32[($13 + Math_imul($1, 48) | 0) + 40 >> 2];
            label$125 : {
             if (!$19 | ($9 | 0) == -1) {
              break label$125
             }
             if (($16 | 0) <= 0) {
              $18 = 0;
              while (1) {
               label$128 : {
                $2 = Math_imul($18, 56) + $39 | 0;
                $3 = HEAP32[$2 + 4 >> 2];
                if (($3 | 0) <= 0) {
                 break label$128
                }
                $2 = HEAP32[$2 + 12 >> 2];
                while (1) {
                 if (HEAP32[$2 >> 2] != ($9 | 0)) {
                  $2 = $2 + 4 | 0;
                  $3 = $3 - 1 | 0;
                  if ($3) {
                   continue
                  }
                  break label$128;
                 }
                 break;
                };
                $1 = 1;
                break label$122;
               }
               $18 = $18 + 1 | 0;
               if (($19 | 0) != ($18 | 0)) {
                continue
               }
               break;
              };
              break label$125;
             }
             $18 = 0;
             while (1) {
              $2 = $8;
              $3 = $16;
              label$132 : {
               while (1) {
                if (HEAP32[$2 >> 2] == ($18 | 0)) {
                 break label$132
                }
                $2 = $2 + 4 | 0;
                $3 = $3 - 1 | 0;
                if ($3) {
                 continue
                }
                break;
               };
               $2 = Math_imul($18, 56) + $39 | 0;
               $3 = HEAP32[$2 + 4 >> 2];
               if (($3 | 0) <= 0) {
                break label$132
               }
               $2 = HEAP32[$2 + 12 >> 2];
               while (1) {
                if (HEAP32[$2 >> 2] != ($9 | 0)) {
                 $2 = $2 + 4 | 0;
                 $3 = $3 - 1 | 0;
                 if ($3) {
                  continue
                 }
                 break label$132;
                }
                break;
               };
               $1 = 1;
               break label$122;
              }
              $18 = $18 + 1 | 0;
              if (($19 | 0) != ($18 | 0)) {
               continue
              }
              break;
             };
            }
            $1 = $1 + 1 | 0;
            if (($1 | 0) != ($5 | 0)) {
             continue
            }
            break;
           };
          }
          $22 = HEAP32[$0 + 96 >> 2];
          $2 = HEAP32[$22 + 28 >> 2];
          if (($2 | 0) == HEAP32[$22 + 32 >> 2]) {
           $6 = $2 ? $2 << 1 : 1;
           $18 = $22 + 24 | 0;
           if (($6 | 0) > HEAP32[$18 + 8 >> 2]) {
            if ($6) {
             $40 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($6, 56))
            } else {
             $40 = 0
            }
            $2 = HEAP32[$18 + 4 >> 2];
            label$441 : {
             if (($2 | 0) <= 0) {
              break label$441
             }
             $9 = 24;
             while (1) {
              $28 = HEAP32[$18 + 12 >> 2] + $9 | 0;
              $44 = $28 - 24 | 0;
              $3 = 0;
              $11 = $9 + $40 | 0;
              $5 = $11 - 24 | 0;
              HEAP32[$5 + 4 >> 2] = 0;
              HEAP32[$5 + 8 >> 2] = 0;
              HEAP32[$5 + 12 >> 2] = 0;
              HEAP8[$5 + 16 | 0] = 1;
              $13 = HEAP32[$44 + 4 >> 2];
              __inlined_func$btAlignedObjectArray_int___btAlignedObjectArray_28btAlignedObjectArray_int__20const__29 : {
               if (($13 | 0) <= 0) {
                HEAP32[$5 + 4 >> 2] = $13;
                break __inlined_func$btAlignedObjectArray_int___btAlignedObjectArray_28btAlignedObjectArray_int__20const__29;
               }
               $43 = $13 << 2;
               $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($43);
               $10 = HEAP32[$5 + 12 >> 2];
               label$21 : {
                label$35 : {
                 label$410 : {
                  $1 = HEAP32[$5 + 4 >> 2];
                  if (($1 | 0) > 0) {
                   $23 = $1 & 3;
                   if ($1 - 1 >>> 0 >= 3) {
                    $46 = $1 & -4;
                    $1 = 0;
                    while (1) {
                     $20 = $1 + $12 | 0;
                     $25 = $1 + $10 | 0;
                     HEAP32[$20 >> 2] = HEAP32[$25 >> 2];
                     HEAP32[$20 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
                     HEAP32[$20 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
                     HEAP32[$20 + 12 >> 2] = HEAP32[$25 + 12 >> 2];
                     $1 = $1 + 16 | 0;
                     $3 = $3 + 4 | 0;
                     if (($46 | 0) != ($3 | 0)) {
                      continue
                     }
                     break;
                    };
                   }
                   if (!$23) {
                    break label$410
                   }
                   $3 = $3 << 2;
                   $1 = $3 + $12 | 0;
                   $3 = $3 + $10 | 0;
                   while (1) {
                    HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
                    $1 = $1 + 4 | 0;
                    $3 = $3 + 4 | 0;
                    $23 = $23 - 1 | 0;
                    if ($23) {
                     continue
                    }
                    break;
                   };
                   break label$410;
                  }
                  if ($10) {
                   break label$410
                  }
                  HEAP32[$5 + 12 >> 2] = $12;
                  HEAP8[$5 + 16 | 0] = 1;
                  HEAP32[$5 + 8 >> 2] = $13;
                  memset($12, 0, $43);
                  HEAP32[$5 + 4 >> 2] = $13;
                  break label$35;
                 }
                 if (HEAPU8[$5 + 16 | 0]) {
                  btAlignedFreeInternal_28void__29($10)
                 }
                 HEAP32[$5 + 12 >> 2] = $12;
                 HEAP8[$5 + 16 | 0] = 1;
                 HEAP32[$5 + 8 >> 2] = $13;
                 memset($12, 0, $43);
                 HEAP32[$5 + 4 >> 2] = $13;
                 if (($13 | 0) <= 0) {
                  break label$21
                 }
                }
                $23 = $13 & 3;
                $10 = HEAP32[$44 + 12 >> 2];
                $3 = 0;
                if ($13 - 1 >>> 0 >= 3) {
                 $20 = $13 & -4;
                 $1 = 0;
                 while (1) {
                  $5 = $1 + $12 | 0;
                  $13 = $1 + $10 | 0;
                  HEAP32[$5 >> 2] = HEAP32[$13 >> 2];
                  HEAP32[$5 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
                  HEAP32[$5 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
                  HEAP32[$5 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
                  $1 = $1 + 16 | 0;
                  $3 = $3 + 4 | 0;
                  if (($20 | 0) != ($3 | 0)) {
                   continue
                  }
                  break;
                 };
                }
                if (!$23) {
                 break label$21
                }
                $3 = $3 << 2;
                $1 = $3 + $12 | 0;
                $3 = $3 + $10 | 0;
                while (1) {
                 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
                 $1 = $1 + 4 | 0;
                 $3 = $3 + 4 | 0;
                 $23 = $23 - 1 | 0;
                 if ($23) {
                  continue
                 }
                 break;
                };
               }
              }
              $1 = $28 + 24 | 0;
              $3 = HEAP32[$1 + 4 >> 2];
              $5 = $11 + 24 | 0;
              HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
              HEAP32[$5 + 4 >> 2] = $3;
              $1 = $28 + 16 | 0;
              $3 = HEAP32[$1 + 4 >> 2];
              $5 = $11 + 16 | 0;
              HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
              HEAP32[$5 + 4 >> 2] = $3;
              $1 = $28 + 8 | 0;
              $3 = HEAP32[$1 + 4 >> 2];
              $5 = $11 + 8 | 0;
              HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
              HEAP32[$5 + 4 >> 2] = $3;
              $1 = HEAP32[$28 + 4 >> 2];
              HEAP32[$11 >> 2] = HEAP32[$28 >> 2];
              HEAP32[$11 + 4 >> 2] = $1;
              $9 = $9 + 56 | 0;
              $2 = $2 - 1 | 0;
              if ($2) {
               continue
              }
              break;
             };
             $2 = HEAP32[$18 + 4 >> 2];
             if (($2 | 0) <= 0) {
              break label$441
             }
             $3 = 8;
             while (1) {
              $1 = HEAP32[$18 + 12 >> 2] + $3 | 0;
              $5 = $1 + 8 | 0;
              $9 = $1 + 4 | 0;
              $13 = HEAP32[$9 >> 2];
              if (!(!$13 | !HEAPU8[$5 | 0])) {
               btAlignedFreeInternal_28void__29($13)
              }
              HEAP32[$9 >> 2] = 0;
              HEAP8[$5 | 0] = 1;
              $1 = $1 - 4 | 0;
              HEAP32[$1 >> 2] = 0;
              HEAP32[$1 + 4 >> 2] = 0;
              $3 = $3 + 56 | 0;
              $2 = $2 - 1 | 0;
              if ($2) {
               continue
              }
              break;
             };
            }
            $1 = HEAP32[$18 + 12 >> 2];
            if (!(!$1 | !HEAPU8[$18 + 16 | 0])) {
             btAlignedFreeInternal_28void__29($1)
            }
            HEAP32[$18 + 12 >> 2] = $40;
            HEAP8[$18 + 16 | 0] = 1;
            HEAP32[$18 + 8 >> 2] = $6;
           }
           $2 = HEAP32[$22 + 28 >> 2];
          }
          $1 = HEAP32[$22 + 36 >> 2] + Math_imul($2, 56) | 0;
          HEAP8[$1 + 16 | 0] = 1;
          HEAP32[$1 + 12 >> 2] = 0;
          HEAP32[$1 + 4 >> 2] = 0;
          HEAP32[$1 + 8 >> 2] = 0;
          $12 = $1 + 4 | 0;
          label$13744 : {
           if (($7 | 0) <= 0) {
            HEAP32[$12 >> 2] = $7;
            break label$13744;
           }
           $11 = $1 + 8 | 0;
           $28 = $1 + 16 | 0;
           $10 = $7 << 2;
           $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10);
           $6 = $1 + 12 | 0;
           $18 = HEAP32[$6 >> 2];
           $2 = HEAP32[$12 >> 2];
           label$139 : {
            label$140 : {
             if (($2 | 0) > 0) {
              $5 = $2 & 3;
              $9 = 0;
              if ($2 - 1 >>> 0 >= 3) {
               $20 = $2 & -4;
               $2 = 0;
               while (1) {
                $3 = $2 + $13 | 0;
                $23 = $2 + $18 | 0;
                HEAP32[$3 >> 2] = HEAP32[$23 >> 2];
                HEAP32[$3 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
                HEAP32[$3 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
                HEAP32[$3 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
                $2 = $2 + 16 | 0;
                $9 = $9 + 4 | 0;
                if (($20 | 0) != ($9 | 0)) {
                 continue
                }
                break;
               };
              }
              if (!$5) {
               break label$140
              }
              $3 = $9 << 2;
              $2 = $3 + $13 | 0;
              $3 = $3 + $18 | 0;
              while (1) {
               HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
               $2 = $2 + 4 | 0;
               $3 = $3 + 4 | 0;
               $5 = $5 - 1 | 0;
               if ($5) {
                continue
               }
               break;
              };
              break label$140;
             }
             if (!$18) {
              break label$139
             }
            }
            if (!HEAPU8[$28 | 0]) {
             break label$139
            }
            btAlignedFreeInternal_28void__29($18);
           }
           HEAP32[$6 >> 2] = $13;
           HEAP8[$28 | 0] = 1;
           HEAP32[$11 >> 2] = $7;
           $9 = 0;
           $13 = memset($13, 0, $10);
           HEAP32[$12 >> 2] = $7;
           $5 = $7 & 3;
           if ($7 - 1 >>> 0 >= 3) {
            $18 = $7 & -4;
            $2 = 0;
            while (1) {
             $3 = $2 + $13 | 0;
             $7 = $2 + $4 | 0;
             HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$3 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
             HEAP32[$3 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
             HEAP32[$3 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
             $2 = $2 + 16 | 0;
             $9 = $9 + 4 | 0;
             if (($18 | 0) != ($9 | 0)) {
              continue
             }
             break;
            };
           }
           if (!$5) {
            break label$13744
           }
           $3 = $9 << 2;
           $2 = $3 + $13 | 0;
           $3 = $3 + $4 | 0;
           while (1) {
            HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
            $2 = $2 + 4 | 0;
            $3 = $3 + 4 | 0;
            $5 = $5 - 1 | 0;
            if ($5) {
             continue
            }
            break;
           };
          }
          $2 = HEAPU8[$31 + 4 | 0] | HEAPU8[$31 + 5 | 0] << 8 | (HEAPU8[$31 + 6 | 0] << 16 | HEAPU8[$31 + 7 | 0] << 24);
          $3 = HEAPU8[$31 | 0] | HEAPU8[$31 + 1 | 0] << 8 | (HEAPU8[$31 + 2 | 0] << 16 | HEAPU8[$31 + 3 | 0] << 24);
          HEAP8[$1 + 24 | 0] = $3;
          HEAP8[$1 + 25 | 0] = $3 >>> 8;
          HEAP8[$1 + 26 | 0] = $3 >>> 16;
          HEAP8[$1 + 27 | 0] = $3 >>> 24;
          HEAP8[$1 + 28 | 0] = $2;
          HEAP8[$1 + 29 | 0] = $2 >>> 8;
          HEAP8[$1 + 30 | 0] = $2 >>> 16;
          HEAP8[$1 + 31 | 0] = $2 >>> 24;
          $3 = HEAPU8[$30 + 4 | 0] | HEAPU8[$30 + 5 | 0] << 8 | (HEAPU8[$30 + 6 | 0] << 16 | HEAPU8[$30 + 7 | 0] << 24);
          $2 = $1 + 48 | 0;
          $5 = HEAPU8[$30 | 0] | HEAPU8[$30 + 1 | 0] << 8 | (HEAPU8[$30 + 2 | 0] << 16 | HEAPU8[$30 + 3 | 0] << 24);
          HEAP8[$2 | 0] = $5;
          HEAP8[$2 + 1 | 0] = $5 >>> 8;
          HEAP8[$2 + 2 | 0] = $5 >>> 16;
          HEAP8[$2 + 3 | 0] = $5 >>> 24;
          HEAP8[$2 + 4 | 0] = $3;
          HEAP8[$2 + 5 | 0] = $3 >>> 8;
          HEAP8[$2 + 6 | 0] = $3 >>> 16;
          HEAP8[$2 + 7 | 0] = $3 >>> 24;
          $3 = HEAPU8[$33 + 4 | 0] | HEAPU8[$33 + 5 | 0] << 8 | (HEAPU8[$33 + 6 | 0] << 16 | HEAPU8[$33 + 7 | 0] << 24);
          $2 = $1 + 40 | 0;
          $5 = HEAPU8[$33 | 0] | HEAPU8[$33 + 1 | 0] << 8 | (HEAPU8[$33 + 2 | 0] << 16 | HEAPU8[$33 + 3 | 0] << 24);
          HEAP8[$2 | 0] = $5;
          HEAP8[$2 + 1 | 0] = $5 >>> 8;
          HEAP8[$2 + 2 | 0] = $5 >>> 16;
          HEAP8[$2 + 3 | 0] = $5 >>> 24;
          HEAP8[$2 + 4 | 0] = $3;
          HEAP8[$2 + 5 | 0] = $3 >>> 8;
          HEAP8[$2 + 6 | 0] = $3 >>> 16;
          HEAP8[$2 + 7 | 0] = $3 >>> 24;
          $2 = HEAPU8[$24 + 4 | 0] | HEAPU8[$24 + 5 | 0] << 8 | (HEAPU8[$24 + 6 | 0] << 16 | HEAPU8[$24 + 7 | 0] << 24);
          $1 = $1 + 32 | 0;
          $3 = HEAPU8[$24 | 0] | HEAPU8[$24 + 1 | 0] << 8 | (HEAPU8[$24 + 2 | 0] << 16 | HEAPU8[$24 + 3 | 0] << 24);
          HEAP8[$1 | 0] = $3;
          HEAP8[$1 + 1 | 0] = $3 >>> 8;
          HEAP8[$1 + 2 | 0] = $3 >>> 16;
          HEAP8[$1 + 3 | 0] = $3 >>> 24;
          HEAP8[$1 + 4 | 0] = $2;
          HEAP8[$1 + 5 | 0] = $2 >>> 8;
          HEAP8[$1 + 6 | 0] = $2 >>> 16;
          HEAP8[$1 + 7 | 0] = $2 >>> 24;
          HEAP32[$22 + 28 >> 2] = HEAP32[$22 + 28 >> 2] + 1;
          $1 = 0;
         }
         $2 = HEAP32[$14 + 20 >> 2];
         if (!(!$2 | !HEAPU8[$14 + 24 | 0])) {
          btAlignedFreeInternal_28void__29($2)
         }
         if ($4) {
          btAlignedFreeInternal_28void__29($4)
         }
         $2 = HEAP32[$14 + 172 >> 2];
         if (!(!$2 | !HEAPU8[$14 + 176 | 0])) {
          btAlignedFreeInternal_28void__29($2)
         }
         if (!(($16 | 0) > 0 & $1)) {
          break label$7325
         }
        }
        $10 = 0;
        while (1) {
         $12 = 0;
         $1 = Math_imul(HEAP32[($10 << 2) + $8 >> 2], 56) + $39 | 0;
         $18 = HEAP32[$1 + 4 >> 2];
         label$152 : {
          if (($18 | 0) <= 0) {
           break label$152
          }
          $7 = 0;
          $2 = $18 << 2;
          $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2);
          $9 = memset($12, 0, $2);
          $5 = $18 & 3;
          $13 = HEAP32[$1 + 12 >> 2];
          if ($18 - 1 >>> 0 >= 3) {
           $24 = $18 & -4;
           $2 = 0;
           while (1) {
            $4 = $2 + $9 | 0;
            $3 = $2 + $13 | 0;
            HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
            HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
            HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
            HEAP32[$4 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
            $2 = $2 + 16 | 0;
            $7 = $7 + 4 | 0;
            if (($24 | 0) != ($7 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$5) {
           break label$152
          }
          $4 = $7 << 2;
          $2 = $4 + $9 | 0;
          $3 = $4 + $13 | 0;
          while (1) {
           HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
           $2 = $2 + 4 | 0;
           $3 = $3 + 4 | 0;
           $5 = $5 - 1 | 0;
           if ($5) {
            continue
           }
           break;
          };
         }
         $2 = HEAPU8[$1 + 28 | 0] | HEAPU8[$1 + 29 | 0] << 8 | (HEAPU8[$1 + 30 | 0] << 16 | HEAPU8[$1 + 31 | 0] << 24);
         $4 = HEAPU8[$1 + 24 | 0] | HEAPU8[$1 + 25 | 0] << 8 | (HEAPU8[$1 + 26 | 0] << 16 | HEAPU8[$1 + 27 | 0] << 24);
         HEAP8[$31 | 0] = $4;
         HEAP8[$31 + 1 | 0] = $4 >>> 8;
         HEAP8[$31 + 2 | 0] = $4 >>> 16;
         HEAP8[$31 + 3 | 0] = $4 >>> 24;
         HEAP8[$31 + 4 | 0] = $2;
         HEAP8[$31 + 5 | 0] = $2 >>> 8;
         HEAP8[$31 + 6 | 0] = $2 >>> 16;
         HEAP8[$31 + 7 | 0] = $2 >>> 24;
         $2 = $1 + 48 | 0;
         $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
         $24 = $31 + 24 | 0;
         $4 = $24;
         $2 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
         HEAP8[$4 | 0] = $2;
         HEAP8[$4 + 1 | 0] = $2 >>> 8;
         HEAP8[$4 + 2 | 0] = $2 >>> 16;
         HEAP8[$4 + 3 | 0] = $2 >>> 24;
         HEAP8[$4 + 4 | 0] = $3;
         HEAP8[$4 + 5 | 0] = $3 >>> 8;
         HEAP8[$4 + 6 | 0] = $3 >>> 16;
         HEAP8[$4 + 7 | 0] = $3 >>> 24;
         $2 = $1 + 40 | 0;
         $3 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
         $4 = $31 + 16 | 0;
         $2 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
         HEAP8[$4 | 0] = $2;
         HEAP8[$4 + 1 | 0] = $2 >>> 8;
         HEAP8[$4 + 2 | 0] = $2 >>> 16;
         HEAP8[$4 + 3 | 0] = $2 >>> 24;
         HEAP8[$4 + 4 | 0] = $3;
         HEAP8[$4 + 5 | 0] = $3 >>> 8;
         HEAP8[$4 + 6 | 0] = $3 >>> 16;
         HEAP8[$4 + 7 | 0] = $3 >>> 24;
         $1 = $1 + 32 | 0;
         $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
         $9 = $31 + 8 | 0;
         $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
         HEAP8[$9 | 0] = $1;
         HEAP8[$9 + 1 | 0] = $1 >>> 8;
         HEAP8[$9 + 2 | 0] = $1 >>> 16;
         HEAP8[$9 + 3 | 0] = $1 >>> 24;
         HEAP8[$9 + 4 | 0] = $2;
         HEAP8[$9 + 5 | 0] = $2 >>> 8;
         HEAP8[$9 + 6 | 0] = $2 >>> 16;
         HEAP8[$9 + 7 | 0] = $2 >>> 24;
         $13 = HEAP32[$0 + 96 >> 2];
         $30 = HEAP32[$13 + 28 >> 2];
         label$156 : {
          if (($30 | 0) != HEAP32[$13 + 32 >> 2]) {
           break label$156
          }
          $6 = $30 ? $30 << 1 : 1;
          if (($6 | 0) <= ($30 | 0)) {
           break label$156
          }
          label$157 : {
           if (!$6) {
            $20 = 0;
            break label$157;
           }
           $20 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($6, 56));
           $30 = HEAP32[$13 + 28 >> 2];
          }
          label$159 : {
           if (($30 | 0) <= 0) {
            break label$159
           }
           $1 = 0;
           while (1) {
            $3 = Math_imul($1, 56);
            $33 = $3 + $20 | 0;
            $2 = $33;
            HEAP32[$2 + 4 >> 2] = 0;
            HEAP32[$2 + 8 >> 2] = 0;
            HEAP8[$2 + 16 | 0] = 1;
            HEAP32[$2 + 12 >> 2] = 0;
            $25 = $2 + 4 | 0;
            $22 = $3 + HEAP32[$13 + 36 >> 2] | 0;
            $23 = HEAP32[$22 + 4 >> 2];
            label$161 : {
             if (($23 | 0) <= 0) {
              HEAP32[$25 >> 2] = $23;
              break label$161;
             }
             $43 = $33 + 8 | 0;
             $44 = $33 + 16 | 0;
             $46 = $23 << 2;
             $28 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($46);
             $48 = $33 + 12 | 0;
             $11 = HEAP32[$48 >> 2];
             $2 = HEAP32[$25 >> 2];
             label$163 : {
              label$164 : {
               if (($2 | 0) > 0) {
                $5 = $2 & 3;
                $7 = 0;
                if ($2 - 1 >>> 0 >= 3) {
                 $50 = $2 & -4;
                 $2 = 0;
                 while (1) {
                  $3 = $2 + $28 | 0;
                  $40 = $2 + $11 | 0;
                  HEAP32[$3 >> 2] = HEAP32[$40 >> 2];
                  HEAP32[$3 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
                  HEAP32[$3 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
                  HEAP32[$3 + 12 >> 2] = HEAP32[$40 + 12 >> 2];
                  $2 = $2 + 16 | 0;
                  $7 = $7 + 4 | 0;
                  if (($50 | 0) != ($7 | 0)) {
                   continue
                  }
                  break;
                 };
                }
                if (!$5) {
                 break label$164
                }
                $3 = $7 << 2;
                $2 = $3 + $28 | 0;
                $3 = $3 + $11 | 0;
                while (1) {
                 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
                 $2 = $2 + 4 | 0;
                 $3 = $3 + 4 | 0;
                 $5 = $5 - 1 | 0;
                 if ($5) {
                  continue
                 }
                 break;
                };
                break label$164;
               }
               if (!$11) {
                break label$163
               }
              }
              if (!HEAPU8[$44 | 0]) {
               break label$163
              }
              btAlignedFreeInternal_28void__29($11);
             }
             HEAP32[$48 >> 2] = $28;
             HEAP8[$44 | 0] = 1;
             HEAP32[$43 >> 2] = $23;
             $7 = 0;
             $28 = memset($28, 0, $46);
             HEAP32[$25 >> 2] = $23;
             $5 = $23 & 3;
             $11 = HEAP32[$22 + 12 >> 2];
             if ($23 - 1 >>> 0 >= 3) {
              $25 = $23 & -4;
              $2 = 0;
              while (1) {
               $3 = $2 + $28 | 0;
               $23 = $2 + $11 | 0;
               HEAP32[$3 >> 2] = HEAP32[$23 >> 2];
               HEAP32[$3 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
               HEAP32[$3 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
               HEAP32[$3 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
               $2 = $2 + 16 | 0;
               $7 = $7 + 4 | 0;
               if (($25 | 0) != ($7 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$5) {
              break label$161
             }
             $3 = $7 << 2;
             $2 = $3 + $28 | 0;
             $3 = $3 + $11 | 0;
             while (1) {
              HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
              $2 = $2 + 4 | 0;
              $3 = $3 + 4 | 0;
              $5 = $5 - 1 | 0;
              if ($5) {
               continue
              }
              break;
             };
            }
            $2 = HEAP32[$22 + 28 >> 2];
            HEAP32[$33 + 24 >> 2] = HEAP32[$22 + 24 >> 2];
            HEAP32[$33 + 28 >> 2] = $2;
            $2 = $22 + 48 | 0;
            $3 = HEAP32[$2 + 4 >> 2];
            $5 = $33 + 48 | 0;
            HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
            HEAP32[$5 + 4 >> 2] = $3;
            $2 = $22 + 40 | 0;
            $3 = HEAP32[$2 + 4 >> 2];
            $5 = $33 + 40 | 0;
            HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
            HEAP32[$5 + 4 >> 2] = $3;
            $2 = $22 + 32 | 0;
            $3 = HEAP32[$2 + 4 >> 2];
            $5 = $33 + 32 | 0;
            HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
            HEAP32[$5 + 4 >> 2] = $3;
            $1 = $1 + 1 | 0;
            if (($30 | 0) != ($1 | 0)) {
             continue
            }
            break;
           };
           $5 = HEAP32[$13 + 28 >> 2];
           if (($5 | 0) <= 0) {
            break label$159
           }
           $2 = 8;
           while (1) {
            $1 = HEAP32[$13 + 36 >> 2] + $2 | 0;
            $3 = $1 + 8 | 0;
            $7 = $1 + 4 | 0;
            $30 = HEAP32[$7 >> 2];
            if (!(!$30 | !HEAPU8[$3 | 0])) {
             btAlignedFreeInternal_28void__29($30)
            }
            HEAP32[$7 >> 2] = 0;
            HEAP8[$3 | 0] = 1;
            $1 = $1 - 4 | 0;
            HEAP32[$1 >> 2] = 0;
            HEAP32[$1 + 4 >> 2] = 0;
            $2 = $2 + 56 | 0;
            $5 = $5 - 1 | 0;
            if ($5) {
             continue
            }
            break;
           };
          }
          $1 = HEAP32[$13 + 36 >> 2];
          if (!(!$1 | !HEAPU8[$13 + 40 | 0])) {
           btAlignedFreeInternal_28void__29($1)
          }
          HEAP32[$13 + 36 >> 2] = $20;
          HEAP8[$13 + 40 | 0] = 1;
          HEAP32[$13 + 32 >> 2] = $6;
          $30 = HEAP32[$13 + 28 >> 2];
         }
         $1 = HEAP32[$13 + 36 >> 2] + Math_imul($30, 56) | 0;
         HEAP8[$1 + 16 | 0] = 1;
         HEAP32[$1 + 12 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         HEAP32[$1 + 8 >> 2] = 0;
         $23 = $1 + 4 | 0;
         label$175 : {
          if (($18 | 0) <= 0) {
           HEAP32[$23 >> 2] = $18;
           break label$175;
          }
          $11 = $1 + 8 | 0;
          $28 = $1 + 16 | 0;
          $6 = $18 << 2;
          $30 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6);
          $20 = $1 + 12 | 0;
          $33 = HEAP32[$20 >> 2];
          $2 = HEAP32[$23 >> 2];
          label$177 : {
           label$178 : {
            if (($2 | 0) > 0) {
             $5 = $2 & 3;
             $7 = 0;
             if ($2 - 1 >>> 0 >= 3) {
              $25 = $2 & -4;
              $2 = 0;
              while (1) {
               $3 = $2 + $30 | 0;
               $22 = $2 + $33 | 0;
               HEAP32[$3 >> 2] = HEAP32[$22 >> 2];
               HEAP32[$3 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
               HEAP32[$3 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
               HEAP32[$3 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
               $2 = $2 + 16 | 0;
               $7 = $7 + 4 | 0;
               if (($25 | 0) != ($7 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$5) {
              break label$178
             }
             $3 = $7 << 2;
             $2 = $3 + $30 | 0;
             $3 = $3 + $33 | 0;
             while (1) {
              HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
              $2 = $2 + 4 | 0;
              $3 = $3 + 4 | 0;
              $5 = $5 - 1 | 0;
              if ($5) {
               continue
              }
              break;
             };
             break label$178;
            }
            if (!$33) {
             break label$177
            }
           }
           if (!HEAPU8[$28 | 0]) {
            break label$177
           }
           btAlignedFreeInternal_28void__29($33);
          }
          HEAP32[$20 >> 2] = $30;
          HEAP8[$28 | 0] = 1;
          HEAP32[$11 >> 2] = $18;
          $7 = 0;
          $30 = memset($30, 0, $6);
          HEAP32[$23 >> 2] = $18;
          $5 = $18 & 3;
          if ($18 - 1 >>> 0 >= 3) {
           $33 = $18 & -4;
           $2 = 0;
           while (1) {
            $3 = $2 + $30 | 0;
            $18 = $2 + $12 | 0;
            HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
            HEAP32[$3 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
            HEAP32[$3 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
            HEAP32[$3 + 12 >> 2] = HEAP32[$18 + 12 >> 2];
            $2 = $2 + 16 | 0;
            $7 = $7 + 4 | 0;
            if (($33 | 0) != ($7 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$5) {
           break label$175
          }
          $3 = $7 << 2;
          $2 = $3 + $30 | 0;
          $3 = $3 + $12 | 0;
          while (1) {
           HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
           $2 = $2 + 4 | 0;
           $3 = $3 + 4 | 0;
           $5 = $5 - 1 | 0;
           if ($5) {
            continue
           }
           break;
          };
         }
         $2 = HEAPU8[$31 + 4 | 0] | HEAPU8[$31 + 5 | 0] << 8 | (HEAPU8[$31 + 6 | 0] << 16 | HEAPU8[$31 + 7 | 0] << 24);
         $3 = HEAPU8[$31 | 0] | HEAPU8[$31 + 1 | 0] << 8 | (HEAPU8[$31 + 2 | 0] << 16 | HEAPU8[$31 + 3 | 0] << 24);
         HEAP8[$1 + 24 | 0] = $3;
         HEAP8[$1 + 25 | 0] = $3 >>> 8;
         HEAP8[$1 + 26 | 0] = $3 >>> 16;
         HEAP8[$1 + 27 | 0] = $3 >>> 24;
         HEAP8[$1 + 28 | 0] = $2;
         HEAP8[$1 + 29 | 0] = $2 >>> 8;
         HEAP8[$1 + 30 | 0] = $2 >>> 16;
         HEAP8[$1 + 31 | 0] = $2 >>> 24;
         $3 = HEAPU8[$24 + 4 | 0] | HEAPU8[$24 + 5 | 0] << 8 | (HEAPU8[$24 + 6 | 0] << 16 | HEAPU8[$24 + 7 | 0] << 24);
         $2 = $1 + 48 | 0;
         $5 = HEAPU8[$24 | 0] | HEAPU8[$24 + 1 | 0] << 8 | (HEAPU8[$24 + 2 | 0] << 16 | HEAPU8[$24 + 3 | 0] << 24);
         HEAP8[$2 | 0] = $5;
         HEAP8[$2 + 1 | 0] = $5 >>> 8;
         HEAP8[$2 + 2 | 0] = $5 >>> 16;
         HEAP8[$2 + 3 | 0] = $5 >>> 24;
         HEAP8[$2 + 4 | 0] = $3;
         HEAP8[$2 + 5 | 0] = $3 >>> 8;
         HEAP8[$2 + 6 | 0] = $3 >>> 16;
         HEAP8[$2 + 7 | 0] = $3 >>> 24;
         $3 = HEAPU8[$4 + 4 | 0] | HEAPU8[$4 + 5 | 0] << 8 | (HEAPU8[$4 + 6 | 0] << 16 | HEAPU8[$4 + 7 | 0] << 24);
         $2 = $1 + 40 | 0;
         $4 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
         HEAP8[$2 | 0] = $4;
         HEAP8[$2 + 1 | 0] = $4 >>> 8;
         HEAP8[$2 + 2 | 0] = $4 >>> 16;
         HEAP8[$2 + 3 | 0] = $4 >>> 24;
         HEAP8[$2 + 4 | 0] = $3;
         HEAP8[$2 + 5 | 0] = $3 >>> 8;
         HEAP8[$2 + 6 | 0] = $3 >>> 16;
         HEAP8[$2 + 7 | 0] = $3 >>> 24;
         $2 = HEAPU8[$9 + 4 | 0] | HEAPU8[$9 + 5 | 0] << 8 | (HEAPU8[$9 + 6 | 0] << 16 | HEAPU8[$9 + 7 | 0] << 24);
         $1 = $1 + 32 | 0;
         $4 = HEAPU8[$9 | 0] | HEAPU8[$9 + 1 | 0] << 8 | (HEAPU8[$9 + 2 | 0] << 16 | HEAPU8[$9 + 3 | 0] << 24);
         HEAP8[$1 | 0] = $4;
         HEAP8[$1 + 1 | 0] = $4 >>> 8;
         HEAP8[$1 + 2 | 0] = $4 >>> 16;
         HEAP8[$1 + 3 | 0] = $4 >>> 24;
         HEAP8[$1 + 4 | 0] = $2;
         HEAP8[$1 + 5 | 0] = $2 >>> 8;
         HEAP8[$1 + 6 | 0] = $2 >>> 16;
         HEAP8[$1 + 7 | 0] = $2 >>> 24;
         HEAP32[$13 + 28 >> 2] = HEAP32[$13 + 28 >> 2] + 1;
         if ($12) {
          btAlignedFreeInternal_28void__29($12)
         }
         $10 = $10 + 1 | 0;
         if (($10 | 0) != ($16 | 0)) {
          continue
         }
         break;
        };
       }
       if ($8) {
        btAlignedFreeInternal_28void__29($8)
       }
       if ($15) {
        continue
       }
       break;
      };
      btConvexPolyhedron__initialize_28_29(HEAP32[$0 + 96 >> 2]);
      if ($17) {
       btAlignedFreeInternal_28void__29($17)
      }
      if (!$19) {
       break label$43
      }
      $2 = $39 + 8 | 0;
      while (1) {
       $0 = $2 + 4 | 0;
       $1 = HEAP32[$0 >> 2];
       $8 = $2 + 8 | 0;
       if (!(!$1 | !HEAPU8[$8 | 0])) {
        btAlignedFreeInternal_28void__29($1)
       }
       HEAP32[$0 >> 2] = 0;
       HEAP8[$8 | 0] = 1;
       $0 = $2 - 4 | 0;
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       $2 = $2 + 56 | 0;
       $19 = $19 - 1 | 0;
       if ($19) {
        continue
       }
       break;
      };
      break label$42;
     }
     btConvexPolyhedron__initialize_28_29(HEAP32[$0 + 96 >> 2]);
    }
    if (!$39) {
     break label$4123
    }
   }
   btAlignedFreeInternal_28void__29($39);
  }
  if ($47) {
   btAlignedFreeInternal_28void__29($47)
  }
  $0 = HEAP32[$14 + 236 >> 2];
  if (!(!$0 | !HEAPU8[$14 + 240 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$14 + 236 >> 2] = 0;
  HEAP8[$14 + 240 | 0] = 1;
  HEAP32[$14 + 228 >> 2] = 0;
  HEAP32[$14 + 232 >> 2] = 0;
  $0 = HEAP32[$14 + 216 >> 2];
  if (!(!$0 | !HEAPU8[$14 + 220 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$14 + 216 >> 2] = 0;
  HEAP8[$14 + 220 | 0] = 1;
  HEAP32[$14 + 208 >> 2] = 0;
  HEAP32[$14 + 212 >> 2] = 0;
  $0 = HEAP32[$14 + 196 >> 2];
  if (!(!$0 | !HEAPU8[$14 + 200 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  $0 = HEAP32[$14 + 260 >> 2];
  if (!(!$0 | !HEAPU8[$14 + 264 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  __stack_pointer = $14 + 272 | 0;
  return 1;
 }
 
 function void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  while (1) {
   $28 = $2;
   $4 = HEAP32[$0 + 12 >> 2];
   $8 = $4 + Math_imul(($2 + $3 | 0) / 2 | 0, 48) | 0;
   $29 = HEAP32[$8 + 40 >> 2];
   $20 = HEAPF64[$8 + 32 >> 3];
   $31 = HEAPF64[$8 + 16 >> 3];
   $32 = HEAPF64[$8 + 8 >> 3];
   $33 = HEAPF64[$8 >> 3];
   $8 = $3;
   while (1) {
    $24 = HEAPF64[$1 + 16 >> 3];
    $9 = $31 - $24;
    $18 = $9 * $9;
    $25 = HEAPF64[$1 >> 3];
    $9 = $33 - $25;
    $19 = $9 * $9;
    $26 = HEAPF64[$1 + 8 >> 3];
    $9 = $32 - $26;
    $9 = $18 + ($19 + $9 * $9);
    $7 = (Math_imul($2, 48) + $4 | 0) + 40 | 0;
    while (1) {
     label$3 : {
      $5 = HEAPF64[$7 - 8 >> 3];
      label$5 : {
       if ($20 != $5) {
        if ($5 < $20) {
         break label$5
        }
        break label$3;
       }
       $5 = HEAPF64[$7 - 24 >> 3] - $24;
       $18 = $5 * $5;
       $5 = HEAPF64[$7 - 40 >> 3] - $25;
       $19 = $5 * $5;
       $5 = HEAPF64[$7 - 32 >> 3] - $26;
       $5 = $18 + ($19 + $5 * $5);
       if ((($5 != $9 ? $5 < $9 : HEAP32[$7 >> 2] < ($29 | 0)) | 0) != 1) {
        break label$3
       }
      }
      $7 = $7 + 48 | 0;
      $2 = $2 + 1 | 0;
      continue;
     }
     break;
    };
    $21 = Math_imul($8, 48);
    while (1) {
     label$7 : {
      $6 = $4 + $21 | 0;
      $27 = $6 + 32 | 0;
      $5 = HEAPF64[$27 >> 3];
      label$9 : {
       if ($20 != $5) {
        if ($5 > $20) {
         break label$9
        }
        break label$7;
       }
       $5 = HEAPF64[$6 + 16 >> 3] - $24;
       $18 = $5 * $5;
       $5 = HEAPF64[$6 >> 3] - $25;
       $19 = $5 * $5;
       $5 = HEAPF64[$6 + 8 >> 3] - $26;
       $5 = $18 + ($19 + $5 * $5);
       if ((($5 != $9 ? $5 > $9 : HEAP32[$6 + 40 >> 2] > ($29 | 0)) | 0) != 1) {
        break label$7
       }
      }
      $21 = $21 - 48 | 0;
      $8 = $8 - 1 | 0;
      continue;
     }
     break;
    };
    if (($2 | 0) <= ($8 | 0)) {
     $12 = HEAP32[$7 + 4 >> 2];
     $30 = $10 + 40 | 0;
     $4 = $30;
     HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$4 + 4 >> 2] = $12;
     $4 = $7 - 40 | 0;
     $22 = $4 + 32 | 0;
     $13 = HEAP32[$22 + 4 >> 2];
     $12 = $10 + 32 | 0;
     HEAP32[$12 >> 2] = HEAP32[$22 >> 2];
     HEAP32[$12 + 4 >> 2] = $13;
     $23 = $4 + 24 | 0;
     $14 = HEAP32[$23 + 4 >> 2];
     $13 = $10 + 24 | 0;
     HEAP32[$13 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$13 + 4 >> 2] = $14;
     $15 = $4 + 16 | 0;
     $16 = HEAP32[$15 + 4 >> 2];
     $14 = $10 + 16 | 0;
     HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$14 + 4 >> 2] = $16;
     $17 = $4 + 8 | 0;
     $11 = HEAP32[$17 + 4 >> 2];
     $16 = $10 + 8 | 0;
     HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$16 + 4 >> 2] = $11;
     $11 = HEAP32[$4 + 4 >> 2];
     HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$10 + 4 >> 2] = $11;
     $11 = HEAP32[$6 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $11;
     $4 = $6 + 8 | 0;
     $11 = HEAP32[$4 + 4 >> 2];
     HEAP32[$17 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$17 + 4 >> 2] = $11;
     $4 = $6 + 16 | 0;
     $17 = HEAP32[$4 + 4 >> 2];
     HEAP32[$15 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$15 + 4 >> 2] = $17;
     $4 = $6 + 24 | 0;
     $15 = HEAP32[$4 + 4 >> 2];
     HEAP32[$23 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$23 + 4 >> 2] = $15;
     $4 = HEAP32[$27 + 4 >> 2];
     HEAP32[$22 >> 2] = HEAP32[$27 >> 2];
     HEAP32[$22 + 4 >> 2] = $4;
     HEAP32[$7 >> 2] = HEAP32[$6 + 40 >> 2];
     $6 = HEAP32[$10 + 4 >> 2];
     $7 = HEAP32[$0 + 12 >> 2] + $21 | 0;
     HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$7 + 4 >> 2] = $6;
     $4 = HEAP32[$16 + 4 >> 2];
     $6 = $7 + 8 | 0;
     HEAP32[$6 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$6 + 4 >> 2] = $4;
     $4 = HEAP32[$14 + 4 >> 2];
     $6 = $7 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$14 >> 2];
     HEAP32[$6 + 4 >> 2] = $4;
     $4 = HEAP32[$13 + 4 >> 2];
     $6 = $7 + 24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$6 + 4 >> 2] = $4;
     $4 = HEAP32[$12 + 4 >> 2];
     $6 = $7 + 32 | 0;
     HEAP32[$6 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$6 + 4 >> 2] = $4;
     HEAP32[$7 + 40 >> 2] = HEAP32[$30 >> 2];
     $8 = $8 - 1 | 0;
     $2 = $2 + 1 | 0;
    }
    if (($2 | 0) <= ($8 | 0)) {
     $4 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($8 | 0) > ($28 | 0)) {
    void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $28, $8)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
  __stack_pointer = $10 + 48 | 0;
 }
 
 function btPolyhedralConvexShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0;
  $8 = __stack_pointer - 4096 | 0;
  __stack_pointer = $8;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $3 = $0 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $9 = HEAPF64[$2 + 16 >> 3];
  $10 = HEAPF64[$2 >> 3];
  $5 = HEAPF64[$2 + 8 >> 3];
  $7 = $9 * $9 + ($10 * $10 + $5 * $5);
  label$1 : {
   if ($7 < .0001) {
    $9 = 0.0;
    $13 = 1.0;
    break label$1;
   }
   $7 = 1.0 / Math_sqrt($7);
   $9 = $9 * $7;
   $14 = $5 * $7;
   $13 = $10 * $7;
  }
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) > 0) {
   $7 = -1.e+30;
   while (1) {
    $11 = 128;
    label$5 : {
     label$6 : {
      if (((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) - $12 | 0) > 127) {
       break label$6
      }
      $11 = (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) - $12 | 0;
      if (($11 | 0) > 0) {
       break label$6
      }
      $5 = -1797693134862315708145274.0e284;
      $4 = -1;
      break label$5;
     }
     $4 = $11 & 1;
     $2 = 0;
     if (($11 | 0) != 1) {
      $6 = $11 & -2;
      $3 = $8;
      while (1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 108 >> 2]]($1, $2, $3);
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 108 >> 2]]($1, $2 + 1 | 0, $3 + 32 | 0);
       $3 = $3 - -64 | 0;
       $2 = $2 + 2 | 0;
       if (($6 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
     }
     if ($4) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 108 >> 2]]($1, $2, ($2 << 5) + $8 | 0)
     }
     $3 = 0;
     $4 = -1;
     $5 = -1797693134862315708145274.0e284;
     $2 = $8;
     while (1) {
      $10 = HEAPF64[$2 + 16 >> 3] * $9 + (HEAPF64[$2 >> 3] * $13 + $14 * HEAPF64[$2 + 8 >> 3]);
      $6 = $10 > $5;
      $5 = $6 ? $10 : $5;
      $4 = $6 ? $3 : $4;
      $2 = $2 + 32 | 0;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($11 | 0)) {
       continue
      }
      break;
     };
    }
    if ($5 > $7) {
     $4 = ($4 << 5) + $8 | 0;
     $2 = HEAP32[$4 + 12 >> 2];
     $3 = $0 + 8 | 0;
     HEAP32[$3 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$3 + 4 >> 2] = $2;
     $2 = HEAP32[$4 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$0 + 4 >> 2] = $2;
     $3 = $4 + 24 | 0;
     $2 = HEAP32[$3 + 4 >> 2];
     $6 = $0 + 24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$6 + 4 >> 2] = $2;
     $3 = $4 + 16 | 0;
     $2 = HEAP32[$3 + 4 >> 2];
     $6 = $0 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$6 + 4 >> 2] = $2;
     $7 = $5;
    }
    $12 = $12 + 128 | 0;
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) > ($12 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $8 + 4096 | 0;
 }
 
 function btPolyhedralConvexShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0;
  $9 = __stack_pointer - 4096 | 0;
  __stack_pointer = $9;
  label$1 : {
   if (($3 | 0) <= 0) {
    break label$1
   }
   $6 = $3 & 7;
   if ($3 - 1 >>> 0 >= 7) {
    $4 = $2 + 152 | 0;
    $8 = $3 & -8;
    while (1) {
     HEAP32[$4 >> 2] = 966823146;
     HEAP32[$4 + 4 >> 2] = -970375591;
     $5 = $4 + 96 | 0;
     HEAP32[$5 >> 2] = 966823146;
     HEAP32[$5 + 4 >> 2] = -970375591;
     $5 = $4 - -64 | 0;
     HEAP32[$5 >> 2] = 966823146;
     HEAP32[$5 + 4 >> 2] = -970375591;
     $5 = $4 + 32 | 0;
     HEAP32[$5 >> 2] = 966823146;
     HEAP32[$5 + 4 >> 2] = -970375591;
     $5 = $4 - 32 | 0;
     HEAP32[$5 >> 2] = 966823146;
     HEAP32[$5 + 4 >> 2] = -970375591;
     $5 = $4 + -64 | 0;
     HEAP32[$5 >> 2] = 966823146;
     HEAP32[$5 + 4 >> 2] = -970375591;
     $5 = $4 - 96 | 0;
     HEAP32[$5 >> 2] = 966823146;
     HEAP32[$5 + 4 >> 2] = -970375591;
     $5 = $4 - 128 | 0;
     HEAP32[$5 >> 2] = 966823146;
     HEAP32[$5 + 4 >> 2] = -970375591;
     $4 = $4 + 256 | 0;
     $7 = $7 + 8 | 0;
     if (($8 | 0) != ($7 | 0)) {
      continue
     }
     break;
    };
   }
   if ($6) {
    $4 = (($7 << 5) + $2 | 0) + 24 | 0;
    while (1) {
     HEAP32[$4 >> 2] = 966823146;
     HEAP32[$4 + 4 >> 2] = -970375591;
     $4 = $4 + 32 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   if (($3 | 0) <= 0) {
    break label$1
   }
   while (1) {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) > 0) {
     $4 = $14 << 5;
     $5 = $4 + $2 | 0;
     $12 = $5 + 24 | 0;
     $15 = $1 + $4 | 0;
     $17 = $15 + 16 | 0;
     $18 = $15 + 8 | 0;
     $11 = 0;
     while (1) {
      $8 = 128;
      label$9 : {
       label$10 : {
        if (((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $11 | 0) > 127) {
         break label$10
        }
        $8 = (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $11 | 0;
        if (($8 | 0) > 0) {
         break label$10
        }
        $10 = -1797693134862315708145274.0e284;
        $7 = -1;
        break label$9;
       }
       $7 = $8 & 1;
       $4 = 0;
       if (($8 | 0) != 1) {
        $13 = $8 & -2;
        $6 = $9;
        while (1) {
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $4, $6);
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $4 + 1 | 0, $6 + 32 | 0);
         $6 = $6 - -64 | 0;
         $4 = $4 + 2 | 0;
         if (($13 | 0) != ($4 | 0)) {
          continue
         }
         break;
        };
       }
       if ($7) {
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $4, ($4 << 5) + $9 | 0)
       }
       $19 = HEAPF64[$17 >> 3];
       $20 = HEAPF64[$18 >> 3];
       $21 = HEAPF64[$15 >> 3];
       $6 = 0;
       $7 = -1;
       $10 = -1797693134862315708145274.0e284;
       $4 = $9;
       while (1) {
        $16 = HEAPF64[$4 + 16 >> 3] * $19 + (HEAPF64[$4 >> 3] * $21 + $20 * HEAPF64[$4 + 8 >> 3]);
        $13 = $16 > $10;
        $10 = $13 ? $16 : $10;
        $7 = $13 ? $6 : $7;
        $4 = $4 + 32 | 0;
        $6 = $6 + 1 | 0;
        if (($8 | 0) != ($6 | 0)) {
         continue
        }
        break;
       };
      }
      if ($10 > HEAPF64[$12 >> 3]) {
       $4 = ($7 << 5) + $9 | 0;
       $6 = $4 + 24 | 0;
       $7 = HEAP32[$6 + 4 >> 2];
       HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$12 + 4 >> 2] = $7;
       $7 = HEAP32[$4 + 12 >> 2];
       $6 = $5 + 8 | 0;
       HEAP32[$6 >> 2] = HEAP32[$4 + 8 >> 2];
       HEAP32[$6 + 4 >> 2] = $7;
       $6 = HEAP32[$4 + 4 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$5 + 4 >> 2] = $6;
       $4 = $4 + 16 | 0;
       $7 = HEAP32[$4 + 4 >> 2];
       $6 = $5 + 16 | 0;
       HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$6 + 4 >> 2] = $7;
       HEAPF64[$12 >> 3] = $10;
      }
      $11 = $11 + 128 | 0;
      if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) > ($11 | 0)) {
       continue
      }
      break;
     };
    }
    $14 = $14 + 1 | 0;
    if (($14 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $9 + 4096 | 0;
 }
 
 function btPolyhedralConvexShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $3 = $4 + 80 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 88 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 96 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 112 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 104 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 120 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 128 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 136 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 152 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 144 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 160 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 168 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 176 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 184 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$4 + 72 >> 2] = 0;
  HEAP32[$4 + 76 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 68 >> 2] = 1072693248;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4 - -64 | 0, $4 + 32 | 0, $4);
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $1 = $1 * .08333333;
  $6 = $5 + (HEAPF64[$4 >> 3] - HEAPF64[$4 + 32 >> 3]) * .5;
  $6 = $6 + $6;
  $6 = $6 * $6;
  $7 = $5 + (HEAPF64[$4 + 8 >> 3] - HEAPF64[$4 + 40 >> 3]) * .5;
  $7 = $7 + $7;
  $7 = $7 * $7;
  HEAPF64[$2 + 16 >> 3] = $1 * ($6 + $7);
  $5 = $5 + (HEAPF64[$4 + 16 >> 3] - HEAPF64[$4 + 48 >> 3]) * .5;
  $5 = $5 + $5;
  $5 = $5 * $5;
  HEAPF64[$2 + 8 >> 3] = $1 * ($6 + $5);
  HEAPF64[$2 >> 3] = $1 * ($7 + $5);
  __stack_pointer = $4 + 192 | 0;
 }
 
 function btPolyhedralConvexAabbCachingShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0;
  $3 = __stack_pointer - 192 | 0;
  __stack_pointer = $3;
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
  HEAP8[$0 + 168 | 0] = 1;
  if (!HEAPU8[31568]) {
   HEAP32[7846] = 0;
   HEAP32[7847] = 0;
   HEAP32[7844] = 0;
   HEAP32[7845] = 1072693248;
   HEAP32[7848] = 0;
   HEAP32[7849] = 0;
   HEAP32[7850] = 0;
   HEAP32[7851] = 0;
   HEAP32[7852] = 0;
   HEAP32[7853] = 0;
   HEAP32[7856] = 0;
   HEAP32[7857] = 0;
   HEAP32[7854] = 0;
   HEAP32[7855] = 1072693248;
   HEAP32[7858] = 0;
   HEAP32[7859] = 0;
   HEAP32[7860] = 0;
   HEAP32[7861] = 0;
   HEAP32[7862] = 0;
   HEAP32[7863] = 0;
   HEAP32[7870] = 0;
   HEAP32[7871] = 0;
   HEAP32[7868] = 0;
   HEAP32[7869] = -1074790400;
   HEAP32[7866] = 0;
   HEAP32[7867] = 0;
   HEAP32[7864] = 0;
   HEAP32[7865] = 1072693248;
   HEAP32[7872] = 0;
   HEAP32[7873] = 0;
   HEAP32[7874] = 0;
   HEAP32[7875] = 0;
   HEAP32[7876] = 0;
   HEAP32[7877] = 0;
   HEAP32[7878] = 0;
   HEAP32[7879] = -1074790400;
   HEAP32[7886] = 0;
   HEAP32[7887] = 0;
   HEAP32[7884] = 0;
   HEAP32[7885] = 0;
   HEAP32[7882] = 0;
   HEAP32[7883] = 0;
   HEAP32[7880] = 0;
   HEAP32[7881] = 0;
   HEAP32[7890] = 0;
   HEAP32[7891] = 0;
   HEAP32[7888] = 0;
   HEAP32[7889] = -1074790400;
   HEAP8[31568] = 1;
  }
  $1 = memset($3, 0, 192);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, 31376, $1, 6);
  $2 = HEAPF64[$0 + 80 >> 3];
  HEAPF64[$0 + 136 >> 3] = $2 + HEAPF64[$1 >> 3];
  HEAPF64[$0 + 104 >> 3] = HEAPF64[$1 + 96 >> 3] - $2;
  HEAPF64[$0 + 144 >> 3] = $2 + HEAPF64[$1 + 40 >> 3];
  HEAPF64[$0 + 112 >> 3] = HEAPF64[$1 + 136 >> 3] - $2;
  HEAPF64[$0 + 152 >> 3] = $2 + HEAPF64[$1 + 80 >> 3];
  HEAPF64[$0 + 120 >> 3] = HEAPF64[$1 + 176 >> 3] - $2;
  __stack_pointer = $1 + 192 | 0;
 }
 
 function btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
  $4 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $24 = HEAPF64[$1 + 104 >> 3];
  $8 = HEAPF64[$1 + 48 >> 3];
  $9 = HEAPF64[$1 + 40 >> 3];
  $10 = HEAPF64[$1 + 112 >> 3];
  $6 = HEAPF64[$1 + 80 >> 3];
  $7 = HEAPF64[$0 + 120 >> 3];
  $5 = HEAPF64[$0 + 152 >> 3];
  $11 = HEAPF64[$1 + 72 >> 3];
  $15 = HEAPF64[$0 + 112 >> 3];
  $16 = HEAPF64[$0 + 144 >> 3];
  $25 = HEAPF64[$1 + 96 >> 3];
  $17 = HEAPF64[$1 + 16 >> 3];
  $18 = HEAPF64[$1 >> 3];
  $19 = HEAPF64[$1 + 8 >> 3];
  $20 = HEAPF64[$1 + 32 >> 3];
  $21 = HEAPF64[$1 + 64 >> 3];
  $22 = HEAPF64[$0 + 104 >> 3];
  $23 = HEAPF64[$0 + 136 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $12 = $10;
  $10 = ($5 + $7) * .5;
  $13 = ($23 + $22) * .5;
  $14 = ($16 + $15) * .5;
  $12 = $12 + ($6 * $10 + ($21 * $13 + $11 * $14));
  $7 = $4 + ($5 - $7) * .5;
  $5 = $7 * Math_abs($6);
  $6 = $4 + ($23 - $22) * .5;
  $4 = $4 + ($16 - $15) * .5;
  $5 = $5 + ($6 * Math_abs($21) + $4 * Math_abs($11));
  HEAPF64[$2 + 16 >> 3] = $12 - $5;
  $11 = $24 + ($10 * $8 + ($13 * $20 + $14 * $9));
  $8 = $7 * Math_abs($8) + ($6 * Math_abs($20) + $4 * Math_abs($9));
  HEAPF64[$2 + 8 >> 3] = $11 - $8;
  $9 = $25 + ($10 * $17 + ($13 * $18 + $14 * $19));
  $4 = $7 * Math_abs($17) + ($6 * Math_abs($18) + $4 * Math_abs($19));
  HEAPF64[$2 >> 3] = $9 - $4;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $5 + $12;
  HEAPF64[$3 + 8 >> 3] = $8 + $11;
  HEAPF64[$3 >> 3] = $4 + $9;
 }
 
 function btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1, $2, $3);
 }
 
 function btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 5992;
  $1 = HEAP32[$0 + 96 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 96 >> 2]);
  }
  return $0 | 0;
 }
 
 function btPrimitiveTriangle__clip_triangle_28btPrimitiveTriangle__2c_20btVector3__29($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0;
  $13 = __stack_pointer - 1056 | 0;
  __stack_pointer = $13;
  $11 = HEAPF64[$0 + 40 >> 3];
  $3 = $11 - HEAPF64[$0 + 8 >> 3];
  $4 = HEAPF64[$0 + 112 >> 3];
  $8 = HEAPF64[$0 + 104 >> 3];
  $16 = HEAPF64[$0 + 48 >> 3];
  $12 = $16 - HEAPF64[$0 + 16 >> 3];
  $6 = $3 * $4 - $8 * $12;
  $21 = $6;
  $17 = HEAPF64[$0 + 32 >> 3];
  $20 = $17 - HEAPF64[$0 >> 3];
  $22 = $20 * $8;
  $8 = HEAPF64[$0 + 96 >> 3];
  $3 = $22 - $8 * $3;
  $22 = $6 * $6;
  $6 = $12 * $8 - $4 * $20;
  $4 = 1.0 / Math_sqrt($3 * $3 + ($22 + $6 * $6));
  $8 = $21 * $4;
  HEAPF64[$13 + 512 >> 3] = $8;
  $6 = $6 * $4;
  HEAPF64[$13 + 520 >> 3] = $6;
  $3 = $3 * $4;
  HEAPF64[$13 + 528 >> 3] = $3;
  HEAPF64[$13 + 536 >> 3] = $16 * $3 + ($17 * $8 + $11 * $6);
  $5 = $1 + 32 | 0;
  $14 = $1 - -64 | 0;
  $18 = $13 + 544 | 0;
  $15 = $13 + 512 | 0;
  $3 = HEAPF64[$15 + 16 >> 3];
  $4 = HEAPF64[$15 >> 3];
  $11 = HEAPF64[$15 + 8 >> 3];
  $8 = HEAPF64[$15 + 24 >> 3];
  $6 = HEAPF64[$1 + 16 >> 3] * $3 + (HEAPF64[$1 >> 3] * $4 + HEAPF64[$1 + 8 >> 3] * $11) - $8;
  $9 = $6 > 2.220446049250313e-16;
  if (!$9) {
   $7 = HEAP32[$1 + 4 >> 2];
   HEAP32[$18 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$18 + 4 >> 2] = $7;
   $7 = $1 + 24 | 0;
   $19 = HEAP32[$7 + 4 >> 2];
   $10 = $18 + 24 | 0;
   HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$10 + 4 >> 2] = $19;
   $7 = $1 + 16 | 0;
   $19 = HEAP32[$7 + 4 >> 2];
   $10 = $18 + 16 | 0;
   HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$10 + 4 >> 2] = $19;
   $7 = $1 + 8 | 0;
   $19 = HEAP32[$7 + 4 >> 2];
   $10 = $18 + 8 | 0;
   HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$10 + 4 >> 2] = $19;
   $8 = HEAPF64[$15 + 24 >> 3];
   $3 = HEAPF64[$15 + 16 >> 3];
   $11 = HEAPF64[$15 + 8 >> 3];
   $4 = HEAPF64[$15 >> 3];
   $7 = 1;
  }
  $16 = HEAPF64[$5 + 16 >> 3];
  $12 = HEAPF64[$5 >> 3];
  $17 = HEAPF64[$5 + 8 >> 3];
  $3 = $16 * $3 + ($12 * $4 + $17 * $11) - $8;
  if (($3 > 2.220446049250313e-16 | 0) != ($9 | 0)) {
   $8 = HEAPF64[$1 >> 3];
   $20 = HEAPF64[$1 + 8 >> 3];
   $21 = HEAPF64[$1 + 16 >> 3];
   $9 = ($7 << 5) + $18 | 0;
   HEAP32[$9 + 24 >> 2] = 0;
   HEAP32[$9 + 28 >> 2] = 0;
   $4 = -$6 / ($3 - $6);
   $11 = 1.0 - $4;
   HEAPF64[$9 + 16 >> 3] = $16 * $4 + $21 * $11;
   HEAPF64[$9 + 8 >> 3] = $17 * $4 + $11 * $20;
   HEAPF64[$9 >> 3] = $12 * $4 + $11 * $8;
   $7 = $7 + 1 | 0;
  }
  $19 = $3 > 2.220446049250313e-16;
  if (!$19) {
   $10 = HEAP32[$5 + 4 >> 2];
   $9 = ($7 << 5) + $18 | 0;
   HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$9 + 4 >> 2] = $10;
   $10 = $5 + 24 | 0;
   $23 = HEAP32[$10 + 4 >> 2];
   $24 = $9 + 24 | 0;
   HEAP32[$24 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$24 + 4 >> 2] = $23;
   $10 = $5 + 16 | 0;
   $23 = HEAP32[$10 + 4 >> 2];
   $24 = $9 + 16 | 0;
   HEAP32[$24 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$24 + 4 >> 2] = $23;
   $10 = $5 + 8 | 0;
   $23 = HEAP32[$10 + 4 >> 2];
   $9 = $9 + 8 | 0;
   HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$9 + 4 >> 2] = $23;
   $7 = $7 + 1 | 0;
  }
  $8 = HEAPF64[$14 + 16 >> 3];
  $16 = HEAPF64[$14 >> 3];
  $12 = HEAPF64[$14 + 8 >> 3];
  $4 = $8 * HEAPF64[$15 + 16 >> 3] + ($16 * HEAPF64[$15 >> 3] + $12 * HEAPF64[$15 + 8 >> 3]) - HEAPF64[$15 + 24 >> 3];
  if (($4 > 2.220446049250313e-16 | 0) != ($19 | 0)) {
   $17 = HEAPF64[$5 >> 3];
   $20 = HEAPF64[$5 + 8 >> 3];
   $21 = HEAPF64[$5 + 16 >> 3];
   $5 = ($7 << 5) + $18 | 0;
   HEAP32[$5 + 24 >> 2] = 0;
   HEAP32[$5 + 28 >> 2] = 0;
   $3 = -$3 / ($4 - $3);
   $11 = 1.0 - $3;
   HEAPF64[$5 + 16 >> 3] = $8 * $3 + $21 * $11;
   HEAPF64[$5 + 8 >> 3] = $12 * $3 + $11 * $20;
   HEAPF64[$5 >> 3] = $16 * $3 + $11 * $17;
   $7 = $7 + 1 | 0;
  }
  $15 = $4 > 2.220446049250313e-16;
  if (!$15) {
   $9 = HEAP32[$14 + 4 >> 2];
   $5 = ($7 << 5) + $18 | 0;
   HEAP32[$5 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$5 + 4 >> 2] = $9;
   $9 = $14 + 24 | 0;
   $19 = HEAP32[$9 + 4 >> 2];
   $10 = $5 + 24 | 0;
   HEAP32[$10 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$10 + 4 >> 2] = $19;
   $9 = $14 + 16 | 0;
   $19 = HEAP32[$9 + 4 >> 2];
   $10 = $5 + 16 | 0;
   HEAP32[$10 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$10 + 4 >> 2] = $19;
   $9 = $14 + 8 | 0;
   $19 = HEAP32[$9 + 4 >> 2];
   $5 = $5 + 8 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $19;
   $7 = $7 + 1 | 0;
  }
  if (($6 > 2.220446049250313e-16 | 0) != ($15 | 0)) {
   $11 = HEAPF64[$14 >> 3];
   $8 = HEAPF64[$1 >> 3];
   $16 = HEAPF64[$14 + 8 >> 3];
   $12 = HEAPF64[$1 + 8 >> 3];
   $3 = HEAPF64[$14 + 16 >> 3];
   $17 = HEAPF64[$1 + 16 >> 3];
   $5 = ($7 << 5) + $18 | 0;
   HEAP32[$5 + 24 >> 2] = 0;
   HEAP32[$5 + 28 >> 2] = 0;
   $21 = $3;
   $3 = -$4 / ($6 - $4);
   $4 = 1.0 - $3;
   HEAPF64[$5 + 16 >> 3] = $21 * $4 + $3 * $17;
   HEAPF64[$5 + 8 >> 3] = $4 * $16 + $3 * $12;
   HEAPF64[$5 >> 3] = $4 * $11 + $3 * $8;
   $7 = $7 + 1 | 0;
  }
  if ($6 > 2.220446049250313e-16) {
   $1 = $7
  } else {
   $14 = HEAP32[$1 + 4 >> 2];
   $5 = ($7 << 5) + $18 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$5 + 4 >> 2] = $14;
   $14 = $1 + 24 | 0;
   $18 = HEAP32[$14 + 4 >> 2];
   $15 = $5 + 24 | 0;
   HEAP32[$15 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$15 + 4 >> 2] = $18;
   $14 = $1 + 16 | 0;
   $18 = HEAP32[$14 + 4 >> 2];
   $15 = $5 + 16 | 0;
   HEAP32[$15 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$15 + 4 >> 2] = $18;
   $1 = $1 + 8 | 0;
   $14 = HEAP32[$1 + 4 >> 2];
   $5 = $5 + 8 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$5 + 4 >> 2] = $14;
   $1 = $7 + 1 | 0;
  }
  $7 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $11 = HEAPF64[$0 + 80 >> 3];
   $4 = $11 - HEAPF64[$0 + 48 >> 3];
   $3 = HEAPF64[$0 + 96 >> 3];
   $8 = HEAPF64[$0 + 112 >> 3];
   $16 = HEAPF64[$0 + 64 >> 3];
   $12 = $16 - HEAPF64[$0 + 32 >> 3];
   $6 = $4 * $3 - $8 * $12;
   $22 = $6;
   $21 = $12;
   $12 = HEAPF64[$0 + 104 >> 3];
   $17 = HEAPF64[$0 + 72 >> 3];
   $20 = $17 - HEAPF64[$0 + 40 >> 3];
   $3 = $21 * $12 - $3 * $20;
   $4 = $20 * $8 - $12 * $4;
   $6 = 1.0 / Math_sqrt($3 * $3 + ($4 * $4 + $6 * $6));
   $8 = $22 * $6;
   HEAPF64[$13 + 520 >> 3] = $8;
   $4 = $4 * $6;
   HEAPF64[$13 + 512 >> 3] = $4;
   $6 = $3 * $6;
   HEAPF64[$13 + 528 >> 3] = $6;
   HEAPF64[$13 + 536 >> 3] = $11 * $6 + ($16 * $4 + $17 * $8);
   $1 = bt_plane_clip_polygon_28btVector4_20const__2c_20btVector3_20const__2c_20int_2c_20btVector3__29($13 + 512 | 0, $13 + 544 | 0, $1, $13);
   $7 = 0;
   if (!$1) {
    break label$1
   }
   $11 = HEAPF64[$0 + 16 >> 3];
   $4 = $11 - HEAPF64[$0 + 80 >> 3];
   $3 = HEAPF64[$0 + 96 >> 3];
   $8 = HEAPF64[$0 + 112 >> 3];
   $16 = HEAPF64[$0 >> 3];
   $12 = $16 - HEAPF64[$0 + 64 >> 3];
   $6 = $4 * $3 - $8 * $12;
   $22 = $6;
   $21 = $12;
   $12 = HEAPF64[$0 + 104 >> 3];
   $17 = HEAPF64[$0 + 8 >> 3];
   $20 = $17 - HEAPF64[$0 + 72 >> 3];
   $3 = $21 * $12 - $3 * $20;
   $4 = $20 * $8 - $12 * $4;
   $6 = 1.0 / Math_sqrt($3 * $3 + ($4 * $4 + $6 * $6));
   $8 = $22 * $6;
   HEAPF64[$13 + 520 >> 3] = $8;
   $4 = $4 * $6;
   HEAPF64[$13 + 512 >> 3] = $4;
   $6 = $3 * $6;
   HEAPF64[$13 + 528 >> 3] = $6;
   HEAPF64[$13 + 536 >> 3] = $11 * $6 + ($16 * $4 + $17 * $8);
   $7 = bt_plane_clip_polygon_28btVector4_20const__2c_20btVector3_20const__2c_20int_2c_20btVector3__29($13 + 512 | 0, $13, $1, $2);
  }
  $0 = $7;
  __stack_pointer = $13 + 1056 | 0;
  return $0;
 }
 
 function bt_plane_clip_polygon_28btVector4_20const__2c_20btVector3_20const__2c_20int_2c_20btVector3__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0;
  $10 = HEAPF64[$1 + 16 >> 3] * HEAPF64[$0 + 16 >> 3] + (HEAPF64[$1 >> 3] * HEAPF64[$0 >> 3] + HEAPF64[$1 + 8 >> 3] * HEAPF64[$0 + 8 >> 3]) - HEAPF64[$0 + 24 >> 3];
  if (!($10 > 2.220446049250313e-16)) {
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $6 = $1 + 24 | 0;
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = $3 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $6 = $1 + 16 | 0;
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = $3 + 16 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $6 = $1 + 8 | 0;
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = $3 + 8 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $5 = 1;
  }
  label$2 : {
   if (($2 | 0) < 2) {
    $8 = $10;
    break label$2;
   }
   $16 = $2 - 1 | 0;
   $4 = $1;
   $9 = $10;
   while (1) {
    $17 = $4 + 48 | 0;
    $13 = HEAPF64[$17 >> 3];
    $6 = $4 + 32 | 0;
    $14 = HEAPF64[$6 >> 3];
    $18 = $4 + 40 | 0;
    $15 = HEAPF64[$18 >> 3];
    $8 = $13 * HEAPF64[$0 + 16 >> 3] + ($14 * HEAPF64[$0 >> 3] + $15 * HEAPF64[$0 + 8 >> 3]) - HEAPF64[$0 + 24 >> 3];
    $11 = $8 > 2.220446049250313e-16;
    if (($11 | 0) != ($9 > 2.220446049250313e-16 | 0)) {
     $19 = HEAPF64[$4 + 8 >> 3];
     $20 = HEAPF64[$4 + 16 >> 3];
     $21 = HEAPF64[$4 >> 3];
     $7 = ($5 << 5) + $3 | 0;
     HEAP32[$7 + 24 >> 2] = 0;
     HEAP32[$7 + 28 >> 2] = 0;
     $9 = -$9 / ($8 - $9);
     $12 = 1.0 - $9;
     HEAPF64[$7 + 16 >> 3] = $13 * $9 + $20 * $12;
     HEAPF64[$7 + 8 >> 3] = $15 * $9 + $12 * $19;
     HEAPF64[$7 >> 3] = $14 * $9 + $12 * $21;
     $5 = $5 + 1 | 0;
    }
    if (!$11) {
     $11 = HEAP32[$6 + 4 >> 2];
     $7 = ($5 << 5) + $3 | 0;
     HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$7 + 4 >> 2] = $11;
     $4 = $4 + 56 | 0;
     $22 = HEAP32[$4 + 4 >> 2];
     $11 = $7 + 24 | 0;
     HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$11 + 4 >> 2] = $22;
     $11 = HEAP32[$17 + 4 >> 2];
     $4 = $7 + 16 | 0;
     HEAP32[$4 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$4 + 4 >> 2] = $11;
     $4 = $7 + 8 | 0;
     $7 = HEAP32[$18 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$4 + 4 >> 2] = $7;
     $5 = $5 + 1 | 0;
    }
    $4 = $6;
    $9 = $8;
    $16 = $16 - 1 | 0;
    if ($16) {
     continue
    }
    break;
   };
  }
  $4 = $10 > 2.220446049250313e-16;
  if (($4 | 0) != ($8 > 2.220446049250313e-16 | 0)) {
   $0 = ($2 - 1 << 5) + $1 | 0;
   $9 = HEAPF64[$0 >> 3];
   $12 = HEAPF64[$0 + 8 >> 3];
   $13 = HEAPF64[$0 + 16 >> 3];
   $14 = HEAPF64[$1 >> 3];
   $15 = HEAPF64[$1 + 8 >> 3];
   $19 = HEAPF64[$1 + 16 >> 3];
   $0 = ($5 << 5) + $3 | 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   $8 = -$8 / ($10 - $8);
   $10 = 1.0 - $8;
   HEAPF64[$0 + 16 >> 3] = $13 * $10 + $8 * $19;
   HEAPF64[$0 + 8 >> 3] = $10 * $12 + $8 * $15;
   HEAPF64[$0 >> 3] = $10 * $9 + $8 * $14;
   $5 = $5 + 1 | 0;
  }
  if (!$4) {
   $2 = HEAP32[$1 + 4 >> 2];
   $0 = ($5 << 5) + $3 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   $3 = $1 + 24 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 24 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 16 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 16 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $1 = $1 + 8 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $0 = $0 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   $5 = $5 + 1 | 0;
  }
  return $5;
 }
 
 function btBU_Simplex1to4__btBU_Simplex1to4_28_29($0) {
  var $1 = 0;
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAP8[$0 + 168 | 0] = 0;
  $1 = $0 + 160 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1074790400;
  $1 = $0 + 144 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1074790400;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 140 >> 2] = -1074790400;
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 1072693248;
  HEAP32[$0 >> 2] = 6124;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP32[$0 >> 2] = 6348;
  HEAP32[$0 + 4 >> 2] = 2;
 }
 
 function btBU_Simplex1to4__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3);
 }
 
 function btBU_Simplex1to4__getNumVertices_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 172 >> 2];
 }
 
 function btBU_Simplex1to4__getNumEdges_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[$0 + 172 >> 2] - 2 | 0;
  if ($0 >>> 0 <= 2) {
   $1 = HEAP32[($0 << 2) + 6508 >> 2]
  }
  return $1 | 0;
 }
 
 function btBU_Simplex1to4__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$0 + 172 >> 2] - 2 | 0) {
     case 0:
      $1 = HEAP32[$0 + 180 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$0 + 176 >> 2];
      HEAP32[$2 + 4 >> 2] = $1;
      $4 = $0 + 200 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 192 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $1 = $2 + 8 | 0;
      $2 = $0 + 184 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$1 + 4 >> 2] = $4;
      $0 = $0 + 208 | 0;
      break label$2;
     case 1:
      label$6 : {
       switch ($1 | 0) {
       case 0:
        $1 = HEAP32[$0 + 180 >> 2];
        HEAP32[$2 >> 2] = HEAP32[$0 + 176 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $4 = $0 + 200 | 0;
        $5 = HEAP32[$4 + 4 >> 2];
        $1 = $2 + 24 | 0;
        HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$1 + 4 >> 2] = $5;
        $4 = $0 + 192 | 0;
        $5 = HEAP32[$4 + 4 >> 2];
        $1 = $2 + 16 | 0;
        HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$1 + 4 >> 2] = $5;
        $1 = $2 + 8 | 0;
        $2 = $0 + 184 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$1 + 4 >> 2] = $4;
        $0 = $0 + 208 | 0;
        break label$2;
       case 1:
        $4 = $0 + 232 | 0;
        $5 = HEAP32[$4 + 4 >> 2];
        $1 = $2 + 24 | 0;
        HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$1 + 4 >> 2] = $5;
        $4 = $0 + 224 | 0;
        $5 = HEAP32[$4 + 4 >> 2];
        $1 = $2 + 16 | 0;
        HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$1 + 4 >> 2] = $5;
        $4 = $0 + 216 | 0;
        $5 = HEAP32[$4 + 4 >> 2];
        $1 = $2 + 8 | 0;
        HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$1 + 4 >> 2] = $5;
        $1 = $0 + 208 | 0;
        $4 = HEAP32[$1 + 4 >> 2];
        HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
        HEAP32[$2 + 4 >> 2] = $4;
        $0 = $0 + 240 | 0;
        break label$2;
       case 2:
        break label$6;
       default:
        break label$1;
       };
      }
      $4 = $0 + 264 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 256 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 248 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 8 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $1 = $0 + 240 | 0;
      $4 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $4;
      $0 = $0 + 176 | 0;
      break label$2;
     case 2:
      break label$3;
     default:
      break label$1;
     };
    }
    label$9 : {
     switch ($1 | 0) {
     case 0:
      $1 = HEAP32[$0 + 180 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$0 + 176 >> 2];
      HEAP32[$2 + 4 >> 2] = $1;
      $4 = $0 + 200 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 192 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $1 = $2 + 8 | 0;
      $2 = $0 + 184 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$1 + 4 >> 2] = $4;
      $0 = $0 + 208 | 0;
      break label$2;
     case 1:
      $4 = $0 + 232 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 224 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 216 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 8 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $1 = $0 + 208 | 0;
      $4 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $4;
      $0 = $0 + 240 | 0;
      break label$2;
     case 2:
      $4 = $0 + 264 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 256 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 248 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 8 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $1 = $0 + 240 | 0;
      $4 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $4;
      $0 = $0 + 176 | 0;
      break label$2;
     case 3:
      $1 = HEAP32[$0 + 180 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$0 + 176 >> 2];
      HEAP32[$2 + 4 >> 2] = $1;
      $4 = $0 + 200 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 192 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $1 = $2 + 8 | 0;
      $2 = $0 + 184 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$1 + 4 >> 2] = $4;
      $0 = $0 + 272 | 0;
      break label$2;
     case 4:
      $4 = $0 + 232 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 224 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 16 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $4 = $0 + 216 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $1 = $2 + 8 | 0;
      HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
      $1 = $0 + 208 | 0;
      $4 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $4;
      $0 = $0 + 272 | 0;
      break label$2;
     case 5:
      break label$9;
     default:
      break label$1;
     };
    }
    $4 = $0 + 264 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $1 = $2 + 24 | 0;
    HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$1 + 4 >> 2] = $5;
    $4 = $0 + 256 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $1 = $2 + 16 | 0;
    HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$1 + 4 >> 2] = $5;
    $4 = $0 + 248 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $1 = $2 + 8 | 0;
    HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$1 + 4 >> 2] = $5;
    $1 = $0 + 240 | 0;
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $0 = $0 + 272 | 0;
   }
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $1;
   $2 = $0 + 24 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $1 = $3 + 24 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   $2 = $0 + 16 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $1 = $3 + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   $0 = $0 + 8 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $1 = $3 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
  }
 }
 
 function btBU_Simplex1to4__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $0 = ($1 << 5) + $0 | 0;
  $1 = $0 + 200 | 0;
  $4 = HEAP32[$1 + 4 >> 2];
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = $0 + 192 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 16 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 184 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $0 = $0 + 176 | 0;
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
 }
 
 function btBU_Simplex1to4__getNumPlanes_28_29_20const($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 172 >> 2];
  return (($0 | 0) == 4 ? 4 : (($0 | 0) == 3) << 1) | 0;
 }
 
 function btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
 }
 
 function btBU_Simplex1to4__getIndex_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 0;
 }
 
 function btBU_Simplex1to4__isInside_28btVector3_20const__2c_20double_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  return 0;
 }
 
 function btBU_Simplex1to4___btBU_Simplex1to4_28_29($0) {
  $0 = $0 | 0;
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btPersistentManifold__btPersistentManifold_28_29($0) {
  HEAP32[$0 >> 2] = 1025;
  memset($0 + 224 | 0, 0, 76);
  memset($0 + 584 | 0, 0, 76);
  memset($0 + 944 | 0, 0, 76);
  memset($0 + 1304 | 0, 0, 76);
  HEAP32[$0 + 1488 >> 2] = 0;
  HEAP32[$0 + 1456 >> 2] = 0;
  HEAP32[$0 + 1448 >> 2] = 0;
  HEAP32[$0 + 1452 >> 2] = 0;
 }
 
 function btPersistentManifold__clearUserCache_28btManifoldPoint__29($0) {
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 + 216 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[7893];
   if (!$2) {
    break label$1
   }
   FUNCTION_TABLE[$2 | 0]($1) | 0;
   HEAP32[$0 + 216 >> 2] = 0;
  }
 }
 
 function btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($0, $1) {
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0;
  $10 = HEAP32[$0 + 1456 >> 2];
  label$1 : {
   if (($10 | 0) == 4) {
    $2 = HEAPF64[$0 + 168 >> 3];
    $4 = HEAPF64[$1 + 160 >> 3];
    $10 = $2 < $4;
    $25 = $10 ? 0 : -1;
    $3 = HEAPF64[$0 + 528 >> 3];
    $2 = $10 ? $2 : $4;
    $10 = $3 < $2;
    $40 = $10 ? 1 : $25;
    $4 = HEAPF64[$0 + 888 >> 3];
    $2 = $10 ? $3 : $2;
    $10 = $4 < $2;
    $25 = HEAPF64[$0 + 1248 >> 3] < ($10 ? $4 : $2);
    $10 = $25 ? 3 : $10 ? 2 : $40;
    $7 = HEAPF64[$1 >> 3];
    label$10 : {
     label$2 : {
      label$3 : {
       label$4 : {
        if (HEAPU8[30768]) {
         if (!$10) {
          $8 = HEAPF64[$0 + 1104 >> 3];
          $21 = HEAPF64[$0 + 744 >> 3];
          $6 = $8 - $21;
          $11 = HEAPF64[$0 + 1096 >> 3];
          $22 = HEAPF64[$0 + 736 >> 3];
          $3 = $11 - $22;
          $17 = HEAPF64[$0 + 1088 >> 3];
          $23 = HEAPF64[$0 + 728 >> 3];
          $12 = $17 - $23;
          $2 = HEAPF64[$1 + 16 >> 3];
          $4 = HEAPF64[$1 + 8 >> 3];
          break label$4;
         }
         $14 = HEAPF64[$0 + 368 >> 3];
         $5 = $7 - $14;
         $11 = HEAPF64[$0 + 1096 >> 3];
         $22 = HEAPF64[$0 + 736 >> 3];
         $3 = $11 - $22;
         $17 = HEAPF64[$0 + 1088 >> 3];
         $23 = HEAPF64[$0 + 728 >> 3];
         $12 = $17 - $23;
         $4 = HEAPF64[$1 + 8 >> 3];
         $15 = HEAPF64[$0 + 376 >> 3];
         $2 = $4 - $15;
         $6 = $5 * $3 - $12 * $2;
         $9 = $6 * $6;
         $8 = HEAPF64[$0 + 1104 >> 3];
         $21 = HEAPF64[$0 + 744 >> 3];
         $6 = $8 - $21;
         $13 = $2 * $6;
         $2 = HEAPF64[$1 + 16 >> 3];
         $20 = HEAPF64[$0 + 384 >> 3];
         $16 = $2 - $20;
         $19 = $13 - $3 * $16;
         $5 = $16 * $12 - $6 * $5;
         $50 = $9 + ($19 * $19 + $5 * $5);
         if (($10 | 0) != 1) {
          break label$4
         }
         $7 = $7 - HEAPF64[$0 + 8 >> 3];
         $5 = -$7;
         $4 = $4 - HEAPF64[$0 + 16 >> 3];
         $16 = -$4;
         $2 = $2 - HEAPF64[$0 + 24 >> 3];
         $19 = -$2;
         $12 = 0.0;
         break label$3;
        }
        $28 = HEAPF64[$1 + 16 >> 3];
        $29 = HEAPF64[$1 + 8 >> 3];
        label$7 : {
         label$8 : {
          label$9 : {
           label$101 : {
            if (!$10) {
             $20 = HEAPF64[$0 + 744 >> 3];
             $6 = HEAPF64[$0 + 1104 >> 3];
             $12 = $20 - $6;
             $15 = HEAPF64[$0 + 736 >> 3];
             $3 = HEAPF64[$0 + 1096 >> 3];
             $13 = $15 - $3;
             $14 = HEAPF64[$0 + 728 >> 3];
             $2 = HEAPF64[$0 + 1088 >> 3];
             $24 = $14 - $2;
             $35 = $29 - $3;
             $44 = -$35;
             $4 = $7 - $2;
             $45 = -$4;
             $36 = $28 - $6;
             $46 = -$36;
             $30 = $7 - $14;
             $27 = -$30;
             $31 = $28 - $20;
             $41 = -$31;
             $32 = $29 - $15;
             $9 = -$32;
             break label$101;
            }
            $5 = HEAPF64[$0 + 368 >> 3];
            $21 = $7 - $5;
            $15 = HEAPF64[$0 + 736 >> 3];
            $3 = HEAPF64[$0 + 1096 >> 3];
            $13 = $15 - $3;
            $14 = HEAPF64[$0 + 728 >> 3];
            $2 = HEAPF64[$0 + 1088 >> 3];
            $24 = $14 - $2;
            $16 = HEAPF64[$0 + 376 >> 3];
            $22 = $29 - $16;
            $4 = $21 * $13 - $24 * $22;
            $9 = $4 * $4;
            $20 = HEAPF64[$0 + 744 >> 3];
            $6 = HEAPF64[$0 + 1104 >> 3];
            $12 = $20 - $6;
            $19 = HEAPF64[$0 + 384 >> 3];
            $23 = $28 - $19;
            $4 = $22 * $12 - $13 * $23;
            $8 = $4 * $4;
            $4 = $23 * $24 - $12 * $21;
            $4 = $9 + ($8 + $4 * $4);
            $30 = $7 - $14;
            $26 = $16 - $3;
            $9 = $5 - $2;
            $32 = $29 - $15;
            $8 = $30 * $26 - $9 * $32;
            $11 = $8 * $8;
            $27 = $19 - $6;
            $31 = $28 - $20;
            $8 = $32 * $27 - $26 * $31;
            $17 = $8 * $8;
            $8 = $31 * $9 - $27 * $30;
            $8 = $11 + ($17 + $8 * $8);
            $8 = $4 > $8 ? $4 : $8;
            $4 = $7 - $2;
            $11 = $16 - $15;
            $17 = $5 - $14;
            $35 = $29 - $3;
            $18 = $4 * $11 - $17 * $35;
            $33 = $18 * $18;
            $18 = $19 - $20;
            $36 = $28 - $6;
            $11 = $35 * $18 - $11 * $36;
            $34 = $11 * $11;
            $11 = $36 * $17 - $18 * $4;
            $11 = $33 + ($34 + $11 * $11);
            $50 = $8 > $11 ? $8 : $11;
            $44 = -$35;
            $45 = -$4;
            $46 = -$36;
            if (($10 | 0) == 1) {
             break label$9
            }
            $27 = -$30;
            $41 = -$31;
            $9 = -$32;
           }
           $8 = HEAPF64[$0 + 8 >> 3];
           $33 = $7 - $8;
           $11 = HEAPF64[$0 + 16 >> 3];
           $34 = $29 - $11;
           $5 = $33 * $13 - $24 * $34;
           $18 = $5 * $5;
           $17 = HEAPF64[$0 + 24 >> 3];
           $37 = $28 - $17;
           $5 = $34 * $12 - $13 * $37;
           $12 = $37 * $24 - $12 * $33;
           $12 = $18 + ($5 * $5 + $12 * $12);
           $18 = $11 - $3;
           $38 = $8 - $2;
           $5 = $30 * $18 + $38 * $9;
           $13 = $5 * $5;
           $39 = $17 - $6;
           $5 = $32 * $39 + $18 * $41;
           $16 = $5 * $5;
           $5 = $31 * $38 + $39 * $27;
           $5 = $13 + ($16 + $5 * $5);
           $12 = $5 < $12 ? $12 : $5;
           $13 = $11 - $15;
           $24 = $8 - $14;
           $5 = $4 * $13 + $24 * $44;
           $16 = $5 * $5;
           $26 = $17 - $20;
           $5 = $35 * $26 + $13 * $46;
           $19 = $5 * $5;
           $5 = $36 * $24 + $26 * $45;
           $5 = $16 + ($19 + $5 * $5);
           $12 = $5 < $12 ? $12 : $5;
           $19 = HEAPF64[$0 + 384 >> 3];
           $23 = $28 - $19;
           $16 = HEAPF64[$0 + 376 >> 3];
           $22 = $29 - $16;
           $5 = HEAPF64[$0 + 368 >> 3];
           $21 = $7 - $5;
           $47 = -$34;
           $48 = -$33;
           $49 = -$37;
           if (($10 | 0) == 2) {
            $2 = $17 - $19;
            $18 = $11 - $16;
            $4 = $8 - $5;
            $6 = -$22;
            $42 = -$21;
            $43 = -$23;
            $3 = 0.0;
            break label$7;
           }
           $27 = $19 - $6;
           $26 = $16 - $3;
           $9 = $5 - $2;
           $42 = -$21;
           $43 = -$23;
           $6 = -$22;
           break label$8;
          }
          $42 = -$21;
          $43 = -$23;
          $17 = HEAPF64[$0 + 24 >> 3];
          $39 = $17 - $6;
          $11 = HEAPF64[$0 + 16 >> 3];
          $18 = $11 - $3;
          $8 = HEAPF64[$0 + 8 >> 3];
          $38 = $8 - $2;
          $34 = $29 - $11;
          $47 = -$34;
          $33 = $7 - $8;
          $48 = -$33;
          $37 = $28 - $17;
          $49 = -$37;
          $12 = 0.0;
          $6 = -$22;
         }
         $2 = $33 * $26 + $9 * $47;
         $3 = $2 * $2;
         $2 = $34 * $27 + $26 * $49;
         $13 = $2 * $2;
         $2 = $37 * $9 + $27 * $48;
         $2 = $3 + ($13 + $2 * $2);
         $3 = $21 * $18 + $38 * $6;
         $9 = $3 * $3;
         $3 = $22 * $39 + $18 * $43;
         $13 = $3 * $3;
         $3 = $23 * $38 + $39 * $42;
         $3 = $9 + ($13 + $3 * $3);
         $3 = $2 > $3 ? $2 : $3;
         $18 = $11 - $16;
         $2 = $4 * $18;
         $4 = $8 - $5;
         $2 = $2 + $4 * $44;
         $9 = $2 * $2;
         $2 = $17 - $19;
         $13 = $35 * $2 + $18 * $46;
         $24 = $13 * $13;
         $13 = $36 * $4 + $2 * $45;
         $13 = $9 + ($24 + $13 * $13);
         $3 = $3 > $13 ? $3 : $13;
         $9 = 0.0;
         if ($25) {
          break label$10
         }
         $26 = $17 - $20;
         $13 = $11 - $15;
         $24 = $8 - $14;
         $32 = $29 - $15;
         $9 = -$32;
         $30 = $7 - $14;
         $27 = -$30;
         $31 = $28 - $20;
         $41 = -$31;
        }
        $7 = $16 - $15;
        $14 = $5 - $14;
        $15 = $33 * $7 + $14 * $47;
        $5 = $15 * $15;
        $15 = $19 - $20;
        $7 = $34 * $15 + $7 * $49;
        $8 = $7 * $7;
        $7 = $37 * $14 + $15 * $48;
        $7 = $5 + ($8 + $7 * $7);
        $6 = $21 * $13 + $24 * $6;
        $5 = $6 * $6;
        $6 = $22 * $26 + $13 * $43;
        $8 = $6 * $6;
        $6 = $23 * $24 + $26 * $42;
        $6 = $5 + ($8 + $6 * $6);
        $7 = $6 < $7 ? $7 : $6;
        $6 = $30 * $18 + $4 * $9;
        $9 = $6 * $6;
        $6 = $32 * $2 + $18 * $41;
        $2 = $31 * $4 + $2 * $27;
        $2 = $9 + ($6 * $6 + $2 * $2);
        $9 = $2 < $7 ? $7 : $2;
        break label$10;
       }
       $7 = $7 - HEAPF64[$0 + 8 >> 3];
       $4 = $4 - HEAPF64[$0 + 16 >> 3];
       $14 = $7 * $3 - $12 * $4;
       $2 = $2 - HEAPF64[$0 + 24 >> 3];
       $3 = $4 * $6 - $3 * $2;
       $9 = $3 * $3;
       $3 = $2 * $12 - $6 * $7;
       $12 = $14 * $14 + ($9 + $3 * $3);
       $20 = HEAPF64[$0 + 384 >> 3];
       $15 = HEAPF64[$0 + 376 >> 3];
       $14 = HEAPF64[$0 + 368 >> 3];
       $5 = -$7;
       $16 = -$4;
       $19 = -$2;
       $3 = 0.0;
       if (($10 | 0) == 2) {
        break label$2
       }
      }
      $3 = $11 - $15;
      $6 = $17 - $14;
      $11 = $7 * $3 + $6 * $16;
      $8 = $8 - $20;
      $3 = $4 * $8 + $3 * $19;
      $9 = $3 * $3;
      $3 = $2 * $6 + $8 * $5;
      $3 = $11 * $11 + ($9 + $3 * $3);
      $9 = 0.0;
      if ($25) {
       break label$10
      }
     }
     $9 = $7;
     $7 = $22 - $15;
     $6 = $23 - $14;
     $14 = $9 * $7 + $6 * $16;
     $9 = $4;
     $4 = $21 - $20;
     $7 = $9 * $4 + $7 * $19;
     $2 = $2 * $6 + $4 * $5;
     $9 = $14 * $14 + ($7 * $7 + $2 * $2);
    }
    $2 = $9;
    $4 = Math_abs($50);
    $10 = $4 > -1.e+30;
    $25 = $10 ? 0 : -1;
    $12 = Math_abs($12);
    $4 = $10 ? $4 : -1.e+30;
    $10 = $12 > $4;
    $25 = $10 ? 1 : $25;
    $3 = Math_abs($3);
    $4 = $10 ? $12 : $4;
    $10 = $3 > $4;
    $10 = Math_abs($2) > ($10 ? $3 : $4) ? 3 : $10 ? 2 : $25;
    $25 = (Math_imul($10, 360) + $0 | 0) + 224 | 0;
    $40 = HEAP32[$25 >> 2];
    if (!$40) {
     break label$1
    }
    $51 = HEAP32[7893];
    if (!$51) {
     break label$1
    }
    FUNCTION_TABLE[$51 | 0]($40) | 0;
    HEAP32[$25 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 1456 >> 2] = $10 + 1;
  }
  $10 = ($10 | 0) > 0 ? $10 : 0;
  memcpy(($0 + Math_imul($10, 360) | 0) + 8 | 0, $1, 360);
  return $10;
 }
 
 function btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  $3 = HEAP32[$0 + 1456 >> 2];
  label$1 : {
   if (($3 | 0) <= 0) {
    break label$1
   }
   $4 = $3 + 1 | 0;
   $3 = (Math_imul($3, 360) + $0 | 0) - 352 | 0;
   while (1) {
    $14 = HEAPF64[$1 + 96 >> 3];
    $18 = HEAPF64[$1 + 16 >> 3];
    $19 = HEAPF64[$1 + 8 >> 3];
    $20 = HEAPF64[$1 >> 3];
    $15 = HEAPF64[$1 + 104 >> 3];
    $21 = HEAPF64[$1 + 48 >> 3];
    $10 = HEAPF64[$1 + 40 >> 3];
    $22 = HEAPF64[$1 + 32 >> 3];
    $5 = HEAPF64[$1 + 112 >> 3];
    $7 = HEAPF64[$1 + 80 >> 3];
    $6 = HEAPF64[$1 + 72 >> 3];
    $16 = HEAPF64[$1 + 64 >> 3];
    $8 = $3 + 120 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $23 = $5;
    $5 = HEAPF64[$3 + 16 >> 3];
    $24 = $7 * $5;
    $7 = HEAPF64[$3 >> 3];
    $11 = $6;
    $6 = HEAPF64[$3 + 8 >> 3];
    $16 = $23 + ($24 + ($16 * $7 + $11 * $6));
    HEAPF64[$3 + 112 >> 3] = $16;
    $15 = $15 + ($5 * $21 + ($7 * $22 + $6 * $10));
    HEAPF64[$3 + 104 >> 3] = $15;
    $14 = $14 + ($5 * $18 + ($7 * $20 + $6 * $19));
    HEAPF64[$3 + 96 >> 3] = $14;
    $18 = HEAPF64[$2 + 112 >> 3];
    $19 = HEAPF64[$2 + 80 >> 3];
    $20 = HEAPF64[$2 + 64 >> 3];
    $21 = HEAPF64[$2 + 72 >> 3];
    $10 = HEAPF64[$2 + 104 >> 3];
    $22 = HEAPF64[$2 + 48 >> 3];
    $25 = HEAPF64[$2 + 32 >> 3];
    $26 = HEAPF64[$2 + 40 >> 3];
    $5 = HEAPF64[$2 + 96 >> 3];
    $7 = HEAPF64[$2 + 16 >> 3];
    $6 = HEAPF64[$2 >> 3];
    $17 = HEAPF64[$2 + 8 >> 3];
    $8 = $3 + 88 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $11 = $5;
    $5 = HEAPF64[$3 + 48 >> 3];
    $24 = $7 * $5;
    $7 = HEAPF64[$3 + 32 >> 3];
    $23 = $6 * $7;
    $6 = HEAPF64[$3 + 40 >> 3];
    $17 = $11 + ($24 + ($23 + $17 * $6));
    HEAPF64[$3 - -64 >> 3] = $17;
    $10 = $10 + ($5 * $22 + ($7 * $25 + $6 * $26));
    HEAPF64[$3 + 72 >> 3] = $10;
    $5 = $18 + ($5 * $19 + ($7 * $20 + $6 * $21));
    HEAPF64[$3 + 80 >> 3] = $5;
    HEAPF64[$3 + 160 >> 3] = ($16 - $5) * HEAPF64[$3 + 144 >> 3] + (($14 - $17) * HEAPF64[$3 + 128 >> 3] + ($15 - $10) * HEAPF64[$3 + 136 >> 3]);
    $8 = $3 + 288 | 0;
    HEAP32[$8 >> 2] = HEAP32[$8 >> 2] + 1;
    $3 = $3 - 360 | 0;
    $4 = $4 - 1 | 0;
    if ($4 >>> 0 > 1) {
     continue
    }
    break;
   };
   $1 = HEAP32[$0 + 1456 >> 2];
   if (($1 | 0) <= 0) {
    break label$1
   }
   $2 = Math_imul($1, 360);
   while (1) {
    $4 = $1;
    $1 = $4 - 1 | 0;
    $3 = $0 + $2 | 0;
    $8 = $3 - 352 | 0;
    $5 = HEAPF64[$3 - 192 >> 3];
    $7 = HEAPF64[$0 + 1464 >> 3];
    label$4 : {
     if (!($5 <= $7)) {
      $3 = $3 - 136 | 0;
      $12 = HEAP32[$3 >> 2];
      label$6 : {
       if (!$12) {
        break label$6
       }
       $13 = HEAP32[7893];
       if (!$13) {
        break label$6
       }
       FUNCTION_TABLE[$13 | 0]($12) | 0;
       HEAP32[$3 >> 2] = 0;
      }
      $3 = HEAP32[$0 + 1456 >> 2];
      if (($4 | 0) != ($3 | 0)) {
       $4 = Math_imul($3 - 1 | 0, 360) + $0 | 0;
       memcpy($8, $4 + 8 | 0, 360);
       $3 = $4 + 224 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $4 + 232 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $4 + 240 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $4 + 248 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$4 + 296 >> 2] = 0;
       $4 = HEAP32[$0 + 1456 >> 2];
      }
      $4 = $4 - 1 | 0;
      HEAP32[$0 + 1456 >> 2] = $4;
      $3 = HEAP32[7896];
      if ($4 | !$3) {
       break label$4
      }
      HEAP32[$9 + 8 >> 2] = $0;
      FUNCTION_TABLE[$3 | 0]($9 + 8 | 0);
      break label$4;
     }
     $6 = HEAPF64[$3 - 272 >> 3] - (HEAPF64[$3 - 240 >> 3] - $5 * HEAPF64[$3 - 208 >> 3]);
     $11 = $6 * $6;
     $6 = HEAPF64[$3 - 288 >> 3] - (HEAPF64[$3 - 256 >> 3] - HEAPF64[$3 - 224 >> 3] * $5);
     $5 = HEAPF64[$3 - 280 >> 3] - (HEAPF64[$3 - 248 >> 3] - $5 * HEAPF64[$3 - 216 >> 3]);
     if ($11 + ($6 * $6 + $5 * $5) > $7 * $7) {
      $3 = $3 - 136 | 0;
      $12 = HEAP32[$3 >> 2];
      label$9 : {
       if (!$12) {
        break label$9
       }
       $13 = HEAP32[7893];
       if (!$13) {
        break label$9
       }
       FUNCTION_TABLE[$13 | 0]($12) | 0;
       HEAP32[$3 >> 2] = 0;
      }
      $3 = HEAP32[$0 + 1456 >> 2];
      if (($4 | 0) != ($3 | 0)) {
       $4 = Math_imul($3 - 1 | 0, 360) + $0 | 0;
       memcpy($8, $4 + 8 | 0, 360);
       $3 = $4 + 224 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $4 + 232 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $4 + 240 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $4 + 248 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$4 + 296 >> 2] = 0;
       $4 = HEAP32[$0 + 1456 >> 2];
      }
      $4 = $4 - 1 | 0;
      HEAP32[$0 + 1456 >> 2] = $4;
      $3 = HEAP32[7896];
      if ($4 | !$3) {
       break label$4
      }
      HEAP32[$9 + 12 >> 2] = $0;
      FUNCTION_TABLE[$3 | 0]($9 + 12 | 0);
      break label$4;
     }
     $4 = HEAP32[7894];
     if (!$4) {
      break label$4
     }
     FUNCTION_TABLE[$4 | 0]($8, HEAP32[$0 + 1448 >> 2], HEAP32[$0 + 1452 >> 2]) | 0;
    }
    $2 = $2 - 360 | 0;
    if ($1 + 1 >>> 0 > 1) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $9 + 16 | 0;
 }
 
 function btManifoldResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
  $4 = __stack_pointer - 368 | 0;
  __stack_pointer = $4;
  label$1 : {
   if ($3 > HEAPF64[HEAP32[$0 + 4 >> 2] + 1464 >> 3]) {
    break label$1
   }
   $18 = HEAPF64[$2 + 16 >> 3];
   $10 = HEAPF64[$1 + 16 >> 3] * $3 + $18;
   $22 = HEAPF64[$2 + 8 >> 3];
   $12 = HEAPF64[$1 + 8 >> 3] * $3 + $22;
   $23 = HEAPF64[$2 >> 3];
   $13 = HEAPF64[$1 >> 3] * $3 + $23;
   $5 = HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2];
   $11 = HEAP32[$0 + 4 >> 2];
   $6 = HEAP32[$11 + 1448 >> 2];
   $19 = ($5 | 0) == ($6 | 0);
   label$2 : {
    if (!$19) {
     $6 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
     $7 = $10 - HEAPF64[$6 + 120 >> 3];
     $15 = $13 - HEAPF64[$6 + 104 >> 3];
     $9 = $12 - HEAPF64[$6 + 112 >> 3];
     $24 = HEAPF64[$6 + 88 >> 3] * $7 + (HEAPF64[$6 + 24 >> 3] * $15 + $9 * HEAPF64[$6 + 56 >> 3]);
     $25 = HEAPF64[$6 + 80 >> 3] * $7 + (HEAPF64[$6 + 16 >> 3] * $15 + $9 * HEAPF64[$6 + 48 >> 3]);
     $26 = HEAPF64[$6 + 72 >> 3] * $7 + (HEAPF64[$6 + 8 >> 3] * $15 + $9 * HEAPF64[$6 + 40 >> 3]);
     break label$2;
    }
    $7 = $10 - HEAPF64[$6 + 120 >> 3];
    $15 = $13 - HEAPF64[$6 + 104 >> 3];
    $9 = $12 - HEAPF64[$6 + 112 >> 3];
    $24 = HEAPF64[$6 + 88 >> 3] * $7 + (HEAPF64[$6 + 24 >> 3] * $15 + $9 * HEAPF64[$6 + 56 >> 3]);
    $25 = HEAPF64[$6 + 80 >> 3] * $7 + (HEAPF64[$6 + 16 >> 3] * $15 + $9 * HEAPF64[$6 + 48 >> 3]);
    $5 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
    $26 = HEAPF64[$6 + 72 >> 3] * $7 + (HEAPF64[$6 + 8 >> 3] * $15 + $9 * HEAPF64[$6 + 40 >> 3]);
   }
   $27 = HEAP32[$11 + 1456 >> 2];
   $28 = HEAPF64[$5 + 40 >> 3];
   $29 = HEAPF64[$5 + 72 >> 3];
   $30 = HEAPF64[$5 + 80 >> 3];
   $31 = HEAPF64[$5 + 16 >> 3];
   $32 = HEAPF64[$5 + 48 >> 3];
   $7 = HEAPF64[$5 + 88 >> 3];
   $15 = HEAPF64[$5 + 120 >> 3];
   $9 = HEAPF64[$5 + 24 >> 3];
   $33 = HEAPF64[$5 + 104 >> 3];
   $34 = HEAPF64[$5 + 56 >> 3];
   $35 = HEAPF64[$5 + 112 >> 3];
   $36 = HEAPF64[$5 + 8 >> 3];
   $5 = $4 + 8 | 0;
   $6 = $5 + 56 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $4 + 184 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $20 = $4 + 192 | 0;
   $16 = $20;
   HEAP32[$16 >> 2] = 0;
   HEAP32[$16 + 4 >> 2] = 0;
   $16 = $4 + 200 | 0;
   HEAP32[$16 >> 2] = 0;
   HEAP32[$16 + 4 >> 2] = 0;
   $8 = $1 + 8 | 0;
   $14 = HEAP32[$8 + 4 >> 2];
   $17 = $4 + 144 | 0;
   HEAP32[$17 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$17 + 4 >> 2] = $14;
   $8 = $1 + 16 | 0;
   $14 = HEAP32[$8 + 4 >> 2];
   $17 = $4 + 152 | 0;
   HEAP32[$17 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$17 + 4 >> 2] = $14;
   $8 = $1 + 24 | 0;
   $14 = HEAP32[$8 + 4 >> 2];
   $17 = $4 + 160 | 0;
   HEAP32[$17 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$17 + 4 >> 2] = $14;
   $21 = $7;
   $7 = $18 - $15;
   $15 = $23 - $33;
   $18 = $9 * $15;
   $9 = $22 - $35;
   HEAPF64[$5 + 48 >> 3] = $21 * $7 + ($18 + $34 * $9);
   HEAPF64[$5 + 40 >> 3] = $30 * $7 + ($31 * $15 + $9 * $32);
   HEAP32[$4 + 32 >> 2] = 0;
   HEAP32[$4 + 36 >> 2] = 0;
   HEAPF64[$4 + 24 >> 3] = $24;
   HEAPF64[$4 + 16 >> 3] = $25;
   HEAPF64[$4 + 8 >> 3] = $26;
   HEAP32[$4 + 176 >> 2] = 0;
   HEAP32[$4 + 180 >> 2] = 0;
   HEAPF64[$4 + 168 >> 3] = $3;
   $8 = HEAP32[$1 + 4 >> 2];
   HEAP32[$4 + 136 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 140 >> 2] = $8;
   HEAPF64[$4 + 40 >> 3] = $29 * $7 + ($36 * $15 + $9 * $28);
   memset($4 + 224 | 0, 0, 76);
   $1 = $5 + 120 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAPF64[$5 + 112 >> 3] = $10;
   HEAPF64[$5 + 104 >> 3] = $12;
   $1 = $2 + 8 | 0;
   $8 = HEAP32[$1 + 4 >> 2];
   $14 = $5 + 72 | 0;
   HEAP32[$14 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$14 + 4 >> 2] = $8;
   $1 = $2 + 16 | 0;
   $8 = HEAP32[$1 + 4 >> 2];
   $14 = $5 + 80 | 0;
   HEAP32[$14 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$14 + 4 >> 2] = $8;
   $1 = $2 + 24 | 0;
   $8 = HEAP32[$1 + 4 >> 2];
   $14 = $5 + 88 | 0;
   HEAP32[$14 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$14 + 4 >> 2] = $8;
   HEAPF64[$4 + 104 >> 3] = $13;
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 + 72 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 76 >> 2] = $1;
   $8 = HEAP32[$11 + 1456 >> 2];
   label$10 : {
    if (($8 | 0) <= 0) {
     $2 = -1;
     break label$10;
    }
    $1 = $11 + 16 | 0;
    $10 = HEAPF64[$5 + 16 >> 3];
    $12 = HEAPF64[$5 + 8 >> 3];
    $13 = HEAPF64[$5 >> 3];
    $3 = HEAPF64[$11 + 1464 >> 3];
    $3 = $3 * $3;
    $5 = 0;
    $2 = -1;
    while (1) {
     $7 = HEAPF64[$1 + 8 >> 3] - $10;
     $21 = $7 * $7;
     $7 = HEAPF64[$1 - 8 >> 3] - $13;
     $9 = $7 * $7;
     $7 = HEAPF64[$1 >> 3] - $12;
     $7 = $21 + ($9 + $7 * $7);
     $11 = $7 < $3;
     $3 = $11 ? $7 : $3;
     $2 = $11 ? $5 : $2;
     $1 = $1 + 360 | 0;
     $5 = $5 + 1 | 0;
     if (($8 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   $11 = $16;
   $16 = HEAP32[$0 + 8 >> 2];
   $1 = HEAP32[$16 + 8 >> 2];
   $8 = HEAP32[$0 + 12 >> 2];
   $5 = HEAP32[$8 + 8 >> 2];
   HEAPF64[$11 >> 3] = HEAPF64[$1 + 432 >> 3] * HEAPF64[$5 + 432 >> 3];
   $3 = HEAPF64[$5 + 424 >> 3];
   $10 = HEAPF64[$1 + 424 >> 3];
   HEAPF64[$6 >> 3] = Math_min(Math_max(HEAPF64[$1 + 440 >> 3] * $3 + $10 * HEAPF64[$5 + 440 >> 3], -10.0), 10.0);
   HEAPF64[$20 >> 3] = Math_min(Math_max($3 * HEAPF64[$1 + 448 >> 3] + $10 * HEAPF64[$5 + 448 >> 3], -10.0), 10.0);
   HEAPF64[$4 + 176 >> 3] = Math_min(Math_max($10 * $3, -10.0), 10.0);
   $11 = HEAP32[$1 + 392 >> 2];
   if (HEAPU8[$5 + 392 | 0] & 128 ? 1 : $11 & 128) {
    HEAPF64[$4 + 280 >> 3] = HEAPF64[$1 + 456 >> 3] + HEAPF64[$5 + 456 >> 3];
    HEAPF64[$4 + 272 >> 3] = 1.0 / (1.0 / HEAPF64[HEAP32[$16 + 8 >> 2] + 464 >> 3] + 1.0 / HEAPF64[HEAP32[$8 + 8 >> 2] + 464 >> 3]);
    HEAP32[$4 + 228 >> 2] = HEAP32[$4 + 228 >> 2] | 8;
    $11 = HEAP32[HEAP32[$16 + 8 >> 2] + 392 >> 2];
   }
   if (HEAPU8[HEAP32[$8 + 8 >> 2] + 393 | 0] & 2 ? 1 : $11 & 512) {
    HEAP32[$4 + 228 >> 2] = HEAP32[$4 + 228 >> 2] | 16
   }
   $3 = HEAPF64[$4 + 152 >> 3];
   label$8 : {
    if (Math_abs($3) > .7071067811865476) {
     $12 = HEAPF64[$4 + 144 >> 3];
     $13 = $12 * $12 + $3 * $3;
     $10 = 1.0 / Math_sqrt($13);
     $13 = $13 * $10;
     $7 = $10 * -$3;
     $9 = HEAPF64[$4 + 136 >> 3];
     $15 = $7 * $9;
     $3 = $12 * $10;
     $12 = $3 * -$9;
     $9 = 0.0;
     break label$8;
    }
    $13 = HEAPF64[$4 + 136 >> 3];
    $12 = HEAPF64[$4 + 144 >> 3];
    $7 = $13 * $13 + $12 * $12;
    $10 = 1.0 / Math_sqrt($7);
    $15 = $7 * $10;
    $9 = $10 * -$12;
    $12 = $3 * $9;
    $7 = $13 * $10;
    $13 = $7 * -$3;
    $3 = 0.0;
   }
   $6 = $0 + 4 | 0;
   HEAPF64[$4 + 352 >> 3] = $15;
   HEAPF64[$4 + 344 >> 3] = $12;
   HEAPF64[$4 + 320 >> 3] = $3;
   HEAPF64[$4 + 312 >> 3] = $7;
   HEAPF64[$4 + 336 >> 3] = $13;
   HEAPF64[$4 + 304 >> 3] = $9;
   label$101 : {
    if (!$19) {
     $5 = $0 + 24 | 0;
     $11 = $0 + 28 | 0;
     $1 = $0 + 20 | 0;
     $16 = $0 + 16 | 0;
     break label$101;
    }
    $5 = $0 + 28 | 0;
    $11 = $0 + 24 | 0;
    $1 = $0 + 16 | 0;
    $16 = $0 + 20 | 0;
   }
   HEAP32[$4 + 220 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 216 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$4 + 212 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$4 + 208 >> 2] = HEAP32[$1 >> 2];
   $1 = HEAP32[$6 >> 2];
   label$12 : {
    if (($2 | 0) >= 0) {
     $1 = $1 + Math_imul($2, 360) | 0;
     $5 = $1 + 248 | 0;
     $3 = HEAPF64[$5 >> 3];
     $11 = $1 + 240 | 0;
     $10 = HEAPF64[$11 >> 3];
     $16 = $1 + 232 | 0;
     $12 = HEAPF64[$16 >> 3];
     $8 = $1 + 296 | 0;
     $20 = HEAP32[$8 >> 2];
     label$14 : {
      if (HEAPU8[$4 + 228 | 0] & 16) {
       $13 = HEAPF64[$1 + 176 >> 3] * $12 + 0.0;
       if (!($10 * $10 + $3 * $3 > $13 * $13)) {
        break label$14
       }
      }
      $14 = $1 + 224 | 0;
      $17 = HEAP32[$14 >> 2];
      memcpy($1 + 8 | 0, $4 + 8 | 0, 360);
      HEAPF64[$16 >> 3] = $12;
      HEAP32[$14 >> 2] = $17;
      HEAPF64[$11 >> 3] = $10;
      HEAPF64[$5 >> 3] = $3;
     }
     HEAP32[$8 >> 2] = $20;
     break label$12;
    }
    $2 = btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($1, $4 + 8 | 0);
   }
   $5 = HEAP32[7897];
   label$16 : {
    if (!$5) {
     break label$16
    }
    $1 = HEAP32[$0 + 8 >> 2];
    $0 = HEAP32[$0 + 12 >> 2];
    if (!(HEAPU8[HEAP32[$0 + 8 >> 2] + 392 | 0] & 8 ? 1 : HEAPU8[HEAP32[$1 + 8 >> 2] + 392 | 0] & 8)) {
     break label$16
    }
    FUNCTION_TABLE[$5 | 0]((HEAP32[$6 >> 2] + Math_imul($2, 360) | 0) + 8 | 0, $19 ? $1 : $0, HEAP32[$4 + 208 >> 2], HEAP32[$4 + 216 >> 2], $19 ? $0 : $1, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 220 >> 2]) | 0;
   }
   if ($27) {
    break label$1
   }
   $0 = HEAP32[7895];
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[$0 | 0]($6);
  }
  __stack_pointer = $4 + 368 | 0;
 }
 
 function btManifoldResult___btManifoldResult_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0);
 }
 
 function btManifoldResult__setShapeIdentifiersA_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP32[$0 + 16 >> 2] = $1;
 }
 
 function btManifoldResult__setShapeIdentifiersB_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$0 + 28 >> 2] = $2;
  HEAP32[$0 + 20 >> 2] = $1;
 }
 
 function btCollisionDispatcher__defaultNearCallback_28btBroadphasePair__2c_20btCollisionDispatcher__2c_20btDispatcherInfo_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[HEAP32[$0 >> 2] >> 2];
  $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, $4, $5) | 0)) {
    break label$1
   }
   HEAP32[$3 + 88 >> 2] = -1;
   HEAP32[$3 + 92 >> 2] = -1;
   HEAP32[$3 + 72 >> 2] = 0;
   HEAP32[$3 + 80 >> 2] = $4;
   HEAP32[$3 + 84 >> 2] = $4 + 8;
   HEAP32[$3 + 76 >> 2] = HEAP32[$4 + 380 >> 2];
   HEAP32[$3 + 64 >> 2] = -1;
   HEAP32[$3 + 68 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 0;
   HEAP32[$3 + 56 >> 2] = $5;
   HEAP32[$3 + 60 >> 2] = $5 + 8;
   HEAP32[$3 + 52 >> 2] = HEAP32[$5 + 380 >> 2];
   if (!HEAP32[$0 + 8 >> 2]) {
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 72 | 0, $3 + 48 | 0, 0, 1) | 0;
    HEAP32[$0 + 8 >> 2] = $1;
    if (!$1) {
     break label$1
    }
   }
   $1 = $3 + 8 | 0;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAP32[$1 + 36 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = $3 + 48;
   HEAP32[$1 + 8 >> 2] = $3 + 72;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 >> 2] = 6604;
   $0 = HEAP32[$0 + 8 >> 2];
   if (HEAP32[$2 + 12 >> 2] == 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 72 | 0, $3 + 48 | 0, $2, $1);
    break label$1;
   }
   $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4, $5, $2, $1);
   if (!($6 < HEAPF64[$2 + 16 >> 3])) {
    break label$1
   }
   HEAPF64[$2 + 16 >> 3] = $6;
  }
  __stack_pointer = $3 + 96 | 0;
 }
 
 function btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, $1, $2) {
  HEAP32[((Math_imul($1, 144) + $0 | 0) + ($2 << 2) | 0) + 84 >> 2] = 31596;
 }
 
 function btCollisionDispatcher___btCollisionDispatcher_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 6744;
  $1 = HEAP32[$0 + 20 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 24 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  $1 = $0 + 12 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCollisionDispatcher___btCollisionDispatcher_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 6744;
  $1 = HEAP32[$0 + 20 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 24 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  $1 = $0 + 12 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  operator_20delete_28void__29($0);
 }
 
 function btCollisionDispatcher__getNewManifold_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[7898] = HEAP32[7898] + 1;
  $3 = 30760;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $3 = HEAP32[$1 + 380 >> 2];
   $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, HEAPF64[3845]);
   HEAPF64[$5 + 8 >> 3] = $6;
   $3 = HEAP32[$2 + 380 >> 2];
   $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, HEAPF64[3845]);
   HEAPF64[$5 >> 3] = $7;
   $3 = $6 < $7 ? $5 + 8 | 0 : $5;
  }
  $12 = HEAPF64[$3 >> 3];
  $6 = HEAPF64[$2 + 368 >> 3];
  $7 = HEAPF64[$1 + 368 >> 3];
  $4 = HEAP32[$0 + 80 >> 2];
  $3 = HEAP32[$4 + 12 >> 2];
  label$2 : {
   label$3 : {
    if ($3) {
     HEAP32[$4 + 12 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] - 1;
     break label$3;
    }
    $3 = 0;
    if (HEAPU8[$0 + 4 | 0] & 4) {
     break label$2
    }
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(1496);
   }
   HEAP32[$3 >> 2] = 1025;
   memset($3 + 224 | 0, 0, 76);
   memset($3 + 584 | 0, 0, 76);
   memset($3 + 944 | 0, 0, 76);
   memset($3 + 1304 | 0, 0, 76);
   HEAPF64[$3 + 1472 >> 3] = $6 > $7 ? $7 : $6;
   HEAPF64[$3 + 1464 >> 3] = $12;
   HEAP32[$3 + 1456 >> 2] = 0;
   HEAP32[$3 + 1452 >> 2] = $2;
   HEAP32[$3 + 1448 >> 2] = $1;
   $2 = HEAP32[$0 + 12 >> 2];
   HEAP32[$3 + 1488 >> 2] = $2;
   label$5 : {
    if (HEAP32[$0 + 16 >> 2] != ($2 | 0)) {
     break label$5
    }
    $8 = $2 ? $2 << 1 : 1;
    if (($8 | 0) <= ($2 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$8) {
      $4 = 0;
      break label$6;
     }
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2);
     $2 = HEAP32[$0 + 12 >> 2];
    }
    label$8 : {
     if (($2 | 0) <= 0) {
      break label$8
     }
     $9 = $2 & 3;
     if ($2 - 1 >>> 0 >= 3) {
      $13 = $2 & -4;
      $1 = 0;
      while (1) {
       $10 = $1 + $4 | 0;
       HEAP32[$10 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + $1 >> 2];
       HEAP32[$10 + 4 >> 2] = HEAP32[(HEAP32[$0 + 20 >> 2] + $1 | 0) + 4 >> 2];
       HEAP32[$10 + 8 >> 2] = HEAP32[(HEAP32[$0 + 20 >> 2] + $1 | 0) + 8 >> 2];
       HEAP32[$10 + 12 >> 2] = HEAP32[(HEAP32[$0 + 20 >> 2] + $1 | 0) + 12 >> 2];
       $1 = $1 + 16 | 0;
       $11 = $11 + 4 | 0;
       if (($13 | 0) != ($11 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$9) {
      break label$8
     }
     $1 = $11 << 2;
     while (1) {
      HEAP32[$1 + $4 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + $1 >> 2];
      $1 = $1 + 4 | 0;
      $9 = $9 - 1 | 0;
      if ($9) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 20 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 24 | 0])) {
     btAlignedFreeInternal_28void__29($1);
     $2 = HEAP32[$0 + 12 >> 2];
    }
    HEAP32[$0 + 20 >> 2] = $4;
    HEAP8[$0 + 24 | 0] = 1;
    HEAP32[$0 + 16 >> 2] = $8;
   }
   HEAP32[$0 + 12 >> 2] = $2 + 1;
   HEAP32[HEAP32[$0 + 20 >> 2] + ($2 << 2) >> 2] = $3;
  }
  __stack_pointer = $5 + 16 | 0;
  return $3 | 0;
 }
 
 function btCollisionDispatcher__clearManifold_28btPersistentManifold__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $3 = HEAP32[$1 + 1456 >> 2];
  if (($3 | 0) > 0) {
   $2 = $1 + 8 | 0;
   while (1) {
    btPersistentManifold__clearUserCache_28btManifoldPoint__29($2);
    $2 = $2 + 360 | 0;
    $3 = HEAP32[$1 + 1456 >> 2];
    $4 = $4 + 1 | 0;
    if (($3 | 0) > ($4 | 0)) {
     continue
    }
    break;
   };
  }
  $2 = HEAP32[7896];
  if (!(!$2 | !$3)) {
   HEAP32[$0 + 12 >> 2] = $1;
   FUNCTION_TABLE[$2 | 0]($0 + 12 | 0);
  }
  HEAP32[$1 + 1456 >> 2] = 0;
  __stack_pointer = $0 + 16 | 0;
 }
 
 function btCollisionDispatcher__releaseManifold_28btPersistentManifold__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  HEAP32[7898] = HEAP32[7898] - 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  $2 = $0 + 20 | 0;
  $3 = HEAP32[$2 >> 2];
  $5 = HEAP32[$1 + 1488 >> 2];
  $6 = $5 << 2;
  $4 = $3 + $6 | 0;
  $8 = HEAP32[$4 >> 2];
  $9 = $4;
  $10 = $3;
  $3 = $0 + 12 | 0;
  $4 = HEAP32[$3 >> 2] - 1 | 0;
  $7 = $4 << 2;
  HEAP32[$9 >> 2] = HEAP32[$10 + $7 >> 2];
  HEAP32[HEAP32[$2 >> 2] + $7 >> 2] = $8;
  HEAP32[$3 >> 2] = $4;
  HEAP32[HEAP32[HEAP32[$2 >> 2] + $6 >> 2] + 1488 >> 2] = $5;
  $0 = HEAP32[$0 + 80 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  if (!($2 >>> 0 > $1 >>> 0 | $2 + Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) >>> 0 <= $1 >>> 0)) {
   HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   return;
  }
  btAlignedFreeInternal_28void__29($1);
 }
 
 function btCollisionDispatcher__findAlgorithm_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btPersistentManifold__2c_20ebtDispatcherQueryType_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $3;
  $3 = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = $0;
  $0 = HEAP32[(((($4 | 0) == 1 ? 84 : 5268) + $0 | 0) + Math_imul($3, 144) | 0) + (HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] << 2) >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5 + 8 | 0, $1, $2) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $0 | 0;
 }
 
 function btCollisionDispatcher__needsResponse_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $0 = 0;
  $1 = HEAP32[$1 + 392 >> 2];
  label$1 : {
   if ($1 & 4) {
    break label$1
   }
   $2 = HEAP32[$2 + 392 >> 2];
   if ($2 & 4) {
    break label$1
   }
   if (!($1 & 3)) {
    return 1
   }
   $0 = !($2 & 3);
  }
  return $0 | 0;
 }
 
 function btCollisionDispatcher__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$1 + 408 >> 2] - 2 | 0) {
     case 0:
     case 3:
      break label$3;
     default:
      break label$2;
     };
    }
    $0 = 0;
    switch (HEAP32[$2 + 408 >> 2] - 2 | 0) {
    case 0:
    case 3:
     break label$1;
    default:
     break label$2;
    };
   }
   label$4 : {
    if (HEAP32[$1 + 512 >> 2]) {
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $2) | 0)) {
      break label$4
     }
    }
    $0 = 1;
    if (!HEAP32[$2 + 512 >> 2]) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1) | 0) {
     break label$1
    }
   }
   $0 = 0;
  }
  return $0 | 0;
 }
 
 function btCollisionDispatcher__dispatchAllCollisionPairs_28btOverlappingPairCache__2c_20btDispatcherInfo_20const__2c_20btDispatcher__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = 6852;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, $4, $3);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function btCollisionDispatcher__allocateCollisionAlgorithm_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $0 = HEAP32[$0 + 76 >> 2];
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] - 1;
   return $2 | 0;
  }
  return btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1) | 0;
 }
 
 function btCollisionDispatcher__freeCollisionAlgorithm_28void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[$0 + 76 >> 2];
   $2 = HEAP32[$0 + 16 >> 2];
   if ($2 >>> 0 > $1 >>> 0 | Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) + $2 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   return;
  }
  btAlignedFreeInternal_28void__29($1);
 }
 
 function btCollisionDispatcher__getNumManifolds_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function btCollisionDispatcher__getManifoldByIndexInternal_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 + 20 >> 2] + ($1 << 2) >> 2];
 }
 
 function btCollisionDispatcher__getInternalManifoldPointer_28_29($0) {
  $0 = $0 | 0;
  return (HEAP32[$0 + 12 >> 2] ? HEAP32[$0 + 20 >> 2] : 0) | 0;
 }
 
 function btCollisionDispatcher__getInternalManifoldPool_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 80 >> 2];
 }
 
 function btCollisionPairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $1;
  $1 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[$1 + 72 >> 2]]($2, $1, HEAP32[$0 + 4 >> 2]);
  return 0;
 }
 
 function btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 6940;
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   $1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 60 >> 2]]($1, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1;
  return $0 | 0;
 }
 
 function btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 6940;
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   $1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 60 >> 2]]($1, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1;
  operator_20delete_28void__29($0);
 }
 
 function btGImpactCollisionAlgorithm__shape_vs_shape_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = HEAP32[$0 + 12 >> 2];
  if (!$3) {
   $3 = HEAP32[$0 + 4 >> 2];
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
   HEAP32[$0 + 12 >> 2] = $3;
  }
  HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2] = $3;
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $1, $2, $3, 1) | 0;
  $4 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
  $4 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $2, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] >> 2]]($3) | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $3);
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = __stack_pointer - 1776 | 0;
  __stack_pointer = $8;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0) == 2) {
    $6 = HEAP32[$3 + 264 >> 2];
    $11 = $6 - 1 | 0;
    HEAP32[$0 + 28 >> 2] = $11;
    if (!$6) {
     break label$1
    }
    while (1) {
     btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, HEAP32[HEAP32[$3 + 272 >> 2] + ($11 << 2) >> 2], $4);
     $6 = HEAP32[$0 + 28 >> 2];
     $11 = $6 - 1 | 0;
     HEAP32[$0 + 28 >> 2] = $11;
     if ($6) {
      continue
     }
     break;
    };
    break label$1;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4) | 0) == 2) {
    $6 = HEAP32[$4 + 264 >> 2];
    $11 = $6 - 1 | 0;
    HEAP32[$0 + 36 >> 2] = $11;
    if (!$6) {
     break label$1
    }
    while (1) {
     btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, $3, HEAP32[HEAP32[$4 + 272 >> 2] + ($11 << 2) >> 2]);
     $6 = HEAP32[$0 + 36 >> 2];
     $11 = $6 - 1 | 0;
     HEAP32[$0 + 36 >> 2] = $11;
     if ($6) {
      continue
     }
     break;
    };
    break label$1;
   }
   $22 = HEAP32[$1 + 12 >> 2];
   $7 = $22 + 8 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $11 = $8 + 1648 | 0;
   $6 = $11 + 8 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 16 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 16 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 24 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 24 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $47 = HEAP32[$22 >> 2];
   $24 = HEAP32[$22 + 4 >> 2];
   $7 = $22 + 56 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 56 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 48 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 48 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 40 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 40 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $14 = HEAP32[$22 + 32 >> 2];
   $9 = HEAP32[$22 + 36 >> 2];
   $7 = $22 + 88 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 88 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 80 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 80 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 72 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 72 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   HEAP32[$8 + 1648 >> 2] = $47;
   HEAP32[$8 + 1652 >> 2] = $24;
   HEAP32[$8 + 1680 >> 2] = $14;
   HEAP32[$8 + 1684 >> 2] = $9;
   $6 = HEAP32[$22 + 68 >> 2];
   HEAP32[$8 + 1712 >> 2] = HEAP32[$22 + 64 >> 2];
   HEAP32[$8 + 1716 >> 2] = $6;
   $7 = $22 + 120 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 120 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 112 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 112 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $7 = $22 + 104 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   $6 = $11 + 104 | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $6 = HEAP32[$22 + 100 >> 2];
   HEAP32[$8 + 1744 >> 2] = HEAP32[$22 + 96 >> 2];
   HEAP32[$8 + 1748 >> 2] = $6;
   $17 = HEAP32[$2 + 12 >> 2];
   $9 = $17 + 8 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $6 = $8 + 1520 | 0;
   $5 = $6 + 8 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 16 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 24 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 24 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $22 = HEAP32[$17 >> 2];
   $47 = HEAP32[$17 + 4 >> 2];
   $9 = $17 + 56 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 56 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 48 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 48 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 40 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 40 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $24 = HEAP32[$17 + 32 >> 2];
   $14 = HEAP32[$17 + 36 >> 2];
   $9 = $17 + 88 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 88 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 80 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 80 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 72 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 72 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   HEAP32[$8 + 1520 >> 2] = $22;
   HEAP32[$8 + 1524 >> 2] = $47;
   HEAP32[$8 + 1552 >> 2] = $24;
   HEAP32[$8 + 1556 >> 2] = $14;
   $5 = HEAP32[$17 + 68 >> 2];
   HEAP32[$8 + 1584 >> 2] = HEAP32[$17 + 64 >> 2];
   HEAP32[$8 + 1588 >> 2] = $5;
   $9 = $17 + 120 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 120 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 112 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 112 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $9 = $17 + 104 | 0;
   $7 = HEAP32[$9 + 4 >> 2];
   $5 = $6 + 104 | 0;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = HEAP32[$17 + 100 >> 2];
   HEAP32[$8 + 1616 >> 2] = HEAP32[$17 + 96 >> 2];
   HEAP32[$8 + 1620 >> 2] = $5;
   HEAP32[$8 + 1500 >> 2] = 0;
   (wasm2js_i32$0 = $8, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(256)), HEAP32[wasm2js_i32$0 + 1508 >> 2] = wasm2js_i32$1;
   HEAP8[$8 + 1512 | 0] = 1;
   HEAP32[$8 + 1504 >> 2] = 32;
   $10 = $8 + 1496 | 0;
   $26 = __stack_pointer - 128 | 0;
   __stack_pointer = $26;
   label$10 : {
    if (!(!HEAP32[$3 + 128 >> 2] | !HEAP32[$4 + 128 >> 2])) {
     $9 = __stack_pointer - 224 | 0;
     __stack_pointer = $9;
     $7 = $3 + 128 | 0;
     $5 = $4 + 128 | 0;
     if (!(!HEAP32[$7 >> 2] | !HEAP32[$5 >> 2])) {
      $42 = HEAPF64[$11 + 104 >> 3];
      $35 = HEAPF64[$11 + 112 >> 3];
      $36 = HEAPF64[$6 + 104 >> 3];
      $37 = HEAPF64[$6 + 112 >> 3];
      $50 = HEAPF64[$11 + 40 >> 3];
      $51 = HEAPF64[$11 + 72 >> 3];
      $38 = HEAPF64[$6 + 40 >> 3];
      $39 = HEAPF64[$6 + 72 >> 3];
      $43 = HEAPF64[$6 + 48 >> 3];
      $52 = HEAPF64[$11 + 48 >> 3];
      $13 = HEAPF64[$6 + 80 >> 3];
      $53 = HEAPF64[$11 + 80 >> 3];
      $44 = HEAPF64[$11 + 96 >> 3];
      $30 = HEAPF64[$6 + 96 >> 3];
      $54 = HEAPF64[$11 + 64 >> 3];
      $55 = HEAPF64[$11 + 32 >> 3];
      $31 = HEAPF64[$11 >> 3];
      $32 = HEAPF64[$11 + 8 >> 3];
      $46 = HEAPF64[$6 + 64 >> 3];
      $45 = HEAPF64[$6 + 32 >> 3];
      $40 = HEAPF64[$6 >> 3];
      $41 = HEAPF64[$6 + 8 >> 3];
      $12 = HEAPF64[$6 + 16 >> 3];
      $33 = HEAPF64[$11 + 16 >> 3];
      $6 = $9 + 120 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $9 + 88 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $9 + 56 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $28 = $13 * $53 + ($12 * $33 + $52 * $43);
      HEAPF64[$9 + 112 >> 3] = $28;
      $23 = $39 * $53 + ($41 * $33 + $52 * $38);
      HEAPF64[$9 + 104 >> 3] = $23;
      $19 = $46 * $53 + ($40 * $33 + $52 * $45);
      HEAPF64[$9 + 96 >> 3] = $19;
      $15 = $13 * $51 + ($12 * $32 + $50 * $43);
      HEAPF64[$9 + 80 >> 3] = $15;
      $18 = $39 * $51 + ($41 * $32 + $50 * $38);
      HEAPF64[$9 + 72 >> 3] = $18;
      $21 = $46 * $51 + ($40 * $32 + $50 * $45);
      HEAPF64[$9 - -64 >> 3] = $21;
      $13 = $13 * $54 + ($12 * $31 + $55 * $43);
      HEAPF64[$9 + 48 >> 3] = $13;
      $12 = $39 * $54 + ($41 * $31 + $55 * $38);
      HEAPF64[$9 + 40 >> 3] = $12;
      HEAPF64[$9 + 208 >> 3] = Math_abs($28) + 9.999999974752427e-07;
      HEAPF64[$9 + 200 >> 3] = Math_abs($23) + 9.999999974752427e-07;
      HEAPF64[$9 + 192 >> 3] = Math_abs($19) + 9.999999974752427e-07;
      HEAPF64[$9 + 176 >> 3] = Math_abs($15) + 9.999999974752427e-07;
      HEAPF64[$9 + 168 >> 3] = Math_abs($18) + 9.999999974752427e-07;
      HEAPF64[$9 + 160 >> 3] = Math_abs($21) + 9.999999974752427e-07;
      HEAPF64[$9 + 144 >> 3] = Math_abs($13) + 9.999999974752427e-07;
      HEAPF64[$9 + 136 >> 3] = Math_abs($12) + 9.999999974752427e-07;
      HEAP32[$9 + 24 >> 2] = 0;
      HEAP32[$9 + 28 >> 2] = 0;
      $12 = -$44;
      HEAPF64[$9 + 16 >> 3] = $33 * $12 - $52 * $42 - $53 * $35 + ($37 * $53 + ($30 * $33 + $52 * $36));
      HEAPF64[$9 + 8 >> 3] = $32 * $12 - $50 * $42 - $51 * $35 + ($37 * $51 + ($30 * $32 + $50 * $36));
      HEAPF64[$9 >> 3] = $31 * $12 - $55 * $42 - $54 * $35 + ($37 * $54 + ($30 * $31 + $55 * $36));
      $12 = $46 * $54 + ($40 * $31 + $55 * $45);
      HEAPF64[$9 + 32 >> 3] = $12;
      HEAPF64[$9 + 128 >> 3] = Math_abs($12) + 9.999999974752427e-07;
      _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($7, $5, $10, $9, 0, 0, 1);
     }
     __stack_pointer = $9 + 224 | 0;
     break label$10;
    }
    $25 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 88 >> 2]]($3) | 0;
    if (!$25) {
     break label$10
    }
    $47 = $26 + 32 | 0;
    $24 = $26 + 96 | 0;
    while (1) {
     $25 = $25 - 1 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 120 >> 2]]($3, $25, $11, $26 - -64 | 0, $24);
     $29 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 88 >> 2]]($4) | 0;
     if ($29) {
      while (1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 120 >> 2]]($4, $25, $6, $26, $47);
       $29 = $29 - 1 | 0;
       if (!(HEAPF64[$26 + 32 >> 3] < HEAPF64[$26 + 64 >> 3] | HEAPF64[$26 >> 3] > HEAPF64[$26 + 96 >> 3] | (HEAPF64[$26 + 40 >> 3] < HEAPF64[$26 + 72 >> 3] | HEAPF64[$26 + 8 >> 3] > HEAPF64[$26 + 104 >> 3]) | (HEAPF64[$26 + 48 >> 3] < HEAPF64[$26 + 80 >> 3] | HEAPF64[$26 + 16 >> 3] > HEAPF64[$26 + 112 >> 3]))) {
        $20 = HEAP32[$10 + 4 >> 2];
        label$7 : {
         if (($20 | 0) != HEAP32[$10 + 8 >> 2]) {
          break label$7
         }
         $34 = $20 ? $20 << 1 : 1;
         if (($34 | 0) <= ($20 | 0)) {
          break label$7
         }
         label$8 : {
          if (!$34) {
           $27 = 0;
           break label$8;
          }
          $27 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($34 << 3);
          $20 = HEAP32[$10 + 4 >> 2];
         }
         $48 = HEAP32[$10 + 12 >> 2];
         label$103 : {
          label$11 : {
           if (($20 | 0) > 0) {
            $17 = 0;
            if (($20 | 0) != 1) {
             $14 = $20 & -2;
             $49 = 0;
             while (1) {
              $7 = $48 + $49 | 0;
              $5 = HEAP32[$7 + 4 >> 2];
              $22 = $27 + $49 | 0;
              HEAP32[$22 >> 2] = HEAP32[$7 >> 2];
              HEAP32[$22 + 4 >> 2] = $5;
              $9 = $7 + 8 | 0;
              $7 = HEAP32[$9 + 4 >> 2];
              $5 = $22 + 8 | 0;
              HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
              HEAP32[$5 + 4 >> 2] = $7;
              $49 = $49 + 16 | 0;
              $17 = $17 + 2 | 0;
              if (($14 | 0) != ($17 | 0)) {
               continue
              }
              break;
             };
            }
            if ($20 & 1) {
             $5 = $17 << 3;
             $9 = $5 + $27 | 0;
             $7 = $5 + $48 | 0;
             $5 = HEAP32[$7 + 4 >> 2];
             HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
             HEAP32[$9 + 4 >> 2] = $5;
            }
            if (HEAPU8[$10 + 16 | 0]) {
             break label$11
            }
            break label$103;
           }
           if (!$48 | !HEAPU8[$10 + 16 | 0]) {
            break label$103
           }
          }
          btAlignedFreeInternal_28void__29($48);
          $20 = HEAP32[$10 + 4 >> 2];
         }
         HEAP32[$10 + 12 >> 2] = $27;
         HEAP8[$10 + 16 | 0] = 1;
         HEAP32[$10 + 8 >> 2] = $34;
        }
        HEAP32[$10 + 4 >> 2] = $20 + 1;
        $5 = HEAP32[$10 + 12 >> 2] + ($20 << 3) | 0;
        HEAP32[$5 + 4 >> 2] = $29;
        HEAP32[$5 >> 2] = $25;
       }
       if ($29) {
        continue
       }
       break;
      }
     }
     if ($25) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $26 + 128 | 0;
   label$6 : {
    if (!HEAP32[$8 + 1500 >> 2]) {
     break label$6
    }
    label$74 : {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0) != 1) {
      break label$74
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4) | 0) != 1) {
      break label$74
     }
     $11 = $0;
     $48 = HEAP32[$8 + 1508 >> 2];
     $49 = HEAP32[$8 + 1500 >> 2];
     $10 = __stack_pointer - 848 | 0;
     __stack_pointer = $10;
     $6 = $2;
     $5 = HEAP32[$6 + 12 >> 2];
     $58 = HEAPF64[$5 + 112 >> 3];
     $59 = HEAPF64[$5 + 104 >> 3];
     $60 = HEAPF64[$5 + 80 >> 3];
     $61 = HEAPF64[$5 + 72 >> 3];
     $62 = HEAPF64[$5 + 48 >> 3];
     $63 = HEAPF64[$5 + 40 >> 3];
     $2 = $1;
     $0 = HEAP32[$1 + 12 >> 2];
     $64 = HEAPF64[$0 + 112 >> 3];
     $65 = HEAPF64[$0 + 104 >> 3];
     $66 = HEAPF64[$0 + 80 >> 3];
     $67 = HEAPF64[$0 + 72 >> 3];
     $68 = HEAPF64[$0 + 48 >> 3];
     $69 = HEAPF64[$0 + 40 >> 3];
     $70 = HEAPF64[$5 + 96 >> 3];
     $71 = HEAPF64[$5 + 64 >> 3];
     $50 = HEAPF64[$5 + 32 >> 3];
     $51 = HEAPF64[$5 + 16 >> 3];
     $52 = HEAPF64[$5 + 8 >> 3];
     $53 = HEAPF64[$5 >> 3];
     $54 = HEAPF64[$0 + 96 >> 3];
     $55 = HEAPF64[$0 + 64 >> 3];
     $31 = HEAPF64[$0 + 32 >> 3];
     $32 = HEAPF64[$0 + 16 >> 3];
     $33 = HEAPF64[$0 + 8 >> 3];
     $42 = HEAPF64[$0 >> 3];
     HEAP32[$10 + 832 >> 2] = 1073741824;
     HEAP32[$10 + 836 >> 2] = 1065646817;
     HEAP32[$10 + 688 >> 2] = 1073741824;
     HEAP32[$10 + 692 >> 2] = 1065646817;
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 112 >> 2]]($4);
     if ($49) {
      $22 = $10 + 16 | 0;
      while (1) {
       $1 = HEAP32[$48 >> 2];
       HEAP32[$11 + 24 >> 2] = $1;
       HEAP32[$11 + 32 >> 2] = HEAP32[$48 + 4 >> 2];
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 84 >> 2]]($3) | 0;
       $5 = $10 + 704 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $5);
       $1 = HEAP32[$11 + 32 >> 2];
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 84 >> 2]]($4) | 0;
       $7 = $1;
       $1 = $10 + 560 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $7, $1);
       HEAP32[$10 + 728 >> 2] = 0;
       HEAP32[$10 + 732 >> 2] = 0;
       HEAP32[$10 + 760 >> 2] = 0;
       HEAP32[$10 + 764 >> 2] = 0;
       HEAP32[$10 + 792 >> 2] = 0;
       HEAP32[$10 + 796 >> 2] = 0;
       $40 = HEAPF64[$10 + 752 >> 3];
       $41 = HEAPF64[$10 + 736 >> 3];
       $44 = HEAPF64[$10 + 744 >> 3];
       $46 = $65 + ($40 * $68 + ($41 * $31 + $69 * $44));
       HEAPF64[$10 + 744 >> 3] = $46;
       $28 = HEAPF64[$10 + 720 >> 3];
       $23 = HEAPF64[$10 + 704 >> 3];
       $19 = HEAPF64[$10 + 712 >> 3];
       $35 = $65 + ($28 * $68 + ($23 * $31 + $69 * $19));
       HEAPF64[$10 + 712 >> 3] = $35;
       $15 = HEAPF64[$10 + 784 >> 3];
       $13 = HEAPF64[$10 + 768 >> 3];
       $12 = HEAPF64[$10 + 776 >> 3];
       $45 = $65 + ($15 * $68 + ($13 * $31 + $69 * $12));
       HEAPF64[$10 + 776 >> 3] = $45;
       $18 = $64 + ($40 * $66 + ($41 * $55 + $67 * $44));
       HEAPF64[$10 + 752 >> 3] = $18;
       $21 = $54 + ($15 * $32 + ($13 * $42 + $33 * $12));
       HEAPF64[$10 + 768 >> 3] = $21;
       $36 = $64 + ($28 * $66 + ($23 * $55 + $67 * $19));
       HEAPF64[$10 + 720 >> 3] = $36;
       $13 = $64 + ($15 * $66 + ($13 * $55 + $67 * $12));
       HEAPF64[$10 + 784 >> 3] = $13;
       $37 = $54 + ($28 * $32 + ($23 * $42 + $33 * $19));
       HEAPF64[$10 + 704 >> 3] = $37;
       $12 = $54 + ($40 * $32 + ($41 * $42 + $33 * $44));
       HEAPF64[$10 + 736 >> 3] = $12;
       $23 = HEAPF64[$10 + 576 >> 3];
       $19 = HEAPF64[$10 + 560 >> 3];
       $15 = HEAPF64[$10 + 568 >> 3];
       HEAP32[$10 + 584 >> 2] = 0;
       HEAP32[$10 + 588 >> 2] = 0;
       $38 = $59 + ($23 * $62 + ($19 * $50 + $63 * $15));
       HEAPF64[$10 + 568 >> 3] = $38;
       $39 = $58 + ($23 * $60 + ($19 * $71 + $61 * $15));
       HEAPF64[$10 + 576 >> 3] = $39;
       $43 = $70 + ($23 * $51 + ($19 * $53 + $52 * $15));
       HEAPF64[$10 + 560 >> 3] = $43;
       $23 = HEAPF64[$10 + 608 >> 3];
       $19 = HEAPF64[$10 + 592 >> 3];
       $15 = HEAPF64[$10 + 600 >> 3];
       HEAP32[$10 + 616 >> 2] = 0;
       HEAP32[$10 + 620 >> 2] = 0;
       $40 = $59 + ($23 * $62 + ($19 * $50 + $63 * $15));
       HEAPF64[$10 + 600 >> 3] = $40;
       $41 = $58 + ($23 * $60 + ($19 * $71 + $61 * $15));
       HEAPF64[$10 + 608 >> 3] = $41;
       $44 = $70 + ($23 * $51 + ($19 * $53 + $52 * $15));
       HEAPF64[$10 + 592 >> 3] = $44;
       $30 = HEAPF64[$10 + 640 >> 3];
       $19 = HEAPF64[$10 + 624 >> 3];
       $15 = HEAPF64[$10 + 632 >> 3];
       HEAP32[$10 + 648 >> 2] = 0;
       HEAP32[$10 + 652 >> 2] = 0;
       $28 = $59 + ($30 * $62 + ($19 * $50 + $63 * $15));
       HEAPF64[$10 + 632 >> 3] = $28;
       $23 = $70 + ($30 * $51 + ($19 * $53 + $52 * $15));
       HEAPF64[$10 + 624 >> 3] = $23;
       $19 = $58 + ($30 * $60 + ($19 * $71 + $61 * $15));
       HEAPF64[$10 + 640 >> 3] = $19;
       $15 = $18 - $36;
       $18 = $21 - $37;
       $21 = $13 - $36;
       $12 = $12 - $37;
       $30 = $15 * $18 - $21 * $12;
       $13 = $45 - $35;
       $45 = $12 * $13;
       $12 = $46 - $35;
       $18 = $45 - $18 * $12;
       $13 = $12 * $21 - $13 * $15;
       $12 = 1.0 / Math_sqrt($18 * $18 + ($13 * $13 + $30 * $30));
       $21 = $30 * $12;
       HEAPF64[$10 + 808 >> 3] = $21;
       $13 = $13 * $12;
       HEAPF64[$10 + 800 >> 3] = $13;
       $12 = $18 * $12;
       HEAPF64[$10 + 816 >> 3] = $12;
       HEAPF64[$10 + 824 >> 3] = $36 * $12 + ($37 * $13 + $35 * $21);
       $15 = $41 - $39;
       $18 = $23 - $43;
       $21 = $19 - $39;
       $12 = $44 - $43;
       $19 = $15 * $18 - $21 * $12;
       $13 = $28 - $38;
       $23 = $12 * $13;
       $12 = $40 - $38;
       $18 = $23 - $18 * $12;
       $13 = $12 * $21 - $13 * $15;
       $12 = 1.0 / Math_sqrt($18 * $18 + ($13 * $13 + $19 * $19));
       $21 = $19 * $12;
       HEAPF64[$10 + 664 >> 3] = $21;
       $13 = $13 * $12;
       HEAPF64[$10 + 656 >> 3] = $13;
       $12 = $18 * $12;
       HEAPF64[$10 + 672 >> 3] = $12;
       HEAPF64[$10 + 680 >> 3] = $39 * $12 + ($43 * $13 + $38 * $21);
       $49 = $49 - 1 | 0;
       $18 = HEAPF64[$5 + 112 >> 3];
       $21 = HEAPF64[$5 + 96 >> 3];
       $13 = HEAPF64[$5 + 104 >> 3];
       $12 = HEAPF64[$5 + 120 >> 3];
       $15 = HEAPF64[$5 + 128 >> 3] + HEAPF64[$1 + 128 >> 3];
       label$16 : {
        if (!(!(HEAPF64[$1 + 16 >> 3] * $18 + (HEAPF64[$1 >> 3] * $21 + HEAPF64[$1 + 8 >> 3] * $13) - $12 - $15 > 0.0) | !(HEAPF64[$1 + 48 >> 3] * $18 + (HEAPF64[$1 + 32 >> 3] * $21 + $13 * HEAPF64[$1 + 40 >> 3]) - $12 - $15 > 0.0))) {
         $0 = 0;
         if (HEAPF64[$1 + 80 >> 3] * $18 + (HEAPF64[$1 + 64 >> 3] * $21 + $13 * HEAPF64[$1 + 72 >> 3]) - $12 - $15 > 0.0) {
          break label$16
         }
        }
        $18 = HEAPF64[$1 + 112 >> 3];
        $21 = HEAPF64[$1 + 96 >> 3];
        $13 = HEAPF64[$1 + 104 >> 3];
        $12 = HEAPF64[$1 + 120 >> 3];
        $0 = !(HEAPF64[$5 + 16 >> 3] * $18 + (HEAPF64[$5 >> 3] * $21 + HEAPF64[$5 + 8 >> 3] * $13) - $12 - $15 > 0.0) | !(HEAPF64[$5 + 48 >> 3] * $18 + (HEAPF64[$5 + 32 >> 3] * $21 + $13 * HEAPF64[$5 + 40 >> 3]) - $12 - $15 > 0.0) | !(HEAPF64[$5 + 80 >> 3] * $18 + (HEAPF64[$5 + 64 >> 3] * $21 + $13 * HEAPF64[$5 + 72 >> 3]) - $12 - $15 > 0.0);
       }
       label$35 : {
        if (!$0) {
         break label$35
        }
        $25 = 0;
        $5 = __stack_pointer - 1696 | 0;
        __stack_pointer = $5;
        $29 = $10 + 560 | 0;
        $13 = HEAPF64[$29 + 128 >> 3];
        $27 = $10 + 704 | 0;
        $12 = HEAPF64[$27 + 128 >> 3];
        $7 = $27 + 120 | 0;
        $1 = HEAP32[$7 + 4 >> 2];
        $0 = $5 + 600 | 0;
        HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$0 + 4 >> 2] = $1;
        $7 = $27 + 112 | 0;
        $1 = HEAP32[$7 + 4 >> 2];
        $0 = $5 + 592 | 0;
        HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$0 + 4 >> 2] = $1;
        $7 = $27 + 104 | 0;
        $1 = HEAP32[$7 + 4 >> 2];
        $0 = $5 + 584 | 0;
        HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$0 + 4 >> 2] = $1;
        $0 = HEAP32[$27 + 100 >> 2];
        HEAP32[$5 + 576 >> 2] = HEAP32[$27 + 96 >> 2];
        HEAP32[$5 + 580 >> 2] = $0;
        $0 = btPrimitiveTriangle__clip_triangle_28btPrimitiveTriangle__2c_20btVector3__29($27, $29, $5 + 1120 | 0);
        $1 = 0;
        label$107 : {
         if (!$0) {
          break label$107
         }
         $1 = 0;
         if (($0 | 0) <= 0) {
          break label$107
         }
         $28 = $12 + $13;
         $9 = 0 - $0 | 0;
         $19 = HEAPF64[$5 + 600 >> 3];
         $15 = HEAPF64[$5 + 592 >> 3];
         $18 = HEAPF64[$5 + 584 >> 3];
         $21 = -1.0e3;
         $13 = HEAPF64[$5 + 576 >> 3];
         $1 = 0;
         label$318 : {
          label$4 : {
           while (1) {
            $0 = $1 + 1 | 0;
            $1 = ($5 + 1120 | 0) + ($1 << 5) | 0;
            label$610 : {
             while (1) {
              $12 = $28 - (HEAPF64[$1 + 16 >> 3] * $15 + (HEAPF64[$1 >> 3] * $13 + HEAPF64[$1 + 8 >> 3] * $18) - $19);
              label$812 : {
               if (!($12 >= 0.0)) {
                break label$812
               }
               $7 = $0 - 1 | 0;
               if ($12 > $21) {
                break label$610
               }
               if (!($12 + 2.220446049250313e-16 >= $21)) {
                break label$812
               }
               HEAP32[($25 << 2) + $5 >> 2] = $7;
               $25 = $25 + 1 | 0;
              }
              $1 = $1 + 32 | 0;
              $0 = $0 + 1 | 0;
              if (($9 + $0 | 0) != 1) {
               continue
              }
              break;
             };
             HEAPF64[$5 + 560 >> 3] = $21;
             if (($25 | 0) <= 0) {
              break label$318
             }
             break label$4;
            }
            HEAP32[$5 >> 2] = $7;
            $25 = 1;
            $21 = $12;
            $1 = $0;
            if ($9 + $0 | 0) {
             continue
            }
            break;
           };
           HEAP32[$5 + 568 >> 2] = 1;
           HEAPF64[$5 + 560 >> 3] = $12;
          }
          $20 = 0;
          if (($25 | 0) != 1) {
           $47 = $25 & -2;
           $1 = $5 + 640 | 0;
           $0 = $5;
           while (1) {
            $24 = $5 + 1120 | 0;
            $34 = $24 + (HEAP32[$0 >> 2] << 5) | 0;
            $7 = HEAP32[$34 + 4 >> 2];
            $17 = $1 - 32 | 0;
            HEAP32[$17 >> 2] = HEAP32[$34 >> 2];
            HEAP32[$17 + 4 >> 2] = $7;
            $9 = HEAP32[$34 + 12 >> 2];
            $7 = $17 + 8 | 0;
            HEAP32[$7 >> 2] = HEAP32[$34 + 8 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $34 + 16 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $17 + 16 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $34 + 24 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $17 + 24 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $24 = (HEAP32[$0 + 4 >> 2] << 5) + $24 | 0;
            $7 = HEAP32[$24 + 4 >> 2];
            HEAP32[$1 >> 2] = HEAP32[$24 >> 2];
            HEAP32[$1 + 4 >> 2] = $7;
            $9 = HEAP32[$24 + 12 >> 2];
            $7 = $1 + 8 | 0;
            HEAP32[$7 >> 2] = HEAP32[$24 + 8 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $24 + 16 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $1 + 16 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $24 + 24 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $1 + 24 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $1 = $1 - -64 | 0;
            $0 = $0 + 8 | 0;
            $20 = $20 + 2 | 0;
            if (($47 | 0) != ($20 | 0)) {
             continue
            }
            break;
           };
          }
          if (!($25 & 1)) {
           break label$318
          }
          $14 = ($5 + 1120 | 0) + (HEAP32[($20 << 2) + $5 >> 2] << 5) | 0;
          $0 = HEAP32[$14 + 4 >> 2];
          $9 = ($5 + 560 | 0) + ($20 << 5) | 0;
          $1 = $9 + 48 | 0;
          HEAP32[$1 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$1 + 4 >> 2] = $0;
          $1 = HEAP32[$14 + 12 >> 2];
          $0 = $9 + 56 | 0;
          HEAP32[$0 >> 2] = HEAP32[$14 + 8 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
          $7 = $14 + 16 | 0;
          $1 = HEAP32[$7 + 4 >> 2];
          $0 = $9 - -64 | 0;
          HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
          $7 = $14 + 24 | 0;
          $1 = HEAP32[$7 + 4 >> 2];
          $0 = $9 + 72 | 0;
          HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
         }
         $1 = 0;
         if (!$25) {
          break label$107
         }
         $1 = $5 + 560 | 0;
         $0 = $1 + 24 | 0;
         HEAPF64[$0 >> 3] = -HEAPF64[$0 >> 3];
         $0 = $1 + 32 | 0;
         HEAPF64[$0 >> 3] = -HEAPF64[$0 >> 3];
         HEAPF64[$5 + 576 >> 3] = -HEAPF64[$5 + 576 >> 3];
         $7 = $29 + 120 | 0;
         $1 = HEAP32[$7 + 4 >> 2];
         $0 = $5 + 40 | 0;
         HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$0 + 4 >> 2] = $1;
         $7 = $29 + 112 | 0;
         $1 = HEAP32[$7 + 4 >> 2];
         $0 = $5 + 32 | 0;
         HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$0 + 4 >> 2] = $1;
         $7 = $29 + 104 | 0;
         $1 = HEAP32[$7 + 4 >> 2];
         $0 = $5 + 24 | 0;
         HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$0 + 4 >> 2] = $1;
         $0 = HEAP32[$29 + 100 >> 2];
         HEAP32[$5 + 16 >> 2] = HEAP32[$29 + 96 >> 2];
         HEAP32[$5 + 20 >> 2] = $0;
         $0 = btPrimitiveTriangle__clip_triangle_28btPrimitiveTriangle__2c_20btVector3__29($29, $27, $5 + 1120 | 0);
         $1 = 0;
         if (!$0) {
          break label$107
         }
         $1 = 0;
         if (($0 | 0) <= 0) {
          break label$107
         }
         $20 = 0;
         $9 = 0 - $0 | 0;
         $23 = HEAPF64[$5 + 40 >> 3];
         $19 = HEAPF64[$5 + 32 >> 3];
         $15 = HEAPF64[$5 + 24 >> 3];
         $13 = -1.0e3;
         $18 = HEAPF64[$5 + 16 >> 3];
         $1 = 0;
         label$13 : {
          label$1413 : {
           while (1) {
            $0 = $1 + 1 | 0;
            $1 = ($5 + 1120 | 0) + ($1 << 5) | 0;
            label$1614 : {
             while (1) {
              $12 = $28 - (HEAPF64[$1 + 16 >> 3] * $19 + (HEAPF64[$1 >> 3] * $18 + HEAPF64[$1 + 8 >> 3] * $15) - $23);
              label$18 : {
               if (!($12 >= 0.0)) {
                break label$18
               }
               $7 = $0 - 1 | 0;
               if ($12 > $13) {
                break label$1614
               }
               if (!($12 + 2.220446049250313e-16 >= $13)) {
                break label$18
               }
               HEAP32[($5 + 1632 | 0) + ($20 << 2) >> 2] = $7;
               $20 = $20 + 1 | 0;
              }
              $1 = $1 + 32 | 0;
              $0 = $0 + 1 | 0;
              if (($9 + $0 | 0) != 1) {
               continue
              }
              break;
             };
             HEAP32[$5 + 8 >> 2] = $20;
             HEAPF64[$5 >> 3] = $13;
             if (($20 | 0) <= 0) {
              break label$13
             }
             break label$1413;
            }
            HEAP32[$5 + 1632 >> 2] = $7;
            $20 = 1;
            $13 = $12;
            $1 = $0;
            if ($9 + $0 | 0) {
             continue
            }
            break;
           };
           HEAP32[$5 + 8 >> 2] = 1;
           HEAPF64[$5 >> 3] = $12;
          }
          $34 = 0;
          if (($20 | 0) != 1) {
           $47 = $20 & -2;
           $1 = $5 + 80 | 0;
           $0 = $5 + 1632 | 0;
           while (1) {
            $24 = $5 + 1120 | 0;
            $27 = $24 + (HEAP32[$0 >> 2] << 5) | 0;
            $7 = HEAP32[$27 + 4 >> 2];
            $17 = $1 - 32 | 0;
            HEAP32[$17 >> 2] = HEAP32[$27 >> 2];
            HEAP32[$17 + 4 >> 2] = $7;
            $9 = HEAP32[$27 + 12 >> 2];
            $7 = $17 + 8 | 0;
            HEAP32[$7 >> 2] = HEAP32[$27 + 8 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $27 + 16 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $17 + 16 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $27 + 24 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $17 + 24 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $24 = (HEAP32[$0 + 4 >> 2] << 5) + $24 | 0;
            $7 = HEAP32[$24 + 4 >> 2];
            HEAP32[$1 >> 2] = HEAP32[$24 >> 2];
            HEAP32[$1 + 4 >> 2] = $7;
            $9 = HEAP32[$24 + 12 >> 2];
            $7 = $1 + 8 | 0;
            HEAP32[$7 >> 2] = HEAP32[$24 + 8 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $24 + 16 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $1 + 16 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $14 = $24 + 24 | 0;
            $9 = HEAP32[$14 + 4 >> 2];
            $7 = $1 + 24 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $9;
            $1 = $1 - -64 | 0;
            $0 = $0 + 8 | 0;
            $34 = $34 + 2 | 0;
            if (($47 | 0) != ($34 | 0)) {
             continue
            }
            break;
           };
          }
          if (!($20 & 1)) {
           break label$13
          }
          $14 = ($5 + 1120 | 0) + (HEAP32[($5 + 1632 | 0) + ($34 << 2) >> 2] << 5) | 0;
          $0 = HEAP32[$14 + 4 >> 2];
          $9 = ($34 << 5) + $5 | 0;
          $1 = $9 + 48 | 0;
          HEAP32[$1 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$1 + 4 >> 2] = $0;
          $1 = HEAP32[$14 + 12 >> 2];
          $0 = $9 + 56 | 0;
          HEAP32[$0 >> 2] = HEAP32[$14 + 8 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
          $7 = $14 + 16 | 0;
          $1 = HEAP32[$7 + 4 >> 2];
          $0 = $9 - -64 | 0;
          HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
          $7 = $14 + 24 | 0;
          $1 = HEAP32[$7 + 4 >> 2];
          $0 = $9 + 72 | 0;
          HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
         }
         $1 = 0;
         if (!$20) {
          break label$107
         }
         $14 = $5 + 576 | 0;
         $9 = $5 + 16 | 0;
         label$22 : {
          if ($13 < $21) {
           HEAPF64[$10 >> 3] = $13;
           HEAP32[$10 + 8 >> 2] = $20;
           $0 = HEAP32[$9 + 4 >> 2];
           HEAP32[$10 + 16 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$10 + 20 >> 2] = $0;
           $7 = $9 + 8 | 0;
           $1 = HEAP32[$7 + 4 >> 2];
           $0 = $10 + 24 | 0;
           HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
           HEAP32[$0 + 4 >> 2] = $1;
           $7 = $9 + 16 | 0;
           $1 = HEAP32[$7 + 4 >> 2];
           $0 = $10 + 32 | 0;
           HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
           HEAP32[$0 + 4 >> 2] = $1;
           $7 = $9 + 24 | 0;
           $1 = HEAP32[$7 + 4 >> 2];
           $0 = $10 + 40 | 0;
           HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
           HEAP32[$0 + 4 >> 2] = $1;
           memcpy($10 + 48 | 0, $5 + 48 | 0, $20 << 5);
           break label$22;
          }
          HEAPF64[$10 >> 3] = $21;
          HEAP32[$10 + 8 >> 2] = $25;
          $0 = HEAP32[$14 + 4 >> 2];
          HEAP32[$10 + 16 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$10 + 20 >> 2] = $0;
          $7 = $14 + 8 | 0;
          $1 = HEAP32[$7 + 4 >> 2];
          $0 = $10 + 24 | 0;
          HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
          $7 = $14 + 16 | 0;
          $1 = HEAP32[$7 + 4 >> 2];
          $0 = $10 + 32 | 0;
          HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
          $7 = $14 + 24 | 0;
          $1 = HEAP32[$7 + 4 >> 2];
          $0 = $10 + 40 | 0;
          HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$0 + 4 >> 2] = $1;
          memcpy($10 + 48 | 0, $5 + 608 | 0, $25 << 5);
         }
         $1 = 1;
        }
        $0 = $1;
        __stack_pointer = $5 + 1696 | 0;
        if (!$0) {
         break label$35
        }
        $0 = HEAP32[$10 + 8 >> 2];
        if (!$0) {
         break label$35
        }
        $1 = ($0 << 5) + $22 | 0;
        while (1) {
         $12 = HEAPF64[$10 >> 3];
         $5 = HEAP32[$11 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, HEAP32[$11 + 28 >> 2], HEAP32[$11 + 24 >> 2]);
         $5 = HEAP32[$11 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 12 >> 2]]($5, HEAP32[$11 + 36 >> 2], HEAP32[$11 + 32 >> 2]);
         $0 = $0 - 1 | 0;
         $7 = HEAP32[$11 + 12 >> 2];
         if (!$7) {
          $5 = HEAP32[$11 + 4 >> 2];
          $7 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 12 >> 2]]($5, HEAP32[$2 + 8 >> 2], HEAP32[$6 + 8 >> 2]) | 0;
          HEAP32[$11 + 12 >> 2] = $7;
         }
         $5 = HEAP32[$11 + 16 >> 2];
         HEAP32[$5 + 4 >> 2] = $7;
         FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $22, $1, -$12);
         $1 = $1 - 32 | 0;
         if ($0) {
          continue
         }
         break;
        };
       }
       $48 = $48 + 8 | 0;
       if ($49) {
        continue
       }
       break;
      };
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 116 >> 2]]($4);
     __stack_pointer = $10 + 848 | 0;
     break label$6;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 112 >> 2]]($4);
    $34 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($8 + 960 | 0);
    HEAP32[$8 + 964 >> 2] = 1;
    memset($8 + 1064 | 0, 0, 96);
    HEAP32[$8 + 960 >> 2] = 7012;
    $17 = $8 + 1160 | 0;
    btBU_Simplex1to4__btBU_Simplex1to4_28_29($17);
    HEAP32[$8 + 1332 >> 2] = 4;
    HEAP32[$8 + 1480 >> 2] = 7536;
    HEAP32[$8 + 1472 >> 2] = 7456;
    HEAP32[$8 + 1464 >> 2] = 7384;
    HEAP32[$8 + 1160 >> 2] = 7212;
    HEAP32[$8 + 952 >> 2] = $3;
    if (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 96 >> 2]]($3) | 0) {
     $6 = $8 + 1472 | 0
    } else {
     $6 = HEAP32[$8 + 952 >> 2];
     $6 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 100 >> 2]]($6) | 0 ? $8 + 1480 | 0 : $8 + 1464 | 0;
    }
    HEAP32[$6 + 4 >> 2] = $8 + 952;
    HEAP32[$8 + 1488 >> 2] = $6;
    $22 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($8 + 416 | 0);
    HEAP32[$8 + 420 >> 2] = 1;
    memset($8 + 520 | 0, 0, 96);
    HEAP32[$8 + 416 >> 2] = 7012;
    $47 = $8 + 616 | 0;
    btBU_Simplex1to4__btBU_Simplex1to4_28_29($47);
    HEAP32[$8 + 788 >> 2] = 4;
    HEAP32[$8 + 936 >> 2] = 7536;
    HEAP32[$8 + 928 >> 2] = 7456;
    HEAP32[$8 + 920 >> 2] = 7384;
    HEAP32[$8 + 616 >> 2] = 7212;
    HEAP32[$8 + 408 >> 2] = $4;
    if (FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 96 >> 2]]($4) | 0) {
     $6 = $8 + 928 | 0
    } else {
     $6 = HEAP32[$8 + 408 >> 2];
     $6 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 100 >> 2]]($6) | 0 ? $8 + 936 | 0 : $8 + 920 | 0;
    }
    HEAP32[$6 + 4 >> 2] = $8 + 408;
    HEAP32[$8 + 944 >> 2] = $6;
    $24 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 92 >> 2]]($3) | 0;
    $14 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 92 >> 2]]($4) | 0;
    $29 = HEAP32[$8 + 1500 >> 2];
    if ($29) {
     $27 = ($29 << 3) - 4 | 0;
     $6 = $8 + 152 | 0;
     $56 = $6 + 96 | 0;
     $57 = $6 - -64 | 0;
     $26 = $6 + 32 | 0;
     $6 = $8 + 280 | 0;
     $10 = $6 + 96 | 0;
     $20 = $6 - -64 | 0;
     $25 = $6 + 32 | 0;
     while (1) {
      $6 = HEAP32[$8 + 1508 >> 2] + $27 | 0;
      HEAP32[$0 + 32 >> 2] = HEAP32[$6 >> 2];
      $11 = HEAP32[$6 - 4 >> 2];
      HEAP32[$0 + 24 >> 2] = $11;
      $6 = HEAP32[$8 + 1488 >> 2];
      $48 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] >> 2]]($6, $11) | 0;
      $6 = HEAP32[$8 + 944 >> 2];
      $49 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] >> 2]]($6, HEAP32[$0 + 32 >> 2]) | 0;
      $16 = HEAP32[$1 + 12 >> 2];
      $5 = $16 + 8 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $7 = $8 + 280 | 0;
      $6 = $7 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 16 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $7 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 24 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $7 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $9 = HEAP32[$16 >> 2];
      $7 = HEAP32[$16 + 4 >> 2];
      $5 = $16 + 56 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $25 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 48 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $25 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 40 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $25 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $6 = HEAP32[$16 + 36 >> 2];
      HEAP32[$25 >> 2] = HEAP32[$16 + 32 >> 2];
      HEAP32[$25 + 4 >> 2] = $6;
      $5 = $16 + 88 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $20 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 80 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $20 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 72 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $20 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $6 = HEAP32[$16 + 68 >> 2];
      HEAP32[$20 >> 2] = HEAP32[$16 + 64 >> 2];
      HEAP32[$20 + 4 >> 2] = $6;
      HEAP32[$8 + 280 >> 2] = $9;
      HEAP32[$8 + 284 >> 2] = $7;
      $5 = $16 + 120 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $10 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 112 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $10 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 104 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $10 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $6 = HEAP32[$16 + 100 >> 2];
      HEAP32[$10 >> 2] = HEAP32[$16 + 96 >> 2];
      HEAP32[$10 + 4 >> 2] = $6;
      $16 = HEAP32[$2 + 12 >> 2];
      $5 = $16 + 8 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $7 = $8 + 152 | 0;
      $6 = $7 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 16 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $7 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 24 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $7 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $9 = HEAP32[$16 >> 2];
      $7 = HEAP32[$16 + 4 >> 2];
      $5 = $16 + 56 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $26 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 48 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $26 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 40 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $26 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $6 = HEAP32[$16 + 36 >> 2];
      HEAP32[$26 >> 2] = HEAP32[$16 + 32 >> 2];
      HEAP32[$26 + 4 >> 2] = $6;
      $5 = $16 + 88 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $57 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 80 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $57 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 72 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $57 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $6 = HEAP32[$16 + 68 >> 2];
      HEAP32[$57 >> 2] = HEAP32[$16 + 64 >> 2];
      HEAP32[$57 + 4 >> 2] = $6;
      HEAP32[$8 + 152 >> 2] = $9;
      HEAP32[$8 + 156 >> 2] = $7;
      $5 = $16 + 120 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $56 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 112 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $56 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $5 = $16 + 104 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $6 = $56 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $11;
      $6 = HEAP32[$16 + 100 >> 2];
      HEAP32[$56 >> 2] = HEAP32[$16 + 96 >> 2];
      HEAP32[$56 + 4 >> 2] = $6;
      if ($24) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 132 >> 2]]($8 + 24 | 0, $3, HEAP32[$0 + 24 >> 2]);
       $21 = HEAPF64[$8 + 1744 >> 3];
       $13 = HEAPF64[$8 + 1752 >> 3];
       $12 = HEAPF64[$8 + 1760 >> 3];
       $43 = HEAPF64[$8 + 136 >> 3];
       $30 = HEAPF64[$8 + 120 >> 3];
       $46 = HEAPF64[$8 + 128 >> 3];
       $31 = HEAPF64[$8 + 1664 >> 3];
       $32 = HEAPF64[$8 + 1648 >> 3];
       $33 = HEAPF64[$8 + 1656 >> 3];
       $42 = HEAPF64[$8 + 1696 >> 3];
       $35 = HEAPF64[$8 + 1680 >> 3];
       $36 = HEAPF64[$8 + 1688 >> 3];
       $45 = HEAPF64[$8 + 88 >> 3];
       $40 = HEAPF64[$8 + 24 >> 3];
       $41 = HEAPF64[$8 + 56 >> 3];
       $44 = HEAPF64[$8 + 96 >> 3];
       $28 = HEAPF64[$8 + 32 >> 3];
       $23 = HEAPF64[$8 + 64 >> 3];
       $37 = HEAPF64[$8 + 1728 >> 3];
       $19 = HEAPF64[$8 + 104 >> 3];
       $38 = HEAPF64[$8 + 1712 >> 3];
       $15 = HEAPF64[$8 + 40 >> 3];
       $39 = HEAPF64[$8 + 1720 >> 3];
       $18 = HEAPF64[$8 + 72 >> 3];
       HEAP32[$8 + 400 >> 2] = 0;
       HEAP32[$8 + 404 >> 2] = 0;
       HEAP32[$8 + 368 >> 2] = 0;
       HEAP32[$8 + 372 >> 2] = 0;
       HEAP32[$8 + 336 >> 2] = 0;
       HEAP32[$8 + 340 >> 2] = 0;
       HEAP32[$8 + 304 >> 2] = 0;
       HEAP32[$8 + 308 >> 2] = 0;
       HEAPF64[$8 + 360 >> 3] = $19 * $37 + ($15 * $38 + $18 * $39);
       HEAPF64[$8 + 352 >> 3] = $44 * $37 + ($28 * $38 + $23 * $39);
       HEAPF64[$8 + 344 >> 3] = $45 * $37 + ($40 * $38 + $41 * $39);
       HEAPF64[$8 + 328 >> 3] = $19 * $42 + ($15 * $35 + $18 * $36);
       HEAPF64[$8 + 320 >> 3] = $44 * $42 + ($28 * $35 + $23 * $36);
       HEAPF64[$8 + 312 >> 3] = $45 * $42 + ($40 * $35 + $41 * $36);
       HEAPF64[$8 + 296 >> 3] = $19 * $31 + ($15 * $32 + $33 * $18);
       HEAPF64[$8 + 288 >> 3] = $44 * $31 + ($28 * $32 + $33 * $23);
       HEAPF64[$8 + 280 >> 3] = $45 * $31 + ($40 * $32 + $41 * $33);
       HEAPF64[$8 + 392 >> 3] = $12 + ($43 * $37 + ($30 * $38 + $39 * $46));
       HEAPF64[$8 + 384 >> 3] = $13 + ($43 * $42 + ($30 * $35 + $36 * $46));
       HEAPF64[$8 + 376 >> 3] = $21 + ($43 * $31 + ($30 * $32 + $33 * $46));
      }
      $29 = $29 - 1 | 0;
      if ($14) {
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 132 >> 2]]($8 + 24 | 0, $4, HEAP32[$0 + 32 >> 2]);
       $21 = HEAPF64[$8 + 1616 >> 3];
       $13 = HEAPF64[$8 + 1624 >> 3];
       $12 = HEAPF64[$8 + 1632 >> 3];
       $43 = HEAPF64[$8 + 136 >> 3];
       $30 = HEAPF64[$8 + 120 >> 3];
       $46 = HEAPF64[$8 + 128 >> 3];
       $31 = HEAPF64[$8 + 1536 >> 3];
       $32 = HEAPF64[$8 + 1520 >> 3];
       $33 = HEAPF64[$8 + 1528 >> 3];
       $42 = HEAPF64[$8 + 1568 >> 3];
       $35 = HEAPF64[$8 + 1552 >> 3];
       $36 = HEAPF64[$8 + 1560 >> 3];
       $45 = HEAPF64[$8 + 88 >> 3];
       $40 = HEAPF64[$8 + 24 >> 3];
       $41 = HEAPF64[$8 + 56 >> 3];
       $44 = HEAPF64[$8 + 96 >> 3];
       $28 = HEAPF64[$8 + 32 >> 3];
       $23 = HEAPF64[$8 + 64 >> 3];
       $37 = HEAPF64[$8 + 1600 >> 3];
       $19 = HEAPF64[$8 + 104 >> 3];
       $38 = HEAPF64[$8 + 1584 >> 3];
       $15 = HEAPF64[$8 + 40 >> 3];
       $39 = HEAPF64[$8 + 1592 >> 3];
       $18 = HEAPF64[$8 + 72 >> 3];
       HEAP32[$8 + 272 >> 2] = 0;
       HEAP32[$8 + 276 >> 2] = 0;
       HEAP32[$8 + 240 >> 2] = 0;
       HEAP32[$8 + 244 >> 2] = 0;
       HEAP32[$8 + 208 >> 2] = 0;
       HEAP32[$8 + 212 >> 2] = 0;
       HEAP32[$8 + 176 >> 2] = 0;
       HEAP32[$8 + 180 >> 2] = 0;
       HEAPF64[$8 + 232 >> 3] = $19 * $37 + ($15 * $38 + $18 * $39);
       HEAPF64[$8 + 224 >> 3] = $44 * $37 + ($28 * $38 + $23 * $39);
       HEAPF64[$8 + 216 >> 3] = $45 * $37 + ($40 * $38 + $41 * $39);
       HEAPF64[$8 + 200 >> 3] = $19 * $42 + ($15 * $35 + $18 * $36);
       HEAPF64[$8 + 192 >> 3] = $44 * $42 + ($28 * $35 + $23 * $36);
       HEAPF64[$8 + 184 >> 3] = $45 * $42 + ($40 * $35 + $41 * $36);
       HEAPF64[$8 + 168 >> 3] = $19 * $31 + ($15 * $32 + $33 * $18);
       HEAPF64[$8 + 160 >> 3] = $44 * $31 + ($28 * $32 + $33 * $23);
       HEAPF64[$8 + 152 >> 3] = $45 * $31 + ($40 * $32 + $41 * $33);
       HEAPF64[$8 + 264 >> 3] = $12 + ($43 * $37 + ($30 * $38 + $39 * $46));
       HEAPF64[$8 + 256 >> 3] = $13 + ($43 * $42 + ($30 * $35 + $36 * $46));
       HEAPF64[$8 + 248 >> 3] = $21 + ($43 * $31 + ($30 * $32 + $33 * $46));
      }
      HEAP32[$8 + 28 >> 2] = $48;
      (wasm2js_i32$0 = $8, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2])), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
      HEAP32[$8 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
      HEAP32[$8 + 24 >> 2] = $1;
      HEAP32[$8 + 32 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$8 + 36 >> 2] = $8 + 280;
      HEAP32[$8 + 4 >> 2] = $49;
      (wasm2js_i32$0 = $8, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2])), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
      HEAP32[$8 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
      HEAP32[$8 >> 2] = $2;
      HEAP32[$8 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$8 + 12 >> 2] = $8 + 152;
      $9 = __stack_pointer - 48 | 0;
      __stack_pointer = $9;
      $6 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      $6 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
      HEAP32[$9 + 28 >> 2] = $48;
      (wasm2js_i32$0 = $9, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2])), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
      HEAP32[$9 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
      $6 = $8 + 24 | 0;
      HEAP32[$9 + 24 >> 2] = $6;
      HEAP32[$9 + 36 >> 2] = HEAP32[$6 + 12 >> 2];
      $5 = HEAP32[$6 + 8 >> 2];
      HEAP32[$9 + 32 >> 2] = $5;
      HEAP32[$9 + 4 >> 2] = $49;
      (wasm2js_i32$0 = $9, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2])), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
      HEAP32[$9 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
      HEAP32[$9 >> 2] = $8;
      HEAP32[$9 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
      $11 = HEAP32[$8 + 8 >> 2];
      HEAP32[$9 + 8 >> 2] = $11;
      $7 = HEAP32[$0 + 8 >> 2];
      if (!$7) {
       $7 = HEAP32[$0 + 12 >> 2];
       if (!$7) {
        $6 = HEAP32[$0 + 4 >> 2];
        $7 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, $5, $11) | 0;
        HEAP32[$0 + 12 >> 2] = $7;
       }
       HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2] = $7;
       $6 = HEAP32[$0 + 4 >> 2];
       $7 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $9 + 24 | 0, $9, $7, 1) | 0;
       HEAP32[$0 + 8 >> 2] = $7;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7, $9 + 24 | 0, $9, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
      __stack_pointer = $9 + 48 | 0;
      $27 = $27 - 8 | 0;
      if ($29) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 116 >> 2]]($4);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($47);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($22);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($17);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($34);
   }
   $0 = HEAP32[$8 + 1508 >> 2];
   if (!$0 | !HEAPU8[$8 + 1512 | 0]) {
    break label$1
   }
   btAlignedFreeInternal_28void__29($0);
  }
  __stack_pointer = $8 + 1776 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  $11 = __stack_pointer - 960 | 0;
  __stack_pointer = $11;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0) == 2) {
    $7 = ($5 ? 36 : 28) + $0 | 0;
    $8 = HEAP32[$3 + 264 >> 2];
    $6 = $8 - 1 | 0;
    HEAP32[$7 >> 2] = $6;
    if (!$8) {
     break label$1
    }
    while (1) {
     btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $2, HEAP32[HEAP32[$3 + 272 >> 2] + ($6 << 2) >> 2], $4, $5);
     $8 = HEAP32[$7 >> 2];
     $6 = $8 - 1 | 0;
     HEAP32[$7 >> 2] = $6;
     if ($8) {
      continue
     }
     break;
    };
    break label$1;
   }
   $8 = (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0) != 1;
   $6 = HEAP32[$4 + 4 >> 2];
   if (!($8 | ($6 | 0) != 28)) {
    $6 = __stack_pointer - 288 | 0;
    __stack_pointer = $6;
    $7 = HEAP32[$1 + 12 >> 2];
    $9 = $7 + 8 | 0;
    $10 = HEAP32[$9 + 4 >> 2];
    $8 = $6 + 160 | 0;
    $12 = $8 + 8 | 0;
    HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$12 + 4 >> 2] = $10;
    $9 = $7 + 16 | 0;
    $10 = HEAP32[$9 + 4 >> 2];
    $12 = $8 + 16 | 0;
    HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$12 + 4 >> 2] = $10;
    $9 = $7 + 24 | 0;
    $10 = HEAP32[$9 + 4 >> 2];
    $12 = $8 + 24 | 0;
    HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$12 + 4 >> 2] = $10;
    $9 = HEAP32[$7 >> 2];
    $10 = HEAP32[$7 + 4 >> 2];
    $12 = $7 + 56 | 0;
    $15 = HEAP32[$12 + 4 >> 2];
    $14 = $8 + 56 | 0;
    HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$14 + 4 >> 2] = $15;
    $12 = $7 + 48 | 0;
    $15 = HEAP32[$12 + 4 >> 2];
    $14 = $8 + 48 | 0;
    HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$14 + 4 >> 2] = $15;
    $12 = $7 + 40 | 0;
    $15 = HEAP32[$12 + 4 >> 2];
    $14 = $8 + 40 | 0;
    HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$14 + 4 >> 2] = $15;
    $12 = HEAP32[$7 + 32 >> 2];
    $15 = HEAP32[$7 + 36 >> 2];
    $14 = $7 + 88 | 0;
    $21 = HEAP32[$14 + 4 >> 2];
    $27 = $8 + 88 | 0;
    HEAP32[$27 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$27 + 4 >> 2] = $21;
    $14 = $7 + 80 | 0;
    $21 = HEAP32[$14 + 4 >> 2];
    $27 = $8 + 80 | 0;
    HEAP32[$27 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$27 + 4 >> 2] = $21;
    $14 = $7 + 72 | 0;
    $21 = HEAP32[$14 + 4 >> 2];
    $27 = $8 + 72 | 0;
    HEAP32[$27 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$27 + 4 >> 2] = $21;
    HEAP32[$6 + 160 >> 2] = $9;
    HEAP32[$6 + 164 >> 2] = $10;
    HEAP32[$6 + 192 >> 2] = $12;
    HEAP32[$6 + 196 >> 2] = $15;
    $9 = HEAP32[$7 + 68 >> 2];
    HEAP32[$6 + 224 >> 2] = HEAP32[$7 + 64 >> 2];
    HEAP32[$6 + 228 >> 2] = $9;
    $9 = $7 + 120 | 0;
    $10 = HEAP32[$9 + 4 >> 2];
    $12 = $8 + 120 | 0;
    HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$12 + 4 >> 2] = $10;
    $9 = $7 + 112 | 0;
    $10 = HEAP32[$9 + 4 >> 2];
    $12 = $8 + 112 | 0;
    HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$12 + 4 >> 2] = $10;
    $9 = $7 + 104 | 0;
    $10 = HEAP32[$9 + 4 >> 2];
    $12 = $8 + 104 | 0;
    HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$12 + 4 >> 2] = $10;
    $9 = HEAP32[$7 + 100 >> 2];
    HEAP32[$6 + 256 >> 2] = HEAP32[$7 + 96 >> 2];
    HEAP32[$6 + 260 >> 2] = $9;
    $7 = HEAP32[$2 + 12 >> 2];
    $25 = HEAPF64[$7 + 40 >> 3];
    $22 = HEAPF64[$7 + 48 >> 3];
    $23 = HEAPF64[$7 + 72 >> 3];
    $18 = HEAPF64[$7 + 80 >> 3];
    $19 = HEAPF64[$7 + 16 >> 3];
    $20 = HEAPF64[$7 >> 3];
    $26 = HEAPF64[$7 + 8 >> 3];
    $28 = HEAPF64[$7 + 32 >> 3];
    $29 = HEAPF64[$7 + 64 >> 3];
    $13 = HEAPF64[$4 + 104 >> 3];
    $16 = HEAPF64[$4 + 88 >> 3];
    $17 = HEAPF64[$4 + 96 >> 3];
    $24 = HEAPF64[$7 + 112 >> 3] * $13 + (HEAPF64[$7 + 96 >> 3] * $16 + HEAPF64[$7 + 104 >> 3] * $17) + HEAPF64[$4 + 120 >> 3];
    HEAPF64[$6 + 152 >> 3] = $24;
    $23 = $18 * $13 + ($29 * $16 + $23 * $17);
    HEAPF64[$6 + 144 >> 3] = $23;
    $25 = $22 * $13 + ($28 * $16 + $25 * $17);
    HEAPF64[$6 + 136 >> 3] = $25;
    $22 = $19 * $13 + ($20 * $16 + $26 * $17);
    HEAPF64[$6 + 128 >> 3] = $22;
    $7 = $6 - -64 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $8, $7, $6 + 96 | 0);
    $13 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4);
    $8 = $7 + 40 | 0;
    $16 = $13 + HEAPF64[$8 >> 3];
    HEAPF64[$8 >> 3] = $16;
    $7 = $7 + 48 | 0;
    $17 = $13 + HEAPF64[$7 >> 3];
    HEAPF64[$7 >> 3] = $17;
    $19 = HEAPF64[$6 + 72 >> 3] - $13;
    HEAPF64[$6 + 72 >> 3] = $19;
    $18 = $13 + HEAPF64[$6 + 96 >> 3];
    HEAPF64[$6 + 96 >> 3] = $18;
    $20 = HEAPF64[$6 + 64 >> 3] - $13;
    HEAPF64[$6 + 64 >> 3] = $20;
    $13 = HEAPF64[$6 + 80 >> 3] - $13;
    HEAPF64[$6 + 80 >> 3] = $13;
    $13 = ($13 + $17) * .5;
    $20 = ($20 + $18) * .5;
    $19 = ($19 + $16) * .5;
    $26 = $23 * $13 + ($22 * $20 + $19 * $25);
    $13 = ($17 - $13) * Math_abs($23) + (($18 - $20) * Math_abs($22) + ($16 - $19) * Math_abs($25));
    if (!($24 > $26 + $13 + 9.999999974752427e-07 | !($24 + 9.999999974752427e-07 >= $26 - $13))) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
     $13 = +FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 48 >> 2]]($3);
     $16 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4);
     $4 = HEAP32[$3 + 324 >> 2];
     if ($4) {
      $25 = $13 + $16;
      $8 = $4 - 1 | 0;
      $9 = $3 + 296 | 0;
      while (1) {
       $4 = HEAP32[$3 + 320 >> 2] + Math_imul(HEAP32[$3 + 332 >> 2], $8) | 0;
       label$4 : {
        if (HEAP32[$3 + 328 >> 2] == 1) {
         $13 = HEAPF64[$4 >> 3] * HEAPF64[$3 + 280 >> 3];
         HEAPF64[$6 + 32 >> 3] = $13;
         $16 = HEAPF64[$4 + 8 >> 3] * HEAPF64[$3 + 288 >> 3];
         HEAPF64[$6 + 40 >> 3] = $16;
         $17 = HEAPF64[$3 + 296 >> 3];
         $4 = $4 + 16 | 0;
         break label$4;
        }
        $13 = HEAPF64[$3 + 280 >> 3] * +HEAPF32[$4 >> 2];
        HEAPF64[$6 + 32 >> 3] = $13;
        $16 = HEAPF64[$3 + 288 >> 3] * +HEAPF32[$4 + 4 >> 2];
        HEAPF64[$6 + 40 >> 3] = $16;
        $17 = +HEAPF32[$4 + 8 >> 2];
        $4 = $9;
       }
       $24 = HEAPF64[$4 >> 3];
       HEAP32[$6 + 56 >> 2] = 0;
       HEAP32[$6 + 60 >> 2] = 0;
       $17 = $17 * $24;
       $22 = $17 * HEAPF64[$6 + 208 >> 3] + ($13 * HEAPF64[$6 + 192 >> 3] + $16 * HEAPF64[$6 + 200 >> 3]) + HEAPF64[$6 + 264 >> 3];
       HEAPF64[$6 + 40 >> 3] = $22;
       $24 = HEAPF64[$6 + 136 >> 3];
       $18 = $17 * HEAPF64[$6 + 176 >> 3] + ($13 * HEAPF64[$6 + 160 >> 3] + $16 * HEAPF64[$6 + 168 >> 3]) + HEAPF64[$6 + 256 >> 3];
       HEAPF64[$6 + 32 >> 3] = $18;
       $23 = HEAPF64[$6 + 128 >> 3];
       $13 = $17 * HEAPF64[$6 + 240 >> 3] + ($13 * HEAPF64[$6 + 224 >> 3] + $16 * HEAPF64[$6 + 232 >> 3]) + HEAPF64[$6 + 272 >> 3];
       HEAPF64[$6 + 48 >> 3] = $13;
       $16 = HEAPF64[$6 + 144 >> 3];
       $13 = $13 * $16 + ($18 * $23 + $22 * $24) - HEAPF64[$6 + 152 >> 3] - $25;
       label$6 : {
        if (!($13 < 0.0)) {
         break label$6
        }
        if ($5) {
         HEAP32[$6 + 24 >> 2] = 0;
         HEAP32[$6 + 28 >> 2] = 0;
         HEAPF64[$6 + 16 >> 3] = -$16;
         HEAPF64[$6 + 8 >> 3] = -$24;
         HEAPF64[$6 >> 3] = -$23;
         $4 = HEAP32[$0 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
         $4 = HEAP32[$0 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
         $4 = HEAP32[$0 + 12 >> 2];
         if (!$4) {
          $4 = HEAP32[$0 + 4 >> 2];
          $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$2 + 8 >> 2], HEAP32[$1 + 8 >> 2]) | 0;
          HEAP32[$0 + 12 >> 2] = $4;
         }
         $7 = HEAP32[$0 + 16 >> 2];
         HEAP32[$7 + 4 >> 2] = $4;
         FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7, $6, $6 + 32 | 0, $13);
         break label$6;
        }
        $4 = HEAP32[$0 + 16 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
        $4 = HEAP32[$0 + 16 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
        $4 = HEAP32[$0 + 12 >> 2];
        if (!$4) {
         $4 = HEAP32[$0 + 4 >> 2];
         $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
         HEAP32[$0 + 12 >> 2] = $4;
        }
        $7 = HEAP32[$0 + 16 >> 2];
        HEAP32[$7 + 4 >> 2] = $4;
        FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7, $6 + 128 | 0, $6 + 32 | 0, $13);
       }
       $8 = $8 - 1 | 0;
       if (($8 | 0) != -1) {
        continue
       }
       break;
      };
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
    }
    __stack_pointer = $6 + 288 | 0;
    break label$1;
   }
   if (($6 | 0) == 31) {
    $6 = __stack_pointer - 160 | 0;
    __stack_pointer = $6;
    $8 = HEAP32[$4 + 20 >> 2];
    if ($8) {
     $7 = HEAP32[$2 + 12 >> 2];
     $35 = HEAPF64[$7 + 112 >> 3];
     $36 = HEAPF64[$7 + 104 >> 3];
     $13 = HEAPF64[$7 + 80 >> 3];
     $16 = HEAPF64[$7 + 72 >> 3];
     $17 = HEAPF64[$7 + 48 >> 3];
     $24 = HEAPF64[$7 + 40 >> 3];
     $37 = HEAPF64[$7 + 96 >> 3];
     $23 = HEAPF64[$7 + 64 >> 3];
     $25 = HEAPF64[$7 + 32 >> 3];
     $22 = HEAPF64[$7 + 16 >> 3];
     $18 = HEAPF64[$7 + 8 >> 3];
     $19 = HEAPF64[$7 >> 3];
     $12 = $8 - 1 | 0;
     $10 = Math_imul($8, 152) - 152 | 0;
     $9 = HEAP32[$0 + 16 >> 2];
     while (1) {
      $7 = HEAP32[$4 + 28 >> 2] + $10 | 0;
      $15 = HEAP32[$7 + 128 >> 2];
      HEAP32[$6 + 152 >> 2] = 0;
      HEAP32[$6 + 156 >> 2] = 0;
      HEAP32[$6 + 120 >> 2] = 0;
      HEAP32[$6 + 124 >> 2] = 0;
      HEAP32[$6 + 88 >> 2] = 0;
      HEAP32[$6 + 92 >> 2] = 0;
      HEAP32[$6 + 56 >> 2] = 0;
      HEAP32[$6 + 60 >> 2] = 0;
      $20 = HEAPF64[$7 + 80 >> 3];
      $26 = HEAPF64[$7 + 16 >> 3];
      $28 = HEAPF64[$7 + 48 >> 3];
      HEAPF64[$6 + 112 >> 3] = $20 * $13 + ($26 * $23 + $16 * $28);
      $29 = HEAPF64[$7 + 72 >> 3];
      $31 = HEAPF64[$7 + 8 >> 3];
      $32 = HEAPF64[$7 + 40 >> 3];
      HEAPF64[$6 + 104 >> 3] = $29 * $13 + ($31 * $23 + $16 * $32);
      $30 = HEAPF64[$7 - -64 >> 3];
      $33 = HEAPF64[$7 >> 3];
      $34 = HEAPF64[$7 + 32 >> 3];
      HEAPF64[$6 + 96 >> 3] = $30 * $13 + ($33 * $23 + $16 * $34);
      HEAPF64[$6 + 80 >> 3] = $20 * $17 + ($26 * $25 + $24 * $28);
      HEAPF64[$6 + 72 >> 3] = $29 * $17 + ($31 * $25 + $24 * $32);
      HEAPF64[$6 + 64 >> 3] = $30 * $17 + ($33 * $25 + $24 * $34);
      HEAPF64[$6 + 48 >> 3] = $20 * $22 + ($26 * $19 + $18 * $28);
      HEAPF64[$6 + 40 >> 3] = $29 * $22 + ($31 * $19 + $18 * $32);
      HEAPF64[$6 + 32 >> 3] = $30 * $22 + ($33 * $19 + $18 * $34);
      $20 = HEAPF64[$7 + 112 >> 3];
      $26 = HEAPF64[$7 + 96 >> 3];
      $28 = HEAPF64[$7 + 104 >> 3];
      HEAPF64[$6 + 144 >> 3] = $35 + ($20 * $13 + ($26 * $23 + $16 * $28));
      HEAPF64[$6 + 136 >> 3] = $36 + ($20 * $17 + ($26 * $25 + $24 * $28));
      HEAPF64[$6 + 128 >> 3] = $37 + ($20 * $22 + ($26 * $19 + $18 * $28));
      HEAP32[$6 + 8 >> 2] = $2;
      $7 = HEAP32[$2 + 8 >> 2];
      HEAP32[$6 + 16 >> 2] = $7;
      HEAP32[$6 + 12 >> 2] = $15;
      HEAP32[$6 + 28 >> 2] = $12;
      HEAP32[$6 + 24 >> 2] = -1;
      HEAP32[$6 + 20 >> 2] = $6 + 32;
      $8 = HEAP32[$9 + 8 >> 2];
      label$31 : {
       if (($7 | 0) == HEAP32[$8 + 8 >> 2]) {
        HEAP32[$9 + 8 >> 2] = $6 + 8;
        break label$31;
       }
       $8 = HEAP32[$9 + 12 >> 2];
       HEAP32[$9 + 12 >> 2] = $6 + 8;
      }
      btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $6 + 8 | 0, $3, $15, $5);
      $9 = HEAP32[$0 + 16 >> 2];
      label$5 : {
       if (HEAP32[HEAP32[$9 + 8 >> 2] + 8 >> 2] == HEAP32[$6 + 16 >> 2]) {
        HEAP32[$9 + 8 >> 2] = $8;
        break label$5;
       }
       HEAP32[$9 + 12 >> 2] = $8;
      }
      $10 = $10 - 152 | 0;
      $12 = $12 - 1 | 0;
      if (($12 | 0) != -1) {
       continue
      }
      break;
     };
    }
    __stack_pointer = $6 + 160 | 0;
    break label$1;
   }
   if ($6 - 21 >>> 0 <= 8) {
    $6 = __stack_pointer - 224 | 0;
    __stack_pointer = $6;
    HEAP8[$6 + 212 | 0] = $5;
    HEAP32[$6 + 208 >> 2] = $3;
    HEAP32[$6 + 196 >> 2] = $0;
    HEAP32[$6 + 192 >> 2] = 7612;
    HEAP32[$6 + 200 >> 2] = $1;
    HEAP32[$6 + 204 >> 2] = $2;
    (wasm2js_i32$0 = $6, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4)), HEAPF64[wasm2js_i32$0 + 216 >> 3] = wasm2js_f64$0;
    $0 = HEAP32[$2 + 12 >> 2];
    $20 = HEAPF64[$0 + 104 >> 3];
    $26 = HEAPF64[$0 + 112 >> 3];
    $1 = HEAP32[$1 + 12 >> 2];
    $28 = HEAPF64[$1 + 104 >> 3];
    $29 = HEAPF64[$1 + 112 >> 3];
    $13 = HEAPF64[$0 + 40 >> 3];
    $16 = HEAPF64[$0 + 72 >> 3];
    $31 = HEAPF64[$1 + 40 >> 3];
    $32 = HEAPF64[$1 + 72 >> 3];
    $30 = HEAPF64[$1 + 48 >> 3];
    $17 = HEAPF64[$0 + 48 >> 3];
    $33 = HEAPF64[$1 + 80 >> 3];
    $24 = HEAPF64[$0 + 80 >> 3];
    $34 = HEAPF64[$1 + 64 >> 3];
    $23 = HEAPF64[$0 + 64 >> 3];
    $35 = HEAPF64[$1 >> 3];
    $25 = HEAPF64[$0 >> 3];
    $36 = HEAPF64[$1 + 32 >> 3];
    $22 = HEAPF64[$0 + 32 >> 3];
    $38 = HEAPF64[$0 + 96 >> 3];
    $37 = HEAPF64[$1 + 96 >> 3];
    $18 = HEAPF64[$0 + 8 >> 3];
    $40 = HEAPF64[$1 + 8 >> 3];
    $41 = HEAPF64[$1 + 16 >> 3];
    $19 = HEAPF64[$0 + 16 >> 3];
    $0 = $6 + 184 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $6 + 152 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $6 + 120 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $6 - -64 | 0;
    HEAPF64[$0 + 80 >> 3] = $33 * $24 + ($41 * $19 + $17 * $30);
    HEAPF64[$0 + 72 >> 3] = $32 * $24 + ($40 * $19 + $17 * $31);
    HEAPF64[$0 + 48 >> 3] = $33 * $16 + ($41 * $18 + $13 * $30);
    HEAPF64[$0 + 40 >> 3] = $32 * $16 + ($40 * $18 + $13 * $31);
    $38 = -$38;
    HEAPF64[$0 + 112 >> 3] = $19 * $38 - $17 * $20 - $24 * $26 + ($29 * $24 + ($37 * $19 + $17 * $28));
    HEAPF64[$0 + 104 >> 3] = $18 * $38 - $13 * $20 - $16 * $26 + ($29 * $16 + ($37 * $18 + $13 * $28));
    HEAP32[$6 + 88 >> 2] = 0;
    HEAP32[$6 + 92 >> 2] = 0;
    HEAPF64[$6 + 64 >> 3] = $34 * $23 + ($35 * $25 + $22 * $36);
    HEAPF64[$6 + 128 >> 3] = $34 * $24 + ($35 * $19 + $17 * $36);
    HEAPF64[$6 + 96 >> 3] = $34 * $16 + ($35 * $18 + $13 * $36);
    HEAPF64[$6 + 80 >> 3] = $33 * $23 + ($41 * $25 + $22 * $30);
    HEAPF64[$6 + 72 >> 3] = $32 * $23 + ($40 * $25 + $22 * $31);
    HEAPF64[$6 + 160 >> 3] = $25 * $38 - $22 * $20 - $23 * $26 + ($29 * $23 + ($37 * $25 + $22 * $28));
    $1 = $0;
    $0 = $6 + 32 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $0, $6);
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $6 + 192 | 0, $0, $6);
    __stack_pointer = $6 + 224 | 0;
    break label$1;
   }
   $6 = HEAP32[$1 + 12 >> 2];
   $8 = $6 + 8 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $7 = $11 + 832 | 0;
   $10 = $7 + 8 | 0;
   HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$10 + 4 >> 2] = $9;
   $8 = $6 + 16 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $10 = $7 + 16 | 0;
   HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$10 + 4 >> 2] = $9;
   $8 = $6 + 24 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $10 = $7 + 24 | 0;
   HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$10 + 4 >> 2] = $9;
   $8 = HEAP32[$6 >> 2];
   $9 = HEAP32[$6 + 4 >> 2];
   $10 = $6 + 56 | 0;
   $12 = HEAP32[$10 + 4 >> 2];
   $15 = $7 + 56 | 0;
   HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$15 + 4 >> 2] = $12;
   $10 = $6 + 48 | 0;
   $12 = HEAP32[$10 + 4 >> 2];
   $15 = $7 + 48 | 0;
   HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$15 + 4 >> 2] = $12;
   $10 = $6 + 40 | 0;
   $12 = HEAP32[$10 + 4 >> 2];
   $15 = $7 + 40 | 0;
   HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$15 + 4 >> 2] = $12;
   $10 = HEAP32[$6 + 32 >> 2];
   $12 = HEAP32[$6 + 36 >> 2];
   $15 = $6 + 88 | 0;
   $14 = HEAP32[$15 + 4 >> 2];
   $21 = $7 + 88 | 0;
   HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$21 + 4 >> 2] = $14;
   $15 = $6 + 80 | 0;
   $14 = HEAP32[$15 + 4 >> 2];
   $21 = $7 + 80 | 0;
   HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$21 + 4 >> 2] = $14;
   $15 = $6 + 72 | 0;
   $14 = HEAP32[$15 + 4 >> 2];
   $21 = $7 + 72 | 0;
   HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$21 + 4 >> 2] = $14;
   HEAP32[$11 + 832 >> 2] = $8;
   HEAP32[$11 + 836 >> 2] = $9;
   HEAP32[$11 + 864 >> 2] = $10;
   HEAP32[$11 + 868 >> 2] = $12;
   $8 = HEAP32[$6 + 68 >> 2];
   HEAP32[$11 + 896 >> 2] = HEAP32[$6 + 64 >> 2];
   HEAP32[$11 + 900 >> 2] = $8;
   $8 = $6 + 120 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $10 = $7 + 120 | 0;
   HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$10 + 4 >> 2] = $9;
   $8 = $6 + 112 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $10 = $7 + 112 | 0;
   HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$10 + 4 >> 2] = $9;
   $8 = $6 + 104 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $10 = $7 + 104 | 0;
   HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$10 + 4 >> 2] = $9;
   $8 = HEAP32[$6 + 100 >> 2];
   HEAP32[$11 + 928 >> 2] = HEAP32[$6 + 96 >> 2];
   HEAP32[$11 + 932 >> 2] = $8;
   $6 = HEAP32[$2 + 12 >> 2];
   $9 = $6 + 8 | 0;
   $10 = HEAP32[$9 + 4 >> 2];
   $8 = $11 + 704 | 0;
   $12 = $8 + 8 | 0;
   HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$12 + 4 >> 2] = $10;
   $9 = $6 + 16 | 0;
   $10 = HEAP32[$9 + 4 >> 2];
   $12 = $8 + 16 | 0;
   HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$12 + 4 >> 2] = $10;
   $9 = $6 + 24 | 0;
   $10 = HEAP32[$9 + 4 >> 2];
   $12 = $8 + 24 | 0;
   HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$12 + 4 >> 2] = $10;
   $9 = HEAP32[$6 >> 2];
   $10 = HEAP32[$6 + 4 >> 2];
   $12 = $6 + 56 | 0;
   $15 = HEAP32[$12 + 4 >> 2];
   $14 = $8 + 56 | 0;
   HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$14 + 4 >> 2] = $15;
   $12 = $6 + 48 | 0;
   $15 = HEAP32[$12 + 4 >> 2];
   $14 = $8 + 48 | 0;
   HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$14 + 4 >> 2] = $15;
   $12 = $6 + 40 | 0;
   $15 = HEAP32[$12 + 4 >> 2];
   $14 = $8 + 40 | 0;
   HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$14 + 4 >> 2] = $15;
   $12 = HEAP32[$6 + 32 >> 2];
   $15 = HEAP32[$6 + 36 >> 2];
   $14 = $6 + 88 | 0;
   $21 = HEAP32[$14 + 4 >> 2];
   $27 = $8 + 88 | 0;
   HEAP32[$27 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$27 + 4 >> 2] = $21;
   $14 = $6 + 80 | 0;
   $21 = HEAP32[$14 + 4 >> 2];
   $27 = $8 + 80 | 0;
   HEAP32[$27 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$27 + 4 >> 2] = $21;
   $14 = $6 + 72 | 0;
   $21 = HEAP32[$14 + 4 >> 2];
   $27 = $8 + 72 | 0;
   HEAP32[$27 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$27 + 4 >> 2] = $21;
   HEAP32[$11 + 704 >> 2] = $9;
   HEAP32[$11 + 708 >> 2] = $10;
   HEAP32[$11 + 736 >> 2] = $12;
   HEAP32[$11 + 740 >> 2] = $15;
   $9 = HEAP32[$6 + 68 >> 2];
   HEAP32[$11 + 768 >> 2] = HEAP32[$6 + 64 >> 2];
   HEAP32[$11 + 772 >> 2] = $9;
   $9 = $6 + 120 | 0;
   $10 = HEAP32[$9 + 4 >> 2];
   $12 = $8 + 120 | 0;
   HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$12 + 4 >> 2] = $10;
   $9 = $6 + 112 | 0;
   $10 = HEAP32[$9 + 4 >> 2];
   $12 = $8 + 112 | 0;
   HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$12 + 4 >> 2] = $10;
   $9 = $6 + 104 | 0;
   $10 = HEAP32[$9 + 4 >> 2];
   $12 = $8 + 104 | 0;
   HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$12 + 4 >> 2] = $10;
   $9 = HEAP32[$6 + 100 >> 2];
   HEAP32[$11 + 800 >> 2] = HEAP32[$6 + 96 >> 2];
   HEAP32[$11 + 804 >> 2] = $9;
   HEAP32[$11 + 692 >> 2] = 0;
   HEAP8[$11 + 696 | 0] = 1;
   HEAP32[$11 + 684 >> 2] = 0;
   HEAP32[$11 + 688 >> 2] = 0;
   $9 = $11 + 680 | 0;
   $6 = __stack_pointer - 192 | 0;
   __stack_pointer = $6;
   label$12 : {
    if (HEAP32[$3 + 128 >> 2]) {
     $10 = $6 + 120 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $13 = HEAPF64[$7 + 16 >> 3];
     $18 = -HEAPF64[$7 + 96 >> 3];
     $16 = HEAPF64[$7 + 48 >> 3];
     $19 = HEAPF64[$7 + 104 >> 3];
     $17 = HEAPF64[$7 + 80 >> 3];
     $20 = HEAPF64[$7 + 112 >> 3];
     $26 = HEAPF64[$8 + 112 >> 3];
     $28 = HEAPF64[$8 + 96 >> 3];
     $29 = HEAPF64[$8 + 104 >> 3];
     HEAPF64[$6 + 112 >> 3] = $13 * $18 - $16 * $19 - $17 * $20 + ($17 * $26 + ($13 * $28 + $16 * $29));
     $24 = HEAPF64[$7 + 8 >> 3];
     $23 = HEAPF64[$7 + 40 >> 3];
     $25 = HEAPF64[$7 + 72 >> 3];
     HEAPF64[$6 + 104 >> 3] = $24 * $18 - $19 * $23 - $20 * $25 + ($25 * $26 + ($24 * $28 + $23 * $29));
     $22 = HEAPF64[$7 >> 3];
     $30 = $22 * $18;
     $18 = HEAPF64[$7 + 32 >> 3];
     $30 = $30 - $19 * $18;
     $19 = HEAPF64[$7 + 64 >> 3];
     HEAPF64[$6 + 96 >> 3] = $30 - $20 * $19 + ($19 * $26 + ($22 * $28 + $18 * $29));
     $7 = $6 + 88 | 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     $7 = $6 + 56 | 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     $20 = HEAPF64[$8 + 80 >> 3];
     $26 = HEAPF64[$8 + 16 >> 3];
     $28 = HEAPF64[$8 + 48 >> 3];
     HEAPF64[$6 + 80 >> 3] = $17 * $20 + ($13 * $26 + $16 * $28);
     $29 = HEAPF64[$8 + 72 >> 3];
     $31 = HEAPF64[$8 + 8 >> 3];
     $32 = HEAPF64[$8 + 40 >> 3];
     HEAPF64[$6 + 72 >> 3] = $17 * $29 + ($13 * $31 + $16 * $32);
     HEAPF64[$6 + 48 >> 3] = $20 * $25 + ($26 * $24 + $23 * $28);
     HEAPF64[$6 + 40 >> 3] = $29 * $25 + ($31 * $24 + $23 * $32);
     HEAP32[$6 + 24 >> 2] = 0;
     HEAP32[$6 + 28 >> 2] = 0;
     $30 = $17;
     $17 = HEAPF64[$8 + 64 >> 3];
     $33 = $13;
     $13 = HEAPF64[$8 >> 3];
     $34 = $16;
     $16 = HEAPF64[$8 + 32 >> 3];
     HEAPF64[$6 + 64 >> 3] = $30 * $17 + ($33 * $13 + $34 * $16);
     HEAPF64[$6 + 32 >> 3] = $17 * $25 + ($13 * $24 + $23 * $16);
     HEAPF64[$6 + 16 >> 3] = $20 * $19 + ($26 * $22 + $18 * $28);
     HEAPF64[$6 + 8 >> 3] = $29 * $19 + ($31 * $22 + $18 * $32);
     HEAPF64[$6 >> 3] = $17 * $19 + ($13 * $22 + $18 * $16);
     $7 = $6 + 128 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $6, $7, $6 + 160 | 0);
     btGImpactQuantizedBvh__boxQuery_28btAABB_20const__2c_20btAlignedObjectArray_int___29_20const($3 + 128 | 0, $7, $9);
     break label$12;
    }
    $10 = $8;
    $8 = $6 + 128 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $10, $8, $8 + 32 | 0);
    $10 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 88 >> 2]]($3) | 0;
    if (!$10) {
     break label$12
    }
    $42 = $6 + 32 | 0;
    while (1) {
     $10 = $10 - 1 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 120 >> 2]]($3, $10, $7, $6, $42);
     if (!(HEAPF64[$6 + 160 >> 3] < HEAPF64[$6 >> 3] | HEAPF64[$6 + 128 >> 3] > HEAPF64[$6 + 32 >> 3] | (HEAPF64[$6 + 168 >> 3] < HEAPF64[$6 + 8 >> 3] | HEAPF64[$6 + 136 >> 3] > HEAPF64[$6 + 40 >> 3]) | (HEAPF64[$6 + 176 >> 3] < HEAPF64[$6 + 16 >> 3] | HEAPF64[$6 + 144 >> 3] > HEAPF64[$6 + 48 >> 3]))) {
      $4 = HEAP32[$9 + 4 >> 2];
      label$54 : {
       if (($4 | 0) != HEAP32[$9 + 8 >> 2]) {
        break label$54
       }
       $14 = $4 ? $4 << 1 : 1;
       if (($14 | 0) <= ($4 | 0)) {
        break label$54
       }
       label$65 : {
        if (!$14) {
         $12 = 0;
         break label$65;
        }
        $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 2);
        $4 = HEAP32[$9 + 4 >> 2];
       }
       $15 = HEAP32[$9 + 12 >> 2];
       label$8 : {
        label$9 : {
         if (($4 | 0) > 0) {
          $21 = $4 & 3;
          $8 = 0;
          if ($4 - 1 >>> 0 >= 3) {
           $43 = $4 & -4;
           $4 = 0;
           while (1) {
            $27 = $4 + $12 | 0;
            $39 = $4 + $15 | 0;
            HEAP32[$27 >> 2] = HEAP32[$39 >> 2];
            HEAP32[$27 + 4 >> 2] = HEAP32[$39 + 4 >> 2];
            HEAP32[$27 + 8 >> 2] = HEAP32[$39 + 8 >> 2];
            HEAP32[$27 + 12 >> 2] = HEAP32[$39 + 12 >> 2];
            $4 = $4 + 16 | 0;
            $8 = $8 + 4 | 0;
            if (($43 | 0) != ($8 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$21) {
           break label$9
          }
          $8 = $8 << 2;
          $4 = $8 + $12 | 0;
          $8 = $8 + $15 | 0;
          while (1) {
           HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
           $4 = $4 + 4 | 0;
           $8 = $8 + 4 | 0;
           $21 = $21 - 1 | 0;
           if ($21) {
            continue
           }
           break;
          };
          break label$9;
         }
         if (!$15) {
          break label$8
         }
        }
        if (HEAPU8[$9 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($15)
        }
        $4 = HEAP32[$9 + 4 >> 2];
       }
       HEAP32[$9 + 12 >> 2] = $12;
       HEAP8[$9 + 16 | 0] = 1;
       HEAP32[$9 + 8 >> 2] = $14;
      }
      HEAP32[HEAP32[$9 + 12 >> 2] + ($4 << 2) >> 2] = $10;
      HEAP32[$9 + 4 >> 2] = HEAP32[$9 + 4 >> 2] + 1;
     }
     if ($10) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $6 + 192 | 0;
   if (HEAP32[$11 + 684 >> 2]) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
    $8 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($11 + 144 | 0);
    HEAP32[$11 + 148 >> 2] = 1;
    memset($11 + 248 | 0, 0, 96);
    HEAP32[$11 + 144 >> 2] = 7012;
    $9 = $11 + 344 | 0;
    btBU_Simplex1to4__btBU_Simplex1to4_28_29($9);
    HEAP32[$11 + 516 >> 2] = 4;
    HEAP32[$11 + 664 >> 2] = 7536;
    HEAP32[$11 + 656 >> 2] = 7456;
    HEAP32[$11 + 648 >> 2] = 7384;
    HEAP32[$11 + 344 >> 2] = 7212;
    HEAP32[$11 + 136 >> 2] = $3;
    if (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 96 >> 2]]($3) | 0) {
     $4 = $11 + 656 | 0
    } else {
     $4 = HEAP32[$11 + 136 >> 2];
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 100 >> 2]]($4) | 0 ? $11 + 664 | 0 : $11 + 648 | 0;
    }
    HEAP32[$4 + 4 >> 2] = $11 + 136;
    HEAP32[$11 + 672 >> 2] = $4;
    $7 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 92 >> 2]]($3) | 0;
    $4 = HEAP32[$11 + 684 >> 2];
    label$10 : {
     if (!$4) {
      break label$10
     }
     if ($5) {
      $6 = ($4 << 2) - 4 | 0;
      while (1) {
       $5 = HEAP32[HEAP32[$11 + 692 >> 2] + $6 >> 2];
       HEAP32[$0 + 32 >> 2] = $5;
       $10 = HEAP32[$11 + 672 >> 2];
       $10 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] >> 2]]($10, $5) | 0;
       if ($7) {
        FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 132 >> 2]]($11 + 8 | 0, $3, $5)
       }
       HEAP32[$11 + 8 >> 2] = $1;
       HEAP32[$11 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
       $12 = HEAP32[$1 + 8 >> 2];
       HEAP32[$11 + 16 >> 2] = $12;
       HEAP32[$11 + 12 >> 2] = $10;
       (wasm2js_i32$0 = $11, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2])), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       HEAP32[$11 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
       $5 = HEAP32[$0 + 16 >> 2];
       $10 = HEAP32[$5 + 8 >> 2];
       label$14 : {
        if (($12 | 0) != HEAP32[$10 + 8 >> 2]) {
         HEAP32[$5 + 12 >> 2] = $11 + 8;
         break label$14;
        }
        HEAP32[$5 + 8 >> 2] = $11 + 8;
       }
       btGImpactCollisionAlgorithm__shape_vs_shape_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $2, $11 + 8 | 0);
       HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2] = $10;
       $6 = $6 - 4 | 0;
       $4 = $4 - 1 | 0;
       if ($4) {
        continue
       }
       break;
      };
      break label$10;
     }
     if (!$7) {
      $6 = ($4 << 2) - 4 | 0;
      while (1) {
       $5 = HEAP32[HEAP32[$11 + 692 >> 2] + $6 >> 2];
       HEAP32[$0 + 24 >> 2] = $5;
       $7 = HEAP32[$11 + 672 >> 2];
       $5 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7, $5) | 0;
       HEAP32[$11 + 8 >> 2] = $1;
       HEAP32[$11 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
       $7 = HEAP32[$1 + 8 >> 2];
       HEAP32[$11 + 16 >> 2] = $7;
       HEAP32[$11 + 12 >> 2] = $5;
       (wasm2js_i32$0 = $11, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2])), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       HEAP32[$11 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
       $5 = HEAP32[$0 + 16 >> 2];
       $10 = HEAP32[$5 + 8 >> 2];
       label$18 : {
        if (($7 | 0) == HEAP32[$10 + 8 >> 2]) {
         HEAP32[$5 + 8 >> 2] = $11 + 8;
         break label$18;
        }
        HEAP32[$5 + 12 >> 2] = $11 + 8;
       }
       btGImpactCollisionAlgorithm__shape_vs_shape_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $11 + 8 | 0, $2);
       HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2] = $10;
       $6 = $6 - 4 | 0;
       $4 = $4 - 1 | 0;
       if ($4) {
        continue
       }
       break;
      };
      break label$10;
     }
     $6 = ($4 << 2) - 4 | 0;
     while (1) {
      $5 = HEAP32[HEAP32[$11 + 692 >> 2] + $6 >> 2];
      HEAP32[$0 + 24 >> 2] = $5;
      $7 = HEAP32[$11 + 672 >> 2];
      $7 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7, $5) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 132 >> 2]]($11 + 8 | 0, $3, $5);
      HEAP32[$11 + 8 >> 2] = $1;
      HEAP32[$11 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
      $10 = HEAP32[$1 + 8 >> 2];
      HEAP32[$11 + 16 >> 2] = $10;
      HEAP32[$11 + 12 >> 2] = $7;
      (wasm2js_i32$0 = $11, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2])), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      HEAP32[$11 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
      $5 = HEAP32[$0 + 16 >> 2];
      $7 = HEAP32[$5 + 8 >> 2];
      label$21 : {
       if (($10 | 0) != HEAP32[$7 + 8 >> 2]) {
        HEAP32[$5 + 12 >> 2] = $11 + 8;
        break label$21;
       }
       HEAP32[$5 + 8 >> 2] = $11 + 8;
      }
      btGImpactCollisionAlgorithm__shape_vs_shape_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $11 + 8 | 0, $2);
      HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2] = $7;
      $6 = $6 - 4 | 0;
      $4 = $4 - 1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($9);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($8);
   }
   $0 = HEAP32[$11 + 692 >> 2];
   if (!$0 | !HEAPU8[$11 + 696 | 0]) {
    break label$1
   }
   btAlignedFreeInternal_28void__29($0);
  }
  __stack_pointer = $11 + 960 | 0;
 }
 
 function btGImpactCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = HEAP32[$0 + 12 >> 2];
  if ($5) {
   $6 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $5);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $5 = HEAP32[$0 + 8 >> 2];
  if ($5) {
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5) | 0;
   $5 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 60 >> 2]]($5, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $5 = $0 + 32 | 0;
  HEAP32[$5 >> 2] = -1;
  HEAP32[$5 + 4 >> 2] = -1;
  HEAP32[$0 + 20 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $4;
  $3 = HEAP32[$1 + 4 >> 2];
  if (HEAP32[$3 + 4 >> 2] == 25) {
   $4 = HEAP32[$2 + 4 >> 2];
   if (HEAP32[$4 + 4 >> 2] == 25) {
    btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, $3, $4);
    return;
   }
   btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $2, $3, $4, 0);
   return;
  }
  $4 = HEAP32[$2 + 4 >> 2];
  if (HEAP32[$4 + 4 >> 2] == 25) {
   btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $2, $1, $4, $3, 1)
  }
 }
 
 function btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return 1.0;
 }
 
 function btGImpactCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($4 | 0) <= ($3 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    label$5 : {
     if (($3 | 0) <= 0) {
      break label$5
     }
     $5 = $3 & 3;
     if ($3 - 1 >>> 0 >= 3) {
      $9 = $3 & -4;
      $2 = 0;
      while (1) {
       $6 = $2 + $7 | 0;
       HEAP32[$6 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 8 >> 2];
       HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 12 >> 2];
       $2 = $2 + 16 | 0;
       $8 = $8 + 4 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$5
     }
     $2 = $8 << 2;
     while (1) {
      HEAP32[$2 + $7 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = $7;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 12 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function btTriangleShapeEx__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
  $9 = HEAPF64[$0 + 184 >> 3];
  $5 = HEAPF64[$1 + 80 >> 3];
  $14 = HEAPF64[$0 + 168 >> 3];
  $6 = HEAPF64[$1 + 64 >> 3];
  $4 = HEAPF64[$1 + 72 >> 3];
  $10 = HEAPF64[$0 + 176 >> 3];
  $22 = $9 * $5 + ($14 * $6 + $4 * $10);
  $15 = HEAPF64[$1 + 112 >> 3];
  $11 = HEAPF64[$1 + 104 >> 3];
  $7 = HEAPF64[$1 + 48 >> 3];
  $8 = HEAPF64[$1 + 32 >> 3];
  $12 = HEAPF64[$1 + 40 >> 3];
  $13 = $11 + ($9 * $7 + ($14 * $8 + $12 * $10));
  $17 = HEAPF64[$0 + 152 >> 3];
  $18 = HEAPF64[$0 + 136 >> 3];
  $19 = HEAPF64[$0 + 144 >> 3];
  $23 = $17 * $5 + ($18 * $6 + $4 * $19);
  $16 = $11 + ($17 * $7 + ($18 * $8 + $12 * $19));
  $20 = HEAPF64[$0 + 120 >> 3];
  $24 = $20 * $5;
  $5 = HEAPF64[$0 + 104 >> 3];
  $21 = $5 * $6;
  $6 = HEAPF64[$0 + 112 >> 3];
  $21 = $21 + $6 * $4;
  $25 = $20 * $7 + ($5 * $8 + $6 * $12);
  $7 = HEAPF64[$1 + 16 >> 3];
  $8 = HEAPF64[$1 >> 3];
  $4 = $6;
  $6 = HEAPF64[$1 + 8 >> 3];
  $12 = HEAPF64[$1 + 96 >> 3];
  $4 = $20 * $7 + ($5 * $8 + $4 * $6) + $12;
  $5 = $12 + ($9 * $7 + ($14 * $8 + $6 * $10));
  $8 = $12 + ($17 * $7 + ($18 * $8 + $6 * $19));
  label$1 : {
   label$2 : {
    if ($5 < $8) {
     $14 = $5;
     if (!($4 > $5)) {
      break label$2
     }
     break label$1;
    }
    $14 = $8;
    if ($4 > $8) {
     break label$1
    }
   }
   $14 = $4;
  }
  $12 = $24 + $21;
  $9 = $15 + $22;
  $7 = $15 + $23;
  $10 = $25 + $11;
  label$4 : {
   label$5 : {
    if ($13 < $16) {
     $6 = $13;
     if (!($10 > $6)) {
      break label$5
     }
     break label$4;
    }
    $6 = $16;
    if ($10 > $6) {
     break label$4
    }
   }
   $6 = $10;
  }
  $11 = $12 + $15;
  label$7 : {
   label$8 : {
    if ($9 < $7) {
     $15 = $9;
     if (!($9 < $11)) {
      break label$8
     }
     break label$7;
    }
    $15 = $7;
    if ($7 < $11) {
     break label$7
    }
   }
   $15 = $11;
  }
  label$10 : {
   label$11 : {
    if ($5 > $8) {
     if (!($4 < $5)) {
      break label$11
     }
     break label$10;
    }
    $5 = $8;
    if ($4 < $5) {
     break label$10
    }
   }
   $5 = $4;
  }
  label$13 : {
   label$14 : {
    if ($13 > $16) {
     if (!($10 < $13)) {
      break label$14
     }
     break label$13;
    }
    $13 = $16;
    if ($10 < $13) {
     break label$13
    }
   }
   $13 = $10;
  }
  $4 = HEAPF64[$0 + 80 >> 3];
  label$16 : {
   label$17 : {
    if ($9 > $7) {
     if (!($9 > $11)) {
      break label$17
     }
     break label$16;
    }
    $9 = $7;
    if ($11 < $7) {
     break label$16
    }
   }
   $9 = $11;
  }
  HEAPF64[$2 + 16 >> 3] = $15 - $4;
  HEAPF64[$2 + 8 >> 3] = $6 - $4;
  HEAPF64[$2 >> 3] = $14 - $4;
  HEAPF64[$3 + 16 >> 3] = $4 + $9;
  HEAPF64[$3 + 8 >> 3] = $4 + $13;
  HEAPF64[$3 >> 3] = $4 + $5;
 }
 
 function btConvexInternalShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 16 | 0;
 }
 
 function btTriangleShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $0 = $2 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $2 + 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $2 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btTriangleShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 3586;
 }
 
 function btCollisionShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 1072693248;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 1072693248;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
 }
 
 function btConvexInternalShape__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 80 >> 3] = $1;
 }
 
 function btConvexInternalShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 80 >> 3];
 }
 
 function btConvexInternalShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 52;
 }
 
 function btConvexInternalShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 48 >> 2] = 0;
  HEAPF32[$1 + 28 >> 2] = HEAPF64[$0 + 48 >> 3];
  HEAPF32[$1 + 32 >> 2] = HEAPF64[$0 + 56 >> 3];
  HEAPF32[$1 + 36 >> 2] = HEAPF64[$0 - -64 >> 3];
  HEAPF32[$1 + 40 >> 2] = HEAPF64[$0 + 72 >> 3];
  HEAPF32[$1 + 12 >> 2] = HEAPF64[$0 + 16 >> 3];
  HEAPF32[$1 + 16 >> 2] = HEAPF64[$0 + 24 >> 3];
  HEAPF32[$1 + 20 >> 2] = HEAPF64[$0 + 32 >> 3];
  HEAPF32[$1 + 24 >> 2] = HEAPF64[$0 + 40 >> 3];
  HEAPF32[$1 + 44 >> 2] = HEAPF64[$0 + 80 >> 3];
  return 3791;
 }
 
 function btTriangleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0;
  $4 = HEAPF64[$2 + 16 >> 3];
  $5 = HEAPF64[$2 >> 3];
  $6 = HEAPF64[$2 + 8 >> 3];
  $8 = $4 * HEAPF64[$1 + 120 >> 3] + ($5 * HEAPF64[$1 + 104 >> 3] + $6 * HEAPF64[$1 + 112 >> 3]);
  $9 = $4 * HEAPF64[$1 + 152 >> 3] + ($5 * HEAPF64[$1 + 136 >> 3] + $6 * HEAPF64[$1 + 144 >> 3]);
  $2 = $8 < $9;
  $1 = ($1 + 104 | 0) + (($4 * HEAPF64[$1 + 184 >> 3] + ($5 * HEAPF64[$1 + 168 >> 3] + $6 * HEAPF64[$1 + 176 >> 3]) > ($2 ? $9 : $8) ? 2 : $2) << 5) | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $7 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $3 = $1 + 16 | 0;
  $7 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btTriangleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0;
  if (($3 | 0) > 0) {
   $13 = $0 + 104 | 0;
   while (1) {
    $7 = HEAPF64[$1 + 16 >> 3];
    $8 = HEAPF64[$1 >> 3];
    $9 = HEAPF64[$1 + 8 >> 3];
    $11 = $7 * HEAPF64[$0 + 120 >> 3] + ($8 * HEAPF64[$0 + 104 >> 3] + $9 * HEAPF64[$0 + 112 >> 3]);
    $12 = $7 * HEAPF64[$0 + 152 >> 3] + ($8 * HEAPF64[$0 + 136 >> 3] + $9 * HEAPF64[$0 + 144 >> 3]);
    $4 = $11 < $12;
    $4 = (($7 * HEAPF64[$0 + 184 >> 3] + ($8 * HEAPF64[$0 + 168 >> 3] + $9 * HEAPF64[$0 + 176 >> 3]) > ($4 ? $12 : $11) ? 2 : $4) << 5) + $13 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$2 + 4 >> 2] = $5;
    $6 = $4 + 24 | 0;
    $10 = HEAP32[$6 + 4 >> 2];
    $5 = $2 + 24 | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = $10;
    $6 = $4 + 16 | 0;
    $10 = HEAP32[$6 + 4 >> 2];
    $5 = $2 + 16 | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = $10;
    $4 = $4 + 8 | 0;
    $6 = HEAP32[$4 + 4 >> 2];
    $5 = $2 + 8 | 0;
    HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$5 + 4 >> 2] = $6;
    $1 = $1 + 32 | 0;
    $2 = $2 + 32 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
 }
 
 function btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function btTriangleShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0;
  $5 = HEAPF64[$0 + 168 >> 3];
  $7 = HEAPF64[$0 + 136 >> 3];
  $9 = HEAPF64[$0 + 144 >> 3];
  $10 = HEAPF64[$0 + 184 >> 3];
  $8 = HEAPF64[$0 + 176 >> 3];
  $3 = HEAPF64[$0 + 112 >> 3];
  $4 = HEAPF64[$0 + 120 >> 3];
  $11 = HEAPF64[$0 + 152 >> 3];
  $6 = HEAPF64[$0 + 104 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $7 = $7 - $6;
  $8 = $8 - $3;
  $6 = $5 - $6;
  $5 = $9 - $3;
  $3 = $7 * $8 - $6 * $5;
  $9 = $3;
  $12 = $3 * $3;
  $3 = $5;
  $5 = $10 - $4;
  $4 = $11 - $4;
  $3 = $3 * $5 - $8 * $4;
  $4 = $4 * $6 - $5 * $7;
  $6 = 1.0 / Math_sqrt($12 + ($3 * $3 + $4 * $4));
  $5 = $9 * $6;
  HEAPF64[$2 + 16 >> 3] = $5;
  $4 = $4 * $6;
  HEAPF64[$2 + 8 >> 3] = $4;
  $3 = $3 * $6;
  HEAPF64[$2 >> 3] = $3;
  if ($1) {
   HEAPF64[$2 + 16 >> 3] = -$5;
   HEAPF64[$2 + 8 >> 3] = -$4;
   HEAPF64[$2 >> 3] = -$3;
  }
 }
 
 function btTriangleShape__getNumVertices_28_29_20const($0) {
  $0 = $0 | 0;
  return 3;
 }
 
 function btTriangleShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $1, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, ($1 + 1 | 0) % 3 | 0, $3);
 }
 
 function btTriangleShape__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $0 = ($1 << 5) + $0 | 0;
  $1 = $0 + 128 | 0;
  $4 = HEAP32[$1 + 4 >> 2];
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = $0 + 120 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 16 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 112 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $0 = $0 + 104 | 0;
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
 }
 
 function btTriangleShape__getNumPlanes_28_29_20const($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function btTriangleShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $3, $1, $2);
 }
 
 function btTriangleShape__isInside_28btVector3_20const__2c_20double_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  $13 = HEAPF64[$0 + 104 >> 3];
  $8 = HEAPF64[$0 + 136 >> 3] - $13;
  $4 = HEAPF64[$0 + 112 >> 3];
  $7 = HEAPF64[$0 + 176 >> 3] - $4;
  $9 = HEAPF64[$0 + 168 >> 3] - $13;
  $3 = HEAPF64[$0 + 144 >> 3] - $4;
  $6 = $8 * $7 - $9 * $3;
  $11 = $6;
  $14 = $6 * $6;
  $12 = $3;
  $3 = HEAPF64[$0 + 120 >> 3];
  $6 = HEAPF64[$0 + 184 >> 3] - $3;
  $10 = HEAPF64[$0 + 152 >> 3] - $3;
  $7 = $12 * $6 - $7 * $10;
  $8 = $10 * $9 - $6 * $8;
  $9 = 1.0 / Math_sqrt($14 + ($7 * $7 + $8 * $8));
  $6 = $11 * $9;
  $7 = $7 * $9;
  $8 = $8 * $9;
  $4 = HEAPF64[$1 + 16 >> 3] * $6 + (HEAPF64[$1 >> 3] * $7 + HEAPF64[$1 + 8 >> 3] * $8) - ($3 * $6 + ($13 * $7 + $4 * $8));
  $13 = -$2;
  label$1 : {
   if (!($4 >= $13) | !($2 >= $4)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 0, $5 + 32 | 0, $5);
   $9 = HEAPF64[$5 + 32 >> 3];
   $4 = HEAPF64[$5 >> 3] - $9;
   $10 = HEAPF64[$5 + 40 >> 3];
   $3 = HEAPF64[$5 + 8 >> 3] - $10;
   $2 = $4 * $8 - $7 * $3;
   $11 = $2;
   $14 = $2 * $2;
   $2 = $3 * $6;
   $12 = HEAPF64[$5 + 48 >> 3];
   $3 = HEAPF64[$5 + 16 >> 3] - $12;
   $2 = $2 - $8 * $3;
   $4 = $3 * $7 - $6 * $4;
   $3 = 1.0 / Math_sqrt($14 + ($2 * $2 + $4 * $4));
   $11 = $11 * $3;
   $2 = $2 * $3;
   $4 = $4 * $3;
   if ($13 > HEAPF64[$1 + 16 >> 3] * $11 + (HEAPF64[$1 >> 3] * $2 + HEAPF64[$1 + 8 >> 3] * $4) - ($12 * $11 + ($9 * $2 + $10 * $4))) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 1, $5 + 32 | 0, $5);
   $9 = HEAPF64[$5 + 32 >> 3];
   $4 = HEAPF64[$5 >> 3] - $9;
   $10 = HEAPF64[$5 + 40 >> 3];
   $3 = HEAPF64[$5 + 8 >> 3] - $10;
   $2 = $4 * $8 - $7 * $3;
   $11 = $2;
   $14 = $2 * $2;
   $2 = $3 * $6;
   $12 = HEAPF64[$5 + 48 >> 3];
   $3 = HEAPF64[$5 + 16 >> 3] - $12;
   $2 = $2 - $8 * $3;
   $4 = $3 * $7 - $6 * $4;
   $3 = 1.0 / Math_sqrt($14 + ($2 * $2 + $4 * $4));
   $11 = $11 * $3;
   $2 = $2 * $3;
   $4 = $4 * $3;
   if ($13 > HEAPF64[$1 + 16 >> 3] * $11 + (HEAPF64[$1 >> 3] * $2 + HEAPF64[$1 + 8 >> 3] * $4) - ($12 * $11 + ($9 * $2 + $10 * $4))) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 2, $5 + 32 | 0, $5);
   $4 = HEAPF64[$5 + 32 >> 3];
   $3 = HEAPF64[$5 >> 3] - $4;
   $9 = HEAPF64[$5 + 40 >> 3];
   $10 = HEAPF64[$5 + 8 >> 3] - $9;
   $2 = $3 * $8 - $7 * $10;
   $11 = $2;
   $12 = $2 * $2;
   $14 = $10 * $6;
   $2 = $8;
   $8 = HEAPF64[$5 + 48 >> 3];
   $10 = HEAPF64[$5 + 16 >> 3] - $8;
   $2 = $14 - $2 * $10;
   $6 = $10 * $7 - $6 * $3;
   $7 = 1.0 / Math_sqrt($12 + ($2 * $2 + $6 * $6));
   $3 = $11 * $7;
   $2 = $2 * $7;
   $6 = $6 * $7;
   if ($13 > HEAPF64[$1 + 16 >> 3] * $3 + (HEAPF64[$1 >> 3] * $2 + HEAPF64[$1 + 8 >> 3] * $6) - ($8 * $3 + ($4 * $2 + $9 * $6))) {
    break label$1
   }
   $15 = 1;
  }
  __stack_pointer = $5 - -64 | 0;
  return $15 | 0;
 }
 
 function btTriangleShape__getPlaneEquation_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0;
  $7 = HEAPF64[$0 + 168 >> 3];
  $9 = HEAPF64[$0 + 136 >> 3];
  $12 = HEAPF64[$0 + 144 >> 3];
  $13 = HEAPF64[$0 + 184 >> 3];
  $10 = HEAPF64[$0 + 176 >> 3];
  $1 = $0 + 112 | 0;
  $4 = HEAPF64[$1 >> 3];
  $8 = $0 + 120 | 0;
  $5 = HEAPF64[$8 >> 3];
  $14 = HEAPF64[$0 + 152 >> 3];
  $6 = HEAPF64[$0 + 104 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $9 = $9 - $6;
  $10 = $10 - $4;
  $6 = $7 - $6;
  $7 = $12 - $4;
  $4 = $9 * $10 - $6 * $7;
  $12 = $4;
  $15 = $4 * $4;
  $4 = $7;
  $7 = $13 - $5;
  $5 = $14 - $5;
  $4 = $4 * $7 - $10 * $5;
  $5 = $5 * $6 - $7 * $9;
  $6 = 1.0 / Math_sqrt($15 + ($4 * $4 + $5 * $5));
  HEAPF64[$2 + 16 >> 3] = $12 * $6;
  HEAPF64[$2 + 8 >> 3] = $5 * $6;
  HEAPF64[$2 >> 3] = $4 * $6;
  $11 = $0 + 128 | 0;
  $16 = HEAP32[$11 + 4 >> 2];
  $2 = $3 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$2 + 4 >> 2] = $16;
  $11 = HEAP32[$8 + 4 >> 2];
  $2 = $3 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$2 + 4 >> 2] = $11;
  $8 = HEAP32[$1 + 4 >> 2];
  $2 = $3 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $8;
  $1 = HEAP32[$0 + 108 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
 }
 
 function btBU_Simplex1to4__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4305;
 }
 
 function btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function GIM_ShapeRetriever__ChildShapeRetriever__getChildShape_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 128 >> 2]]($0, $1) | 0;
 }
 
 function GIM_ShapeRetriever__TriangleShapeRetriever__getChildShape_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$2 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 104 >> 2]]($3, $1, $2 + 8 | 0);
  return HEAP32[$0 + 4 >> 2] + 8 | 0;
 }
 
 function GIM_ShapeRetriever__TetraShapeRetriever__getChildShape_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$2 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 108 >> 2]]($3, $1, $2 + 208 | 0);
  return HEAP32[$0 + 4 >> 2] + 208 | 0;
 }
 
 function btGImpactTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 224 | 0;
  __stack_pointer = $6;
  $8 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($6 + 24 | 0);
  $5 = $1 + 8 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 136 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = $1 + 16 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 144 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = $1 + 24 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 152 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = HEAP32[$1 + 36 >> 2];
  $4 = $6 + 160 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $5 = $1 + 40 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 168 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = $1 + 48 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 176 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = $1 + 56 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 184 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = HEAP32[$1 + 68 >> 2];
  $4 = $6 + 192 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $5 = $1 + 72 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 200 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = $1 + 80 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 208 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $5 = $1 + 88 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $4 = $6 + 216 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = 1;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$6 + 128 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 132 >> 2] = $4;
  HEAP32[$6 + 24 >> 2] = 7012;
  HEAPF64[$6 + 104 >> 3] = HEAPF64[$0 + 24 >> 3];
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = HEAPU8[$0 + 20 | 0];
  label$1 : {
   if ($7) {
    HEAP32[$1 + 28 >> 2] = $2;
    $4 = $1 + 24 | 0;
    break label$1;
   }
   HEAP32[$1 + 36 >> 2] = $2;
   $4 = $1 + 32 | 0;
  }
  HEAP32[$4 >> 2] = $3;
  $4 = HEAP32[$0 + 12 >> 2];
  $5 = HEAP32[$4 + 8 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$6 + 8 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $2;
  HEAP32[$6 >> 2] = $4;
  $2 = HEAP32[$1 + 16 >> 2];
  $3 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$3 + 8 >> 2];
  HEAP32[$6 + 4 >> 2] = $6 + 24;
  label$3 : {
   if (($4 | 0) == ($5 | 0)) {
    HEAP32[$2 + 8 >> 2] = $6;
    break label$3;
   }
   $3 = HEAP32[$2 + 12 >> 2];
   HEAP32[$2 + 12 >> 2] = $6;
  }
  btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($1, HEAP32[$0 + 8 >> 2], $6, HEAP32[$0 + 16 >> 2], $6 + 24 | 0, ($7 | 0) != 0);
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] + 16 >> 2];
  label$5 : {
   if (HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2] == HEAP32[$6 + 8 >> 2]) {
    HEAP32[$0 + 8 >> 2] = $3;
    break label$5;
   }
   HEAP32[$0 + 12 >> 2] = $3;
  }
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($8);
  __stack_pointer = $6 + 224 | 0;
 }
 
 function btGImpactCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 40) | 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 >> 2] = 6940;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCollisionObject__btCollisionObject_28_29($0) {
  var $1 = 0;
  HEAP32[$0 + 264 >> 2] = 0;
  HEAP32[$0 + 268 >> 2] = 0;
  HEAP32[$0 >> 2] = 7792;
  HEAP32[$0 + 376 >> 2] = 0;
  HEAP32[$0 + 380 >> 2] = 0;
  HEAP32[$0 + 368 >> 2] = 966823146;
  HEAP32[$0 + 372 >> 2] = 1177108057;
  HEAP32[$0 + 360 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 1072693248;
  HEAP32[$0 + 400 >> 2] = -1;
  HEAP32[$0 + 404 >> 2] = -1;
  HEAP32[$0 + 392 >> 2] = 1;
  HEAP32[$0 + 396 >> 2] = -1;
  HEAP32[$0 + 416 >> 2] = 0;
  HEAP32[$0 + 420 >> 2] = 0;
  HEAP32[$0 + 424 >> 2] = 0;
  HEAP32[$0 + 428 >> 2] = 1071644672;
  HEAP32[$0 + 408 >> 2] = 1;
  $1 = $0 + 272 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 280 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 288 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 296 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 304 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 312 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 320 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 352 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 344 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 336 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 384 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 448 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 440 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 432 >> 2] = 0;
  HEAP32[$0 + 436 >> 2] = 0;
  HEAP32[$0 + 488 >> 2] = 0;
  HEAP32[$0 + 492 >> 2] = 1072693248;
  HEAP32[$0 + 472 >> 2] = 1;
  HEAP32[$0 + 476 >> 2] = 0;
  HEAP32[$0 + 480 >> 2] = -1;
  HEAP32[$0 + 484 >> 2] = -1;
  HEAP32[$0 + 464 >> 2] = 0;
  HEAP32[$0 + 468 >> 2] = 1086556160;
  HEAP32[$0 + 456 >> 2] = -1717986918;
  HEAP32[$0 + 460 >> 2] = 1069128089;
  HEAP32[$0 + 496 >> 2] = 0;
  HEAP32[$0 + 500 >> 2] = 0;
  $1 = $0 + 504 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 512 >> 2] = 0;
  HEAP8[$0 + 532 | 0] = 1;
  HEAP32[$0 + 536 >> 2] = 0;
  HEAP32[$0 + 528 >> 2] = 0;
  $1 = $0 + 520 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 1072693248;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 80 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 96 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 104 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 144 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 140 >> 2] = 1072693248;
  $1 = $0 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 160 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 168 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 176 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 184 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 192 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 200 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 208 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 216 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 256 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 248 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 240 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 232 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 224 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btCollisionObject___btCollisionObject_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 7792;
  $1 = HEAP32[$0 + 528 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 532 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 528 >> 2] = 0;
  HEAP8[$0 + 532 | 0] = 1;
  $1 = $0 + 520 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCollisionObject___btCollisionObject_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 7792;
  $1 = HEAP32[$0 + 528 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 532 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 528 >> 2] = 0;
  HEAP8[$0 + 532 | 0] = 1;
  $1 = $0 + 520 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btCollisionObject__setActivationState_28int_29_20const($0, $1) {
  if ((HEAP32[$0 + 408 >> 2] & -2) != 4) {
   HEAP32[$0 + 408 >> 2] = $1
  }
 }
 
 function btCollisionObject__activate_28bool_29_20const($0, $1) {
  if (HEAPU8[$0 + 392 | 0] & 3 ? $1 : 1) {
   if ((HEAP32[$0 + 408 >> 2] & -2) != 4) {
    HEAP32[$0 + 408 >> 2] = 1
   }
   HEAP32[$0 + 416 >> 2] = 0;
   HEAP32[$0 + 420 >> 2] = 0;
  }
 }
 
 function btCollisionObject__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0;
  HEAPF64[$1 + 16 >> 3] = HEAPF64[$0 + 8 >> 3];
  HEAPF64[$1 + 24 >> 3] = HEAPF64[$0 + 16 >> 3];
  HEAPF64[$1 + 32 >> 3] = HEAPF64[$0 + 24 >> 3];
  HEAPF64[$1 + 40 >> 3] = HEAPF64[$0 + 32 >> 3];
  HEAPF64[$1 + 48 >> 3] = HEAPF64[$0 + 40 >> 3];
  HEAPF64[$1 + 56 >> 3] = HEAPF64[$0 + 48 >> 3];
  HEAPF64[$1 + 64 >> 3] = HEAPF64[$0 + 56 >> 3];
  HEAPF64[$1 + 72 >> 3] = HEAPF64[$0 - -64 >> 3];
  HEAPF64[$1 + 80 >> 3] = HEAPF64[$0 + 72 >> 3];
  HEAPF64[$1 + 88 >> 3] = HEAPF64[$0 + 80 >> 3];
  HEAPF64[$1 + 96 >> 3] = HEAPF64[$0 + 88 >> 3];
  HEAPF64[$1 + 104 >> 3] = HEAPF64[$0 + 96 >> 3];
  HEAPF64[$1 + 112 >> 3] = HEAPF64[$0 + 104 >> 3];
  HEAPF64[$1 + 120 >> 3] = HEAPF64[$0 + 112 >> 3];
  HEAPF64[$1 + 128 >> 3] = HEAPF64[$0 + 120 >> 3];
  HEAPF64[$1 + 136 >> 3] = HEAPF64[$0 + 128 >> 3];
  HEAPF64[$1 + 144 >> 3] = HEAPF64[$0 + 136 >> 3];
  HEAPF64[$1 + 152 >> 3] = HEAPF64[$0 + 144 >> 3];
  HEAPF64[$1 + 160 >> 3] = HEAPF64[$0 + 152 >> 3];
  HEAPF64[$1 + 168 >> 3] = HEAPF64[$0 + 160 >> 3];
  HEAPF64[$1 + 176 >> 3] = HEAPF64[$0 + 168 >> 3];
  HEAPF64[$1 + 184 >> 3] = HEAPF64[$0 + 176 >> 3];
  HEAPF64[$1 + 192 >> 3] = HEAPF64[$0 + 184 >> 3];
  HEAPF64[$1 + 200 >> 3] = HEAPF64[$0 + 192 >> 3];
  HEAPF64[$1 + 208 >> 3] = HEAPF64[$0 + 200 >> 3];
  HEAPF64[$1 + 216 >> 3] = HEAPF64[$0 + 208 >> 3];
  HEAPF64[$1 + 224 >> 3] = HEAPF64[$0 + 216 >> 3];
  HEAPF64[$1 + 232 >> 3] = HEAPF64[$0 + 224 >> 3];
  HEAPF64[$1 + 240 >> 3] = HEAPF64[$0 + 232 >> 3];
  HEAPF64[$1 + 248 >> 3] = HEAPF64[$0 + 240 >> 3];
  HEAPF64[$1 + 256 >> 3] = HEAPF64[$0 + 248 >> 3];
  HEAPF64[$1 + 264 >> 3] = HEAPF64[$0 + 256 >> 3];
  HEAPF64[$1 + 272 >> 3] = HEAPF64[$0 + 264 >> 3];
  HEAPF64[$1 + 280 >> 3] = HEAPF64[$0 + 272 >> 3];
  HEAPF64[$1 + 288 >> 3] = HEAPF64[$0 + 280 >> 3];
  HEAPF64[$1 + 296 >> 3] = HEAPF64[$0 + 288 >> 3];
  HEAPF64[$1 + 304 >> 3] = HEAPF64[$0 + 296 >> 3];
  HEAPF64[$1 + 312 >> 3] = HEAPF64[$0 + 304 >> 3];
  HEAPF64[$1 + 320 >> 3] = HEAPF64[$0 + 312 >> 3];
  HEAPF64[$1 + 328 >> 3] = HEAPF64[$0 + 320 >> 3];
  HEAPF64[$1 + 336 >> 3] = HEAPF64[$0 + 328 >> 3];
  HEAPF64[$1 + 344 >> 3] = HEAPF64[$0 + 336 >> 3];
  HEAPF64[$1 + 352 >> 3] = HEAPF64[$0 + 344 >> 3];
  HEAPF64[$1 + 360 >> 3] = HEAPF64[$0 + 352 >> 3];
  HEAP32[$1 + 448 >> 2] = HEAP32[$0 + 360 >> 2];
  HEAPF64[$1 + 368 >> 3] = HEAPF64[$0 + 368 >> 3];
  HEAP32[$1 >> 2] = 0;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 380 >> 2]) | 0;
  $4 = HEAP32[$0 + 400 >> 2];
  HEAP32[$1 + 456 >> 2] = HEAP32[$0 + 396 >> 2];
  HEAP32[$1 + 460 >> 2] = $4;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$1 + 452 >> 2] = HEAP32[$0 + 392 >> 2];
  HEAP32[$1 + 464 >> 2] = HEAP32[$0 + 408 >> 2];
  HEAPF64[$1 + 376 >> 3] = HEAPF64[$0 + 416 >> 3];
  HEAPF64[$1 + 384 >> 3] = HEAPF64[$0 + 424 >> 3];
  HEAPF64[$1 + 392 >> 3] = HEAPF64[$0 + 440 >> 3];
  HEAPF64[$1 + 400 >> 3] = HEAPF64[$0 + 456 >> 3];
  HEAPF64[$1 + 408 >> 3] = HEAPF64[$0 + 464 >> 3];
  HEAPF64[$1 + 416 >> 3] = HEAPF64[$0 + 432 >> 3];
  HEAP32[$1 + 468 >> 2] = HEAP32[$0 + 472 >> 2];
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0;
  HEAP32[$1 + 12 >> 2] = $4;
  if ($4) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $3)
  }
  HEAPF64[$1 + 424 >> 3] = HEAPF64[$0 + 488 >> 3];
  $2 = HEAP32[$0 + 512 >> 2];
  $5 = HEAPF64[$0 + 504 >> 3];
  $6 = HEAPF64[$0 + 496 >> 3];
  HEAP32[$1 + 476 >> 2] = 0;
  HEAPF64[$1 + 432 >> 3] = $6;
  HEAPF64[$1 + 440 >> 3] = $5;
  HEAP32[$1 + 472 >> 2] = $2;
  return 3992;
 }
 
 function btCollisionObject__serializeSingleObject_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1245859651), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function btCollisionObject__setCollisionShape_28btCollisionShape__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 388 >> 2] = $1;
  HEAP32[$0 + 380 >> 2] = $1;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
 }
 
 function btCollisionObject__checkCollideWithOverride_28btCollisionObject_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $3 = HEAP32[$0 + 520 >> 2];
  $2 = $3;
  label$1 : {
   if (($3 | 0) <= 0) {
    break label$1
   }
   $0 = HEAP32[$0 + 528 >> 2];
   $2 = 0;
   while (1) {
    if (HEAP32[$0 >> 2] == ($1 | 0)) {
     break label$1
    }
    $0 = $0 + 4 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
   $2 = $3;
  }
  return ($2 | 0) >= ($3 | 0) | 0;
 }
 
 function btCollisionObject__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 480;
 }
 
 function btBoxShape__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0;
  $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  HEAPF64[$0 + 80 >> 3] = $1;
  $2 = $0 - -64 | 0;
  $1 = HEAPF64[$2 >> 3];
  $3 = $0 + 56 | 0;
  $8 = HEAPF64[$3 >> 3];
  $9 = HEAPF64[$0 + 48 >> 3];
  $10 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $11 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $12 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $4 = $0 + 72 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAPF64[$3 >> 3] = $6 + $8 - $11;
  HEAPF64[$0 + 48 >> 3] = $5 + $9 - $10;
  HEAPF64[$2 >> 3] = $7 + $1 - $12;
 }
 
 function btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0;
  $4 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $9 = HEAPF64[$1 + 104 >> 3];
  $7 = HEAPF64[$1 + 40 >> 3];
  $12 = HEAPF64[$1 + 48 >> 3];
  $10 = HEAPF64[$1 + 112 >> 3];
  $8 = HEAPF64[$1 + 72 >> 3];
  $13 = HEAPF64[$0 + 56 >> 3];
  $5 = HEAPF64[$1 + 80 >> 3];
  $6 = HEAPF64[$0 - -64 >> 3];
  $11 = HEAPF64[$1 + 96 >> 3];
  $14 = HEAPF64[$1 >> 3];
  $15 = HEAPF64[$1 + 8 >> 3];
  $16 = HEAPF64[$1 + 16 >> 3];
  $17 = HEAPF64[$1 + 32 >> 3];
  $18 = HEAPF64[$1 + 64 >> 3];
  $19 = HEAPF64[$0 + 48 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $6 = $4 + $6;
  $20 = $6 * Math_abs($5);
  $5 = $4 + $19;
  $4 = $4 + $13;
  $8 = $20 + ($5 * Math_abs($18) + $4 * Math_abs($8));
  HEAPF64[$2 + 16 >> 3] = $10 - $8;
  $7 = $6 * Math_abs($12) + ($5 * Math_abs($17) + $4 * Math_abs($7));
  HEAPF64[$2 + 8 >> 3] = $9 - $7;
  $4 = $6 * Math_abs($16) + ($5 * Math_abs($14) + $4 * Math_abs($15));
  HEAPF64[$2 >> 3] = $11 - $4;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $10 + $8;
  HEAPF64[$3 + 8 >> 3] = $7 + $9;
  HEAPF64[$3 >> 3] = $4 + $11;
 }
 
 function btBoxShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $3 = HEAPF64[$0 - -64 >> 3];
  $4 = HEAPF64[$0 + 56 >> 3];
  $5 = HEAPF64[$0 + 48 >> 3];
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $1 = $1 / 12.0;
  $5 = $5 + $6;
  $5 = $5 + $5;
  $5 = $5 * $5;
  $4 = $4 + $7;
  $4 = $4 + $4;
  $4 = $4 * $4;
  HEAPF64[$2 + 16 >> 3] = $1 * ($5 + $4);
  $3 = $3 + $8;
  $3 = $3 + $3;
  $3 = $3 * $3;
  HEAPF64[$2 + 8 >> 3] = $1 * ($5 + $3);
  HEAPF64[$2 >> 3] = $1 * ($4 + $3);
 }
 
 function btBoxShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0;
  $2 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $3 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $4 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $5 = $0 + 24 | 0;
  $9 = HEAPF64[$5 >> 3];
  $6 = $0 + 56 | 0;
  $10 = HEAPF64[$6 >> 3];
  $7 = $0 + 32 | 0;
  $11 = HEAPF64[$7 >> 3];
  $8 = $0 - -64 | 0;
  $12 = HEAPF64[$8 >> 3];
  $13 = HEAPF64[$0 + 16 >> 3];
  $14 = HEAPF64[$0 + 48 >> 3];
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF64[$8 >> 3] = ($4 + $12) / $11 * HEAPF64[$7 >> 3] - $4;
  HEAPF64[$6 >> 3] = ($3 + $10) / $9 * HEAPF64[$5 >> 3] - $3;
  HEAPF64[$0 + 48 >> 3] = ($2 + $14) / $13 * HEAPF64[$0 + 16 >> 3] - $2;
 }
 
 function btBoxShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 2746;
 }
 
 function btBoxShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $3 = HEAPF64[$1 + 56 >> 3];
  $4 = HEAPF64[$1 - -64 >> 3];
  $5 = HEAPF64[$1 + 48 >> 3];
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
  $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
  $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  $4 = $4 + $8;
  HEAPF64[$0 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] >= 0.0 ? $4 : -$4;
  $3 = $3 + $7;
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] >= 0.0 ? $3 : -$3;
  $3 = $5 + $6;
  HEAPF64[$0 >> 3] = HEAPF64[$2 >> 3] >= 0.0 ? $3 : -$3;
 }
 
 function btBoxShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  $3 = HEAPF64[$1 + 48 >> 3];
  HEAPF64[$0 >> 3] = HEAPF64[$2 >> 3] >= 0.0 ? $3 : -$3;
  $3 = HEAPF64[$1 - -64 >> 3];
  HEAPF64[$0 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] >= 0.0 ? $3 : -$3;
  $3 = HEAPF64[$1 + 56 >> 3];
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] >= 0.0 ? $3 : -$3;
 }
 
 function btBoxShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0;
  if (($3 | 0) > 0) {
   while (1) {
    $4 = $1 + $5 | 0;
    $10 = HEAPF64[$4 + 8 >> 3];
    $11 = HEAPF64[$4 + 16 >> 3];
    $12 = HEAPF64[$4 >> 3];
    $6 = HEAPF64[$0 + 56 >> 3];
    $7 = HEAPF64[$0 + 64 >> 3];
    $8 = HEAPF64[$0 + 48 >> 3];
    $4 = $2 + $5 | 0;
    $9 = $4 + 24 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    HEAPF64[$4 >> 3] = $12 >= 0.0 ? $8 : -$8;
    HEAPF64[$4 + 16 >> 3] = $11 >= 0.0 ? $7 : -$7;
    HEAPF64[$4 + 8 >> 3] = $10 >= 0.0 ? $6 : -$6;
    $5 = $5 + 32 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btBoxShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
  $0 = $0 | 0;
  return 6;
 }
 
 function btBoxShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  folding_inner2 : {
   folding_inner1 : {
    folding_inner0 : {
     label$1 : {
      switch ($1 | 0) {
      case 0:
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 + 12 >> 2] = 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 1072693248;
       break folding_inner0;
      case 1:
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 + 12 >> 2] = 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = -1074790400;
       break folding_inner0;
      case 2:
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 20 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 + 12 >> 2] = 1072693248;
       break folding_inner1;
      case 3:
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 20 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 + 12 >> 2] = -1074790400;
       break folding_inner1;
      case 4:
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 24 >> 2] = 0;
       HEAP32[$2 + 28 >> 2] = 0;
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 20 >> 2] = 1072693248;
       $0 = $2 + 8 | 0;
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       return;
      case 5:
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 24 >> 2] = 0;
       HEAP32[$2 + 28 >> 2] = 0;
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 20 >> 2] = -1074790400;
       $0 = $2 + 8 | 0;
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       break;
      default:
       break label$1;
      };
     }
     return;
    }
    $0 = $2 + 16 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    break folding_inner2;
   }
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
  }
  $0 = $2 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btBoxShape__getNumVertices_28_29_20const($0) {
  $0 = $0 | 0;
  return 8;
 }
 
 function btBoxShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  if ($1 >>> 0 <= 11) {
   $1 = $1 << 2;
   $4 = HEAP32[$1 + 8060 >> 2];
   $1 = HEAP32[$1 + 8012 >> 2];
  } else {
   $1 = $4
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $1, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $4, $3);
 }
 
 function btBoxShape__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $4 = HEAPF64[$0 - -64 >> 3];
  $3 = HEAPF64[$0 + 56 >> 3];
  $5 = HEAPF64[$0 + 48 >> 3];
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $3 = $3 + $7;
  $0 = $1 >>> 1 & 1;
  HEAPF64[$2 + 8 >> 3] = $3 * +(!$0 | 0) - +($0 | 0) * $3;
  $3 = $5 + $6;
  $0 = $1 & 1;
  HEAPF64[$2 >> 3] = $3 * +(!$0 | 0) - +($0 | 0) * $3;
  $4 = $4 + $8;
  $0 = $1 >>> 2 & 1;
  HEAPF64[$2 + 16 >> 3] = $4 * +(!$0 | 0) - +($0 | 0) * $4;
 }
 
 function btBoxShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $4 - -64 | 0, $3);
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
  $6 = HEAPF64[$4 + 80 >> 3];
  HEAPF64[$1 + 16 >> 3] = $6;
  $7 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$1 + 8 >> 3] = $7;
  $8 = HEAPF64[$4 + 64 >> 3];
  HEAPF64[$1 >> 3] = $8;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = -$6;
  HEAPF64[$4 + 8 >> 3] = -$7;
  HEAPF64[$4 >> 3] = -$8;
  $5 = $4 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($5, $0, $4);
  $1 = $5 + 24 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $0 = $2 + 24 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  $1 = $5 + 16 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $0 = $2 + 16 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  $1 = $5 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $0 = $2 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  $0 = HEAP32[$4 + 36 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
  __stack_pointer = $4 + 96 | 0;
 }
 
 function btBoxShape__isInside_28btVector3_20const__2c_20double_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0.0, $4 = 0.0, $5 = 0;
  $3 = HEAPF64[$1 >> 3];
  $4 = HEAPF64[$0 + 48 >> 3];
  label$1 : {
   if (!($3 <= $4 + $2) | !($3 >= -$4 - $2)) {
    break label$1
   }
   $3 = HEAPF64[$1 + 8 >> 3];
   $4 = HEAPF64[$0 + 56 >> 3];
   if (!($3 <= $4 + $2) | !($3 >= -$4 - $2)) {
    break label$1
   }
   $3 = HEAPF64[$1 + 16 >> 3];
   $4 = HEAPF64[$0 - -64 >> 3];
   if (!($3 <= $4 + $2)) {
    break label$1
   }
   $5 = $3 >= -$4 - $2;
  }
  return $5 | 0;
 }
 
 function btBoxShape__getPlaneEquation_28btVector4__2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $3 = HEAPF64[$0 - -64 >> 3];
  $4 = HEAPF64[$0 + 56 >> 3];
  $5 = HEAPF64[$0 + 48 >> 3];
  folding_inner1 : {
   folding_inner0 : {
    label$1 : {
     switch ($2 | 0) {
     case 0:
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 1072693248;
      break folding_inner0;
     case 1:
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = -1074790400;
      break folding_inner0;
     case 2:
      HEAP32[$1 + 16 >> 2] = 0;
      HEAP32[$1 + 20 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = 1072693248;
      break folding_inner1;
     case 3:
      HEAP32[$1 + 16 >> 2] = 0;
      HEAP32[$1 + 20 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = -1074790400;
      break folding_inner1;
     case 4:
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 16 >> 2] = 0;
      HEAP32[$1 + 20 >> 2] = 1072693248;
      $0 = $1 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAPF64[$1 + 24 >> 3] = -$3;
      return;
     case 5:
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 16 >> 2] = 0;
      HEAP32[$1 + 20 >> 2] = -1074790400;
      $0 = $1 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAPF64[$1 + 24 >> 3] = -$3;
      break;
     default:
      break label$1;
     };
    }
    return;
   }
   $0 = $1 + 16 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$1 + 24 >> 3] = -$5;
   return;
  }
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF64[$1 + 24 >> 3] = -$4;
 }
 
 function btCapsuleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $5 = $0 + 24 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $0 + 16 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $0 + 8 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $4 = HEAPF64[$2 + 16 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $6 = HEAPF64[$2 + 8 >> 3];
  $8 = $4 * $4 + ($7 * $7 + $6 * $6);
  label$1 : {
   if ($8 < .0001) {
    $8 = 1.0;
    $6 = 0.0;
    break label$1;
   }
   $9 = $4;
   $4 = 1.0 / Math_sqrt($8);
   $11 = $9 * $4;
   $8 = $7 * $4;
   $6 = $6 * $4;
  }
  $2 = $3 + 24 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $3 + 16 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $5 = $3 + 8 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $12 = HEAP32[$1 + 96 >> 2] << 3;
  $13 = $3 + $12 | 0;
  $9 = HEAPF64[($1 + $12 | 0) + 48 >> 3];
  HEAPF64[$13 >> 3] = $9;
  $4 = -1.e+30;
  $10 = HEAPF64[$2 >> 3];
  $14 = HEAPF64[$3 >> 3];
  $15 = HEAPF64[$5 >> 3];
  $7 = $11 * $10 + ($8 * $14 + $6 * $15);
  if ($7 > -1.e+30) {
   HEAPF64[$0 + 24 >> 3] = HEAPF64[$3 + 24 >> 3];
   HEAPF64[$0 + 16 >> 3] = $10;
   HEAPF64[$0 + 8 >> 3] = $15;
   HEAPF64[$0 >> 3] = $14;
   $4 = $7;
  }
  $1 = $3 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $2 = $3 + 8 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAPF64[$13 >> 3] = -$9;
  $9 = $4;
  $4 = HEAPF64[$1 >> 3];
  $7 = HEAPF64[$3 >> 3];
  $10 = $6;
  $6 = HEAPF64[$2 >> 3];
  if ($9 < $11 * $4 + ($8 * $7 + $10 * $6)) {
   HEAPF64[$0 + 24 >> 3] = HEAPF64[$3 + 24 >> 3];
   HEAPF64[$0 + 16 >> 3] = $4;
   HEAPF64[$0 + 8 >> 3] = $6;
   HEAPF64[$0 >> 3] = $7;
  }
 }
 
 function btCapsuleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0;
  $4 = __stack_pointer - 32 | 0;
  if (($3 | 0) > 0) {
   $12 = $4 + 24 | 0;
   while (1) {
    HEAP32[$12 >> 2] = 0;
    HEAP32[$12 + 4 >> 2] = 0;
    $5 = $4 + 16 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    $8 = $4 + 8 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $6 = HEAP32[$0 + 96 >> 2];
    $7 = $6 << 3;
    $9 = HEAPF64[($7 + $0 | 0) + 48 >> 3];
    HEAPF64[$4 + $7 >> 3] = $9;
    $10 = -1.e+30;
    $7 = $1 + $13 | 0;
    $18 = $7 + 16 | 0;
    $15 = HEAPF64[$18 >> 3];
    $14 = HEAPF64[$5 >> 3];
    $16 = HEAPF64[$7 >> 3];
    $19 = HEAPF64[$4 >> 3];
    $20 = HEAPF64[$8 >> 3];
    $21 = $7 + 8 | 0;
    $17 = HEAPF64[$21 >> 3];
    $11 = $15 * $14 + ($16 * $19 + $20 * $17);
    if ($11 > -1.e+30) {
     $6 = $2 + $13 | 0;
     HEAPF64[$6 >> 3] = $19;
     HEAPF64[$6 + 24 >> 3] = HEAPF64[$4 + 24 >> 3];
     HEAPF64[$6 + 16 >> 3] = $14;
     HEAPF64[$6 + 8 >> 3] = $20;
     $15 = HEAPF64[$18 >> 3];
     $17 = HEAPF64[$21 >> 3];
     $6 = HEAP32[$0 + 96 >> 2];
     $9 = HEAPF64[(($6 << 3) + $0 | 0) + 48 >> 3];
     $16 = HEAPF64[$7 >> 3];
     $10 = $11;
    }
    HEAP32[$12 >> 2] = 0;
    HEAP32[$12 + 4 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAPF64[$4 + ($6 << 3) >> 3] = -$9;
    $14 = $10;
    $10 = HEAPF64[$5 >> 3];
    $11 = HEAPF64[$4 >> 3];
    $9 = HEAPF64[$8 >> 3];
    if ($14 < $15 * $10 + ($16 * $11 + $9 * $17)) {
     $5 = $2 + $13 | 0;
     HEAPF64[$5 >> 3] = $11;
     HEAPF64[$5 + 24 >> 3] = HEAPF64[$4 + 24 >> 3];
     HEAPF64[$5 + 16 >> 3] = $10;
     HEAPF64[$5 + 8 >> 3] = $9;
    }
    $13 = $13 + 32 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
 }
 
 function btCapsuleShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
  $6 = $0 + 48 | 0;
  $5 = HEAP32[$0 + 96 >> 2];
  $3 = HEAPF64[$6 + (($5 + 2 | 0) % 3 << 3) >> 3];
  $0 = __stack_pointer - 32 | 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF64[$0 + 16 >> 3] = $3;
  HEAPF64[$0 + 8 >> 3] = $3;
  HEAPF64[$0 >> 3] = $3;
  $5 = $5 << 3;
  $7 = $5 + $0 | 0;
  HEAPF64[$7 >> 3] = HEAPF64[$5 + $6 >> 3] + HEAPF64[$7 >> 3];
  $1 = $1 * .08333333;
  $3 = HEAPF64[$0 >> 3];
  $3 = $3 + $3;
  $3 = $3 * $3;
  $4 = HEAPF64[$0 + 8 >> 3];
  $4 = $4 + $4;
  $4 = $4 * $4;
  HEAPF64[$2 + 16 >> 3] = $1 * ($3 + $4);
  $8 = $3;
  $3 = HEAPF64[$0 + 16 >> 3];
  $3 = $3 + $3;
  $3 = $3 * $3;
  HEAPF64[$2 + 8 >> 3] = $1 * ($8 + $3);
  HEAPF64[$2 >> 3] = $1 * ($4 + $3);
 }
 
 function btCapsuleShape___btCapsuleShape_28_29($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btCapsuleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0;
  $4 = __stack_pointer - 32 | 0;
  $11 = $0 + 48 | 0;
  $0 = HEAP32[$0 + 96 >> 2];
  $5 = HEAPF64[$11 + (($0 + 2 | 0) % 3 << 3) >> 3];
  HEAPF64[$4 + 16 >> 3] = $5;
  HEAPF64[$4 + 8 >> 3] = $5;
  HEAPF64[$4 >> 3] = $5;
  $0 = $0 << 3;
  HEAPF64[$0 + $4 >> 3] = $5 + HEAPF64[$0 + $11 >> 3];
  $5 = HEAPF64[$1 + 112 >> 3];
  $14 = HEAPF64[$1 + 80 >> 3];
  $15 = HEAPF64[$1 + 72 >> 3];
  $12 = HEAPF64[$1 + 104 >> 3];
  $9 = HEAPF64[$1 + 48 >> 3];
  $16 = HEAPF64[$1 + 40 >> 3];
  $17 = HEAPF64[$1 + 64 >> 3];
  $18 = HEAPF64[$1 + 32 >> 3];
  $13 = HEAPF64[$1 + 96 >> 3];
  $7 = HEAPF64[$1 + 16 >> 3];
  $8 = HEAPF64[$1 >> 3];
  $10 = HEAPF64[$1 + 8 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $6 = HEAPF64[$4 + 16 >> 3];
  $19 = $6 * Math_abs($7);
  $7 = HEAPF64[$4 >> 3];
  $20 = $7 * Math_abs($8);
  $8 = HEAPF64[$4 + 8 >> 3];
  $10 = $19 + ($20 + Math_abs($10) * $8);
  HEAPF64[$2 >> 3] = $13 - $10;
  $9 = $6 * Math_abs($9) + ($7 * Math_abs($18) + $8 * Math_abs($16));
  HEAPF64[$2 + 8 >> 3] = $12 - $9;
  $6 = $6 * Math_abs($14) + ($7 * Math_abs($17) + $8 * Math_abs($15));
  HEAPF64[$2 + 16 >> 3] = $5 - $6;
  HEAPF64[$3 >> 3] = $13 + $10;
  HEAPF64[$3 + 8 >> 3] = $12 + $9;
  HEAPF64[$3 + 16 >> 3] = $5 + $6;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
 }
 
 function btCapsuleShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0;
  $4 = HEAPF64[$0 + 24 >> 3];
  $2 = $0 + 56 | 0;
  $5 = HEAPF64[$2 >> 3];
  $6 = HEAPF64[$0 + 32 >> 3];
  $3 = $0 - -64 | 0;
  $7 = HEAPF64[$3 >> 3];
  $8 = HEAPF64[$0 + 16 >> 3];
  $9 = HEAPF64[$0 + 48 >> 3];
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
  $10 = HEAPF64[$1 >> 3];
  $11 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$3 >> 3] = $7 / $6 * HEAPF64[$1 + 16 >> 3];
  HEAPF64[$2 >> 3] = $11 * ($5 / $4);
  HEAPF64[$0 + 48 >> 3] = $10 * ($9 / $8);
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF64[$0 + 80 >> 3] = HEAPF64[($0 + 48 | 0) + ((HEAP32[$0 + 96 >> 2] + 2 | 0) % 3 << 3) >> 3];
 }
 
 function btCapsuleShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 3535;
 }
 
 function btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $2 = $0 + 24 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 16 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 8 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $0 = (HEAP32[$1 + 96 >> 2] << 3) + $0 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
 }
 
 function btCapsuleShape__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
 }
 
 function btCapsuleShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 60;
 }
 
 function btCapsuleShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 48 >> 2] = 0;
  HEAPF32[$1 + 28 >> 2] = HEAPF64[$0 + 48 >> 3];
  HEAPF32[$1 + 32 >> 2] = HEAPF64[$0 + 56 >> 3];
  HEAPF32[$1 + 36 >> 2] = HEAPF64[$0 - -64 >> 3];
  HEAPF32[$1 + 40 >> 2] = HEAPF64[$0 + 72 >> 3];
  HEAPF32[$1 + 12 >> 2] = HEAPF64[$0 + 16 >> 3];
  HEAPF32[$1 + 16 >> 2] = HEAPF64[$0 + 24 >> 3];
  HEAPF32[$1 + 20 >> 2] = HEAPF64[$0 + 32 >> 3];
  HEAPF32[$1 + 24 >> 2] = HEAPF64[$0 + 40 >> 3];
  HEAPF32[$1 + 44 >> 2] = HEAPF64[$0 + 80 >> 3];
  HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 96 >> 2];
  HEAP32[$1 + 56 >> 2] = 0;
  return 3903;
 }
 
 function btCapsuleShapeX__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4241;
 }
 
 function btCapsuleShapeZ__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4206;
 }
 
 function btCylinderShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  $5 = HEAPF64[$0 - -64 >> 3];
  $3 = HEAPF64[$0 + 56 >> 3];
  $8 = HEAPF64[$0 + 48 >> 3];
  $9 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $3 = $3 + +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $10 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $4 = $1 * .5;
  $6 = $1 * .25;
  $7 = $1 / 12.0;
  $1 = $9 + $8;
  label$1 : {
   label$2 : {
    switch (HEAP32[$0 + 96 >> 2]) {
    case 0:
     $5 = $4;
     $4 = $3 * $3;
     $3 = $5 * $4;
     $1 = $7 * ($1 * ($1 * 4.0)) + $6 * $4;
     $4 = $1;
     break label$1;
    case 2:
     $1 = $1 * $1;
     $4 = $4 * $1;
     $3 = $10 + $5;
     $3 = $7 * ($3 * ($3 * 4.0)) + $6 * $1;
     $1 = $3;
     break label$1;
    default:
     break label$2;
    };
   }
   $5 = $4;
   $4 = $1 * $1;
   $1 = $5 * $4;
   $3 = $7 * ($3 * ($3 * 4.0)) + $6 * $4;
   $4 = $3;
  }
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = $4;
  HEAPF64[$2 + 8 >> 3] = $1;
  HEAPF64[$2 >> 3] = $3;
 }
 
 function btCylinderShapeX__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $4 = HEAPF64[$1 + 56 >> 3];
  $3 = HEAPF64[$1 + 48 >> 3];
  $5 = HEAPF64[$2 + 8 >> 3];
  $6 = HEAPF64[$2 + 16 >> 3];
  $7 = Math_sqrt($5 * $5 + $6 * $6);
  label$1 : {
   if ($7 != 0.0) {
    $4 = $4 / $7;
    $8 = $6 * $4;
    $4 = $5 * $4;
    $3 = HEAPF64[$2 >> 3] < 0.0 ? -$3 : $3;
    break label$1;
   }
   $3 = HEAPF64[$2 >> 3] < 0.0 ? -$3 : $3;
  }
  HEAPF64[$0 + 16 >> 3] = $8;
  HEAPF64[$0 >> 3] = $3;
  HEAPF64[$0 + 8 >> 3] = $4;
 }
 
 function btCylinderShapeZ__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $3 = HEAPF64[$1 - -64 >> 3];
  $4 = HEAPF64[$1 + 48 >> 3];
  $5 = HEAPF64[$2 >> 3];
  $6 = HEAPF64[$2 + 8 >> 3];
  $7 = Math_sqrt($5 * $5 + $6 * $6);
  label$1 : {
   if ($7 != 0.0) {
    $4 = $4 / $7;
    $8 = $6 * $4;
    $4 = $5 * $4;
    $3 = HEAPF64[$2 + 16 >> 3] < 0.0 ? -$3 : $3;
    break label$1;
   }
   $3 = HEAPF64[$2 + 16 >> 3] < 0.0 ? -$3 : $3;
  }
  HEAPF64[$0 + 16 >> 3] = $3;
  HEAPF64[$0 >> 3] = $4;
  HEAPF64[$0 + 8 >> 3] = $8;
 }
 
 function btCylinderShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $3 = HEAPF64[$1 + 56 >> 3];
  $4 = HEAPF64[$1 + 48 >> 3];
  $5 = HEAPF64[$2 >> 3];
  $6 = HEAPF64[$2 + 16 >> 3];
  $7 = Math_sqrt($5 * $5 + $6 * $6);
  label$1 : {
   if ($7 != 0.0) {
    $4 = $4 / $7;
    $8 = $6 * $4;
    $4 = $5 * $4;
    $3 = HEAPF64[$2 + 8 >> 3] < 0.0 ? -$3 : $3;
    break label$1;
   }
   $3 = HEAPF64[$2 + 8 >> 3] < 0.0 ? -$3 : $3;
  }
  HEAPF64[$0 + 16 >> 3] = $8;
  HEAPF64[$0 + 8 >> 3] = $3;
  HEAPF64[$0 >> 3] = $4;
 }
 
 function btCylinderShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  if (($3 | 0) > 0) {
   while (1) {
    $4 = HEAPF64[$0 + 56 >> 3];
    $5 = HEAPF64[$0 + 48 >> 3];
    $7 = HEAPF64[$1 >> 3];
    $6 = HEAPF64[$1 + 16 >> 3];
    $8 = Math_sqrt($7 * $7 + $6 * $6);
    label$3 : {
     if ($8 != 0.0) {
      $5 = $5 / $8;
      $6 = $6 * $5;
      $5 = $7 * $5;
      $4 = HEAPF64[$1 + 8 >> 3] < 0.0 ? -$4 : $4;
      break label$3;
     }
     $6 = 0.0;
     $4 = HEAPF64[$1 + 8 >> 3] < 0.0 ? -$4 : $4;
    }
    HEAPF64[$2 >> 3] = $5;
    HEAPF64[$2 + 16 >> 3] = $6;
    HEAPF64[$2 + 8 >> 3] = $4;
    $2 = $2 + 32 | 0;
    $1 = $1 + 32 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btCylinderShapeZ__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  if (($3 | 0) > 0) {
   while (1) {
    $4 = HEAPF64[$0 + 64 >> 3];
    $5 = HEAPF64[$0 + 48 >> 3];
    $7 = HEAPF64[$1 >> 3];
    $6 = HEAPF64[$1 + 8 >> 3];
    $8 = Math_sqrt($7 * $7 + $6 * $6);
    label$3 : {
     if ($8 != 0.0) {
      $5 = $5 / $8;
      $6 = $6 * $5;
      $5 = $7 * $5;
      $4 = HEAPF64[$1 + 16 >> 3] < 0.0 ? -$4 : $4;
      break label$3;
     }
     $6 = 0.0;
     $4 = HEAPF64[$1 + 16 >> 3] < 0.0 ? -$4 : $4;
    }
    HEAPF64[$2 >> 3] = $5;
    HEAPF64[$2 + 16 >> 3] = $4;
    HEAPF64[$2 + 8 >> 3] = $6;
    $2 = $2 + 32 | 0;
    $1 = $1 + 32 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btCylinderShapeX__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  if (($3 | 0) > 0) {
   while (1) {
    $4 = HEAPF64[$0 + 48 >> 3];
    $5 = HEAPF64[$0 + 56 >> 3];
    $7 = HEAPF64[$1 + 8 >> 3];
    $6 = HEAPF64[$1 + 16 >> 3];
    $8 = Math_sqrt($7 * $7 + $6 * $6);
    label$3 : {
     if ($8 != 0.0) {
      $5 = $5 / $8;
      $6 = $6 * $5;
      $5 = $7 * $5;
      $4 = HEAPF64[$1 >> 3] < 0.0 ? -$4 : $4;
      break label$3;
     }
     $6 = 0.0;
     $4 = HEAPF64[$1 >> 3] < 0.0 ? -$4 : $4;
    }
    HEAPF64[$2 >> 3] = $4;
    HEAPF64[$2 + 16 >> 3] = $6;
    HEAPF64[$2 + 8 >> 3] = $5;
    $2 = $2 + 32 | 0;
    $1 = $1 + 32 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btCylinderShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4215;
 }
 
 function btCylinderShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 48 >> 2] = 0;
  HEAPF32[$1 + 28 >> 2] = HEAPF64[$0 + 48 >> 3];
  HEAPF32[$1 + 32 >> 2] = HEAPF64[$0 + 56 >> 3];
  HEAPF32[$1 + 36 >> 2] = HEAPF64[$0 - -64 >> 3];
  HEAPF32[$1 + 40 >> 2] = HEAPF64[$0 + 72 >> 3];
  HEAPF32[$1 + 12 >> 2] = HEAPF64[$0 + 16 >> 3];
  HEAPF32[$1 + 16 >> 2] = HEAPF64[$0 + 24 >> 3];
  HEAPF32[$1 + 20 >> 2] = HEAPF64[$0 + 32 >> 3];
  HEAPF32[$1 + 24 >> 2] = HEAPF64[$0 + 40 >> 3];
  HEAPF32[$1 + 44 >> 2] = HEAPF64[$0 + 80 >> 3];
  HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 96 >> 2];
  HEAP32[$1 + 56 >> 2] = 0;
  return 3750;
 }
 
 function btCylinderShape__getRadius_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0.0, $2 = 0.0;
  $1 = HEAPF64[$0 + 48 >> 3];
  $2 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  return +($1 + $2);
 }
 
 function btCylinderShapeX__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4225;
 }
 
 function btCylinderShapeX__getRadius_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0.0, $2 = 0.0;
  $1 = HEAPF64[$0 + 56 >> 3];
  +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $2 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  return +($1 + $2);
 }
 
 function btCylinderShapeZ__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4190;
 }
 
 function btSphereShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btSphereShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (($3 | 0) > 0) {
   memset($2, 0, $3 << 5)
  }
 }
 
 function btSphereShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
  $4 = HEAPF64[$2 + 8 >> 3];
  $3 = HEAPF64[$2 >> 3];
  $5 = HEAPF64[$2 + 16 >> 3];
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
  $1 = $5 * $5 + ($3 * $3 + $4 * $4) < 4.930380657631324e-32;
  $3 = $1 ? -1.0 : $3;
  $7 = $3;
  $5 = $1 ? -1.0 : $5;
  $4 = $1 ? -1.0 : $4;
  $3 = 1.0 / Math_sqrt($5 * $5 + ($3 * $3 + $4 * $4));
  HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + $6 * ($7 * $3);
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + $6 * ($4 * $3);
  HEAPF64[$0 + 16 >> 3] = HEAPF64[$0 + 16 >> 3] + $6 * ($5 * $3);
 }
 
 function btSphereShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0;
  $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $9 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $0 = $1 + 104 | 0;
  $4 = HEAPF64[$0 >> 3];
  $10 = $1 + 112 | 0;
  $5 = HEAPF64[$10 >> 3];
  $6 = HEAPF64[$1 + 96 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = $5 - $9;
  HEAPF64[$2 + 8 >> 3] = $4 - $8;
  HEAPF64[$2 >> 3] = $6 - $7;
  $4 = HEAPF64[$0 >> 3];
  $5 = HEAPF64[$10 >> 3];
  $6 = HEAPF64[$1 + 96 >> 3];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $9 + $5;
  HEAPF64[$3 + 8 >> 3] = $8 + $4;
  HEAPF64[$3 >> 3] = $7 + $6;
 }
 
 function btSphereShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0;
  $3 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $4 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $1 = $4 * ($3 * ($1 * .4));
  HEAPF64[$2 + 16 >> 3] = $1;
  HEAPF64[$2 + 8 >> 3] = $1;
  HEAPF64[$2 >> 3] = $1;
 }
 
 function btSphereShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4274;
 }
 
 function btSphereShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return +(HEAPF64[$0 + 48 >> 3] * HEAPF64[$0 + 16 >> 3]);
 }
 
 function btConeShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0;
  $4 = HEAPF64[$1 + 112 >> 3] * .5;
  $6 = HEAP32[$1 + 120 >> 2];
  $8 = HEAP32[$1 + 124 >> 2];
  $7 = $8 << 3;
  $3 = HEAPF64[$2 + 16 >> 3];
  $9 = $3 * $3;
  $3 = HEAPF64[$2 >> 3];
  $5 = $3 * $3;
  $3 = HEAPF64[$2 + 8 >> 3];
  label$1 : {
   label$2 : {
    if (HEAPF64[$7 + $2 >> 3] > HEAPF64[$1 + 96 >> 3] * Math_sqrt($9 + ($5 + $3 * $3))) {
     $2 = ($6 << 3) + $0 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAPF64[$0 + $7 >> 3] = $4;
     $2 = HEAP32[$1 + 128 >> 2];
     break label$2;
    }
    $3 = HEAPF64[($6 << 3) + $2 >> 3];
    $7 = $2;
    $2 = HEAP32[$1 + 128 >> 2];
    $5 = HEAPF64[$7 + ($2 << 3) >> 3];
    $10 = Math_sqrt($3 * $3 + $5 * $5);
    if ($10 > 2.220446049250313e-16) {
     $9 = $3;
     $3 = HEAPF64[$1 + 104 >> 3] / $10;
     HEAPF64[($6 << 3) + $0 >> 3] = $9 * $3;
     HEAPF64[($8 << 3) + $0 >> 3] = -$4;
     $4 = $5 * $3;
     break label$1;
    }
    $1 = ($6 << 3) + $0 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAPF64[($8 << 3) + $0 >> 3] = -$4;
   }
   $4 = 0.0;
  }
  HEAPF64[($2 << 3) + $0 >> 3] = $4;
 }
 
 function btConeShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0;
  $7 = __stack_pointer - 32 | 0;
  if (($3 | 0) > 0) {
   while (1) {
    $9 = HEAPF64[$0 + 112 >> 3] * .5;
    $4 = HEAP32[$0 + 120 >> 2];
    $5 = HEAP32[$0 + 124 >> 2] << 3;
    $6 = HEAPF64[$1 + 16 >> 3];
    $11 = $6 * $6;
    $6 = HEAPF64[$1 >> 3];
    $10 = $6 * $6;
    $6 = HEAPF64[$1 + 8 >> 3];
    label$3 : {
     label$4 : {
      if (HEAPF64[$5 + $1 >> 3] > HEAPF64[$0 + 96 >> 3] * Math_sqrt($11 + ($10 + $6 * $6))) {
       $4 = ($4 << 3) + $7 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       HEAPF64[$7 + $5 >> 3] = $9;
       $4 = HEAP32[$0 + 128 >> 2];
       break label$4;
      }
      $8 = $4 << 3;
      $6 = HEAPF64[$8 + $1 >> 3];
      $4 = HEAP32[$0 + 128 >> 2];
      $10 = HEAPF64[($4 << 3) + $1 >> 3];
      $12 = Math_sqrt($6 * $6 + $10 * $10);
      if ($12 > 2.220446049250313e-16) {
       $11 = $6;
       $6 = HEAPF64[$0 + 104 >> 3] / $12;
       HEAPF64[$7 + $8 >> 3] = $11 * $6;
       HEAPF64[$7 + $5 >> 3] = -$9;
       $9 = $10 * $6;
       break label$3;
      }
      $8 = $7 + $8 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAPF64[$7 + $5 >> 3] = -$9;
     }
     $9 = 0.0;
    }
    HEAPF64[($4 << 3) + $7 >> 3] = $9;
    $5 = HEAP32[$7 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$2 + 4 >> 2] = $5;
    $4 = $7 + 8 | 0;
    $8 = HEAP32[$4 + 4 >> 2];
    $5 = $2 + 8 | 0;
    HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$5 + 4 >> 2] = $8;
    $4 = $7 + 16 | 0;
    $8 = HEAP32[$4 + 4 >> 2];
    $5 = $2 + 16 | 0;
    HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$5 + 4 >> 2] = $8;
    $4 = $7 + 24 | 0;
    $8 = HEAP32[$4 + 4 >> 2];
    $5 = $2 + 24 | 0;
    HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$5 + 4 >> 2] = $8;
    $1 = $1 + 32 | 0;
    $2 = $2 + 32 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btConeShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0;
  $4 = HEAPF64[$1 + 112 >> 3] * .5;
  $6 = HEAP32[$1 + 120 >> 2];
  $10 = HEAP32[$1 + 124 >> 2];
  $7 = $10 << 3;
  $3 = HEAPF64[$2 + 16 >> 3];
  $9 = $3 * $3;
  $3 = HEAPF64[$2 >> 3];
  $5 = $3 * $3;
  $3 = HEAPF64[$2 + 8 >> 3];
  label$1 : {
   label$2 : {
    if (HEAPF64[$7 + $2 >> 3] > HEAPF64[$1 + 96 >> 3] * Math_sqrt($9 + ($5 + $3 * $3))) {
     $6 = ($6 << 3) + $0 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAPF64[$0 + $7 >> 3] = $4;
     $7 = HEAP32[$1 + 128 >> 2];
     break label$2;
    }
    $3 = HEAPF64[($6 << 3) + $2 >> 3];
    $7 = HEAP32[$1 + 128 >> 2];
    $5 = HEAPF64[($7 << 3) + $2 >> 3];
    $8 = Math_sqrt($3 * $3 + $5 * $5);
    if ($8 > 2.220446049250313e-16) {
     $9 = $3;
     $3 = HEAPF64[$1 + 104 >> 3] / $8;
     HEAPF64[($6 << 3) + $0 >> 3] = $9 * $3;
     HEAPF64[($10 << 3) + $0 >> 3] = -$4;
     $4 = $5 * $3;
     break label$1;
    }
    $6 = ($6 << 3) + $0 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAPF64[($10 << 3) + $0 >> 3] = -$4;
   }
   $4 = 0.0;
  }
  HEAPF64[($7 << 3) + $0 >> 3] = $4;
  if (+FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1) != 0.0) {
   $4 = HEAPF64[$2 + 8 >> 3];
   $3 = HEAPF64[$2 >> 3];
   $5 = HEAPF64[$2 + 16 >> 3];
   $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
   $1 = $5 * $5 + ($3 * $3 + $4 * $4) < 4.930380657631324e-32;
   $3 = $1 ? -1.0 : $3;
   $9 = $3;
   $5 = $1 ? -1.0 : $5;
   $4 = $1 ? -1.0 : $4;
   $3 = 1.0 / Math_sqrt($5 * $5 + ($3 * $3 + $4 * $4));
   HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + $8 * ($9 * $3);
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + $8 * ($4 * $3);
   HEAPF64[$0 + 16 >> 3] = HEAPF64[$0 + 16 >> 3] + $8 * ($5 * $3);
  }
 }
 
 function btConeShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0;
  $2 = HEAP32[$0 + 124 >> 2] << 3;
  $4 = $0 + 16 | 0;
  $5 = HEAPF64[$0 + 112 >> 3] * (HEAPF64[$2 + $1 >> 3] / HEAPF64[$2 + $4 >> 3]);
  HEAPF64[$0 + 112 >> 3] = $5;
  $2 = HEAP32[$0 + 120 >> 2] << 3;
  $3 = HEAPF64[$2 + $1 >> 3] / HEAPF64[$2 + $4 >> 3];
  $2 = HEAP32[$0 + 128 >> 2] << 3;
  $3 = HEAPF64[$0 + 104 >> 3] * (($3 + HEAPF64[$2 + $1 >> 3] / HEAPF64[$2 + $4 >> 3]) * .5);
  HEAPF64[$0 + 104 >> 3] = $3;
  HEAPF64[$0 + 96 >> 3] = $3 / Math_sqrt($3 * $3 + $5 * $5);
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
 }
 
 function btConeShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  $3 = $4 + 80 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 88 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 96 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 112 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 104 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 120 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 128 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 136 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 152 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 144 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 160 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 168 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 176 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 184 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$4 + 72 >> 2] = 0;
  HEAP32[$4 + 76 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 68 >> 2] = 1072693248;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4 - -64 | 0, $4 + 32 | 0, $4);
  $8 = HEAPF64[$4 + 48 >> 3];
  $9 = HEAPF64[$4 + 16 >> 3];
  $6 = HEAPF64[$4 + 32 >> 3];
  $7 = HEAPF64[$4 >> 3];
  $10 = HEAPF64[$4 + 40 >> 3];
  $11 = HEAPF64[$4 + 8 >> 3];
  $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $1 = $1 * .08333333;
  $6 = $5 + ($7 - $6) * .5;
  $6 = $6 + $6;
  $6 = $6 * $6;
  $7 = $5 + ($11 - $10) * .5;
  $7 = $7 + $7;
  $7 = $7 * $7;
  HEAPF64[$2 + 16 >> 3] = $1 * ($6 + $7);
  $5 = $5 + ($9 - $8) * .5;
  $5 = $5 + $5;
  $5 = $5 * $5;
  HEAPF64[$2 + 8 >> 3] = $1 * ($6 + $5);
  HEAPF64[$2 >> 3] = $1 * ($7 + $5);
  __stack_pointer = $4 + 192 | 0;
 }
 
 function btConeShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 3548;
 }
 
 function btConeShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 1072693248;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btConeShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 48 >> 2] = 0;
  HEAPF32[$1 + 28 >> 2] = HEAPF64[$0 + 48 >> 3];
  $2 = HEAP32[$0 + 124 >> 2];
  $3 = HEAPF64[$0 + 40 >> 3];
  $4 = HEAPF64[$0 + 32 >> 3];
  $5 = HEAPF64[$0 + 24 >> 3];
  $6 = HEAPF64[$0 + 72 >> 3];
  $7 = HEAPF64[$0 - -64 >> 3];
  $8 = HEAPF64[$0 + 56 >> 3];
  $9 = HEAPF64[$0 + 80 >> 3];
  $10 = HEAPF64[$0 + 16 >> 3];
  HEAP32[$1 + 56 >> 2] = 0;
  HEAPF32[$1 + 32 >> 2] = $8;
  HEAPF32[$1 + 36 >> 2] = $7;
  HEAPF32[$1 + 40 >> 2] = $6;
  HEAPF32[$1 + 12 >> 2] = $10;
  HEAPF32[$1 + 16 >> 2] = $5;
  HEAPF32[$1 + 20 >> 2] = $4;
  HEAPF32[$1 + 24 >> 2] = $3;
  HEAPF32[$1 + 44 >> 2] = $9;
  HEAP32[$1 + 52 >> 2] = $2;
  return 3864;
 }
 
 function btConeShapeZ__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4200;
 }
 
 function btConeShapeZ__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 1072693248;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btConeShapeX__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4235;
 }
 
 function btConeShapeX__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btConcaveShape__btConcaveShape_28_29($0) {
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 4 >> 2] = 35;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = 9432;
 }
 
 function btStaticPlaneShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 966823146;
  HEAP32[$2 + 20 >> 2] = -970375591;
  HEAP32[$2 + 8 >> 2] = 966823146;
  HEAP32[$2 + 12 >> 2] = -970375591;
  HEAP32[$2 >> 2] = 966823146;
  HEAP32[$2 + 4 >> 2] = -970375591;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 966823146;
  HEAP32[$3 + 20 >> 2] = 1177108057;
  HEAP32[$3 + 8 >> 2] = 966823146;
  HEAP32[$3 + 12 >> 2] = 1177108057;
  HEAP32[$3 >> 2] = 966823146;
  HEAP32[$3 + 4 >> 2] = 1177108057;
 }
 
 function btStaticPlaneShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  $9 = HEAPF64[$3 + 16 >> 3];
  $8 = HEAPF64[$2 + 16 >> 3];
  $7 = ($9 - $8) * .5;
  $10 = $7 * $7;
  $6 = HEAPF64[$3 >> 3];
  $5 = HEAPF64[$2 >> 3];
  $7 = ($6 - $5) * .5;
  $14 = $7 * $7;
  $11 = HEAPF64[$3 + 8 >> 3];
  $12 = HEAPF64[$2 + 8 >> 3];
  $7 = ($11 - $12) * .5;
  $7 = Math_sqrt($10 + ($14 + $7 * $7));
  $10 = ($9 + $8) * .5;
  $11 = ($11 + $12) * .5;
  $12 = ($6 + $5) * .5;
  $9 = HEAPF64[$0 + 104 >> 3];
  label$1 : {
   if (Math_abs($9) > .7071067811865476) {
    $8 = HEAPF64[$0 + 96 >> 3];
    $6 = $8 * $8 + $9 * $9;
    $5 = 1.0 / Math_sqrt($6);
    $15 = $6 * $5;
    $13 = $8 * $5;
    $6 = HEAPF64[$0 + 88 >> 3];
    $16 = $13 * -$6;
    $5 = $5 * -$9;
    $17 = $6 * $5;
    break label$1;
   }
   $6 = HEAPF64[$0 + 88 >> 3];
   $8 = HEAPF64[$0 + 96 >> 3];
   $15 = $6 * $6 + $8 * $8;
   $5 = 1.0 / Math_sqrt($15);
   $17 = $15 * $5;
   $19 = $5 * -$8;
   $16 = $9 * $19;
   $5 = $6 * $5;
   $15 = $5 * -$9;
  }
  $18 = HEAPF64[$0 + 120 >> 3];
  $0 = $4 + 88 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $2 = $4 + 56 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = $4 + 80 | 0;
  $14 = $10;
  $10 = $9 * $10 + ($6 * $12 + $11 * $8) - $18;
  $18 = $14 - $9 * $10;
  $13 = $7 * $13;
  $14 = $18 - $13;
  $9 = $7 * $17;
  $17 = $14 - $9;
  HEAPF64[$3 >> 3] = $17;
  $20 = $4 + 72 | 0;
  $11 = $11 - $8 * $10;
  $5 = $7 * $5;
  $21 = $11 - $5;
  $8 = $7 * $16;
  $16 = $21 - $8;
  HEAPF64[$20 >> 3] = $16;
  $22 = $4 + 48 | 0;
  $13 = $13 + $18;
  HEAPF64[$22 >> 3] = $13 - $9;
  $23 = $4 + 40 | 0;
  $5 = $5 + $11;
  HEAPF64[$23 >> 3] = $5 - $8;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  $6 = $12 - $6 * $10;
  $10 = $7 * $19;
  $11 = $6 - $10;
  $7 = $7 * $15;
  $12 = $11 - $7;
  HEAPF64[$4 + 64 >> 3] = $12;
  $6 = $10 + $6;
  HEAPF64[$4 + 32 >> 3] = $6 - $7;
  $10 = $9 + $13;
  HEAPF64[$4 + 16 >> 3] = $10;
  $5 = $8 + $5;
  HEAPF64[$4 + 8 >> 3] = $5;
  $6 = $7 + $6;
  HEAPF64[$4 >> 3] = $6;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, 0, 0);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$3 >> 3] = $10;
  HEAPF64[$20 >> 3] = $5;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAPF64[$22 >> 3] = $9 + $14;
  HEAPF64[$23 >> 3] = $8 + $21;
  HEAPF64[$4 + 64 >> 3] = $6;
  HEAPF64[$4 + 32 >> 3] = $7 + $11;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $17;
  HEAPF64[$4 + 8 >> 3] = $16;
  HEAPF64[$4 >> 3] = $12;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, 0, 1);
  __stack_pointer = $4 + 96 | 0;
 }
 
 function btStaticPlaneShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 132 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 152 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 144 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 136 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btStaticPlaneShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 128 | 0;
 }
 
 function btStaticPlaneShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4281;
 }
 
 function btConcaveShape__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 16 >> 3] = $1;
 }
 
 function btConcaveShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 16 >> 3];
 }
 
 function btStaticPlaneShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  $3 = HEAPF64[$0 + 112 >> 3];
  $4 = HEAPF64[$0 + 104 >> 3];
  $5 = HEAPF64[$0 + 96 >> 3];
  $6 = HEAPF64[$0 + 152 >> 3];
  $7 = HEAPF64[$0 + 144 >> 3];
  $8 = HEAPF64[$0 + 136 >> 3];
  $9 = HEAPF64[$0 + 120 >> 3];
  $10 = HEAPF64[$0 + 88 >> 3];
  $11 = HEAPF64[$0 + 128 >> 3];
  HEAP32[$1 + 48 >> 2] = 0;
  HEAPF32[$1 + 12 >> 2] = $11;
  HEAPF32[$1 + 16 >> 2] = $8;
  HEAPF32[$1 + 20 >> 2] = $7;
  HEAPF32[$1 + 24 >> 2] = $6;
  HEAPF32[$1 + 28 >> 2] = $10;
  HEAPF32[$1 + 32 >> 2] = $5;
  HEAPF32[$1 + 36 >> 2] = $4;
  HEAPF32[$1 + 40 >> 2] = $3;
  HEAPF32[$1 + 44 >> 2] = $9;
  return 3880;
 }
 
 function btGImpactMeshShapePart___btGImpactMeshShapePart_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 10080;
  $1 = HEAP32[$0 + 144 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 148 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP8[$0 + 148 | 0] = 1;
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btGImpactMeshShapePart___btGImpactMeshShapePart_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 10080;
  $1 = HEAP32[$0 + 144 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 148 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP8[$0 + 148 | 0] = 1;
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btGImpactMeshShapePart__lockChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[$0 + 248 >> 2];
  $1 = HEAP32[$0 + 60 >> 2];
  if (($1 | 0) > 0) {
   HEAP32[$0 + 60 >> 2] = $1 + 1;
   return;
  }
  $1 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $0 - -64 | 0, $0 + 68 | 0, $0 + 72 | 0, $0 + 76 | 0, $0 + 80 | 0, $0 + 84 | 0, $0 + 88 | 0, $0 + 92 | 0, HEAP32[$0 + 56 >> 2]);
  HEAP32[$0 + 60 >> 2] = 1;
 }
 
 function btGImpactMeshShapePart__unlockChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[$0 + 248 >> 2];
  $1 = HEAP32[$0 + 60 >> 2];
  if ($1) {
   if (($1 | 0) >= 2) {
    $1 = $1 - 1 | 0
   } else {
    $1 = HEAP32[$0 + 16 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$0 + 56 >> 2]);
    HEAP32[$0 + 64 >> 2] = 0;
    $1 = 0;
   }
   HEAP32[$0 + 60 >> 2] = $1;
  }
 }
 
 function btGImpactMeshShapePart__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $6 = HEAP32[$0 + 324 >> 2];
  label$1 : {
   if (!$6) {
    break label$1
   }
   $14 = $6 - 1 | 0;
   $1 = $1 / +($6 | 0);
   $3 = HEAP32[$0 + 332 >> 2];
   $15 = HEAP32[$0 + 320 >> 2];
   if (HEAP32[$0 + 328 >> 2] != 1) {
    $12 = 0 - $3 | 0;
    $3 = Math_imul($3, $14) + $15 | 0;
    while (1) {
     $7 = HEAPF64[$0 + 296 >> 3];
     $8 = HEAPF64[$0 + 280 >> 3] * +HEAPF32[$3 >> 2];
     $8 = $8 * $8;
     $4 = HEAPF64[$0 + 288 >> 3] * +HEAPF32[$3 + 4 >> 2];
     $4 = $4 * $4;
     $9 = $1 * ($8 + $4) + $9;
     HEAPF64[$2 + 16 >> 3] = $9;
     $13 = $5;
     $5 = $7 * +HEAPF32[$3 + 8 >> 2];
     $7 = $5 * $5;
     $5 = $13 + $1 * ($8 + $7);
     HEAPF64[$2 + 8 >> 3] = $5;
     $10 = $10 + $1 * ($4 + $7);
     HEAPF64[$2 >> 3] = $10;
     $3 = $3 + $12 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
    break label$1;
   }
   $12 = 0 - $3 | 0;
   $3 = Math_imul($3, $14) + $15 | 0;
   while (1) {
    $7 = HEAPF64[$3 + 16 >> 3];
    $8 = HEAPF64[$0 + 296 >> 3];
    $4 = HEAPF64[$3 >> 3] * HEAPF64[$0 + 280 >> 3];
    $4 = $4 * $4;
    $11 = HEAPF64[$3 + 8 >> 3] * HEAPF64[$0 + 288 >> 3];
    $11 = $11 * $11;
    $9 = $1 * ($4 + $11) + $9;
    HEAPF64[$2 + 16 >> 3] = $9;
    $13 = $5;
    $5 = $8 * $7;
    $7 = $5 * $5;
    $5 = $13 + $1 * ($4 + $7);
    HEAPF64[$2 + 8 >> 3] = $5;
    $10 = $10 + $1 * ($11 + $7);
    HEAPF64[$2 >> 3] = $10;
    $3 = $3 + $12 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
 }
 
 function btGImpactMeshShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = HEAP32[$0 + 264 >> 2];
  if ($3) {
   $1 = $1 / +($3 | 0);
   $5 = ($3 << 2) - 4 | 0;
   while (1) {
    $6 = HEAP32[HEAP32[$0 + 272 >> 2] + $5 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 32 >> 2]]($6, $1, $4);
    HEAPF64[$2 >> 3] = HEAPF64[$4 >> 3] + HEAPF64[$2 >> 3];
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$4 + 8 >> 3] + HEAPF64[$2 + 8 >> 3];
    HEAPF64[$2 + 16 >> 3] = HEAPF64[$4 + 16 >> 3] + HEAPF64[$2 + 16 >> 3];
    $5 = $5 - 4 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function btGImpactMeshShapePart__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  HEAP32[$4 + 196 >> 2] = 0;
  HEAP8[$4 + 200 | 0] = 1;
  HEAP32[$4 + 188 >> 2] = 0;
  HEAP32[$4 + 192 >> 2] = 0;
  HEAP32[$4 + 176 >> 2] = 0;
  HEAP32[$4 + 180 >> 2] = 0;
  $10 = HEAPF64[$3 + 16 >> 3] - HEAPF64[$2 + 16 >> 3];
  $11 = HEAPF64[$3 >> 3] - HEAPF64[$2 >> 3];
  $7 = HEAPF64[$3 + 8 >> 3] - HEAPF64[$2 + 8 >> 3];
  $12 = 1.0 / Math_sqrt($10 * $10 + ($11 * $11 + $7 * $7));
  HEAPF64[$4 + 168 >> 3] = $10 * $12;
  HEAPF64[$4 + 160 >> 3] = $7 * $12;
  HEAPF64[$4 + 152 >> 3] = $11 * $12;
  $20 = $4 + 152 | 0;
  $8 = $4 + 184 | 0;
  $9 = $0 + 128 | 0;
  $26 = HEAP32[$9 >> 2];
  if (($26 | 0) > 0) {
   while (1) {
    $16 = $15 << 4;
    $3 = $16 + HEAP32[$9 + 16 >> 2] | 0;
    $5 = HEAPU16[$3 + 4 >> 1];
    $11 = HEAPF64[$9 + 104 >> 3];
    $7 = HEAPF64[$9 + 40 >> 3];
    $13 = HEAPU16[$3 + 10 >> 1];
    $17 = HEAPU16[$3 + 2 >> 1];
    $12 = HEAPF64[$9 + 96 >> 3];
    $14 = HEAPF64[$9 + 32 >> 3];
    $18 = HEAPU16[$3 + 8 >> 1];
    $10 = HEAPF64[$9 + 24 >> 3];
    $6 = HEAPF64[$9 + 88 >> 3];
    $19 = $10 + +HEAPU16[$3 + 6 >> 1] / $6;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $6 = (+HEAPU16[$3 >> 1] / $6 + $10 + $19) * .5;
        $10 = HEAPF64[$2 >> 3] - $6;
        $19 = $19 - $6;
        label$7 : {
         if (Math_abs($10) > $19 & $10 * HEAPF64[$20 >> 3] >= 0.0) {
          break label$7
         }
         $6 = +($17 >>> 0) / $12 + $14;
         $14 = $14 + +($18 >>> 0) / $12;
         $6 = ($6 + $14) * .5;
         $12 = HEAPF64[$2 + 8 >> 3] - $6;
         $14 = $14 - $6;
         if ($14 < Math_abs($12) & $12 * HEAPF64[$20 + 8 >> 3] >= 0.0) {
          break label$7
         }
         $6 = +($5 >>> 0) / $11 + $7;
         $7 = $7 + +($13 >>> 0) / $11;
         $6 = ($6 + $7) * .5;
         $11 = HEAPF64[$2 + 16 >> 3] - $6;
         $6 = $7 - $6;
         $7 = HEAPF64[$20 + 16 >> 3];
         if (Math_abs($11) > $6 & $11 * $7 >= 0.0) {
          break label$7
         }
         $23 = HEAPF64[$20 + 8 >> 3];
         $27 = Math_abs($23);
         $28 = Math_abs($7);
         if (Math_abs($23 * $11 - $12 * $7) > $14 * $28 + $6 * $27) {
          break label$7
         }
         $24 = HEAPF64[$20 >> 3];
         $29 = Math_abs($24);
         if (!(Math_abs($7 * $10 - $11 * $24) > $19 * $28 + $6 * $29)) {
          break label$6
         }
        }
        $3 = HEAP32[$3 + 12 >> 2] >= 0;
        $5 = 0;
        break label$5;
       }
       $13 = Math_abs($24 * $12 - $10 * $23) > $19 * $27 + $14 * $29;
       $5 = !$13;
       $25 = HEAP32[$3 + 12 >> 2];
       $3 = ($25 | 0) >= 0;
       if (($25 | 0) < 0 | $13) {
        break label$5
       }
       $3 = HEAP32[$8 + 4 >> 2];
       label$11 : {
        if (($3 | 0) != HEAP32[$8 + 8 >> 2]) {
         break label$11
        }
        $17 = $3 ? $3 << 1 : 1;
        if (($17 | 0) <= ($3 | 0)) {
         break label$11
        }
        label$12 : {
         if (!$17) {
          $16 = 0;
          break label$12;
         }
         $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($17 << 2);
         $3 = HEAP32[$8 + 4 >> 2];
        }
        $13 = HEAP32[$8 + 12 >> 2];
        label$14 : {
         label$15 : {
          if (($3 | 0) > 0) {
           $18 = $3 & 3;
           $5 = 0;
           if ($3 - 1 >>> 0 >= 3) {
            $30 = $3 & -4;
            $3 = 0;
            while (1) {
             $21 = $3 + $16 | 0;
             $22 = $3 + $13 | 0;
             HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
             HEAP32[$21 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
             HEAP32[$21 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
             HEAP32[$21 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
             $3 = $3 + 16 | 0;
             $5 = $5 + 4 | 0;
             if (($30 | 0) != ($5 | 0)) {
              continue
             }
             break;
            };
           }
           if (!$18) {
            break label$15
           }
           $5 = $5 << 2;
           $3 = $5 + $16 | 0;
           $5 = $5 + $13 | 0;
           while (1) {
            HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
            $3 = $3 + 4 | 0;
            $5 = $5 + 4 | 0;
            $18 = $18 - 1 | 0;
            if ($18) {
             continue
            }
            break;
           };
           break label$15;
          }
          if (!$13) {
           break label$14
          }
         }
         if (HEAPU8[$8 + 16 | 0]) {
          btAlignedFreeInternal_28void__29($13)
         }
         $3 = HEAP32[$8 + 4 >> 2];
        }
        HEAP32[$8 + 12 >> 2] = $16;
        HEAP8[$8 + 16 | 0] = 1;
        HEAP32[$8 + 8 >> 2] = $17;
       }
       HEAP32[HEAP32[$8 + 12 >> 2] + ($3 << 2) >> 2] = $25;
       HEAP32[$8 + 4 >> 2] = HEAP32[$8 + 4 >> 2] + 1;
       break label$4;
      }
      if ($3 | $5) {
       break label$4
      }
      $15 = $15 - HEAP32[($16 + HEAP32[$9 + 16 >> 2] | 0) + 12 >> 2] | 0;
      break label$3;
     }
     $15 = $15 + 1 | 0;
    }
    if (($15 | 0) < ($26 | 0)) {
     continue
    }
    break;
   }
  }
  $3 = HEAP32[$4 + 188 >> 2];
  if ($3) {
   $8 = HEAP32[$0 + 312 >> 2];
   HEAP32[$4 + 136 >> 2] = 1073741824;
   HEAP32[$4 + 140 >> 2] = 1065646817;
   $2 = ($3 << 2) - 4 | 0;
   while (1) {
    $5 = HEAP32[HEAP32[$4 + 196 >> 2] + $2 >> 2];
    $9 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
    $15 = $5;
    $5 = $4 + 8 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 20 >> 2]]($9, $15, $5);
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5, $8, HEAP32[HEAP32[$4 + 196 >> 2] + $2 >> 2]);
    $2 = $2 - 4 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  $0 = HEAP32[$4 + 196 >> 2];
  if (!(!$0 | !HEAPU8[$4 + 200 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  __stack_pointer = $4 + 208 | 0;
 }
 
 function btGImpactMeshShapePart__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 240 | 0;
  __stack_pointer = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $5 = $2 + 24 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $8 = $4 + 176 | 0;
  $6 = $8 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $2 + 16 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $8 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $2 + 8 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $8 + 8 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $3 + 8 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 216 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $3 + 16 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 224 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $3 + 24 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 232 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $6 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 + 176 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 180 >> 2] = $6;
  $2 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 208 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 212 >> 2] = $2;
  HEAP32[$4 + 164 >> 2] = 0;
  HEAP8[$4 + 168 | 0] = 1;
  HEAP32[$4 + 156 >> 2] = 0;
  HEAP32[$4 + 160 >> 2] = 0;
  btGImpactQuantizedBvh__boxQuery_28btAABB_20const__2c_20btAlignedObjectArray_int___29_20const($0 + 128 | 0, $8, $4 + 152 | 0);
  $2 = HEAP32[$4 + 156 >> 2];
  label$1 : {
   if (!$2) {
    break label$1
   }
   $6 = HEAP32[$0 + 312 >> 2];
   HEAP32[$4 + 136 >> 2] = 1073741824;
   HEAP32[$4 + 140 >> 2] = 1065646817;
   $3 = ($2 << 2) - 4 | 0;
   while (1) {
    $5 = HEAP32[HEAP32[$4 + 164 >> 2] + $3 >> 2];
    $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
    $8 = $5;
    $5 = $4 + 8 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 20 >> 2]]($7, $8, $5);
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5, $6, HEAP32[HEAP32[$4 + 164 >> 2] + $3 >> 2]);
    $3 = $3 - 4 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  $0 = HEAP32[$4 + 164 >> 2];
  if (!(!$0 | !HEAPU8[$4 + 168 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  __stack_pointer = $4 + 240 | 0;
 }
 
 function btGImpactMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   $4 = HEAP32[$0 + 264 >> 2];
   if (!$4) {
    break label$1
   }
   $6 = $4;
   if ($4 & 1) {
    $6 = $4 - 1 | 0;
    $5 = HEAP32[HEAP32[$0 + 272 >> 2] + ($6 << 2) >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($5, $1, $2, $3);
   }
   if (($4 | 0) == 1) {
    break label$1
   }
   $5 = ($6 << 2) - 4 | 0;
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 272 >> 2] + $5 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $1, $2, $3);
    $4 = HEAP32[(HEAP32[$0 + 272 >> 2] + $5 | 0) - 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $1, $2, $3);
    $5 = $5 - 8 | 0;
    $6 = $6 - 2 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
 }
 
 function btGImpactMeshShape__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   $4 = HEAP32[$0 + 264 >> 2];
   if (!$4) {
    break label$1
   }
   $6 = $4;
   if ($4 & 1) {
    $6 = $4 - 1 | 0;
    $5 = HEAP32[HEAP32[$0 + 272 >> 2] + ($6 << 2) >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 144 >> 2]]($5, $1, $2, $3);
   }
   if (($4 | 0) == 1) {
    break label$1
   }
   $5 = ($6 << 2) - 4 | 0;
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 272 >> 2] + $5 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 144 >> 2]]($4, $1, $2, $3);
    $4 = HEAP32[(HEAP32[$0 + 272 >> 2] + $5 | 0) - 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 144 >> 2]]($4, $1, $2, $3);
    $5 = $5 - 8 | 0;
    $6 = $6 - 2 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
 }
 
 function btGImpactMeshShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  $3 = HEAP32[$0 + 256 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 56 >> 2]]($3, $1 + 12 | 0, $2) | 0;
  HEAPF32[$1 + 56 >> 2] = HEAPF64[$0 + 16 >> 3];
  HEAPF32[$1 + 40 >> 2] = HEAPF64[$0 + 96 >> 3];
  HEAPF32[$1 + 44 >> 2] = HEAPF64[$0 + 104 >> 3];
  HEAPF32[$1 + 48 >> 2] = HEAPF64[$0 + 112 >> 3];
  HEAPF32[$1 + 52 >> 2] = HEAPF64[$0 + 120 >> 3];
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
  return 3817;
 }
 
 function btGImpactShapeInterface__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
  $21 = HEAPF64[$1 + 104 >> 3];
  $10 = HEAPF64[$1 + 48 >> 3];
  $15 = HEAPF64[$1 + 40 >> 3];
  $4 = HEAPF64[$1 + 112 >> 3];
  $6 = HEAPF64[$1 + 80 >> 3];
  $7 = HEAPF64[$0 + 72 >> 3];
  $5 = HEAPF64[$0 + 40 >> 3];
  $8 = HEAPF64[$0 + 56 >> 3];
  $11 = HEAPF64[$1 + 72 >> 3];
  $12 = HEAPF64[$0 - -64 >> 3];
  $9 = HEAPF64[$0 + 32 >> 3];
  $22 = HEAPF64[$1 + 96 >> 3];
  $16 = HEAPF64[$1 + 16 >> 3];
  $17 = HEAPF64[$1 >> 3];
  $18 = HEAPF64[$1 + 8 >> 3];
  $19 = HEAPF64[$1 + 32 >> 3];
  $20 = HEAPF64[$1 + 64 >> 3];
  $13 = HEAPF64[$0 + 24 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $14 = $4;
  $4 = ($5 + $7) * .5;
  $5 = ($13 + $8) * .5;
  $9 = ($9 + $12) * .5;
  $13 = $14 + ($6 * $4 + ($20 * $5 + $11 * $9));
  $7 = $7 - $4;
  $14 = $7 * Math_abs($6);
  $6 = $8 - $5;
  $8 = $12 - $9;
  $11 = $14 + ($6 * Math_abs($20) + $8 * Math_abs($11));
  HEAPF64[$2 + 16 >> 3] = $13 - $11;
  $12 = $21 + ($4 * $10 + ($5 * $19 + $9 * $15));
  $10 = $7 * Math_abs($10) + ($6 * Math_abs($19) + $8 * Math_abs($15));
  HEAPF64[$2 + 8 >> 3] = $12 - $10;
  $4 = $22 + ($4 * $16 + ($5 * $17 + $9 * $18));
  $5 = $7 * Math_abs($16) + ($6 * Math_abs($17) + $8 * Math_abs($18));
  HEAPF64[$2 >> 3] = $4 - $5;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $11 + $13;
  HEAPF64[$3 + 8 >> 3] = $10 + $12;
  HEAPF64[$3 >> 3] = $5 + $4;
 }
 
 function btGImpactShapeInterface__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 96 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 100 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 120 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 104 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function btGImpactShapeInterface__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 96 | 0;
 }
 
 function btGImpactShapeInterface__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAPF64[$0 + 16 >> 3] = $1;
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0) | 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $2;
   if ($2 & 1) {
    $3 = $2 - 1 | 0;
    $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $3) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 44 >> 2]]($4, $1);
   }
   if (($2 | 0) == 1) {
    break label$1
   }
   $2 = $3 - 1 | 0;
   while (1) {
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $2) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $1);
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $2 - 1 | 0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $1);
    $2 = $2 - 2 | 0;
    if (($2 | 0) != -1) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 88 | 0] = 1;
 }
 
 function btGImpactShapeInterface__calcLocalAABB_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $4 = $0 + 128 | 0;
  label$1 : {
   if (!HEAP32[$0 + 128 >> 2]) {
    $13 = __stack_pointer - 96 | 0;
    __stack_pointer = $13;
    HEAP32[$13 + 80 >> 2] = 0;
    HEAP32[$13 + 84 >> 2] = 0;
    HEAP8[$13 + 88 | 0] = 1;
    $1 = HEAP32[$4 + 120 >> 2];
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1) | 0;
    $1 = $13 - -64 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $13 + 56 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $13 + 48 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $5 = $13 + 40 | 0;
    $1 = $5;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $13 + 32 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $13 + 24 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $13 + 16 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$13 + 8 >> 2] = 0;
    HEAP32[$13 + 12 >> 2] = 0;
    label$10 : {
     if (($2 | 0) <= 0) {
      HEAP32[$13 + 76 >> 2] = $2;
      break label$10;
     }
     $21 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($2, 72));
     HEAP32[$13 + 84 >> 2] = $21;
     HEAP32[$13 + 80 >> 2] = $2;
     HEAP8[$13 + 88 | 0] = 1;
     $27 = $2 - 1 | 0;
     if ($27) {
      $1 = $21 + 72 | 0;
      $24 = $2 & -2;
      while (1) {
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       $7 = $1 - 72 | 0;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       $3 = HEAP32[$5 + 4 >> 2];
       $11 = $1 - 40 | 0;
       HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$11 + 4 >> 2] = $3;
       HEAP32[$1 - 8 >> 2] = 0;
       $3 = $1 + 8 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $1 + 16 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $1 + 24 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $7 + 24 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $7 + 16 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $7 = $7 + 8 | 0;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       $7 = $5 + 8 | 0;
       $3 = HEAP32[$7 + 4 >> 2];
       $19 = $11 + 8 | 0;
       HEAP32[$19 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$19 + 4 >> 2] = $3;
       $3 = $5 + 16 | 0;
       $19 = HEAP32[$3 + 4 >> 2];
       $22 = $11 + 16 | 0;
       HEAP32[$22 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$22 + 4 >> 2] = $19;
       $19 = $5 + 24 | 0;
       $22 = HEAP32[$19 + 4 >> 2];
       $11 = $11 + 24 | 0;
       HEAP32[$11 >> 2] = HEAP32[$19 >> 2];
       HEAP32[$11 + 4 >> 2] = $22;
       HEAP32[$1 - -64 >> 2] = 0;
       $11 = HEAP32[$19 + 4 >> 2];
       $22 = $1 + 56 | 0;
       HEAP32[$22 >> 2] = HEAP32[$19 >> 2];
       HEAP32[$22 + 4 >> 2] = $11;
       $11 = HEAP32[$3 + 4 >> 2];
       $19 = $1 + 48 | 0;
       HEAP32[$19 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$19 + 4 >> 2] = $11;
       $11 = HEAP32[$7 + 4 >> 2];
       $3 = $1 + 40 | 0;
       HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$3 + 4 >> 2] = $11;
       $7 = HEAP32[$5 + 4 >> 2];
       $11 = $1 + 32 | 0;
       HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$11 + 4 >> 2] = $7;
       $1 = $1 + 144 | 0;
       $16 = $16 + 2 | 0;
       if (($24 | 0) != ($16 | 0)) {
        continue
       }
       break;
      };
     }
     if ($2 & 1) {
      $1 = Math_imul($16, 72) + $21 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $7 = HEAP32[$5 + 4 >> 2];
      HEAP32[$1 + 32 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$1 + 36 >> 2] = $7;
      HEAP32[$1 + 64 >> 2] = 0;
      $7 = $1 + 24 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $1 + 16 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $1 + 8 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $5 + 8 | 0;
      $11 = HEAP32[$7 + 4 >> 2];
      $16 = $1 + 40 | 0;
      HEAP32[$16 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$16 + 4 >> 2] = $11;
      $7 = $5 + 16 | 0;
      $11 = HEAP32[$7 + 4 >> 2];
      $16 = $1 + 48 | 0;
      HEAP32[$16 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$16 + 4 >> 2] = $11;
      $5 = $5 + 24 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $1 = $1 + 56 | 0;
      HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$1 + 4 >> 2] = $7;
     }
     HEAP32[$13 + 76 >> 2] = $2;
     if (($2 | 0) <= 0) {
      break label$10
     }
     $7 = $2 & 1;
     $5 = HEAP32[$13 + 84 >> 2];
     label$6 : {
      if (!$27) {
       $2 = 0;
       break label$6;
      }
      $11 = $2 & -2;
      $2 = 0;
      $1 = $5;
      while (1) {
       $16 = HEAP32[$4 + 120 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 16 >> 2]]($16, $2, $1);
       HEAP32[$1 - -64 >> 2] = $2;
       $16 = HEAP32[$4 + 120 >> 2];
       $3 = $2 + 1 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 16 >> 2]]($16, $3, $1 + 72 | 0);
       HEAP32[$1 + 136 >> 2] = $3;
       $1 = $1 + 144 | 0;
       $2 = $2 + 2 | 0;
       if (($11 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$7) {
      break label$10
     }
     $1 = HEAP32[$4 + 120 >> 2];
     $5 = $5 + Math_imul($2, 72) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $2, $5);
     HEAP32[$5 + 64 >> 2] = $2;
    }
    $11 = 0;
    $19 = 0;
    $16 = $13 + 72 | 0;
    $1 = HEAP32[$16 + 4 >> 2];
    label$101 : {
     if (($1 | 0) <= 0) {
      $8 = 1797693134862315708145274.0e284;
      $9 = -1797693134862315708145274.0e284;
      $10 = -1797693134862315708145274.0e284;
      $15 = 1797693134862315708145274.0e284;
      $6 = -1797693134862315708145274.0e284;
      $12 = 1797693134862315708145274.0e284;
      break label$101;
     }
     $2 = HEAP32[$16 + 12 >> 2];
     $8 = -1797693134862315708145274.0e284;
     $12 = 1797693134862315708145274.0e284;
     $15 = 1797693134862315708145274.0e284;
     $18 = 1797693134862315708145274.0e284;
     $10 = -1797693134862315708145274.0e284;
     $9 = -1797693134862315708145274.0e284;
     while (1) {
      $6 = HEAPF64[$2 + 48 >> 3];
      $9 = $6 > $9 ? $6 : $9;
      $6 = HEAPF64[$2 + 40 >> 3];
      $10 = $6 > $10 ? $6 : $10;
      $6 = HEAPF64[$2 + 32 >> 3];
      $8 = $8 < $6 ? $6 : $8;
      $6 = HEAPF64[$2 + 16 >> 3];
      $18 = $6 < $18 ? $6 : $18;
      $6 = HEAPF64[$2 + 8 >> 3];
      $15 = $6 < $15 ? $6 : $15;
      $6 = HEAPF64[$2 >> 3];
      $12 = $6 < $12 ? $6 : $12;
      $2 = $2 + 72 | 0;
      $1 = $1 - 1 | 0;
      if ($1) {
       continue
      }
      break;
     };
     $9 = $9 + 1.0;
     $10 = $10 + 1.0;
     $6 = $8 + 1.0;
     $8 = $18 + -1.0;
     $15 = $15 + -1.0;
     $12 = $12 + -1.0;
    }
    HEAPF64[$4 + 24 >> 3] = $12;
    $1 = $4 + 112 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $4 + 80 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAPF64[$4 + 72 >> 3] = $9;
    HEAPF64[$4 - -64 >> 3] = $10;
    HEAPF64[$4 + 56 >> 3] = $6;
    $1 = $4 + 48 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAPF64[$4 + 40 >> 3] = $8;
    HEAPF64[$4 + 32 >> 3] = $15;
    HEAPF64[$4 + 104 >> 3] = 65535.0 / ($9 - $8);
    HEAPF64[$4 + 96 >> 3] = 65535.0 / ($10 - $15);
    HEAPF64[$4 + 88 >> 3] = 65535.0 / ($6 - $12);
    HEAP32[$4 >> 2] = 0;
    $1 = HEAP32[$4 + 8 >> 2];
    $2 = HEAP32[$16 + 4 >> 2];
    $7 = $2 << 1;
    if (($1 | 0) < ($7 | 0)) {
     if (($7 | 0) > HEAP32[$4 + 12 >> 2]) {
      if ($2) {
       $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 5);
       $5 = HEAP32[$4 + 8 >> 2];
      } else {
       $5 = $1
      }
      label$81 : {
       if (($5 | 0) <= 0) {
        break label$81
       }
       if (($5 | 0) != 1) {
        $27 = $5 & -2;
        $2 = 0;
        while (1) {
         $21 = HEAP32[$4 + 16 >> 2] + $2 | 0;
         $24 = HEAP32[$21 + 4 >> 2];
         $3 = $2 + $11 | 0;
         HEAP32[$3 >> 2] = HEAP32[$21 >> 2];
         HEAP32[$3 + 4 >> 2] = $24;
         $21 = $21 + 8 | 0;
         $24 = HEAP32[$21 + 4 >> 2];
         $22 = $3 + 8 | 0;
         HEAP32[$22 >> 2] = HEAP32[$21 >> 2];
         HEAP32[$22 + 4 >> 2] = $24;
         $21 = HEAP32[$4 + 16 >> 2] + $2 | 0;
         $24 = $21 + 24 | 0;
         $22 = HEAP32[$24 + 4 >> 2];
         $28 = $3 + 24 | 0;
         HEAP32[$28 >> 2] = HEAP32[$24 >> 2];
         HEAP32[$28 + 4 >> 2] = $22;
         $21 = $21 + 16 | 0;
         $24 = HEAP32[$21 + 4 >> 2];
         $3 = $3 + 16 | 0;
         HEAP32[$3 >> 2] = HEAP32[$21 >> 2];
         HEAP32[$3 + 4 >> 2] = $24;
         $2 = $2 + 32 | 0;
         $19 = $19 + 2 | 0;
         if (($27 | 0) != ($19 | 0)) {
          continue
         }
         break;
        };
       }
       if (!($5 & 1)) {
        break label$81
       }
       $2 = $19 << 4;
       $5 = $2 + $11 | 0;
       $2 = $2 + HEAP32[$4 + 16 >> 2] | 0;
       $3 = HEAP32[$2 + 4 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $2 = $2 + 8 | 0;
       $3 = HEAP32[$2 + 4 >> 2];
       $5 = $5 + 8 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
      }
      $5 = HEAP32[$4 + 16 >> 2];
      if (!(!$5 | !HEAPU8[$4 + 20 | 0])) {
       btAlignedFreeInternal_28void__29($5)
      }
      HEAP32[$4 + 16 >> 2] = $11;
      HEAP8[$4 + 20 | 0] = 1;
      HEAP32[$4 + 12 >> 2] = $7;
     }
     $11 = ($1 ^ -1) + $7 | 0;
     $5 = $7 - $1 & 3;
     if ($5) {
      $2 = $1 << 4 | 12;
      while (1) {
       HEAP32[HEAP32[$4 + 16 >> 2] + $2 >> 2] = 0;
       $2 = $2 + 16 | 0;
       $1 = $1 + 1 | 0;
       $5 = $5 - 1 | 0;
       if ($5) {
        continue
       }
       break;
      };
     }
     if ($11 >>> 0 >= 3) {
      $5 = $1 - $7 | 0;
      $2 = ($1 << 4) + 60 | 0;
      while (1) {
       HEAP32[(HEAP32[$4 + 16 >> 2] + $2 | 0) - 48 >> 2] = 0;
       HEAP32[(HEAP32[$4 + 16 >> 2] + $2 | 0) - 32 >> 2] = 0;
       HEAP32[(HEAP32[$4 + 16 >> 2] + $2 | 0) - 16 >> 2] = 0;
       HEAP32[HEAP32[$4 + 16 >> 2] + $2 >> 2] = 0;
       $2 = $2 - -64 | 0;
       $5 = $5 + 4 | 0;
       if ($5) {
        continue
       }
       break;
      };
     }
     $2 = HEAP32[$16 + 4 >> 2];
    }
    HEAP32[$4 + 8 >> 2] = $7;
    btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($4, $16, 0, $2);
    $1 = HEAP32[$13 + 84 >> 2];
    if (!(!$1 | !HEAPU8[$13 + 88 | 0])) {
     btAlignedFreeInternal_28void__29($1)
    }
    __stack_pointer = $13 + 96 | 0;
    break label$1;
   }
   $5 = __stack_pointer + -64 | 0;
   __stack_pointer = $5;
   $1 = HEAP32[$4 >> 2];
   if ($1) {
    $7 = $1 + 1 | 0;
    $13 = ($1 << 4) - 16 | 0;
    $11 = HEAP32[$4 + 16 >> 2];
    while (1) {
     $1 = $11 + $13 | 0;
     $2 = HEAP32[$1 + 12 >> 2];
     label$32 : {
      if (($2 | 0) >= 0) {
       $1 = HEAP32[$4 + 120 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $2, $5);
       $6 = HEAPF64[$5 >> 3];
       $10 = HEAPF64[$5 + 8 >> 3];
       $11 = HEAP32[$4 + 16 >> 2];
       $1 = $11 + $13 | 0;
       $3 = $1 + 4 | 0;
       $15 = HEAPF64[$4 + 72 >> 3];
       $8 = HEAPF64[$4 + 40 >> 3];
       $9 = HEAPF64[$5 + 16 >> 3];
       $9 = $8 > $9 ? $8 : $9;
       $17 = HEAPF64[$4 + 104 >> 3];
       $9 = (($9 > $15 ? $15 : $9) - $8) * $17 + .5;
       label$5 : {
        if ($9 < 4294967296.0 & $9 >= 0.0) {
         $2 = ~~$9 >>> 0;
         break label$5;
        }
        $2 = 0;
       }
       HEAP16[$3 >> 1] = $2;
       $3 = $1 + 2 | 0;
       $12 = HEAPF64[$4 + 64 >> 3];
       $9 = HEAPF64[$4 + 32 >> 3];
       $10 = $10 < $9 ? $9 : $10;
       $23 = HEAPF64[$4 + 96 >> 3];
       $10 = (($10 > $12 ? $12 : $10) - $9) * $23 + .5;
       label$7 : {
        if ($10 < 4294967296.0 & $10 >= 0.0) {
         $2 = ~~$10 >>> 0;
         break label$7;
        }
        $2 = 0;
       }
       HEAP16[$3 >> 1] = $2;
       $18 = HEAPF64[$4 + 56 >> 3];
       $10 = HEAPF64[$4 + 24 >> 3];
       $6 = $6 < $10 ? $10 : $6;
       $20 = HEAPF64[$4 + 88 >> 3];
       $6 = (($6 > $18 ? $18 : $6) - $10) * $20 + .5;
       label$9 : {
        if ($6 < 4294967296.0 & $6 >= 0.0) {
         $2 = ~~$6 >>> 0;
         break label$9;
        }
        $2 = 0;
       }
       HEAP16[$1 >> 1] = $2;
       $6 = HEAPF64[$5 + 48 >> 3];
       $25 = HEAPF64[$5 + 40 >> 3];
       $3 = $1 + 6 | 0;
       $14 = $20;
       $20 = HEAPF64[$5 + 32 >> 3];
       $20 = $10 > $20 ? $10 : $20;
       $10 = $14 * (($18 < $20 ? $18 : $20) - $10) + .5;
       label$11 : {
        if ($10 < 4294967296.0 & $10 >= 0.0) {
         $2 = ~~$10 >>> 0;
         break label$11;
        }
        $2 = 0;
       }
       HEAP16[$3 >> 1] = $2;
       $3 = $1 + 8 | 0;
       $10 = $9 > $25 ? $9 : $25;
       $9 = $23 * (($10 > $12 ? $12 : $10) - $9) + .5;
       label$133 : {
        if ($9 < 4294967296.0 & $9 >= 0.0) {
         $2 = ~~$9 >>> 0;
         break label$133;
        }
        $2 = 0;
       }
       HEAP16[$3 >> 1] = $2;
       $2 = $1 + 10 | 0;
       $9 = $8 > $6 ? $8 : $6;
       $8 = $17 * (($9 > $15 ? $15 : $9) - $8) + .5;
       label$154 : {
        if ($8 < 4294967296.0 & $8 >= 0.0) {
         $1 = ~~$8 >>> 0;
         break label$154;
        }
        $1 = 0;
       }
       HEAP16[$2 >> 1] = $1;
       break label$32;
      }
      $8 = HEAPF64[$4 + 40 >> 3];
      $15 = HEAPF64[$4 + 104 >> 3];
      $9 = $8 + +HEAPU16[$1 + 26 >> 1] / $15;
      $12 = $9 > -1797693134862315708145274.0e284 ? $9 : -1797693134862315708145274.0e284;
      $9 = HEAPF64[$4 + 32 >> 3];
      $18 = HEAPF64[$4 + 96 >> 3];
      $10 = $9 + +HEAPU16[$1 + 24 >> 1] / $18;
      $6 = $10 > -1797693134862315708145274.0e284 ? $10 : -1797693134862315708145274.0e284;
      $10 = HEAPF64[$4 + 24 >> 3];
      $25 = HEAPF64[$4 + 88 >> 3];
      $17 = $10 + +HEAPU16[$1 + 22 >> 1] / $25;
      $17 = $17 > -1797693134862315708145274.0e284 ? $17 : -1797693134862315708145274.0e284;
      $23 = +HEAPU16[$1 + 20 >> 1] / $15 + $8;
      $23 = $23 < 1797693134862315708145274.0e284 ? $23 : 1797693134862315708145274.0e284;
      $20 = +HEAPU16[$1 + 18 >> 1] / $18 + $9;
      $20 = $20 < 1797693134862315708145274.0e284 ? $20 : 1797693134862315708145274.0e284;
      $26 = +HEAPU16[$1 + 16 >> 1] / $25 + $10;
      $26 = $26 < 1797693134862315708145274.0e284 ? $26 : 1797693134862315708145274.0e284;
      $2 = HEAP32[$1 + 28 >> 2];
      $2 = ((($2 | 0) >= 0 ? $2 : -1) - $2 | 0) + $7 | 0;
      if ($2) {
       $2 = ($2 << 4) + $11 | 0;
       $14 = $10 + +HEAPU16[$2 + 6 >> 1] / $25;
       $17 = $17 < $14 ? $14 : $17;
       $14 = +HEAPU16[$2 + 4 >> 1] / $15 + $8;
       $23 = $14 < $23 ? $14 : $23;
       $14 = +HEAPU16[$2 + 2 >> 1] / $18 + $9;
       $20 = $14 < $20 ? $14 : $20;
       $14 = +HEAPU16[$2 >> 1] / $25 + $10;
       $26 = $14 < $26 ? $14 : $26;
       $14 = $8 + +HEAPU16[$2 + 10 >> 1] / $15;
       $12 = $12 < $14 ? $14 : $12;
       $14 = $9 + +HEAPU16[$2 + 8 >> 1] / $18;
       $6 = $6 < $14 ? $14 : $6;
      }
      $3 = $1 + 10 | 0;
      $14 = HEAPF64[$4 + 72 >> 3];
      $12 = $8 > $12 ? $8 : $12;
      $12 = $15 * (($12 > $14 ? $14 : $12) - $8) + .5;
      label$18 : {
       if ($12 < 4294967296.0 & $12 >= 0.0) {
        $2 = ~~$12 >>> 0;
        break label$18;
       }
       $2 = 0;
      }
      HEAP16[$3 >> 1] = $2;
      $3 = $1 + 8 | 0;
      $12 = HEAPF64[$4 + 64 >> 3];
      $6 = $6 < $9 ? $9 : $6;
      $6 = $18 * (($6 > $12 ? $12 : $6) - $9) + .5;
      label$20 : {
       if ($6 < 4294967296.0 & $6 >= 0.0) {
        $2 = ~~$6 >>> 0;
        break label$20;
       }
       $2 = 0;
      }
      HEAP16[$3 >> 1] = $2;
      $3 = $1 + 6 | 0;
      $6 = HEAPF64[$4 + 56 >> 3];
      $17 = $10 > $17 ? $10 : $17;
      $17 = $25 * (($6 < $17 ? $6 : $17) - $10) + .5;
      label$22 : {
       if ($17 < 4294967296.0 & $17 >= 0.0) {
        $2 = ~~$17 >>> 0;
        break label$22;
       }
       $2 = 0;
      }
      HEAP16[$3 >> 1] = $2;
      $3 = $1 + 4 | 0;
      $17 = $8 > $23 ? $8 : $23;
      $8 = (($17 > $14 ? $14 : $17) - $8) * $15 + .5;
      label$24 : {
       if ($8 < 4294967296.0 & $8 >= 0.0) {
        $2 = ~~$8 >>> 0;
        break label$24;
       }
       $2 = 0;
      }
      HEAP16[$3 >> 1] = $2;
      $3 = $1 + 2 | 0;
      $8 = $9 > $20 ? $9 : $20;
      $8 = (($8 > $12 ? $12 : $8) - $9) * $18 + .5;
      label$26 : {
       if ($8 < 4294967296.0 & $8 >= 0.0) {
        $2 = ~~$8 >>> 0;
        break label$26;
       }
       $2 = 0;
      }
      HEAP16[$3 >> 1] = $2;
      $8 = $10 > $26 ? $10 : $26;
      $8 = (($8 > $6 ? $6 : $8) - $10) * $25 + .5;
      label$28 : {
       if ($8 < 4294967296.0 & $8 >= 0.0) {
        $2 = ~~$8 >>> 0;
        break label$28;
       }
       $2 = 0;
      }
      HEAP16[$1 >> 1] = $2;
     }
     $13 = $13 - 16 | 0;
     $7 = $7 - 1 | 0;
     if (($7 | 0) != 1) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $5 - -64 | 0;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  $1 = HEAP32[$0 + 144 >> 2];
  $4 = HEAPU16[$1 + 8 >> 1];
  $5 = HEAPU16[$1 + 10 >> 1];
  $2 = HEAPU16[$1 >> 1];
  $13 = HEAPU16[$1 + 2 >> 1];
  $7 = HEAPU16[$1 + 4 >> 1];
  $1 = HEAPU16[$1 + 6 >> 1];
  $11 = $0 + 80 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  $11 = $0 + 48 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  $8 = HEAPF64[$0 + 152 >> 3];
  $9 = HEAPF64[$0 + 216 >> 3];
  HEAPF64[$0 + 56 >> 3] = $8 + +($1 >>> 0) / $9;
  $10 = HEAPF64[$0 + 232 >> 3];
  $15 = HEAPF64[$0 + 168 >> 3];
  HEAPF64[$0 + 40 >> 3] = +($7 >>> 0) / $10 + $15;
  $12 = HEAPF64[$0 + 224 >> 3];
  $18 = HEAPF64[$0 + 160 >> 3];
  HEAPF64[$0 + 32 >> 3] = +($13 >>> 0) / $12 + $18;
  HEAPF64[$0 + 24 >> 3] = $8 + +($2 >>> 0) / $9;
  HEAPF64[$0 + 72 >> 3] = $15 + +($5 >>> 0) / $10;
  HEAPF64[$0 - -64 >> 3] = $18 + +($4 >>> 0) / $12;
 }
 
 function btGImpactShapeInterface__postUpdate_28_29($0) {
  $0 = $0 | 0;
  HEAP8[$0 + 88 | 0] = 1;
 }
 
 function btGImpactShapeInterface__getShapeType_28_29_20const($0) {
  $0 = $0 | 0;
  return 25;
 }
 
 function btGImpactShapeInterface__lockChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function btGImpactMeshShapePart__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 280 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 304 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 296 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 288 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function btGImpactMeshShapePart__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 280 | 0;
 }
 
 function btGImpactMeshShapePart__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 2834;
 }
 
 function btGImpactMeshShapePart__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 264 >> 3] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function btGImpactMeshShapePart__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 264 >> 3];
 }
 
 function btGImpactMeshShapePart__getPrimitiveManager_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 256 | 0;
 }
 
 function btGImpactMeshShapePart__getNumChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 344 >> 2];
 }
 
 function btGImpactMeshShapePart__getBulletTriangle_28int_2c_20btTriangleShapeEx__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $0 = $0 + 256 | 0;
  $1 = HEAP32[$0 + 80 >> 2] + Math_imul(HEAP32[$0 + 84 >> 2], $1) | 0;
  $5 = HEAP32[$0 + 64 >> 2];
  label$1 : {
   if (HEAP32[$0 + 92 >> 2] == 3) {
    $6 = HEAPU16[$1 + 4 >> 1];
    $4 = HEAPU16[$1 + 2 >> 1];
    $1 = HEAPU16[$1 >> 1];
    break label$1;
   }
   $6 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 4 >> 2];
   $1 = HEAP32[$1 >> 2];
  }
  $1 = $5 + Math_imul($1, HEAP32[$0 + 76 >> 2]) | 0;
  $7 = $2 + 120 | 0;
  label$3 : {
   if (HEAP32[$0 + 72 >> 2] == 1) {
    HEAPF64[$2 + 104 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 24 >> 3];
    HEAPF64[$2 + 112 >> 3] = HEAPF64[$1 + 8 >> 3] * HEAPF64[$0 + 32 >> 3];
    $5 = $1 + 16 | 0;
    $3 = HEAPF64[$0 + 40 >> 3];
    break label$3;
   }
   HEAPF64[$2 + 104 >> 3] = HEAPF64[$0 + 24 >> 3] * +HEAPF32[$1 >> 2];
   HEAPF64[$2 + 112 >> 3] = HEAPF64[$0 + 32 >> 3] * +HEAPF32[$1 + 4 >> 2];
   $5 = $0 + 40 | 0;
   $3 = +HEAPF32[$1 + 8 >> 2];
  }
  HEAPF64[$7 >> 3] = $3 * HEAPF64[$5 >> 3];
  $1 = HEAP32[$0 + 64 >> 2] + Math_imul(HEAP32[$0 + 76 >> 2], $4) | 0;
  $5 = $2 + 152 | 0;
  label$5 : {
   if (HEAP32[$0 + 72 >> 2] == 1) {
    HEAPF64[$2 + 136 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 24 >> 3];
    HEAPF64[$2 + 144 >> 3] = HEAPF64[$1 + 8 >> 3] * HEAPF64[$0 + 32 >> 3];
    $4 = $1 + 16 | 0;
    $3 = HEAPF64[$0 + 40 >> 3];
    break label$5;
   }
   HEAPF64[$2 + 136 >> 3] = HEAPF64[$0 + 24 >> 3] * +HEAPF32[$1 >> 2];
   HEAPF64[$2 + 144 >> 3] = HEAPF64[$0 + 32 >> 3] * +HEAPF32[$1 + 4 >> 2];
   $4 = $0 + 40 | 0;
   $3 = +HEAPF32[$1 + 8 >> 2];
  }
  HEAPF64[$5 >> 3] = $3 * HEAPF64[$4 >> 3];
  $1 = HEAP32[$0 + 64 >> 2] + Math_imul(HEAP32[$0 + 76 >> 2], $6) | 0;
  $4 = $2 + 184 | 0;
  label$7 : {
   if (HEAP32[$0 + 72 >> 2] == 1) {
    HEAPF64[$2 + 168 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 24 >> 3];
    HEAPF64[$2 + 176 >> 3] = HEAPF64[$1 + 8 >> 3] * HEAPF64[$0 + 32 >> 3];
    $6 = $1 + 16 | 0;
    $3 = HEAPF64[$0 + 40 >> 3];
    break label$7;
   }
   HEAPF64[$2 + 168 >> 3] = HEAPF64[$0 + 24 >> 3] * +HEAPF32[$1 >> 2];
   HEAPF64[$2 + 176 >> 3] = HEAPF64[$0 + 32 >> 3] * +HEAPF32[$1 + 4 >> 2];
   $6 = $0 + 40 | 0;
   $3 = +HEAPF32[$1 + 8 >> 2];
  }
  HEAPF64[$4 >> 3] = $3 * HEAPF64[$6 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 44 >> 2]]($2, HEAPF64[$0 + 8 >> 3]);
 }
 
 function btGImpactShapeInterface__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $5);
  $13 = HEAPF64[$2 + 112 >> 3];
  $11 = HEAPF64[$2 + 72 >> 3];
  $17 = HEAPF64[$2 + 80 >> 3];
  $25 = HEAPF64[$2 + 96 >> 3];
  $18 = HEAPF64[$2 + 16 >> 3];
  $19 = HEAPF64[$2 >> 3];
  $20 = HEAPF64[$2 + 8 >> 3];
  $21 = HEAPF64[$2 + 64 >> 3];
  $0 = $5 + 48 | 0;
  $8 = HEAPF64[$0 >> 3];
  $1 = $5 + 16 | 0;
  $6 = ($8 + HEAPF64[$1 >> 3]) * .5;
  $9 = HEAPF64[$2 + 48 >> 3];
  $10 = HEAPF64[$5 + 32 >> 3];
  $7 = ($10 + HEAPF64[$5 >> 3]) * .5;
  $12 = HEAPF64[$2 + 32 >> 3];
  $14 = $5 + 40 | 0;
  $22 = HEAPF64[$14 >> 3];
  $15 = $5 + 8 | 0;
  $16 = ($22 + HEAPF64[$15 >> 3]) * .5;
  $23 = HEAPF64[$2 + 40 >> 3];
  $24 = $6 * $9 + ($7 * $12 + $16 * $23) + HEAPF64[$2 + 104 >> 3];
  $8 = $8 - $6;
  $26 = $8 * Math_abs($9);
  $9 = $10 - $7;
  $10 = $22 - $16;
  $12 = $26 + ($9 * Math_abs($12) + $10 * Math_abs($23));
  HEAPF64[$15 >> 3] = $24 - $12;
  $13 = $13 + ($6 * $17 + ($7 * $21 + $16 * $11));
  $11 = $8 * Math_abs($17) + ($9 * Math_abs($21) + $10 * Math_abs($11));
  HEAPF64[$1 >> 3] = $13 - $11;
  $2 = $3 + 24 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $6 = $25 + ($6 * $18 + ($7 * $19 + $16 * $20));
  $7 = $8 * Math_abs($18) + ($9 * Math_abs($19) + $10 * Math_abs($20));
  HEAPF64[$5 >> 3] = $6 - $7;
  $2 = HEAP32[$5 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $27 = HEAP32[$15 + 4 >> 2];
  $2 = $3 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$2 + 4 >> 2] = $27;
  $2 = $3 + 16 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAPF64[$0 >> 3] = $11 + $13;
  HEAPF64[$14 >> 3] = $12 + $24;
  $1 = $4 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $4 + 16 | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $1 = HEAP32[$14 + 4 >> 2];
  $0 = $4 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  HEAPF64[$5 + 32 >> 3] = $7 + $6;
  $0 = HEAP32[$5 + 36 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$5 + 32 >> 2];
  HEAP32[$4 + 4 >> 2] = $0;
  __stack_pointer = $5 - -64 | 0;
 }
 
 function btGImpactMeshShape___btGImpactMeshShape_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 >> 2] = 9888;
  $1 = HEAP32[$0 + 264 >> 2];
  label$1 : {
   if (!$1) {
    break label$1
   }
   $3 = $1;
   label$2 : {
    if (!($1 & 1)) {
     break label$2
    }
    $3 = $1 - 1 | 0;
    $2 = HEAP32[HEAP32[$0 + 272 >> 2] + ($3 << 2) >> 2];
    if (!$2) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
   }
   if (($1 | 0) == 1) {
    break label$1
   }
   $2 = ($3 << 2) - 4 | 0;
   while (1) {
    $1 = HEAP32[HEAP32[$0 + 272 >> 2] + $2 >> 2];
    if ($1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1)
    }
    $3 = $3 - 2 | 0;
    $1 = HEAP32[(HEAP32[$0 + 272 >> 2] + $2 | 0) - 4 >> 2];
    if ($1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1)
    }
    $2 = $2 - 8 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 272 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 276 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 272 >> 2] = 0;
  HEAP8[$0 + 276 | 0] = 1;
  HEAP32[$0 + 264 >> 2] = 0;
  HEAP32[$0 + 268 >> 2] = 0;
  HEAP32[$0 >> 2] = 10080;
  $1 = HEAP32[$0 + 144 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 148 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP8[$0 + 148 | 0] = 1;
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btGImpactMeshShape___btGImpactMeshShape_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btGImpactMeshShape___btGImpactMeshShape_28_29($0));
 }
 
 function btGImpactMeshShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 96 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 100 >> 2] = $4;
  $2 = $1 + 24 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 120 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $1 + 16 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 112 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $1 + 8 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 104 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = HEAP32[$0 + 264 >> 2];
  label$1 : {
   if (!$2) {
    break label$1
   }
   $4 = $2;
   if ($2 & 1) {
    $4 = $2 - 1 | 0;
    $3 = HEAP32[HEAP32[$0 + 272 >> 2] + ($4 << 2) >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $1);
   }
   if (($2 | 0) == 1) {
    break label$1
   }
   $3 = ($4 << 2) - 4 | 0;
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 272 >> 2] + $3 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $1);
    $2 = HEAP32[(HEAP32[$0 + 272 >> 2] + $3 | 0) - 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $1);
    $3 = $3 - 8 | 0;
    $4 = $4 - 2 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 88 | 0] = 1;
 }
 
 function btGImpactMeshShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 3477;
 }
 
 function btGImpactMeshShape__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAPF64[$0 + 16 >> 3] = $1;
  $2 = HEAP32[$0 + 264 >> 2];
  label$1 : {
   if (!$2) {
    break label$1
   }
   $4 = $2;
   if ($2 & 1) {
    $4 = $2 - 1 | 0;
    $3 = HEAP32[HEAP32[$0 + 272 >> 2] + ($4 << 2) >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $1);
   }
   if (($2 | 0) == 1) {
    break label$1
   }
   $3 = ($4 << 2) - 4 | 0;
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 272 >> 2] + $3 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 44 >> 2]]($2, $1);
    $2 = HEAP32[(HEAP32[$0 + 272 >> 2] + $3 | 0) - 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 44 >> 2]]($2, $1);
    $3 = $3 - 8 | 0;
    $4 = $4 - 2 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 88 | 0] = 1;
 }
 
 function btGImpactMeshShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 64;
 }
 
 function btGImpactMeshShape__calcLocalAABB_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0;
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = 2146435071;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1048577;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1048577;
  $12 = $0 + 56 | 0;
  $1 = $12;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1048577;
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = 2146435071;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = 2146435071;
  $3 = HEAP32[$0 + 264 >> 2];
  if ($3) {
   $14 = $0 + 24 | 0;
   $7 = ($3 << 2) - 4 | 0;
   $13 = HEAP32[$0 + 272 >> 2];
   $8 = 1797693134862315708145274.0e284;
   $9 = -1797693134862315708145274.0e284;
   $10 = -1797693134862315708145274.0e284;
   $4 = -1797693134862315708145274.0e284;
   $11 = 1797693134862315708145274.0e284;
   $5 = 1797693134862315708145274.0e284;
   while (1) {
    $3 = $3 - 1 | 0;
    $1 = HEAP32[$7 + $13 >> 2];
    if (HEAPU8[$1 + 88 | 0]) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($1);
     HEAP8[$1 + 88 | 0] = 0;
     $9 = HEAPF64[$0 + 72 >> 3];
     $10 = HEAPF64[$0 + 64 >> 3];
     $8 = HEAPF64[$0 + 40 >> 3];
     $11 = HEAPF64[$0 + 32 >> 3];
     $4 = HEAPF64[$0 + 56 >> 3];
     $5 = HEAPF64[$0 + 24 >> 3];
     $13 = HEAP32[$0 + 272 >> 2];
     $1 = HEAP32[$13 + $7 >> 2];
    }
    $6 = HEAPF64[$1 + 24 >> 3];
    $5 = $5 > $6 ? $6 : $5;
    HEAPF64[$0 + 24 >> 3] = $5;
    $2 = $1 + 24 | 0;
    $11 = HEAPF64[(HEAPF64[$1 + 32 >> 3] < $11 ? $2 : $14) + 8 >> 3];
    HEAPF64[$0 + 32 >> 3] = $11;
    $8 = HEAPF64[(HEAPF64[$1 + 40 >> 3] < $8 ? $2 : $14) + 16 >> 3];
    HEAPF64[$0 + 40 >> 3] = $8;
    $2 = $1 + 56 | 0;
    $6 = HEAPF64[$2 >> 3];
    $4 = $4 < $6 ? $6 : $4;
    HEAPF64[$0 + 56 >> 3] = $4;
    $10 = HEAPF64[(HEAPF64[$1 - -64 >> 3] > $10 ? $2 : $12) + 8 >> 3];
    HEAPF64[$0 + 64 >> 3] = $10;
    $9 = HEAPF64[(HEAPF64[$1 + 72 >> 3] > $9 ? $2 : $12) + 16 >> 3];
    HEAPF64[$0 + 72 >> 3] = $9;
    $7 = $7 - 4 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
 }
 
 function btGImpactMeshShape__postUpdate_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = HEAP32[$0 + 264 >> 2];
  label$1 : {
   if (!$1) {
    break label$1
   }
   $3 = $1;
   if ($1 & 1) {
    $3 = $1 - 1 | 0;
    $2 = HEAP32[HEAP32[$0 + 272 >> 2] + ($3 << 2) >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 72 >> 2]]($2);
   }
   if (($1 | 0) == 1) {
    break label$1
   }
   $2 = ($3 << 2) - 4 | 0;
   while (1) {
    $1 = HEAP32[HEAP32[$0 + 272 >> 2] + $2 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 72 >> 2]]($1);
    $1 = HEAP32[(HEAP32[$0 + 272 >> 2] + $2 | 0) - 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 72 >> 2]]($1);
    $2 = $2 - 8 | 0;
    $3 = $3 - 2 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 88 | 0] = 1;
 }
 
 function btGImpactMeshShape__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
 }
 
 function btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_count_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 88 >> 2];
 }
 
 function btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_box_28int_2c_20btAABB__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 128 >> 2] = 1073741824;
  HEAP32[$3 + 132 >> 2] = 1065646817;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $3);
  $0 = $3 - -64 | 0;
  $19 = $3 + 32 | 0;
  $4 = HEAPF64[$3 >> 3];
  $5 = HEAPF64[$3 + 32 >> 3];
  $6 = HEAPF64[$3 + 64 >> 3];
  label$1 : {
   label$2 : {
    if ($5 > $6) {
     $14 = $0;
     if (!($4 > $6)) {
      break label$2
     }
     break label$1;
    }
    $14 = $19;
    if ($4 > $5) {
     break label$1
    }
   }
   $14 = $3;
  }
  $20 = $3 + 8 | 0;
  $7 = HEAPF64[$3 + 8 >> 3];
  $15 = $3 + 40 | 0;
  $8 = HEAPF64[$15 >> 3];
  $1 = $3 + 72 | 0;
  $9 = HEAPF64[$1 >> 3];
  label$4 : {
   label$5 : {
    if ($8 > $9) {
     $16 = $1;
     if (!($7 > $9)) {
      break label$5
     }
     break label$4;
    }
    $16 = $15;
    if ($7 > $8) {
     break label$4
    }
   }
   $16 = $20;
  }
  $21 = $3 + 16 | 0;
  $11 = HEAPF64[$3 + 16 >> 3];
  $17 = $3 + 48 | 0;
  $12 = HEAPF64[$17 >> 3];
  $10 = $3 + 80 | 0;
  $13 = HEAPF64[$10 >> 3];
  label$7 : {
   label$8 : {
    if ($12 > $13) {
     $18 = $10;
     if (!($11 > $13)) {
      break label$8
     }
     break label$7;
    }
    $18 = $17;
    if ($11 > $12) {
     break label$7
    }
   }
   $18 = $21;
  }
  label$10 : {
   label$11 : {
    if ($5 < $6) {
     if (!($4 < $6)) {
      break label$11
     }
     break label$10;
    }
    $0 = $19;
    if ($4 < $5) {
     break label$10
    }
   }
   $0 = $3;
  }
  label$13 : {
   label$14 : {
    if ($8 < $9) {
     if (!($7 < $9)) {
      break label$14
     }
     break label$13;
    }
    $1 = $15;
    if ($7 < $8) {
     break label$13
    }
   }
   $1 = $20;
  }
  $4 = HEAPF64[$3 + 128 >> 3];
  $7 = HEAPF64[$14 >> 3];
  $5 = HEAPF64[$16 >> 3];
  $6 = HEAPF64[$18 >> 3];
  $8 = HEAPF64[$0 >> 3];
  $9 = HEAPF64[$1 >> 3];
  label$16 : {
   label$17 : {
    if ($12 < $13) {
     if (!($11 < $13)) {
      break label$17
     }
     break label$16;
    }
    $10 = $17;
    if ($11 < $12) {
     break label$16
    }
   }
   $10 = $21;
  }
  HEAPF64[$2 + 40 >> 3] = $4 + $9;
  HEAPF64[$2 + 32 >> 3] = $4 + $8;
  HEAPF64[$2 + 16 >> 3] = $6 - $4;
  HEAPF64[$2 + 8 >> 3] = $5 - $4;
  HEAPF64[$2 >> 3] = $7 - $4;
  HEAPF64[$2 + 48 >> 3] = $4 + HEAPF64[$10 >> 3];
  __stack_pointer = $3 + 144 | 0;
 }
 
 function btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_triangle_28int_2c_20btPrimitiveTriangle__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
  $1 = HEAP32[$0 + 80 >> 2] + Math_imul(HEAP32[$0 + 84 >> 2], $1) | 0;
  $5 = HEAP32[$0 + 64 >> 2];
  label$1 : {
   if (HEAP32[$0 + 92 >> 2] == 3) {
    $6 = HEAPU16[$1 + 4 >> 1];
    $4 = HEAPU16[$1 + 2 >> 1];
    $1 = HEAPU16[$1 >> 1];
    break label$1;
   }
   $6 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 4 >> 2];
   $1 = HEAP32[$1 >> 2];
  }
  $1 = $5 + Math_imul($1, HEAP32[$0 + 76 >> 2]) | 0;
  label$3 : {
   if (HEAP32[$0 + 72 >> 2] == 1) {
    HEAPF64[$2 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 24 >> 3];
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$1 + 8 >> 3] * HEAPF64[$0 + 32 >> 3];
    $5 = $1 + 16 | 0;
    $3 = HEAPF64[$0 + 40 >> 3];
    break label$3;
   }
   HEAPF64[$2 >> 3] = HEAPF64[$0 + 24 >> 3] * +HEAPF32[$1 >> 2];
   HEAPF64[$2 + 8 >> 3] = HEAPF64[$0 + 32 >> 3] * +HEAPF32[$1 + 4 >> 2];
   $5 = $0 + 40 | 0;
   $3 = +HEAPF32[$1 + 8 >> 2];
  }
  HEAPF64[$2 + 16 >> 3] = $3 * HEAPF64[$5 >> 3];
  $1 = HEAP32[$0 + 64 >> 2] + Math_imul(HEAP32[$0 + 76 >> 2], $4) | 0;
  $5 = $2 + 48 | 0;
  label$5 : {
   if (HEAP32[$0 + 72 >> 2] == 1) {
    HEAPF64[$2 + 32 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 24 >> 3];
    HEAPF64[$2 + 40 >> 3] = HEAPF64[$1 + 8 >> 3] * HEAPF64[$0 + 32 >> 3];
    $4 = $1 + 16 | 0;
    $3 = HEAPF64[$0 + 40 >> 3];
    break label$5;
   }
   HEAPF64[$2 + 32 >> 3] = HEAPF64[$0 + 24 >> 3] * +HEAPF32[$1 >> 2];
   HEAPF64[$2 + 40 >> 3] = HEAPF64[$0 + 32 >> 3] * +HEAPF32[$1 + 4 >> 2];
   $4 = $0 + 40 | 0;
   $3 = +HEAPF32[$1 + 8 >> 2];
  }
  HEAPF64[$5 >> 3] = $3 * HEAPF64[$4 >> 3];
  $1 = HEAP32[$0 + 64 >> 2] + Math_imul(HEAP32[$0 + 76 >> 2], $6) | 0;
  $4 = $2 + 80 | 0;
  label$7 : {
   if (HEAP32[$0 + 72 >> 2] == 1) {
    HEAPF64[$2 + 64 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 24 >> 3];
    HEAPF64[$2 + 72 >> 3] = HEAPF64[$1 + 8 >> 3] * HEAPF64[$0 + 32 >> 3];
    $6 = $1 + 16 | 0;
    $3 = HEAPF64[$0 + 40 >> 3];
    break label$7;
   }
   HEAPF64[$2 + 64 >> 3] = HEAPF64[$0 + 24 >> 3] * +HEAPF32[$1 >> 2];
   HEAPF64[$2 + 72 >> 3] = HEAPF64[$0 + 32 >> 3] * +HEAPF32[$1 + 4 >> 2];
   $6 = $0 + 40 | 0;
   $3 = +HEAPF32[$1 + 8 >> 2];
  }
  HEAPF64[$4 >> 3] = $3 * HEAPF64[$6 >> 3];
  HEAPF64[$2 + 128 >> 3] = HEAPF64[$0 + 8 >> 3];
 }
 
 function btTriangleMeshShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0;
  $16 = $0 + 40 | 0;
  $7 = HEAPF64[$16 >> 3];
  $17 = $0 + 72 | 0;
  $5 = HEAPF64[$17 >> 3];
  $18 = $0 + 32 | 0;
  $24 = HEAPF64[$18 >> 3];
  $19 = $0 - -64 | 0;
  $25 = HEAPF64[$19 >> 3];
  $26 = HEAPF64[$0 + 24 >> 3];
  $27 = HEAPF64[$0 + 56 >> 3];
  $28 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $29 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $30 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $31 = HEAPF64[$1 + 104 >> 3];
  $8 = HEAPF64[$1 + 48 >> 3];
  $9 = HEAPF64[$1 + 40 >> 3];
  $10 = HEAPF64[$1 + 112 >> 3];
  $11 = HEAPF64[$18 >> 3];
  $14 = HEAPF64[$19 >> 3];
  $12 = HEAPF64[$16 >> 3];
  $32 = HEAPF64[$17 >> 3];
  $4 = HEAPF64[$1 + 80 >> 3];
  $13 = HEAPF64[$1 + 72 >> 3];
  $33 = HEAPF64[$1 + 96 >> 3];
  $20 = HEAPF64[$1 + 16 >> 3];
  $21 = HEAPF64[$1 >> 3];
  $22 = HEAPF64[$1 + 8 >> 3];
  $23 = HEAPF64[$1 + 32 >> 3];
  $34 = HEAPF64[$0 + 24 >> 3];
  $35 = HEAPF64[$0 + 56 >> 3];
  $6 = HEAPF64[$1 + 64 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $15 = $10;
  $10 = ($32 + $12) * .5;
  $12 = ($35 + $34) * .5;
  $11 = ($14 + $11) * .5;
  $14 = $15 + ($4 * $10 + ($6 * $12 + $13 * $11));
  $7 = $30 + ($5 - $7) * .5;
  $15 = $7 * Math_abs($4);
  $4 = $28 + ($27 - $26) * .5;
  $5 = $4 * Math_abs($6);
  $6 = $29 + ($25 - $24) * .5;
  $13 = $15 + ($5 + $6 * Math_abs($13));
  HEAPF64[$2 + 16 >> 3] = $14 - $13;
  $5 = $31 + ($10 * $8 + ($12 * $23 + $11 * $9));
  $8 = $7 * Math_abs($8) + ($4 * Math_abs($23) + $6 * Math_abs($9));
  HEAPF64[$2 + 8 >> 3] = $5 - $8;
  $9 = $33 + ($10 * $20 + ($12 * $21 + $11 * $22));
  $4 = $7 * Math_abs($20) + ($4 * Math_abs($21) + $6 * Math_abs($22));
  HEAPF64[$2 >> 3] = $9 - $4;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $13 + $14;
  HEAPF64[$3 + 8 >> 3] = $8 + $5;
  HEAPF64[$3 >> 3] = $4 + $9;
 }
 
 function btTriangleMeshShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[$1 + 4 >> 2];
  $5 = HEAP32[$0 + 88 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 12 >> 2] = $3;
  $4 = $1 + 24 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $3 = $5 + 32 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $4 = $1 + 16 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $3 = $5 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $5 = $5 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $8 = $2 - -64 | 0;
  $7 = $8 + 24 | 0;
  $1 = $7;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $8 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = $8 + 8 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 68 >> 2] = 1072693248;
  $11 = $2 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($11, $0, $8);
  HEAPF64[$0 + 56 >> 3] = HEAPF64[$2 + 32 >> 3] + HEAPF64[$0 + 16 >> 3];
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 68 >> 2] = -1074790400;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($2, $0, $8);
  $12 = $2 + 24 | 0;
  $4 = $12;
  $10 = HEAP32[$4 + 4 >> 2];
  $13 = $11 + 24 | 0;
  $3 = $13;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $10;
  $10 = $2 + 16 | 0;
  $4 = $10;
  $9 = HEAP32[$4 + 4 >> 2];
  $3 = $11 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $9;
  $9 = $2 + 8 | 0;
  $6 = HEAP32[$9 + 4 >> 2];
  $4 = $11 + 8 | 0;
  HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $6 = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$2 + 36 >> 2] = $6;
  HEAPF64[$0 + 24 >> 3] = HEAPF64[$2 + 32 >> 3] - HEAPF64[$0 + 16 >> 3];
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 1072693248;
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($11, $0, $8);
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = -1074790400;
  HEAPF64[$0 - -64 >> 3] = HEAPF64[$4 >> 3] + HEAPF64[$0 + 16 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($2, $0, $8);
  $6 = HEAP32[$12 + 4 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$13 + 4 >> 2] = $6;
  $6 = HEAP32[$10 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $6 = HEAP32[$9 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $6 = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$2 + 36 >> 2] = $6;
  HEAPF64[$0 + 32 >> 3] = HEAPF64[$4 >> 3] - HEAPF64[$0 + 16 >> 3];
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($11, $0, $8);
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1074790400;
  HEAPF64[$0 + 72 >> 3] = HEAPF64[$3 >> 3] + HEAPF64[$0 + 16 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($2, $0, $8);
  $1 = HEAP32[$12 + 4 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$13 + 4 >> 2] = $1;
  $1 = HEAP32[$10 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = HEAP32[$9 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$4 + 4 >> 2] = $1;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$2 + 36 >> 2] = $1;
  HEAPF64[$0 + 40 >> 3] = HEAPF64[$3 >> 3] - HEAPF64[$0 + 16 >> 3];
  __stack_pointer = $2 + 96 | 0;
 }
 
 function btTriangleMeshShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 88 >> 2] + 8 | 0;
 }
 
 function btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  $4 = $2 + 8 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $8 = $6 + 8 | 0;
  $5 = $8 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $4 = $2 + 16 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $5 = $8 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $4 = $2 + 24 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $5 = $6 + 40 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $4 = $3 + 24 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $5 = $6 + 72 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $4 = $3 + 16 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $5 = $6 - -64 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $4 = $3 + 8 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $5 = $6 + 56 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  HEAP32[$6 + 12 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = 10488;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 20 >> 2] = $1;
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$6 + 48 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 52 >> 2] = $1;
  $0 = HEAP32[$0 + 88 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $8, $2, $3);
  __stack_pointer = $6 + 80 | 0;
 }
 
 function btTriangleMeshShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0;
  $3 = __stack_pointer - 304 | 0;
  __stack_pointer = $3;
  $5 = $3 + 272 | 0;
  $6 = $5 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $5 + 16 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $5 = $5 + 8 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 272 >> 2] = 0;
  HEAP32[$3 + 276 >> 2] = 0;
  $10 = $3 - -64 | 0;
  $5 = $10 + 16 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $6 = $10 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $9 = $3 + 96 | 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  $11 = $3 + 112 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  $12 = $3 + 120 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  $7 = $3 + 128 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 + 136 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 + 152 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $8 = $3 + 144 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 1072693248;
  $8 = $3 + 160 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $3 + 168 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $13 = $3 + 176 | 0;
  HEAP32[$13 >> 2] = 0;
  HEAP32[$13 + 4 >> 2] = 0;
  $4 = $3 + 184 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 1072693248;
  $4 = $3 + 224 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 216 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 208 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 200 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 192 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 0;
  HEAP32[$3 + 76 >> 2] = 0;
  HEAP32[$3 + 64 >> 2] = 10624;
  HEAP32[$3 + 104 >> 2] = 0;
  HEAP32[$3 + 108 >> 2] = 1072693248;
  $4 = $3 + 264 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $14 = HEAPF64[$2 + 16 >> 3];
  $15 = HEAPF64[$2 >> 3];
  $16 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$3 + 256 >> 3] = $14 + (HEAPF64[$12 >> 3] * $15 + $16 * HEAPF64[$7 >> 3]);
  HEAPF64[$3 + 248 >> 3] = $14 * HEAPF64[$13 >> 3] + ($16 + $15 * HEAPF64[$11 >> 3]);
  HEAP32[$3 + 232 >> 2] = 966823146;
  HEAP32[$3 + 236 >> 2] = -970375591;
  HEAPF64[$3 + 240 >> 3] = $14 * HEAPF64[$8 >> 3] + ($15 + $16 * 0.0);
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAP32[$3 + 48 >> 2] = 966823146;
  HEAP32[$3 + 52 >> 2] = 1177108057;
  HEAP32[$3 + 40 >> 2] = 966823146;
  HEAP32[$3 + 44 >> 2] = 1177108057;
  HEAP32[$3 + 32 >> 2] = 966823146;
  HEAP32[$3 + 36 >> 2] = 1177108057;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 966823146;
  HEAP32[$3 + 20 >> 2] = -970375591;
  HEAP32[$3 + 8 >> 2] = 966823146;
  HEAP32[$3 + 12 >> 2] = -970375591;
  HEAP32[$3 >> 2] = 966823146;
  HEAP32[$3 + 4 >> 2] = -970375591;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 64 >> 2]]($1, $10, $3, $3 + 32 | 0);
  $1 = HEAP32[$9 + 4 >> 2];
  $2 = $0 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = HEAP32[$6 + 4 >> 2];
  $2 = $0 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = HEAP32[$5 + 4 >> 2];
  $2 = $0 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = HEAP32[$3 + 76 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3 + 72 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  __stack_pointer = $3 + 304 | 0;
 }
 
 function btTriangleMeshShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4257;
 }
 
 function btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__FilteredCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0;
  label$1 : {
   $5 = HEAPF64[$1 >> 3];
   $6 = HEAPF64[$1 + 32 >> 3];
   $8 = $5 < $6 ? $5 : $6;
   $7 = HEAPF64[$1 + 64 >> 3];
   if (HEAPF64[$0 + 40 >> 3] < ($7 > $8 ? $8 : $7)) {
    break label$1
   }
   $4 = !($5 > $6) << 5;
   if (HEAPF64[($7 < HEAPF64[$1 + $4 >> 3] ? $4 : 64) + $1 >> 3] < HEAPF64[$0 + 8 >> 3]) {
    break label$1
   }
   $5 = HEAPF64[$1 + 16 >> 3];
   $4 = $1 + 48 | 0;
   $6 = HEAPF64[$4 >> 3];
   $8 = $5 < $6 ? $5 : $6;
   $9 = $1 + 80 | 0;
   $7 = HEAPF64[$9 >> 3];
   if (HEAPF64[$0 + 56 >> 3] < ($7 > $8 ? $8 : $7)) {
    break label$1
   }
   $4 = $5 > $6 ? $1 + 16 | 0 : $4;
   if (HEAPF64[($7 < HEAPF64[$4 >> 3] ? $4 : $9) >> 3] < HEAPF64[$0 + 24 >> 3]) {
    break label$1
   }
   $5 = HEAPF64[$1 + 8 >> 3];
   $4 = $1 + 40 | 0;
   $6 = HEAPF64[$4 >> 3];
   $8 = $5 < $6 ? $5 : $6;
   $9 = $1 + 72 | 0;
   $7 = HEAPF64[$9 >> 3];
   if (HEAPF64[$0 + 48 >> 3] < ($7 > $8 ? $8 : $7)) {
    break label$1
   }
   $4 = $5 > $6 ? $1 + 8 | 0 : $4;
   if (HEAPF64[($7 < HEAPF64[$4 >> 3] ? $4 : $9) >> 3] < HEAPF64[$0 + 16 >> 3]) {
    break label$1
   }
   $0 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
  }
 }
 
 function SupportVertexCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0;
  $2 = $0 + 8 | 0;
  $7 = HEAPF64[$0 + 168 >> 3];
  $8 = HEAPF64[$0 + 192 >> 3];
  $9 = HEAPF64[$0 + 176 >> 3];
  $10 = HEAPF64[$0 + 184 >> 3];
  $6 = $8 * HEAPF64[$1 + 16 >> 3] + ($9 * HEAPF64[$1 >> 3] + $10 * HEAPF64[$1 + 8 >> 3]);
  if ($7 < $6) {
   HEAPF64[$0 + 168 >> 3] = $6;
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   $4 = $1 + 8 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $3 = $2 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 + 4 >> 2] = $5;
   $4 = $1 + 16 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $3 = $2 + 16 | 0;
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 + 4 >> 2] = $5;
   $4 = $1 + 24 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $3 = $2 + 24 | 0;
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 + 4 >> 2] = $5;
   $7 = $6;
  }
  $6 = $8 * HEAPF64[$1 + 48 >> 3] + ($9 * HEAPF64[$1 + 32 >> 3] + $10 * HEAPF64[$1 + 40 >> 3]);
  if ($7 < $6) {
   HEAPF64[$0 + 168 >> 3] = $6;
   $3 = $1 + 32 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $5 = $3 + 8 | 0;
   $11 = HEAP32[$5 + 4 >> 2];
   $4 = $2 + 8 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $11;
   $5 = $3 + 16 | 0;
   $11 = HEAP32[$5 + 4 >> 2];
   $4 = $2 + 16 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $11;
   $3 = $3 + 24 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $2 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
  } else {
   $6 = $7
  }
  $7 = $8 * HEAPF64[$1 + 80 >> 3] + ($9 * HEAPF64[$1 + 64 >> 3] + $10 * HEAPF64[$1 + 72 >> 3]);
  if ($6 < $7) {
   HEAPF64[$0 + 168 >> 3] = $7;
   $0 = $1 - -64 | 0;
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $1;
   $3 = $0 + 8 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $1 = $2 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   $3 = $0 + 16 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $1 = $2 + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   $1 = $2 + 24 | 0;
   $0 = $0 + 24 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
  }
 }
 
 function btQuantizedBvh__buildTree_28int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
  $17 = __stack_pointer + -64 | 0;
  __stack_pointer = $17;
  $14 = HEAP32[$0 + 108 >> 2];
  $23 = $2 - $1 | 0;
  label$1 : {
   if (($23 | 0) == 1) {
    label$3 : {
     if (HEAPU8[$0 + 112 | 0]) {
      $1 = HEAP32[$0 + 168 >> 2] + ($1 << 4) | 0;
      $3 = HEAP32[$1 + 4 >> 2];
      $2 = HEAP32[$0 + 188 >> 2] + ($14 << 4) | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $3;
      $1 = $1 + 8 | 0;
      $3 = HEAP32[$1 + 4 >> 2];
      $2 = $2 + 8 | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $3;
      break label$3;
     }
     memcpy(HEAP32[$0 + 148 >> 2] + Math_imul($14, 96) | 0, HEAP32[$0 + 128 >> 2] + Math_imul($1, 96) | 0, 96);
    }
    HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + 1;
    break label$1;
   }
   $6 = $2 - $1 | 0;
   label$10 : {
    label$2 : {
     label$31 : {
      if (($1 | 0) >= ($2 | 0)) {
       $21 = +($6 | 0);
       break label$31;
      }
      label$5 : {
       if (HEAPU8[$0 + 112 | 0]) {
        $9 = HEAPF64[$0 + 24 >> 3];
        $21 = HEAPF64[$0 + 16 >> 3];
        $27 = HEAPF64[$0 + 88 >> 3];
        $26 = HEAPF64[$0 + 80 >> 3];
        $28 = HEAPF64[$0 + 8 >> 3];
        $29 = HEAPF64[$0 + 72 >> 3];
        $7 = (HEAP32[$0 + 168 >> 2] + ($1 << 4) | 0) + 6 | 0;
        $3 = $6;
        while (1) {
         $5 = $5 + (+HEAPU16[$7 + 4 >> 1] / $27 + $9 + (+HEAPU16[$7 - 2 >> 1] / $27 + $9)) * .5;
         $10 = $10 + (+HEAPU16[$7 + 2 >> 1] / $26 + $21 + (+HEAPU16[$7 - 4 >> 1] / $26 + $21)) * .5;
         $15 = $15 + (+HEAPU16[$7 >> 1] / $29 + $28 + (+HEAPU16[$7 - 6 >> 1] / $29 + $28)) * .5;
         $7 = $7 + 16 | 0;
         $3 = $3 - 1 | 0;
         if ($3) {
          continue
         }
         break;
        };
        break label$5;
       }
       $3 = $2 - $1 | 0;
       $7 = HEAP32[$0 + 128 >> 2] + Math_imul($1, 96) | 0;
       while (1) {
        $5 = $5 + (HEAPF64[$7 + 48 >> 3] + HEAPF64[$7 + 16 >> 3]) * .5;
        $10 = $10 + (HEAPF64[$7 + 40 >> 3] + HEAPF64[$7 + 8 >> 3]) * .5;
        $15 = $15 + (HEAPF64[$7 + 32 >> 3] + HEAPF64[$7 >> 3]) * .5;
        $7 = $7 + 96 | 0;
        $3 = $3 - 1 | 0;
        if ($3) {
         continue
        }
        break;
       };
      }
      $21 = +($6 | 0);
      $9 = 0.0;
      if (($1 | 0) < ($2 | 0)) {
       break label$2
      }
     }
     $5 = 0.0;
     $10 = 0.0;
     break label$10;
    }
    $9 = 1.0 / $21;
    $27 = $9 * $5;
    $26 = $9 * $10;
    $15 = $9 * $15;
    if (HEAPU8[$0 + 112 | 0]) {
     $28 = HEAPF64[$0 + 24 >> 3];
     $29 = HEAPF64[$0 + 16 >> 3];
     $31 = HEAPF64[$0 + 88 >> 3];
     $32 = HEAPF64[$0 + 80 >> 3];
     $33 = HEAPF64[$0 + 8 >> 3];
     $34 = HEAPF64[$0 + 72 >> 3];
     $3 = $2 - $1 | 0;
     $7 = (HEAP32[$0 + 168 >> 2] + ($1 << 4) | 0) + 6 | 0;
     $10 = 0.0;
     $5 = 0.0;
     $9 = 0.0;
     while (1) {
      $30 = $10;
      $10 = (+HEAPU16[$7 + 4 >> 1] / $31 + $28 + (+HEAPU16[$7 - 2 >> 1] / $31 + $28)) * .5 - $27;
      $10 = $30 + $10 * $10;
      $30 = $5;
      $5 = (+HEAPU16[$7 + 2 >> 1] / $32 + $29 + (+HEAPU16[$7 - 4 >> 1] / $32 + $29)) * .5 - $26;
      $5 = $30 + $5 * $5;
      $30 = $9;
      $9 = (+HEAPU16[$7 >> 1] / $34 + $33 + (+HEAPU16[$7 - 6 >> 1] / $34 + $33)) * .5 - $15;
      $9 = $30 + $9 * $9;
      $7 = $7 + 16 | 0;
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
      break;
     };
     break label$10;
    }
    $3 = $2 - $1 | 0;
    $7 = HEAP32[$0 + 128 >> 2] + Math_imul($1, 96) | 0;
    $10 = 0.0;
    $5 = 0.0;
    $9 = 0.0;
    while (1) {
     $30 = $10;
     $10 = (HEAPF64[$7 + 48 >> 3] + HEAPF64[$7 + 16 >> 3]) * .5 - $27;
     $10 = $30 + $10 * $10;
     $30 = $5;
     $5 = (HEAPF64[$7 + 40 >> 3] + HEAPF64[$7 + 8 >> 3]) * .5 - $26;
     $5 = $30 + $5 * $5;
     $30 = $9;
     $9 = (HEAPF64[$7 + 32 >> 3] + HEAPF64[$7 >> 3]) * .5 - $15;
     $9 = $30 + $9 * $9;
     $7 = $7 + 96 | 0;
     $3 = $3 - 1 | 0;
     if ($3) {
      continue
     }
     break;
    };
   }
   $15 = 1.0 / ($21 + -1.0);
   $9 = $15 * $9;
   $5 = $15 * $5;
   $3 = $9 < $5;
   $7 = $15 * $10 > ($3 ? $5 : $9) ? 2 : $3;
   $5 = 0.0;
   $10 = 0.0;
   $9 = 0.0;
   $13 = __stack_pointer - 176 | 0;
   __stack_pointer = $13;
   HEAP32[$13 + 56 >> 2] = 0;
   HEAP32[$13 + 60 >> 2] = 0;
   $6 = $2 - $1 | 0;
   $11 = ($1 | 0) >= ($2 | 0);
   label$13 : {
    if ($11) {
     break label$13
    }
    if (HEAPU8[$0 + 112 | 0]) {
     $15 = HEAPF64[$0 + 24 >> 3];
     $21 = HEAPF64[$0 + 16 >> 3];
     $27 = HEAPF64[$0 + 88 >> 3];
     $26 = HEAPF64[$0 + 80 >> 3];
     $28 = HEAPF64[$0 + 8 >> 3];
     $29 = HEAPF64[$0 + 72 >> 3];
     $4 = $2 - $1 | 0;
     $3 = (HEAP32[$0 + 168 >> 2] + ($1 << 4) | 0) + 6 | 0;
     while (1) {
      $5 = (+HEAPU16[$3 + 4 >> 1] / $27 + $15 + (+HEAPU16[$3 - 2 >> 1] / $27 + $15)) * .5 + $5;
      $10 = (+HEAPU16[$3 + 2 >> 1] / $26 + $21 + (+HEAPU16[$3 - 4 >> 1] / $26 + $21)) * .5 + $10;
      $9 = (+HEAPU16[$3 >> 1] / $29 + $28 + (+HEAPU16[$3 - 6 >> 1] / $29 + $28)) * .5 + $9;
      $3 = $3 + 16 | 0;
      $4 = $4 - 1 | 0;
      if ($4) {
       continue
      }
      break;
     };
     break label$13;
    }
    $4 = $2 - $1 | 0;
    $3 = HEAP32[$0 + 128 >> 2] + Math_imul($1, 96) | 0;
    while (1) {
     $5 = (HEAPF64[$3 + 48 >> 3] + HEAPF64[$3 + 16 >> 3]) * .5 + $5;
     $10 = (HEAPF64[$3 + 40 >> 3] + HEAPF64[$3 + 8 >> 3]) * .5 + $10;
     $9 = (HEAPF64[$3 + 32 >> 3] + HEAPF64[$3 >> 3]) * .5 + $9;
     $3 = $3 + 96 | 0;
     $4 = $4 - 1 | 0;
     if ($4) {
      continue
     }
     break;
    };
   }
   $15 = 1.0 / +($6 | 0);
   HEAPF64[$13 + 48 >> 3] = $15 * $5;
   HEAPF64[$13 + 40 >> 3] = $15 * $10;
   HEAPF64[$13 + 32 >> 3] = $15 * $9;
   $3 = $1;
   if (!$11) {
    $7 = $7 << 3;
    $27 = HEAPF64[$7 + ($13 + 32 | 0) >> 3];
    $4 = $1 << 4;
    $8 = Math_imul($1, 96);
    $19 = $7 + $13 | 0;
    $7 = $6;
    while (1) {
     $20 = HEAPU8[$0 + 112 | 0];
     label$75 : {
      if ($20) {
       $11 = HEAP32[$0 + 168 >> 2] + $4 | 0;
       $21 = HEAPF64[$0 + 72 >> 3];
       $26 = HEAPF64[$0 + 8 >> 3];
       $5 = +HEAPU16[$11 >> 1] / $21 + $26;
       $15 = HEAPF64[$0 + 88 >> 3];
       $28 = HEAPF64[$0 + 24 >> 3];
       $10 = +HEAPU16[$11 + 4 >> 1] / $15 + $28;
       $29 = HEAPF64[$0 + 80 >> 3];
       $31 = HEAPF64[$0 + 16 >> 3];
       $9 = +HEAPU16[$11 + 2 >> 1] / $29 + $31;
       $15 = +HEAPU16[$11 + 10 >> 1] / $15 + $28;
       $21 = +HEAPU16[$11 + 6 >> 1] / $21 + $26;
       $26 = +HEAPU16[$11 + 8 >> 1] / $29 + $31;
       break label$75;
      }
      $11 = HEAP32[$0 + 128 >> 2] + $8 | 0;
      $5 = HEAPF64[$11 >> 3];
      $10 = HEAPF64[$11 + 16 >> 3];
      $9 = HEAPF64[$11 + 8 >> 3];
      $15 = HEAPF64[$11 + 48 >> 3];
      $21 = HEAPF64[$11 + 32 >> 3];
      $26 = HEAPF64[$11 + 40 >> 3];
     }
     HEAP32[$13 + 24 >> 2] = 0;
     HEAP32[$13 + 28 >> 2] = 0;
     HEAPF64[$13 + 16 >> 3] = ($15 + $10) * .5;
     HEAPF64[$13 + 8 >> 3] = ($26 + $9) * .5;
     HEAPF64[$13 >> 3] = ($21 + $5) * .5;
     if ($27 < HEAPF64[$19 >> 3]) {
      label$106 : {
       if ($20) {
        $20 = HEAP32[$0 + 168 >> 2];
        $11 = $20 + $4 | 0;
        $18 = HEAP32[$11 >> 2];
        $16 = HEAP32[$11 + 4 >> 2];
        $22 = $3 << 4;
        $20 = $22 + $20 | 0;
        $12 = HEAP32[$20 + 4 >> 2];
        HEAP32[$11 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $11 = $11 + 8 | 0;
        $12 = HEAP32[$11 >> 2];
        $24 = HEAP32[$11 + 4 >> 2];
        $20 = $20 + 8 | 0;
        $25 = HEAP32[$20 + 4 >> 2];
        HEAP32[$11 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$11 + 4 >> 2] = $25;
        $11 = $22 + HEAP32[$0 + 168 >> 2] | 0;
        HEAP32[$11 >> 2] = $18;
        HEAP32[$11 + 4 >> 2] = $16;
        $11 = $11 + 8 | 0;
        HEAP32[$11 >> 2] = $12;
        HEAP32[$11 + 4 >> 2] = $24;
        break label$106;
       }
       $11 = $13 - -64 | 0;
       $20 = HEAP32[$0 + 128 >> 2];
       $18 = $20 + $8 | 0;
       memcpy($11, $18, 96);
       $16 = $18;
       $18 = Math_imul($3, 96);
       memcpy($16, $20 + $18 | 0, 96);
       memcpy($18 + HEAP32[$0 + 128 >> 2] | 0, $11, 96);
      }
      $3 = $3 + 1 | 0;
     }
     $4 = $4 + 16 | 0;
     $8 = $8 + 96 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $13 + 176 | 0;
   $7 = ($6 >> 1) + $1 | 0;
   $6 = ($6 | 0) / 3 | 0;
   $20 = ($1 + $6 | 0) >= ($3 | 0) ? $7 : (($6 ^ -1) + $2 | 0) <= ($3 | 0) ? $7 : $3;
   $11 = HEAP32[$0 + 108 >> 2];
   label$57 : {
    if (HEAPU8[$0 + 112 | 0]) {
     $3 = HEAP32[$0 + 188 >> 2] + ($11 << 4) | 0;
     $5 = (HEAPF64[$0 + 40 >> 3] - HEAPF64[$0 + 8 >> 3]) * HEAPF64[$0 + 72 >> 3];
     label$78 : {
      if ($5 < 4294967296.0 & $5 >= 0.0) {
       $6 = ~~$5 >>> 0;
       break label$78;
      }
      $6 = 0;
     }
     HEAP16[$3 >> 1] = $6 & 65534;
     $10 = HEAPF64[$0 + 80 >> 3];
     $9 = HEAPF64[$0 + 16 >> 3];
     $15 = HEAPF64[$0 + 48 >> 3];
     $5 = (HEAPF64[$0 + 56 >> 3] - HEAPF64[$0 + 24 >> 3]) * HEAPF64[$0 + 88 >> 3];
     label$9 : {
      if ($5 < 4294967296.0 & $5 >= 0.0) {
       $6 = ~~$5 >>> 0;
       break label$9;
      }
      $6 = 0;
     }
     HEAP16[$3 + 4 >> 1] = $6 & 65534;
     $5 = $10 * ($15 - $9);
     label$119 : {
      if ($5 < 4294967296.0 & $5 >= 0.0) {
       $6 = ~~$5 >>> 0;
       break label$119;
      }
      $6 = 0;
     }
     HEAP16[$3 + 2 >> 1] = $6 & 65534;
     break label$57;
    }
    $3 = $0 + 40 | 0;
    $7 = HEAP32[$3 + 4 >> 2];
    $6 = HEAP32[$0 + 148 >> 2] + Math_imul($11, 96) | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $7 = $3 + 24 | 0;
    $13 = HEAP32[$7 + 4 >> 2];
    $4 = $6 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $13;
    $7 = $3 + 16 | 0;
    $13 = HEAP32[$7 + 4 >> 2];
    $4 = $6 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $13;
    $3 = $3 + 8 | 0;
    $7 = HEAP32[$3 + 4 >> 2];
    $6 = $6 + 8 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
   }
   $6 = HEAP32[$0 + 108 >> 2];
   label$1310 : {
    if (HEAPU8[$0 + 112 | 0]) {
     $3 = HEAP32[$0 + 188 >> 2] + ($6 << 4) | 0;
     $5 = HEAPF64[$0 + 8 >> 3];
     $5 = ($5 - $5) * HEAPF64[$0 + 72 >> 3] + 1.0;
     label$15 : {
      if ($5 < 4294967296.0 & $5 >= 0.0) {
       $6 = ~~$5 >>> 0;
       break label$15;
      }
      $6 = 0;
     }
     HEAP16[$3 + 6 >> 1] = $6 | 1;
     $9 = HEAPF64[$0 + 80 >> 3];
     $5 = HEAPF64[$0 + 16 >> 3];
     $18 = $3 + 10 | 0;
     $10 = HEAPF64[$0 + 24 >> 3];
     $10 = ($10 - $10) * HEAPF64[$0 + 88 >> 3] + 1.0;
     label$17 : {
      if ($10 < 4294967296.0 & $10 >= 0.0) {
       $6 = ~~$10 >>> 0;
       break label$17;
      }
      $6 = 0;
     }
     HEAP16[$18 >> 1] = $6 | 1;
     $6 = $3 + 8 | 0;
     $5 = $9 * ($5 - $5) + 1.0;
     label$19 : {
      if ($5 < 4294967296.0 & $5 >= 0.0) {
       $3 = ~~$5 >>> 0;
       break label$19;
      }
      $3 = 0;
     }
     HEAP16[$6 >> 1] = $3 | 1;
     break label$1310;
    }
    $3 = $0 + 8 | 0;
    $7 = HEAP32[$3 + 4 >> 2];
    $6 = HEAP32[$0 + 148 >> 2] + Math_imul($6, 96) | 0;
    HEAP32[$6 + 32 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 36 >> 2] = $7;
    $7 = $3 + 24 | 0;
    $13 = HEAP32[$7 + 4 >> 2];
    $4 = $6 + 56 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $13;
    $7 = $3 + 16 | 0;
    $13 = HEAP32[$7 + 4 >> 2];
    $4 = $6 + 48 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $13;
    $3 = $3 + 8 | 0;
    $7 = HEAP32[$3 + 4 >> 2];
    $6 = $6 + 40 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
   }
   if (($1 | 0) < ($2 | 0)) {
    $7 = Math_imul($1, 96);
    $13 = $1 << 4;
    while (1) {
     $3 = HEAP32[$0 + 108 >> 2];
     label$23 : {
      if (HEAPU8[$0 + 112 | 0]) {
       HEAP32[$17 + 56 >> 2] = 0;
       HEAP32[$17 + 60 >> 2] = 0;
       $6 = HEAP32[$0 + 168 >> 2] + $13 | 0;
       $5 = HEAPF64[$0 + 72 >> 3];
       $10 = HEAPF64[$0 + 8 >> 3];
       HEAPF64[$17 + 32 >> 3] = +HEAPU16[$6 >> 1] / $5 + $10;
       $9 = HEAPF64[$0 + 80 >> 3];
       $15 = HEAPF64[$0 + 16 >> 3];
       HEAPF64[$17 + 40 >> 3] = +HEAPU16[$6 + 2 >> 1] / $9 + $15;
       $21 = HEAPF64[$0 + 88 >> 3];
       $27 = HEAPF64[$0 + 24 >> 3];
       HEAPF64[$17 + 48 >> 3] = +HEAPU16[$6 + 4 >> 1] / $21 + $27;
       HEAP32[$17 + 24 >> 2] = 0;
       HEAP32[$17 + 28 >> 2] = 0;
       HEAPF64[$17 + 16 >> 3] = $27 + +HEAPU16[$6 + 10 >> 1] / $21;
       HEAPF64[$17 + 8 >> 3] = $15 + +HEAPU16[$6 + 8 >> 1] / $9;
       HEAPF64[$17 >> 3] = $10 + +HEAPU16[$6 + 6 >> 1] / $5;
       break label$23;
      }
      $6 = HEAP32[$0 + 128 >> 2] + $7 | 0;
      $8 = $6 + 8 | 0;
      $19 = HEAP32[$8 + 4 >> 2];
      $4 = $17 + 32 | 0;
      $18 = $4 + 8 | 0;
      HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$18 + 4 >> 2] = $19;
      $8 = $6 + 16 | 0;
      $19 = HEAP32[$8 + 4 >> 2];
      $18 = $4 + 16 | 0;
      HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$18 + 4 >> 2] = $19;
      $8 = $6 + 24 | 0;
      $19 = HEAP32[$8 + 4 >> 2];
      $4 = $4 + 24 | 0;
      HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$4 + 4 >> 2] = $19;
      $4 = HEAP32[$6 + 4 >> 2];
      HEAP32[$17 + 32 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$17 + 36 >> 2] = $4;
      $4 = $6 + 56 | 0;
      $8 = HEAP32[$4 + 4 >> 2];
      $19 = $17 + 24 | 0;
      HEAP32[$19 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$19 + 4 >> 2] = $8;
      $4 = $6 + 48 | 0;
      $8 = HEAP32[$4 + 4 >> 2];
      $19 = $17 + 16 | 0;
      HEAP32[$19 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$19 + 4 >> 2] = $8;
      $4 = $6 + 40 | 0;
      $8 = HEAP32[$4 + 4 >> 2];
      $19 = $17 + 8 | 0;
      HEAP32[$19 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$19 + 4 >> 2] = $8;
      $6 = $6 + 32 | 0;
      $4 = HEAP32[$6 + 4 >> 2];
      HEAP32[$17 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$17 + 4 >> 2] = $4;
     }
     $6 = $17 + 32 | 0;
     __inlined_func$btQuantizedBvh__mergeInternalNodeAabb_28int_2c_20btVector3_20const__2c_20btVector3_20const__29 : {
      if (HEAPU8[$0 + 112 | 0]) {
       $10 = HEAPF64[$0 + 24 >> 3];
       $9 = HEAPF64[$0 + 88 >> 3];
       $5 = (HEAPF64[$6 + 16 >> 3] - $10) * $9;
       label$312 : {
        if ($5 < 4294967296.0 & $5 >= 0.0) {
         $19 = ~~$5 >>> 0;
         break label$312;
        }
        $19 = 0;
       }
       $15 = HEAPF64[$0 + 16 >> 3];
       $21 = HEAPF64[$0 + 80 >> 3];
       $5 = (HEAPF64[$6 + 8 >> 3] - $15) * $21;
       label$513 : {
        if ($5 < 4294967296.0 & $5 >= 0.0) {
         $18 = ~~$5 >>> 0;
         break label$513;
        }
        $18 = 0;
       }
       $5 = $9 * (HEAPF64[$17 + 16 >> 3] - $10) + 1.0;
       label$714 : {
        if ($5 < 4294967296.0 & $5 >= 0.0) {
         $16 = ~~$5 >>> 0;
         break label$714;
        }
        $16 = 0;
       }
       $5 = $21 * (HEAPF64[$17 + 8 >> 3] - $15) + 1.0;
       label$915 : {
        if ($5 < 4294967296.0 & $5 >= 0.0) {
         $22 = ~~$5 >>> 0;
         break label$915;
        }
        $22 = 0;
       }
       $10 = HEAPF64[$0 + 8 >> 3];
       $9 = HEAPF64[$0 + 72 >> 3];
       $5 = (HEAPF64[$6 >> 3] - $10) * $9;
       label$1116 : {
        if ($5 < 4294967296.0 & $5 >= 0.0) {
         $6 = ~~$5 >>> 0;
         break label$1116;
        }
        $6 = 0;
       }
       $4 = $6 & 65534;
       $6 = HEAP32[$0 + 188 >> 2];
       $12 = $6 + ($3 << 4) | 0;
       $24 = $4 >>> 0 >= HEAPU16[$12 >> 1];
       $5 = $9 * (HEAPF64[$17 >> 3] - $10) + 1.0;
       label$1317 : {
        if ($5 < 4294967296.0 & $5 >= 0.0) {
         $8 = ~~$5 >>> 0;
         break label$1317;
        }
        $8 = 0;
       }
       $8 = $8 | 1;
       if (!$24) {
        HEAP16[$12 >> 1] = $4
       }
       $4 = $6 + ($3 << 4) | 0;
       if (HEAPU16[$4 + 6 >> 1] < $8 >>> 0) {
        HEAP16[$4 + 6 >> 1] = $8
       }
       $8 = $18 & 65534;
       if ($8 >>> 0 < HEAPU16[$4 + 2 >> 1]) {
        HEAP16[$4 + 2 >> 1] = $8
       }
       $8 = $22 | 1;
       $4 = $6 + ($3 << 4) | 0;
       $18 = $4 + 8 | 0;
       if ($8 >>> 0 > HEAPU16[$18 >> 1]) {
        HEAP16[$18 >> 1] = $8
       }
       $8 = $19 & 65534;
       if ($8 >>> 0 < HEAPU16[$4 + 4 >> 1]) {
        HEAP16[$4 + 4 >> 1] = $8
       }
       $3 = ($6 + ($3 << 4) | 0) + 10 | 0;
       $6 = $16 | 1;
       if (HEAPU16[$3 >> 1] >= $6 >>> 0) {
        break __inlined_func$btQuantizedBvh__mergeInternalNodeAabb_28int_2c_20btVector3_20const__2c_20btVector3_20const__29
       }
       HEAP16[$3 >> 1] = $6;
       break __inlined_func$btQuantizedBvh__mergeInternalNodeAabb_28int_2c_20btVector3_20const__2c_20btVector3_20const__29;
      }
      $5 = HEAPF64[$6 >> 3];
      $4 = HEAP32[$0 + 148 >> 2];
      $8 = $4 + Math_imul($3, 96) | 0;
      if ($5 < HEAPF64[$8 >> 3]) {
       HEAPF64[$8 >> 3] = $5
      }
      $5 = HEAPF64[$6 + 8 >> 3];
      if ($5 < HEAPF64[$8 + 8 >> 3]) {
       HEAPF64[$8 + 8 >> 3] = $5
      }
      $5 = HEAPF64[$6 + 16 >> 3];
      $8 = $4 + Math_imul($3, 96) | 0;
      if ($5 < HEAPF64[$8 + 16 >> 3]) {
       HEAPF64[$8 + 16 >> 3] = $5
      }
      $5 = HEAPF64[$6 + 24 >> 3];
      if ($5 < HEAPF64[$8 + 24 >> 3]) {
       HEAPF64[$8 + 24 >> 3] = $5
      }
      $5 = HEAPF64[$17 >> 3];
      $6 = $4 + Math_imul($3, 96) | 0;
      if ($5 > HEAPF64[$6 + 32 >> 3]) {
       HEAPF64[$6 + 32 >> 3] = $5
      }
      $5 = HEAPF64[$17 + 8 >> 3];
      $6 = $6 + 40 | 0;
      if ($5 > HEAPF64[$6 >> 3]) {
       HEAPF64[$6 >> 3] = $5
      }
      $5 = HEAPF64[$17 + 16 >> 3];
      $3 = $4 + Math_imul($3, 96) | 0;
      $6 = $3 + 48 | 0;
      if ($5 > HEAPF64[$6 >> 3]) {
       HEAPF64[$6 >> 3] = $5
      }
      $5 = HEAPF64[$17 + 24 >> 3];
      $3 = $3 + 56 | 0;
      if (!($5 > HEAPF64[$3 >> 3])) {
       break __inlined_func$btQuantizedBvh__mergeInternalNodeAabb_28int_2c_20btVector3_20const__2c_20btVector3_20const__29
      }
      HEAPF64[$3 >> 3] = $5;
     }
     $7 = $7 + 96 | 0;
     $13 = $13 + 16 | 0;
     $23 = $23 - 1 | 0;
     if ($23) {
      continue
     }
     break;
    };
   }
   $7 = HEAP32[$0 + 108 >> 2] + 1 | 0;
   HEAP32[$0 + 108 >> 2] = $7;
   btQuantizedBvh__buildTree_28int_2c_20int_29($0, $1, $20);
   $6 = HEAP32[$0 + 108 >> 2];
   btQuantizedBvh__buildTree_28int_2c_20int_29($0, $20, $2);
   $1 = HEAPU8[$0 + 112 | 0];
   $19 = HEAP32[$0 + 108 >> 2] - $14 | 0;
   if (!(!$1 | ($19 | 0) < 129)) {
    $23 = 0;
    $13 = 0;
    $20 = HEAP32[$0 + 188 >> 2];
    $1 = HEAP32[($20 + ($6 << 4) | 0) + 12 >> 2];
    $18 = ($1 | 0) >= 0 ? 1 : 0 - $1 | 0;
    $1 = HEAP32[(($7 << 4) + $20 | 0) + 12 >> 2];
    $16 = ($1 | 0) >= 0 ? 1 : 0 - $1 | 0;
    if ($16 >>> 0 <= 128) {
     $2 = HEAP32[$0 + 204 >> 2];
     $1 = $2;
     label$218 : {
      if (($1 | 0) != HEAP32[$0 + 208 >> 2]) {
       break label$218
      }
      $1 = $2;
      $8 = $1 ? $1 << 1 : 1;
      if (($1 | 0) >= ($8 | 0)) {
       break label$218
      }
      if ($8) {
       $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 5);
       $3 = HEAP32[$0 + 204 >> 2];
      } else {
       $3 = $2
      }
      label$519 : {
       if (($3 | 0) <= 0) {
        break label$519
       }
       if (($3 | 0) != 1) {
        $22 = $3 & -2;
        $1 = 0;
        while (1) {
         $14 = HEAP32[$0 + 212 >> 2] + $1 | 0;
         $12 = HEAP32[$14 + 4 >> 2];
         $4 = $1 + $13 | 0;
         HEAP32[$4 >> 2] = HEAP32[$14 >> 2];
         HEAP32[$4 + 4 >> 2] = $12;
         $12 = $14 + 24 | 0;
         $24 = HEAP32[$12 + 4 >> 2];
         $25 = $4 + 24 | 0;
         HEAP32[$25 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$25 + 4 >> 2] = $24;
         $12 = $14 + 16 | 0;
         $24 = HEAP32[$12 + 4 >> 2];
         $25 = $4 + 16 | 0;
         HEAP32[$25 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$25 + 4 >> 2] = $24;
         $14 = $14 + 8 | 0;
         $12 = HEAP32[$14 + 4 >> 2];
         $24 = $4 + 8 | 0;
         HEAP32[$24 >> 2] = HEAP32[$14 >> 2];
         HEAP32[$24 + 4 >> 2] = $12;
         $14 = HEAP32[$0 + 212 >> 2] + $1 | 0;
         $12 = $14 + 40 | 0;
         $24 = HEAP32[$12 + 4 >> 2];
         $25 = $4 + 40 | 0;
         HEAP32[$25 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$25 + 4 >> 2] = $24;
         $12 = $14 + 48 | 0;
         $24 = HEAP32[$12 + 4 >> 2];
         $25 = $4 + 48 | 0;
         HEAP32[$25 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$25 + 4 >> 2] = $24;
         $12 = $14 + 56 | 0;
         $24 = HEAP32[$12 + 4 >> 2];
         $25 = $4 + 56 | 0;
         HEAP32[$25 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$25 + 4 >> 2] = $24;
         $14 = $14 + 32 | 0;
         $12 = HEAP32[$14 + 4 >> 2];
         $4 = $4 + 32 | 0;
         HEAP32[$4 >> 2] = HEAP32[$14 >> 2];
         HEAP32[$4 + 4 >> 2] = $12;
         $1 = $1 - -64 | 0;
         $23 = $23 + 2 | 0;
         if (($22 | 0) != ($23 | 0)) {
          continue
         }
         break;
        };
       }
       if (!($3 & 1)) {
        break label$519
       }
       $3 = $23 << 5;
       $1 = $3 + $13 | 0;
       $3 = $3 + HEAP32[$0 + 212 >> 2] | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$1 + 4 >> 2] = $4;
       $4 = $3 + 24 | 0;
       $14 = HEAP32[$4 + 4 >> 2];
       $23 = $1 + 24 | 0;
       HEAP32[$23 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$23 + 4 >> 2] = $14;
       $4 = $3 + 16 | 0;
       $14 = HEAP32[$4 + 4 >> 2];
       $23 = $1 + 16 | 0;
       HEAP32[$23 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$23 + 4 >> 2] = $14;
       $3 = $3 + 8 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $1 = $1 + 8 | 0;
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$1 + 4 >> 2] = $4;
      }
      $1 = HEAP32[$0 + 212 >> 2];
      if (!(!$1 | !HEAPU8[$0 + 216 | 0])) {
       btAlignedFreeInternal_28void__29($1)
      }
      HEAP32[$0 + 212 >> 2] = $13;
      HEAP8[$0 + 216 | 0] = 1;
      HEAP32[$0 + 208 >> 2] = $8;
      $1 = HEAP32[$0 + 204 >> 2];
     }
     $2 = HEAP32[$0 + 212 >> 2] + ($2 << 5) | 0;
     $3 = ($7 << 4) + $20 | 0;
     HEAP16[$2 >> 1] = HEAPU16[$3 >> 1];
     HEAP16[$2 + 2 >> 1] = HEAPU16[$3 + 2 >> 1];
     HEAP16[$2 + 4 >> 1] = HEAPU16[$3 + 4 >> 1];
     HEAP16[$2 + 6 >> 1] = HEAPU16[$3 + 6 >> 1];
     HEAP16[$2 + 8 >> 1] = HEAPU16[$3 + 8 >> 1];
     HEAP32[$0 + 204 >> 2] = $1 + 1;
     HEAP32[$2 + 16 >> 2] = $16;
     HEAP32[$2 + 12 >> 2] = $7;
     HEAP16[$2 + 10 >> 1] = HEAPU16[$3 + 10 >> 1];
    }
    if (($18 | 0) <= 128) {
     $2 = HEAP32[$0 + 204 >> 2];
     $1 = $2;
     label$1022 : {
      if (($1 | 0) != HEAP32[$0 + 208 >> 2]) {
       break label$1022
      }
      $1 = $2;
      $7 = $1 ? $1 << 1 : 1;
      if (($1 | 0) >= ($7 | 0)) {
       break label$1022
      }
      label$1124 : {
       if (!$7) {
        $13 = 0;
        $1 = $2;
        break label$1124;
       }
       $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 5);
       $1 = HEAP32[$0 + 204 >> 2];
      }
      $8 = $1;
      label$1323 : {
       if (($8 | 0) <= 0) {
        break label$1323
       }
       $14 = 0;
       if (($8 | 0) != 1) {
        $23 = $8 & -2;
        $1 = 0;
        while (1) {
         $4 = HEAP32[$0 + 212 >> 2] + $1 | 0;
         $16 = HEAP32[$4 + 4 >> 2];
         $3 = $1 + $13 | 0;
         HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$3 + 4 >> 2] = $16;
         $16 = $4 + 24 | 0;
         $22 = HEAP32[$16 + 4 >> 2];
         $12 = $3 + 24 | 0;
         HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
         HEAP32[$12 + 4 >> 2] = $22;
         $16 = $4 + 16 | 0;
         $22 = HEAP32[$16 + 4 >> 2];
         $12 = $3 + 16 | 0;
         HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
         HEAP32[$12 + 4 >> 2] = $22;
         $4 = $4 + 8 | 0;
         $16 = HEAP32[$4 + 4 >> 2];
         $22 = $3 + 8 | 0;
         HEAP32[$22 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$22 + 4 >> 2] = $16;
         $4 = HEAP32[$0 + 212 >> 2] + $1 | 0;
         $16 = $4 + 40 | 0;
         $22 = HEAP32[$16 + 4 >> 2];
         $12 = $3 + 40 | 0;
         HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
         HEAP32[$12 + 4 >> 2] = $22;
         $16 = $4 + 48 | 0;
         $22 = HEAP32[$16 + 4 >> 2];
         $12 = $3 + 48 | 0;
         HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
         HEAP32[$12 + 4 >> 2] = $22;
         $16 = $4 + 56 | 0;
         $22 = HEAP32[$16 + 4 >> 2];
         $12 = $3 + 56 | 0;
         HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
         HEAP32[$12 + 4 >> 2] = $22;
         $4 = $4 + 32 | 0;
         $16 = HEAP32[$4 + 4 >> 2];
         $3 = $3 + 32 | 0;
         HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$3 + 4 >> 2] = $16;
         $1 = $1 - -64 | 0;
         $14 = $14 + 2 | 0;
         if (($23 | 0) != ($14 | 0)) {
          continue
         }
         break;
        };
       }
       if (!($8 & 1)) {
        break label$1323
       }
       $3 = $14 << 5;
       $1 = $3 + $13 | 0;
       $3 = $3 + HEAP32[$0 + 212 >> 2] | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$1 + 4 >> 2] = $4;
       $4 = $3 + 24 | 0;
       $8 = HEAP32[$4 + 4 >> 2];
       $14 = $1 + 24 | 0;
       HEAP32[$14 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$14 + 4 >> 2] = $8;
       $4 = $3 + 16 | 0;
       $8 = HEAP32[$4 + 4 >> 2];
       $14 = $1 + 16 | 0;
       HEAP32[$14 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$14 + 4 >> 2] = $8;
       $3 = $3 + 8 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $1 = $1 + 8 | 0;
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$1 + 4 >> 2] = $4;
      }
      $1 = HEAP32[$0 + 212 >> 2];
      if (!(!$1 | !HEAPU8[$0 + 216 | 0])) {
       btAlignedFreeInternal_28void__29($1)
      }
      HEAP32[$0 + 212 >> 2] = $13;
      HEAP8[$0 + 216 | 0] = 1;
      HEAP32[$0 + 208 >> 2] = $7;
      $1 = HEAP32[$0 + 204 >> 2];
     }
     $2 = HEAP32[$0 + 212 >> 2] + ($2 << 5) | 0;
     $3 = ($6 << 4) + $20 | 0;
     HEAP16[$2 >> 1] = HEAPU16[$3 >> 1];
     HEAP16[$2 + 2 >> 1] = HEAPU16[$3 + 2 >> 1];
     HEAP16[$2 + 4 >> 1] = HEAPU16[$3 + 4 >> 1];
     HEAP16[$2 + 6 >> 1] = HEAPU16[$3 + 6 >> 1];
     HEAP16[$2 + 8 >> 1] = HEAPU16[$3 + 8 >> 1];
     HEAP32[$0 + 204 >> 2] = $1 + 1;
     HEAP32[$2 + 16 >> 2] = $18;
     HEAP32[$2 + 12 >> 2] = $6;
     HEAP16[$2 + 10 >> 1] = HEAPU16[$3 + 10 >> 1];
    }
    HEAP32[$0 + 220 >> 2] = HEAP32[$0 + 204 >> 2];
    $1 = HEAPU8[$0 + 112 | 0];
   }
   if ($1 & 255) {
    HEAP32[(HEAP32[$0 + 188 >> 2] + ($11 << 4) | 0) + 12 >> 2] = 0 - $19;
    break label$1;
   }
   HEAP32[(HEAP32[$0 + 148 >> 2] + Math_imul($11, 96) | 0) + 64 >> 2] = $19;
  }
  __stack_pointer = $17 - -64 | 0;
 }
 
 function btQuantizedBvh___btQuantizedBvh_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 10680;
  $1 = HEAP32[$0 + 212 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 216 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  $1 = $0 + 204 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 188 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 192 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 188 >> 2] = 0;
  HEAP8[$0 + 192 | 0] = 1;
  $1 = $0 + 180 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 168 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 172 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  $1 = $0 + 160 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 148 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 152 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP8[$0 + 152 | 0] = 1;
  $1 = $0 + 140 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 128 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 132 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP8[$0 + 132 | 0] = 1;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btQuantizedBvh___btQuantizedBvh_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btQuantizedBvh___btQuantizedBvh_28_29($0));
 }
 
 function btQuantizedBvh__walkRecursiveQuantizedTreeAgainstQueryAabb_28btQuantizedBvhNode_20const__2c_20btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  while (1) {
   label$2 : {
    label$3 : {
     if (HEAPU16[$4 >> 1] < HEAPU16[$1 >> 1] | HEAPU16[$3 >> 1] > HEAPU16[$1 + 6 >> 1] | (HEAPU16[$4 + 4 >> 1] < HEAPU16[$1 + 4 >> 1] | HEAPU16[$3 + 4 >> 1] > HEAPU16[$1 + 10 >> 1])) {
      break label$3
     }
     if (HEAPU16[$4 + 2 >> 1] < HEAPU16[$1 + 2 >> 1] | HEAPU16[$3 + 2 >> 1] > HEAPU16[$1 + 8 >> 1]) {
      break label$3
     }
     $5 = HEAP32[$1 + 12 >> 2];
     if (($5 | 0) < 0) {
      break label$2
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $5 >>> 21 | 0, $5 & 2097151);
    }
    return;
   }
   $5 = $1 + 16 | 0;
   btQuantizedBvh__walkRecursiveQuantizedTreeAgainstQueryAabb_28btQuantizedBvhNode_20const__2c_20btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($0, $5, $2, $3, $4);
   $6 = $1 + 32 | 0;
   $1 = HEAP32[$1 + 28 >> 2];
   $1 = ($1 | 0) >= 0 ? $6 : $5 - ($1 << 4) | 0;
   continue;
  };
 }
 
 function btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  label$1 : {
   if (HEAP32[$0 + 108 >> 2] <= 0) {
    break label$1
   }
   $10 = HEAPF64[$3 + 16 >> 3];
   $8 = HEAPF64[$2 + 16 >> 3];
   $12 = $10 - $8;
   $7 = HEAPF64[$3 >> 3];
   $15 = HEAPF64[$2 >> 3];
   $13 = $7 - $15;
   $17 = HEAPF64[$3 + 8 >> 3];
   $18 = HEAPF64[$2 + 8 >> 3];
   $19 = $17 - $18;
   $20 = 1.0 / Math_sqrt($12 * $12 + ($13 * $13 + $19 * $19));
   $26 = $12 * $20;
   $23 = $26 * $12;
   $12 = $13 * $20;
   $27 = $12 * $13;
   $13 = $19 * $20;
   $27 = $23 + ($27 + $19 * $13);
   $19 = HEAPF64[$5 + 16 >> 3];
   $29 = ($10 > $8 ? $10 : $8) + $19;
   $20 = HEAPF64[$5 + 8 >> 3];
   $30 = ($17 > $18 ? $17 : $18) + $20;
   $23 = HEAPF64[$5 >> 3];
   $31 = ($7 > $15 ? $7 : $15) + $23;
   $8 = $10 < $8 ? $10 : $8;
   $10 = HEAPF64[$4 + 16 >> 3];
   $32 = $8 + $10;
   $8 = HEAPF64[$4 + 8 >> 3];
   $33 = ($17 < $18 ? $17 : $18) + $8;
   $15 = $7 < $15 ? $7 : $15;
   $7 = HEAPF64[$4 >> 3];
   $34 = $15 + $7;
   $3 = HEAP32[$0 + 148 >> 2];
   $15 = $26 == 0.0 ? 1.e+30 : 1.0 / $26;
   $16 = $15 < 0.0;
   $35 = (($16 << 5) + $6 | 0) + 16 | 0;
   $17 = $13 == 0.0 ? 1.e+30 : 1.0 / $13;
   $21 = $17 < 0.0;
   $36 = ($21 << 5) + $6 | 8;
   $37 = ((!$16 << 5) + $6 | 0) + 16 | 0;
   $38 = (!$21 << 5) + $6 | 8;
   $18 = $12 == 0.0 ? 1.e+30 : 1.0 / $12;
   $16 = $18 < 0.0;
   $39 = ($16 << 5) + $6 | 0;
   $40 = (!$16 << 5) + $6 | 0;
   $16 = $6 + 32 | 0;
   $21 = 1;
   while (1) {
    $9 = $3 + 24 | 0;
    $11 = HEAP32[$9 + 4 >> 2];
    $14 = $6 + 24 | 0;
    HEAP32[$14 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$14 + 4 >> 2] = $11;
    $11 = $3 + 16 | 0;
    $14 = HEAP32[$11 + 4 >> 2];
    $9 = $6 + 16 | 0;
    HEAP32[$9 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$9 + 4 >> 2] = $14;
    $11 = $3 + 8 | 0;
    $41 = HEAP32[$11 >> 2];
    $42 = HEAP32[$11 + 4 >> 2];
    $43 = HEAP32[$3 >> 2];
    $44 = HEAP32[$3 + 4 >> 2];
    $11 = HEAP32[$3 + 36 >> 2];
    HEAP32[$16 >> 2] = HEAP32[$3 + 32 >> 2];
    HEAP32[$16 + 4 >> 2] = $11;
    $11 = $3 + 40 | 0;
    $14 = HEAP32[$11 + 4 >> 2];
    $22 = $16 + 8 | 0;
    HEAP32[$22 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$22 + 4 >> 2] = $14;
    $14 = $3 + 48 | 0;
    $22 = HEAP32[$14 + 4 >> 2];
    $24 = $16 + 16 | 0;
    HEAP32[$24 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$24 + 4 >> 2] = $22;
    $22 = $3 + 56 | 0;
    $24 = HEAP32[$22 + 4 >> 2];
    $28 = $16 + 24 | 0;
    HEAP32[$28 >> 2] = HEAP32[$22 >> 2];
    HEAP32[$28 + 4 >> 2] = $24;
    HEAP32[$6 >> 2] = $43;
    HEAP32[$6 + 4 >> 2] = $44;
    HEAP32[$6 + 8 >> 2] = $41;
    HEAP32[$6 + 12 >> 2] = $42;
    HEAPF64[$6 >> 3] = HEAPF64[$6 >> 3] - $23;
    HEAPF64[$6 + 8 >> 3] = HEAPF64[$6 + 8 >> 3] - $20;
    HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] - $19;
    HEAPF64[$6 + 32 >> 3] = HEAPF64[$6 + 32 >> 3] - $7;
    HEAPF64[$6 + 40 >> 3] = HEAPF64[$6 + 40 >> 3] - $8;
    HEAPF64[$6 + 48 >> 3] = HEAPF64[$6 + 48 >> 3] - $10;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $9 = 0;
         label$3 : {
          if ($34 > HEAPF64[$3 + 32 >> 3]) {
           break label$3
          }
          $9 = 0;
          if (HEAPF64[$3 >> 3] > $31) {
           break label$3
          }
          $9 = 1;
         }
         if (($32 > HEAPF64[$14 >> 3] | HEAPF64[$3 + 16 >> 3] > $29 ? 0 : $9) ^ 1 | HEAPF64[$3 + 8 >> 3] > $30 | $33 > HEAPF64[$11 >> 3]) {
          break label$9
         }
         $12 = HEAPF64[$2 >> 3];
         $10 = $18 * (HEAPF64[$39 >> 3] - $12);
         $7 = HEAPF64[$2 + 8 >> 3];
         $8 = $17 * (HEAPF64[$38 >> 3] - $7);
         if ($10 > $8) {
          break label$9
         }
         $7 = $17 * (HEAPF64[$36 >> 3] - $7);
         $12 = $18 * (HEAPF64[$40 >> 3] - $12);
         if ($7 > $12) {
          break label$9
         }
         $10 = $7 > $10 ? $7 : $10;
         $13 = HEAPF64[$2 + 16 >> 3];
         $7 = $15 * (HEAPF64[$37 >> 3] - $13);
         if ($10 > $7) {
          break label$9
         }
         $13 = $15 * (HEAPF64[$35 >> 3] - $13);
         $8 = $8 < $12 ? $8 : $12;
         if ($13 > $8) {
          break label$9
         }
         $14 = HEAP32[$3 + 64 >> 2];
         $9 = ($14 | 0) == -1;
         $11 = ($10 < $13 ? $13 : $10) < $27 & ($7 < $8 ? $7 : $8) > 0.0;
         if (!$11 | ($14 | 0) != -1) {
          break label$8
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$3 + 68 >> 2], HEAP32[$3 + 72 >> 2]);
         break label$7;
        }
        $9 = HEAP32[$3 + 64 >> 2] == -1;
        $11 = 0;
       }
       if ($11) {
        break label$7
       }
       if (!$9) {
        break label$6
       }
      }
      $25 = $25 + 1 | 0;
      $3 = $3 + 96 | 0;
      break label$5;
     }
     $9 = HEAP32[$3 + 64 >> 2];
     $25 = $9 + $25 | 0;
     $3 = Math_imul($9, 96) + $3 | 0;
    }
    if (HEAP32[$0 + 108 >> 2] <= ($25 | 0)) {
     break label$1
    }
    $21 = $21 + 1 | 0;
    $10 = HEAPF64[$4 + 16 >> 3];
    $8 = HEAPF64[$4 + 8 >> 3];
    $7 = HEAPF64[$4 >> 3];
    $19 = HEAPF64[$5 + 16 >> 3];
    $20 = HEAPF64[$5 + 8 >> 3];
    $23 = HEAPF64[$5 >> 3];
    continue;
   };
  }
  if (($21 | 0) > HEAP32[7902]) {
   HEAP32[7902] = $21
  }
  __stack_pointer = $6 - -64 | 0;
 }
 
 function btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
  $10 = __stack_pointer + -64 | 0;
  __stack_pointer = $10;
  $12 = HEAPF64[$2 + 8 >> 3];
  $17 = HEAPF64[$3 + 8 >> 3];
  $16 = HEAPF64[$2 >> 3];
  $11 = HEAPF64[$3 >> 3];
  $19 = HEAPF64[$0 + 56 >> 3];
  $7 = HEAPF64[$0 + 24 >> 3];
  $15 = HEAPF64[$3 + 16 >> 3];
  $20 = HEAPF64[$2 + 16 >> 3];
  $8 = ($15 < $20 ? $15 : $20) + HEAPF64[$4 + 16 >> 3];
  $8 = $7 > $8 ? $7 : $8;
  $30 = HEAPF64[$0 + 88 >> 3];
  $8 = (($8 > $19 ? $19 : $8) - $7) * $30;
  label$1 : {
   if ($8 < 4294967296.0 & $8 >= 0.0) {
    $3 = ~~$8 >>> 0;
    break label$1;
   }
   $3 = 0;
  }
  $21 = HEAPF64[$0 + 48 >> 3];
  $8 = HEAPF64[$0 + 16 >> 3];
  $9 = ($12 > $17 ? $17 : $12) + HEAPF64[$4 + 8 >> 3];
  $9 = $8 > $9 ? $8 : $9;
  $31 = HEAPF64[$0 + 80 >> 3];
  $9 = (($9 > $21 ? $21 : $9) - $8) * $31;
  label$3 : {
   if ($9 < 4294967296.0 & $9 >= 0.0) {
    $13 = ~~$9 >>> 0;
    break label$3;
   }
   $13 = 0;
  }
  $22 = HEAPF64[$0 + 40 >> 3];
  $9 = HEAPF64[$0 + 8 >> 3];
  $14 = ($11 < $16 ? $11 : $16) + HEAPF64[$4 >> 3];
  $14 = $9 > $14 ? $9 : $14;
  $32 = HEAPF64[$0 + 72 >> 3];
  $14 = (($14 > $22 ? $22 : $14) - $9) * $32;
  label$5 : {
   if ($14 < 4294967296.0 & $14 >= 0.0) {
    $23 = ~~$14 >>> 0;
    break label$5;
   }
   $23 = 0;
  }
  $14 = ($15 > $20 ? $15 : $20) + HEAPF64[$5 + 16 >> 3];
  $14 = $7 > $14 ? $7 : $14;
  $7 = (($14 > $19 ? $19 : $14) - $7) * $30 + 1.0;
  label$7 : {
   if ($7 < 4294967296.0 & $7 >= 0.0) {
    $24 = ~~$7 >>> 0;
    break label$7;
   }
   $24 = 0;
  }
  $7 = ($12 < $17 ? $17 : $12) + HEAPF64[$5 + 8 >> 3];
  $7 = $7 < $8 ? $8 : $7;
  $7 = (($7 > $21 ? $21 : $7) - $8) * $31 + 1.0;
  label$9 : {
   if ($7 < 4294967296.0 & $7 >= 0.0) {
    $25 = ~~$7 >>> 0;
    break label$9;
   }
   $25 = 0;
  }
  $7 = ($11 > $16 ? $11 : $16) + HEAPF64[$5 >> 3];
  $7 = $7 < $9 ? $9 : $7;
  $7 = (($7 > $22 ? $22 : $7) - $9) * $32 + 1.0;
  label$11 : {
   if ($7 < 4294967296.0 & $7 >= 0.0) {
    $26 = ~~$7 >>> 0;
    break label$11;
   }
   $26 = 0;
  }
  if (($6 | 0) > 0) {
   $7 = $15 - $20;
   $16 = $11 - $16;
   $12 = $17 - $12;
   $17 = 1.0 / Math_sqrt($7 * $7 + ($16 * $16 + $12 * $12));
   $11 = $7 * $17;
   $9 = $11 * $7;
   $7 = $16 * $17;
   $8 = $12;
   $12 = $12 * $17;
   $20 = $9 + ($7 * $16 + $8 * $12);
   $34 = $3 & 65534;
   $35 = $13 & 65534;
   $36 = $23 & 65534;
   $24 = $24 | 1;
   $25 = $25 | 1;
   $26 = $26 | 1;
   $3 = HEAP32[$0 + 188 >> 2];
   $17 = $11 == 0.0 ? 1.e+30 : 1.0 / $11;
   $18 = $17 < 0.0;
   $37 = (($18 << 5) + $10 | 0) + 16 | 0;
   $12 = $12 == 0.0 ? 1.e+30 : 1.0 / $12;
   $13 = $12 < 0.0;
   $38 = ($13 << 5) + $10 | 8;
   $39 = ((!$18 << 5) + $10 | 0) + 16 | 0;
   $40 = (!$13 << 5) + $10 | 8;
   $16 = $7 == 0.0 ? 1.e+30 : 1.0 / $7;
   $18 = $16 < 0.0;
   $41 = ($18 << 5) + $10 | 0;
   $42 = (!$18 << 5) + $10 | 0;
   $18 = 0;
   while (1) {
    $23 = HEAP32[$3 + 12 >> 2];
    $13 = 0;
    label$15 : {
     label$16 : {
      label$17 : {
       label$18 : {
        if (HEAPU16[$3 + 6 >> 1] < $36 >>> 0) {
         break label$18
        }
        $27 = HEAPU16[$3 >> 1];
        if (HEAPU16[$3 + 10 >> 1] < $34 >>> 0 | $27 >>> 0 > $26 >>> 0) {
         break label$18
        }
        $28 = HEAPU16[$3 + 4 >> 1];
        if (HEAPU16[$3 + 8 >> 1] < $35 >>> 0 | $28 >>> 0 > $24 >>> 0) {
         break label$18
        }
        $33 = HEAPU16[$3 + 2 >> 1];
        if ($33 >>> 0 > $25 >>> 0) {
         break label$18
        }
        HEAP32[$10 + 24 >> 2] = 0;
        HEAP32[$10 + 28 >> 2] = 0;
        $11 = HEAPF64[$0 + 88 >> 3];
        $7 = HEAPF64[$0 + 24 >> 3];
        $8 = +($28 >>> 0) / $11 + $7;
        HEAPF64[$10 + 16 >> 3] = $8;
        $9 = HEAPF64[$0 + 80 >> 3];
        $15 = HEAPF64[$0 + 16 >> 3];
        $19 = +($33 >>> 0) / $9 + $15;
        HEAPF64[$10 + 8 >> 3] = $19;
        $21 = HEAPF64[$0 + 72 >> 3];
        $22 = HEAPF64[$0 + 8 >> 3];
        $14 = +($27 >>> 0) / $21 + $22;
        HEAPF64[$10 >> 3] = $14;
        $13 = HEAPU16[$3 + 10 >> 1];
        $27 = HEAPU16[$3 + 8 >> 1];
        $28 = HEAPU16[$3 + 6 >> 1];
        HEAP32[$10 + 56 >> 2] = 0;
        HEAP32[$10 + 60 >> 2] = 0;
        HEAPF64[$10 >> 3] = $14 - HEAPF64[$5 >> 3];
        HEAPF64[$10 + 8 >> 3] = $19 - HEAPF64[$5 + 8 >> 3];
        HEAPF64[$10 + 16 >> 3] = $8 - HEAPF64[$5 + 16 >> 3];
        HEAPF64[$10 + 32 >> 3] = $22 + +($28 >>> 0) / $21 - HEAPF64[$4 >> 3];
        HEAPF64[$10 + 40 >> 3] = $15 + +($27 >>> 0) / $9 - HEAPF64[$4 + 8 >> 3];
        HEAPF64[$10 + 48 >> 3] = $7 + +($13 >>> 0) / $11 - HEAPF64[$4 + 16 >> 3];
        label$19 : {
         $9 = HEAPF64[$2 >> 3];
         $11 = $16 * (HEAPF64[$41 >> 3] - $9);
         $8 = HEAPF64[$2 + 8 >> 3];
         $7 = $12 * (HEAPF64[$40 >> 3] - $8);
         if ($11 > $7) {
          break label$19
         }
         $8 = $12 * (HEAPF64[$38 >> 3] - $8);
         $9 = $16 * (HEAPF64[$42 >> 3] - $9);
         if ($8 > $9) {
          break label$19
         }
         $11 = $8 > $11 ? $8 : $11;
         $15 = HEAPF64[$2 + 16 >> 3];
         $8 = $17 * (HEAPF64[$39 >> 3] - $15);
         if ($11 > $8) {
          break label$19
         }
         $15 = $17 * (HEAPF64[$37 >> 3] - $15);
         $7 = $7 < $9 ? $7 : $9;
         if ($15 > $7) {
          break label$19
         }
         $13 = $20 > ($11 < $15 ? $15 : $11) & ($7 > $8 ? $8 : $7) > 0.0;
         if (!$13 | ($23 | 0) < 0) {
          break label$18
         }
         $13 = HEAP32[$3 + 12 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $13 >> 21, $13 & 2097151);
         break label$17;
        }
        $13 = 0;
       }
       if (($23 | 0) >= 0) {
        break label$17
       }
       if (!$13) {
        break label$16
       }
      }
      $29 = $29 + 1 | 0;
      $3 = $3 + 16 | 0;
      break label$15;
     }
     $13 = HEAP32[$3 + 12 >> 2];
     $29 = $29 - $13 | 0;
     $3 = $3 - ($13 << 4) | 0;
    }
    $18 = $18 + 1 | 0;
    if (($6 | 0) > ($29 | 0)) {
     continue
    }
    break;
   };
  }
  if (($18 | 0) > HEAP32[7902]) {
   HEAP32[7902] = $18
  }
  __stack_pointer = $10 - -64 | 0;
 }
 
 function btQuantizedBvh__serialize_28void__2c_20unsigned_20int_2c_20bool_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  HEAP32[$0 + 220 >> 2] = HEAP32[$0 + 204 >> 2];
  HEAP8[$1 + 132 | 0] = 1;
  HEAP8[$1 + 112 | 0] = 0;
  HEAP32[$1 + 104 >> 2] = 287;
  HEAP32[$1 >> 2] = 10680;
  HEAP32[$1 + 128 >> 2] = 0;
  HEAP8[$1 + 152 | 0] = 1;
  HEAP32[$1 + 120 >> 2] = 0;
  HEAP32[$1 + 124 >> 2] = 0;
  HEAP32[$1 + 148 >> 2] = 0;
  HEAP8[$1 + 172 | 0] = 1;
  HEAP32[$1 + 140 >> 2] = 0;
  HEAP32[$1 + 144 >> 2] = 0;
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP8[$1 + 192 | 0] = 1;
  HEAP32[$1 + 160 >> 2] = 0;
  HEAP32[$1 + 164 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP32[$1 + 196 >> 2] = 0;
  HEAP8[$1 + 216 | 0] = 1;
  HEAP32[$1 + 180 >> 2] = 0;
  HEAP32[$1 + 184 >> 2] = 0;
  HEAP32[$1 + 204 >> 2] = 0;
  HEAP32[$1 + 208 >> 2] = 0;
  HEAP32[$1 + 220 >> 2] = 0;
  HEAP32[$1 + 212 >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = -1;
  HEAP32[$1 + 60 >> 2] = 2146435071;
  HEAP32[$1 + 48 >> 2] = -1;
  HEAP32[$1 + 52 >> 2] = 2146435071;
  HEAP32[$1 + 40 >> 2] = -1;
  HEAP32[$1 + 44 >> 2] = 2146435071;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = -1;
  HEAP32[$1 + 28 >> 2] = -1048577;
  HEAP32[$1 + 16 >> 2] = -1;
  HEAP32[$1 + 20 >> 2] = -1048577;
  HEAP32[$1 + 8 >> 2] = -1;
  HEAP32[$1 + 12 >> 2] = -1048577;
  $2 = HEAP32[$0 + 108 >> 2];
  label$1 : {
   if ($3) {
    HEAP32[$1 + 108 >> 2] = $2 << 8 & 16711680 | $2 << 24 | ($2 >>> 8 & 65280 | $2 >>> 24);
    HEAP8[$1 + 8 | 0] = HEAPU8[$0 + 15 | 0];
    HEAP8[$1 + 9 | 0] = HEAPU8[$0 + 14 | 0];
    HEAP8[$1 + 10 | 0] = HEAPU8[$0 + 13 | 0];
    HEAP8[$1 + 11 | 0] = HEAPU8[$0 + 12 | 0];
    HEAP8[$1 + 12 | 0] = HEAPU8[$0 + 11 | 0];
    HEAP8[$1 + 13 | 0] = HEAPU8[$0 + 10 | 0];
    HEAP8[$1 + 14 | 0] = HEAPU8[$0 + 9 | 0];
    HEAP8[$1 + 15 | 0] = HEAPU8[$0 + 8 | 0];
    HEAP8[$1 + 16 | 0] = HEAPU8[$0 + 23 | 0];
    HEAP8[$1 + 17 | 0] = HEAPU8[$0 + 22 | 0];
    HEAP8[$1 + 18 | 0] = HEAPU8[$0 + 21 | 0];
    HEAP8[$1 + 19 | 0] = HEAPU8[$0 + 20 | 0];
    HEAP8[$1 + 20 | 0] = HEAPU8[$0 + 19 | 0];
    HEAP8[$1 + 21 | 0] = HEAPU8[$0 + 18 | 0];
    HEAP8[$1 + 22 | 0] = HEAPU8[$0 + 17 | 0];
    HEAP8[$1 + 23 | 0] = HEAPU8[$0 + 16 | 0];
    HEAP8[$1 + 24 | 0] = HEAPU8[$0 + 31 | 0];
    HEAP8[$1 + 25 | 0] = HEAPU8[$0 + 30 | 0];
    HEAP8[$1 + 26 | 0] = HEAPU8[$0 + 29 | 0];
    HEAP8[$1 + 27 | 0] = HEAPU8[$0 + 28 | 0];
    HEAP8[$1 + 28 | 0] = HEAPU8[$0 + 27 | 0];
    HEAP8[$1 + 29 | 0] = HEAPU8[$0 + 26 | 0];
    HEAP8[$1 + 30 | 0] = HEAPU8[$0 + 25 | 0];
    HEAP8[$1 + 31 | 0] = HEAPU8[$0 + 24 | 0];
    HEAP8[$1 + 32 | 0] = HEAPU8[$0 + 39 | 0];
    HEAP8[$1 + 33 | 0] = HEAPU8[$0 + 38 | 0];
    HEAP8[$1 + 34 | 0] = HEAPU8[$0 + 37 | 0];
    HEAP8[$1 + 35 | 0] = HEAPU8[$0 + 36 | 0];
    HEAP8[$1 + 36 | 0] = HEAPU8[$0 + 35 | 0];
    HEAP8[$1 + 37 | 0] = HEAPU8[$0 + 34 | 0];
    HEAP8[$1 + 38 | 0] = HEAPU8[$0 + 33 | 0];
    HEAP8[$1 + 39 | 0] = HEAPU8[$0 + 32 | 0];
    HEAP8[$1 + 40 | 0] = HEAPU8[$0 + 47 | 0];
    HEAP8[$1 + 41 | 0] = HEAPU8[$0 + 46 | 0];
    HEAP8[$1 + 42 | 0] = HEAPU8[$0 + 45 | 0];
    HEAP8[$1 + 43 | 0] = HEAPU8[$0 + 44 | 0];
    HEAP8[$1 + 44 | 0] = HEAPU8[$0 + 43 | 0];
    HEAP8[$1 + 45 | 0] = HEAPU8[$0 + 42 | 0];
    HEAP8[$1 + 46 | 0] = HEAPU8[$0 + 41 | 0];
    HEAP8[$1 + 47 | 0] = HEAPU8[$0 + 40 | 0];
    HEAP8[$1 + 48 | 0] = HEAPU8[$0 + 55 | 0];
    HEAP8[$1 + 49 | 0] = HEAPU8[$0 + 54 | 0];
    HEAP8[$1 + 50 | 0] = HEAPU8[$0 + 53 | 0];
    HEAP8[$1 + 51 | 0] = HEAPU8[$0 + 52 | 0];
    HEAP8[$1 + 52 | 0] = HEAPU8[$0 + 51 | 0];
    HEAP8[$1 + 53 | 0] = HEAPU8[$0 + 50 | 0];
    HEAP8[$1 + 54 | 0] = HEAPU8[$0 + 49 | 0];
    HEAP8[$1 + 55 | 0] = HEAPU8[$0 + 48 | 0];
    HEAP8[$1 + 56 | 0] = HEAPU8[$0 + 63 | 0];
    HEAP8[$1 + 57 | 0] = HEAPU8[$0 + 62 | 0];
    HEAP8[$1 + 58 | 0] = HEAPU8[$0 + 61 | 0];
    HEAP8[$1 + 59 | 0] = HEAPU8[$0 + 60 | 0];
    HEAP8[$1 + 60 | 0] = HEAPU8[$0 + 59 | 0];
    HEAP8[$1 + 61 | 0] = HEAPU8[$0 + 58 | 0];
    HEAP8[$1 + 62 | 0] = HEAPU8[$0 + 57 | 0];
    HEAP8[$1 + 63 | 0] = HEAPU8[$0 + 56 | 0];
    HEAP8[$1 + 64 | 0] = HEAPU8[$0 + 71 | 0];
    HEAP8[$1 + 65 | 0] = HEAPU8[$0 + 70 | 0];
    HEAP8[$1 + 66 | 0] = HEAPU8[$0 + 69 | 0];
    HEAP8[$1 + 67 | 0] = HEAPU8[$0 + 68 | 0];
    HEAP8[$1 + 68 | 0] = HEAPU8[$0 + 67 | 0];
    HEAP8[$1 + 69 | 0] = HEAPU8[$0 + 66 | 0];
    HEAP8[$1 + 70 | 0] = HEAPU8[$0 + 65 | 0];
    HEAP8[$1 + 71 | 0] = HEAPU8[$0 - -64 | 0];
    HEAP8[$1 + 72 | 0] = HEAPU8[$0 + 79 | 0];
    HEAP8[$1 + 73 | 0] = HEAPU8[$0 + 78 | 0];
    HEAP8[$1 + 74 | 0] = HEAPU8[$0 + 77 | 0];
    HEAP8[$1 + 75 | 0] = HEAPU8[$0 + 76 | 0];
    HEAP8[$1 + 76 | 0] = HEAPU8[$0 + 75 | 0];
    HEAP8[$1 + 77 | 0] = HEAPU8[$0 + 74 | 0];
    HEAP8[$1 + 78 | 0] = HEAPU8[$0 + 73 | 0];
    HEAP8[$1 + 79 | 0] = HEAPU8[$0 + 72 | 0];
    HEAP8[$1 + 80 | 0] = HEAPU8[$0 + 87 | 0];
    HEAP8[$1 + 81 | 0] = HEAPU8[$0 + 86 | 0];
    HEAP8[$1 + 82 | 0] = HEAPU8[$0 + 85 | 0];
    HEAP8[$1 + 83 | 0] = HEAPU8[$0 + 84 | 0];
    HEAP8[$1 + 84 | 0] = HEAPU8[$0 + 83 | 0];
    HEAP8[$1 + 85 | 0] = HEAPU8[$0 + 82 | 0];
    HEAP8[$1 + 86 | 0] = HEAPU8[$0 + 81 | 0];
    HEAP8[$1 + 87 | 0] = HEAPU8[$0 + 80 | 0];
    HEAP8[$1 + 88 | 0] = HEAPU8[$0 + 95 | 0];
    HEAP8[$1 + 89 | 0] = HEAPU8[$0 + 94 | 0];
    HEAP8[$1 + 90 | 0] = HEAPU8[$0 + 93 | 0];
    HEAP8[$1 + 91 | 0] = HEAPU8[$0 + 92 | 0];
    HEAP8[$1 + 92 | 0] = HEAPU8[$0 + 91 | 0];
    HEAP8[$1 + 93 | 0] = HEAPU8[$0 + 90 | 0];
    HEAP8[$1 + 94 | 0] = HEAPU8[$0 + 89 | 0];
    HEAP8[$1 + 95 | 0] = HEAPU8[$0 + 88 | 0];
    HEAP8[$1 + 96 | 0] = HEAPU8[$0 + 103 | 0];
    HEAP8[$1 + 97 | 0] = HEAPU8[$0 + 102 | 0];
    HEAP8[$1 + 98 | 0] = HEAPU8[$0 + 101 | 0];
    HEAP8[$1 + 99 | 0] = HEAPU8[$0 + 100 | 0];
    HEAP8[$1 + 100 | 0] = HEAPU8[$0 + 99 | 0];
    HEAP8[$1 + 101 | 0] = HEAPU8[$0 + 98 | 0];
    HEAP8[$1 + 102 | 0] = HEAPU8[$0 + 97 | 0];
    HEAP8[$1 + 103 | 0] = HEAPU8[$0 + 96 | 0];
    $2 = HEAP32[$0 + 196 >> 2];
    HEAP32[$1 + 196 >> 2] = $2 << 24 | $2 << 8 & 16711680 | ($2 >>> 8 & 65280 | $2 >>> 24);
    $2 = HEAP32[$0 + 220 >> 2];
    $6 = $2 << 24 | $2 << 8 & 16711680 | ($2 >>> 8 & 65280 | $2 >>> 24);
    break label$1;
   }
   HEAP32[$1 + 108 >> 2] = $2;
   $7 = $0 + 32 | 0;
   $9 = HEAP32[$7 + 4 >> 2];
   $2 = $1 + 8 | 0;
   $4 = $2 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $9;
   $7 = $0 + 24 | 0;
   $9 = HEAP32[$7 + 4 >> 2];
   $4 = $2 + 16 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $9;
   $7 = $0 + 16 | 0;
   $9 = HEAP32[$7 + 4 >> 2];
   $4 = $2 + 8 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $9;
   $4 = HEAP32[$0 + 12 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $7 = $0 - -64 | 0;
   $9 = HEAP32[$7 + 4 >> 2];
   $2 = $1 + 40 | 0;
   $4 = $2 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $9;
   $7 = $0 + 56 | 0;
   $9 = HEAP32[$7 + 4 >> 2];
   $4 = $2 + 16 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $9;
   $7 = $0 + 48 | 0;
   $9 = HEAP32[$7 + 4 >> 2];
   $4 = $2 + 8 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $9;
   $4 = HEAP32[$0 + 44 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$0 + 40 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $4 = $0 + 80 | 0;
   $7 = HEAP32[$4 + 4 >> 2];
   $2 = $1 + 80 | 0;
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + 4 >> 2] = $7;
   $4 = $0 + 88 | 0;
   $7 = HEAP32[$4 + 4 >> 2];
   $2 = $1 + 88 | 0;
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + 4 >> 2] = $7;
   $4 = $0 + 96 | 0;
   $7 = HEAP32[$4 + 4 >> 2];
   $2 = $1 + 96 | 0;
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + 4 >> 2] = $7;
   $2 = HEAP32[$0 + 76 >> 2];
   HEAP32[$1 + 72 >> 2] = HEAP32[$0 + 72 >> 2];
   HEAP32[$1 + 76 >> 2] = $2;
   HEAP32[$1 + 196 >> 2] = HEAP32[$0 + 196 >> 2];
   $6 = HEAP32[$0 + 220 >> 2];
  }
  HEAP8[$1 + 112 | 0] = HEAPU8[$0 + 112 | 0];
  HEAP32[$1 + 220 >> 2] = $6;
  $7 = $1 + 224 | 0;
  $2 = HEAP32[$0 + 108 >> 2];
  label$3 : {
   if (HEAPU8[$0 + 112 | 0]) {
    $4 = HEAP32[$1 + 188 >> 2];
    if (!(!$4 | !HEAPU8[$1 + 192 | 0])) {
     btAlignedFreeInternal_28void__29($4)
    }
    HEAP32[$1 + 188 >> 2] = $7;
    HEAP8[$1 + 192 | 0] = 0;
    label$6 : {
     if (!$3) {
      if (($2 | 0) <= 0) {
       break label$6
      }
      $6 = HEAP32[$0 + 188 >> 2];
      $4 = $2;
      while (1) {
       $9 = $1 + $8 | 0;
       $5 = $6 + $8 | 0;
       HEAP16[$9 + 224 >> 1] = HEAPU16[$5 >> 1];
       HEAP16[$9 + 226 >> 1] = HEAPU16[$5 + 2 >> 1];
       HEAP16[$9 + 228 >> 1] = HEAPU16[$5 + 4 >> 1];
       HEAP16[$9 + 230 >> 1] = HEAPU16[$5 + 6 >> 1];
       HEAP16[$9 + 232 >> 1] = HEAPU16[$5 + 8 >> 1];
       HEAP32[$9 + 236 >> 2] = HEAP32[$5 + 12 >> 2];
       HEAP16[$9 + 234 >> 1] = HEAPU16[$5 + 10 >> 1];
       $8 = $8 + 16 | 0;
       $4 = $4 - 1 | 0;
       if ($4) {
        continue
       }
       break;
      };
      break label$6;
     }
     if (($2 | 0) <= 0) {
      break label$6
     }
     $10 = HEAP32[$0 + 188 >> 2];
     $9 = $2;
     while (1) {
      $4 = $1 + $8 | 0;
      $5 = $8 + $10 | 0;
      $6 = HEAPU16[$5 >> 1];
      HEAP16[$4 + 224 >> 1] = $6 << 8 | $6 >>> 8;
      $6 = HEAPU16[$5 + 2 >> 1];
      HEAP16[$4 + 226 >> 1] = $6 << 8 | $6 >>> 8;
      $6 = HEAPU16[$5 + 4 >> 1];
      HEAP16[$4 + 228 >> 1] = $6 << 8 | $6 >>> 8;
      $6 = HEAPU16[$5 + 6 >> 1];
      HEAP16[$4 + 230 >> 1] = $6 << 8 | $6 >>> 8;
      $6 = HEAPU16[$5 + 8 >> 1];
      HEAP16[$4 + 232 >> 1] = $6 << 8 | $6 >>> 8;
      $6 = HEAP32[$5 + 12 >> 2];
      HEAP32[$4 + 236 >> 2] = $6 << 24 | $6 << 8 & 16711680 | ($6 >>> 8 & 65280 | $6 >>> 24);
      $6 = $4 + 234 | 0;
      $4 = HEAPU16[$5 + 10 >> 1];
      HEAP16[$6 >> 1] = $4 << 8 | $4 >>> 8;
      $8 = $8 + 16 | 0;
      $9 = $9 - 1 | 0;
      if ($9) {
       continue
      }
      break;
     };
    }
    $6 = $1 + 180 | 0;
    $8 = $2 << 4;
    break label$3;
   }
   $4 = HEAP32[$1 + 148 >> 2];
   if (!(!$4 | !HEAPU8[$1 + 152 | 0])) {
    btAlignedFreeInternal_28void__29($4)
   }
   HEAP32[$1 + 148 >> 2] = $7;
   HEAP8[$1 + 152 | 0] = 0;
   HEAP32[$1 + 144 >> 2] = $2;
   HEAP32[$1 + 140 >> 2] = $2;
   label$11 : {
    label$12 : {
     if (!$3) {
      if (($2 | 0) > 0) {
       break label$12
      }
      $4 = $7;
      break label$11;
     }
     if (($2 | 0) <= 0) {
      $4 = $7;
      break label$11;
     }
     $5 = HEAP32[$0 + 148 >> 2];
     $9 = $2;
     $4 = $7;
     while (1) {
      $4 = $4 + $8 | 0;
      $5 = $5 + $8 | 0;
      HEAP8[$4 | 0] = HEAPU8[$5 + 7 | 0];
      HEAP8[$4 + 1 | 0] = HEAPU8[$5 + 6 | 0];
      HEAP8[$4 + 2 | 0] = HEAPU8[$5 + 5 | 0];
      HEAP8[$4 + 3 | 0] = HEAPU8[$5 + 4 | 0];
      HEAP8[$4 + 4 | 0] = HEAPU8[$5 + 3 | 0];
      HEAP8[$4 + 5 | 0] = HEAPU8[$5 + 2 | 0];
      HEAP8[$4 + 6 | 0] = HEAPU8[$5 + 1 | 0];
      HEAP8[$4 + 7 | 0] = HEAPU8[$5 | 0];
      HEAP8[$4 + 8 | 0] = HEAPU8[$5 + 15 | 0];
      HEAP8[$4 + 9 | 0] = HEAPU8[$5 + 14 | 0];
      HEAP8[$4 + 10 | 0] = HEAPU8[$5 + 13 | 0];
      HEAP8[$4 + 11 | 0] = HEAPU8[$5 + 12 | 0];
      HEAP8[$4 + 12 | 0] = HEAPU8[$5 + 11 | 0];
      HEAP8[$4 + 13 | 0] = HEAPU8[$5 + 10 | 0];
      HEAP8[$4 + 14 | 0] = HEAPU8[$5 + 9 | 0];
      HEAP8[$4 + 15 | 0] = HEAPU8[$5 + 8 | 0];
      HEAP8[$4 + 16 | 0] = HEAPU8[$5 + 23 | 0];
      HEAP8[$4 + 17 | 0] = HEAPU8[$5 + 22 | 0];
      HEAP8[$4 + 18 | 0] = HEAPU8[$5 + 21 | 0];
      HEAP8[$4 + 19 | 0] = HEAPU8[$5 + 20 | 0];
      HEAP8[$4 + 20 | 0] = HEAPU8[$5 + 19 | 0];
      HEAP8[$4 + 21 | 0] = HEAPU8[$5 + 18 | 0];
      HEAP8[$4 + 22 | 0] = HEAPU8[$5 + 17 | 0];
      HEAP8[$4 + 23 | 0] = HEAPU8[$5 + 16 | 0];
      HEAP8[$4 + 24 | 0] = HEAPU8[$5 + 31 | 0];
      HEAP8[$4 + 25 | 0] = HEAPU8[$5 + 30 | 0];
      HEAP8[$4 + 26 | 0] = HEAPU8[$5 + 29 | 0];
      HEAP8[$4 + 27 | 0] = HEAPU8[$5 + 28 | 0];
      HEAP8[$4 + 28 | 0] = HEAPU8[$5 + 27 | 0];
      HEAP8[$4 + 29 | 0] = HEAPU8[$5 + 26 | 0];
      HEAP8[$4 + 30 | 0] = HEAPU8[$5 + 25 | 0];
      HEAP8[$4 + 31 | 0] = HEAPU8[$5 + 24 | 0];
      $4 = HEAP32[$1 + 148 >> 2] + $8 | 0;
      $5 = HEAP32[$0 + 148 >> 2] + $8 | 0;
      HEAP8[$4 + 32 | 0] = HEAPU8[$5 + 39 | 0];
      HEAP8[$4 + 33 | 0] = HEAPU8[$5 + 38 | 0];
      HEAP8[$4 + 34 | 0] = HEAPU8[$5 + 37 | 0];
      HEAP8[$4 + 35 | 0] = HEAPU8[$5 + 36 | 0];
      HEAP8[$4 + 36 | 0] = HEAPU8[$5 + 35 | 0];
      HEAP8[$4 + 37 | 0] = HEAPU8[$5 + 34 | 0];
      HEAP8[$4 + 38 | 0] = HEAPU8[$5 + 33 | 0];
      HEAP8[$4 + 39 | 0] = HEAPU8[$5 + 32 | 0];
      HEAP8[$4 + 40 | 0] = HEAPU8[$5 + 47 | 0];
      HEAP8[$4 + 41 | 0] = HEAPU8[$5 + 46 | 0];
      HEAP8[$4 + 42 | 0] = HEAPU8[$5 + 45 | 0];
      HEAP8[$4 + 43 | 0] = HEAPU8[$5 + 44 | 0];
      HEAP8[$4 + 44 | 0] = HEAPU8[$5 + 43 | 0];
      HEAP8[$4 + 45 | 0] = HEAPU8[$5 + 42 | 0];
      HEAP8[$4 + 46 | 0] = HEAPU8[$5 + 41 | 0];
      HEAP8[$4 + 47 | 0] = HEAPU8[$5 + 40 | 0];
      HEAP8[$4 + 48 | 0] = HEAPU8[$5 + 55 | 0];
      HEAP8[$4 + 49 | 0] = HEAPU8[$5 + 54 | 0];
      HEAP8[$4 + 50 | 0] = HEAPU8[$5 + 53 | 0];
      HEAP8[$4 + 51 | 0] = HEAPU8[$5 + 52 | 0];
      HEAP8[$4 + 52 | 0] = HEAPU8[$5 + 51 | 0];
      HEAP8[$4 + 53 | 0] = HEAPU8[$5 + 50 | 0];
      HEAP8[$4 + 54 | 0] = HEAPU8[$5 + 49 | 0];
      HEAP8[$4 + 55 | 0] = HEAPU8[$5 + 48 | 0];
      HEAP8[$4 + 56 | 0] = HEAPU8[$5 + 63 | 0];
      HEAP8[$4 + 57 | 0] = HEAPU8[$5 + 62 | 0];
      HEAP8[$4 + 58 | 0] = HEAPU8[$5 + 61 | 0];
      HEAP8[$4 + 59 | 0] = HEAPU8[$5 + 60 | 0];
      HEAP8[$4 + 60 | 0] = HEAPU8[$5 + 59 | 0];
      HEAP8[$4 + 61 | 0] = HEAPU8[$5 + 58 | 0];
      HEAP8[$4 + 62 | 0] = HEAPU8[$5 + 57 | 0];
      HEAP8[$4 + 63 | 0] = HEAPU8[$5 + 56 | 0];
      $4 = HEAP32[$1 + 148 >> 2];
      $10 = $4 + $8 | 0;
      $5 = HEAP32[$0 + 148 >> 2];
      $11 = $5 + $8 | 0;
      $6 = HEAP32[$11 - -64 >> 2];
      HEAP32[$10 - -64 >> 2] = $6 << 24 | $6 << 8 & 16711680 | ($6 >>> 8 & 65280 | $6 >>> 24);
      $6 = HEAP32[$11 + 68 >> 2];
      HEAP32[$10 + 68 >> 2] = $6 << 24 | $6 << 8 & 16711680 | ($6 >>> 8 & 65280 | $6 >>> 24);
      $6 = HEAP32[$11 + 72 >> 2];
      HEAP32[$10 + 72 >> 2] = $6 << 24 | $6 << 8 & 16711680 | ($6 >>> 8 & 65280 | $6 >>> 24);
      $8 = $8 + 96 | 0;
      $9 = $9 - 1 | 0;
      if ($9) {
       continue
      }
      break;
     };
     break label$11;
    }
    $9 = HEAP32[$0 + 148 >> 2];
    $6 = 0;
    $5 = $2;
    $4 = $7;
    while (1) {
     $9 = $6 + $9 | 0;
     $8 = HEAP32[$9 + 4 >> 2];
     $4 = $4 + $6 | 0;
     HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$4 + 4 >> 2] = $8;
     $10 = $9 + 24 | 0;
     $11 = HEAP32[$10 + 4 >> 2];
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$8 + 4 >> 2] = $11;
     $10 = $9 + 16 | 0;
     $11 = HEAP32[$10 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$8 + 4 >> 2] = $11;
     $9 = $9 + 8 | 0;
     $8 = HEAP32[$9 + 4 >> 2];
     $4 = $4 + 8 | 0;
     HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$4 + 4 >> 2] = $8;
     $9 = HEAP32[$0 + 148 >> 2] + $6 | 0;
     $10 = $9 + 56 | 0;
     $11 = HEAP32[$10 + 4 >> 2];
     $4 = HEAP32[$1 + 148 >> 2] + $6 | 0;
     $8 = $4 + 56 | 0;
     HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$8 + 4 >> 2] = $11;
     $10 = $9 + 48 | 0;
     $11 = HEAP32[$10 + 4 >> 2];
     $8 = $4 + 48 | 0;
     HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$8 + 4 >> 2] = $11;
     $10 = $9 + 40 | 0;
     $11 = HEAP32[$10 + 4 >> 2];
     $8 = $4 + 40 | 0;
     HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$8 + 4 >> 2] = $11;
     $9 = $9 + 32 | 0;
     $8 = HEAP32[$9 + 4 >> 2];
     $4 = $4 + 32 | 0;
     HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$4 + 4 >> 2] = $8;
     $4 = HEAP32[$1 + 148 >> 2];
     $8 = $4 + $6 | 0;
     $9 = HEAP32[$0 + 148 >> 2];
     $10 = $9 + $6 | 0;
     HEAP32[$8 - -64 >> 2] = HEAP32[$10 - -64 >> 2];
     HEAP32[$8 + 68 >> 2] = HEAP32[$10 + 68 >> 2];
     HEAP32[$8 + 72 >> 2] = HEAP32[$10 + 72 >> 2];
     $6 = $6 + 96 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $6 = $1 + 140 | 0;
   $8 = Math_imul($2, 96);
   if (!HEAPU8[$1 + 152 | 0]) {
    break label$3
   }
   btAlignedFreeInternal_28void__29($4);
  }
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $2 = $6 + 5 | 0;
  HEAP8[$2 | 0] = 0;
  HEAP8[$2 + 1 | 0] = 0;
  HEAP8[$2 + 2 | 0] = 0;
  HEAP8[$2 + 3 | 0] = 0;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP8[$2 + 5 | 0] = 0;
  HEAP8[$2 + 6 | 0] = 0;
  HEAP8[$2 + 7 | 0] = 0;
  $9 = $8 + $7 | 0;
  $2 = HEAP32[$0 + 220 >> 2];
  $4 = HEAP32[$1 + 212 >> 2];
  if (!(!$4 | !HEAPU8[$1 + 216 | 0])) {
   btAlignedFreeInternal_28void__29($4)
  }
  HEAP8[$1 + 216 | 0] = 0;
  HEAP32[$1 + 212 >> 2] = $9;
  HEAP32[$1 + 208 >> 2] = $2;
  HEAP32[$1 + 204 >> 2] = $2;
  $4 = HEAP32[$0 + 220 >> 2];
  label$18 : {
   if (!$3) {
    if (($4 | 0) <= 0) {
     break label$18
    }
    $7 = $1 + $8 | 0;
    $5 = HEAP32[$0 + 212 >> 2];
    $8 = 0;
    $4 = 0;
    while (1) {
     $2 = $8 + $7 | 0;
     $3 = $5 + $8 | 0;
     HEAP16[$2 + 224 >> 1] = HEAPU16[$3 >> 1];
     HEAP16[$2 + 226 >> 1] = HEAPU16[$3 + 2 >> 1];
     HEAP16[$2 + 228 >> 1] = HEAPU16[$3 + 4 >> 1];
     HEAP16[$2 + 230 >> 1] = HEAPU16[$3 + 6 >> 1];
     HEAP16[$2 + 232 >> 1] = HEAPU16[$3 + 8 >> 1];
     $6 = $3 + 12 | 0;
     $10 = HEAP32[$6 + 4 >> 2];
     $6 = HEAP32[$6 >> 2];
     HEAP32[$2 + 252 >> 2] = 0;
     $11 = $2 + 236 | 0;
     HEAP32[$11 >> 2] = $6;
     HEAP32[$11 + 4 >> 2] = $10;
     $3 = HEAPU16[$3 + 10 >> 1];
     $6 = $2 + 244 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP16[$2 + 234 >> 1] = $3;
     $8 = $8 + 32 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) < HEAP32[$0 + 220 >> 2]) {
      continue
     }
     break;
    };
    break label$18;
   }
   if (($4 | 0) <= 0) {
    break label$18
   }
   $5 = $1 + $8 | 0;
   $8 = HEAP32[$0 + 212 >> 2];
   $0 = 0;
   while (1) {
    $2 = $0 + $5 | 0;
    $3 = $0 + $8 | 0;
    $7 = HEAPU16[$3 >> 1];
    HEAP16[$2 + 224 >> 1] = $7 << 8 | $7 >>> 8;
    $7 = HEAPU16[$3 + 2 >> 1];
    HEAP16[$2 + 226 >> 1] = $7 << 8 | $7 >>> 8;
    $7 = HEAPU16[$3 + 4 >> 1];
    HEAP16[$2 + 228 >> 1] = $7 << 8 | $7 >>> 8;
    $7 = HEAPU16[$3 + 6 >> 1];
    HEAP16[$2 + 230 >> 1] = $7 << 8 | $7 >>> 8;
    $7 = HEAPU16[$3 + 8 >> 1];
    HEAP16[$2 + 232 >> 1] = $7 << 8 | $7 >>> 8;
    $7 = HEAP32[$3 + 12 >> 2];
    HEAP32[$2 + 236 >> 2] = $7 << 24 | $7 << 8 & 16711680 | ($7 >>> 8 & 65280 | $7 >>> 24);
    $7 = HEAP32[$3 + 16 >> 2];
    HEAP32[$2 + 240 >> 2] = $7 << 24 | $7 << 8 & 16711680 | ($7 >>> 8 & 65280 | $7 >>> 24);
    $7 = $2 + 234 | 0;
    $2 = HEAPU16[$3 + 10 >> 1];
    HEAP16[$7 >> 1] = $2 << 8 | $2 >>> 8;
    $0 = $0 + 32 | 0;
    $4 = $4 - 1 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  $0 = $1 + 204 | 0;
  if (HEAPU8[$1 + 216 | 0]) {
   btAlignedFreeInternal_28void__29($9)
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  $0 = $0 + 5 | 0;
  HEAP8[$0 | 0] = 0;
  HEAP8[$0 + 1 | 0] = 0;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP8[$0 + 5 | 0] = 0;
  HEAP8[$0 + 6 | 0] = 0;
  HEAP8[$0 + 7 | 0] = 0;
  return 1;
 }
 
 function btQuantizedBvh__deSerializeFloat_28btQuantizedBvhFloatData__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  HEAPF64[$0 + 40 >> 3] = HEAPF32[$1 + 16 >> 2];
  HEAPF64[$0 + 8 >> 3] = HEAPF32[$1 >> 2];
  HEAPF64[$0 + 16 >> 3] = HEAPF32[$1 + 4 >> 2];
  HEAPF64[$0 + 24 >> 3] = HEAPF32[$1 + 8 >> 2];
  HEAPF64[$0 + 32 >> 3] = HEAPF32[$1 + 12 >> 2];
  HEAPF64[$0 + 72 >> 3] = HEAPF32[$1 + 32 >> 2];
  HEAPF64[$0 + 48 >> 3] = HEAPF32[$1 + 20 >> 2];
  HEAPF64[$0 + 56 >> 3] = HEAPF32[$1 + 24 >> 2];
  HEAPF64[$0 - -64 >> 3] = HEAPF32[$1 + 28 >> 2];
  HEAPF64[$0 + 80 >> 3] = HEAPF32[$1 + 36 >> 2];
  HEAP32[$0 + 108 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAPF64[$0 + 88 >> 3] = HEAPF32[$1 + 40 >> 2];
  HEAPF64[$0 + 96 >> 3] = HEAPF32[$1 + 44 >> 2];
  HEAP8[$0 + 112 | 0] = HEAP32[$1 + 52 >> 2] != 0;
  $6 = HEAP32[$1 + 56 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  label$1 : {
   if (($6 | 0) <= ($4 | 0)) {
    break label$1
   }
   if (($6 | 0) > HEAP32[$0 + 144 >> 2]) {
    label$3 : {
     if (!$6) {
      $2 = $4;
      break label$3;
     }
     $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($6, 96));
     $2 = HEAP32[$0 + 140 >> 2];
    }
    label$5 : {
     if (($2 | 0) <= 0) {
      break label$5
     }
     $5 = $2 & 1;
     if (($2 | 0) != 1) {
      $3 = $2 & -2;
      $2 = 0;
      while (1) {
       memcpy(memcpy($2 + $10 | 0, HEAP32[$0 + 148 >> 2] + $2 | 0, 96) + 96 | 0, (HEAP32[$0 + 148 >> 2] + $2 | 0) + 96 | 0, 96);
       $2 = $2 + 192 | 0;
       $7 = $7 + 2 | 0;
       if (($3 | 0) != ($7 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$5
     }
     $2 = Math_imul($7, 96);
     memcpy($2 + $10 | 0, $2 + HEAP32[$0 + 148 >> 2] | 0, 96);
    }
    $2 = HEAP32[$0 + 148 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 152 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$0 + 148 >> 2] = $10;
    HEAP8[$0 + 152 | 0] = 1;
    HEAP32[$0 + 144 >> 2] = $6;
   }
   $3 = ($4 ^ -1) + $6 | 0;
   $7 = $6 - $4 & 3;
   if ($7) {
    $2 = Math_imul($4, 96);
    while (1) {
     memset(HEAP32[$0 + 148 >> 2] + $2 | 0, 0, 96);
     $2 = $2 + 96 | 0;
     $4 = $4 + 1 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   if ($3 >>> 0 < 3) {
    break label$1
   }
   $2 = Math_imul($4, 96);
   $4 = $6 - $4 | 0;
   while (1) {
    memset(HEAP32[$0 + 148 >> 2] + $2 | 0, 0, 96);
    memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 96 | 0, 0, 96);
    memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 192 | 0, 0, 96);
    memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 288 | 0, 0, 96);
    $2 = $2 + 384 | 0;
    $4 = $4 - 4 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 140 >> 2] = $6;
  if (($6 | 0) > 0) {
   $2 = HEAP32[$1 + 64 >> 2] + 40 | 0;
   $4 = HEAP32[$0 + 148 >> 2] + 40 | 0;
   while (1) {
    HEAP32[$4 + 24 >> 2] = HEAP32[$2 - 8 >> 2];
    HEAPF64[$4 - 8 >> 3] = HEAPF32[$2 - 24 >> 2];
    HEAPF64[$4 >> 3] = HEAPF32[$2 - 20 >> 2];
    HEAPF64[$4 + 8 >> 3] = HEAPF32[$2 - 16 >> 2];
    HEAPF64[$4 + 16 >> 3] = HEAPF32[$2 - 12 >> 2];
    HEAPF64[$4 - 40 >> 3] = HEAPF32[$2 - 40 >> 2];
    HEAPF64[$4 - 32 >> 3] = HEAPF32[$2 - 36 >> 2];
    HEAPF64[$4 - 24 >> 3] = HEAPF32[$2 - 32 >> 2];
    HEAPF64[$4 - 16 >> 3] = HEAPF32[$2 - 28 >> 2];
    HEAP32[$4 + 28 >> 2] = HEAP32[$2 - 4 >> 2];
    HEAP32[$4 + 32 >> 2] = HEAP32[$2 >> 2];
    $4 = $4 + 96 | 0;
    $2 = $2 + 48 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  $4 = HEAP32[$0 + 180 >> 2];
  $7 = HEAP32[$1 + 60 >> 2];
  label$14 : {
   if (($4 | 0) >= ($7 | 0)) {
    break label$14
   }
   if (($7 | 0) > HEAP32[$0 + 184 >> 2]) {
    label$16 : {
     if (!$7) {
      $6 = 0;
      $2 = $4;
      break label$16;
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 4);
     $2 = HEAP32[$0 + 180 >> 2];
    }
    label$18 : {
     if (($2 | 0) <= 0) {
      break label$18
     }
     $13 = $2 & 1;
     $10 = 0;
     if (($2 | 0) != 1) {
      $11 = $2 & -2;
      $2 = 0;
      while (1) {
       $12 = HEAP32[$0 + 188 >> 2] + $2 | 0;
       $3 = HEAP32[$12 + 4 >> 2];
       $9 = $2 + $6 | 0;
       $5 = $9;
       HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $5 = $12 + 8 | 0;
       $3 = HEAP32[$5 + 4 >> 2];
       $8 = $9 + 8 | 0;
       HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $12 = HEAP32[$0 + 188 >> 2] + $2 | 0;
       $5 = $12 + 24 | 0;
       $3 = HEAP32[$5 + 4 >> 2];
       $8 = $9 + 24 | 0;
       HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $5 = $12 + 16 | 0;
       $3 = HEAP32[$5 + 4 >> 2];
       $8 = $9 + 16 | 0;
       HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $2 = $2 + 32 | 0;
       $10 = $10 + 2 | 0;
       if (($11 | 0) != ($10 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$13) {
      break label$18
     }
     $2 = $10 << 4;
     $3 = $2 + $6 | 0;
     $8 = $2 + HEAP32[$0 + 188 >> 2] | 0;
     $2 = HEAP32[$8 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$3 + 4 >> 2] = $2;
     $5 = $3 + 8 | 0;
     $3 = $8 + 8 | 0;
     $2 = HEAP32[$3 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$5 + 4 >> 2] = $2;
    }
    $2 = HEAP32[$0 + 188 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 192 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$0 + 188 >> 2] = $6;
    HEAP8[$0 + 192 | 0] = 1;
    HEAP32[$0 + 184 >> 2] = $7;
   }
   $5 = ($4 ^ -1) + $7 | 0;
   $6 = $7 - $4 & 3;
   if ($6) {
    $2 = $4 << 4;
    while (1) {
     $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $3 + 8 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $2 = $2 + 16 | 0;
     $4 = $4 + 1 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   if ($5 >>> 0 < 3) {
    break label$14
   }
   $2 = $4 << 4;
   $4 = $7 - $4 | 0;
   while (1) {
    $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $3 + 8 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $5 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    $3 = $5 + 24 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $5 + 16 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $5 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    $3 = $5 + 40 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $5 + 32 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $5 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    $3 = $5 + 56 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $5 + 48 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $2 = $2 - -64 | 0;
    $4 = $4 - 4 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 180 >> 2] = $7;
  if (($7 | 0) > 0) {
   $2 = HEAP32[$0 + 188 >> 2];
   $4 = HEAP32[$1 + 68 >> 2];
   $6 = 0;
   while (1) {
    $5 = $2 + $6 | 0;
    $3 = $4 + $6 | 0;
    HEAP16[$5 + 6 >> 1] = HEAPU16[$3 + 6 >> 1];
    HEAP16[$5 + 8 >> 1] = HEAPU16[$3 + 8 >> 1];
    HEAP16[$5 + 10 >> 1] = HEAPU16[$3 + 10 >> 1];
    HEAP16[$5 >> 1] = HEAPU16[$3 >> 1];
    HEAP16[$5 + 2 >> 1] = HEAPU16[$3 + 2 >> 1];
    HEAP32[$5 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP16[$5 + 4 >> 1] = HEAPU16[$3 + 4 >> 1];
    $6 = $6 + 16 | 0;
    $7 = $7 - 1 | 0;
    if ($7) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 196 >> 2] = HEAP32[$1 + 76 >> 2];
  $6 = HEAP32[$1 + 80 >> 2];
  $2 = HEAP32[$0 + 204 >> 2];
  if (!(($6 | 0) <= ($2 | 0) | HEAP32[$0 + 208 >> 2] >= ($6 | 0))) {
   label$28 : {
    if (!$6) {
     $13 = 0;
     break label$28;
    }
    $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 5);
    $2 = HEAP32[$0 + 204 >> 2];
   }
   label$30 : {
    if (($2 | 0) <= 0) {
     break label$30
    }
    $12 = $2 & 1;
    $10 = 0;
    if (($2 | 0) != 1) {
     $8 = $2 & -2;
     $4 = 0;
     while (1) {
      $11 = HEAP32[$0 + 212 >> 2] + $4 | 0;
      $3 = $11;
      $2 = HEAP32[$3 + 4 >> 2];
      $9 = $4 + $13 | 0;
      HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$9 + 4 >> 2] = $2;
      $3 = $3 + 24 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 16 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 8 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $11 = HEAP32[$0 + 212 >> 2] + $4 | 0;
      $3 = $11 + 40 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 48 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 56 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 56 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 32 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 32 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $4 = $4 - -64 | 0;
      $10 = $10 + 2 | 0;
      if (($8 | 0) != ($10 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$12) {
     break label$30
    }
    $4 = $10 << 5;
    $8 = $4 + $13 | 0;
    $5 = $4 + HEAP32[$0 + 212 >> 2] | 0;
    $4 = HEAP32[$5 + 4 >> 2];
    HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$8 + 4 >> 2] = $4;
    $2 = $5 + 24 | 0;
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $8 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $5 + 16 | 0;
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $8 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $5 + 8 | 0;
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $8 + 8 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
   }
   $4 = HEAP32[$0 + 212 >> 2];
   if (!(!$4 | !HEAPU8[$0 + 216 | 0])) {
    btAlignedFreeInternal_28void__29($4)
   }
   HEAP32[$0 + 212 >> 2] = $13;
   HEAP8[$0 + 216 | 0] = 1;
   HEAP32[$0 + 208 >> 2] = $6;
  }
  HEAP32[$0 + 204 >> 2] = $6;
  if (($6 | 0) > 0) {
   $2 = HEAP32[$0 + 212 >> 2] + 8 | 0;
   $4 = HEAP32[$1 + 72 >> 2];
   while (1) {
    HEAP16[$2 - 2 >> 1] = HEAPU16[$4 + 14 >> 1];
    HEAP16[$2 >> 1] = HEAPU16[$4 + 16 >> 1];
    HEAP16[$2 + 2 >> 1] = HEAPU16[$4 + 18 >> 1];
    HEAP16[$2 - 8 >> 1] = HEAPU16[$4 + 8 >> 1];
    HEAP16[$2 - 6 >> 1] = HEAPU16[$4 + 10 >> 1];
    $0 = HEAP32[$4 + 4 >> 2];
    $1 = $2 + 4 | 0;
    HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$1 + 4 >> 2] = $0;
    HEAP16[$2 - 4 >> 1] = HEAPU16[$4 + 12 >> 1];
    $2 = $2 + 32 | 0;
    $4 = $4 + 20 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
 }
 
 function btQuantizedBvh__deSerializeDouble_28btQuantizedBvhDoubleData__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  HEAPF64[$0 + 40 >> 3] = HEAPF64[$1 + 32 >> 3];
  HEAPF64[$0 + 48 >> 3] = HEAPF64[$1 + 40 >> 3];
  HEAPF64[$0 + 56 >> 3] = HEAPF64[$1 + 48 >> 3];
  HEAPF64[$0 - -64 >> 3] = HEAPF64[$1 + 56 >> 3];
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$1 >> 3];
  HEAPF64[$0 + 16 >> 3] = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$0 + 24 >> 3] = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$0 + 32 >> 3] = HEAPF64[$1 + 24 >> 3];
  HEAPF64[$0 + 72 >> 3] = HEAPF64[$1 + 64 >> 3];
  HEAPF64[$0 + 80 >> 3] = HEAPF64[$1 + 72 >> 3];
  HEAPF64[$0 + 88 >> 3] = HEAPF64[$1 + 80 >> 3];
  HEAPF64[$0 + 96 >> 3] = HEAPF64[$1 + 88 >> 3];
  HEAP32[$0 + 108 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP8[$0 + 112 | 0] = HEAP32[$1 + 100 >> 2] != 0;
  $6 = HEAP32[$1 + 104 >> 2];
  $4 = HEAP32[$0 + 140 >> 2];
  label$1 : {
   if (($6 | 0) <= ($4 | 0)) {
    break label$1
   }
   if (($6 | 0) > HEAP32[$0 + 144 >> 2]) {
    label$3 : {
     if (!$6) {
      $2 = $4;
      break label$3;
     }
     $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($6, 96));
     $2 = HEAP32[$0 + 140 >> 2];
    }
    label$5 : {
     if (($2 | 0) <= 0) {
      break label$5
     }
     $5 = $2 & 1;
     if (($2 | 0) != 1) {
      $3 = $2 & -2;
      $2 = 0;
      while (1) {
       memcpy(memcpy($2 + $10 | 0, HEAP32[$0 + 148 >> 2] + $2 | 0, 96) + 96 | 0, (HEAP32[$0 + 148 >> 2] + $2 | 0) + 96 | 0, 96);
       $2 = $2 + 192 | 0;
       $7 = $7 + 2 | 0;
       if (($3 | 0) != ($7 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$5
     }
     $2 = Math_imul($7, 96);
     memcpy($2 + $10 | 0, $2 + HEAP32[$0 + 148 >> 2] | 0, 96);
    }
    $2 = HEAP32[$0 + 148 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 152 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$0 + 148 >> 2] = $10;
    HEAP8[$0 + 152 | 0] = 1;
    HEAP32[$0 + 144 >> 2] = $6;
   }
   $3 = ($4 ^ -1) + $6 | 0;
   $7 = $6 - $4 & 3;
   if ($7) {
    $2 = Math_imul($4, 96);
    while (1) {
     memset(HEAP32[$0 + 148 >> 2] + $2 | 0, 0, 96);
     $2 = $2 + 96 | 0;
     $4 = $4 + 1 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   if ($3 >>> 0 < 3) {
    break label$1
   }
   $2 = Math_imul($4, 96);
   $4 = $6 - $4 | 0;
   while (1) {
    memset(HEAP32[$0 + 148 >> 2] + $2 | 0, 0, 96);
    memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 96 | 0, 0, 96);
    memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 192 | 0, 0, 96);
    memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 288 | 0, 0, 96);
    $2 = $2 + 384 | 0;
    $4 = $4 - 4 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 140 >> 2] = $6;
  if (($6 | 0) > 0) {
   $2 = HEAP32[$1 + 112 >> 2] + 72 | 0;
   $4 = HEAP32[$0 + 148 >> 2] + 40 | 0;
   while (1) {
    HEAPF64[$4 - 8 >> 3] = HEAPF64[$2 - 40 >> 3];
    HEAPF64[$4 >> 3] = HEAPF64[$2 - 32 >> 3];
    HEAPF64[$4 + 8 >> 3] = HEAPF64[$2 - 24 >> 3];
    HEAPF64[$4 + 16 >> 3] = HEAPF64[$2 - 16 >> 3];
    HEAPF64[$4 - 40 >> 3] = HEAPF64[$2 - 72 >> 3];
    HEAPF64[$4 - 32 >> 3] = HEAPF64[$2 + -64 >> 3];
    HEAPF64[$4 - 24 >> 3] = HEAPF64[$2 - 56 >> 3];
    HEAP32[$4 + 24 >> 2] = HEAP32[$2 - 8 >> 2];
    HEAPF64[$4 - 16 >> 3] = HEAPF64[$2 - 48 >> 3];
    HEAP32[$4 + 28 >> 2] = HEAP32[$2 - 4 >> 2];
    HEAP32[$4 + 32 >> 2] = HEAP32[$2 >> 2];
    $4 = $4 + 96 | 0;
    $2 = $2 + 80 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  $4 = HEAP32[$0 + 180 >> 2];
  $7 = HEAP32[$1 + 108 >> 2];
  label$14 : {
   if (($4 | 0) >= ($7 | 0)) {
    break label$14
   }
   if (($7 | 0) > HEAP32[$0 + 184 >> 2]) {
    label$16 : {
     if (!$7) {
      $6 = 0;
      $2 = $4;
      break label$16;
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 4);
     $2 = HEAP32[$0 + 180 >> 2];
    }
    label$18 : {
     if (($2 | 0) <= 0) {
      break label$18
     }
     $13 = $2 & 1;
     $10 = 0;
     if (($2 | 0) != 1) {
      $11 = $2 & -2;
      $2 = 0;
      while (1) {
       $12 = HEAP32[$0 + 188 >> 2] + $2 | 0;
       $3 = HEAP32[$12 + 4 >> 2];
       $9 = $2 + $6 | 0;
       $5 = $9;
       HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $5 = $12 + 8 | 0;
       $3 = HEAP32[$5 + 4 >> 2];
       $8 = $9 + 8 | 0;
       HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $12 = HEAP32[$0 + 188 >> 2] + $2 | 0;
       $5 = $12 + 24 | 0;
       $3 = HEAP32[$5 + 4 >> 2];
       $8 = $9 + 24 | 0;
       HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $5 = $12 + 16 | 0;
       $3 = HEAP32[$5 + 4 >> 2];
       $8 = $9 + 16 | 0;
       HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $2 = $2 + 32 | 0;
       $10 = $10 + 2 | 0;
       if (($11 | 0) != ($10 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$13) {
      break label$18
     }
     $2 = $10 << 4;
     $3 = $2 + $6 | 0;
     $8 = $2 + HEAP32[$0 + 188 >> 2] | 0;
     $2 = HEAP32[$8 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$3 + 4 >> 2] = $2;
     $5 = $3 + 8 | 0;
     $3 = $8 + 8 | 0;
     $2 = HEAP32[$3 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$5 + 4 >> 2] = $2;
    }
    $2 = HEAP32[$0 + 188 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 192 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$0 + 188 >> 2] = $6;
    HEAP8[$0 + 192 | 0] = 1;
    HEAP32[$0 + 184 >> 2] = $7;
   }
   $5 = ($4 ^ -1) + $7 | 0;
   $6 = $7 - $4 & 3;
   if ($6) {
    $2 = $4 << 4;
    while (1) {
     $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $3 + 8 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $2 = $2 + 16 | 0;
     $4 = $4 + 1 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   if ($5 >>> 0 < 3) {
    break label$14
   }
   $2 = $4 << 4;
   $4 = $7 - $4 | 0;
   while (1) {
    $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $3 + 8 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $5 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    $3 = $5 + 24 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $5 + 16 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $5 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    $3 = $5 + 40 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $5 + 32 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $5 = HEAP32[$0 + 188 >> 2] + $2 | 0;
    $3 = $5 + 56 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $5 + 48 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $2 = $2 - -64 | 0;
    $4 = $4 - 4 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 180 >> 2] = $7;
  if (($7 | 0) > 0) {
   $2 = HEAP32[$0 + 188 >> 2];
   $4 = HEAP32[$1 + 116 >> 2];
   $6 = 0;
   while (1) {
    $5 = $2 + $6 | 0;
    $3 = $4 + $6 | 0;
    HEAP16[$5 + 6 >> 1] = HEAPU16[$3 + 6 >> 1];
    HEAP16[$5 + 8 >> 1] = HEAPU16[$3 + 8 >> 1];
    HEAP16[$5 + 10 >> 1] = HEAPU16[$3 + 10 >> 1];
    HEAP16[$5 >> 1] = HEAPU16[$3 >> 1];
    HEAP16[$5 + 2 >> 1] = HEAPU16[$3 + 2 >> 1];
    HEAP32[$5 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP16[$5 + 4 >> 1] = HEAPU16[$3 + 4 >> 1];
    $6 = $6 + 16 | 0;
    $7 = $7 - 1 | 0;
    if ($7) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 196 >> 2] = HEAP32[$1 + 120 >> 2];
  $6 = HEAP32[$1 + 124 >> 2];
  $2 = HEAP32[$0 + 204 >> 2];
  if (!(($6 | 0) <= ($2 | 0) | HEAP32[$0 + 208 >> 2] >= ($6 | 0))) {
   label$28 : {
    if (!$6) {
     $13 = 0;
     break label$28;
    }
    $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 5);
    $2 = HEAP32[$0 + 204 >> 2];
   }
   label$30 : {
    if (($2 | 0) <= 0) {
     break label$30
    }
    $12 = $2 & 1;
    $10 = 0;
    if (($2 | 0) != 1) {
     $8 = $2 & -2;
     $4 = 0;
     while (1) {
      $11 = HEAP32[$0 + 212 >> 2] + $4 | 0;
      $3 = $11;
      $2 = HEAP32[$3 + 4 >> 2];
      $9 = $4 + $13 | 0;
      HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$9 + 4 >> 2] = $2;
      $3 = $3 + 24 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 16 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 8 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $11 = HEAP32[$0 + 212 >> 2] + $4 | 0;
      $3 = $11 + 40 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 48 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 56 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 56 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $3 = $11 + 32 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      $5 = $9 + 32 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $4 = $4 - -64 | 0;
      $10 = $10 + 2 | 0;
      if (($8 | 0) != ($10 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$12) {
     break label$30
    }
    $4 = $10 << 5;
    $8 = $4 + $13 | 0;
    $5 = $4 + HEAP32[$0 + 212 >> 2] | 0;
    $4 = HEAP32[$5 + 4 >> 2];
    HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$8 + 4 >> 2] = $4;
    $2 = $5 + 24 | 0;
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $8 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $5 + 16 | 0;
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $8 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $5 + 8 | 0;
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $8 + 8 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
   }
   $4 = HEAP32[$0 + 212 >> 2];
   if (!(!$4 | !HEAPU8[$0 + 216 | 0])) {
    btAlignedFreeInternal_28void__29($4)
   }
   HEAP32[$0 + 212 >> 2] = $13;
   HEAP8[$0 + 216 | 0] = 1;
   HEAP32[$0 + 208 >> 2] = $6;
  }
  HEAP32[$0 + 204 >> 2] = $6;
  if (($6 | 0) > 0) {
   $2 = HEAP32[$0 + 212 >> 2] + 8 | 0;
   $4 = HEAP32[$1 + 128 >> 2];
   while (1) {
    HEAP16[$2 - 2 >> 1] = HEAPU16[$4 + 14 >> 1];
    HEAP16[$2 >> 1] = HEAPU16[$4 + 16 >> 1];
    HEAP16[$2 + 2 >> 1] = HEAPU16[$4 + 18 >> 1];
    HEAP16[$2 - 8 >> 1] = HEAPU16[$4 + 8 >> 1];
    HEAP16[$2 - 6 >> 1] = HEAPU16[$4 + 10 >> 1];
    $0 = HEAP32[$4 + 4 >> 2];
    $1 = $2 + 4 | 0;
    HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$1 + 4 >> 2] = $0;
    HEAP16[$2 - 4 >> 1] = HEAPU16[$4 + 12 >> 1];
    $2 = $2 + 32 | 0;
    $4 = $4 + 20 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
 }
 
 function btQuantizedBvh__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  HEAPF64[$1 + 32 >> 3] = HEAPF64[$0 + 40 >> 3];
  HEAPF64[$1 + 40 >> 3] = HEAPF64[$0 + 48 >> 3];
  HEAPF64[$1 + 48 >> 3] = HEAPF64[$0 + 56 >> 3];
  HEAPF64[$1 + 56 >> 3] = HEAPF64[$0 - -64 >> 3];
  HEAPF64[$1 >> 3] = HEAPF64[$0 + 8 >> 3];
  HEAPF64[$1 + 8 >> 3] = HEAPF64[$0 + 16 >> 3];
  HEAPF64[$1 + 16 >> 3] = HEAPF64[$0 + 24 >> 3];
  HEAPF64[$1 + 24 >> 3] = HEAPF64[$0 + 32 >> 3];
  HEAPF64[$1 + 64 >> 3] = HEAPF64[$0 + 72 >> 3];
  HEAPF64[$1 + 72 >> 3] = HEAPF64[$0 + 80 >> 3];
  HEAPF64[$1 + 80 >> 3] = HEAPF64[$0 + 88 >> 3];
  HEAPF64[$1 + 88 >> 3] = HEAPF64[$0 + 96 >> 3];
  HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 108 >> 2];
  HEAP32[$1 + 100 >> 2] = HEAPU8[$0 + 112 | 0];
  $3 = HEAP32[$0 + 140 >> 2];
  HEAP32[$1 + 104 >> 2] = $3;
  label$1 : {
   if (!$3) {
    HEAP32[$1 + 112 >> 2] = 0;
    break label$1;
   }
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 148 >> 2]) | 0;
   HEAP32[$1 + 112 >> 2] = $3;
   if (!$3) {
    break label$1
   }
   $5 = HEAP32[$0 + 140 >> 2];
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 80, $5) | 0;
   if (($5 | 0) > 0) {
    $3 = HEAP32[$7 + 8 >> 2] + 76 | 0;
    $6 = 40;
    while (1) {
     $4 = HEAP32[$0 + 148 >> 2] + $6 | 0;
     HEAPF64[$3 - 44 >> 3] = HEAPF64[$4 - 8 >> 3];
     HEAPF64[$3 - 36 >> 3] = HEAPF64[$4 >> 3];
     HEAPF64[$3 - 28 >> 3] = HEAPF64[$4 + 8 >> 3];
     HEAPF64[$3 - 20 >> 3] = HEAPF64[$4 + 16 >> 3];
     HEAPF64[$3 - 76 >> 3] = HEAPF64[$4 - 40 >> 3];
     HEAPF64[$3 - 68 >> 3] = HEAPF64[$4 - 32 >> 3];
     HEAPF64[$3 - 60 >> 3] = HEAPF64[$4 - 24 >> 3];
     HEAPF64[$3 - 52 >> 3] = HEAPF64[$4 - 16 >> 3];
     HEAP32[$3 - 12 >> 2] = HEAP32[$4 + 24 >> 2];
     HEAP32[$3 - 8 >> 2] = HEAP32[$4 + 28 >> 2];
     $4 = HEAP32[$4 + 32 >> 2];
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 - 4 >> 2] = $4;
     $6 = $6 + 96 | 0;
     $3 = $3 + 80 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $7, 4114, 1497453121, HEAP32[$0 + 148 >> 2]);
  }
  $3 = HEAP32[$0 + 180 >> 2];
  HEAP32[$1 + 108 >> 2] = $3;
  label$5 : {
   if (!$3) {
    HEAP32[$1 + 116 >> 2] = 0;
    break label$5;
   }
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 188 >> 2]) | 0;
   HEAP32[$1 + 116 >> 2] = $3;
   if (!$3) {
    break label$5
   }
   $6 = 0;
   $5 = HEAP32[$0 + 180 >> 2];
   $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 16, $5) | 0;
   label$7 : {
    if (($5 | 0) <= 0) {
     $7 = HEAP32[$0 + 188 >> 2];
     break label$7;
    }
    $7 = HEAP32[$0 + 188 >> 2];
    $9 = HEAP32[$8 + 8 >> 2];
    while (1) {
     $3 = $6 + $9 | 0;
     $4 = $6 + $7 | 0;
     HEAP16[$3 + 6 >> 1] = HEAPU16[$4 + 6 >> 1];
     HEAP16[$3 + 8 >> 1] = HEAPU16[$4 + 8 >> 1];
     HEAP16[$3 + 10 >> 1] = HEAPU16[$4 + 10 >> 1];
     HEAP16[$3 >> 1] = HEAPU16[$4 >> 1];
     HEAP16[$3 + 2 >> 1] = HEAPU16[$4 + 2 >> 1];
     HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
     HEAP16[$3 + 4 >> 1] = HEAPU16[$4 + 4 >> 1];
     $6 = $6 + 16 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $8, 4091, 1497453121, $7);
  }
  HEAP32[$1 + 120 >> 2] = HEAP32[$0 + 196 >> 2];
  $3 = HEAP32[$0 + 204 >> 2];
  HEAP32[$1 + 124 >> 2] = $3;
  if (!$3) {
   HEAP32[$1 + 128 >> 2] = 0;
   return 4020;
  }
  $3 = $1;
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 212 >> 2]) | 0;
  HEAP32[$3 + 128 >> 2] = $1;
  if ($1) {
   $6 = HEAP32[$0 + 204 >> 2];
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 20, $6) | 0;
   label$12 : {
    if (($6 | 0) <= 0) {
     $0 = HEAP32[$0 + 212 >> 2];
     break label$12;
    }
    $0 = HEAP32[$0 + 212 >> 2];
    $3 = $0 + 8 | 0;
    $1 = HEAP32[$4 + 8 >> 2];
    while (1) {
     HEAP16[$1 + 14 >> 1] = HEAPU16[$3 - 2 >> 1];
     HEAP16[$1 + 16 >> 1] = HEAPU16[$3 >> 1];
     HEAP16[$1 + 18 >> 1] = HEAPU16[$3 + 2 >> 1];
     HEAP16[$1 + 8 >> 1] = HEAPU16[$3 - 8 >> 1];
     HEAP16[$1 + 10 >> 1] = HEAPU16[$3 - 6 >> 1];
     $5 = $3 + 4 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$1 + 4 >> 2] = $7;
     HEAP16[$1 + 12 >> 1] = HEAPU16[$3 - 4 >> 1];
     $3 = $3 + 32 | 0;
     $1 = $1 + 20 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $4, 3729, 1497453121, $0);
  }
  return 4020;
 }
 
 function btOptimizedBvh__btOptimizedBvh_28_29($0) {
  var $1 = 0;
  HEAP8[$0 + 112 | 0] = 0;
  HEAP32[$0 + 104 >> 2] = 287;
  HEAP32[$0 >> 2] = 10680;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP8[$0 + 132 | 0] = 1;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP8[$0 + 152 | 0] = 1;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  $1 = $0 + 140 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 192 | 0] = 1;
  $1 = $0 + 160 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 188 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  $1 = $0 + 180 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 220 >> 2] = 0;
  $1 = $0 + 204 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = 2146435071;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = 2146435071;
  HEAP32[$0 + 40 >> 2] = -1;
  HEAP32[$0 + 44 >> 2] = 2146435071;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1048577;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1048577;
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = -1048577;
  HEAP32[$0 >> 2] = 10744;
  return $0;
 }
 
 function btOptimizedBvh___btOptimizedBvh_28_29($0) {
  $0 = $0 | 0;
  btQuantizedBvh___btQuantizedBvh_28_29($0);
  return $0 | 0;
 }
 
 function btOptimizedBvh___btOptimizedBvh_28_29_1($0) {
  $0 = $0 | 0;
  btQuantizedBvh___btQuantizedBvh_28_29($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
  $8 = __stack_pointer - 80 | 0;
  __stack_pointer = $8;
  HEAP8[$0 + 112 | 0] = $2;
  label$1 : {
   if ($2) {
    $13 = HEAPF64[$3 >> 3];
    $14 = HEAPF64[$3 + 8 >> 3];
    $15 = HEAPF64[$3 + 16 >> 3];
    $2 = $0 + 32 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $15 = $15 - 1.0;
    HEAPF64[$0 + 24 >> 3] = $15;
    $14 = $14 - 1.0;
    HEAPF64[$0 + 16 >> 3] = $14;
    $13 = $13 - 1.0;
    HEAPF64[$0 + 8 >> 3] = $13;
    HEAP8[$0 + 112 | 0] = 1;
    $17 = HEAPF64[$4 >> 3];
    $18 = HEAPF64[$4 + 8 >> 3];
    $19 = HEAPF64[$4 + 16 >> 3];
    $2 = $0 + 96 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $2 = $0 - -64 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $19 = $19 + 1.0;
    HEAPF64[$0 + 56 >> 3] = $19;
    $18 = $18 + 1.0;
    HEAPF64[$0 + 48 >> 3] = $18;
    $17 = $17 + 1.0;
    HEAPF64[$0 + 40 >> 3] = $17;
    $20 = 65533.0 / ($19 - $15);
    HEAPF64[$0 + 88 >> 3] = $20;
    $21 = 65533.0 / ($18 - $14);
    HEAPF64[$0 + 80 >> 3] = $21;
    $5 = 65533.0 / ($17 - $13);
    HEAPF64[$0 + 72 >> 3] = $5;
    $12 = ($15 - $15) * $20;
    label$10 : {
     if ($12 < 4294967296.0 & $12 >= 0.0) {
      $2 = ~~$12 >>> 0;
      break label$10;
     }
     $2 = 0;
    }
    $25 = +(($2 & 65534) >>> 0);
    $12 = ($14 - $14) * $21;
    label$3 : {
     if ($12 < 4294967296.0 & $12 >= 0.0) {
      $2 = ~~$12 >>> 0;
      break label$3;
     }
     $2 = 0;
    }
    $12 = ($13 - $13) * $5;
    label$5 : {
     if ($12 < 4294967296.0 & $12 >= 0.0) {
      $3 = ~~$12 >>> 0;
      break label$5;
     }
     $3 = 0;
    }
    $5 = $13 + +(($3 & 65534) >>> 0) / $5 - 1.0;
    if ($13 > $5) {
     HEAPF64[$0 + 8 >> 3] = $5;
     $13 = $5;
    }
    $5 = $14 + +(($2 & 65534) >>> 0) / $21 - 1.0;
    if ($5 < $14) {
     HEAPF64[$0 + 16 >> 3] = $5;
     $14 = $5;
    }
    $5 = $15 + $25 / $20 - 1.0;
    if ($5 < $15) {
     HEAPF64[$0 + 24 >> 3] = $5;
     $15 = $5;
    }
    $5 = $19 - $15;
    $20 = 65533.0 / $5;
    $5 = $20 * $5 + 1.0;
    label$101 : {
     if ($5 < 4294967296.0 & $5 >= 0.0) {
      $2 = ~~$5 >>> 0;
      break label$101;
     }
     $2 = 0;
    }
    $20 = +(($2 | 1) >>> 0) / $20;
    $5 = $18 - $14;
    $21 = 65533.0 / $5;
    $5 = $21 * $5 + 1.0;
    label$12 : {
     if ($5 < 4294967296.0 & $5 >= 0.0) {
      $2 = ~~$5 >>> 0;
      break label$12;
     }
     $2 = 0;
    }
    $21 = $14 + +(($2 | 1) >>> 0) / $21;
    $5 = $17 - $13;
    $12 = 65533.0 / $5;
    $5 = $12 * $5 + 1.0;
    label$14 : {
     if ($5 < 4294967296.0 & $5 >= 0.0) {
      $2 = ~~$5 >>> 0;
      break label$14;
     }
     $2 = 0;
    }
    $5 = $13 + +(($2 | 1) >>> 0) / $12 + 1.0;
    if ($17 < $5) {
     HEAPF64[$0 + 40 >> 3] = $5;
     $17 = $5;
    }
    $5 = $21 + 1.0;
    if ($5 > $18) {
     HEAPF64[$0 + 48 >> 3] = $5;
     $18 = $5;
    }
    $5 = $15 + $20 + 1.0;
    if ($5 > $19) {
     HEAPF64[$0 + 56 >> 3] = $5;
     $19 = $5;
    }
    HEAP32[$0 + 96 >> 2] = 0;
    HEAP32[$0 + 100 >> 2] = 0;
    HEAPF64[$0 + 88 >> 3] = 65533.0 / ($19 - $15);
    HEAPF64[$0 + 80 >> 3] = 65533.0 / ($18 - $14);
    HEAPF64[$0 + 72 >> 3] = 65533.0 / ($17 - $13);
    HEAP32[$8 + 48 >> 2] = $0;
    HEAP32[$8 + 44 >> 2] = $0 + 156;
    HEAP32[$8 + 40 >> 2] = 10816;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $8 + 40 | 0, $0 + 8 | 0, $0 + 40 | 0);
    $1 = HEAP32[$0 + 180 >> 2];
    $10 = HEAP32[$0 + 160 >> 2];
    $6 = $10 << 1;
    label$32 : {
     if (($1 | 0) >= ($6 | 0)) {
      break label$32
     }
     if (HEAP32[$0 + 184 >> 2] < ($6 | 0)) {
      if ($10) {
       $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 5);
       $3 = HEAP32[$0 + 180 >> 2];
      } else {
       $3 = $1
      }
      label$7 : {
       if (($3 | 0) <= 0) {
        break label$7
       }
       $4 = 0;
       if (($3 | 0) != 1) {
        $11 = $3 & -2;
        $2 = 0;
        while (1) {
         $9 = HEAP32[$0 + 188 >> 2] + $2 | 0;
         $22 = HEAP32[$9 + 4 >> 2];
         $7 = $2 + $16 | 0;
         HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$7 + 4 >> 2] = $22;
         $9 = $9 + 8 | 0;
         $22 = HEAP32[$9 + 4 >> 2];
         $23 = $7 + 8 | 0;
         HEAP32[$23 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$23 + 4 >> 2] = $22;
         $9 = HEAP32[$0 + 188 >> 2] + $2 | 0;
         $22 = $9 + 24 | 0;
         $23 = HEAP32[$22 + 4 >> 2];
         $24 = $7 + 24 | 0;
         HEAP32[$24 >> 2] = HEAP32[$22 >> 2];
         HEAP32[$24 + 4 >> 2] = $23;
         $9 = $9 + 16 | 0;
         $22 = HEAP32[$9 + 4 >> 2];
         $7 = $7 + 16 | 0;
         HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$7 + 4 >> 2] = $22;
         $2 = $2 + 32 | 0;
         $4 = $4 + 2 | 0;
         if (($11 | 0) != ($4 | 0)) {
          continue
         }
         break;
        };
       }
       if (!($3 & 1)) {
        break label$7
       }
       $3 = $4 << 4;
       $2 = $3 + $16 | 0;
       $3 = $3 + HEAP32[$0 + 188 >> 2] | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$2 + 4 >> 2] = $4;
       $3 = $3 + 8 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $2 = $2 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$2 + 4 >> 2] = $4;
      }
      $2 = HEAP32[$0 + 188 >> 2];
      if (!(!$2 | !HEAPU8[$0 + 192 | 0])) {
       btAlignedFreeInternal_28void__29($2)
      }
      HEAP32[$0 + 188 >> 2] = $16;
      HEAP8[$0 + 192 | 0] = 1;
      HEAP32[$0 + 184 >> 2] = $6;
     }
     $16 = $6 + ($1 ^ -1) | 0;
     $3 = $6 - $1 & 3;
     if ($3) {
      $2 = $1 << 4;
      while (1) {
       $4 = HEAP32[$0 + 188 >> 2] + $2 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $4 + 8 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $2 = $2 + 16 | 0;
       $1 = $1 + 1 | 0;
       $3 = $3 - 1 | 0;
       if ($3) {
        continue
       }
       break;
      };
     }
     if ($16 >>> 0 < 3) {
      break label$32
     }
     $2 = $1 << 4;
     $1 = $1 - $6 | 0;
     while (1) {
      $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = $3 + 8 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
      $4 = $3 + 24 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $3 = $3 + 16 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
      $4 = $3 + 40 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $3 = $3 + 32 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = HEAP32[$0 + 188 >> 2] + $2 | 0;
      $4 = $3 + 56 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $3 = $3 + 48 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $2 = $2 - -64 | 0;
      $1 = $1 + 4 | 0;
      if ($1) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 180 >> 2] = $6;
    break label$1;
   }
   HEAP32[$8 + 72 >> 2] = 10948;
   HEAP32[$8 + 76 >> 2] = $0 + 116;
   HEAP32[$8 + 64 >> 2] = 0;
   HEAP32[$8 + 68 >> 2] = 0;
   HEAP32[$8 + 56 >> 2] = 966823146;
   HEAP32[$8 + 60 >> 2] = -970375591;
   HEAP32[$8 + 48 >> 2] = 966823146;
   HEAP32[$8 + 52 >> 2] = -970375591;
   HEAP32[$8 + 40 >> 2] = 966823146;
   HEAP32[$8 + 44 >> 2] = -970375591;
   HEAP32[$8 + 32 >> 2] = 0;
   HEAP32[$8 + 36 >> 2] = 0;
   HEAP32[$8 + 24 >> 2] = 966823146;
   HEAP32[$8 + 28 >> 2] = 1177108057;
   HEAP32[$8 + 16 >> 2] = 966823146;
   HEAP32[$8 + 20 >> 2] = 1177108057;
   HEAP32[$8 + 8 >> 2] = 966823146;
   HEAP32[$8 + 12 >> 2] = 1177108057;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $8 + 72 | 0, $8 + 40 | 0, $8 + 8 | 0);
   $1 = HEAP32[$0 + 140 >> 2];
   $10 = HEAP32[$0 + 120 >> 2];
   $6 = $10 << 1;
   label$145 : {
    if (($1 | 0) >= ($6 | 0)) {
     break label$145
    }
    if (HEAP32[$0 + 144 >> 2] < ($6 | 0)) {
     if ($10) {
      $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($10, 192));
      $4 = HEAP32[$0 + 140 >> 2];
     } else {
      $4 = $1
     }
     label$18 : {
      if (($4 | 0) <= 0) {
       break label$18
      }
      $3 = 0;
      if (($4 | 0) != 1) {
       $7 = $4 & -2;
       $2 = 0;
       while (1) {
        memcpy(memcpy($2 + $16 | 0, HEAP32[$0 + 148 >> 2] + $2 | 0, 96) + 96 | 0, (HEAP32[$0 + 148 >> 2] + $2 | 0) + 96 | 0, 96);
        $2 = $2 + 192 | 0;
        $3 = $3 + 2 | 0;
        if (($7 | 0) != ($3 | 0)) {
         continue
        }
        break;
       };
      }
      if (!($4 & 1)) {
       break label$18
      }
      $2 = Math_imul($3, 96);
      memcpy($2 + $16 | 0, $2 + HEAP32[$0 + 148 >> 2] | 0, 96);
     }
     $2 = HEAP32[$0 + 148 >> 2];
     if (!(!$2 | !HEAPU8[$0 + 152 | 0])) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 148 >> 2] = $16;
     HEAP8[$0 + 152 | 0] = 1;
     HEAP32[$0 + 144 >> 2] = $6;
    }
    $4 = $6 + ($1 ^ -1) | 0;
    $3 = $6 - $1 & 3;
    if ($3) {
     $2 = Math_imul($1, 96);
     while (1) {
      memset(HEAP32[$0 + 148 >> 2] + $2 | 0, 0, 96);
      $2 = $2 + 96 | 0;
      $1 = $1 + 1 | 0;
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    if ($4 >>> 0 < 3) {
     break label$145
    }
    $2 = Math_imul($1, 96);
    $1 = $1 - $6 | 0;
    while (1) {
     memset(HEAP32[$0 + 148 >> 2] + $2 | 0, 0, 96);
     memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 96 | 0, 0, 96);
     memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 192 | 0, 0, 96);
     memset((HEAP32[$0 + 148 >> 2] + $2 | 0) + 288 | 0, 0, 96);
     $2 = $2 + 384 | 0;
     $1 = $1 + 4 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 140 >> 2] = $6;
  }
  HEAP32[$0 + 108 >> 2] = 0;
  btQuantizedBvh__buildTree_28int_2c_20int_29($0, 0, $10);
  if (!(HEAP32[$0 + 204 >> 2] | !HEAPU8[$0 + 112 | 0])) {
   $3 = 1;
   if (!HEAP32[$0 + 208 >> 2]) {
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32);
    $10 = HEAP32[$0 + 204 >> 2];
    label$27 : {
     if (($10 | 0) <= 0) {
      break label$27
     }
     $4 = 0;
     if (($10 | 0) != 1) {
      $16 = $10 & -2;
      $1 = 0;
      while (1) {
       $6 = HEAP32[$0 + 212 >> 2] + $1 | 0;
       $7 = HEAP32[$6 + 4 >> 2];
       $2 = $1 + $3 | 0;
       HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $7 = $6 + 24 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       $11 = $2 + 24 | 0;
       HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$11 + 4 >> 2] = $9;
       $7 = $6 + 16 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       $11 = $2 + 16 | 0;
       HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$11 + 4 >> 2] = $9;
       $6 = $6 + 8 | 0;
       $7 = HEAP32[$6 + 4 >> 2];
       $9 = $2 + 8 | 0;
       HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$9 + 4 >> 2] = $7;
       $6 = HEAP32[$0 + 212 >> 2] + $1 | 0;
       $7 = $6 + 40 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       $11 = $2 + 40 | 0;
       HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$11 + 4 >> 2] = $9;
       $7 = $6 + 48 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       $11 = $2 + 48 | 0;
       HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$11 + 4 >> 2] = $9;
       $7 = $6 + 56 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       $11 = $2 + 56 | 0;
       HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$11 + 4 >> 2] = $9;
       $6 = $6 + 32 | 0;
       $7 = HEAP32[$6 + 4 >> 2];
       $2 = $2 + 32 | 0;
       HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $1 = $1 - -64 | 0;
       $4 = $4 + 2 | 0;
       if (($16 | 0) != ($4 | 0)) {
        continue
       }
       break;
      };
     }
     if (!($10 & 1)) {
      break label$27
     }
     $2 = $4 << 5;
     $1 = $2 + $3 | 0;
     $2 = $2 + HEAP32[$0 + 212 >> 2] | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = $4;
     $4 = $2 + 24 | 0;
     $10 = HEAP32[$4 + 4 >> 2];
     $6 = $1 + 24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $10;
     $4 = $2 + 16 | 0;
     $10 = HEAP32[$4 + 4 >> 2];
     $6 = $1 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $10;
     $2 = $2 + 8 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     $1 = $1 + 8 | 0;
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = $4;
    }
    $1 = HEAP32[$0 + 212 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 216 | 0])) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP32[$0 + 212 >> 2] = $3;
    HEAP8[$0 + 216 | 0] = 1;
    HEAP32[$0 + 208 >> 2] = 1;
    $3 = HEAP32[$0 + 204 >> 2] + 1 | 0;
   }
   $1 = HEAP32[$0 + 212 >> 2];
   $2 = HEAP32[$0 + 188 >> 2];
   HEAP16[$1 >> 1] = HEAPU16[$2 >> 1];
   HEAP16[$1 + 2 >> 1] = HEAPU16[$2 + 2 >> 1];
   HEAP16[$1 + 4 >> 1] = HEAPU16[$2 + 4 >> 1];
   HEAP16[$1 + 6 >> 1] = HEAPU16[$2 + 6 >> 1];
   HEAP16[$1 + 8 >> 1] = HEAPU16[$2 + 8 >> 1];
   HEAP32[$0 + 204 >> 2] = $3;
   HEAP32[$1 + 12 >> 2] = 0;
   $3 = HEAP32[$2 + 12 >> 2];
   HEAP32[$1 + 16 >> 2] = ($3 | 0) >= 0 ? 1 : 0 - $3 | 0;
   HEAP16[$1 + 10 >> 1] = HEAPU16[$2 + 10 >> 1];
  }
  HEAP32[$0 + 220 >> 2] = HEAP32[$0 + 204 >> 2];
  $1 = HEAP32[$0 + 168 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 172 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  $1 = $0 + 160 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 128 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 132 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP8[$0 + 132 | 0] = 1;
  $0 = $0 + 120 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  __stack_pointer = $8 + 80 | 0;
 }
 
 function btQuantizedBvh__calculateSerializeBufferSizeNew_28_29_20const($0) {
  $0 = $0 | 0;
  return 136;
 }
 
 function btOptimizedBvh__serializeInPlace_28void__2c_20unsigned_20int_2c_20bool_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return btQuantizedBvh__serialize_28void__2c_20unsigned_20int_2c_20bool_29_20const($0, $1, $2, $3) | 0;
 }
 
 function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__QuantizedNodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
  $6 = HEAPF64[$1 + 80 >> 3];
  $5 = HEAPF64[$1 + 48 >> 3];
  $4 = HEAPF64[$1 + 16 >> 3];
  $7 = $4 > -1.e+30 ? $4 : -1.e+30;
  $7 = $5 > $7 ? $5 : $7;
  $18 = $6 > $7 ? $6 : $7;
  $4 = $4 < 1.e+30 ? $4 : 1.e+30;
  $5 = $4 > $5 ? $5 : $4;
  $13 = $5 > $6 ? $6 : $5;
  $25 = $18 - $13;
  $6 = HEAPF64[$1 + 72 >> 3];
  $5 = HEAPF64[$1 + 40 >> 3];
  $4 = HEAPF64[$1 + 8 >> 3];
  $7 = $4 < 1.e+30 ? $4 : 1.e+30;
  $7 = $5 < $7 ? $5 : $7;
  $7 = $6 < $7 ? $6 : $7;
  $4 = $4 > -1.e+30 ? $4 : -1.e+30;
  $5 = $4 < $5 ? $5 : $4;
  $6 = $5 < $6 ? $6 : $5;
  $5 = HEAPF64[$1 + 64 >> 3];
  $4 = HEAPF64[$1 + 32 >> 3];
  $12 = HEAPF64[$1 >> 3];
  $15 = $12 < 1.e+30 ? $12 : 1.e+30;
  $16 = $4 < $15 ? $4 : $15;
  $26 = $5 < $16;
  $12 = $12 > -1.e+30 ? $12 : -1.e+30;
  $20 = $4 > $12 ? $4 : $12;
  $27 = $5 > $20;
  $1 = HEAP32[$0 + 8 >> 2];
  $12 = HEAPF64[$1 + 88 >> 3];
  $15 = HEAPF64[$1 + 80 >> 3];
  $21 = HEAPF64[$1 + 24 >> 3];
  $22 = HEAPF64[$1 + 16 >> 3];
  $23 = HEAPF64[$1 + 72 >> 3];
  $24 = HEAPF64[$1 + 8 >> 3];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if (($1 | 0) != HEAP32[$0 + 8 >> 2]) {
    break label$1
   }
   $10 = $1 ? $1 << 1 : 1;
   if (($10 | 0) <= ($1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$10) {
     break label$2
    }
    $19 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 4);
    $1 = HEAP32[$0 + 4 >> 2];
   }
   label$4 : {
    if (($1 | 0) <= 0) {
     break label$4
    }
    $28 = $1 & 1;
    if (($1 | 0) != 1) {
     $29 = $1 & -2;
     $1 = 0;
     while (1) {
      $9 = HEAP32[$0 + 12 >> 2] + $1 | 0;
      $14 = HEAP32[$9 + 4 >> 2];
      $11 = $1 + $19 | 0;
      HEAP32[$11 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$11 + 4 >> 2] = $14;
      $9 = $9 + 8 | 0;
      $17 = HEAP32[$9 + 4 >> 2];
      $14 = $11 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$14 + 4 >> 2] = $17;
      $14 = HEAP32[$0 + 12 >> 2] + $1 | 0;
      $17 = $14 + 24 | 0;
      $30 = HEAP32[$17 + 4 >> 2];
      $9 = $11 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$9 + 4 >> 2] = $30;
      $9 = $14 + 16 | 0;
      $14 = HEAP32[$9 + 4 >> 2];
      $11 = $11 + 16 | 0;
      HEAP32[$11 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$11 + 4 >> 2] = $14;
      $1 = $1 + 32 | 0;
      $8 = $8 + 2 | 0;
      if (($29 | 0) != ($8 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$28) {
     break label$4
    }
    $1 = $8 << 4;
    $8 = $1 + $19 | 0;
    $1 = $1 + HEAP32[$0 + 12 >> 2] | 0;
    $11 = HEAP32[$1 + 4 >> 2];
    HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$8 + 4 >> 2] = $11;
    $1 = $1 + 8 | 0;
    $11 = HEAP32[$1 + 4 >> 2];
    $8 = $8 + 8 | 0;
    HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$8 + 4 >> 2] = $11;
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 16 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 12 >> 2] = $19;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $10;
   $1 = HEAP32[$0 + 4 >> 2];
  }
  $4 = $26 ? $5 : $16;
  $5 = $27 ? $5 : $20;
  $16 = $6 - $7;
  $10 = HEAP32[$0 + 12 >> 2] + ($1 << 4) | 0;
  HEAP32[$10 + 12 >> 2] = $2 << 21 | $3;
  $2 = $25 < .002;
  $13 = (($2 ? $13 + -.001 : $13) - $21) * $12;
  label$8 : {
   if ($13 < 4294967296.0 & $13 >= 0.0) {
    $8 = ~~$13 >>> 0;
    break label$8;
   }
   $8 = 0;
  }
  $13 = $5 - $4;
  HEAP16[$10 + 4 >> 1] = $8 & 65534;
  $3 = $16 < .002;
  $7 = (($3 ? $7 + -.001 : $7) - $22) * $15;
  label$10 : {
   if ($7 < 4294967296.0 & $7 >= 0.0) {
    $1 = ~~$7 >>> 0;
    break label$10;
   }
   $1 = 0;
  }
  HEAP16[$10 + 2 >> 1] = $1 & 65534;
  $8 = $13 < .002;
  $4 = (($8 ? $4 + -.001 : $4) - $24) * $23;
  label$12 : {
   if ($4 < 4294967296.0 & $4 >= 0.0) {
    $1 = ~~$4 >>> 0;
    break label$12;
   }
   $1 = 0;
  }
  HEAP16[$10 >> 1] = $1 & 65534;
  $9 = $10 + 10 | 0;
  $4 = (($2 ? $18 + .001 : $18) - $21) * $12 + 1.0;
  label$14 : {
   if ($4 < 4294967296.0 & $4 >= 0.0) {
    $1 = ~~$4 >>> 0;
    break label$14;
   }
   $1 = 0;
  }
  HEAP16[$9 >> 1] = $1 | 1;
  $2 = $10 + 8 | 0;
  $6 = (($3 ? $6 + .001 : $6) - $22) * $15 + 1.0;
  label$16 : {
   if ($6 < 4294967296.0 & $6 >= 0.0) {
    $1 = ~~$6 >>> 0;
    break label$16;
   }
   $1 = 0;
  }
  HEAP16[$2 >> 1] = $1 | 1;
  $6 = (($8 ? $5 + .001 : $5) - $24) * $23 + 1.0;
  label$18 : {
   if ($6 < 4294967296.0 & $6 >= 0.0) {
    $1 = ~~$6 >>> 0;
    break label$18;
   }
   $1 = 0;
  }
  HEAP16[$10 + 6 >> 1] = $1 | 1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 }
 
 function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__NodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0;
  $13 = HEAPF64[$1 + 56 >> 3];
  $10 = HEAPF64[$1 + 24 >> 3];
  $4 = $10 > 0.0 ? $10 : 0.0;
  $17 = $4 < $13 ? $13 : $4;
  $6 = HEAPF64[$1 + 48 >> 3];
  $11 = HEAPF64[$1 + 16 >> 3];
  $4 = $11 > -1.e+30 ? $11 : -1.e+30;
  $18 = $4 < $6 ? $6 : $4;
  $7 = HEAPF64[$1 + 40 >> 3];
  $12 = HEAPF64[$1 + 8 >> 3];
  $4 = $12 > -1.e+30 ? $12 : -1.e+30;
  $19 = $4 < $7 ? $7 : $4;
  $8 = HEAPF64[$1 + 32 >> 3];
  $9 = HEAPF64[$1 >> 3];
  $4 = $9 > -1.e+30 ? $9 : -1.e+30;
  $20 = $4 < $8 ? $8 : $4;
  $4 = $10 < 0.0 ? $10 : 0.0;
  $10 = $4 > $13 ? $13 : $4;
  $4 = $11 < 1.e+30 ? $11 : 1.e+30;
  $11 = $4 > $6 ? $6 : $4;
  $4 = $12 < 1.e+30 ? $12 : 1.e+30;
  $12 = $4 > $7 ? $7 : $4;
  $4 = $9 < 1.e+30 ? $9 : 1.e+30;
  $4 = $4 > $8 ? $8 : $4;
  $6 = HEAPF64[$1 + 88 >> 3];
  $7 = HEAPF64[$1 + 80 >> 3];
  $8 = HEAPF64[$1 + 72 >> 3];
  $9 = HEAPF64[$1 + 64 >> 3];
  $5 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$5 + 4 >> 2];
  label$1 : {
   if (($1 | 0) != HEAP32[$5 + 8 >> 2]) {
    break label$1
   }
   $14 = $1 ? $1 << 1 : 1;
   if (($14 | 0) <= ($1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$14) {
     break label$2
    }
    $15 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 96));
    $1 = HEAP32[$5 + 4 >> 2];
   }
   label$4 : {
    if (($1 | 0) <= 0) {
     break label$4
    }
    $21 = $1 & 1;
    if (($1 | 0) != 1) {
     $0 = $1 & -2;
     $1 = 0;
     while (1) {
      memcpy(memcpy($1 + $15 | 0, HEAP32[$5 + 12 >> 2] + $1 | 0, 96) + 96 | 0, (HEAP32[$5 + 12 >> 2] + $1 | 0) + 96 | 0, 96);
      $1 = $1 + 192 | 0;
      $16 = $16 + 2 | 0;
      if (($0 | 0) != ($16 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$21) {
     break label$4
    }
    $0 = Math_imul($16, 96);
    memcpy($0 + $15 | 0, $0 + HEAP32[$5 + 12 >> 2] | 0, 96);
   }
   $0 = HEAP32[$5 + 12 >> 2];
   if (!(!$0 | !HEAPU8[$5 + 16 | 0])) {
    btAlignedFreeInternal_28void__29($0)
   }
   HEAP32[$5 + 12 >> 2] = $15;
   HEAP8[$5 + 16 | 0] = 1;
   HEAP32[$5 + 8 >> 2] = $14;
   $1 = HEAP32[$5 + 4 >> 2];
  }
  $0 = HEAP32[$5 + 12 >> 2] + Math_imul($1, 96) | 0;
  HEAP32[$0 + 72 >> 2] = $3;
  HEAP32[$0 + 68 >> 2] = $2;
  HEAP32[$0 + 64 >> 2] = -1;
  HEAPF64[$0 + 32 >> 3] = $9 > $20 ? $9 : $20;
  HEAPF64[$0 + 24 >> 3] = $6 < $10 ? $6 : $10;
  HEAPF64[$0 + 16 >> 3] = $7 < $11 ? $7 : $11;
  HEAPF64[$0 + 8 >> 3] = $8 < $12 ? $8 : $12;
  HEAPF64[$0 >> 3] = $4 > $9 ? $9 : $4;
  HEAPF64[$0 + 56 >> 3] = $6 > $17 ? $6 : $17;
  HEAPF64[$0 + 48 >> 3] = $7 > $18 ? $7 : $18;
  HEAPF64[$0 + 40 >> 3] = $8 > $19 ? $8 : $19;
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
 }
 
 function btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 11072;
  if (HEAPU8[$0 + 101 | 0]) {
   $1 = HEAP32[$0 + 92 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 92 >> 2]);
  }
  return $0 | 0;
 }
 
 function btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 11072;
  if (HEAPU8[$0 + 101 | 0]) {
   $1 = HEAP32[$0 + 92 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 92 >> 2]);
  }
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0;
  $17 = __stack_pointer - 128 | 0;
  __stack_pointer = $17;
  HEAP32[$17 + 120 >> 2] = 0;
  HEAP32[$17 + 16 >> 2] = $1;
  HEAP32[$17 + 8 >> 2] = 11520;
  HEAP32[$17 + 12 >> 2] = HEAP32[$0 + 88 >> 2];
  $18 = $17 + 8 | 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  $1 = HEAP32[$0 + 92 >> 2];
  label$1 : {
   if (HEAPU8[$1 + 112 | 0]) {
    $21 = HEAPF64[$1 + 56 >> 3];
    $4 = HEAPF64[$1 + 24 >> 3];
    $6 = HEAPF64[$2 + 16 >> 3];
    $6 = $4 > $6 ? $4 : $6;
    $16 = HEAPF64[$1 + 88 >> 3];
    $6 = (($6 > $21 ? $21 : $6) - $4) * $16;
    label$3 : {
     if ($6 < 4294967296.0 & $6 >= 0.0) {
      $0 = ~~$6 >>> 0;
      break label$3;
     }
     $0 = 0;
    }
    $11 = $0 & 65534;
    HEAP16[$10 + 14 >> 1] = $11;
    $22 = HEAPF64[$1 + 48 >> 3];
    $6 = HEAPF64[$1 + 16 >> 3];
    $7 = HEAPF64[$2 + 8 >> 3];
    $7 = $6 > $7 ? $6 : $7;
    $25 = HEAPF64[$1 + 80 >> 3];
    $7 = (($7 > $22 ? $22 : $7) - $6) * $25;
    label$5 : {
     if ($7 < 4294967296.0 & $7 >= 0.0) {
      $0 = ~~$7 >>> 0;
      break label$5;
     }
     $0 = 0;
    }
    $9 = $0 & 65534;
    HEAP16[$10 + 12 >> 1] = $9;
    $23 = HEAPF64[$1 + 40 >> 3];
    $7 = HEAPF64[$1 + 8 >> 3];
    $12 = HEAPF64[$2 >> 3];
    $12 = $7 > $12 ? $7 : $12;
    $26 = HEAPF64[$1 + 72 >> 3];
    $12 = (($12 > $23 ? $23 : $12) - $7) * $26;
    label$7 : {
     if ($12 < 4294967296.0 & $12 >= 0.0) {
      $0 = ~~$12 >>> 0;
      break label$7;
     }
     $0 = 0;
    }
    $5 = $0 & 65534;
    HEAP16[$10 + 10 >> 1] = $5;
    $12 = HEAPF64[$3 >> 3];
    $27 = HEAPF64[$3 + 8 >> 3];
    $29 = $16;
    $16 = HEAPF64[$3 + 16 >> 3];
    $16 = $4 > $16 ? $4 : $16;
    $4 = $29 * (($16 > $21 ? $21 : $16) - $4) + 1.0;
    label$9 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $0 = ~~$4 >>> 0;
      break label$9;
     }
     $0 = 0;
    }
    $3 = $0 | 1;
    HEAP16[$10 + 8 >> 1] = $3;
    $4 = $6 > $27 ? $6 : $27;
    $4 = $25 * (($4 > $22 ? $22 : $4) - $6) + 1.0;
    label$11 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $0 = ~~$4 >>> 0;
      break label$11;
     }
     $0 = 0;
    }
    $15 = $0 | 1;
    HEAP16[$10 + 6 >> 1] = $15;
    $4 = $7 > $12 ? $7 : $12;
    $4 = $26 * (($4 > $23 ? $23 : $4) - $7) + 1.0;
    label$13 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $0 = ~~$4 >>> 0;
      break label$13;
     }
     $0 = 0;
    }
    $13 = $0 | 1;
    HEAP16[$10 + 4 >> 1] = $13;
    label$15 : {
     switch (HEAP32[$1 + 196 >> 2]) {
     case 0:
      $14 = HEAP32[$1 + 108 >> 2];
      if (($14 | 0) > 0) {
       $0 = HEAP32[$1 + 188 >> 2];
       $2 = 0;
       while (1) {
        $1 = HEAP32[$0 + 12 >> 2];
        $19 = ($1 | 0) < 0;
        $20 = HEAPU16[$0 >> 1] <= $13 >>> 0 & HEAPU16[$0 + 6 >> 1] >= $5 >>> 0 & $11 >>> 0 <= HEAPU16[$0 + 10 >> 1] & $3 >>> 0 >= HEAPU16[$0 + 4 >> 1] & $9 >>> 0 <= HEAPU16[$0 + 8 >> 1] & HEAPU16[$0 + 2 >> 1] <= $15 >>> 0;
        if (!($19 | !$20)) {
         FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 8 >> 2]]($18, $1 >>> 21 | 0, $1 & 2097151)
        }
        label$21 : {
         if (!($19 & ($20 ^ -1))) {
          $2 = $2 + 1 | 0;
          $0 = $0 + 16 | 0;
          break label$21;
         }
         $1 = HEAP32[$0 + 12 >> 2];
         $2 = $2 - $1 | 0;
         $0 = $0 - ($1 << 4) | 0;
        }
        $8 = $8 + 1 | 0;
        if (($2 | 0) < ($14 | 0)) {
         continue
        }
        break;
       };
      }
      if (HEAP32[7902] >= ($8 | 0)) {
       break label$1
      }
      HEAP32[7902] = $8;
      break label$1;
     case 1:
      $3 = $10 + 10 | 0;
      $15 = $10 + 4 | 0;
      $5 = 0;
      if (HEAP32[$1 + 204 >> 2] > 0) {
       while (1) {
        $9 = HEAPU16[$3 >> 1];
        $0 = HEAP32[$1 + 212 >> 2] + ($5 << 5) | 0;
        label$30 : {
         if ($9 >>> 0 > HEAPU16[$0 + 6 >> 1]) {
          break label$30
         }
         $13 = HEAPU16[$15 >> 1];
         if ($13 >>> 0 < HEAPU16[$0 >> 1]) {
          break label$30
         }
         $14 = HEAPU16[$3 + 4 >> 1];
         if ($14 >>> 0 > HEAPU16[$0 + 10 >> 1]) {
          break label$30
         }
         $19 = HEAPU16[$15 + 4 >> 1];
         if ($19 >>> 0 < HEAPU16[$0 + 4 >> 1]) {
          break label$30
         }
         $20 = HEAPU16[$3 + 2 >> 1];
         if ($20 >>> 0 > HEAPU16[$0 + 8 >> 1]) {
          break label$30
         }
         $24 = HEAPU16[$15 + 2 >> 1];
         if ($24 >>> 0 < HEAPU16[$0 + 2 >> 1]) {
          break label$30
         }
         label$4 : {
          $2 = HEAP32[$0 + 16 >> 2];
          if (($2 | 0) <= 0) {
           $11 = 0;
           break label$4;
          }
          $8 = HEAP32[$0 + 12 >> 2];
          $30 = $2 + $8 | 0;
          $2 = HEAP32[$1 + 188 >> 2] + ($8 << 4) | 0;
          $11 = 1;
          while (1) {
           $0 = HEAP32[$2 + 12 >> 2];
           $28 = ($0 | 0) < 0;
           $9 = HEAPU16[$2 >> 1] <= $13 >>> 0 & HEAPU16[$2 + 6 >> 1] >= $9 >>> 0 & HEAPU16[$2 + 10 >> 1] >= $14 >>> 0 & HEAPU16[$2 + 4 >> 1] <= $19 >>> 0 & HEAPU16[$2 + 8 >> 1] >= $20 >>> 0 & HEAPU16[$2 + 2 >> 1] <= $24 >>> 0;
           if (!($28 | !$9)) {
            FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 8 >> 2]]($18, $0 >>> 21 | 0, $0 & 2097151)
           }
           label$8 : {
            if (!($28 & ($9 ^ -1))) {
             $8 = $8 + 1 | 0;
             $2 = $2 + 16 | 0;
             break label$8;
            }
            $0 = HEAP32[$2 + 12 >> 2];
            $8 = $8 - $0 | 0;
            $2 = $2 - ($0 << 4) | 0;
           }
           if (($8 | 0) >= ($30 | 0)) {
            break label$4
           }
           $11 = $11 + 1 | 0;
           $24 = HEAPU16[$15 + 2 >> 1];
           $20 = HEAPU16[$3 + 2 >> 1];
           $19 = HEAPU16[$15 + 4 >> 1];
           $14 = HEAPU16[$3 + 4 >> 1];
           $13 = HEAPU16[$15 >> 1];
           $9 = HEAPU16[$3 >> 1];
           continue;
          };
         }
         if (HEAP32[7902] >= ($11 | 0)) {
          break label$30
         }
         HEAP32[7902] = $11;
        }
        $5 = $5 + 1 | 0;
        if (($5 | 0) < HEAP32[$1 + 204 >> 2]) {
         continue
        }
        break;
       }
      }
      break label$1;
     case 2:
      break label$15;
     default:
      break label$1;
     };
    }
    btQuantizedBvh__walkRecursiveQuantizedTreeAgainstQueryAabb_28btQuantizedBvhNode_20const__2c_20btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($1, HEAP32[$1 + 188 >> 2], $18, $10 + 10 | 0, $10 + 4 | 0);
    break label$1;
   }
   $13 = HEAP32[$1 + 108 >> 2];
   if (($13 | 0) > 0) {
    $0 = HEAP32[$1 + 148 >> 2];
    while (1) {
     $5 = 0;
     label$25 : {
      if (HEAPF64[$2 >> 3] > HEAPF64[$0 + 32 >> 3]) {
       break label$25
      }
      $5 = 0;
      if (HEAPF64[$3 >> 3] < HEAPF64[$0 >> 3]) {
       break label$25
      }
      $5 = 1;
     }
     $11 = HEAPF64[$3 + 16 >> 3] < HEAPF64[$0 + 16 >> 3] | HEAPF64[$2 + 16 >> 3] > HEAPF64[$0 + 48 >> 3] ? 0 : $5;
     label$27 : {
      label$28 : {
       label$29 : {
        if (HEAPF64[$3 + 8 >> 3] < HEAPF64[$0 + 8 >> 3] | HEAPF64[$2 + 8 >> 3] > HEAPF64[$0 + 40 >> 3]) {
         $5 = HEAP32[$0 + 64 >> 2];
         $14 = ($5 | 0) == -1;
         $11 = 0;
         break label$29;
        }
        $5 = HEAP32[$0 + 64 >> 2];
        $14 = ($5 | 0) == -1;
        if (!($11 & $14)) {
         break label$29
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 8 >> 2]]($18, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 72 >> 2]);
        $13 = HEAP32[$1 + 108 >> 2];
        break label$28;
       }
       if ($11 | $14) {
        break label$28
       }
       $8 = $8 + $5 | 0;
       $0 = Math_imul($5, 96) + $0 | 0;
       break label$27;
      }
      $8 = $8 + 1 | 0;
      $0 = $0 + 96 | 0;
     }
     $9 = $9 + 1 | 0;
     if (($8 | 0) < ($13 | 0)) {
      continue
     }
     break;
    };
   }
   if (HEAP32[7902] >= ($9 | 0)) {
    break label$1
   }
   HEAP32[7902] = $9;
  }
  __stack_pointer = $10 + 16 | 0;
  __stack_pointer = $17 + 128 | 0;
 }
 
 function btBvhTriangleMeshShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  $2 = HEAPF64[$3 + 16 >> 3] - HEAPF64[$1 + 16 >> 3];
  $4 = $2 * $2;
  $2 = HEAPF64[$3 >> 3] - HEAPF64[$1 >> 3];
  $5 = $2 * $2;
  $2 = HEAPF64[$3 + 8 >> 3] - HEAPF64[$1 + 8 >> 3];
  if ($4 + ($5 + $2 * $2) > 2.220446049250313e-16) {
   btTriangleMeshShape__setLocalScaling_28btVector3_20const__29($0, $1);
   if (HEAPU8[$0 + 101 | 0]) {
    $1 = HEAP32[$0 + 92 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
    btAlignedFreeInternal_28void__29(HEAP32[$0 + 92 >> 2]);
   }
   $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(224);
   $3 = btOptimizedBvh__btOptimizedBvh_28_29($1);
   HEAP32[$0 + 92 >> 2] = $1;
   btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29($3, HEAP32[$0 + 88 >> 2], HEAPU8[$0 + 100 | 0], $0 + 24 | 0, $0 + 56 | 0);
   HEAP8[$0 + 101 | 0] = 1;
  }
 }
 
 function btBvhTriangleMeshShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  $3 = HEAP32[$0 + 88 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 56 >> 2]]($3, $1 + 12 | 0, $2) | 0;
  HEAPF32[$1 + 52 >> 2] = HEAPF64[$0 + 16 >> 3];
  label$1 : {
   label$2 : {
    if (!HEAP32[$0 + 92 >> 2]) {
     break label$2
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 52 >> 2]]($2) & 1) {
     break label$2
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, HEAP32[$0 + 92 >> 2]) | 0;
    if ($3) {
     HEAP32[$1 + 40 >> 2] = 0;
     HEAP32[$1 + 44 >> 2] = $3;
     break label$1;
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 92 >> 2]) | 0;
    HEAP32[$1 + 40 >> 2] = 0;
    HEAP32[$1 + 44 >> 2] = $3;
    $3 = HEAP32[$0 + 92 >> 2];
    $3 = ((((wasm2js_i32$1 = $2, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
    $4 = HEAP32[$0 + 92 >> 2];
    (((((wasm2js_i32$3 = $2, wasm2js_i32$2 = $3), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, HEAP32[$3 + 8 >> 2], $2) | 0), wasm2js_i32$4 = 1213612625), wasm2js_i32$5 = HEAP32[$0 + 92 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
    break label$1;
   }
   HEAP32[$1 + 40 >> 2] = 0;
   HEAP32[$1 + 44 >> 2] = 0;
  }
  label$4 : {
   label$5 : {
    if (!HEAP32[$0 + 96 >> 2]) {
     break label$5
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 52 >> 2]]($2) & 2) {
     break label$5
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, HEAP32[$0 + 96 >> 2]) | 0;
    if ($3) {
     HEAP32[$1 + 48 >> 2] = $3;
     break label$4;
    }
    (wasm2js_i32$0 = $1, wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 96 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$5;
    $3 = HEAP32[$0 + 96 >> 2];
    $3 = ((((wasm2js_i32$5 = $2, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
    $4 = HEAP32[$0 + 96 >> 2];
    (((((wasm2js_i32$1 = $2, wasm2js_i32$4 = $3), wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$3 + 8 >> 2], $2) | 0), wasm2js_i32$2 = 1346456916), wasm2js_i32$3 = HEAP32[$0 + 96 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
    break label$4;
   }
   HEAP32[$1 + 48 >> 2] = 0;
  }
  HEAP32[$1 + 56 >> 2] = 0;
  return 3840;
 }
 
 function btBvhTriangleMeshShape__serializeSingleBvh_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = HEAP32[$0 + 92 >> 2];
  if ($2) {
   $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   $3 = HEAP32[$0 + 92 >> 2];
   (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1213612625), wasm2js_i32$5 = HEAP32[$0 + 92 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
  }
 }
 
 function btBvhTriangleMeshShape__serializeSingleTriangleInfoMap_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = HEAP32[$0 + 96 >> 2];
  if ($2) {
   $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   $3 = HEAP32[$0 + 96 >> 2];
   (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1346456916), wasm2js_i32$5 = HEAP32[$0 + 96 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
  }
 }
 
 function btBvhTriangleMeshShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4254;
 }
 
 function btTriangleMeshShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
 }
 
 function btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0);
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $4 + 28 | 0, $4 + 24 | 0, $4 + 20 | 0, $4 + 16 | 0, $4 + 12 | 0, $4 + 8 | 0, $4 + 4 | 0, $4, $1);
  $6 = HEAP32[$4 + 12 >> 2] + Math_imul(HEAP32[$4 + 8 >> 2], $2) | 0;
  $5 = HEAP32[$0 + 4 >> 2];
  $11 = HEAP32[$4 + 16 >> 2];
  $12 = HEAP32[$4 + 28 >> 2];
  $17 = HEAP32[$4 >> 2];
  label$1 : {
   if (!HEAP32[$4 + 20 >> 2]) {
    if (($17 | 0) != 3) {
     $3 = HEAP32[$6 + 8 >> 2]
    } else {
     $3 = HEAPU16[$6 + 4 >> 1]
    }
    $3 = Math_imul($3, $11) + $12 | 0;
    $15 = HEAPF32[$3 >> 2];
    $16 = HEAPF32[$3 + 4 >> 2];
    $18 = HEAPF32[$3 + 8 >> 2];
    $7 = HEAPF64[$5 + 8 >> 3];
    $8 = HEAPF64[$5 + 16 >> 3];
    $9 = HEAPF64[$5 + 24 >> 3];
    $3 = $4 + 120 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$4 + 112 >> 3] = $9 * +$18;
    HEAPF64[$4 + 104 >> 3] = $8 * +$16;
    HEAPF64[$4 + 96 >> 3] = $7 * +$15;
    if (($17 | 0) != 3) {
     $3 = HEAP32[$6 + 4 >> 2]
    } else {
     $3 = HEAPU16[$6 + 2 >> 1]
    }
    $3 = Math_imul($3, $11) + $12 | 0;
    $15 = HEAPF32[$3 >> 2];
    $16 = HEAPF32[$3 + 4 >> 2];
    $18 = HEAPF32[$3 + 8 >> 2];
    $7 = HEAPF64[$5 + 8 >> 3];
    $8 = HEAPF64[$5 + 16 >> 3];
    $9 = HEAPF64[$5 + 24 >> 3];
    $3 = $4 + 88 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$4 + 80 >> 3] = $9 * +$18;
    HEAPF64[$4 + 72 >> 3] = $8 * +$16;
    HEAPF64[$4 + 64 >> 3] = $7 * +$15;
    if (($17 | 0) != 3) {
     $3 = HEAP32[$6 >> 2]
    } else {
     $3 = HEAPU16[$6 >> 1]
    }
    $6 = Math_imul($3, $11) + $12 | 0;
    $15 = HEAPF32[$6 + 4 >> 2];
    $16 = HEAPF32[$6 + 8 >> 2];
    HEAPF64[$4 + 32 >> 3] = HEAPF64[$5 + 8 >> 3] * +HEAPF32[$6 >> 2];
    $8 = HEAPF64[$5 + 16 >> 3] * +$15;
    $7 = HEAPF64[$5 + 24 >> 3] * +$16;
    break label$1;
   }
   if (($17 | 0) != 3) {
    $3 = Math_imul(HEAP32[$6 + 8 >> 2], $11) + $12 | 0;
    $7 = HEAPF64[$3 >> 3];
    $8 = HEAPF64[$3 + 8 >> 3];
    $9 = HEAPF64[$3 + 16 >> 3];
    $10 = HEAPF64[$5 + 8 >> 3];
    $13 = HEAPF64[$5 + 16 >> 3];
    $14 = HEAPF64[$5 + 24 >> 3];
    $3 = $4 + 120 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$4 + 112 >> 3] = $9 * $14;
    HEAPF64[$4 + 104 >> 3] = $8 * $13;
    HEAPF64[$4 + 96 >> 3] = $7 * $10;
    $3 = Math_imul(HEAP32[$6 + 4 >> 2], $11) + $12 | 0;
    $7 = HEAPF64[$3 >> 3];
    $8 = HEAPF64[$3 + 8 >> 3];
    $9 = HEAPF64[$3 + 16 >> 3];
    $10 = HEAPF64[$5 + 8 >> 3];
    $13 = HEAPF64[$5 + 16 >> 3];
    $14 = HEAPF64[$5 + 24 >> 3];
    $3 = $4 + 88 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$4 + 80 >> 3] = $9 * $14;
    HEAPF64[$4 + 72 >> 3] = $8 * $13;
    HEAPF64[$4 + 64 >> 3] = $7 * $10;
    $6 = Math_imul(HEAP32[$6 >> 2], $11) + $12 | 0;
    $8 = HEAPF64[$6 + 8 >> 3];
    $7 = HEAPF64[$6 + 16 >> 3];
    $9 = HEAPF64[$5 + 16 >> 3];
    $10 = HEAPF64[$5 + 24 >> 3];
    HEAPF64[$4 + 32 >> 3] = HEAPF64[$6 >> 3] * HEAPF64[$5 + 8 >> 3];
    $8 = $8 * $9;
    $7 = $7 * $10;
    break label$1;
   }
   $3 = Math_imul(HEAPU16[$6 + 4 >> 1], $11) + $12 | 0;
   $7 = HEAPF64[$3 >> 3];
   $8 = HEAPF64[$3 + 8 >> 3];
   $9 = HEAPF64[$3 + 16 >> 3];
   $10 = HEAPF64[$5 + 8 >> 3];
   $13 = HEAPF64[$5 + 16 >> 3];
   $14 = HEAPF64[$5 + 24 >> 3];
   $3 = $4 + 120 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAPF64[$4 + 112 >> 3] = $9 * $14;
   HEAPF64[$4 + 104 >> 3] = $8 * $13;
   HEAPF64[$4 + 96 >> 3] = $7 * $10;
   $3 = Math_imul(HEAPU16[$6 + 2 >> 1], $11) + $12 | 0;
   $7 = HEAPF64[$3 >> 3];
   $8 = HEAPF64[$3 + 8 >> 3];
   $9 = HEAPF64[$3 + 16 >> 3];
   $10 = HEAPF64[$5 + 8 >> 3];
   $13 = HEAPF64[$5 + 16 >> 3];
   $14 = HEAPF64[$5 + 24 >> 3];
   $3 = $4 + 88 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAPF64[$4 + 80 >> 3] = $9 * $14;
   HEAPF64[$4 + 72 >> 3] = $8 * $13;
   HEAPF64[$4 + 64 >> 3] = $7 * $10;
   $6 = Math_imul(HEAPU16[$6 >> 1], $11) + $12 | 0;
   $8 = HEAPF64[$6 + 8 >> 3];
   $7 = HEAPF64[$6 + 16 >> 3];
   $9 = HEAPF64[$5 + 16 >> 3];
   $10 = HEAPF64[$5 + 24 >> 3];
   HEAPF64[$4 + 32 >> 3] = HEAPF64[$6 >> 3] * HEAPF64[$5 + 8 >> 3];
   $8 = $8 * $9;
   $7 = $7 * $10;
  }
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 48 >> 3] = $7;
  HEAPF64[$4 + 40 >> 3] = $8;
  $5 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $4 + 32 | 0, $1, $2);
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1);
  __stack_pointer = $4 + 128 | 0;
 }
 
 function btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__MyNodeOverlapCallback__processNode_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
  $10 = __stack_pointer - 32 | 0;
  __stack_pointer = $10;
  HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 112 >> 2] + 1;
  $4 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $10 + 28 | 0, $10 + 24 | 0, $10 + 20 | 0, $10 + 16 | 0, $10 + 12 | 0, $10 + 8 | 0, $10 + 4 | 0, $10, $1);
  $4 = HEAP32[$0 + 4 >> 2];
  $6 = HEAP32[$10 + 12 >> 2] + Math_imul(HEAP32[$10 + 8 >> 2], $2) | 0;
  $5 = HEAP32[$10 + 16 >> 2];
  $12 = HEAP32[$10 + 28 >> 2];
  $15 = HEAP32[$10 >> 2];
  label$1 : {
   if (!HEAP32[$10 + 20 >> 2]) {
    label$3 : {
     label$4 : {
      switch ($15 - 2 | 0) {
      case 0:
       $3 = HEAP32[$6 + 8 >> 2];
       break label$3;
      case 1:
       $3 = HEAPU16[$6 + 4 >> 1];
       break label$3;
      default:
       break label$4;
      };
     }
     $3 = HEAPU8[$6 + 2 | 0];
    }
    $3 = Math_imul($3, $5) + $12 | 0;
    $16 = HEAPF32[$3 >> 2];
    $17 = HEAPF32[$3 + 4 >> 2];
    $18 = HEAPF32[$3 + 8 >> 2];
    $7 = HEAPF64[$4 + 8 >> 3];
    $8 = HEAPF64[$4 + 16 >> 3];
    $9 = HEAPF64[$4 + 24 >> 3];
    $3 = $0 + 104 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$0 + 96 >> 3] = $9 * +$18;
    HEAPF64[$0 + 88 >> 3] = $8 * +$17;
    HEAPF64[$0 + 80 >> 3] = $7 * +$16;
    label$7 : {
     label$8 : {
      switch ($15 - 2 | 0) {
      case 0:
       $3 = HEAP32[$6 + 4 >> 2];
       break label$7;
      case 1:
       $3 = HEAPU16[$6 + 2 >> 1];
       break label$7;
      default:
       break label$8;
      };
     }
     $3 = HEAPU8[$6 + 1 | 0];
    }
    $3 = Math_imul($3, $5) + $12 | 0;
    $16 = HEAPF32[$3 >> 2];
    $17 = HEAPF32[$3 + 4 >> 2];
    $18 = HEAPF32[$3 + 8 >> 2];
    $7 = HEAPF64[$4 + 8 >> 3];
    $8 = HEAPF64[$4 + 16 >> 3];
    $9 = HEAPF64[$4 + 24 >> 3];
    $3 = $0 + 72 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$0 - -64 >> 3] = $9 * +$18;
    HEAPF64[$0 + 56 >> 3] = $8 * +$17;
    HEAPF64[$0 + 48 >> 3] = $7 * +$16;
    label$11 : {
     label$12 : {
      switch ($15 - 2 | 0) {
      case 0:
       $3 = HEAP32[$6 >> 2];
       break label$11;
      case 1:
       $3 = HEAPU16[$6 >> 1];
       break label$11;
      default:
       break label$12;
      };
     }
     $3 = HEAPU8[$6 | 0];
    }
    $6 = $4 + 24 | 0;
    $5 = Math_imul($3, $5) + $12 | 0;
    $7 = HEAPF64[$4 + 16 >> 3] * +HEAPF32[$5 + 4 >> 2];
    $8 = HEAPF64[$4 + 8 >> 3] * +HEAPF32[$5 >> 2];
    $9 = +HEAPF32[$5 + 8 >> 2];
    break label$1;
   }
   label$15 : {
    label$16 : {
     switch ($15 - 2 | 0) {
     case 0:
      $3 = Math_imul($5, HEAP32[$6 + 8 >> 2]) + $12 | 0;
      $7 = HEAPF64[$3 >> 3];
      $8 = HEAPF64[$3 + 8 >> 3];
      $9 = HEAPF64[$3 + 16 >> 3];
      $11 = HEAPF64[$4 + 8 >> 3];
      $13 = HEAPF64[$4 + 16 >> 3];
      $14 = HEAPF64[$4 + 24 >> 3];
      $3 = $0 + 104 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAPF64[$0 + 96 >> 3] = $9 * $14;
      HEAPF64[$0 + 88 >> 3] = $8 * $13;
      HEAPF64[$0 + 80 >> 3] = $7 * $11;
      $3 = Math_imul($5, HEAP32[$6 + 4 >> 2]) + $12 | 0;
      $7 = HEAPF64[$3 >> 3];
      $8 = HEAPF64[$3 + 8 >> 3];
      $9 = HEAPF64[$3 + 16 >> 3];
      $11 = HEAPF64[$4 + 8 >> 3];
      $13 = HEAPF64[$4 + 16 >> 3];
      $14 = HEAPF64[$4 + 24 >> 3];
      $3 = $0 + 72 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAPF64[$0 - -64 >> 3] = $9 * $14;
      HEAPF64[$0 + 56 >> 3] = $8 * $13;
      HEAPF64[$0 + 48 >> 3] = $7 * $11;
      $5 = Math_imul($5, HEAP32[$6 >> 2]) + $12 | 0;
      $6 = $5 + 16 | 0;
      $8 = HEAPF64[$5 >> 3] * HEAPF64[$4 + 8 >> 3];
      $7 = HEAPF64[$5 + 8 >> 3] * HEAPF64[$4 + 16 >> 3];
      break label$15;
     case 1:
      $3 = Math_imul($5, HEAPU16[$6 + 4 >> 1]) + $12 | 0;
      $7 = HEAPF64[$3 >> 3];
      $8 = HEAPF64[$3 + 8 >> 3];
      $9 = HEAPF64[$3 + 16 >> 3];
      $11 = HEAPF64[$4 + 8 >> 3];
      $13 = HEAPF64[$4 + 16 >> 3];
      $14 = HEAPF64[$4 + 24 >> 3];
      $3 = $0 + 104 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAPF64[$0 + 96 >> 3] = $9 * $14;
      HEAPF64[$0 + 88 >> 3] = $8 * $13;
      HEAPF64[$0 + 80 >> 3] = $7 * $11;
      $3 = Math_imul($5, HEAPU16[$6 + 2 >> 1]) + $12 | 0;
      $7 = HEAPF64[$3 >> 3];
      $8 = HEAPF64[$3 + 8 >> 3];
      $9 = HEAPF64[$3 + 16 >> 3];
      $11 = HEAPF64[$4 + 8 >> 3];
      $13 = HEAPF64[$4 + 16 >> 3];
      $14 = HEAPF64[$4 + 24 >> 3];
      $3 = $0 + 72 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAPF64[$0 - -64 >> 3] = $9 * $14;
      HEAPF64[$0 + 56 >> 3] = $8 * $13;
      HEAPF64[$0 + 48 >> 3] = $7 * $11;
      $5 = Math_imul($5, HEAPU16[$6 >> 1]) + $12 | 0;
      $6 = $5 + 16 | 0;
      $8 = HEAPF64[$5 >> 3] * HEAPF64[$4 + 8 >> 3];
      $7 = HEAPF64[$5 + 8 >> 3] * HEAPF64[$4 + 16 >> 3];
      break label$15;
     default:
      break label$16;
     };
    }
    $3 = Math_imul($5, HEAPU8[$6 + 2 | 0]) + $12 | 0;
    $7 = HEAPF64[$3 >> 3];
    $8 = HEAPF64[$3 + 8 >> 3];
    $9 = HEAPF64[$3 + 16 >> 3];
    $11 = HEAPF64[$4 + 8 >> 3];
    $13 = HEAPF64[$4 + 16 >> 3];
    $14 = HEAPF64[$4 + 24 >> 3];
    $3 = $0 + 104 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$0 + 96 >> 3] = $9 * $14;
    HEAPF64[$0 + 88 >> 3] = $8 * $13;
    HEAPF64[$0 + 80 >> 3] = $7 * $11;
    $3 = Math_imul($5, HEAPU8[$6 + 1 | 0]) + $12 | 0;
    $7 = HEAPF64[$3 >> 3];
    $8 = HEAPF64[$3 + 8 >> 3];
    $9 = HEAPF64[$3 + 16 >> 3];
    $11 = HEAPF64[$4 + 8 >> 3];
    $13 = HEAPF64[$4 + 16 >> 3];
    $14 = HEAPF64[$4 + 24 >> 3];
    $3 = $0 + 72 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAPF64[$0 - -64 >> 3] = $9 * $14;
    HEAPF64[$0 + 56 >> 3] = $8 * $13;
    HEAPF64[$0 + 48 >> 3] = $7 * $11;
    $5 = Math_imul($5, HEAPU8[$6 | 0]) + $12 | 0;
    $6 = $5 + 16 | 0;
    $8 = HEAPF64[$5 >> 3] * HEAPF64[$4 + 8 >> 3];
    $7 = HEAPF64[$5 + 8 >> 3] * HEAPF64[$4 + 16 >> 3];
   }
   $9 = HEAPF64[$4 + 24 >> 3];
  }
  $11 = HEAPF64[$6 >> 3];
  $4 = $0 + 40 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAPF64[$0 + 24 >> 3] = $7;
  HEAPF64[$0 + 16 >> 3] = $8;
  HEAPF64[$0 + 32 >> 3] = $11 * $9;
  $4 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $0 + 16 | 0, $1, $2);
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1);
  __stack_pointer = $10 + 32 | 0;
 }
 
 function btDbvt__btDbvt_28_29($0) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btDbvt___btDbvt_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1)
  }
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  $1 = HEAP32[$0 + 32 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 36 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP8[$0 + 36 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1) {
  if (HEAP32[$1 + 72 >> 2]) {
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, HEAP32[$1 + 68 >> 2]);
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, HEAP32[$1 + 72 >> 2]);
  }
  if (($1 | 0) == HEAP32[$0 >> 2]) {
   HEAP32[$0 >> 2] = 0
  }
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function btDbvt__clear_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1)
  }
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  $1 = HEAP32[$0 + 32 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 36 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btDbvt__optimizeIncremental_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  label$1 : {
   $2 = HEAP32[$0 >> 2];
   if (!$2) {
    break label$1
   }
   $20 = ($1 | 0) < 0 ? HEAP32[$0 + 12 >> 2] : $1;
   if (($20 | 0) <= 0) {
    break label$1
   }
   while (1) {
    $4 = $2 + 72 | 0;
    if (HEAP32[$4 >> 2]) {
     $21 = 0;
     while (1) {
      $1 = HEAP32[$2 + 64 >> 2];
      label$5 : {
       if ($1 >>> 0 <= $2 >>> 0) {
        $1 = $2;
        break label$5;
       }
       $3 = HEAP32[$1 + 72 >> 2];
       $13 = ($3 | 0) == ($2 | 0);
       $7 = (($2 | 0) != ($3 | 0)) << 2;
       $8 = HEAP32[($7 + $1 | 0) + 68 >> 2];
       $9 = HEAP32[$1 + 64 >> 2];
       if ($9) {
        $3 = ($9 + ((HEAP32[$9 + 72 >> 2] == ($1 | 0)) << 2) | 0) + 68 | 0
       } else {
        $3 = $0
       }
       HEAP32[$3 >> 2] = $2;
       HEAP32[$8 + 64 >> 2] = $2;
       HEAP32[$1 + 64 >> 2] = $2;
       HEAP32[$2 + 64 >> 2] = $9;
       HEAP32[$1 + 68 >> 2] = HEAP32[$2 + 68 >> 2];
       HEAP32[$1 + 72 >> 2] = HEAP32[$4 >> 2];
       HEAP32[HEAP32[$2 + 68 >> 2] + 64 >> 2] = $1;
       HEAP32[HEAP32[$4 >> 2] + 64 >> 2] = $1;
       $3 = $2 + 68 | 0;
       HEAP32[$3 + ($13 << 2) >> 2] = $1;
       HEAP32[$3 + $7 >> 2] = $8;
       $4 = $1 + 56 | 0;
       $9 = HEAP32[$4 + 4 >> 2];
       $3 = $5 + 56 | 0;
       HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$3 + 4 >> 2] = $9;
       $8 = $1 + 48 | 0;
       $13 = HEAP32[$8 + 4 >> 2];
       $9 = $5 + 48 | 0;
       HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$9 + 4 >> 2] = $13;
       $7 = $1 + 40 | 0;
       $16 = HEAP32[$7 + 4 >> 2];
       $13 = $5 + 40 | 0;
       HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$13 + 4 >> 2] = $16;
       $10 = $1 + 32 | 0;
       $17 = HEAP32[$10 + 4 >> 2];
       $16 = $5 + 32 | 0;
       HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$16 + 4 >> 2] = $17;
       $11 = $1 + 24 | 0;
       $18 = HEAP32[$11 + 4 >> 2];
       $17 = $5 + 24 | 0;
       HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
       HEAP32[$17 + 4 >> 2] = $18;
       $12 = $1 + 16 | 0;
       $19 = HEAP32[$12 + 4 >> 2];
       $18 = $5 + 16 | 0;
       HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
       HEAP32[$18 + 4 >> 2] = $19;
       $14 = $1 + 8 | 0;
       $15 = HEAP32[$14 + 4 >> 2];
       $19 = $5 + 8 | 0;
       HEAP32[$19 >> 2] = HEAP32[$14 >> 2];
       HEAP32[$19 + 4 >> 2] = $15;
       $15 = HEAP32[$1 + 4 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$5 + 4 >> 2] = $15;
       $15 = $2 + 56 | 0;
       $6 = HEAP32[$15 + 4 >> 2];
       HEAP32[$4 >> 2] = HEAP32[$15 >> 2];
       HEAP32[$4 + 4 >> 2] = $6;
       $4 = $2 + 48 | 0;
       $6 = HEAP32[$4 + 4 >> 2];
       HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$8 + 4 >> 2] = $6;
       $8 = $2 + 40 | 0;
       $6 = HEAP32[$8 + 4 >> 2];
       HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$7 + 4 >> 2] = $6;
       $7 = $2 + 32 | 0;
       $6 = HEAP32[$7 + 4 >> 2];
       HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$10 + 4 >> 2] = $6;
       $10 = $2 + 24 | 0;
       $6 = HEAP32[$10 + 4 >> 2];
       HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$11 + 4 >> 2] = $6;
       $11 = $2 + 16 | 0;
       $6 = HEAP32[$11 + 4 >> 2];
       HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
       HEAP32[$12 + 4 >> 2] = $6;
       $12 = $2 + 8 | 0;
       $6 = HEAP32[$12 + 4 >> 2];
       HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
       HEAP32[$14 + 4 >> 2] = $6;
       $14 = HEAP32[$2 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $14;
       $14 = HEAP32[$3 + 4 >> 2];
       HEAP32[$15 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$15 + 4 >> 2] = $14;
       $3 = HEAP32[$9 + 4 >> 2];
       HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
       HEAP32[$4 + 4 >> 2] = $3;
       $3 = HEAP32[$13 + 4 >> 2];
       HEAP32[$8 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $3 = HEAP32[$16 + 4 >> 2];
       HEAP32[$7 >> 2] = HEAP32[$16 >> 2];
       HEAP32[$7 + 4 >> 2] = $3;
       $3 = HEAP32[$17 + 4 >> 2];
       HEAP32[$10 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$10 + 4 >> 2] = $3;
       $3 = HEAP32[$18 + 4 >> 2];
       HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
       HEAP32[$11 + 4 >> 2] = $3;
       $3 = HEAP32[$19 + 4 >> 2];
       HEAP32[$12 >> 2] = HEAP32[$19 >> 2];
       HEAP32[$12 + 4 >> 2] = $3;
       $3 = HEAP32[$5 + 4 >> 2];
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $3;
      }
      $2 = HEAP32[$0 + 16 >> 2] >>> $21 | 0;
      $21 = $21 + 1 & 31;
      $2 = HEAP32[((($2 & 1) << 2) + $1 | 0) + 68 >> 2];
      $4 = $2 + 72 | 0;
      if (HEAP32[$4 >> 2]) {
       continue
      }
      break;
     };
    }
    $1 = removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $2);
    insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $1 ? HEAP32[$0 >> 2] : 0, $2);
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
    $20 = $20 - 1 | 0;
    if (!$20) {
     break label$1
    }
    $2 = HEAP32[$0 >> 2];
    continue;
   };
  }
  __stack_pointer = $5 - -64 | 0;
 }
 
 function removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
  if (($1 | 0) == HEAP32[$0 >> 2]) {
   HEAP32[$0 >> 2] = 0;
   return 0;
  }
  $2 = HEAP32[$1 + 64 >> 2];
  $3 = HEAP32[(((HEAP32[$2 + 72 >> 2] != ($1 | 0)) << 2) + $2 | 0) + 68 >> 2];
  $1 = HEAP32[$2 + 64 >> 2];
  label$2 : {
   label$3 : {
    if ($1) {
     HEAP32[(((($2 | 0) == HEAP32[$1 + 72 >> 2]) << 2) + $1 | 0) + 68 >> 2] = $3;
     HEAP32[$3 + 64 >> 2] = $1;
     btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 4 >> 2] = $2;
     while (1) {
      $17 = HEAPF64[$1 >> 3];
      $2 = HEAP32[$1 + 68 >> 2];
      $4 = HEAPF64[$2 >> 3];
      $3 = HEAP32[$1 + 72 >> 2];
      $11 = HEAPF64[$3 >> 3];
      $4 = $4 < $11 ? $4 : $11;
      HEAPF64[$1 >> 3] = $4;
      $11 = HEAPF64[$1 + 32 >> 3];
      $5 = HEAPF64[$2 + 32 >> 3];
      $12 = HEAPF64[$3 + 32 >> 3];
      $5 = $5 > $12 ? $5 : $12;
      HEAPF64[$1 + 32 >> 3] = $5;
      $12 = HEAPF64[$1 + 8 >> 3];
      $6 = HEAPF64[$2 + 8 >> 3];
      $13 = HEAPF64[$3 + 8 >> 3];
      $6 = $6 < $13 ? $6 : $13;
      HEAPF64[$1 + 8 >> 3] = $6;
      $7 = $1 + 40 | 0;
      $13 = HEAPF64[$7 >> 3];
      $8 = HEAPF64[$2 + 40 >> 3];
      $14 = HEAPF64[$3 + 40 >> 3];
      $8 = $8 > $14 ? $8 : $14;
      HEAPF64[$7 >> 3] = $8;
      $14 = HEAPF64[$1 + 16 >> 3];
      $9 = HEAPF64[$2 + 16 >> 3];
      $15 = HEAPF64[$3 + 16 >> 3];
      $9 = $9 < $15 ? $9 : $15;
      HEAPF64[$1 + 16 >> 3] = $9;
      $7 = $1 + 48 | 0;
      $15 = HEAPF64[$7 >> 3];
      $10 = HEAPF64[$2 + 48 >> 3];
      $16 = HEAPF64[$3 + 48 >> 3];
      $10 = $10 > $16 ? $10 : $16;
      HEAPF64[$7 >> 3] = $10;
      label$6 : {
       if ($4 != $17 | $12 != $6 | ($14 != $9 | $11 != $5)) {
        break label$6
       }
       if ($13 != $8) {
        break label$6
       }
       if ($15 == $10) {
        break label$2
       }
      }
      $1 = HEAP32[$1 + 64 >> 2];
      if ($1) {
       continue
      }
      break;
     };
     break label$3;
    }
    HEAP32[$3 + 64 >> 2] = 0;
    HEAP32[$0 >> 2] = $3;
    btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
    HEAP32[$0 + 4 >> 2] = $2;
   }
   $1 = HEAP32[$0 >> 2];
  }
  return $1;
 }
 
 function insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $1, $2) {
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0;
  if (!HEAP32[$0 >> 2]) {
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$0 >> 2] = $2;
   return;
  }
  $3 = HEAP32[$1 + 72 >> 2];
  if ($3) {
   $5 = HEAPF64[$2 >> 3] + HEAPF64[$2 + 32 >> 3];
   $4 = HEAPF64[$2 + 16 >> 3] + HEAPF64[$2 + 48 >> 3];
   $6 = HEAPF64[$2 + 8 >> 3] + HEAPF64[$2 + 40 >> 3];
   while (1) {
    $7 = $1 + 68 | 0;
    $1 = HEAP32[$1 + 68 >> 2];
    $1 = HEAP32[$7 + (!(Math_abs($5 - (HEAPF64[$1 >> 3] + HEAPF64[$1 + 32 >> 3])) + Math_abs($6 - (HEAPF64[$1 + 8 >> 3] + HEAPF64[$1 + 40 >> 3])) + Math_abs($4 - (HEAPF64[$1 + 16 >> 3] + HEAPF64[$1 + 48 >> 3])) < Math_abs($5 - (HEAPF64[$3 >> 3] + HEAPF64[$3 + 32 >> 3])) + Math_abs($6 - (HEAPF64[$3 + 8 >> 3] + HEAPF64[$3 + 40 >> 3])) + Math_abs($4 - (HEAPF64[$3 + 16 >> 3] + HEAPF64[$3 + 48 >> 3]))) << 2) >> 2];
    $3 = HEAP32[$1 + 72 >> 2];
    if ($3) {
     continue
    }
    break;
   };
  }
  $7 = HEAP32[$1 + 64 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if ($3) {
    HEAP32[$0 + 4 >> 2] = 0;
    break label$4;
   }
   $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(80);
   memset($3, 0, 80);
  }
  HEAP32[$3 + 68 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 0;
  $5 = HEAPF64[$2 >> 3];
  $4 = HEAPF64[$1 >> 3];
  HEAPF64[$3 >> 3] = $4 > $5 ? $5 : $4;
  $5 = HEAPF64[$2 + 32 >> 3];
  $4 = HEAPF64[$1 + 32 >> 3];
  HEAPF64[$3 + 32 >> 3] = $4 < $5 ? $5 : $4;
  $5 = HEAPF64[$2 + 8 >> 3];
  $4 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$3 + 8 >> 3] = $4 > $5 ? $5 : $4;
  $5 = HEAPF64[$2 + 40 >> 3];
  $4 = HEAPF64[$1 + 40 >> 3];
  HEAPF64[$3 + 40 >> 3] = $4 < $5 ? $5 : $4;
  $5 = HEAPF64[$2 + 16 >> 3];
  $4 = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$3 + 16 >> 3] = $4 > $5 ? $5 : $4;
  HEAP32[$3 + 64 >> 2] = $7;
  $5 = HEAPF64[$2 + 48 >> 3];
  $4 = HEAPF64[$1 + 48 >> 3];
  HEAPF64[$3 + 48 >> 3] = $4 < $5 ? $5 : $4;
  label$6 : {
   if ($7) {
    HEAP32[(((HEAP32[HEAP32[$1 + 64 >> 2] + 72 >> 2] == ($1 | 0)) << 2) + $7 | 0) + 68 >> 2] = $3;
    HEAP32[$3 + 68 >> 2] = $1;
    HEAP32[$1 + 64 >> 2] = $3;
    HEAP32[$3 + 72 >> 2] = $2;
    HEAP32[$2 + 64 >> 2] = $3;
    $5 = HEAPF64[$3 >> 3];
    while (1) {
     $0 = $3;
     $3 = $7;
     label$9 : {
      if (!(HEAPF64[$3 >> 3] <= $5) | !(HEAPF64[$3 + 8 >> 3] <= HEAPF64[$0 + 8 >> 3]) | (!(HEAPF64[$3 + 16 >> 3] <= HEAPF64[$0 + 16 >> 3]) | !(HEAPF64[$3 + 32 >> 3] >= HEAPF64[$0 + 32 >> 3]))) {
       break label$9
      }
      if (!(HEAPF64[$3 + 40 >> 3] >= HEAPF64[$0 + 40 >> 3])) {
       break label$9
      }
      if (HEAPF64[$3 + 48 >> 3] >= HEAPF64[$0 + 48 >> 3]) {
       break label$6
      }
     }
     $0 = HEAP32[$3 + 68 >> 2];
     $5 = HEAPF64[$0 >> 3];
     $1 = HEAP32[$3 + 72 >> 2];
     $4 = HEAPF64[$1 >> 3];
     $5 = $4 > $5 ? $5 : $4;
     HEAPF64[$3 >> 3] = $5;
     $4 = HEAPF64[$0 + 32 >> 3];
     $6 = HEAPF64[$1 + 32 >> 3];
     HEAPF64[$3 + 32 >> 3] = $4 > $6 ? $4 : $6;
     $4 = HEAPF64[$0 + 8 >> 3];
     $6 = HEAPF64[$1 + 8 >> 3];
     HEAPF64[$3 + 8 >> 3] = $4 < $6 ? $4 : $6;
     $4 = HEAPF64[$0 + 40 >> 3];
     $6 = HEAPF64[$1 + 40 >> 3];
     HEAPF64[$3 + 40 >> 3] = $4 > $6 ? $4 : $6;
     $4 = HEAPF64[$0 + 16 >> 3];
     $6 = HEAPF64[$1 + 16 >> 3];
     HEAPF64[$3 + 16 >> 3] = $4 < $6 ? $4 : $6;
     $4 = HEAPF64[$0 + 48 >> 3];
     $6 = HEAPF64[$1 + 48 >> 3];
     HEAPF64[$3 + 48 >> 3] = $4 > $6 ? $4 : $6;
     $7 = HEAP32[$3 + 64 >> 2];
     if ($7) {
      continue
     }
     break;
    };
    break label$6;
   }
   HEAP32[$3 + 68 >> 2] = $1;
   HEAP32[$1 + 64 >> 2] = $3;
   HEAP32[$3 + 72 >> 2] = $2;
   HEAP32[$0 >> 2] = $3;
   HEAP32[$2 + 64 >> 2] = $3;
  }
 }
 
 function btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if ($4) {
    HEAP32[$0 + 4 >> 2] = 0;
    break label$1;
   }
   $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(80);
   memset($4, 0, 80);
  }
  HEAP32[$4 + 68 >> 2] = $2;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 72 >> 2] = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $2 = $4 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $2 = $4 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $2 = $4 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $2 = $4 + 32 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $3 = $1 + 40 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $2 = $4 + 40 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $3 = $1 + 48 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $2 = $4 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $1 = $1 + 56 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $4 + 56 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, HEAP32[$0 >> 2], $4);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
  return $4;
 }
 
 function btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $6 = removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
  label$1 : {
   if (!$6) {
    $6 = 0;
    break label$1;
   }
   $3 = HEAP32[$0 + 8 >> 2];
   if (($3 | 0) >= 0) {
    if (!$3) {
     break label$1
    }
    while (1) {
     $4 = HEAP32[$6 + 64 >> 2];
     if (!$4) {
      break label$1
     }
     $6 = $4;
     $3 = $3 - 1 | 0;
     if ($3) {
      continue
     }
     break;
    };
    break label$1;
   }
   $6 = HEAP32[$0 >> 2];
  }
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $2 + 56 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $1 + 56 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $2 + 48 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $1 + 48 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $2 + 40 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $1 + 40 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $2 + 32 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $1 + 32 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $2 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $2 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $4 = $2 + 8 | 0;
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $1 + 8 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $6, $1);
 }
 
 function btDbvt__remove_28btDbvtNode__29($0, $1) {
  removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
 }
 
 function btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1);
 }
 
 function btDbvt__ICollide__Descent_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 1;
 }
 
 function __sin($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $3 = $0 * $0;
  $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $4 = $3 * $0;
  if (!$2) {
   return $4 * ($3 * $5 + -.16666666666666632) + $0
  }
  return $0 - ($3 * ($1 * .5 - $5 * $4) - $1 + $4 * .16666666666666632);
 }
 
 function scalbn($0, $1) {
  label$1 : {
   if (($1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    if ($1 >>> 0 < 2047) {
     $1 = $1 - 1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = ($1 >>> 0 < 3069 ? $1 : 3069) - 2046 | 0;
    break label$1;
   }
   if (($1 | 0) > -1023) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   if ($1 >>> 0 > 4294965304) {
    $1 = $1 + 969 | 0;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = ($1 >>> 0 > 4294964336 ? $1 : -2960) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function __rem_pio2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
  $13 = __stack_pointer - 48 | 0;
  __stack_pointer = $13;
  wasm2js_scratch_store_f64(+$0);
  $18 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  label$1 : {
   label$2 : {
    $2 = $18 & 2147483647;
    label$3 : {
     if ($2 >>> 0 <= 1074752122) {
      if (($18 & 1048575) == 598523) {
       break label$3
      }
      if ($2 >>> 0 <= 1073928572) {
       if (($18 | 0) >= 0) {
        $0 = $0 + -1.5707963267341256;
        $5 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $5;
        HEAPF64[$1 + 8 >> 3] = $0 - $5 + -6.077100506506192e-11;
        $3 = 1;
        break label$1;
       }
       $0 = $0 + 1.5707963267341256;
       $5 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = $0 - $5 + 6.077100506506192e-11;
       $3 = -1;
       break label$1;
      }
      if (($18 | 0) >= 0) {
       $0 = $0 + -3.1415926534682512;
       $5 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = $0 - $5 + -1.2154201013012384e-10;
       $3 = 2;
       break label$1;
      }
      $0 = $0 + 3.1415926534682512;
      $5 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $5;
      HEAPF64[$1 + 8 >> 3] = $0 - $5 + 1.2154201013012384e-10;
      $3 = -2;
      break label$1;
     }
     if ($2 >>> 0 <= 1075594811) {
      if ($2 >>> 0 <= 1075183036) {
       if (($2 | 0) == 1074977148) {
        break label$3
       }
       if (($18 | 0) >= 0) {
        $0 = $0 + -4.712388980202377;
        $5 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $5;
        HEAPF64[$1 + 8 >> 3] = $0 - $5 + -1.8231301519518578e-10;
        $3 = 3;
        break label$1;
       }
       $0 = $0 + 4.712388980202377;
       $5 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = $0 - $5 + 1.8231301519518578e-10;
       $3 = -3;
       break label$1;
      }
      if (($2 | 0) == 1075388923) {
       break label$3
      }
      if (($18 | 0) >= 0) {
       $0 = $0 + -6.2831853069365025;
       $5 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = $0 - $5 + -2.430840202602477e-10;
       $3 = 4;
       break label$1;
      }
      $0 = $0 + 6.2831853069365025;
      $5 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $5;
      HEAPF64[$1 + 8 >> 3] = $0 - $5 + 2.430840202602477e-10;
      $3 = -4;
      break label$1;
     }
     if ($2 >>> 0 > 1094263290) {
      break label$2
     }
    }
    $19 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $5 = $0 + $19 * -1.5707963267341256;
    $16 = $19 * 6.077100506506192e-11;
    $0 = $5 - $16;
    HEAPF64[$1 >> 3] = $0;
    wasm2js_scratch_store_f64(+$0);
    $7 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    $3 = Math_abs($19) < 2147483648.0 ? ~~$19 : -2147483648;
    $2 = $2 >>> 20 | 0;
    label$14 : {
     if (($2 - ($7 >>> 20 & 2047) | 0) < 17) {
      break label$14
     }
     $16 = $5;
     $0 = $19 * 6.077100506303966e-11;
     $5 = $5 - $0;
     $16 = $19 * 2.0222662487959506e-21 - ($16 - $5 - $0);
     $0 = $5 - $16;
     HEAPF64[$1 >> 3] = $0;
     $4 = $2;
     wasm2js_scratch_store_f64(+$0);
     $2 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     if (($4 - ($2 >>> 20 & 2047) | 0) < 50) {
      break label$14
     }
     $16 = $5;
     $0 = $19 * 2.0222662487111665e-21;
     $5 = $5 - $0;
     $16 = $19 * 8.4784276603689e-32 - ($16 - $5 - $0);
     $0 = $5 - $16;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[$1 + 8 >> 3] = $5 - $0 - $16;
    break label$1;
   }
   if ($2 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[$1 + 8 >> 3] = $0;
    $3 = 0;
    break label$1;
   }
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $18 & 1048575 | 1096810496);
   $0 = +wasm2js_scratch_load_f64();
   label$17 : {
    if (Math_abs($0) < 2147483648.0) {
     $3 = ~~$0;
     break label$17;
    }
    $3 = -2147483648;
   }
   $5 = +($3 | 0);
   HEAPF64[$13 + 16 >> 3] = $5;
   $0 = ($0 - $5) * 16777216.0;
   label$19 : {
    if (Math_abs($0) < 2147483648.0) {
     $3 = ~~$0;
     break label$19;
    }
    $3 = -2147483648;
   }
   $5 = +($3 | 0);
   HEAPF64[$13 + 24 >> 3] = $5;
   $0 = ($0 - $5) * 16777216.0;
   HEAPF64[$13 + 32 >> 3] = $0;
   label$21 : {
    if ($0 != 0.0) {
     $7 = 2;
     break label$21;
    }
    $3 = $13 + 16 | 8;
    $7 = 2;
    while (1) {
     $7 = $7 - 1 | 0;
     $0 = HEAPF64[$3 >> 3];
     $3 = $3 - 8 | 0;
     if ($0 == 0.0) {
      continue
     }
     break;
    };
   }
   $20 = $13 + 16 | 0;
   $8 = __stack_pointer - 560 | 0;
   __stack_pointer = $8;
   $3 = ($2 >>> 20 | 0) - 1046 | 0;
   $2 = ($3 - 3 | 0) / 24 | 0;
   $22 = ($2 | 0) > 0 ? $2 : 0;
   $11 = Math_imul($22, -24) + $3 | 0;
   $17 = HEAP32[2925];
   $14 = $7 + 1 | 0;
   $21 = $14 - 1 | 0;
   $2 = $17 + $21 | 0;
   label$10 : {
    if (($2 | 0) < 0) {
     break label$10
    }
    $3 = $22 - $21 | 0;
    $7 = $14 + $17 | 0;
    $15 = $7 & 1;
    if ($2) {
     $7 = $7 & -2;
     $6 = ($22 - $14 << 2) + 11720 | 0;
     $2 = $8 + 320 | 0;
     while (1) {
      $9 = $3 + $4 | 0;
      HEAPF64[$2 >> 3] = ($9 | 0) >= 0 ? +HEAP32[$6 - 4 >> 2] : 0.0;
      HEAPF64[$2 + 8 >> 3] = ($9 | 0) >= -1 ? +HEAP32[$6 >> 2] : 0.0;
      $2 = $2 + 16 | 0;
      $6 = $6 + 8 | 0;
      $4 = $4 + 2 | 0;
      if (($7 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
     $3 = $3 + $4 | 0;
    }
    if (!$15) {
     break label$10
    }
    HEAPF64[($8 + 320 | 0) + ($4 << 3) >> 3] = ($3 | 0) < 0 ? 0.0 : +HEAP32[($3 << 2) + 11712 >> 2];
   }
   $15 = $11 - 24 | 0;
   $2 = 0;
   $9 = ($17 | 0) > 0 ? $17 : 0;
   $24 = $14 & -2;
   $12 = $14 & 1;
   $7 = ($8 + ($14 << 3) | 0) + 304 | 0;
   while (1) {
    $3 = $2;
    label$9 : {
     if (($14 | 0) <= 0) {
      $0 = 0.0;
      break label$9;
     }
     $6 = 0;
     $0 = 0.0;
     if ($21) {
      $2 = $7;
      $4 = $20;
      while (1) {
       $0 = HEAPF64[$4 + 8 >> 3] * HEAPF64[$2 >> 3] + (HEAPF64[$4 >> 3] * HEAPF64[$2 + 8 >> 3] + $0);
       $2 = $2 - 16 | 0;
       $4 = $4 + 16 | 0;
       $6 = $6 + 2 | 0;
       if (($24 | 0) != ($6 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$12) {
      break label$9
     }
     $0 = HEAPF64[($6 << 3) + $20 >> 3] * HEAPF64[($8 + 320 | 0) + (($3 + $21 | 0) - $6 << 3) >> 3] + $0;
    }
    HEAPF64[($3 << 3) + $8 >> 3] = $0;
    $7 = $7 + 8 | 0;
    $2 = $3 + 1 | 0;
    if (($3 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
   $27 = $14 & -2;
   $28 = $14 & 1;
   $29 = $17 ^ -1;
   $30 = 47 - $11 | 0;
   $25 = 48 - $11 | 0;
   $3 = $8 + 480 | 0;
   $24 = ($3 + ($17 << 2) | 0) - 4 | 0;
   $31 = $8 + 312 | 0;
   $32 = $3 - 4 | 0;
   $33 = $3 - 16 | 0;
   $34 = $8 - 16 | 0;
   $35 = $11 - 25 | 0;
   $3 = $17;
   label$13 : {
    while (1) {
     $2 = $3 << 3;
     $0 = HEAPF64[$2 + $8 >> 3];
     $7 = ($3 | 0) <= 0;
     label$15 : {
      if ($7) {
       break label$15
      }
      $9 = $3 & 1;
      $6 = 0;
      if (($3 | 0) == 1) {
       $2 = $3
      } else {
       $12 = $3 & -2;
       $2 = $2 + $34 | 0;
       $4 = $8 + 480 | 0;
       while (1) {
        $5 = $0 * 5.9604644775390625e-08;
        label$194 : {
         if (Math_abs($5) < 2147483648.0) {
          $10 = ~~$5;
          break label$194;
         }
         $10 = -2147483648;
        }
        $5 = +($10 | 0);
        $0 = $5 * -16777216.0 + $0;
        label$213 : {
         if (Math_abs($0) < 2147483648.0) {
          $10 = ~~$0;
          break label$213;
         }
         $10 = -2147483648;
        }
        HEAP32[$4 >> 2] = $10;
        $23 = $4 + 4 | 0;
        $0 = HEAPF64[$2 + 8 >> 3] + $5;
        $5 = $0 * 5.9604644775390625e-08;
        label$235 : {
         if (Math_abs($5) < 2147483648.0) {
          $10 = ~~$5;
          break label$235;
         }
         $10 = -2147483648;
        }
        $5 = +($10 | 0);
        $0 = $5 * -16777216.0 + $0;
        label$25 : {
         if (Math_abs($0) < 2147483648.0) {
          $10 = ~~$0;
          break label$25;
         }
         $10 = -2147483648;
        }
        HEAP32[$23 >> 2] = $10;
        $0 = HEAPF64[$2 >> 3] + $5;
        $4 = $4 + 8 | 0;
        $2 = $2 - 16 | 0;
        $6 = $6 + 2 | 0;
        if (($12 | 0) != ($6 | 0)) {
         continue
        }
        break;
       };
       $2 = $3 - $6 | 0;
      }
      if (!$9) {
       break label$15
      }
      $6 = ($8 + 480 | 0) + ($6 << 2) | 0;
      $5 = $0 * 5.9604644775390625e-08;
      label$27 : {
       if (Math_abs($5) < 2147483648.0) {
        $4 = ~~$5;
        break label$27;
       }
       $4 = -2147483648;
      }
      $5 = +($4 | 0);
      $0 = $5 * -16777216.0 + $0;
      label$29 : {
       if (Math_abs($0) < 2147483648.0) {
        $4 = ~~$0;
        break label$29;
       }
       $4 = -2147483648;
      }
      HEAP32[$6 >> 2] = $4;
      $0 = HEAPF64[(($2 << 3) + $8 | 0) - 8 >> 3] + $5;
     }
     $0 = scalbn($0, $15);
     $0 = Math_floor($0 * .125) * -8.0 + $0;
     label$316 : {
      if (Math_abs($0) < 2147483648.0) {
       $12 = ~~$0;
       break label$316;
      }
      $12 = -2147483648;
     }
     $0 = $0 - +($12 | 0);
     label$33 : {
      label$34 : {
       label$35 : {
        $23 = ($15 | 0) <= 0;
        label$36 : {
         if (!$23) {
          $4 = ($8 + ($3 << 2) | 0) + 476 | 0;
          $9 = HEAP32[$4 >> 2];
          $2 = $9 >> $25;
          $6 = $4;
          $4 = $9 - ($2 << $25) | 0;
          HEAP32[$6 >> 2] = $4;
          $12 = $2 + $12 | 0;
          $10 = $4 >> $30;
          break label$36;
         }
         if ($15) {
          break label$35
         }
         $10 = HEAP32[($8 + ($3 << 2) | 0) + 476 >> 2] >> 23;
        }
        if (($10 | 0) <= 0) {
         break label$33
        }
        break label$34;
       }
       $10 = 2;
       if ($0 >= .5) {
        break label$34
       }
       $10 = 0;
       break label$33;
      }
      label$38 : {
       if ($7) {
        $4 = 0;
        break label$38;
       }
       $9 = 0;
       $4 = 0;
       if (($3 | 0) != 1) {
        $36 = $3 & -2;
        $2 = $8 + 480 | 0;
        while (1) {
         $6 = HEAP32[$2 >> 2];
         $7 = 16777215;
         label$42 : {
          label$43 : {
           if ($4) {
            break label$43
           }
           $7 = 16777216;
           if ($6) {
            break label$43
           }
           $6 = 1;
           break label$42;
          }
          HEAP32[$2 >> 2] = $7 - $6;
          $6 = 0;
         }
         $26 = $2 + 4 | 0;
         $7 = HEAP32[$26 >> 2];
         $4 = 16777215;
         label$44 : {
          label$45 : {
           if (!$6) {
            break label$45
           }
           $4 = 16777216;
           if ($7) {
            break label$45
           }
           $4 = 0;
           break label$44;
          }
          HEAP32[$26 >> 2] = $4 - $7;
          $4 = 1;
         }
         $2 = $2 + 8 | 0;
         $9 = $9 + 2 | 0;
         if (($36 | 0) != ($9 | 0)) {
          continue
         }
         break;
        };
       }
       if (!($3 & 1)) {
        break label$38
       }
       $7 = ($8 + 480 | 0) + ($9 << 2) | 0;
       $2 = HEAP32[$7 >> 2];
       $6 = 16777215;
       label$46 : {
        if ($4) {
         break label$46
        }
        $6 = 16777216;
        if ($2) {
         break label$46
        }
        $4 = 0;
        break label$38;
       }
       HEAP32[$7 >> 2] = $6 - $2;
       $4 = 1;
      }
      label$47 : {
       if ($23) {
        break label$47
       }
       $2 = 8388607;
       label$48 : {
        switch ($35 | 0) {
        case 1:
         $2 = 4194303;
         break;
        case 0:
         break label$48;
        default:
         break label$47;
        };
       }
       $7 = ($8 + ($3 << 2) | 0) + 476 | 0;
       HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & $2;
      }
      $12 = $12 + 1 | 0;
      if (($10 | 0) != 2) {
       break label$33
      }
      $0 = 1.0 - $0;
      $10 = 2;
      if (!$4) {
       break label$33
      }
      $0 = $0 - scalbn(1.0, $15);
     }
     if ($0 == 0.0) {
      label$51 : {
       if (($3 | 0) <= ($17 | 0)) {
        break label$51
       }
       $2 = $3 - $17 | 0;
       $6 = $2 & 3;
       $4 = 0;
       $7 = $3;
       if ($3 + $29 >>> 0 >= 3) {
        $9 = $2 & -4;
        $2 = ($3 << 2) + $33 | 0;
        while (1) {
         $4 = HEAP32[$2 >> 2] | (HEAP32[$2 + 4 >> 2] | (HEAP32[$2 + 8 >> 2] | (HEAP32[$2 + 12 >> 2] | $4)));
         $2 = $2 - 16 | 0;
         $7 = $7 - 4 | 0;
         $9 = $9 - 4 | 0;
         if ($9) {
          continue
         }
         break;
        };
       }
       if ($6) {
        $2 = ($7 << 2) + $32 | 0;
        while (1) {
         $4 = HEAP32[$2 >> 2] | $4;
         $2 = $2 - 4 | 0;
         $6 = $6 - 1 | 0;
         if ($6) {
          continue
         }
         break;
        };
       }
       if (!$4) {
        break label$51
       }
       $2 = ($8 + ($3 << 2) | 0) + 476 | 0;
       $11 = $15;
       while (1) {
        $3 = $3 - 1 | 0;
        $11 = $11 - 24 | 0;
        $7 = HEAP32[$2 >> 2];
        $2 = $2 - 4 | 0;
        if (!$7) {
         continue
        }
        break;
       };
       break label$13;
      }
      $2 = $24;
      $7 = $3;
      while (1) {
       $7 = $7 + 1 | 0;
       $4 = HEAP32[$2 >> 2];
       $2 = $2 - 4 | 0;
       if (!$4) {
        continue
       }
       break;
      };
      $9 = ($3 + $14 << 3) + $31 | 0;
      while (1) {
       $12 = $3 + $14 | 0;
       $3 = $3 + 1 | 0;
       HEAPF64[($8 + 320 | 0) + ($12 << 3) >> 3] = HEAP32[($3 + $22 << 2) + 11712 >> 2];
       label$59 : {
        if (($14 | 0) <= 0) {
         $0 = 0.0;
         break label$59;
        }
        $6 = 0;
        $0 = 0.0;
        if ($21) {
         $2 = $9;
         $4 = $20;
         while (1) {
          $0 = HEAPF64[$4 + 8 >> 3] * HEAPF64[$2 >> 3] + (HEAPF64[$4 >> 3] * HEAPF64[$2 + 8 >> 3] + $0);
          $2 = $2 - 16 | 0;
          $4 = $4 + 16 | 0;
          $6 = $6 + 2 | 0;
          if (($27 | 0) != ($6 | 0)) {
           continue
          }
          break;
         };
        }
        if (!$28) {
         break label$59
        }
        $0 = HEAPF64[($6 << 3) + $20 >> 3] * HEAPF64[($8 + 320 | 0) + ($12 - $6 << 3) >> 3] + $0;
       }
       HEAPF64[($3 << 3) + $8 >> 3] = $0;
       $9 = $9 + 8 | 0;
       if (($3 | 0) < ($7 | 0)) {
        continue
       }
       break;
      };
      $3 = $7;
      continue;
     }
     break;
    };
    $0 = scalbn($0, 24 - $11 | 0);
    label$63 : {
     if ($0 >= 16777216.0) {
      $7 = ($8 + 480 | 0) + ($3 << 2) | 0;
      $5 = $0 * 5.9604644775390625e-08;
      label$65 : {
       if (Math_abs($5) < 2147483648.0) {
        $2 = ~~$5;
        break label$65;
       }
       $2 = -2147483648;
      }
      $0 = +($2 | 0) * -16777216.0 + $0;
      label$67 : {
       if (Math_abs($0) < 2147483648.0) {
        $4 = ~~$0;
        break label$67;
       }
       $4 = -2147483648;
      }
      HEAP32[$7 >> 2] = $4;
      $3 = $3 + 1 | 0;
      break label$63;
     }
     $2 = Math_abs($0) < 2147483648.0 ? ~~$0 : -2147483648;
     $11 = $15;
    }
    HEAP32[($8 + 480 | 0) + ($3 << 2) >> 2] = $2;
   }
   label$71 : {
    if (($3 | 0) < 0) {
     break label$71
    }
    $0 = scalbn(1.0, $11);
    if ($3 & 1) {
     $2 = $3
    } else {
     HEAPF64[($3 << 3) + $8 >> 3] = $0 * +HEAP32[($8 + 480 | 0) + ($3 << 2) >> 2];
     $0 = $0 * 5.9604644775390625e-08;
     $2 = $3 - 1 | 0;
    }
    if ($3) {
     $6 = $2 + 1 | 0;
     $7 = $2 - 1 | 0;
     $2 = ($8 + 480 | 0) + ($7 << 2) | 0;
     $4 = ($7 << 3) + $8 | 0;
     while (1) {
      $5 = $0 * 5.9604644775390625e-08;
      HEAPF64[$4 >> 3] = $5 * +HEAP32[$2 >> 2];
      HEAPF64[$4 + 8 >> 3] = $0 * +HEAP32[$2 + 4 >> 2];
      $2 = $2 - 8 | 0;
      $4 = $4 - 16 | 0;
      $0 = $5 * 5.9604644775390625e-08;
      $6 = $6 - 2 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    if (($3 | 0) < 0) {
     break label$71
    }
    $11 = ($3 << 3) + $8 | 0;
    $2 = $3;
    while (1) {
     $7 = $2;
     $15 = $3 - $2 | 0;
     $0 = 0.0;
     $2 = 0;
     $4 = 0;
     while (1) {
      label$77 : {
       $0 = HEAPF64[$2 + 14480 >> 3] * HEAPF64[$2 + $11 >> 3] + $0;
       if (($4 | 0) >= ($17 | 0)) {
        break label$77
       }
       $2 = $2 + 8 | 0;
       $20 = $4 >>> 0 < $15 >>> 0;
       $4 = $4 + 1 | 0;
       if ($20) {
        continue
       }
      }
      break;
     };
     HEAPF64[($8 + 160 | 0) + ($15 << 3) >> 3] = $0;
     $11 = $11 - 8 | 0;
     $2 = $7 - 1 | 0;
     if (($7 | 0) > 0) {
      continue
     }
     break;
    };
   }
   label$97 : {
    if (($3 | 0) < 0) {
     $0 = 0.0;
     break label$97;
    }
    $6 = $3 + 1 & 3;
    label$99 : {
     if (!$6) {
      $0 = 0.0;
      $4 = $3;
      break label$99;
     }
     $2 = ($8 + 160 | 0) + ($3 << 3) | 0;
     $0 = 0.0;
     $4 = $3;
     while (1) {
      $4 = $4 - 1 | 0;
      $0 = $0 + HEAPF64[$2 >> 3];
      $2 = $2 - 8 | 0;
      $6 = $6 - 1 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    if ($3 >>> 0 < 3) {
     break label$97
    }
    $6 = $4 + 1 | 0;
    $2 = ($8 + ($4 << 3) | 0) + 136 | 0;
    while (1) {
     $0 = $0 + HEAPF64[$2 + 24 >> 3] + HEAPF64[$2 + 16 >> 3] + HEAPF64[$2 + 8 >> 3] + HEAPF64[$2 >> 3];
     $2 = $2 - 32 | 0;
     $6 = $6 - 4 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   HEAPF64[$13 >> 3] = $10 ? -$0 : $0;
   $0 = HEAPF64[$8 + 160 >> 3] - $0;
   $2 = 1;
   label$103 : {
    if (($3 | 0) <= 0) {
     break label$103
    }
    $4 = $3 & 3;
    if ($3 - 1 >>> 0 >= 3) {
     $3 = $3 & -4;
     $2 = $8 + 192 | 0;
     $6 = 0;
     while (1) {
      $0 = $0 + HEAPF64[$2 - 24 >> 3] + HEAPF64[$2 - 16 >> 3] + HEAPF64[$2 - 8 >> 3] + HEAPF64[$2 >> 3];
      $2 = $2 + 32 | 0;
      $6 = $6 + 4 | 0;
      if (($3 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
     $2 = $6 + 1 | 0;
    }
    if (!$4) {
     break label$103
    }
    $2 = ($8 + 160 | 0) + ($2 << 3) | 0;
    while (1) {
     $0 = $0 + HEAPF64[$2 >> 3];
     $2 = $2 + 8 | 0;
     $4 = $4 - 1 | 0;
     if ($4) {
      continue
     }
     break;
    };
   }
   HEAPF64[$13 + 8 >> 3] = $10 ? -$0 : $0;
   __stack_pointer = $8 + 560 | 0;
   $3 = $12 & 7;
   $0 = HEAPF64[$13 >> 3];
   if (($18 | 0) < 0) {
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[$1 + 8 >> 3] = -HEAPF64[$13 + 8 >> 3];
    $3 = 0 - $3 | 0;
    break label$1;
   }
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = HEAPF64[$13 + 8 >> 3];
  }
  __stack_pointer = $13 + 48 | 0;
  return $3;
 }
 
 function __cos($0, $1) {
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $5 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1));
 }
 
 function sin($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $2 = $2 & 2147483647;
  label$1 : {
   if ($2 >>> 0 <= 1072243195) {
    if ($2 >>> 0 < 1045430272) {
     break label$1
    }
    $0 = __sin($0, 0.0, 0);
    break label$1;
   }
   if ($2 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    break label$1;
   }
   label$4 : {
    switch (__rem_pio2($0, $1) & 3) {
    case 0:
     $0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 1:
     $0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 2:
     $0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    default:
     break label$4;
    };
   }
   $0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
  }
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function cos($0) {
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $3 = $3 & 2147483647;
  label$1 : {
   if ($3 >>> 0 <= 1072243195) {
    $2 = 1.0;
    if ($3 >>> 0 < 1044816030) {
     break label$1
    }
    $2 = __cos($0, 0.0);
    break label$1;
   }
   $2 = $0 - $0;
   if ($3 >>> 0 >= 2146435072) {
    break label$1
   }
   label$4 : {
    switch (__rem_pio2($0, $1) & 3) {
    case 0:
     $2 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 1:
     $2 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 2:
     $2 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    default:
     break label$4;
    };
   }
   $2 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
  }
  $0 = $2;
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function btCompoundShape___btCompoundShape_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14552;
  $1 = HEAP32[$0 + 104 >> 2];
  if ($1) {
   btDbvt___btDbvt_28_29($1);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 104 >> 2]);
  }
  $1 = HEAP32[$0 + 28 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 32 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  $1 = $0 + 20 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCompoundShape___btCompoundShape_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14552;
  $1 = HEAP32[$0 + 104 >> 2];
  if ($1) {
   btDbvt___btDbvt_28_29($1);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 104 >> 2]);
  }
  $1 = HEAP32[$0 + 28 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 32 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  $1 = $0 + 20 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btCompoundShape__removeChildShapeByIndex_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
  $7 = __stack_pointer - 160 | 0;
  __stack_pointer = $7;
  HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + 1;
  $3 = HEAP32[$0 + 104 >> 2];
  if ($3) {
   btDbvt__remove_28btDbvtNode__29($3, HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($1, 152) | 0) + 144 >> 2])
  }
  $2 = HEAP32[$0 + 20 >> 2];
  $34 = $0 + 28 | 0;
  $21 = HEAP32[$34 >> 2];
  $35 = Math_imul($1, 152);
  $3 = $21 + $35 | 0;
  $4 = $3 + 8 | 0;
  $10 = HEAP32[$4 + 4 >> 2];
  $8 = $7 + 8 | 0;
  $6 = $8 + 8 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $10;
  $5 = $3 + 16 | 0;
  $11 = HEAP32[$5 + 4 >> 2];
  $10 = $8 + 16 | 0;
  HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$10 + 4 >> 2] = $11;
  $22 = $3 + 24 | 0;
  $12 = HEAP32[$22 + 4 >> 2];
  $11 = $8 + 24 | 0;
  HEAP32[$11 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$11 + 4 >> 2] = $12;
  $23 = $3 + 40 | 0;
  $13 = HEAP32[$23 + 4 >> 2];
  $12 = $8 + 40 | 0;
  HEAP32[$12 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$12 + 4 >> 2] = $13;
  $24 = $3 + 48 | 0;
  $14 = HEAP32[$24 + 4 >> 2];
  $13 = $8 + 48 | 0;
  HEAP32[$13 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$13 + 4 >> 2] = $14;
  $25 = $3 + 56 | 0;
  $15 = HEAP32[$25 + 4 >> 2];
  $14 = $8 + 56 | 0;
  HEAP32[$14 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$14 + 4 >> 2] = $15;
  $26 = $3 + 72 | 0;
  $16 = HEAP32[$26 + 4 >> 2];
  $15 = $8 + 72 | 0;
  HEAP32[$15 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$15 + 4 >> 2] = $16;
  $27 = $3 + 80 | 0;
  $17 = HEAP32[$27 + 4 >> 2];
  $16 = $8 + 80 | 0;
  HEAP32[$16 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$16 + 4 >> 2] = $17;
  $28 = $3 + 88 | 0;
  $9 = HEAP32[$28 + 4 >> 2];
  $17 = $8 + 88 | 0;
  HEAP32[$17 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$17 + 4 >> 2] = $9;
  $9 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$7 + 12 >> 2] = $9;
  $9 = HEAP32[$3 + 36 >> 2];
  HEAP32[$7 + 40 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$7 + 44 >> 2] = $9;
  $9 = HEAP32[$3 + 68 >> 2];
  HEAP32[$7 + 72 >> 2] = HEAP32[$3 + 64 >> 2];
  HEAP32[$7 + 76 >> 2] = $9;
  $29 = $3 + 120 | 0;
  $18 = HEAP32[$29 + 4 >> 2];
  $9 = $8 + 120 | 0;
  HEAP32[$9 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$9 + 4 >> 2] = $18;
  $30 = $3 + 112 | 0;
  $19 = HEAP32[$30 + 4 >> 2];
  $18 = $8 + 112 | 0;
  HEAP32[$18 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$18 + 4 >> 2] = $19;
  $31 = $3 + 104 | 0;
  $20 = HEAP32[$31 + 4 >> 2];
  $19 = $8 + 104 | 0;
  HEAP32[$19 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$19 + 4 >> 2] = $20;
  $32 = $3 + 136 | 0;
  $33 = HEAP32[$32 + 4 >> 2];
  $20 = $8 + 136 | 0;
  HEAP32[$20 >> 2] = HEAP32[$32 >> 2];
  HEAP32[$20 + 4 >> 2] = $33;
  $33 = $8 + 144 | 0;
  $36 = $3 + 144 | 0;
  HEAP32[$33 >> 2] = HEAP32[$36 >> 2];
  $8 = $21;
  $21 = Math_imul($2, 152) - 152 | 0;
  $2 = $8 + $21 | 0;
  $8 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $8 = $2 + 8 | 0;
  $37 = HEAP32[$8 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$4 + 4 >> 2] = $37;
  $4 = $2 + 16 | 0;
  $8 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $8;
  $4 = $2 + 24 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$22 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$22 + 4 >> 2] = $5;
  $4 = HEAP32[$3 + 100 >> 2];
  HEAP32[$7 + 104 >> 2] = HEAP32[$3 + 96 >> 2];
  HEAP32[$7 + 108 >> 2] = $4;
  $4 = HEAP32[$3 + 132 >> 2];
  HEAP32[$7 + 136 >> 2] = HEAP32[$3 + 128 >> 2];
  HEAP32[$7 + 140 >> 2] = $4;
  $4 = HEAP32[$2 + 36 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$3 + 36 >> 2] = $4;
  $4 = $2 + 40 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$23 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$23 + 4 >> 2] = $5;
  $4 = $2 + 48 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$24 + 4 >> 2] = $5;
  $4 = $2 + 56 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$25 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$25 + 4 >> 2] = $5;
  $4 = HEAP32[$2 + 68 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$3 + 68 >> 2] = $4;
  $4 = $2 + 72 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$26 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$26 + 4 >> 2] = $5;
  $4 = $2 + 80 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$27 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$27 + 4 >> 2] = $5;
  $4 = $2 + 88 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$28 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$28 + 4 >> 2] = $5;
  $4 = HEAP32[$2 + 100 >> 2];
  HEAP32[$3 + 96 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$3 + 100 >> 2] = $4;
  $4 = $2 + 104 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$31 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$31 + 4 >> 2] = $5;
  $4 = $2 + 112 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$30 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$30 + 4 >> 2] = $5;
  $4 = $2 + 120 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$29 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$29 + 4 >> 2] = $5;
  HEAP32[$36 >> 2] = HEAP32[$2 + 144 >> 2];
  $4 = $2 + 136 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$32 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$32 + 4 >> 2] = $5;
  $4 = HEAP32[$2 + 132 >> 2];
  HEAP32[$3 + 128 >> 2] = HEAP32[$2 + 128 >> 2];
  HEAP32[$3 + 132 >> 2] = $4;
  $2 = HEAP32[$7 + 12 >> 2];
  $3 = HEAP32[$34 >> 2] + $21 | 0;
  HEAP32[$3 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $4 = HEAP32[$11 + 4 >> 2];
  $2 = $3 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $4 = HEAP32[$10 + 4 >> 2];
  $2 = $3 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $4 = HEAP32[$6 + 4 >> 2];
  $2 = $3 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$7 + 44 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$7 + 40 >> 2];
  HEAP32[$3 + 36 >> 2] = $2;
  $6 = HEAP32[$12 + 4 >> 2];
  $2 = $3 + 40 | 0;
  HEAP32[$2 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $6 = HEAP32[$13 + 4 >> 2];
  $2 = $3 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $6 = HEAP32[$14 + 4 >> 2];
  $2 = $3 + 56 | 0;
  HEAP32[$2 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $2 = HEAP32[$7 + 76 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAP32[$7 + 72 >> 2];
  HEAP32[$3 + 68 >> 2] = $2;
  $6 = HEAP32[$15 + 4 >> 2];
  $2 = $3 + 72 | 0;
  HEAP32[$2 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $6 = HEAP32[$16 + 4 >> 2];
  $2 = $3 + 80 | 0;
  HEAP32[$2 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $6 = HEAP32[$17 + 4 >> 2];
  $2 = $3 + 88 | 0;
  HEAP32[$2 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $6 = HEAP32[$9 + 4 >> 2];
  $2 = $3 + 120 | 0;
  HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $6 = HEAP32[$18 + 4 >> 2];
  $2 = $3 + 112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $6 = HEAP32[$19 + 4 >> 2];
  $2 = $3 + 104 | 0;
  HEAP32[$2 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $2 = HEAP32[$7 + 108 >> 2];
  HEAP32[$3 + 96 >> 2] = HEAP32[$7 + 104 >> 2];
  HEAP32[$3 + 100 >> 2] = $2;
  HEAP32[$3 + 144 >> 2] = HEAP32[$33 >> 2];
  $6 = HEAP32[$20 + 4 >> 2];
  $2 = $3 + 136 | 0;
  HEAP32[$2 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $2 = HEAP32[$7 + 140 >> 2];
  HEAP32[$3 + 128 >> 2] = HEAP32[$7 + 136 >> 2];
  HEAP32[$3 + 132 >> 2] = $2;
  if (HEAP32[$0 + 104 >> 2]) {
   HEAP32[HEAP32[(HEAP32[$0 + 28 >> 2] + $35 | 0) + 144 >> 2] + 68 >> 2] = $1
  }
  HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] - 1;
  __stack_pointer = $7 + 160 | 0;
 }
 
 function btCompoundShape__removeChildShape_28btCollisionShape__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + 1;
  $2 = HEAP32[$0 + 20 >> 2];
  if (($2 | 0) > 0) {
   $3 = $2 + 1 | 0;
   $2 = Math_imul($2, 152) - 24 | 0;
   while (1) {
    if (($1 | 0) == HEAP32[HEAP32[$0 + 28 >> 2] + $2 >> 2]) {
     btCompoundShape__removeChildShapeByIndex_28int_29($0, $3 - 2 | 0)
    }
    $2 = $2 - 152 | 0;
    $3 = $3 - 1 | 0;
    if ($3 >>> 0 > 1) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
 }
 
 function btCompoundShape__recalculateLocalAabb_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$0 + 72 >> 2] = 966823146;
  HEAP32[$0 + 76 >> 2] = -970375591;
  HEAP32[$0 + 40 >> 2] = 966823146;
  HEAP32[$0 + 44 >> 2] = 1177108057;
  $1 = $0 + 96 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 966823146;
  HEAP32[$1 + 4 >> 2] = -970375591;
  $1 = $0 + 80 | 0;
  HEAP32[$1 >> 2] = 966823146;
  HEAP32[$1 + 4 >> 2] = -970375591;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 966823146;
  HEAP32[$1 + 4 >> 2] = 1177108057;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 966823146;
  HEAP32[$1 + 4 >> 2] = 1177108057;
  if (HEAP32[$0 + 20 >> 2] > 0) {
   $1 = 128;
   while (1) {
    $4 = HEAP32[$0 + 28 >> 2] + $1 | 0;
    $5 = HEAP32[$4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $4 - 128 | 0, $3 + 32 | 0, $3);
    $2 = HEAPF64[$3 + 32 >> 3];
    if ($2 < HEAPF64[$0 + 40 >> 3]) {
     HEAPF64[$0 + 40 >> 3] = $2
    }
    $2 = HEAPF64[$3 >> 3];
    if ($2 > HEAPF64[$0 + 72 >> 3]) {
     HEAPF64[$0 + 72 >> 3] = $2
    }
    $2 = HEAPF64[$3 + 40 >> 3];
    if ($2 < HEAPF64[$0 + 48 >> 3]) {
     HEAPF64[$0 + 48 >> 3] = $2
    }
    $2 = HEAPF64[$3 + 8 >> 3];
    if ($2 > HEAPF64[$0 + 80 >> 3]) {
     HEAPF64[$0 + 80 >> 3] = $2
    }
    $2 = HEAPF64[$3 + 48 >> 3];
    if ($2 < HEAPF64[$0 + 56 >> 3]) {
     HEAPF64[$0 + 56 >> 3] = $2
    }
    $2 = HEAPF64[$3 + 16 >> 3];
    if ($2 > HEAPF64[$0 + 88 >> 3]) {
     HEAPF64[$0 + 88 >> 3] = $2
    }
    $1 = $1 + 152 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 20 >> 2]) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $3 - -64 | 0;
 }
 
 function btCompoundShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
  label$1 : {
   if (HEAP32[$0 + 20 >> 2]) {
    $8 = HEAPF64[$0 + 88 >> 3];
    $5 = HEAPF64[$0 + 56 >> 3];
    $9 = ($8 + $5) * .5;
    $6 = HEAPF64[$0 + 80 >> 3];
    $4 = HEAPF64[$0 + 48 >> 3];
    $10 = ($6 + $4) * .5;
    $5 = ($8 - $5) * .5;
    $6 = ($6 - $4) * .5;
    $4 = HEAPF64[$0 + 72 >> 3];
    $7 = HEAPF64[$0 + 40 >> 3];
    $8 = ($4 + $7) * .5;
    $4 = ($4 - $7) * .5;
    break label$1;
   }
   $4 = 0.0;
  }
  $20 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $21 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $22 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $23 = HEAPF64[$1 + 104 >> 3];
  $7 = HEAPF64[$1 + 40 >> 3];
  $14 = HEAPF64[$1 + 48 >> 3];
  $13 = HEAPF64[$1 + 112 >> 3];
  $11 = HEAPF64[$1 + 72 >> 3];
  $12 = HEAPF64[$1 + 80 >> 3];
  $24 = HEAPF64[$1 + 96 >> 3];
  $15 = HEAPF64[$1 + 16 >> 3];
  $16 = HEAPF64[$1 >> 3];
  $17 = HEAPF64[$1 + 8 >> 3];
  $18 = HEAPF64[$1 + 32 >> 3];
  $19 = HEAPF64[$1 + 64 >> 3];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $13 = $13 + ($9 * $12 + ($8 * $19 + $10 * $11));
  $5 = $5 + $22;
  $4 = $4 + $20;
  $6 = $6 + $21;
  $11 = $5 * Math_abs($12) + ($4 * Math_abs($19) + $6 * Math_abs($11));
  HEAPF64[$2 + 16 >> 3] = $13 - $11;
  $12 = $23 + ($9 * $14 + ($8 * $18 + $10 * $7));
  $7 = $5 * Math_abs($14) + ($4 * Math_abs($18) + $6 * Math_abs($7));
  HEAPF64[$2 + 8 >> 3] = $12 - $7;
  $9 = $24 + ($9 * $15 + ($8 * $16 + $10 * $17));
  $10 = $5 * Math_abs($15) + ($4 * Math_abs($16) + $6 * Math_abs($17));
  HEAPF64[$2 >> 3] = $9 - $10;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $11 + $13;
  HEAPF64[$3 + 8 >> 3] = $7 + $12;
  HEAPF64[$3 >> 3] = $10 + $9;
 }
 
 function btCompoundShape__calculateLocalInertia_28double_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  $3 = $4 + 80 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 88 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 96 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 112 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 104 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 120 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 128 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 136 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 152 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 144 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 160 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 168 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 176 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 184 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$4 + 72 >> 2] = 0;
  HEAP32[$4 + 76 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 68 >> 2] = 1072693248;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4 - -64 | 0, $4 + 32 | 0, $4);
  $1 = $1 / 12.0;
  $5 = (HEAPF64[$4 >> 3] - HEAPF64[$4 + 32 >> 3]) * .5;
  $5 = $5 + $5;
  $5 = $5 * $5;
  $6 = (HEAPF64[$4 + 8 >> 3] - HEAPF64[$4 + 40 >> 3]) * .5;
  $6 = $6 + $6;
  $6 = $6 * $6;
  HEAPF64[$2 + 16 >> 3] = $1 * ($5 + $6);
  $7 = $5;
  $5 = (HEAPF64[$4 + 16 >> 3] - HEAPF64[$4 + 48 >> 3]) * .5;
  $5 = $5 + $5;
  $5 = $5 * $5;
  HEAPF64[$2 + 8 >> 3] = $1 * ($7 + $5);
  HEAPF64[$2 >> 3] = $1 * ($6 + $5);
  __stack_pointer = $4 + 192 | 0;
 }
 
 function btCompoundShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
  $5 = __stack_pointer - 288 | 0;
  __stack_pointer = $5;
  if (HEAP32[$0 + 20 >> 2] > 0) {
   $24 = $5 + 192 | 0;
   $2 = $5 + 32 | 0;
   $9 = $2 + 96 | 0;
   $11 = $2 - -64 | 0;
   $21 = $2 + 32 | 0;
   while (1) {
    $2 = HEAP32[$0 + 28 >> 2] + $22 | 0;
    $4 = $2 + 24 | 0;
    $15 = HEAP32[$4 + 4 >> 2];
    $6 = $5 + 32 | 0;
    $3 = $6 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = $15;
    $15 = $2 + 16 | 0;
    $12 = HEAP32[$15 + 4 >> 2];
    $4 = $6 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$4 + 4 >> 2] = $12;
    $12 = $2 + 8 | 0;
    $16 = HEAP32[$12 + 4 >> 2];
    $15 = $6 + 8 | 0;
    HEAP32[$15 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$15 + 4 >> 2] = $16;
    $12 = HEAP32[$2 + 4 >> 2];
    HEAP32[$5 + 32 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$5 + 36 >> 2] = $12;
    $16 = $2 + 56 | 0;
    $17 = HEAP32[$16 + 4 >> 2];
    $12 = $21 + 24 | 0;
    HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$12 + 4 >> 2] = $17;
    $17 = $2 + 48 | 0;
    $6 = HEAP32[$17 + 4 >> 2];
    $16 = $21 + 16 | 0;
    HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
    HEAP32[$16 + 4 >> 2] = $6;
    $6 = $2 + 40 | 0;
    $8 = HEAP32[$6 + 4 >> 2];
    $17 = $21 + 8 | 0;
    HEAP32[$17 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$17 + 4 >> 2] = $8;
    $6 = $2 + 32 | 0;
    $8 = HEAP32[$6 + 4 >> 2];
    HEAP32[$21 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$21 + 4 >> 2] = $8;
    $6 = $2 - -64 | 0;
    $8 = HEAP32[$6 + 4 >> 2];
    HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$11 + 4 >> 2] = $8;
    $8 = $2 + 72 | 0;
    $18 = HEAP32[$8 + 4 >> 2];
    $6 = $11 + 8 | 0;
    HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$6 + 4 >> 2] = $18;
    $18 = $2 + 80 | 0;
    $10 = HEAP32[$18 + 4 >> 2];
    $8 = $11 + 16 | 0;
    HEAP32[$8 >> 2] = HEAP32[$18 >> 2];
    HEAP32[$8 + 4 >> 2] = $10;
    $10 = $2 + 88 | 0;
    $13 = HEAP32[$10 + 4 >> 2];
    $18 = $11 + 24 | 0;
    HEAP32[$18 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$18 + 4 >> 2] = $13;
    $10 = $2 + 96 | 0;
    $13 = HEAP32[$10 + 4 >> 2];
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$9 + 4 >> 2] = $13;
    $13 = $2 + 104 | 0;
    $19 = HEAP32[$13 + 4 >> 2];
    $10 = $9 + 8 | 0;
    HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$10 + 4 >> 2] = $19;
    $19 = $2 + 112 | 0;
    $7 = HEAP32[$19 + 4 >> 2];
    $13 = $9 + 16 | 0;
    HEAP32[$13 >> 2] = HEAP32[$19 >> 2];
    HEAP32[$13 + 4 >> 2] = $7;
    $7 = $2 + 120 | 0;
    $14 = HEAP32[$7 + 4 >> 2];
    $19 = $9 + 24 | 0;
    HEAP32[$19 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$19 + 4 >> 2] = $14;
    $2 = HEAP32[$2 + 128 >> 2];
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2) | 0;
    $14 = $2 + 24 | 0;
    $20 = HEAP32[$14 + 4 >> 2];
    $7 = $5 + 24 | 0;
    HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$7 + 4 >> 2] = $20;
    $20 = $2 + 16 | 0;
    $23 = HEAP32[$20 + 4 >> 2];
    $14 = $5 + 16 | 0;
    HEAP32[$14 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$14 + 4 >> 2] = $23;
    $23 = $2 + 8 | 0;
    $26 = HEAP32[$23 + 4 >> 2];
    $20 = $5 + 8 | 0;
    HEAP32[$20 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$20 + 4 >> 2] = $26;
    $23 = HEAP32[$2 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAPF64[$14 >> 3] = HEAPF64[$14 >> 3] * HEAPF64[$1 + 16 >> 3] / HEAPF64[$0 + 136 >> 3];
    HEAPF64[$20 >> 3] = HEAPF64[$20 >> 3] * HEAPF64[$1 + 8 >> 3] / HEAPF64[$0 + 128 >> 3];
    HEAP32[$5 >> 2] = $23;
    HEAP32[$5 + 4 >> 2] = $2;
    HEAPF64[$5 >> 3] = HEAPF64[$5 >> 3] * HEAPF64[$1 >> 3] / HEAPF64[$0 + 120 >> 3];
    $2 = HEAP32[(HEAP32[$0 + 28 >> 2] + $22 | 0) + 128 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $5);
    HEAP32[$5 + 152 >> 2] = 0;
    HEAP32[$5 + 156 >> 2] = 0;
    HEAPF64[$5 + 144 >> 3] = HEAPF64[$5 + 144 >> 3] * HEAPF64[$1 + 16 >> 3] / HEAPF64[$0 + 136 >> 3];
    HEAPF64[$5 + 136 >> 3] = HEAPF64[$5 + 136 >> 3] * HEAPF64[$1 + 8 >> 3] / HEAPF64[$0 + 128 >> 3];
    HEAPF64[$5 + 128 >> 3] = HEAPF64[$5 + 128 >> 3] * HEAPF64[$1 >> 3] / HEAPF64[$0 + 120 >> 3];
    $14 = HEAP32[$3 + 4 >> 2];
    $2 = HEAP32[$0 + 28 >> 2] + $22 | 0;
    $7 = $2 + 24 | 0;
    HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$7 + 4 >> 2] = $14;
    $7 = HEAP32[$4 + 4 >> 2];
    $3 = $2 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = $7;
    $4 = HEAP32[$15 + 4 >> 2];
    $3 = $2 + 8 | 0;
    HEAP32[$3 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $3 = HEAP32[$5 + 36 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$5 + 32 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    $4 = HEAP32[$12 + 4 >> 2];
    $3 = $2 + 56 | 0;
    HEAP32[$3 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$16 + 4 >> 2];
    $3 = $2 + 48 | 0;
    HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$17 + 4 >> 2];
    $3 = $2 + 40 | 0;
    HEAP32[$3 >> 2] = HEAP32[$17 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$21 + 4 >> 2];
    $3 = $2 + 32 | 0;
    HEAP32[$3 >> 2] = HEAP32[$21 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$18 + 4 >> 2];
    $3 = $2 + 88 | 0;
    HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$8 + 4 >> 2];
    $3 = $2 + 80 | 0;
    HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$6 + 4 >> 2];
    $3 = $2 + 72 | 0;
    HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$11 + 4 >> 2];
    $3 = $2 - -64 | 0;
    HEAP32[$3 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$9 + 4 >> 2];
    $3 = $2 + 96 | 0;
    HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$10 + 4 >> 2];
    $3 = $2 + 104 | 0;
    HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = HEAP32[$13 + 4 >> 2];
    $3 = $2 + 112 | 0;
    HEAP32[$3 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $3 = HEAP32[$19 + 4 >> 2];
    $2 = $2 + 120 | 0;
    HEAP32[$2 >> 2] = HEAP32[$19 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    if (HEAP32[$0 + 104 >> 2]) {
     $2 = HEAP32[(HEAP32[$0 + 28 >> 2] + $22 | 0) + 128 >> 2];
     $6 = $5 + 256 | 0;
     $8 = $5 + 224 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $5 + 32 | 0, $6, $8);
     $2 = HEAP32[$5 + 228 >> 2];
     HEAP32[$24 >> 2] = HEAP32[$5 + 224 >> 2];
     HEAP32[$24 + 4 >> 2] = $2;
     $3 = $6 + 24 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $7 = $5 + 160 | 0;
     $2 = $7 + 24 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $6 + 16 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $7 + 16 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $6 + 8 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $7 + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $8 + 8 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $24 + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $8 + 16 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $24 + 16 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $8 + 24 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $24 + 24 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $2 = HEAP32[$5 + 260 >> 2];
     HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 256 >> 2];
     HEAP32[$5 + 164 >> 2] = $2;
     btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29(HEAP32[$0 + 104 >> 2], HEAP32[(HEAP32[$0 + 28 >> 2] + $22 | 0) + 144 >> 2], $7);
    }
    $22 = $22 + 152 | 0;
    $25 = $25 + 1 | 0;
    if (($25 | 0) < HEAP32[$0 + 20 >> 2]) {
     continue
    }
    break;
   };
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 120 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 124 >> 2] = $2;
  $9 = $1 + 24 | 0;
  $11 = HEAP32[$9 + 4 >> 2];
  $2 = $0 + 144 | 0;
  HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$2 + 4 >> 2] = $11;
  $9 = $1 + 16 | 0;
  $11 = HEAP32[$9 + 4 >> 2];
  $2 = $0 + 136 | 0;
  HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$2 + 4 >> 2] = $11;
  $1 = $1 + 8 | 0;
  $9 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 128 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $9;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
  __stack_pointer = $5 + 288 | 0;
 }
 
 function btCompoundShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 12 >> 2] = 0;
  $3 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = $3;
  HEAPF32[$1 + 20 >> 2] = HEAPF64[$0 + 112 >> 3];
  if ($3) {
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 76, $3) | 0;
   $3 = HEAP32[$7 + 8 >> 2];
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   if (HEAP32[$1 + 16 >> 2] > 0) {
    $3 = $3 + 72 | 0;
    $6 = HEAP32[$0 + 28 >> 2];
    $5 = 136;
    while (1) {
     $4 = $5 + $6 | 0;
     HEAPF32[$3 >> 2] = HEAPF64[$4 >> 3];
     (wasm2js_i32$0 = $3 - 8 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$4 - 8 >> 2]) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, HEAP32[(HEAP32[$0 + 28 >> 2] + $5 | 0) - 8 >> 2]) | 0)) {
      $4 = HEAP32[(HEAP32[$0 + 28 >> 2] + $5 | 0) - 8 >> 2];
      $4 = ((((wasm2js_i32$1 = $2, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 52 >> 2]]($4) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
      $6 = HEAP32[(HEAP32[$0 + 28 >> 2] + $5 | 0) - 8 >> 2];
      (((((wasm2js_i32$3 = $2, wasm2js_i32$2 = $4), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 56 >> 2]]($6, HEAP32[$4 + 8 >> 2], $2) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = HEAP32[(HEAP32[$0 + 28 >> 2] + $5 | 0) - 8 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     }
     $6 = HEAP32[$0 + 28 >> 2];
     $4 = $5 + $6 | 0;
     HEAP32[$3 - 4 >> 2] = HEAP32[$4 - 4 >> 2];
     HEAPF32[$3 - 72 >> 2] = HEAPF64[$4 - 136 >> 3];
     HEAPF32[$3 - 68 >> 2] = HEAPF64[$4 - 128 >> 3];
     HEAPF32[$3 + -64 >> 2] = HEAPF64[$4 - 120 >> 3];
     HEAPF32[$3 - 60 >> 2] = HEAPF64[$4 - 112 >> 3];
     HEAPF32[$3 - 56 >> 2] = HEAPF64[$4 - 104 >> 3];
     HEAPF32[$3 - 52 >> 2] = HEAPF64[$4 - 96 >> 3];
     HEAPF32[$3 - 48 >> 2] = HEAPF64[$4 - 88 >> 3];
     HEAPF32[$3 - 44 >> 2] = HEAPF64[$4 - 80 >> 3];
     HEAPF32[$3 - 40 >> 2] = HEAPF64[$4 - 72 >> 3];
     HEAPF32[$3 - 36 >> 2] = HEAPF64[$4 + -64 >> 3];
     HEAPF32[$3 - 32 >> 2] = HEAPF64[$4 - 56 >> 3];
     HEAPF32[$3 - 28 >> 2] = HEAPF64[$4 - 48 >> 3];
     HEAPF32[$3 - 24 >> 2] = HEAPF64[$4 - 40 >> 3];
     HEAPF32[$3 - 20 >> 2] = HEAPF64[$4 - 32 >> 3];
     HEAPF32[$3 - 16 >> 2] = HEAPF64[$4 - 24 >> 3];
     HEAPF32[$3 - 12 >> 2] = HEAPF64[$4 - 16 >> 3];
     $5 = $5 + 152 | 0;
     $3 = $3 + 76 | 0;
     $8 = $8 + 1 | 0;
     if (($8 | 0) < HEAP32[$1 + 16 >> 2]) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $7, 4165, 1497453121, HEAP32[$7 + 8 >> 2]);
  }
  return 3922;
 }
 
 function btCompoundShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 120 | 0;
 }
 
 function btCompoundShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 3606;
 }
 
 function btCompoundShape__setMargin_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 112 >> 3] = $1;
 }
 
 function btCompoundShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 112 >> 3];
 }
 
 function btCompoundShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 24;
 }
 
 function btStridingMeshInterface__InternalProcessAllTriangles_28btInternalTriangleIndexCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
  $2 = __stack_pointer - 128 | 0;
  __stack_pointer = $2;
  $15 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  if (($15 | 0) > 0) {
   $8 = HEAPF64[$0 + 24 >> 3];
   $9 = HEAPF64[$0 + 16 >> 3];
   $10 = HEAPF64[$0 + 8 >> 3];
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2 + 124 | 0, $2 + 100 | 0, $2 + 112 | 0, $2 + 104 | 0, $2 + 120 | 0, $2 + 116 | 0, $2 + 96 | 0, $2 + 108 | 0, $14);
    label$3 : {
     label$4 : {
      switch (HEAP32[$2 + 112 >> 2]) {
      case 0:
       label$6 : {
        switch (HEAP32[$2 + 108 >> 2] - 2 | 0) {
        case 3:
         if (HEAP32[$2 + 96 >> 2] <= 0) {
          break label$3
         }
         $3 = 0;
         while (1) {
          $5 = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 116 >> 2], $3) | 0;
          $6 = HEAPU8[$5 | 0];
          HEAP32[$2 + 24 >> 2] = 0;
          HEAP32[$2 + 28 >> 2] = 0;
          $7 = HEAP32[$2 + 124 >> 2];
          $4 = $6;
          $6 = HEAP32[$2 + 104 >> 2];
          $4 = $7 + Math_imul($4, $6) | 0;
          HEAPF64[$2 + 16 >> 3] = $8 * +HEAPF32[$4 + 8 >> 2];
          HEAPF64[$2 + 8 >> 3] = $9 * +HEAPF32[$4 + 4 >> 2];
          HEAPF64[$2 >> 3] = $10 * +HEAPF32[$4 >> 2];
          $4 = HEAPU8[$5 + 1 | 0];
          HEAP32[$2 + 56 >> 2] = 0;
          HEAP32[$2 + 60 >> 2] = 0;
          $4 = $7 + Math_imul($4, $6) | 0;
          HEAPF64[$2 + 48 >> 3] = $8 * +HEAPF32[$4 + 8 >> 2];
          HEAPF64[$2 + 40 >> 3] = $9 * +HEAPF32[$4 + 4 >> 2];
          HEAPF64[$2 + 32 >> 3] = $10 * +HEAPF32[$4 >> 2];
          $5 = $7 + Math_imul($6, HEAPU8[$5 + 2 | 0]) | 0;
          $16 = HEAPF32[$5 >> 2];
          $17 = HEAPF32[$5 + 4 >> 2];
          $18 = HEAPF32[$5 + 8 >> 2];
          HEAP32[$2 + 88 >> 2] = 0;
          HEAP32[$2 + 92 >> 2] = 0;
          HEAPF64[$2 + 80 >> 3] = $8 * +$18;
          HEAPF64[$2 + 72 >> 3] = $9 * +$17;
          HEAPF64[$2 + 64 >> 3] = $10 * +$16;
          FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $3);
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$2 + 96 >> 2]) {
           continue
          }
          break;
         };
         break label$3;
        case 1:
         if (HEAP32[$2 + 96 >> 2] <= 0) {
          break label$3
         }
         $3 = 0;
         while (1) {
          HEAP32[$2 + 24 >> 2] = 0;
          HEAP32[$2 + 28 >> 2] = 0;
          HEAP32[$2 + 56 >> 2] = 0;
          HEAP32[$2 + 60 >> 2] = 0;
          $7 = HEAP32[$2 + 124 >> 2];
          $6 = HEAP32[$2 + 104 >> 2];
          $5 = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 116 >> 2], $3) | 0;
          $4 = $7 + Math_imul($6, HEAPU16[$5 >> 1]) | 0;
          HEAPF64[$2 + 16 >> 3] = $8 * +HEAPF32[$4 + 8 >> 2];
          HEAPF64[$2 + 8 >> 3] = $9 * +HEAPF32[$4 + 4 >> 2];
          HEAPF64[$2 >> 3] = $10 * +HEAPF32[$4 >> 2];
          $4 = $7 + Math_imul($6, HEAPU16[$5 + 2 >> 1]) | 0;
          HEAPF64[$2 + 48 >> 3] = $8 * +HEAPF32[$4 + 8 >> 2];
          HEAPF64[$2 + 40 >> 3] = $9 * +HEAPF32[$4 + 4 >> 2];
          HEAPF64[$2 + 32 >> 3] = $10 * +HEAPF32[$4 >> 2];
          HEAP32[$2 + 88 >> 2] = 0;
          HEAP32[$2 + 92 >> 2] = 0;
          $5 = $7 + Math_imul($6, HEAPU16[$5 + 4 >> 1]) | 0;
          HEAPF64[$2 + 64 >> 3] = $10 * +HEAPF32[$5 >> 2];
          HEAPF64[$2 + 72 >> 3] = $9 * +HEAPF32[$5 + 4 >> 2];
          HEAPF64[$2 + 80 >> 3] = $8 * +HEAPF32[$5 + 8 >> 2];
          FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $3);
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$2 + 96 >> 2]) {
           continue
          }
          break;
         };
         break label$3;
        case 0:
         break label$6;
        default:
         break label$3;
        };
       }
       if (HEAP32[$2 + 96 >> 2] <= 0) {
        break label$3
       }
       $3 = 0;
       while (1) {
        HEAP32[$2 + 24 >> 2] = 0;
        HEAP32[$2 + 28 >> 2] = 0;
        HEAP32[$2 + 56 >> 2] = 0;
        HEAP32[$2 + 60 >> 2] = 0;
        $7 = HEAP32[$2 + 124 >> 2];
        $6 = HEAP32[$2 + 104 >> 2];
        $5 = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 116 >> 2], $3) | 0;
        $4 = $7 + Math_imul($6, HEAP32[$5 >> 2]) | 0;
        HEAPF64[$2 + 16 >> 3] = $8 * +HEAPF32[$4 + 8 >> 2];
        HEAPF64[$2 + 8 >> 3] = $9 * +HEAPF32[$4 + 4 >> 2];
        HEAPF64[$2 >> 3] = $10 * +HEAPF32[$4 >> 2];
        $4 = $7 + Math_imul($6, HEAP32[$5 + 4 >> 2]) | 0;
        HEAPF64[$2 + 48 >> 3] = $8 * +HEAPF32[$4 + 8 >> 2];
        HEAPF64[$2 + 40 >> 3] = $9 * +HEAPF32[$4 + 4 >> 2];
        HEAPF64[$2 + 32 >> 3] = $10 * +HEAPF32[$4 >> 2];
        HEAP32[$2 + 88 >> 2] = 0;
        HEAP32[$2 + 92 >> 2] = 0;
        $5 = $7 + Math_imul($6, HEAP32[$5 + 8 >> 2]) | 0;
        HEAPF64[$2 + 64 >> 3] = $10 * +HEAPF32[$5 >> 2];
        HEAPF64[$2 + 72 >> 3] = $9 * +HEAPF32[$5 + 4 >> 2];
        HEAPF64[$2 + 80 >> 3] = $8 * +HEAPF32[$5 + 8 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $3);
        $3 = $3 + 1 | 0;
        if (($3 | 0) < HEAP32[$2 + 96 >> 2]) {
         continue
        }
        break;
       };
       break label$3;
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     label$12 : {
      switch (HEAP32[$2 + 108 >> 2] - 2 | 0) {
      case 3:
       if (HEAP32[$2 + 96 >> 2] <= 0) {
        break label$3
       }
       $3 = 0;
       while (1) {
        $7 = HEAP32[$2 + 124 >> 2];
        $6 = HEAP32[$2 + 104 >> 2];
        $5 = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 116 >> 2], $3) | 0;
        $4 = $7 + Math_imul($6, HEAPU8[$5 | 0]) | 0;
        $11 = HEAPF64[$4 >> 3];
        $12 = HEAPF64[$4 + 8 >> 3];
        $13 = HEAPF64[$4 + 16 >> 3];
        HEAP32[$2 + 24 >> 2] = 0;
        HEAP32[$2 + 28 >> 2] = 0;
        HEAPF64[$2 + 16 >> 3] = $8 * $13;
        HEAPF64[$2 + 8 >> 3] = $9 * $12;
        HEAPF64[$2 >> 3] = $10 * $11;
        $4 = $7 + Math_imul($6, HEAPU8[$5 + 1 | 0]) | 0;
        $11 = HEAPF64[$4 >> 3];
        $12 = HEAPF64[$4 + 8 >> 3];
        $13 = HEAPF64[$4 + 16 >> 3];
        HEAP32[$2 + 56 >> 2] = 0;
        HEAP32[$2 + 60 >> 2] = 0;
        HEAPF64[$2 + 48 >> 3] = $8 * $13;
        HEAPF64[$2 + 40 >> 3] = $9 * $12;
        HEAPF64[$2 + 32 >> 3] = $10 * $11;
        $5 = $7 + Math_imul($6, HEAPU8[$5 + 2 | 0]) | 0;
        $11 = HEAPF64[$5 >> 3];
        $12 = HEAPF64[$5 + 8 >> 3];
        $13 = HEAPF64[$5 + 16 >> 3];
        HEAP32[$2 + 88 >> 2] = 0;
        HEAP32[$2 + 92 >> 2] = 0;
        HEAPF64[$2 + 80 >> 3] = $8 * $13;
        HEAPF64[$2 + 72 >> 3] = $9 * $12;
        HEAPF64[$2 + 64 >> 3] = $10 * $11;
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $3);
        $3 = $3 + 1 | 0;
        if (($3 | 0) < HEAP32[$2 + 96 >> 2]) {
         continue
        }
        break;
       };
       break label$3;
      case 1:
       if (HEAP32[$2 + 96 >> 2] <= 0) {
        break label$3
       }
       $3 = 0;
       while (1) {
        $7 = HEAP32[$2 + 124 >> 2];
        $6 = HEAP32[$2 + 104 >> 2];
        $5 = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 116 >> 2], $3) | 0;
        $4 = $7 + Math_imul($6, HEAPU16[$5 >> 1]) | 0;
        $11 = HEAPF64[$4 >> 3];
        $12 = HEAPF64[$4 + 8 >> 3];
        $13 = HEAPF64[$4 + 16 >> 3];
        HEAP32[$2 + 24 >> 2] = 0;
        HEAP32[$2 + 28 >> 2] = 0;
        HEAPF64[$2 + 16 >> 3] = $8 * $13;
        HEAPF64[$2 + 8 >> 3] = $9 * $12;
        HEAPF64[$2 >> 3] = $10 * $11;
        $4 = $7 + Math_imul($6, HEAPU16[$5 + 2 >> 1]) | 0;
        $11 = HEAPF64[$4 >> 3];
        $12 = HEAPF64[$4 + 8 >> 3];
        $13 = HEAPF64[$4 + 16 >> 3];
        HEAP32[$2 + 56 >> 2] = 0;
        HEAP32[$2 + 60 >> 2] = 0;
        HEAPF64[$2 + 48 >> 3] = $8 * $13;
        HEAPF64[$2 + 40 >> 3] = $9 * $12;
        HEAPF64[$2 + 32 >> 3] = $10 * $11;
        $5 = $7 + Math_imul($6, HEAPU16[$5 + 4 >> 1]) | 0;
        $11 = HEAPF64[$5 + 16 >> 3];
        $12 = HEAPF64[$5 + 8 >> 3];
        $13 = HEAPF64[$5 >> 3];
        HEAP32[$2 + 88 >> 2] = 0;
        HEAP32[$2 + 92 >> 2] = 0;
        HEAPF64[$2 + 64 >> 3] = $10 * $13;
        HEAPF64[$2 + 72 >> 3] = $9 * $12;
        HEAPF64[$2 + 80 >> 3] = $8 * $11;
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $3);
        $3 = $3 + 1 | 0;
        if (($3 | 0) < HEAP32[$2 + 96 >> 2]) {
         continue
        }
        break;
       };
       break label$3;
      case 0:
       break label$12;
      default:
       break label$3;
      };
     }
     if (HEAP32[$2 + 96 >> 2] <= 0) {
      break label$3
     }
     $3 = 0;
     while (1) {
      $7 = HEAP32[$2 + 124 >> 2];
      $6 = HEAP32[$2 + 104 >> 2];
      $5 = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 116 >> 2], $3) | 0;
      $4 = $7 + Math_imul($6, HEAP32[$5 >> 2]) | 0;
      $11 = HEAPF64[$4 >> 3];
      $12 = HEAPF64[$4 + 8 >> 3];
      $13 = HEAPF64[$4 + 16 >> 3];
      HEAP32[$2 + 24 >> 2] = 0;
      HEAP32[$2 + 28 >> 2] = 0;
      HEAPF64[$2 + 16 >> 3] = $8 * $13;
      HEAPF64[$2 + 8 >> 3] = $9 * $12;
      HEAPF64[$2 >> 3] = $10 * $11;
      $4 = $7 + Math_imul($6, HEAP32[$5 + 4 >> 2]) | 0;
      $11 = HEAPF64[$4 >> 3];
      $12 = HEAPF64[$4 + 8 >> 3];
      $13 = HEAPF64[$4 + 16 >> 3];
      HEAP32[$2 + 56 >> 2] = 0;
      HEAP32[$2 + 60 >> 2] = 0;
      HEAPF64[$2 + 48 >> 3] = $8 * $13;
      HEAPF64[$2 + 40 >> 3] = $9 * $12;
      HEAPF64[$2 + 32 >> 3] = $10 * $11;
      $5 = $7 + Math_imul($6, HEAP32[$5 + 8 >> 2]) | 0;
      $11 = HEAPF64[$5 + 16 >> 3];
      $12 = HEAPF64[$5 + 8 >> 3];
      $13 = HEAPF64[$5 >> 3];
      HEAP32[$2 + 88 >> 2] = 0;
      HEAP32[$2 + 92 >> 2] = 0;
      HEAPF64[$2 + 64 >> 3] = $10 * $13;
      HEAPF64[$2 + 72 >> 3] = $9 * $12;
      HEAPF64[$2 + 80 >> 3] = $8 * $11;
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $3);
      $3 = $3 + 1 | 0;
      if (($3 | 0) < HEAP32[$2 + 96 >> 2]) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $14);
    $14 = $14 + 1 | 0;
    if (($14 | 0) != ($15 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $2 + 128 | 0;
 }
 
 function btStridingMeshInterface__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = $3;
  if ($3) {
   $14 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 32, $3) | 0;
   $8 = HEAP32[$14 + 8 >> 2];
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $8) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $18 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
   if (($18 | 0) > 0) {
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $5 + 28 | 0, $5 + 4 | 0, $5 + 16 | 0, $5 + 8 | 0, $5 + 24 | 0, $5 + 20 | 0, $5, $5 + 12 | 0, $13);
     HEAP32[$8 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     $3 = $8 + 8 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $8 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = HEAP32[$5 >> 2];
     HEAP32[$8 + 24 >> 2] = $3;
     HEAP32[$8 + 28 >> 2] = HEAP32[$5 + 4 >> 2];
     label$4 : {
      label$5 : {
       switch (HEAP32[$5 + 12 >> 2] - 2 | 0) {
       case 0:
        if (!$3) {
         break label$4
        }
        $6 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 4, Math_imul($3, 3)) | 0;
        $4 = HEAP32[$6 + 8 >> 2];
        (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $4) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        if (HEAP32[$5 >> 2] > 0) {
         $3 = 0;
         $9 = HEAP32[$5 + 24 >> 2];
         while (1) {
          $7 = $9 + Math_imul(HEAP32[$5 + 20 >> 2], $3) | 0;
          HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
          HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
          $4 = $4 + 12 | 0;
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$5 >> 2]) {
           continue
          }
          break;
         };
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $6, 3630, 1497453121, HEAP32[$6 + 8 >> 2]);
        break label$4;
       case 1:
        if (!$3) {
         break label$4
        }
        $6 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 8, $3) | 0;
        $4 = HEAP32[$6 + 8 >> 2];
        (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $4) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
        if (HEAP32[$5 >> 2] > 0) {
         $3 = 0;
         while (1) {
          $7 = HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], $3) | 0;
          HEAP16[$4 >> 1] = HEAPU16[$7 >> 1];
          HEAP16[$4 + 2 >> 1] = HEAPU16[$7 + 2 >> 1];
          $7 = HEAPU16[$7 + 4 >> 1];
          HEAP16[$4 + 6 >> 1] = 0;
          HEAP16[$4 + 4 >> 1] = $7;
          $4 = $4 + 8 | 0;
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$5 >> 2]) {
           continue
          }
          break;
         };
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $6, 3660, 1497453121, HEAP32[$6 + 8 >> 2]);
        break label$4;
       case 3:
        break label$5;
       default:
        break label$4;
       };
      }
      if (!$3) {
       break label$4
      }
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 4, $3) | 0;
      $4 = HEAP32[$6 + 8 >> 2];
      (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $4) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
      if (HEAP32[$5 >> 2] > 0) {
       $3 = 0;
       while (1) {
        $7 = HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], $3) | 0;
        HEAP8[$4 | 0] = HEAPU8[$7 | 0];
        HEAP8[$4 + 1 | 0] = HEAPU8[$7 + 1 | 0];
        HEAP8[$4 + 2 | 0] = HEAPU8[$7 + 2 | 0];
        HEAP8[$4 + 3 | 0] = 0;
        $4 = $4 + 4 | 0;
        $3 = $3 + 1 | 0;
        if (($3 | 0) < HEAP32[$5 >> 2]) {
         continue
        }
        break;
       };
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $6, 3687, 1497453121, HEAP32[$6 + 8 >> 2]);
     }
     label$14 : {
      label$15 : {
       switch (HEAP32[$5 + 16 >> 2]) {
       case 0:
        $3 = HEAP32[$5 + 4 >> 2];
        if (!$3) {
         break label$14
        }
        $10 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 16, $3) | 0;
        $11 = HEAP32[$10 + 8 >> 2];
        (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $11) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $3 = HEAP32[$5 + 4 >> 2];
        label$17 : {
         if (($3 | 0) <= 0) {
          break label$17
         }
         $15 = $3 & 1;
         $7 = 0;
         $9 = HEAP32[$5 + 8 >> 2];
         $6 = HEAP32[$5 + 28 >> 2];
         if (($3 | 0) != 1) {
          $4 = $11 + 16 | 0;
          $16 = $9 << 1;
          $17 = $3 & -2;
          $3 = $6;
          while (1) {
           HEAPF32[$4 - 16 >> 2] = HEAPF32[$3 >> 2];
           HEAPF32[$4 - 12 >> 2] = HEAPF32[$3 + 4 >> 2];
           HEAPF32[$4 - 8 >> 2] = HEAPF32[$3 + 8 >> 2];
           $12 = $3 + $9 | 0;
           HEAPF32[$4 >> 2] = HEAPF32[$12 >> 2];
           HEAPF32[$4 + 4 >> 2] = HEAPF32[$12 + 4 >> 2];
           HEAPF32[$4 + 8 >> 2] = HEAPF32[$12 + 8 >> 2];
           $4 = $4 + 32 | 0;
           $3 = $3 + $16 | 0;
           $7 = $7 + 2 | 0;
           if (($17 | 0) != ($7 | 0)) {
            continue
           }
           break;
          };
         }
         if (!$15) {
          break label$17
         }
         $3 = $11 + ($7 << 4) | 0;
         $6 = $6 + Math_imul($7, $9) | 0;
         HEAPF32[$3 >> 2] = HEAPF32[$6 >> 2];
         HEAPF32[$3 + 4 >> 2] = HEAPF32[$6 + 4 >> 2];
         HEAPF32[$3 + 8 >> 2] = HEAPF32[$6 + 8 >> 2];
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $10, 3710, 1497453121, HEAP32[$10 + 8 >> 2]);
        break label$14;
       case 1:
        break label$15;
       default:
        break label$14;
       };
      }
      $3 = HEAP32[$5 + 4 >> 2];
      if (!$3) {
       break label$14
      }
      $10 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 32, $3) | 0;
      $11 = HEAP32[$10 + 8 >> 2];
      (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $11) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
      $3 = HEAP32[$5 + 4 >> 2];
      label$20 : {
       if (($3 | 0) <= 0) {
        break label$20
       }
       $15 = $3 & 1;
       $7 = 0;
       $9 = HEAP32[$5 + 8 >> 2];
       $6 = HEAP32[$5 + 28 >> 2];
       if (($3 | 0) != 1) {
        $4 = $11 + 32 | 0;
        $16 = $9 << 1;
        $17 = $3 & -2;
        $3 = $6;
        while (1) {
         HEAPF64[$4 - 32 >> 3] = HEAPF64[$3 >> 3];
         HEAPF64[$4 - 24 >> 3] = HEAPF64[$3 + 8 >> 3];
         HEAPF64[$4 - 16 >> 3] = HEAPF64[$3 + 16 >> 3];
         $12 = $3 + $9 | 0;
         HEAPF64[$4 >> 3] = HEAPF64[$12 >> 3];
         HEAPF64[$4 + 8 >> 3] = HEAPF64[$12 + 8 >> 3];
         HEAPF64[$4 + 16 >> 3] = HEAPF64[$12 + 16 >> 3];
         $4 = $4 - -64 | 0;
         $3 = $3 + $16 | 0;
         $7 = $7 + 2 | 0;
         if (($17 | 0) != ($7 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$15) {
        break label$20
       }
       $3 = $11 + ($7 << 5) | 0;
       $6 = $6 + Math_imul($7, $9) | 0;
       HEAPF64[$3 >> 3] = HEAPF64[$6 >> 3];
       HEAPF64[$3 + 8 >> 3] = HEAPF64[$6 + 8 >> 3];
       HEAPF64[$3 + 16 >> 3] = HEAPF64[$6 + 16 >> 3];
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $10, 4071, 1497453121, HEAP32[$10 + 8 >> 2]);
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $13);
     $8 = $8 + 32 | 0;
     $13 = $13 + 1 | 0;
     if (($13 | 0) != ($18 | 0)) {
      continue
     }
     break;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $14, 3645, 1497453121, HEAP32[$14 + 8 >> 2]);
  }
  HEAP32[$1 + 24 >> 2] = 0;
  HEAPF32[$1 + 4 >> 2] = HEAPF64[$0 + 8 >> 3];
  HEAPF32[$1 + 8 >> 2] = HEAPF64[$0 + 16 >> 3];
  HEAPF32[$1 + 12 >> 2] = HEAPF64[$0 + 24 >> 3];
  HEAPF32[$1 + 16 >> 2] = HEAPF64[$0 + 32 >> 3];
  __stack_pointer = $5 + 32 | 0;
  return 4137;
 }
 
 function btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14700;
  $1 = HEAP32[$0 + 52 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 56 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 56 | 0] = 1;
  $1 = $0 + 44 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14700;
  $1 = HEAP32[$0 + 52 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 56 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 56 | 0] = 1;
  $1 = $0 + 44 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $0 = HEAP32[$0 + 52 >> 2] + ($9 << 5) | 0;
  HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 
 function btTriangleIndexVertexArray__hasPremadeAabb_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 68 >> 2] == 1 | 0;
 }
 
 function btTriangleIndexVertexArray__setPremadeAabb_28btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 76 >> 2] = $3;
  $4 = $1 + 24 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 96 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $4 = $1 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 88 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $4 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 80 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 104 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 108 >> 2] = $1;
  $3 = $2 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $0 + 112 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $2 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $2 = $2 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$0 + 68 >> 2] = 1;
 }
 
 function btTriangleIndexVertexArray__getPremadeAabb_28btVector3__2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$0 + 76 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $4 = $0 + 96 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $4 = $0 + 88 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $1 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $3 = $0 + 80 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 128 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 24 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 120 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 16 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 112 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $1 = HEAP32[$0 + 108 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
 }
 
 function btTriangleIndexVertexArray__preallocateVertices_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function btTriangleMesh__addIndex_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAPU8[$0 + 216 | 0]) {
       $2 = HEAP32[$0 + 180 >> 2];
       if (($2 | 0) != HEAP32[$0 + 184 >> 2]) {
        break label$1
       }
       $6 = $2 ? $2 << 1 : 1;
       if (($6 | 0) <= ($2 | 0)) {
        break label$1
       }
       label$6 : {
        if (!$6) {
         break label$6
        }
        $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
        $2 = HEAP32[$0 + 180 >> 2];
       }
       $9 = HEAP32[$0 + 188 >> 2];
       if (($2 | 0) <= 0) {
        break label$4
       }
       $7 = $2 & 3;
       if ($2 - 1 >>> 0 >= 3) {
        $10 = $2 & -4;
        $2 = 0;
        while (1) {
         $4 = $2 + $5 | 0;
         $8 = $2 + $9 | 0;
         HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$4 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
         HEAP32[$4 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
         HEAP32[$4 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
         $2 = $2 + 16 | 0;
         $3 = $3 + 4 | 0;
         if (($10 | 0) != ($3 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$7) {
        break label$3
       }
       $3 = $3 << 2;
       $2 = $3 + $5 | 0;
       $4 = $3 + $9 | 0;
       while (1) {
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        $2 = $2 + 4 | 0;
        $4 = $4 + 4 | 0;
        $7 = $7 - 1 | 0;
        if ($7) {
         continue
        }
        break;
       };
       break label$3;
      }
      $3 = HEAP32[$0 + 200 >> 2];
      label$11 : {
       if (($3 | 0) != HEAP32[$0 + 204 >> 2]) {
        break label$11
       }
       $8 = $3 ? $3 << 1 : 1;
       if (($8 | 0) <= ($3 | 0)) {
        break label$11
       }
       label$12 : {
        if (!$8) {
         break label$12
        }
        $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 1);
        $3 = HEAP32[$0 + 200 >> 2];
       }
       $6 = HEAP32[$0 + 208 >> 2];
       label$14 : {
        label$15 : {
         if (($3 | 0) > 0) {
          $7 = $3 & 3;
          if ($3 - 1 >>> 0 >= 3) {
           $11 = $3 & -4;
           while (1) {
            $4 = $2 + $9 | 0;
            $10 = $2 + $6 | 0;
            HEAP16[$4 >> 1] = HEAPU16[$10 >> 1];
            HEAP16[$4 + 2 >> 1] = HEAPU16[$10 + 2 >> 1];
            HEAP16[$4 + 4 >> 1] = HEAPU16[$10 + 4 >> 1];
            HEAP16[$4 + 6 >> 1] = HEAPU16[$10 + 6 >> 1];
            $2 = $2 + 8 | 0;
            $5 = $5 + 4 | 0;
            if (($11 | 0) != ($5 | 0)) {
             continue
            }
            break;
           };
          }
          if ($7) {
           $5 = $5 << 1;
           $2 = $5 + $9 | 0;
           $4 = $5 + $6 | 0;
           while (1) {
            HEAP16[$2 >> 1] = HEAPU16[$4 >> 1];
            $2 = $2 + 2 | 0;
            $4 = $4 + 2 | 0;
            $7 = $7 - 1 | 0;
            if ($7) {
             continue
            }
            break;
           };
          }
          if (HEAPU8[$0 + 212 | 0]) {
           break label$15
          }
          break label$14;
         }
         if (!$6 | !HEAPU8[$0 + 212 | 0]) {
          break label$14
         }
        }
        btAlignedFreeInternal_28void__29($6);
        $3 = HEAP32[$0 + 200 >> 2];
       }
       HEAP32[$0 + 208 >> 2] = $9;
       HEAP32[$0 + 204 >> 2] = $8;
       HEAP8[$0 + 212 | 0] = 1;
      }
      HEAP32[$0 + 200 >> 2] = $3 + 1;
      $2 = HEAP32[$0 + 52 >> 2];
      $0 = HEAP32[$0 + 208 >> 2];
      HEAP32[$2 + 4 >> 2] = $0;
      HEAP16[$0 + ($3 << 1) >> 1] = $1;
      return;
     }
     if (!$9) {
      break label$2
     }
    }
    if (HEAPU8[$0 + 192 | 0]) {
     btAlignedFreeInternal_28void__29($9)
    }
    $2 = HEAP32[$0 + 180 >> 2];
   }
   HEAP32[$0 + 188 >> 2] = $5;
   HEAP32[$0 + 184 >> 2] = $6;
   HEAP8[$0 + 192 | 0] = 1;
  }
  $3 = $2 << 2;
  $2 = HEAP32[$0 + 188 >> 2];
  HEAP32[$3 + $2 >> 2] = $1;
  HEAP32[HEAP32[$0 + 52 >> 2] + 4 >> 2] = $2;
  HEAP32[$0 + 180 >> 2] = HEAP32[$0 + 180 >> 2] + 1;
 }
 
 function btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
  label$1 : {
   if (HEAPU8[$0 + 217 | 0]) {
    $3 = HEAP32[$0 + 140 >> 2];
    if (!(!$2 | ($3 | 0) <= 0)) {
     $2 = HEAP32[$0 + 148 >> 2];
     $14 = HEAPF64[$0 + 224 >> 3];
     $15 = HEAPF64[$1 + 16 >> 3];
     $16 = HEAPF64[$1 + 8 >> 3];
     $17 = HEAPF64[$1 >> 3];
     while (1) {
      $11 = HEAPF64[$2 + 16 >> 3] - $15;
      $18 = $11 * $11;
      $11 = HEAPF64[$2 >> 3] - $17;
      $19 = $11 * $11;
      $11 = HEAPF64[$2 + 8 >> 3] - $16;
      if ($14 >= $18 + ($19 + $11 * $11)) {
       break label$1
      }
      $2 = $2 + 32 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 52 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    label$5 : {
     if (HEAP32[$0 + 144 >> 2] != ($3 | 0)) {
      break label$5
     }
     $8 = $3 ? $3 << 1 : 1;
     if (($8 | 0) <= ($3 | 0)) {
      break label$5
     }
     label$6 : {
      if (!$8) {
       break label$6
      }
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 5);
      $3 = HEAP32[$0 + 140 >> 2];
     }
     label$8 : {
      if (($3 | 0) <= 0) {
       break label$8
      }
      $9 = $3 & 1;
      if (($3 | 0) != 1) {
       $12 = $3 & -2;
       $4 = 0;
       while (1) {
        $3 = HEAP32[$0 + 148 >> 2] + $4 | 0;
        $7 = HEAP32[$3 + 4 >> 2];
        $2 = $4 + $6 | 0;
        HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$2 + 4 >> 2] = $7;
        $10 = $3 + 24 | 0;
        $13 = HEAP32[$10 + 4 >> 2];
        $7 = $2 + 24 | 0;
        HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$7 + 4 >> 2] = $13;
        $10 = $3 + 16 | 0;
        $13 = HEAP32[$10 + 4 >> 2];
        $7 = $2 + 16 | 0;
        HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$7 + 4 >> 2] = $13;
        $3 = $3 + 8 | 0;
        $10 = HEAP32[$3 + 4 >> 2];
        $7 = $2 + 8 | 0;
        HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$7 + 4 >> 2] = $10;
        $3 = HEAP32[$0 + 148 >> 2] + $4 | 0;
        $10 = $3 + 40 | 0;
        $13 = HEAP32[$10 + 4 >> 2];
        $7 = $2 + 40 | 0;
        HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$7 + 4 >> 2] = $13;
        $10 = $3 + 48 | 0;
        $13 = HEAP32[$10 + 4 >> 2];
        $7 = $2 + 48 | 0;
        HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$7 + 4 >> 2] = $13;
        $10 = $3 + 56 | 0;
        $13 = HEAP32[$10 + 4 >> 2];
        $7 = $2 + 56 | 0;
        HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$7 + 4 >> 2] = $13;
        $3 = $3 + 32 | 0;
        $7 = HEAP32[$3 + 4 >> 2];
        $2 = $2 + 32 | 0;
        HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$2 + 4 >> 2] = $7;
        $4 = $4 - -64 | 0;
        $5 = $5 + 2 | 0;
        if (($12 | 0) != ($5 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$9) {
       break label$8
      }
      $5 = $5 << 5;
      $2 = $5 + $6 | 0;
      $5 = $5 + HEAP32[$0 + 148 >> 2] | 0;
      $3 = HEAP32[$5 + 4 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $3;
      $9 = $5 + 24 | 0;
      $4 = HEAP32[$9 + 4 >> 2];
      $3 = $2 + 24 | 0;
      HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$3 + 4 >> 2] = $4;
      $9 = $5 + 16 | 0;
      $4 = HEAP32[$9 + 4 >> 2];
      $3 = $2 + 16 | 0;
      HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$3 + 4 >> 2] = $4;
      $5 = $5 + 8 | 0;
      $3 = HEAP32[$5 + 4 >> 2];
      $2 = $2 + 8 | 0;
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $3;
     }
     $2 = HEAP32[$0 + 148 >> 2];
     if (!(!$2 | !HEAPU8[$0 + 152 | 0])) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 148 >> 2] = $6;
     HEAP8[$0 + 152 | 0] = 1;
     HEAP32[$0 + 144 >> 2] = $8;
     $3 = HEAP32[$0 + 140 >> 2];
    }
    $6 = HEAP32[$1 + 4 >> 2];
    $5 = $0 + 148 | 0;
    $2 = HEAP32[$5 >> 2] + ($3 << 5) | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $3 = $1 + 24 | 0;
    $8 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $8;
    $3 = $1 + 16 | 0;
    $8 = HEAP32[$3 + 4 >> 2];
    $6 = $2 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $8;
    $1 = $1 + 8 | 0;
    $6 = HEAP32[$1 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    HEAP32[HEAP32[$0 + 52 >> 2] + 16 >> 2] = HEAP32[$5 >> 2];
    $1 = $0;
    $0 = HEAP32[$0 + 140 >> 2];
    HEAP32[$1 + 140 >> 2] = $0 + 1;
    return $0;
   }
   $5 = HEAP32[$0 + 160 >> 2];
   if (!(!$2 | ($5 | 0) <= 0)) {
    $2 = HEAP32[$0 + 168 >> 2];
    $14 = HEAPF64[$0 + 224 >> 3];
    $15 = HEAPF64[$1 + 16 >> 3];
    $16 = HEAPF64[$1 + 8 >> 3];
    $17 = HEAPF64[$1 >> 3];
    while (1) {
     $11 = HEAPF64[$2 + 16 >> 3] - $15;
     $18 = $11 * $11;
     $11 = HEAPF64[$2 >> 3] - $17;
     $19 = $11 * $11;
     $11 = HEAPF64[$2 + 8 >> 3] - $16;
     if ($14 >= $18 + ($19 + $11 * $11)) {
      break label$1
     }
     $2 = $2 + 24 | 0;
     $4 = $4 + 1 | 0;
     $3 = $3 + 3 | 0;
     if (($5 | 0) > ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $6 = HEAP32[$0 + 164 >> 2];
   label$14 : {
    if (($5 | 0) != ($6 | 0)) {
     break label$14
    }
    $6 = $5 ? $5 << 1 : 1;
    if (($6 | 0) <= ($5 | 0)) {
     $6 = $5;
     break label$14;
    }
    label$16 : {
     if (!$6) {
      break label$16
     }
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 3);
     $5 = HEAP32[$0 + 160 >> 2];
    }
    $9 = HEAP32[$0 + 168 >> 2];
    label$18 : {
     label$19 : {
      if (($5 | 0) > 0) {
       $3 = $5 & 3;
       if ($5 - 1 >>> 0 >= 3) {
        $10 = $5 & -4;
        $2 = 0;
        while (1) {
         $4 = $2 + $12 | 0;
         $7 = $2 + $9 | 0;
         HEAPF64[$4 >> 3] = HEAPF64[$7 >> 3];
         HEAPF64[$4 + 8 >> 3] = HEAPF64[$7 + 8 >> 3];
         HEAPF64[$4 + 16 >> 3] = HEAPF64[$7 + 16 >> 3];
         HEAPF64[$4 + 24 >> 3] = HEAPF64[$7 + 24 >> 3];
         $2 = $2 + 32 | 0;
         $8 = $8 + 4 | 0;
         if (($10 | 0) != ($8 | 0)) {
          continue
         }
         break;
        };
       }
       if ($3) {
        $8 = $8 << 3;
        $2 = $8 + $12 | 0;
        $4 = $8 + $9 | 0;
        while (1) {
         HEAPF64[$2 >> 3] = HEAPF64[$4 >> 3];
         $2 = $2 + 8 | 0;
         $4 = $4 + 8 | 0;
         $3 = $3 - 1 | 0;
         if ($3) {
          continue
         }
         break;
        };
       }
       if (HEAPU8[$0 + 172 | 0]) {
        break label$19
       }
       break label$18;
      }
      if (!$9 | !HEAPU8[$0 + 172 | 0]) {
       break label$18
      }
     }
     btAlignedFreeInternal_28void__29($9);
     $5 = HEAP32[$0 + 160 >> 2];
    }
    HEAP32[$0 + 168 >> 2] = $12;
    HEAP32[$0 + 164 >> 2] = $6;
    HEAP8[$0 + 172 | 0] = 1;
   }
   $2 = $5 + 1 | 0;
   HEAP32[$0 + 160 >> 2] = $2;
   $9 = HEAP32[$0 + 168 >> 2];
   HEAPF64[$9 + ($5 << 3) >> 3] = HEAPF64[$1 >> 3];
   label$25 : {
    if (($2 | 0) != ($6 | 0)) {
     $5 = $9;
     $3 = $6;
     $6 = $2;
     break label$25;
    }
    $3 = $6 ? $6 << 1 : 1;
    if (($6 | 0) >= ($3 | 0)) {
     $5 = $9;
     $3 = $6;
     break label$25;
    }
    label$28 : {
     if (!$3) {
      $5 = 0;
      break label$28;
     }
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 3);
     $9 = HEAP32[$0 + 168 >> 2];
     $6 = HEAP32[$0 + 160 >> 2];
    }
    label$30 : {
     label$31 : {
      if (($6 | 0) > 0) {
       $8 = $6 & 3;
       $12 = 0;
       if ($6 - 1 >>> 0 >= 3) {
        $10 = $6 & -4;
        $2 = 0;
        while (1) {
         $4 = $2 + $5 | 0;
         $7 = $2 + $9 | 0;
         HEAPF64[$4 >> 3] = HEAPF64[$7 >> 3];
         HEAPF64[$4 + 8 >> 3] = HEAPF64[$7 + 8 >> 3];
         HEAPF64[$4 + 16 >> 3] = HEAPF64[$7 + 16 >> 3];
         HEAPF64[$4 + 24 >> 3] = HEAPF64[$7 + 24 >> 3];
         $2 = $2 + 32 | 0;
         $12 = $12 + 4 | 0;
         if (($10 | 0) != ($12 | 0)) {
          continue
         }
         break;
        };
       }
       if ($8) {
        $4 = $12 << 3;
        $2 = $4 + $5 | 0;
        $4 = $4 + $9 | 0;
        while (1) {
         HEAPF64[$2 >> 3] = HEAPF64[$4 >> 3];
         $2 = $2 + 8 | 0;
         $4 = $4 + 8 | 0;
         $8 = $8 - 1 | 0;
         if ($8) {
          continue
         }
         break;
        };
       }
       if (HEAPU8[$0 + 172 | 0]) {
        break label$31
       }
       break label$30;
      }
      if (!$9 | !HEAPU8[$0 + 172 | 0]) {
       break label$30
      }
     }
     btAlignedFreeInternal_28void__29($9);
     $6 = HEAP32[$0 + 160 >> 2];
    }
    HEAP32[$0 + 168 >> 2] = $5;
    HEAP32[$0 + 164 >> 2] = $3;
    HEAP8[$0 + 172 | 0] = 1;
   }
   $2 = $6 + 1 | 0;
   HEAP32[$0 + 160 >> 2] = $2;
   HEAPF64[($6 << 3) + $5 >> 3] = HEAPF64[$1 + 8 >> 3];
   label$37 : {
    if (($2 | 0) != ($3 | 0)) {
     $8 = $5;
     $3 = $2;
     break label$37;
    }
    $9 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($9 | 0)) {
     $8 = $5;
     break label$37;
    }
    label$40 : {
     if (!$9) {
      $8 = 0;
      break label$40;
     }
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 3);
     $5 = HEAP32[$0 + 168 >> 2];
     $3 = HEAP32[$0 + 160 >> 2];
    }
    label$42 : {
     label$43 : {
      if (($3 | 0) > 0) {
       $6 = $3 & 3;
       $12 = 0;
       if ($3 - 1 >>> 0 >= 3) {
        $10 = $3 & -4;
        $2 = 0;
        while (1) {
         $4 = $2 + $8 | 0;
         $7 = $2 + $5 | 0;
         HEAPF64[$4 >> 3] = HEAPF64[$7 >> 3];
         HEAPF64[$4 + 8 >> 3] = HEAPF64[$7 + 8 >> 3];
         HEAPF64[$4 + 16 >> 3] = HEAPF64[$7 + 16 >> 3];
         HEAPF64[$4 + 24 >> 3] = HEAPF64[$7 + 24 >> 3];
         $2 = $2 + 32 | 0;
         $12 = $12 + 4 | 0;
         if (($10 | 0) != ($12 | 0)) {
          continue
         }
         break;
        };
       }
       if ($6) {
        $4 = $12 << 3;
        $2 = $4 + $8 | 0;
        $4 = $4 + $5 | 0;
        while (1) {
         HEAPF64[$2 >> 3] = HEAPF64[$4 >> 3];
         $2 = $2 + 8 | 0;
         $4 = $4 + 8 | 0;
         $6 = $6 - 1 | 0;
         if ($6) {
          continue
         }
         break;
        };
       }
       if (HEAPU8[$0 + 172 | 0]) {
        break label$43
       }
       break label$42;
      }
      if (!$5 | !HEAPU8[$0 + 172 | 0]) {
       break label$42
      }
     }
     btAlignedFreeInternal_28void__29($5);
     $3 = HEAP32[$0 + 160 >> 2];
    }
    HEAP32[$0 + 168 >> 2] = $8;
    HEAP32[$0 + 164 >> 2] = $9;
    HEAP8[$0 + 172 | 0] = 1;
   }
   $2 = $3 + 1 | 0;
   HEAP32[$0 + 160 >> 2] = $2;
   HEAPF64[($3 << 3) + $8 >> 3] = HEAPF64[$1 + 16 >> 3];
   $0 = HEAP32[$0 + 52 >> 2];
   HEAP32[$0 + 16 >> 2] = $8;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   $4 = (($2 | 0) / 3 | 0) - 1 | 0;
  }
  return $4;
 }
 
 function btTriangleMesh__preallocateVertices_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   if (HEAPU8[$0 + 217 | 0]) {
    if (HEAP32[$0 + 144 >> 2] >= ($1 | 0)) {
     break label$1
    }
    if ($1) {
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 5)
    } else {
     $8 = 0
    }
    $2 = HEAP32[$0 + 140 >> 2];
    label$5 : {
     if (($2 | 0) <= 0) {
      break label$5
     }
     $9 = $2 & 1;
     if (($2 | 0) != 1) {
      $11 = $2 & -2;
      $2 = 0;
      while (1) {
       $4 = HEAP32[$0 + 148 >> 2] + $2 | 0;
       $5 = HEAP32[$4 + 4 >> 2];
       $3 = $2 + $8 | 0;
       HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$3 + 4 >> 2] = $5;
       $7 = $4 + 24 | 0;
       $10 = HEAP32[$7 + 4 >> 2];
       $5 = $3 + 24 | 0;
       HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$5 + 4 >> 2] = $10;
       $7 = $4 + 16 | 0;
       $10 = HEAP32[$7 + 4 >> 2];
       $5 = $3 + 16 | 0;
       HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$5 + 4 >> 2] = $10;
       $4 = $4 + 8 | 0;
       $7 = HEAP32[$4 + 4 >> 2];
       $5 = $3 + 8 | 0;
       HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$5 + 4 >> 2] = $7;
       $4 = HEAP32[$0 + 148 >> 2] + $2 | 0;
       $7 = $4 + 40 | 0;
       $10 = HEAP32[$7 + 4 >> 2];
       $5 = $3 + 40 | 0;
       HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$5 + 4 >> 2] = $10;
       $7 = $4 + 48 | 0;
       $10 = HEAP32[$7 + 4 >> 2];
       $5 = $3 + 48 | 0;
       HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$5 + 4 >> 2] = $10;
       $7 = $4 + 56 | 0;
       $10 = HEAP32[$7 + 4 >> 2];
       $5 = $3 + 56 | 0;
       HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$5 + 4 >> 2] = $10;
       $4 = $4 + 32 | 0;
       $5 = HEAP32[$4 + 4 >> 2];
       $3 = $3 + 32 | 0;
       HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$3 + 4 >> 2] = $5;
       $2 = $2 - -64 | 0;
       $6 = $6 + 2 | 0;
       if (($11 | 0) != ($6 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$9) {
      break label$5
     }
     $6 = $6 << 5;
     $2 = $6 + $8 | 0;
     $6 = $6 + HEAP32[$0 + 148 >> 2] | 0;
     $3 = HEAP32[$6 + 4 >> 2];
     HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$2 + 4 >> 2] = $3;
     $4 = $6 + 24 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $3 = $2 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$3 + 4 >> 2] = $9;
     $4 = $6 + 16 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $3 = $2 + 16 | 0;
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$3 + 4 >> 2] = $9;
     $6 = $6 + 8 | 0;
     $3 = HEAP32[$6 + 4 >> 2];
     $2 = $2 + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$2 + 4 >> 2] = $3;
    }
    $2 = HEAP32[$0 + 148 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 152 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$0 + 148 >> 2] = $8;
    HEAP8[$0 + 152 | 0] = 1;
    HEAP32[$0 + 144 >> 2] = $1;
    return;
   }
   if (HEAP32[$0 + 164 >> 2] >= ($1 | 0)) {
    break label$1
   }
   if ($1) {
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 3)
   } else {
    $4 = 0
   }
   $9 = HEAP32[$0 + 168 >> 2];
   $2 = HEAP32[$0 + 160 >> 2];
   label$11 : {
    label$12 : {
     if (($2 | 0) > 0) {
      $6 = $2 & 3;
      if ($2 - 1 >>> 0 >= 3) {
       $5 = $2 & -4;
       while (1) {
        $2 = $3 + $4 | 0;
        $11 = $3 + $9 | 0;
        HEAPF64[$2 >> 3] = HEAPF64[$11 >> 3];
        HEAPF64[$2 + 8 >> 3] = HEAPF64[$11 + 8 >> 3];
        HEAPF64[$2 + 16 >> 3] = HEAPF64[$11 + 16 >> 3];
        HEAPF64[$2 + 24 >> 3] = HEAPF64[$11 + 24 >> 3];
        $3 = $3 + 32 | 0;
        $8 = $8 + 4 | 0;
        if (($5 | 0) != ($8 | 0)) {
         continue
        }
        break;
       };
      }
      if ($6) {
       $8 = $8 << 3;
       $3 = $8 + $4 | 0;
       $2 = $8 + $9 | 0;
       while (1) {
        HEAPF64[$3 >> 3] = HEAPF64[$2 >> 3];
        $3 = $3 + 8 | 0;
        $2 = $2 + 8 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      if (HEAPU8[$0 + 172 | 0]) {
       break label$12
      }
      break label$11;
     }
     if (!$9 | !HEAPU8[$0 + 172 | 0]) {
      break label$11
     }
    }
    btAlignedFreeInternal_28void__29($9);
   }
   HEAP32[$0 + 168 >> 2] = $4;
   HEAP32[$0 + 164 >> 2] = $1;
   HEAP8[$0 + 172 | 0] = 1;
  }
 }
 
 function btTriangleMesh__preallocateIndices_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   if (HEAPU8[$0 + 216 | 0]) {
    if (HEAP32[$0 + 184 >> 2] >= ($1 | 0)) {
     break label$1
    }
    if ($1) {
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2)
    } else {
     $4 = 0
    }
    $5 = HEAP32[$0 + 188 >> 2];
    $2 = HEAP32[$0 + 180 >> 2];
    label$5 : {
     label$6 : {
      if (($2 | 0) > 0) {
       $6 = $2 & 3;
       if ($2 - 1 >>> 0 >= 3) {
        $9 = $2 & -4;
        $2 = 0;
        while (1) {
         $7 = $2 + $4 | 0;
         $8 = $2 + $5 | 0;
         HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
         HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
         HEAP32[$7 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
         $2 = $2 + 16 | 0;
         $3 = $3 + 4 | 0;
         if (($9 | 0) != ($3 | 0)) {
          continue
         }
         break;
        };
       }
       if ($6) {
        $3 = $3 << 2;
        $2 = $3 + $4 | 0;
        $3 = $3 + $5 | 0;
        while (1) {
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         $2 = $2 + 4 | 0;
         $3 = $3 + 4 | 0;
         $6 = $6 - 1 | 0;
         if ($6) {
          continue
         }
         break;
        };
       }
       if (HEAPU8[$0 + 192 | 0]) {
        break label$6
       }
       break label$5;
      }
      if (!$5 | !HEAPU8[$0 + 192 | 0]) {
       break label$5
      }
     }
     btAlignedFreeInternal_28void__29($5);
    }
    HEAP32[$0 + 188 >> 2] = $4;
    HEAP32[$0 + 184 >> 2] = $1;
    HEAP8[$0 + 192 | 0] = 1;
    return;
   }
   if (HEAP32[$0 + 204 >> 2] >= ($1 | 0)) {
    break label$1
   }
   if ($1) {
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 1)
   } else {
    $4 = 0
   }
   $5 = HEAP32[$0 + 208 >> 2];
   $2 = HEAP32[$0 + 200 >> 2];
   label$14 : {
    label$15 : {
     if (($2 | 0) > 0) {
      $6 = $2 & 3;
      if ($2 - 1 >>> 0 >= 3) {
       $9 = $2 & -4;
       $2 = 0;
       while (1) {
        $7 = $2 + $4 | 0;
        $8 = $2 + $5 | 0;
        HEAP16[$7 >> 1] = HEAPU16[$8 >> 1];
        HEAP16[$7 + 2 >> 1] = HEAPU16[$8 + 2 >> 1];
        HEAP16[$7 + 4 >> 1] = HEAPU16[$8 + 4 >> 1];
        HEAP16[$7 + 6 >> 1] = HEAPU16[$8 + 6 >> 1];
        $2 = $2 + 8 | 0;
        $3 = $3 + 4 | 0;
        if (($9 | 0) != ($3 | 0)) {
         continue
        }
        break;
       };
      }
      if ($6) {
       $3 = $3 << 1;
       $2 = $3 + $4 | 0;
       $3 = $3 + $5 | 0;
       while (1) {
        HEAP16[$2 >> 1] = HEAPU16[$3 >> 1];
        $2 = $2 + 2 | 0;
        $3 = $3 + 2 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      if (HEAPU8[$0 + 212 | 0]) {
       break label$15
      }
      break label$14;
     }
     if (!$5 | !HEAPU8[$0 + 212 | 0]) {
      break label$14
     }
    }
    btAlignedFreeInternal_28void__29($5);
   }
   HEAP32[$0 + 208 >> 2] = $4;
   HEAP32[$0 + 204 >> 2] = $1;
   HEAP8[$0 + 212 | 0] = 1;
  }
 }
 
 function btTriangleMesh___btTriangleMesh_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14812;
  $1 = HEAP32[$0 + 208 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 212 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP8[$0 + 212 | 0] = 1;
  $1 = $0 + 200 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 188 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 192 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 188 >> 2] = 0;
  HEAP8[$0 + 192 | 0] = 1;
  $1 = $0 + 180 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 168 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 172 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  $1 = $0 + 160 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 148 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 152 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP8[$0 + 152 | 0] = 1;
  $1 = $0 + 140 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29($0);
  return $0 | 0;
 }
 
 function btTriangleMesh___btTriangleMesh_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btTriangleMesh___btTriangleMesh_28_29($0));
 }
 
 function btTriangleIndexVertexArray__getNumSubParts_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function btStridingMeshInterface__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 28;
 }
 
 function gjkepa2_impl__Initialize_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btGjkEpaSolver2__sResults__2c_20gjkepa2_impl__MinkowskiDiff__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  $7 = $4 + 16 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 24 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 32 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 40 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 48 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 56 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 - -64 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = $2;
  HEAP32[$5 >> 2] = $0;
  $0 = $3 + 40 | 0;
  $12 = HEAPF64[$0 >> 3];
  $2 = $3 + 72 | 0;
  $13 = HEAPF64[$2 >> 3];
  $4 = $1 + 40 | 0;
  $8 = HEAPF64[$4 >> 3];
  $7 = $1 + 72 | 0;
  $9 = HEAPF64[$7 >> 3];
  $29 = $1 + 48 | 0;
  $14 = HEAPF64[$29 >> 3];
  $30 = $3 + 48 | 0;
  $15 = HEAPF64[$30 >> 3];
  $31 = $1 + 80 | 0;
  $16 = HEAPF64[$31 >> 3];
  $32 = $3 + 80 | 0;
  $17 = HEAPF64[$32 >> 3];
  $10 = HEAPF64[$3 + 64 >> 3];
  $19 = HEAPF64[$3 >> 3];
  $20 = HEAPF64[$3 + 32 >> 3];
  $21 = HEAPF64[$3 + 8 >> 3];
  $22 = HEAPF64[$1 + 64 >> 3];
  $23 = HEAPF64[$1 >> 3];
  $24 = HEAPF64[$1 + 32 >> 3];
  $25 = HEAPF64[$1 + 8 >> 3];
  $26 = HEAPF64[$1 + 16 >> 3];
  $11 = HEAPF64[$3 + 16 >> 3];
  $18 = $5 + 96 | 0;
  HEAP32[$18 >> 2] = 0;
  HEAP32[$18 + 4 >> 2] = 0;
  $18 = $5 - -64 | 0;
  HEAP32[$18 >> 2] = 0;
  HEAP32[$18 + 4 >> 2] = 0;
  $18 = $5 + 32 | 0;
  HEAP32[$18 >> 2] = 0;
  HEAP32[$18 + 4 >> 2] = 0;
  HEAPF64[$5 + 88 >> 3] = $17 * $16 + ($11 * $26 + $14 * $15);
  HEAPF64[$5 + 80 >> 3] = $17 * $9 + ($11 * $25 + $8 * $15);
  HEAPF64[$5 + 72 >> 3] = $17 * $22 + ($11 * $23 + $24 * $15);
  HEAPF64[$5 + 56 >> 3] = $13 * $16 + ($21 * $26 + $14 * $12);
  HEAPF64[$5 + 48 >> 3] = $13 * $9 + ($21 * $25 + $8 * $12);
  HEAPF64[$5 + 40 >> 3] = $13 * $22 + ($21 * $23 + $24 * $12);
  HEAPF64[$5 + 24 >> 3] = $10 * $16 + ($19 * $26 + $20 * $14);
  HEAPF64[$5 + 16 >> 3] = $10 * $9 + ($19 * $25 + $20 * $8);
  HEAPF64[$5 + 8 >> 3] = $10 * $22 + ($19 * $23 + $20 * $24);
  $33 = HEAPF64[$1 + 104 >> 3];
  $34 = HEAPF64[$3 + 104 >> 3];
  $35 = HEAPF64[$1 + 112 >> 3];
  $27 = HEAPF64[$3 + 112 >> 3];
  $12 = HEAPF64[$4 >> 3];
  $13 = HEAPF64[$7 >> 3];
  $19 = HEAPF64[$0 >> 3];
  $20 = HEAPF64[$2 >> 3];
  $8 = HEAPF64[$29 >> 3];
  $21 = HEAPF64[$30 >> 3];
  $9 = HEAPF64[$31 >> 3];
  $22 = HEAPF64[$32 >> 3];
  $36 = HEAPF64[$1 + 96 >> 3];
  $28 = HEAPF64[$3 + 96 >> 3];
  $14 = HEAPF64[$1 + 64 >> 3];
  $15 = HEAPF64[$1 >> 3];
  $16 = HEAPF64[$1 + 32 >> 3];
  $17 = HEAPF64[$1 + 8 >> 3];
  $23 = HEAPF64[$3 + 64 >> 3];
  $24 = HEAPF64[$3 >> 3];
  $25 = HEAPF64[$3 + 32 >> 3];
  $26 = HEAPF64[$3 + 8 >> 3];
  $10 = HEAPF64[$1 + 16 >> 3];
  $11 = HEAPF64[$3 + 16 >> 3];
  HEAP32[$5 + 236 >> 2] = 0;
  HEAP32[$5 + 232 >> 2] = $6 ? 388 : 389;
  $0 = $5 + 224 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $5 + 192 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $5 + 160 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $5 + 128 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$5 + 184 >> 3] = $9 * $22 + ($10 * $11 + $21 * $8);
  HEAPF64[$5 + 176 >> 3] = $9 * $20 + ($10 * $26 + $19 * $8);
  HEAPF64[$5 + 168 >> 3] = $9 * $23 + ($10 * $24 + $25 * $8);
  HEAPF64[$5 + 152 >> 3] = $13 * $22 + ($17 * $11 + $21 * $12);
  HEAPF64[$5 + 144 >> 3] = $13 * $20 + ($17 * $26 + $19 * $12);
  HEAPF64[$5 + 136 >> 3] = $13 * $23 + ($17 * $24 + $25 * $12);
  HEAPF64[$5 + 120 >> 3] = $14 * $22 + ($15 * $11 + $16 * $21);
  HEAPF64[$5 + 112 >> 3] = $14 * $20 + ($15 * $26 + $16 * $19);
  HEAPF64[$5 + 104 >> 3] = $14 * $23 + ($15 * $24 + $16 * $25);
  $11 = $9;
  $9 = $27 - $35;
  $27 = $10;
  $10 = $28 - $36;
  $28 = $8;
  $8 = $34 - $33;
  HEAPF64[$5 + 216 >> 3] = $11 * $9 + ($27 * $10 + $28 * $8);
  HEAPF64[$5 + 208 >> 3] = $13 * $9 + ($17 * $10 + $8 * $12);
  HEAPF64[$5 + 200 >> 3] = $14 * $9 + ($15 * $10 + $8 * $16);
 }
 
 function gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
  $9 = __stack_pointer - 176 | 0;
  __stack_pointer = $9;
  HEAP32[$0 + 676 >> 2] = 0;
  HEAP32[$0 + 664 >> 2] = 4;
  HEAP32[$0 + 668 >> 2] = 0;
  $7 = $0 + 584 | 0;
  HEAP32[$0 + 660 >> 2] = $7;
  HEAP32[$0 + 656 >> 2] = $0 + 520;
  HEAP32[$0 + 652 >> 2] = $0 + 456;
  HEAP32[$0 + 648 >> 2] = $0 + 392;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  $3 = $1 + 32 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  $3 = $1 - -64 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 - -64 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 56 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 56 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 48 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 48 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 40 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 40 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 72 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 72 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 80 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 80 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 88 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 88 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 96 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 96 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = HEAP32[$1 + 108 >> 2];
  HEAP32[$0 + 104 >> 2] = HEAP32[$1 + 104 >> 2];
  HEAP32[$0 + 108 >> 2] = $3;
  $3 = $1 + 112 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 112 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 120 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 120 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 128 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 128 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 136 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 136 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 144 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 144 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 152 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 152 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 160 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 160 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 168 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 168 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 176 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 176 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 184 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 184 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 192 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 192 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 200 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 200 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 208 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 208 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 224 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 224 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 216 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 216 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = HEAP32[$1 + 236 >> 2];
  HEAP32[$0 + 232 >> 2] = HEAP32[$1 + 232 >> 2];
  HEAP32[$0 + 236 >> 2] = $3;
  $1 = $0 + 328 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$0 + 272 >> 2] = 0;
  HEAP32[$0 + 276 >> 2] = 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 240 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 244 >> 2] = $3;
  $3 = $2 + 8 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 248 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $2 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $18 = $0 + 256 | 0;
  HEAP32[$18 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$18 + 4 >> 2] = $5;
  $2 = $2 + 24 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 264 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  HEAP32[$0 + 664 >> 2] = 3;
  $2 = $0 + 296 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $37 = $0 + 280 | 0;
  HEAP32[$37 >> 2] = $7;
  $5 = $0 + 608 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = 1;
  $6 = HEAPF64[$18 >> 3];
  $11 = HEAPF64[$0 + 240 >> 3];
  $10 = HEAPF64[$4 >> 3];
  $12 = $6 * $6 + ($11 * $11 + $10 * $10);
  $1 = $12 > 0.0;
  $13 = $1 ? -$6 : 0.0;
  $11 = $1 ? -$11 : 1.0;
  $10 = $1 ? -$10 : 0.0;
  $6 = 1.0 / Math_sqrt($13 * $13 + ($11 * $11 + $10 * $10));
  HEAPF64[$0 + 600 >> 3] = $13 * $6;
  HEAPF64[$0 + 592 >> 3] = $10 * $6;
  HEAPF64[$7 >> 3] = $11 * $6;
  $1 = $9 + 16 | 0;
  gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($1, $0, $7);
  $26 = $1 + 24 | 0;
  $7 = $26;
  $5 = HEAP32[$7 + 4 >> 2];
  $15 = $0 + 640 | 0;
  HEAP32[$15 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$15 + 4 >> 2] = $5;
  $15 = $1 + 16 | 0;
  $7 = $15;
  $5 = HEAP32[$7 + 4 >> 2];
  $14 = $0 + 632 | 0;
  HEAP32[$14 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$14 + 4 >> 2] = $5;
  $7 = $1 + 8 | 0;
  $5 = HEAP32[$7 + 4 >> 2];
  $14 = $0 + 624 | 0;
  HEAP32[$14 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$14 + 4 >> 2] = $5;
  $7 = HEAP32[$9 + 20 >> 2];
  $5 = $0 + 616 | 0;
  HEAP32[$5 >> 2] = HEAP32[$9 + 16 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $2 = HEAP32[$37 >> 2];
  $7 = HEAP32[$2 + 36 >> 2];
  HEAP32[$0 + 240 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$0 + 244 >> 2] = $7;
  $7 = $2 + 56 | 0;
  $5 = HEAP32[$7 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $3 = $2 + 48 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$18 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$18 + 4 >> 2] = $5;
  $5 = $2 + 40 | 0;
  $14 = HEAP32[$5 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $14;
  $14 = HEAP32[$7 + 4 >> 2];
  $23 = $1 + 120 | 0;
  $31 = HEAP32[$7 >> 2];
  HEAP32[$23 >> 2] = $31;
  HEAP32[$23 + 4 >> 2] = $14;
  $23 = HEAP32[$3 + 4 >> 2];
  $27 = $1 + 112 | 0;
  $32 = HEAP32[$3 >> 2];
  HEAP32[$27 >> 2] = $32;
  HEAP32[$27 + 4 >> 2] = $23;
  $27 = HEAP32[$5 + 4 >> 2];
  $16 = $9 + 120 | 0;
  $33 = HEAP32[$5 >> 2];
  HEAP32[$16 >> 2] = $33;
  HEAP32[$16 + 4 >> 2] = $27;
  $16 = HEAP32[$2 + 36 >> 2];
  $42 = HEAP32[$2 + 32 >> 2];
  HEAP32[$9 + 112 >> 2] = $42;
  HEAP32[$9 + 116 >> 2] = $16;
  $43 = $1 + 88 | 0;
  HEAP32[$43 >> 2] = $31;
  HEAP32[$43 + 4 >> 2] = $14;
  $14 = $1 + 80 | 0;
  HEAP32[$14 >> 2] = $32;
  HEAP32[$14 + 4 >> 2] = $23;
  $14 = $1 + 72 | 0;
  HEAP32[$14 >> 2] = $33;
  HEAP32[$14 + 4 >> 2] = $27;
  HEAP32[$9 + 80 >> 2] = $42;
  HEAP32[$9 + 84 >> 2] = $16;
  $14 = HEAP32[$7 + 4 >> 2];
  $23 = $1 + 56 | 0;
  HEAP32[$23 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$23 + 4 >> 2] = $14;
  $14 = HEAP32[$3 + 4 >> 2];
  $23 = $1 + 48 | 0;
  HEAP32[$23 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$23 + 4 >> 2] = $14;
  $14 = HEAP32[$5 + 4 >> 2];
  $1 = $1 + 40 | 0;
  HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$1 + 4 >> 2] = $14;
  $1 = HEAP32[$2 + 36 >> 2];
  HEAP32[$9 + 48 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$9 + 52 >> 2] = $1;
  $1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$26 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$26 + 4 >> 2] = $1;
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$15 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$15 + 4 >> 2] = $1;
  $1 = HEAP32[$5 + 4 >> 2];
  HEAP32[$9 + 24 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$9 + 28 >> 2] = $1;
  $1 = HEAP32[$2 + 36 >> 2];
  HEAP32[$9 + 16 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$9 + 20 >> 2] = $1;
  $26 = $0 + 240 | 0;
  $6 = HEAPF64[$18 >> 3];
  $11 = HEAPF64[$4 >> 3];
  $10 = HEAPF64[$0 + 240 >> 3];
  $18 = HEAP32[$0 + 668 >> 2];
  $23 = 0;
  $27 = 0;
  while (1) {
   label$1 : {
    label$3 : {
     $13 = Math_sqrt($6 * $6 + ($10 * $10 + $11 * $11));
     label$4 : {
      if ($13 < 1.0e-12) {
       HEAP32[$0 + 676 >> 2] = 1;
       break label$4;
      }
      $1 = HEAP32[$0 + 664 >> 2] - 1 | 0;
      HEAP32[$0 + 664 >> 2] = $1;
      $31 = Math_imul($18, 56);
      $4 = $31 + $0 | 0;
      $14 = $4 + 328 | 0;
      $2 = HEAP32[$14 >> 2];
      HEAP32[$14 >> 2] = $2 + 1;
      $5 = $4 + 280 | 0;
      $1 = HEAP32[(($1 << 2) + $0 | 0) + 648 >> 2];
      HEAP32[$5 + ($2 << 2) >> 2] = $1;
      $2 = ($5 + ($2 << 3) | 0) + 16 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$1 + 24 >> 2] = 0;
      HEAP32[$1 + 28 >> 2] = 0;
      $8 = 1.0 / $13;
      HEAPF64[$1 + 16 >> 3] = $8 * -$6;
      HEAPF64[$1 + 8 >> 3] = $8 * -$11;
      HEAPF64[$1 >> 3] = $8 * -$10;
      $2 = $9 + 144 | 0;
      gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($2, $0, $1);
      $7 = $2 + 24 | 0;
      $3 = HEAP32[$7 + 4 >> 2];
      $15 = $1 + 56 | 0;
      HEAP32[$15 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$15 + 4 >> 2] = $3;
      $7 = $2 + 16 | 0;
      $3 = HEAP32[$7 + 4 >> 2];
      $15 = $1 + 48 | 0;
      HEAP32[$15 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$15 + 4 >> 2] = $3;
      $2 = $2 + 8 | 0;
      $7 = HEAP32[$2 + 4 >> 2];
      $3 = $1 + 40 | 0;
      HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
      $2 = HEAP32[$9 + 148 >> 2];
      HEAP32[$1 + 32 >> 2] = HEAP32[$9 + 144 >> 2];
      HEAP32[$1 + 36 >> 2] = $2;
      label$6 : {
       $7 = HEAP32[$14 >> 2];
       $1 = HEAP32[($5 + ($7 << 2) | 0) - 4 >> 2];
       $6 = HEAPF64[$1 + 48 >> 3];
       $11 = $6 - HEAPF64[$9 + 32 >> 3];
       $17 = $11 * $11;
       $11 = HEAPF64[$1 + 32 >> 3];
       $10 = $11 - HEAPF64[$9 + 16 >> 3];
       $24 = $10 * $10;
       $10 = HEAPF64[$1 + 40 >> 3];
       $8 = $10 - HEAPF64[$9 + 24 >> 3];
       if ($17 + ($24 + $8 * $8) < 1.0e-12) {
        break label$6
       }
       $8 = $6 - HEAPF64[$9 + 64 >> 3];
       $17 = $8 * $8;
       $8 = $11 - HEAPF64[$9 + 48 >> 3];
       $24 = $8 * $8;
       $8 = $10 - HEAPF64[$9 + 56 >> 3];
       if ($17 + ($24 + $8 * $8) < 1.0e-12) {
        break label$6
       }
       $8 = $6 - HEAPF64[$9 + 96 >> 3];
       $17 = $8 * $8;
       $8 = $11 - HEAPF64[$9 + 80 >> 3];
       $24 = $8 * $8;
       $8 = $10 - HEAPF64[$9 + 88 >> 3];
       if ($17 + ($24 + $8 * $8) < 1.0e-12) {
        break label$6
       }
       $8 = $6 - HEAPF64[$9 + 128 >> 3];
       $17 = $8 * $8;
       $8 = $11 - HEAPF64[$9 + 112 >> 3];
       $24 = $8 * $8;
       $8 = $10 - HEAPF64[$9 + 120 >> 3];
       if ($17 + ($24 + $8 * $8) < 1.0e-12) {
        break label$6
       }
       $2 = $1 + 32 | 0;
       $3 = $2 + 8 | 0;
       $15 = HEAP32[$3 + 4 >> 2];
       $23 = $23 + 1 & 3;
       $1 = ($9 + 16 | 0) + ($23 << 5) | 0;
       HEAP32[$1 + 8 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$1 + 12 >> 2] = $15;
       $3 = HEAP32[$2 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $3;
       $3 = $2 + 24 | 0;
       $15 = HEAP32[$3 + 4 >> 2];
       $16 = $1 + 24 | 0;
       HEAP32[$16 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$16 + 4 >> 2] = $15;
       $2 = $2 + 16 | 0;
       $3 = HEAP32[$2 + 4 >> 2];
       $1 = $1 + 16 | 0;
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $3;
       $6 = (HEAPF64[$0 + 256 >> 3] * $6 + (HEAPF64[$0 + 240 >> 3] * $11 + HEAPF64[$0 + 248 >> 3] * $10)) / $13;
       $38 = $6 > $38 ? $6 : $38;
       if ($13 * -1.0e-12 + ($13 - $38) <= 0.0) {
        $2 = HEAP32[$0 + 664 >> 2];
        HEAP32[$0 + 664 >> 2] = $2 + 1;
        $18 = HEAP32[$0 + 668 >> 2];
        $7 = Math_imul($18, 56) + $0 | 0;
        $3 = $7 + 328 | 0;
        $1 = HEAP32[$3 >> 2] - 1 | 0;
        HEAP32[$3 >> 2] = $1;
        HEAP32[(($2 << 2) + $0 | 0) + 648 >> 2] = HEAP32[($7 + ($1 << 2) | 0) + 280 >> 2];
        break label$4;
       }
       HEAP32[$9 + 12 >> 2] = 0;
       label$8 : {
        label$9 : {
         label$10 : {
          switch ($7 - 2 | 0) {
          case 0:
           $1 = HEAP32[$4 + 284 >> 2];
           $20 = HEAPF64[$1 + 48 >> 3];
           $2 = HEAP32[$5 >> 2];
           $12 = HEAPF64[$2 + 48 >> 3];
           $13 = $20 - $12;
           $21 = HEAPF64[$1 + 32 >> 3];
           $11 = HEAPF64[$2 + 32 >> 3];
           $8 = $21 - $11;
           $22 = HEAPF64[$1 + 40 >> 3];
           $10 = HEAPF64[$2 + 40 >> 3];
           $19 = $22 - $10;
           $6 = $13 * $13 + ($8 * $8 + $19 * $19);
           if (!($6 > 0.0)) {
            break label$8
           }
           $6 = -($12 * $13 + ($11 * $8 + $10 * $19)) / $6;
           if ($6 >= 1.0) {
            HEAP32[$9 + 152 >> 2] = 0;
            HEAP32[$9 + 156 >> 2] = 1072693248;
            HEAP32[$9 + 144 >> 2] = 0;
            HEAP32[$9 + 148 >> 2] = 0;
            HEAP32[$9 + 12 >> 2] = 2;
            $12 = $20 * $20 + ($21 * $21 + $22 * $22);
            break label$9;
           }
           if ($6 <= 0.0) {
            HEAP32[$9 + 152 >> 2] = 0;
            HEAP32[$9 + 156 >> 2] = 0;
            HEAP32[$9 + 144 >> 2] = 0;
            HEAP32[$9 + 148 >> 2] = 1072693248;
            HEAP32[$9 + 12 >> 2] = 1;
            $12 = $12 * $12 + ($11 * $11 + $10 * $10);
            break label$9;
           }
           HEAP32[$9 + 12 >> 2] = 3;
           HEAPF64[$9 + 152 >> 3] = $6;
           HEAPF64[$9 + 144 >> 3] = 1.0 - $6;
           $12 = $12 + $13 * $6;
           $17 = $12 * $12;
           $12 = $11 + $8 * $6;
           $6 = $10 + $19 * $6;
           $12 = $17 + ($12 * $12 + $6 * $6);
           break label$9;
          case 1:
           $12 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double__2c_20unsigned_20int__29(HEAP32[$5 >> 2] + 32 | 0, HEAP32[$4 + 284 >> 2] + 32 | 0, HEAP32[$4 + 288 >> 2] + 32 | 0, $9 + 144 | 0, $9 + 12 | 0);
           break label$9;
          case 2:
           break label$10;
          default:
           break label$9;
          };
         }
         $7 = $9 + 144 | 0;
         $15 = $9 + 12 | 0;
         $1 = __stack_pointer - 48 | 0;
         __stack_pointer = $1;
         $6 = -1.0;
         $3 = HEAP32[$4 + 284 >> 2] + 32 | 0;
         $17 = HEAPF64[$3 + 8 >> 3];
         $2 = HEAP32[$4 + 292 >> 2] + 32 | 0;
         $12 = HEAPF64[$2 + 8 >> 3];
         $19 = $17 - $12;
         $5 = HEAP32[$5 >> 2] + 32 | 0;
         $29 = HEAPF64[$5 + 16 >> 3];
         $20 = HEAPF64[$2 + 16 >> 3];
         $21 = $29 - $20;
         $44 = $19 * -$21;
         $4 = HEAP32[$4 + 288 >> 2] + 32 | 0;
         $34 = HEAPF64[$4 >> 3];
         $22 = HEAPF64[$2 >> 3];
         $10 = $34 - $22;
         $39 = HEAPF64[$5 >> 3];
         $25 = $39 - $22;
         $45 = $25 * $19;
         $46 = HEAPF64[$4 + 16 >> 3];
         $13 = $46 - $20;
         $30 = HEAPF64[$3 >> 3];
         $28 = $30 - $22;
         $40 = HEAPF64[$5 + 8 >> 3];
         $35 = $40 - $12;
         $47 = $28 * -$35;
         $41 = HEAPF64[$3 + 16 >> 3];
         $36 = $41 - $20;
         $48 = $36 * -$25;
         $24 = HEAPF64[$4 + 8 >> 3];
         $8 = $24 - $12;
         $49 = $35 * $36;
         $50 = $21 * $28;
         $11 = $44 * $10 + ($45 * $13 + ($47 * $13 + ($48 * $8 + ($49 * $10 + $50 * $8))));
         label$13 : {
          if (!($11 > 0.0 | $11 < 0.0)) {
           break label$13
          }
          $34 = $30 - $34;
          $51 = $40 - $17;
          $30 = $39 - $30;
          $17 = $17 - $24;
          $52 = $29 * ($34 * $51 - $30 * $17);
          $24 = $17;
          $17 = $29 - $41;
          $29 = $41 - $46;
          if (!(($52 + ($39 * ($24 * $17 - $51 * $29) + $40 * ($29 * $30 - $17 * $34))) * $11 <= 0.0)) {
           break label$13
          }
          $16 = $1 + 32 | 0;
          HEAP32[$16 >> 2] = 0;
          HEAP32[$16 + 4 >> 2] = 0;
          HEAP32[$1 + 24 >> 2] = 0;
          HEAP32[$1 + 28 >> 2] = 0;
          HEAP32[$1 + 16 >> 2] = 0;
          HEAP32[$1 + 20 >> 2] = 0;
          HEAP32[$1 + 12 >> 2] = 0;
          if ($11 * ($20 * ($45 + $47) + ($22 * ($49 + $44) + $12 * ($50 + $48))) > 0.0) {
           $6 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double__2c_20unsigned_20int__29($5, $3, $2, $1 + 16 | 0, $1 + 12 | 0);
           HEAP32[$7 + 16 >> 2] = 0;
           HEAP32[$7 + 20 >> 2] = 0;
           HEAPF64[$7 >> 3] = HEAPF64[$1 + 16 >> 3];
           HEAPF64[$7 + 8 >> 3] = HEAPF64[$1 + 24 >> 3];
           HEAPF64[$7 + 24 >> 3] = HEAPF64[$1 + 32 >> 3];
           $16 = HEAP32[$1 + 12 >> 2];
           HEAP32[$15 >> 2] = $16 & 2 | $16 << 1 & 8 | $16 & 1;
          }
          label$34 : {
           if (!($11 * (HEAPF64[$2 + 16 >> 3] * ($28 * $8 - $10 * $19) + (HEAPF64[$2 >> 3] * ($19 * $13 - $8 * $36) + HEAPF64[$2 + 8 >> 3] * ($36 * $10 - $13 * $28))) > 0.0)) {
            break label$34
           }
           $12 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double__2c_20unsigned_20int__29($3, $4, $2, $1 + 16 | 0, $1 + 12 | 0);
           if (!($6 < 0.0 | $12 < $6)) {
            break label$34
           }
           HEAPF64[$7 + 8 >> 3] = HEAPF64[$1 + 16 >> 3];
           HEAPF64[$7 + 16 >> 3] = HEAPF64[$1 + 24 >> 3];
           HEAP32[$7 >> 2] = 0;
           HEAP32[$7 + 4 >> 2] = 0;
           HEAPF64[$7 + 24 >> 3] = HEAPF64[$1 + 32 >> 3];
           HEAP32[$15 >> 2] = HEAP32[$1 + 12 >> 2] << 1 & 14;
           $6 = $12;
          }
          label$5 : {
           if (!($11 * (HEAPF64[$2 + 16 >> 3] * ($10 * $35 - $25 * $8) + (HEAPF64[$2 >> 3] * ($8 * $21 - $35 * $13) + HEAPF64[$2 + 8 >> 3] * ($13 * $25 - $21 * $10))) > 0.0)) {
            break label$5
           }
           $12 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double__2c_20unsigned_20int__29($4, $5, $2, $1 + 16 | 0, $1 + 12 | 0);
           if (!($6 < 0.0 | $12 < $6)) {
            break label$5
           }
           HEAPF64[$7 + 16 >> 3] = HEAPF64[$1 + 16 >> 3];
           HEAP32[$7 + 8 >> 2] = 0;
           HEAP32[$7 + 12 >> 2] = 0;
           HEAPF64[$7 >> 3] = HEAPF64[$1 + 24 >> 3];
           HEAPF64[$7 + 24 >> 3] = HEAPF64[$1 + 32 >> 3];
           $16 = HEAP32[$1 + 12 >> 2];
           HEAP32[$15 >> 2] = $16 >>> 1 & 1 | $16 << 1 & 8 | $16 << 2 & 4;
           $6 = $12;
          }
          if (!($6 < 0.0)) {
           break label$13
          }
          $6 = HEAPF64[$4 >> 3];
          $12 = HEAPF64[$3 + 8 >> 3];
          $10 = HEAPF64[$2 + 16 >> 3];
          $13 = HEAPF64[$4 + 8 >> 3];
          $8 = HEAPF64[$3 + 16 >> 3];
          $19 = HEAPF64[$2 >> 3];
          $20 = HEAPF64[$4 + 16 >> 3];
          $21 = HEAPF64[$3 >> 3];
          $22 = HEAPF64[$2 + 8 >> 3];
          $6 = ($6 * $12 * $10 + ($13 * $8 * $19 + $20 * $21 * $22 - $8 * $6 * $22 - $21 * $13 * $10) - $12 * $20 * $19) / $11;
          HEAPF64[$7 >> 3] = $6;
          $12 = HEAPF64[$5 >> 3];
          $10 = HEAPF64[$4 + 8 >> 3];
          $13 = HEAPF64[$2 + 16 >> 3];
          $8 = HEAPF64[$5 + 8 >> 3];
          $19 = HEAPF64[$4 + 16 >> 3];
          $20 = HEAPF64[$2 >> 3];
          $21 = HEAPF64[$5 + 16 >> 3];
          $22 = HEAPF64[$4 >> 3];
          $25 = HEAPF64[$2 + 8 >> 3];
          $12 = ($12 * $10 * $13 + ($8 * $19 * $20 + $21 * $22 * $25 - $19 * $12 * $25 - $22 * $8 * $13) - $10 * $21 * $20) / $11;
          HEAPF64[$7 + 8 >> 3] = $12;
          HEAP32[$15 >> 2] = 15;
          $10 = HEAPF64[$3 >> 3];
          $13 = HEAPF64[$5 + 8 >> 3];
          $8 = HEAPF64[$2 + 16 >> 3];
          $19 = HEAPF64[$3 + 8 >> 3];
          $20 = HEAPF64[$5 + 16 >> 3];
          $21 = HEAPF64[$2 >> 3];
          $22 = HEAPF64[$3 + 16 >> 3];
          $25 = HEAPF64[$5 >> 3];
          $28 = HEAPF64[$2 + 8 >> 3];
          $11 = ($10 * $13 * $8 + ($19 * $20 * $21 + $22 * $25 * $28 - $20 * $10 * $28 - $25 * $19 * $8) - $13 * $22 * $21) / $11;
          HEAPF64[$7 + 16 >> 3] = $11;
          HEAPF64[$7 + 24 >> 3] = 1.0 - ($6 + $12 + $11);
          $6 = 0.0;
         }
         __stack_pointer = $1 + 48 | 0;
         $12 = $6;
        }
        if (!($12 >= 0.0)) {
         break label$8
        }
        $18 = 1 - $18 | 0;
        $16 = Math_imul($18, 56) + $0 | 0;
        $32 = $16 + 328 | 0;
        HEAP32[$32 >> 2] = 0;
        HEAP32[$26 >> 2] = 0;
        HEAP32[$26 + 4 >> 2] = 0;
        HEAP32[$0 + 668 >> 2] = $18;
        $1 = $26 + 8 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $1 = $26 + 16 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $1 = $26 + 24 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $33 = HEAP32[$14 >> 2];
        if (!$33) {
         $6 = 0.0;
         $4 = HEAP32[$9 + 12 >> 2];
         $11 = 0.0;
         $10 = 0.0;
         break label$3;
        }
        $1 = $31 + $37 | 0;
        $7 = HEAP32[$0 + 664 >> 2];
        $6 = 0.0;
        $5 = 0;
        $15 = $9 + 144 | 0;
        $4 = HEAP32[$9 + 12 >> 2];
        $11 = 0.0;
        $10 = 0.0;
        $2 = 0;
        while (1) {
         $14 = HEAP32[$1 >> 2];
         label$17 : {
          if ($4 >>> $2 & 1) {
           $3 = $16 + 280 | 0;
           HEAP32[$3 + ($5 << 2) >> 2] = $14;
           $6 = HEAPF64[$15 >> 3];
           HEAPF64[($3 + ($5 << 3) | 0) + 16 >> 3] = $6;
           $5 = $5 + 1 | 0;
           HEAP32[$32 >> 2] = $5;
           $3 = HEAP32[$1 >> 2];
           $13 = HEAPF64[$3 + 48 >> 3];
           $11 = HEAPF64[$3 + 40 >> 3];
           $10 = $6 * HEAPF64[$3 + 32 >> 3] + HEAPF64[$0 + 240 >> 3];
           HEAPF64[$0 + 240 >> 3] = $10;
           $11 = $6 * $11 + HEAPF64[$0 + 248 >> 3];
           HEAPF64[$0 + 248 >> 3] = $11;
           $6 = $6 * $13 + HEAPF64[$0 + 256 >> 3];
           HEAPF64[$0 + 256 >> 3] = $6;
           break label$17;
          }
          $3 = $7 + 1 | 0;
          HEAP32[$0 + 664 >> 2] = $3;
          HEAP32[(($7 << 2) + $0 | 0) + 648 >> 2] = $14;
          $7 = $3;
         }
         $1 = $1 + 4 | 0;
         $15 = $15 + 8 | 0;
         $2 = $2 + 1 | 0;
         if (($2 | 0) != ($33 | 0)) {
          continue
         }
         break;
        };
        break label$3;
       }
       $2 = HEAP32[$0 + 664 >> 2];
       HEAP32[$0 + 664 >> 2] = $2 + 1;
       $18 = HEAP32[$0 + 668 >> 2];
       $7 = Math_imul($18, 56) + $0 | 0;
       $3 = $7 + 328 | 0;
       $1 = HEAP32[$3 >> 2] - 1 | 0;
       HEAP32[$3 >> 2] = $1;
       HEAP32[(($2 << 2) + $0 | 0) + 648 >> 2] = HEAP32[($7 + ($1 << 2) | 0) + 280 >> 2];
       break label$4;
      }
      $2 = HEAP32[$0 + 664 >> 2];
      HEAP32[$0 + 664 >> 2] = $2 + 1;
      $18 = HEAP32[$0 + 668 >> 2];
      $7 = Math_imul($18, 56) + $0 | 0;
      $3 = $7 + 328 | 0;
      $1 = HEAP32[$3 >> 2] - 1 | 0;
      HEAP32[$3 >> 2] = $1;
      HEAP32[(($2 << 2) + $0 | 0) + 648 >> 2] = HEAP32[($7 + ($1 << 2) | 0) + 280 >> 2];
     }
     $1 = HEAP32[$0 + 676 >> 2];
     break label$1;
    }
    $27 = $27 + 1 | 0;
    $1 = $27 >>> 0 < 128 ? (($4 | 0) == 15 ? 1 : HEAP32[$0 + 676 >> 2]) : 2;
    HEAP32[$0 + 676 >> 2] = $1;
    if (!$1) {
     continue
    }
   }
   break;
  };
  HEAP32[$0 + 672 >> 2] = (Math_imul($18, 56) + $0 | 0) + 280;
  $6 = 0.0;
  label$19 : {
   switch ($1 | 0) {
   case 0:
    $6 = HEAPF64[$0 + 256 >> 3];
    $12 = $6 * $6;
    $6 = HEAPF64[$0 + 240 >> 3];
    $17 = $6 * $6;
    $6 = HEAPF64[$0 + 248 >> 3];
    $6 = Math_sqrt($12 + ($17 + $6 * $6));
   case 1:
    HEAPF64[$0 + 272 >> 3] = $6;
    break;
   default:
    break label$19;
   };
  }
  __stack_pointer = $9 + 176 | 0;
  return $1;
 }
 
 function gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($0, $1, $2) {
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  $7 = HEAP32[$1 + 232 >> 2];
  $9 = HEAP32[$1 + 236 >> 2];
  $8 = HEAP32[$1 >> 2] + ($9 >> 1) | 0;
  FUNCTION_TABLE[($9 & 1 ? HEAP32[HEAP32[$8 >> 2] + $7 >> 2] : $7) | 0]($3, $8, $2);
  $8 = HEAP32[$1 + 236 >> 2];
  $7 = HEAP32[$1 + 4 >> 2] + ($8 >> 1) | 0;
  $4 = -HEAPF64[$2 + 16 >> 3];
  $5 = -HEAPF64[$2 + 8 >> 3];
  $6 = -HEAPF64[$2 >> 3];
  $2 = HEAP32[$1 + 232 >> 2];
  $2 = $8 & 1 ? HEAP32[HEAP32[$7 >> 2] + $2 >> 2] : $2;
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAPF64[$3 + 48 >> 3] = HEAPF64[$1 + 88 >> 3] * $4 + (HEAPF64[$1 + 72 >> 3] * $6 + HEAPF64[$1 + 80 >> 3] * $5);
  HEAPF64[$3 + 40 >> 3] = HEAPF64[$1 + 56 >> 3] * $4 + (HEAPF64[$1 + 40 >> 3] * $6 + HEAPF64[$1 + 48 >> 3] * $5);
  HEAPF64[$3 + 32 >> 3] = HEAPF64[$1 + 24 >> 3] * $4 + (HEAPF64[$1 + 8 >> 3] * $6 + HEAPF64[$1 + 16 >> 3] * $5);
  FUNCTION_TABLE[$2 | 0]($3 - -64 | 0, $7, $3 + 32 | 0);
  $10 = HEAPF64[$1 + 200 >> 3];
  $11 = HEAPF64[$1 + 120 >> 3];
  $12 = HEAPF64[$1 + 112 >> 3];
  $13 = HEAPF64[$1 + 208 >> 3];
  $14 = HEAPF64[$1 + 152 >> 3];
  $15 = HEAPF64[$1 + 136 >> 3];
  $16 = HEAPF64[$1 + 144 >> 3];
  $17 = HEAPF64[$1 + 216 >> 3];
  $18 = HEAPF64[$1 + 184 >> 3];
  $19 = HEAPF64[$1 + 168 >> 3];
  $20 = HEAPF64[$1 + 176 >> 3];
  $21 = HEAPF64[$1 + 104 >> 3];
  $4 = HEAPF64[$3 + 80 >> 3];
  $5 = HEAPF64[$3 + 64 >> 3];
  $6 = HEAPF64[$3 + 72 >> 3];
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF64[$0 + 16 >> 3] = HEAPF64[$3 + 16 >> 3] - ($17 + ($4 * $18 + ($5 * $19 + $6 * $20)));
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$3 + 8 >> 3] - ($13 + ($4 * $14 + ($5 * $15 + $6 * $16)));
  HEAPF64[$0 >> 3] = HEAPF64[$3 >> 3] - ($10 + ($4 * $11 + ($5 * $21 + $6 * $12)));
  __stack_pointer = $3 + 96 | 0;
 }
 
 function gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double__2c_20unsigned_20int__29($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
  $9 = -1.0;
  $6 = HEAPF64[$0 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $8 = $6 - $7;
  $11 = HEAPF64[$1 + 8 >> 3];
  $18 = HEAPF64[$2 + 8 >> 3];
  $26 = $11 - $18;
  $19 = HEAPF64[$2 >> 3];
  $27 = $7 - $19;
  $14 = HEAPF64[$0 + 8 >> 3];
  $12 = $14 - $11;
  $20 = $8 * $26 - $27 * $12;
  $10 = HEAPF64[$1 + 16 >> 3];
  $21 = HEAPF64[$2 + 16 >> 3];
  $28 = $10 - $21;
  $16 = HEAPF64[$0 + 16 >> 3];
  $15 = $16 - $10;
  $22 = $12 * $28 - $26 * $15;
  $23 = $15 * $27 - $28 * $8;
  $29 = $20 * $20 + ($22 * $22 + $23 * $23);
  label$1 : {
   if (!($29 > 0.0)) {
    break label$1
   }
   label$2 : {
    if (!($16 * ($8 * $23 + $22 * -$12) + ($6 * ($12 * $20 + $23 * -$15) + $14 * ($15 * $22 + $20 * -$8)) > 0.0)) {
     $8 = -1.0;
     $12 = 0.0;
     break label$2;
    }
    $12 = 0.0;
    $8 = $10 - $16;
    $15 = $7 - $6;
    $13 = $11 - $14;
    $9 = $8 * $8 + ($15 * $15 + $13 * $13);
    label$4 : {
     if (!($9 > 0.0)) {
      $8 = -1.0;
      $17 = 0;
      break label$4;
     }
     $5 = 1.0;
     $9 = -($16 * $8 + ($6 * $15 + $14 * $13)) / $9;
     if ($9 >= 1.0) {
      $8 = $10 * $10 + ($7 * $7 + $11 * $11);
      $17 = 2;
      break label$4;
     }
     $5 = 0.0;
     if ($9 <= 0.0) {
      $8 = $16 * $16 + ($6 * $6 + $14 * $14);
      $12 = 1.0;
      $17 = 1;
      break label$4;
     }
     $5 = $16 + $8 * $9;
     $8 = $5 * $5;
     $5 = $6 + $15 * $9;
     $7 = $5 * $5;
     $5 = $14 + $13 * $9;
     $8 = $8 + ($7 + $5 * $5);
     $12 = 1.0 - $9;
     $5 = $9;
     $17 = 3;
    }
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    HEAPF64[$3 + 8 >> 3] = $5;
    HEAPF64[$3 >> 3] = $12;
    HEAP32[$4 >> 2] = $17;
    $10 = HEAPF64[$1 + 16 >> 3];
    $11 = HEAPF64[$1 + 8 >> 3];
    $7 = HEAPF64[$1 >> 3];
   }
   $16 = $21 - $16;
   $14 = $18 - $14;
   $15 = $19 - $6;
   label$8 : {
    if (!($10 * ($27 * $23 - $22 * $26) + ($7 * ($26 * $20 - $23 * $28) + $11 * ($28 * $22 - $20 * $27)) > 0.0)) {
     $9 = $8;
     break label$8;
    }
    $9 = -1.0;
    $21 = HEAPF64[$2 + 16 >> 3];
    $13 = $21 - $10;
    $24 = HEAPF64[$2 >> 3];
    $18 = $24 - $7;
    $25 = HEAPF64[$2 + 8 >> 3];
    $19 = $25 - $11;
    $6 = $13 * $13 + ($18 * $18 + $19 * $19);
    label$10 : {
     if (!($6 > 0.0)) {
      break label$10
     }
     $5 = 1.0;
     $6 = -($10 * $13 + ($7 * $18 + $11 * $19)) / $6;
     if ($6 >= 1.0) {
      $9 = $21 * $21 + ($24 * $24 + $25 * $25);
      $12 = 0.0;
      $17 = 2;
      break label$10;
     }
     $5 = 0.0;
     if ($6 <= 0.0) {
      $9 = $10 * $10 + ($7 * $7 + $11 * $11);
      $12 = 1.0;
      $17 = 1;
      break label$10;
     }
     $5 = $10 + $13 * $6;
     $9 = $5 * $5;
     $5 = $7 + $18 * $6;
     $7 = $5 * $5;
     $5 = $11 + $19 * $6;
     $9 = $9 + ($7 + $5 * $5);
     $12 = 1.0 - $6;
     $17 = 3;
     $5 = $6;
    }
    if (!($8 < 0.0 | $8 > $9)) {
     $9 = $8;
     break label$8;
    }
    HEAPF64[$3 + 16 >> 3] = $5;
    HEAPF64[$3 + 8 >> 3] = $12;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = $17 << 1;
   }
   $7 = HEAPF64[$2 + 16 >> 3];
   $11 = HEAPF64[$2 >> 3];
   $10 = HEAPF64[$2 + 8 >> 3];
   label$14 : {
    if (!($7 * ($15 * $23 - $22 * $14) + ($11 * ($14 * $20 - $23 * $16) + $10 * ($16 * $22 - $20 * $15)) > 0.0)) {
     break label$14
    }
    $6 = -1.0;
    $21 = HEAPF64[$0 + 16 >> 3];
    $13 = $21 - $7;
    $24 = HEAPF64[$0 >> 3];
    $18 = $24 - $11;
    $25 = HEAPF64[$0 + 8 >> 3];
    $19 = $25 - $10;
    $8 = $13 * $13 + ($18 * $18 + $19 * $19);
    label$15 : {
     if (!($8 > 0.0)) {
      break label$15
     }
     $5 = 1.0;
     $8 = -($7 * $13 + ($11 * $18 + $10 * $19)) / $8;
     if ($8 >= 1.0) {
      $6 = $21 * $21 + ($24 * $24 + $25 * $25);
      $12 = 0.0;
      $17 = 2;
      break label$15;
     }
     $5 = 0.0;
     if ($8 <= 0.0) {
      $6 = $7 * $7 + ($11 * $11 + $10 * $10);
      $12 = 1.0;
      $17 = 1;
      break label$15;
     }
     $5 = $7 + $13 * $8;
     $6 = $5 * $5;
     $5 = $11 + $18 * $8;
     $7 = $5 * $5;
     $5 = $10 + $19 * $8;
     $6 = $6 + ($7 + $5 * $5);
     $12 = 1.0 - $8;
     $17 = 3;
     $5 = $8;
    }
    if (!($6 < $9 ? 1 : $9 < 0.0)) {
     break label$14
    }
    HEAPF64[$3 + 16 >> 3] = $12;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAPF64[$3 >> 3] = $5;
    HEAP32[$4 >> 2] = $17 << 2 & 4 | $17 >>> 1;
    $9 = $6;
   }
   if (!($9 < 0.0)) {
    break label$1
   }
   $8 = (HEAPF64[$0 + 16 >> 3] * $20 + (HEAPF64[$0 >> 3] * $22 + $23 * HEAPF64[$0 + 8 >> 3])) / $29;
   $5 = $23 * $8;
   $6 = HEAPF64[$1 + 8 >> 3] - $5;
   $9 = $22 * $8;
   $12 = HEAPF64[$1 >> 3] - $9;
   $7 = $27 * $6 + $12 * -$26;
   $10 = $7 * $7;
   $8 = $20 * $8;
   $7 = HEAPF64[$1 + 16 >> 3] - $8;
   $6 = $26 * $7 + $6 * -$28;
   $11 = $6 * $6;
   $6 = $28 * $12 + $7 * -$27;
   $7 = Math_sqrt($10 + ($11 + $6 * $6));
   $6 = Math_sqrt($29);
   $12 = $7 / $6;
   HEAPF64[$3 >> 3] = $12;
   HEAP32[$4 >> 2] = 7;
   $7 = HEAPF64[$2 + 8 >> 3] - $5;
   $11 = HEAPF64[$2 >> 3] - $9;
   $10 = $15 * $7 + $11 * -$14;
   $13 = $10 * $10;
   $10 = HEAPF64[$2 + 16 >> 3] - $8;
   $7 = $14 * $10 + $7 * -$16;
   $14 = $7 * $7;
   $7 = $16 * $11 + $10 * -$15;
   $6 = Math_sqrt($13 + ($14 + $7 * $7)) / $6;
   HEAPF64[$3 + 8 >> 3] = $6;
   HEAPF64[$3 + 16 >> 3] = 1.0 - ($12 + $6);
   $9 = $8 * $8 + ($9 * $9 + $5 * $5);
  }
  return $9;
 }
 
 function gjkepa2_impl__GJK__EncloseOrigin_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4 = HEAP32[$0 + 672 >> 2];
        switch (HEAP32[$4 + 48 >> 2] - 1 | 0) {
        case 3:
         break label$3;
        case 2:
         break label$4;
        case 1:
         break label$5;
        case 0:
         break label$6;
        default:
         break label$2;
        };
       }
       $2 = HEAP32[$0 + 664 >> 2];
       $1 = $4 + 24 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       $1 = $2 - 1 | 0;
       HEAP32[$0 + 664 >> 2] = $1;
       HEAP32[$4 + 48 >> 2] = 2;
       $7 = HEAP32[(($1 << 2) + $0 | 0) + 648 >> 2];
       HEAP32[$4 + 4 >> 2] = $7;
       $3 = $6 + 8 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $2 = $6 + 16 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $1 = $6 + 24 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       HEAP32[$7 + 24 >> 2] = 0;
       HEAP32[$7 + 28 >> 2] = 0;
       $8 = HEAPF64[$2 >> 3];
       $5 = HEAPF64[$3 >> 3];
       $9 = 1.0 / Math_sqrt($8 * $8 + ($5 * $5 + 1.0));
       HEAPF64[$7 >> 3] = $9;
       HEAPF64[$7 + 16 >> 3] = $8 * $9;
       HEAPF64[$7 + 8 >> 3] = $5 * $9;
       HEAP32[$6 >> 2] = 0;
       HEAP32[$6 + 4 >> 2] = 1072693248;
       $4 = $6 + 32 | 0;
       gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($4, $0, $7);
       $10 = $4 + 24 | 0;
       $2 = $10;
       $1 = HEAP32[$2 + 4 >> 2];
       $3 = $7 + 56 | 0;
       HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$3 + 4 >> 2] = $1;
       $11 = $4 + 16 | 0;
       $2 = $11;
       $1 = HEAP32[$2 + 4 >> 2];
       $3 = $7 + 48 | 0;
       HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$3 + 4 >> 2] = $1;
       $4 = $4 + 8 | 0;
       $2 = $4;
       $1 = HEAP32[$2 + 4 >> 2];
       $3 = $7 + 40 | 0;
       HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$3 + 4 >> 2] = $1;
       $1 = HEAP32[$6 + 36 >> 2];
       HEAP32[$7 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
       HEAP32[$7 + 36 >> 2] = $1;
       label$7 : {
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$7
        }
        $2 = HEAP32[$0 + 672 >> 2];
        $1 = HEAP32[$2 + 48 >> 2] - 1 | 0;
        $3 = HEAP32[($1 << 2) + $2 >> 2];
        HEAP32[((HEAP32[$0 + 664 >> 2] << 2) + $0 | 0) + 648 >> 2] = $3;
        HEAP32[$2 + 48 >> 2] = $1;
        $2 = HEAP32[$0 + 672 >> 2];
        $1 = HEAP32[$2 + 48 >> 2];
        HEAP32[$2 + 48 >> 2] = $1 + 1;
        HEAP32[$2 + ($1 << 2) >> 2] = $3;
        $1 = ($2 + ($1 << 3) | 0) + 16 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$3 + 24 >> 2] = 0;
        HEAP32[$3 + 28 >> 2] = 0;
        HEAPF64[$3 + 16 >> 3] = $9 * -$8;
        HEAPF64[$3 + 8 >> 3] = $9 * -$5;
        HEAPF64[$3 >> 3] = -0.0 - $9;
        gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($6 + 32 | 0, $0, $3);
        $1 = HEAP32[$10 + 4 >> 2];
        $2 = $3 + 56 | 0;
        HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$11 + 4 >> 2];
        $2 = $3 + 48 | 0;
        HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$4 + 4 >> 2];
        $2 = $3 + 40 | 0;
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$6 + 36 >> 2];
        HEAP32[$3 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
        HEAP32[$3 + 36 >> 2] = $1;
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$7
        }
        $4 = HEAP32[$0 + 664 >> 2];
        HEAP32[$0 + 664 >> 2] = $4 + 1;
        $3 = HEAP32[$0 + 672 >> 2];
        $2 = HEAP32[$3 + 48 >> 2] - 1 | 0;
        HEAP32[$3 + 48 >> 2] = $2;
        $1 = (($4 << 2) + $0 | 0) + 648 | 0;
        HEAP32[$1 >> 2] = HEAP32[$3 + ($2 << 2) >> 2];
        $3 = HEAP32[$0 + 672 >> 2];
        $2 = HEAP32[$3 + 48 >> 2];
        HEAP32[$0 + 664 >> 2] = $4;
        HEAP32[$3 + 48 >> 2] = $2 + 1;
        $7 = HEAP32[$1 >> 2];
        HEAP32[$3 + ($2 << 2) >> 2] = $7;
        $1 = ($3 + ($2 << 3) | 0) + 16 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $2 = $6 + 16 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        $1 = $6 + 24 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $1 = $6 + 8 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 1072693248;
        HEAP32[$7 + 24 >> 2] = 0;
        HEAP32[$7 + 28 >> 2] = 0;
        HEAP32[$6 >> 2] = 0;
        HEAP32[$6 + 4 >> 2] = 0;
        $8 = HEAPF64[$2 >> 3];
        $5 = HEAPF64[$6 >> 3];
        $9 = 1.0 / Math_sqrt($8 * $8 + ($5 * $5 + 1.0));
        HEAPF64[$7 + 8 >> 3] = $9;
        HEAPF64[$7 + 16 >> 3] = $8 * $9;
        HEAPF64[$7 >> 3] = $5 * $9;
        $4 = $6 + 32 | 0;
        gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($4, $0, $7);
        $10 = $4 + 24 | 0;
        $2 = $10;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = $7 + 56 | 0;
        HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$3 + 4 >> 2] = $1;
        $11 = $4 + 16 | 0;
        $2 = $11;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = $7 + 48 | 0;
        HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$3 + 4 >> 2] = $1;
        $4 = $4 + 8 | 0;
        $2 = $4;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = $7 + 40 | 0;
        HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$3 + 4 >> 2] = $1;
        $1 = HEAP32[$6 + 36 >> 2];
        HEAP32[$7 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
        HEAP32[$7 + 36 >> 2] = $1;
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$7
        }
        $2 = HEAP32[$0 + 672 >> 2];
        $1 = HEAP32[$2 + 48 >> 2] - 1 | 0;
        $3 = HEAP32[($1 << 2) + $2 >> 2];
        HEAP32[((HEAP32[$0 + 664 >> 2] << 2) + $0 | 0) + 648 >> 2] = $3;
        HEAP32[$2 + 48 >> 2] = $1;
        $2 = HEAP32[$0 + 672 >> 2];
        $1 = HEAP32[$2 + 48 >> 2];
        HEAP32[$2 + 48 >> 2] = $1 + 1;
        HEAP32[$2 + ($1 << 2) >> 2] = $3;
        $1 = ($2 + ($1 << 3) | 0) + 16 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$3 + 24 >> 2] = 0;
        HEAP32[$3 + 28 >> 2] = 0;
        HEAPF64[$3 + 16 >> 3] = $9 * -$8;
        HEAPF64[$3 + 8 >> 3] = -0.0 - $9;
        HEAPF64[$3 >> 3] = $9 * -$5;
        gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($6 + 32 | 0, $0, $3);
        $1 = HEAP32[$10 + 4 >> 2];
        $2 = $3 + 56 | 0;
        HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$11 + 4 >> 2];
        $2 = $3 + 48 | 0;
        HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$4 + 4 >> 2];
        $2 = $3 + 40 | 0;
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$6 + 36 >> 2];
        HEAP32[$3 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
        HEAP32[$3 + 36 >> 2] = $1;
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$7
        }
        $4 = HEAP32[$0 + 664 >> 2];
        HEAP32[$0 + 664 >> 2] = $4 + 1;
        $3 = HEAP32[$0 + 672 >> 2];
        $2 = HEAP32[$3 + 48 >> 2] - 1 | 0;
        HEAP32[$3 + 48 >> 2] = $2;
        $1 = (($4 << 2) + $0 | 0) + 648 | 0;
        HEAP32[$1 >> 2] = HEAP32[$3 + ($2 << 2) >> 2];
        $3 = HEAP32[$0 + 672 >> 2];
        $2 = HEAP32[$3 + 48 >> 2];
        HEAP32[$0 + 664 >> 2] = $4;
        HEAP32[$3 + 48 >> 2] = $2 + 1;
        $7 = HEAP32[$1 >> 2];
        HEAP32[$3 + ($2 << 2) >> 2] = $7;
        $1 = ($3 + ($2 << 3) | 0) + 16 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $2 = $6 + 8 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        $1 = $6 + 24 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $1 = $6 + 16 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 1072693248;
        HEAP32[$7 + 24 >> 2] = 0;
        HEAP32[$7 + 28 >> 2] = 0;
        HEAP32[$6 >> 2] = 0;
        HEAP32[$6 + 4 >> 2] = 0;
        $8 = HEAPF64[$6 >> 3];
        $5 = HEAPF64[$2 >> 3];
        $9 = 1.0 / Math_sqrt($8 * $8 + $5 * $5 + 1.0);
        HEAPF64[$7 + 16 >> 3] = $9;
        HEAPF64[$7 + 8 >> 3] = $5 * $9;
        HEAPF64[$7 >> 3] = $8 * $9;
        $4 = $6 + 32 | 0;
        gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($4, $0, $7);
        $10 = $4 + 24 | 0;
        $2 = $10;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = $7 + 56 | 0;
        HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$3 + 4 >> 2] = $1;
        $11 = $4 + 16 | 0;
        $2 = $11;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = $7 + 48 | 0;
        HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$3 + 4 >> 2] = $1;
        $4 = $4 + 8 | 0;
        $2 = $4;
        $1 = HEAP32[$2 + 4 >> 2];
        $3 = $7 + 40 | 0;
        HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$3 + 4 >> 2] = $1;
        $1 = HEAP32[$6 + 36 >> 2];
        HEAP32[$7 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
        HEAP32[$7 + 36 >> 2] = $1;
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$7
        }
        $2 = HEAP32[$0 + 672 >> 2];
        $1 = HEAP32[$2 + 48 >> 2] - 1 | 0;
        $3 = HEAP32[($1 << 2) + $2 >> 2];
        HEAP32[((HEAP32[$0 + 664 >> 2] << 2) + $0 | 0) + 648 >> 2] = $3;
        HEAP32[$2 + 48 >> 2] = $1;
        $2 = HEAP32[$0 + 672 >> 2];
        $1 = HEAP32[$2 + 48 >> 2];
        HEAP32[$2 + 48 >> 2] = $1 + 1;
        HEAP32[$2 + ($1 << 2) >> 2] = $3;
        $1 = ($2 + ($1 << 3) | 0) + 16 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$3 + 24 >> 2] = 0;
        HEAP32[$3 + 28 >> 2] = 0;
        HEAPF64[$3 + 16 >> 3] = -0.0 - $9;
        HEAPF64[$3 + 8 >> 3] = $9 * -$5;
        HEAPF64[$3 >> 3] = $9 * -$8;
        gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($6 + 32 | 0, $0, $3);
        $1 = HEAP32[$10 + 4 >> 2];
        $2 = $3 + 56 | 0;
        HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$11 + 4 >> 2];
        $2 = $3 + 48 | 0;
        HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$4 + 4 >> 2];
        $2 = $3 + 40 | 0;
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$2 + 4 >> 2] = $1;
        $1 = HEAP32[$6 + 36 >> 2];
        HEAP32[$3 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
        HEAP32[$3 + 36 >> 2] = $1;
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$7
        }
        $1 = HEAP32[$0 + 664 >> 2];
        HEAP32[$0 + 664 >> 2] = $1 + 1;
        $3 = HEAP32[$0 + 672 >> 2];
        $2 = HEAP32[$3 + 48 >> 2] - 1 | 0;
        HEAP32[$3 + 48 >> 2] = $2;
        HEAP32[(($1 << 2) + $0 | 0) + 648 >> 2] = HEAP32[$3 + ($2 << 2) >> 2];
        break label$2;
       }
       $12 = 1;
       break label$1;
      }
      $2 = HEAP32[$4 + 4 >> 2];
      $1 = HEAP32[$4 >> 2];
      $19 = HEAPF64[$2 + 40 >> 3] - HEAPF64[$1 + 40 >> 3];
      $18 = -$19;
      $20 = HEAPF64[$2 + 48 >> 3] - HEAPF64[$1 + 48 >> 3];
      $15 = -$20;
      $16 = HEAPF64[$2 + 32 >> 3] - HEAPF64[$1 + 32 >> 3];
      $13 = -$16;
      $7 = $6 + 24 | 0;
      $21 = $6 + 16 | 0;
      $22 = $6 + 8 | 0;
      while (1) {
       label$8 : {
        HEAP32[$7 >> 2] = 0;
        HEAP32[$7 + 4 >> 2] = 0;
        HEAP32[$21 >> 2] = 0;
        HEAP32[$21 + 4 >> 2] = 0;
        HEAP32[$22 >> 2] = 0;
        HEAP32[$22 + 4 >> 2] = 0;
        HEAP32[$6 >> 2] = 0;
        HEAP32[$6 + 4 >> 2] = 0;
        $1 = $6 + $12 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 1072693248;
        $9 = HEAPF64[$22 >> 3];
        $8 = HEAPF64[$6 >> 3];
        $17 = $16 * $9 + $8 * $18;
        $5 = HEAPF64[$21 >> 3];
        $9 = $19 * $5 + $9 * $15;
        $8 = $20 * $8 + $5 * $13;
        $5 = $17 * $17 + ($9 * $9 + $8 * $8);
        if ($5 > 0.0) {
         $2 = HEAP32[$0 + 664 >> 2] - 1 | 0;
         HEAP32[$0 + 664 >> 2] = $2;
         $4 = HEAP32[$0 + 672 >> 2];
         $3 = HEAP32[$4 + 48 >> 2];
         HEAP32[$4 + 48 >> 2] = $3 + 1;
         $1 = ($4 + ($3 << 3) | 0) + 16 | 0;
         HEAP32[$1 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         $14 = HEAP32[(($2 << 2) + $0 | 0) + 648 >> 2];
         HEAP32[$4 + ($3 << 2) >> 2] = $14;
         HEAP32[$14 + 24 >> 2] = 0;
         HEAP32[$14 + 28 >> 2] = 0;
         $5 = 1.0 / Math_sqrt($5);
         HEAPF64[$14 + 16 >> 3] = $17 * $5;
         HEAPF64[$14 + 8 >> 3] = $8 * $5;
         HEAPF64[$14 >> 3] = $9 * $5;
         $4 = $6 + 32 | 0;
         gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($4, $0, $14);
         $10 = $4 + 24 | 0;
         $2 = $10;
         $1 = HEAP32[$2 + 4 >> 2];
         $3 = $14 + 56 | 0;
         HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$3 + 4 >> 2] = $1;
         $11 = $4 + 16 | 0;
         $2 = $11;
         $1 = HEAP32[$2 + 4 >> 2];
         $3 = $14 + 48 | 0;
         HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$3 + 4 >> 2] = $1;
         $4 = $4 + 8 | 0;
         $2 = $4;
         $1 = HEAP32[$2 + 4 >> 2];
         $3 = $14 + 40 | 0;
         HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$3 + 4 >> 2] = $1;
         $1 = HEAP32[$6 + 36 >> 2];
         HEAP32[$14 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
         HEAP32[$14 + 36 >> 2] = $1;
         if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
          break label$8
         }
         $2 = HEAP32[$0 + 672 >> 2];
         $1 = HEAP32[$2 + 48 >> 2] - 1 | 0;
         $3 = HEAP32[($1 << 2) + $2 >> 2];
         HEAP32[((HEAP32[$0 + 664 >> 2] << 2) + $0 | 0) + 648 >> 2] = $3;
         HEAP32[$2 + 48 >> 2] = $1;
         $2 = HEAP32[$0 + 672 >> 2];
         $1 = HEAP32[$2 + 48 >> 2];
         HEAP32[$2 + 48 >> 2] = $1 + 1;
         HEAP32[$2 + ($1 << 2) >> 2] = $3;
         $1 = ($2 + ($1 << 3) | 0) + 16 | 0;
         HEAP32[$1 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         HEAP32[$3 + 24 >> 2] = 0;
         HEAP32[$3 + 28 >> 2] = 0;
         HEAPF64[$3 + 16 >> 3] = $5 * -$17;
         HEAPF64[$3 + 8 >> 3] = $5 * -$8;
         HEAPF64[$3 >> 3] = $5 * -$9;
         gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($6 + 32 | 0, $0, $3);
         $1 = HEAP32[$10 + 4 >> 2];
         $2 = $3 + 56 | 0;
         HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
         HEAP32[$2 + 4 >> 2] = $1;
         $1 = HEAP32[$11 + 4 >> 2];
         $2 = $3 + 48 | 0;
         HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$2 + 4 >> 2] = $1;
         $1 = HEAP32[$4 + 4 >> 2];
         $2 = $3 + 40 | 0;
         HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$2 + 4 >> 2] = $1;
         $1 = HEAP32[$6 + 36 >> 2];
         HEAP32[$3 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
         HEAP32[$3 + 36 >> 2] = $1;
         if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
          break label$8
         }
         $1 = HEAP32[$0 + 664 >> 2];
         HEAP32[$0 + 664 >> 2] = $1 + 1;
         $3 = HEAP32[$0 + 672 >> 2];
         $2 = HEAP32[$3 + 48 >> 2] - 1 | 0;
         HEAP32[$3 + 48 >> 2] = $2;
         HEAP32[(($1 << 2) + $0 | 0) + 648 >> 2] = HEAP32[$3 + ($2 << 2) >> 2];
        }
        $12 = $12 + 8 | 0;
        if (($12 | 0) != 24) {
         continue
        }
        break label$2;
       }
       break;
      };
      $12 = 1;
      break label$1;
     }
     $3 = HEAP32[$4 + 4 >> 2];
     $2 = HEAP32[$4 >> 2];
     $8 = HEAPF64[$2 + 32 >> 3];
     $16 = HEAPF64[$3 + 32 >> 3] - $8;
     $1 = HEAP32[$4 + 8 >> 2];
     $5 = HEAPF64[$2 + 40 >> 3];
     $13 = HEAPF64[$1 + 40 >> 3] - $5;
     $9 = HEAPF64[$1 + 32 >> 3] - $8;
     $5 = HEAPF64[$3 + 40 >> 3] - $5;
     $15 = $16 * $13 - $9 * $5;
     $18 = $5;
     $5 = HEAPF64[$2 + 48 >> 3];
     $8 = HEAPF64[$1 + 48 >> 3] - $5;
     $5 = HEAPF64[$3 + 48 >> 3] - $5;
     $13 = $18 * $8 - $13 * $5;
     $8 = $5 * $9 - $8 * $16;
     $5 = $15 * $15 + ($13 * $13 + $8 * $8);
     if (!($5 > 0.0)) {
      break label$2
     }
     HEAP32[$4 + 48 >> 2] = 4;
     $1 = $4 + 40 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = HEAP32[$0 + 664 >> 2] - 1 | 0;
     HEAP32[$0 + 664 >> 2] = $1;
     $7 = HEAP32[(($1 << 2) + $0 | 0) + 648 >> 2];
     HEAP32[$4 + 12 >> 2] = $7;
     HEAP32[$7 + 24 >> 2] = 0;
     HEAP32[$7 + 28 >> 2] = 0;
     $5 = 1.0 / Math_sqrt($5);
     HEAPF64[$7 + 16 >> 3] = $15 * $5;
     HEAPF64[$7 + 8 >> 3] = $8 * $5;
     HEAPF64[$7 >> 3] = $13 * $5;
     $4 = $6 + 32 | 0;
     gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($4, $0, $7);
     $10 = $6 + 56 | 0;
     $2 = $10;
     $1 = HEAP32[$2 + 4 >> 2];
     $3 = $7 + 56 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $1;
     $11 = $4 + 16 | 0;
     $2 = $11;
     $1 = HEAP32[$2 + 4 >> 2];
     $3 = $7 + 48 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $1;
     $4 = $6 + 40 | 0;
     $2 = $4;
     $1 = HEAP32[$2 + 4 >> 2];
     $3 = $7 + 40 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $1;
     $1 = HEAP32[$6 + 36 >> 2];
     HEAP32[$7 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
     HEAP32[$7 + 36 >> 2] = $1;
     $12 = 1;
     if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
      break label$1
     }
     $2 = HEAP32[$0 + 672 >> 2];
     $1 = HEAP32[$2 + 48 >> 2] - 1 | 0;
     $3 = HEAP32[($1 << 2) + $2 >> 2];
     HEAP32[((HEAP32[$0 + 664 >> 2] << 2) + $0 | 0) + 648 >> 2] = $3;
     HEAP32[$2 + 48 >> 2] = $1;
     $2 = HEAP32[$0 + 672 >> 2];
     $1 = HEAP32[$2 + 48 >> 2];
     HEAP32[$2 + 48 >> 2] = $1 + 1;
     HEAP32[$2 + ($1 << 2) >> 2] = $3;
     $1 = ($2 + ($1 << 3) | 0) + 16 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 28 >> 2] = 0;
     HEAPF64[$3 + 16 >> 3] = $5 * -$15;
     HEAPF64[$3 + 8 >> 3] = $5 * -$8;
     HEAPF64[$3 >> 3] = $5 * -$13;
     gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($6 + 32 | 0, $0, $3);
     $1 = HEAP32[$10 + 4 >> 2];
     $2 = $3 + 56 | 0;
     HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$2 + 4 >> 2] = $1;
     $1 = HEAP32[$11 + 4 >> 2];
     $2 = $3 + 48 | 0;
     HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$2 + 4 >> 2] = $1;
     $1 = HEAP32[$4 + 4 >> 2];
     $2 = $3 + 40 | 0;
     HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 4 >> 2] = $1;
     $1 = HEAP32[$6 + 36 >> 2];
     HEAP32[$3 + 32 >> 2] = HEAP32[$6 + 32 >> 2];
     HEAP32[$3 + 36 >> 2] = $1;
     $12 = 1;
     if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
      break label$1
     }
     $1 = HEAP32[$0 + 664 >> 2];
     HEAP32[$0 + 664 >> 2] = $1 + 1;
     $3 = HEAP32[$0 + 672 >> 2];
     $2 = HEAP32[$3 + 48 >> 2] - 1 | 0;
     HEAP32[$3 + 48 >> 2] = $2;
     HEAP32[(($1 << 2) + $0 | 0) + 648 >> 2] = HEAP32[$3 + ($2 << 2) >> 2];
     break label$2;
    }
    $3 = HEAP32[$4 >> 2];
    $2 = HEAP32[$4 + 12 >> 2];
    $8 = HEAPF64[$2 + 32 >> 3];
    $19 = HEAPF64[$3 + 32 >> 3] - $8;
    $1 = HEAP32[$4 + 4 >> 2];
    $17 = HEAPF64[$2 + 40 >> 3];
    $18 = HEAPF64[$1 + 40 >> 3] - $17;
    $0 = HEAP32[$4 + 8 >> 2];
    $5 = HEAPF64[$2 + 48 >> 3];
    $20 = HEAPF64[$0 + 48 >> 3] - $5;
    $15 = HEAPF64[$3 + 40 >> 3] - $17;
    $16 = HEAPF64[$1 + 48 >> 3] - $5;
    $13 = HEAPF64[$0 + 32 >> 3] - $8;
    $9 = HEAPF64[$3 + 48 >> 3] - $5;
    $8 = HEAPF64[$1 + 32 >> 3] - $8;
    $5 = HEAPF64[$0 + 40 >> 3] - $17;
    $5 = $19 * $18 * $20 + ($15 * $16 * $13 + $9 * $8 * $5 - $16 * $19 * $5 - $8 * $15 * $20) - $18 * $9 * $13;
    $12 = 1;
    if ($5 > 0.0 | $5 < 0.0) {
     break label$1
    }
   }
   $12 = 0;
  }
  __stack_pointer = $6 - -64 | 0;
  return $12;
 }
 
 function gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0;
  $5 = HEAP32[$0 + 28788 >> 2];
  if ($5) {
   $6 = HEAP32[$5 + 68 >> 2];
   if ($6) {
    HEAP32[$6 + 64 >> 2] = HEAP32[$5 + 64 >> 2]
   }
   $6 = HEAP32[$5 + 64 >> 2];
   if ($6) {
    HEAP32[$6 + 68 >> 2] = HEAP32[$5 + 68 >> 2]
   }
   if (($5 | 0) == HEAP32[$0 + 28788 >> 2]) {
    HEAP32[$0 + 28788 >> 2] = HEAP32[$5 + 68 >> 2]
   }
   HEAP32[$5 + 64 >> 2] = 0;
   HEAP32[$5 + 68 >> 2] = HEAP32[$0 + 28780 >> 2];
   $6 = $0 + 28792 | 0;
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] - 1;
   $6 = HEAP32[$0 + 28780 >> 2];
   if ($6) {
    HEAP32[$6 + 64 >> 2] = $5
   }
   HEAP32[$0 + 28780 >> 2] = $5;
   $6 = $0 + 28784 | 0;
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
   HEAP8[$5 + 75 | 0] = 0;
   HEAP32[$5 + 48 >> 2] = $3;
   HEAP32[$5 + 44 >> 2] = $2;
   HEAP32[$5 + 40 >> 2] = $1;
   $10 = HEAPF64[$2 + 40 >> 3];
   $11 = HEAPF64[$3 + 48 >> 3];
   $7 = HEAPF64[$1 + 40 >> 3];
   $12 = HEAPF64[$3 + 40 >> 3];
   $13 = HEAPF64[$2 + 48 >> 3];
   $8 = HEAPF64[$1 + 48 >> 3];
   $15 = HEAPF64[$3 + 32 >> 3];
   $16 = HEAPF64[$2 + 32 >> 3];
   $9 = HEAPF64[$1 + 32 >> 3];
   HEAP32[$5 + 24 >> 2] = 0;
   HEAP32[$5 + 28 >> 2] = 0;
   $10 = $10 - $7;
   $11 = $11 - $8;
   $12 = $12 - $7;
   $8 = $13 - $8;
   $7 = $10 * $11 - $12 * $8;
   HEAPF64[$5 >> 3] = $7;
   $13 = $15 - $9;
   $9 = $16 - $9;
   $8 = $8 * $13 - $11 * $9;
   HEAPF64[$5 + 8 >> 3] = $8;
   $9 = $9 * $12 - $13 * $10;
   HEAPF64[$5 + 16 >> 3] = $9;
   $14 = 2;
   label$6 : {
    $7 = Math_sqrt($9 * $9 + ($7 * $7 + $8 * $8));
    if (!($7 > 1.0e-12)) {
     break label$6
    }
    $6 = $5 + 32 | 0;
    label$7 : {
     if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20double__29($5, $1, $2, $6)) {
      break label$7
     }
     if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20double__29($5, $2, $3, $6)) {
      break label$7
     }
     if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20double__29($5, $3, $1, $6)) {
      break label$7
     }
     HEAPF64[$5 + 32 >> 3] = (HEAPF64[$1 + 48 >> 3] * HEAPF64[$5 + 16 >> 3] + (HEAPF64[$1 + 32 >> 3] * HEAPF64[$5 >> 3] + HEAPF64[$1 + 40 >> 3] * HEAPF64[$5 + 8 >> 3])) / $7;
    }
    $7 = 1.0 / $7;
    HEAPF64[$5 >> 3] = $7 * HEAPF64[$5 >> 3];
    HEAPF64[$5 + 8 >> 3] = $7 * HEAPF64[$5 + 8 >> 3];
    HEAPF64[$5 + 16 >> 3] = $7 * HEAPF64[$5 + 16 >> 3];
    if ($4) {
     return $5
    }
    $14 = 3;
    if (!(HEAPF64[$6 >> 3] >= -1.0e-14)) {
     break label$6
    }
    return $5;
   }
   HEAP32[$0 >> 2] = $14;
   $1 = HEAP32[$5 + 68 >> 2];
   if ($1) {
    HEAP32[$1 + 64 >> 2] = HEAP32[$5 + 64 >> 2]
   }
   $1 = HEAP32[$5 + 64 >> 2];
   if ($1) {
    HEAP32[$1 + 68 >> 2] = HEAP32[$5 + 68 >> 2]
   }
   if (($5 | 0) == HEAP32[$0 + 28780 >> 2]) {
    HEAP32[$0 + 28780 >> 2] = HEAP32[$5 + 68 >> 2]
   }
   HEAP32[$5 + 64 >> 2] = 0;
   HEAP32[$5 + 68 >> 2] = HEAP32[$0 + 28788 >> 2];
   HEAP32[$0 + 28784 >> 2] = HEAP32[$0 + 28784 >> 2] - 1;
   $1 = HEAP32[$0 + 28788 >> 2];
   if ($1) {
    HEAP32[$1 + 64 >> 2] = $5
   }
   HEAP32[$0 + 28788 >> 2] = $5;
   HEAP32[$0 + 28792 >> 2] = HEAP32[$0 + 28792 >> 2] + 1;
   return 0;
  }
  HEAP32[$0 >> 2] = 5;
  return 0;
 }
 
 function gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   if (HEAPU8[$3 + 75 | 0] == ($1 | 0)) {
    break label$1
   }
   $6 = $4 << 2;
   $7 = HEAP32[$6 + 14904 >> 2];
   if (HEAPF64[$3 + 16 >> 3] * HEAPF64[$2 + 48 >> 3] + (HEAPF64[$3 >> 3] * HEAPF64[$2 + 32 >> 3] + HEAPF64[$3 + 8 >> 3] * HEAPF64[$2 + 40 >> 3]) - HEAPF64[$3 + 32 >> 3] < -1.0e-14) {
    $1 = $0;
    $0 = $3 + 40 | 0;
    $0 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($1, HEAP32[$0 + ($7 << 2) >> 2], HEAP32[$0 + $6 >> 2], $2, 0);
    if (!$0) {
     break label$1
    }
    HEAP32[$0 + 52 >> 2] = $3;
    HEAP8[$0 + 72 | 0] = $4;
    HEAP8[($3 + $4 | 0) + 72 | 0] = 0;
    HEAP32[(($4 << 2) + $3 | 0) + 52 >> 2] = $0;
    $1 = HEAP32[$5 >> 2];
    label$3 : {
     if ($1) {
      HEAP32[$1 + 56 >> 2] = $0;
      HEAP8[$1 + 73 | 0] = 2;
      HEAP32[$0 + 60 >> 2] = $1;
      HEAP8[$0 + 74 | 0] = 1;
      break label$3;
     }
     HEAP32[$5 + 4 >> 2] = $0;
    }
    HEAP32[$5 >> 2] = $0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
    return 1;
   }
   HEAP8[$3 + 75 | 0] = $1;
   if (!gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, HEAP32[(($7 << 2) + $3 | 0) + 52 >> 2], HEAPU8[($3 + $7 | 0) + 72 | 0], $5)) {
    break label$1
   }
   $4 = $1;
   $1 = HEAP32[$6 + 14916 >> 2];
   if (!gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $4, $2, HEAP32[(($1 << 2) + $3 | 0) + 52 >> 2], HEAPU8[($1 + $3 | 0) + 72 | 0], $5)) {
    break label$1
   }
   $1 = HEAP32[$3 + 68 >> 2];
   if ($1) {
    HEAP32[$1 + 64 >> 2] = HEAP32[$3 + 64 >> 2]
   }
   $1 = HEAP32[$3 + 64 >> 2];
   if ($1) {
    HEAP32[$1 + 68 >> 2] = HEAP32[$3 + 68 >> 2]
   }
   if (($3 | 0) == HEAP32[$0 + 28780 >> 2]) {
    HEAP32[$0 + 28780 >> 2] = HEAP32[$3 + 68 >> 2]
   }
   HEAP32[$3 + 64 >> 2] = 0;
   HEAP32[$3 + 68 >> 2] = HEAP32[$0 + 28788 >> 2];
   $1 = $0 + 28784 | 0;
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] - 1;
   $1 = HEAP32[$0 + 28788 >> 2];
   if ($1) {
    HEAP32[$1 + 64 >> 2] = $3
   }
   HEAP32[$0 + 28788 >> 2] = $3;
   $8 = 1;
   $0 = $0 + 28792 | 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  }
  return $8;
 }
 
 function gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20double__29($0, $1, $2, $3) {
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0;
  $8 = HEAPF64[$2 + 48 >> 3];
  $4 = HEAPF64[$1 + 48 >> 3];
  $11 = $8 - $4;
  $9 = HEAPF64[$2 + 32 >> 3];
  $6 = HEAPF64[$1 + 32 >> 3];
  $12 = $9 - $6;
  $5 = HEAPF64[$0 + 8 >> 3];
  $14 = HEAPF64[$0 >> 3];
  $10 = HEAPF64[$2 + 40 >> 3];
  $7 = HEAPF64[$1 + 40 >> 3];
  $13 = $10 - $7;
  $15 = HEAPF64[$0 + 16 >> 3];
  $0 = $4 * ($12 * $5 - $14 * $13) + ($6 * ($13 * $15 - $5 * $11) + $7 * ($11 * $14 - $15 * $12)) < 0.0;
  if ($0) {
   $5 = $4 * $4 + ($6 * $6 + $7 * $7);
   label$2 : {
    if ($4 * $11 + ($6 * $12 + $7 * $13) > 0.0) {
     break label$2
    }
    $5 = $8 * $8 + ($9 * $9 + $10 * $10);
    if ($8 * $11 + ($9 * $12 + $10 * $13) < 0.0) {
     break label$2
    }
    $5 = ($4 * $4 + ($6 * $6 + $7 * $7)) * ($8 * $8 + ($9 * $9 + $10 * $10));
    $4 = $4 * $8 + ($6 * $9 + $10 * $7);
    $4 = ($5 - $4 * $4) / ($11 * $11 + ($12 * $12 + $13 * $13));
    $5 = $4 > 0.0 ? $4 : 0.0;
   }
   HEAPF64[$3 >> 3] = Math_sqrt($5);
  }
  return $0;
 }
 
 function btGjkEpaPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0;
  $9 = __stack_pointer - 144 | 0;
  __stack_pointer = $9;
  HEAP32[$9 + 136 >> 2] = 0;
  HEAP32[$9 + 140 >> 2] = 0;
  HEAPF64[$9 + 112 >> 3] = HEAPF64[$5 + 96 >> 3] - HEAPF64[$4 + 96 >> 3];
  HEAPF64[$9 + 128 >> 3] = HEAPF64[$5 + 112 >> 3] - HEAPF64[$4 + 112 >> 3];
  HEAPF64[$9 + 120 >> 3] = HEAPF64[$5 + 104 >> 3] - HEAPF64[$4 + 104 >> 3];
  $13 = __stack_pointer - 29760 | 0;
  __stack_pointer = $13;
  $1 = $13 + 29520 | 0;
  gjkepa2_impl__Initialize_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btGjkEpaSolver2__sResults__2c_20gjkepa2_impl__MinkowskiDiff__2c_20bool_29($2, $4, $3, $5, $9, $1, 1);
  $0 = $13 + 29088 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $13 + 29096 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $13 + 29104 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$13 + 29080 >> 2] = 0;
  HEAP32[$13 + 29084 >> 2] = 0;
  HEAP32[$13 + 29504 >> 2] = 0;
  HEAP32[$13 + 29508 >> 2] = 0;
  HEAP32[$13 + 29516 >> 2] = 2;
  HEAP32[$13 + 29112 >> 2] = 0;
  HEAP32[$13 + 29116 >> 2] = 0;
  HEAP32[$13 + 64 >> 2] = 0;
  HEAP32[$13 + 68 >> 2] = 0;
  $12 = $9 + 112 | 0;
  HEAPF64[$13 + 56 >> 3] = -HEAPF64[$12 + 16 >> 3];
  HEAPF64[$13 + 48 >> 3] = -HEAPF64[$12 + 8 >> 3];
  HEAPF64[$13 + 40 >> 3] = -HEAPF64[$12 >> 3];
  $0 = 0;
  label$10 : {
   label$2 : {
    label$3 : {
     switch (gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($13 + 28840 | 0, $1, $13 + 40 | 0) - 1 | 0) {
     case 0:
      $0 = $13 + 112 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $13 + 120 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $13 + 128 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $13 + 136 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$13 + 28816 >> 2] = 0;
      HEAP32[$13 + 40 >> 2] = 9;
      HEAP32[$13 + 28820 >> 2] = 0;
      HEAP32[$13 + 28824 >> 2] = 0;
      HEAP32[$13 + 104 >> 2] = 0;
      HEAP32[$13 + 108 >> 2] = 0;
      $11 = 20480;
      $1 = 0;
      while (1) {
       $0 = ($13 + 40 | 0) + $11 | 0;
       HEAP32[$0 + 8284 >> 2] = $1;
       $16 = $0 + 8280 | 0;
       HEAP32[$16 >> 2] = 0;
       $21 = $0 + 8216 | 0;
       if ($1) {
        HEAP32[$1 + 64 >> 2] = $21
       }
       HEAP32[$13 + 28828 >> 2] = $21;
       $1 = $0 + 8136 | 0;
       HEAP32[$16 >> 2] = $1;
       HEAP32[$0 + 8204 >> 2] = $21;
       HEAP32[$0 + 8200 >> 2] = 0;
       HEAP32[$13 + 28828 >> 2] = $1;
       $1 = ($13 + Math_imul($14, -80) | 0) + 28656 | 0;
       $14 = $14 + 2 | 0;
       $11 = $11 - 160 | 0;
       if ($11) {
        continue
       }
       break;
      };
      HEAP32[$13 + 28832 >> 2] = 256;
      HEAP32[$13 + 32 >> 2] = 0;
      HEAP32[$13 + 36 >> 2] = 0;
      HEAPF64[$13 + 24 >> 3] = -HEAPF64[$12 + 16 >> 3];
      HEAPF64[$13 + 16 >> 3] = -HEAPF64[$12 + 8 >> 3];
      HEAPF64[$13 + 8 >> 3] = -HEAPF64[$12 >> 3];
      $12 = $13 + 40 | 0;
      $32 = $13 + 8 | 0;
      $21 = __stack_pointer - 48 | 0;
      __stack_pointer = $21;
      label$101 : {
       label$21 : {
        $34 = $13 + 28840 | 0;
        $14 = HEAP32[$34 + 672 >> 2];
        if (HEAPU32[$14 + 48 >> 2] < 2) {
         break label$21
        }
        if (!gjkepa2_impl__GJK__EncloseOrigin_28_29($34)) {
         break label$21
        }
        $0 = HEAP32[$12 + 28780 >> 2];
        if ($0) {
         $11 = HEAP32[$12 + 28792 >> 2];
         $1 = HEAP32[$12 + 28784 >> 2];
         while (1) {
          $16 = HEAP32[$0 + 68 >> 2];
          if ($16) {
           HEAP32[$16 + 64 >> 2] = HEAP32[$0 + 64 >> 2]
          }
          $16 = HEAP32[$0 + 64 >> 2];
          if ($16) {
           HEAP32[$16 + 68 >> 2] = HEAP32[$0 + 68 >> 2]
          }
          if (($0 | 0) == HEAP32[$12 + 28780 >> 2]) {
           HEAP32[$12 + 28780 >> 2] = HEAP32[$0 + 68 >> 2]
          }
          HEAP32[$0 + 64 >> 2] = 0;
          HEAP32[$0 + 68 >> 2] = HEAP32[$12 + 28788 >> 2];
          $16 = HEAP32[$12 + 28788 >> 2];
          if ($16) {
           HEAP32[$16 + 64 >> 2] = $0
          }
          HEAP32[$12 + 28788 >> 2] = $0;
          $1 = $1 - 1 | 0;
          $11 = $11 + 1 | 0;
          $0 = HEAP32[$12 + 28780 >> 2];
          if ($0) {
           continue
          }
          break;
         };
         HEAP32[$12 + 28792 >> 2] = $11;
         HEAP32[$12 + 28784 >> 2] = $1;
        }
        HEAP32[$12 + 28776 >> 2] = 0;
        HEAP32[$12 >> 2] = 0;
        $11 = HEAP32[$14 >> 2];
        $1 = HEAP32[$14 + 12 >> 2];
        $10 = HEAPF64[$1 + 32 >> 3];
        $22 = HEAPF64[$11 + 32 >> 3] - $10;
        $0 = HEAP32[$14 + 4 >> 2];
        $15 = HEAPF64[$1 + 40 >> 3];
        $19 = HEAPF64[$0 + 40 >> 3] - $15;
        $16 = HEAP32[$14 + 8 >> 2];
        $18 = HEAPF64[$1 + 48 >> 3];
        $17 = HEAPF64[$16 + 48 >> 3] - $18;
        $20 = HEAPF64[$11 + 40 >> 3] - $15;
        $23 = HEAPF64[$0 + 48 >> 3] - $18;
        $26 = HEAPF64[$16 + 32 >> 3] - $10;
        $18 = HEAPF64[$11 + 48 >> 3] - $18;
        $10 = HEAPF64[$0 + 32 >> 3] - $10;
        $15 = HEAPF64[$16 + 40 >> 3] - $15;
        label$9 : {
         if (!($22 * $19 * $17 + ($20 * $23 * $26 + $18 * $10 * $15 - $23 * $22 * $15 - $10 * $20 * $17) - $19 * $18 * $26 < 0.0)) {
          $1 = $0;
          $0 = $11;
          break label$9;
         }
         HEAP32[$14 + 4 >> 2] = $11;
         HEAP32[$14 >> 2] = $0;
         $10 = HEAPF64[$14 + 16 >> 3];
         $1 = $14 + 24 | 0;
         HEAPF64[$14 + 16 >> 3] = HEAPF64[$1 >> 3];
         HEAPF64[$1 >> 3] = $10;
         $1 = $11;
        }
        $1 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($12, $0, $1, $16, 1);
        $16 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($12, HEAP32[$14 + 4 >> 2], HEAP32[$14 >> 2], HEAP32[$14 + 12 >> 2], 1);
        $29 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($12, HEAP32[$14 + 8 >> 2], HEAP32[$14 + 4 >> 2], HEAP32[$14 + 12 >> 2], 1);
        $28 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($12, HEAP32[$14 >> 2], HEAP32[$14 + 8 >> 2], HEAP32[$14 + 12 >> 2], 1);
        if (HEAP32[$12 + 28784 >> 2] != 4) {
         break label$21
        }
        $11 = HEAP32[$12 + 28780 >> 2];
        $0 = HEAP32[$11 + 68 >> 2];
        if ($0) {
         $10 = HEAPF64[$11 + 32 >> 3];
         $10 = $10 * $10;
         while (1) {
          $15 = HEAPF64[$0 + 32 >> 3];
          $15 = $15 * $15;
          $14 = $15 < $10;
          $11 = $14 ? $0 : $11;
          $10 = $14 ? $15 : $10;
          $0 = HEAP32[$0 + 68 >> 2];
          if ($0) {
           continue
          }
          break;
         };
        }
        $14 = HEAP32[$11 + 48 >> 2];
        $32 = HEAP32[$11 + 44 >> 2];
        $35 = HEAP32[$11 + 40 >> 2];
        $10 = HEAPF64[$11 + 32 >> 3];
        $23 = HEAPF64[$11 + 24 >> 3];
        $22 = HEAPF64[$11 + 16 >> 3];
        $15 = HEAPF64[$11 + 8 >> 3];
        $18 = HEAPF64[$11 >> 3];
        HEAP32[$1 + 52 >> 2] = $16;
        HEAP8[$1 + 72 | 0] = 0;
        HEAP32[$16 + 52 >> 2] = $1;
        HEAP8[$16 + 72 | 0] = 0;
        HEAP32[$1 + 56 >> 2] = $29;
        HEAP8[$1 + 73 | 0] = 0;
        HEAP32[$29 + 52 >> 2] = $1;
        HEAP8[$29 + 72 | 0] = 1;
        HEAP32[$1 + 60 >> 2] = $28;
        HEAP8[$1 + 74 | 0] = 0;
        HEAP32[$28 + 52 >> 2] = $1;
        HEAP8[$28 + 72 | 0] = 2;
        HEAP32[$16 + 56 >> 2] = $28;
        HEAP8[$16 + 73 | 0] = 2;
        HEAP32[$28 + 60 >> 2] = $16;
        HEAP8[$28 + 74 | 0] = 1;
        HEAP32[$16 + 60 >> 2] = $29;
        HEAP8[$16 + 74 | 0] = 1;
        HEAP32[$29 + 56 >> 2] = $16;
        $0 = $29 + 73 | 0;
        HEAP8[$0 | 0] = 2;
        HEAP8[$0 + 1 | 0] = 1;
        HEAP32[$29 + 60 >> 2] = $28;
        HEAP8[$28 + 73 | 0] = 2;
        HEAP32[$28 + 56 >> 2] = $29;
        HEAP32[$12 >> 2] = 0;
        $28 = $21 + 40 | 0;
        $29 = $21 + 32 | 0;
        $47 = $21 + 24 | 0;
        $16 = 0;
        while (1) {
         label$13 : {
          label$15 : {
           $0 = HEAP32[$12 + 28776 >> 2];
           if ($0 >>> 0 <= 127) {
            $16 = $16 + 1 | 0;
            HEAP8[$11 + 75 | 0] = $16;
            HEAP32[$12 + 28776 >> 2] = $0 + 1;
            $19 = HEAPF64[$11 + 16 >> 3];
            $17 = HEAPF64[$11 >> 3];
            $20 = HEAPF64[$11 + 8 >> 3];
            $0 = ($0 << 6) + $12 | 0;
            $1 = $0 + 128 | 0;
            HEAP32[$1 >> 2] = 0;
            HEAP32[$1 + 4 >> 2] = 0;
            $45 = $0 + 104 | 0;
            $30 = $17;
            $17 = 1.0 / Math_sqrt($19 * $19 + ($17 * $17 + $20 * $20));
            HEAPF64[$45 >> 3] = $30 * $17;
            HEAPF64[$0 + 120 >> 3] = $19 * $17;
            HEAPF64[$0 + 112 >> 3] = $20 * $17;
            HEAP32[$21 + 8 >> 2] = 0;
            HEAP32[$21 >> 2] = 0;
            HEAP32[$21 + 4 >> 2] = 0;
            gjkepa2_impl__MinkowskiDiff__Support_28btVector3_20const__29_20const($21 + 16 | 0, $34, $45);
            $1 = HEAP32[$28 + 4 >> 2];
            $31 = $0 + 160 | 0;
            HEAP32[$31 >> 2] = HEAP32[$28 >> 2];
            HEAP32[$31 + 4 >> 2] = $1;
            $31 = HEAP32[$29 + 4 >> 2];
            $1 = $0 + 152 | 0;
            HEAP32[$1 >> 2] = HEAP32[$29 >> 2];
            HEAP32[$1 + 4 >> 2] = $31;
            $36 = HEAP32[$47 + 4 >> 2];
            $31 = $0 + 144 | 0;
            HEAP32[$31 >> 2] = HEAP32[$47 >> 2];
            HEAP32[$31 + 4 >> 2] = $36;
            $36 = HEAP32[$21 + 20 >> 2];
            $0 = $0 + 136 | 0;
            HEAP32[$0 >> 2] = HEAP32[$21 + 16 >> 2];
            HEAP32[$0 + 4 >> 2] = $36;
            if (!(HEAPF64[$11 + 16 >> 3] * HEAPF64[$1 >> 3] + (HEAPF64[$11 >> 3] * HEAPF64[$0 >> 3] + HEAPF64[$11 + 8 >> 3] * HEAPF64[$31 >> 3]) - HEAPF64[$11 + 32 >> 3] > 1.0e-12)) {
             HEAP32[$12 >> 2] = 7;
             break label$13;
            }
            $1 = $11 + 52 | 0;
            $0 = 0;
            while (1) {
             $31 = gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($12, $16, $45, HEAP32[$1 >> 2], HEAPU8[($0 + $11 | 0) + 72 | 0], $21);
             if (!$31) {
              break label$15
             }
             $1 = $1 + 4 | 0;
             $36 = $0 >>> 0 < 2;
             $0 = $0 + 1 | 0;
             if ($36) {
              continue
             }
             break;
            };
            break label$15;
           }
           HEAP32[$12 >> 2] = 6;
           break label$13;
          }
          if (!($31 & HEAPU32[$21 + 8 >> 2] > 2)) {
           HEAP32[$12 >> 2] = 4;
           break label$13;
          }
          $0 = HEAP32[$21 >> 2];
          HEAP8[$0 + 73 | 0] = 2;
          $1 = HEAP32[$21 + 4 >> 2];
          HEAP32[$0 + 56 >> 2] = $1;
          HEAP32[$1 + 60 >> 2] = $0;
          HEAP8[$1 + 74 | 0] = 1;
          $0 = HEAP32[$11 + 68 >> 2];
          if ($0) {
           HEAP32[$0 + 64 >> 2] = HEAP32[$11 + 64 >> 2]
          }
          $0 = HEAP32[$11 + 64 >> 2];
          if ($0) {
           HEAP32[$0 + 68 >> 2] = HEAP32[$11 + 68 >> 2]
          }
          if (($11 | 0) == HEAP32[$12 + 28780 >> 2]) {
           HEAP32[$12 + 28780 >> 2] = HEAP32[$11 + 68 >> 2]
          }
          HEAP32[$11 + 64 >> 2] = 0;
          HEAP32[$11 + 68 >> 2] = HEAP32[$12 + 28788 >> 2];
          HEAP32[$12 + 28784 >> 2] = HEAP32[$12 + 28784 >> 2] - 1;
          $0 = HEAP32[$12 + 28788 >> 2];
          if ($0) {
           HEAP32[$0 + 64 >> 2] = $11
          }
          HEAP32[$12 + 28788 >> 2] = $11;
          HEAP32[$12 + 28792 >> 2] = HEAP32[$12 + 28792 >> 2] + 1;
          $11 = HEAP32[$12 + 28780 >> 2];
          $0 = HEAP32[$11 + 68 >> 2];
          if ($0) {
           $10 = HEAPF64[$11 + 32 >> 3];
           $10 = $10 * $10;
           while (1) {
            $15 = HEAPF64[$0 + 32 >> 3];
            $15 = $15 * $15;
            $1 = $15 < $10;
            $11 = $1 ? $0 : $11;
            $10 = $1 ? $15 : $10;
            $0 = HEAP32[$0 + 68 >> 2];
            if ($0) {
             continue
            }
            break;
           };
          }
          $14 = HEAP32[$11 + 48 >> 2];
          $32 = HEAP32[$11 + 44 >> 2];
          $35 = HEAP32[$11 + 40 >> 2];
          $10 = HEAPF64[$11 + 32 >> 3];
          $23 = HEAPF64[$11 + 24 >> 3];
          $22 = HEAPF64[$11 + 16 >> 3];
          $15 = HEAPF64[$11 + 8 >> 3];
          $18 = HEAPF64[$11 >> 3];
          if (($16 | 0) != 255) {
           continue
          }
         }
         break;
        };
        HEAPF64[$12 + 96 >> 3] = $10;
        HEAPF64[$12 + 64 >> 3] = $18;
        HEAPF64[$12 + 88 >> 3] = $23;
        HEAPF64[$12 + 80 >> 3] = $22;
        HEAPF64[$12 + 72 >> 3] = $15;
        $0 = $12 + 24 | 0;
        $18 = $18 * $10;
        $19 = HEAPF64[$32 + 32 >> 3] - $18;
        $1 = $14 + 40 | 0;
        $15 = $15 * $10;
        $17 = HEAPF64[$1 >> 3] - $15;
        $20 = HEAPF64[$14 + 32 >> 3] - $18;
        $11 = $32 + 40 | 0;
        $23 = HEAPF64[$11 >> 3] - $15;
        $26 = $19 * $17 - $20 * $23;
        $16 = $14 + 48 | 0;
        $10 = $22 * $10;
        $22 = HEAPF64[$16 >> 3] - $10;
        $30 = $17;
        $28 = $32 + 48 | 0;
        $17 = HEAPF64[$28 >> 3] - $10;
        $23 = $23 * $22 - $30 * $17;
        $22 = $17 * $20 - $22 * $19;
        $22 = Math_sqrt($26 * $26 + ($23 * $23 + $22 * $22));
        HEAPF64[$0 >> 3] = $22;
        $29 = $12 + 32 | 0;
        $19 = HEAPF64[$14 + 32 >> 3] - $18;
        $34 = $35 + 40 | 0;
        $17 = HEAPF64[$34 >> 3] - $15;
        $20 = HEAPF64[$35 + 32 >> 3] - $18;
        $23 = HEAPF64[$1 >> 3] - $15;
        $26 = $19 * $17 - $20 * $23;
        $33 = $26 * $26;
        $30 = $23;
        $1 = $35 + 48 | 0;
        $23 = HEAPF64[$1 >> 3] - $10;
        $26 = $17;
        $17 = HEAPF64[$16 >> 3] - $10;
        $26 = $30 * $23 - $26 * $17;
        $19 = $17 * $20 - $23 * $19;
        $19 = Math_sqrt($33 + ($26 * $26 + $19 * $19));
        HEAPF64[$29 >> 3] = $19;
        HEAP32[$12 + 8 >> 2] = $35;
        HEAP32[$12 + 56 >> 2] = 3;
        HEAP32[$12 + 16 >> 2] = $14;
        HEAP32[$12 + 12 >> 2] = $32;
        $17 = HEAPF64[$35 + 32 >> 3] - $18;
        $20 = HEAPF64[$11 >> 3] - $15;
        $18 = HEAPF64[$32 + 32 >> 3] - $18;
        $15 = HEAPF64[$34 >> 3] - $15;
        $23 = $17 * $20 - $18 * $15;
        $30 = $15;
        $15 = HEAPF64[$28 >> 3] - $10;
        $10 = HEAPF64[$1 >> 3] - $10;
        $20 = $30 * $15 - $20 * $10;
        $10 = $10 * $18 - $15 * $17;
        $15 = Math_sqrt($23 * $23 + ($20 * $20 + $10 * $10));
        $10 = $15 + ($22 + $19);
        HEAPF64[$12 + 40 >> 3] = $15 / $10;
        HEAPF64[$29 >> 3] = $19 / $10;
        HEAPF64[$0 >> 3] = $22 / $10;
        $11 = HEAP32[$12 >> 2];
        break label$101;
       }
       $11 = 8;
       HEAP32[$12 >> 2] = 8;
       $10 = 0.0;
       $18 = 1.0;
       $15 = 0.0;
       $22 = HEAPF64[$32 + 16 >> 3];
       $19 = HEAPF64[$32 >> 3];
       $17 = HEAPF64[$32 + 8 >> 3];
       $20 = Math_sqrt($22 * $22 + ($19 * $19 + $17 * $17));
       if ($20 > 0.0) {
        $18 = 1.0 / $20;
        $15 = $18 * -$22;
        $10 = $18 * -$17;
        $18 = $18 * -$19;
       }
       HEAPF64[$12 + 80 >> 3] = $15;
       HEAPF64[$12 + 72 >> 3] = $10;
       HEAPF64[$12 + 64 >> 3] = $18;
       $0 = $12 + 88 | 0;
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       $0 = $0 + 8 | 0;
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       HEAP32[$12 + 56 >> 2] = 1;
       $0 = $12 + 24 | 0;
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 1072693248;
       HEAP32[$12 + 8 >> 2] = HEAP32[$14 >> 2];
      }
      __stack_pointer = $21 + 48 | 0;
      if (($11 | 0) == 9) {
       break label$2
      }
      if (HEAP32[$13 + 96 >> 2]) {
       $0 = $13 - -64 | 0;
       $1 = $13 + 48 | 0;
       $14 = 0;
       while (1) {
        $11 = HEAP32[$13 + 29756 >> 2];
        $12 = HEAP32[$13 + 29520 >> 2] + ($11 >> 1) | 0;
        $21 = HEAP32[$13 + 29752 >> 2];
        FUNCTION_TABLE[($11 & 1 ? HEAP32[$21 + HEAP32[$12 >> 2] >> 2] : $21) | 0]($13 + 8 | 0, $12, HEAP32[$1 >> 2]);
        $1 = $1 + 4 | 0;
        $10 = HEAPF64[$0 >> 3];
        $24 = $24 + $10 * HEAPF64[$13 + 24 >> 3];
        $27 = $27 + $10 * HEAPF64[$13 + 16 >> 3];
        $25 = $25 + HEAPF64[$13 + 8 >> 3] * $10;
        $0 = $0 + 8 | 0;
        $14 = $14 + 1 | 0;
        if ($14 >>> 0 < HEAPU32[$13 + 96 >> 2]) {
         continue
        }
        break;
       };
      }
      $1 = $4 + 104 | 0;
      $10 = HEAPF64[$1 >> 3];
      $11 = $4 + 48 | 0;
      $15 = HEAPF64[$11 >> 3];
      $12 = $4 + 40 | 0;
      $18 = HEAPF64[$12 >> 3];
      $14 = $4 + 112 | 0;
      $22 = HEAPF64[$14 >> 3];
      $21 = $4 + 80 | 0;
      $19 = HEAPF64[$21 >> 3];
      $16 = $4 + 72 | 0;
      $17 = HEAPF64[$16 >> 3];
      $20 = HEAPF64[$4 + 32 >> 3];
      $23 = HEAPF64[$4 + 64 >> 3];
      $26 = HEAPF64[$4 + 96 >> 3];
      $33 = HEAPF64[$4 + 16 >> 3];
      $37 = HEAPF64[$4 >> 3];
      $38 = HEAPF64[$4 + 8 >> 3];
      $0 = $9 + 32 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAPF64[$9 + 8 >> 3] = $26 + ($24 * $33 + ($25 * $37 + $27 * $38));
      HEAPF64[$9 + 24 >> 3] = $22 + ($24 * $19 + ($25 * $23 + $27 * $17));
      HEAPF64[$9 + 16 >> 3] = $10 + ($24 * $15 + ($25 * $20 + $27 * $18));
      $0 = 1;
      HEAP32[$9 >> 2] = 1;
      $15 = HEAPF64[$14 >> 3];
      $18 = HEAPF64[$16 >> 3];
      $22 = HEAPF64[$21 >> 3];
      $19 = HEAPF64[$1 >> 3];
      $17 = HEAPF64[$12 >> 3];
      $20 = HEAPF64[$11 >> 3];
      $23 = HEAPF64[$4 + 64 >> 3];
      $26 = HEAPF64[$4 + 32 >> 3];
      $33 = HEAPF64[$4 + 96 >> 3];
      $37 = HEAPF64[$4 + 16 >> 3];
      $38 = HEAPF64[$4 >> 3];
      $46 = HEAPF64[$4 + 8 >> 3];
      $1 = $9 - -64 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $9 + 96 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $30 = HEAPF64[$13 + 104 >> 3];
      HEAPF64[$9 + 72 >> 3] = -$30;
      $1 = $13 + 40 | 0;
      $48 = HEAPF64[$1 + 72 >> 3];
      HEAPF64[$9 + 80 >> 3] = -$48;
      $49 = HEAPF64[$1 + 80 >> 3];
      HEAPF64[$9 + 88 >> 3] = -$49;
      $10 = HEAPF64[$13 + 136 >> 3];
      HEAPF64[$9 + 104 >> 3] = -$10;
      $24 = $24 - $10 * $49;
      $25 = $25 - $30 * $10;
      $10 = $27 - $10 * $48;
      HEAPF64[$9 + 40 >> 3] = $33 + ($37 * $24 + ($38 * $25 + $46 * $10));
      HEAPF64[$9 + 48 >> 3] = $19 + ($24 * $20 + ($25 * $26 + $10 * $17));
      HEAPF64[$9 + 56 >> 3] = $15 + ($24 * $22 + ($25 * $23 + $10 * $18));
      break label$10;
     case 1:
      break label$3;
     default:
      break label$10;
     };
    }
    HEAP32[$9 >> 2] = 2;
    break label$10;
   }
   HEAP32[$9 >> 2] = 3;
   $0 = 0;
  }
  __stack_pointer = $13 + 29760 | 0;
  $1 = $0;
  label$1 : {
   if (!$0) {
    $0 = __stack_pointer - 992 | 0;
    __stack_pointer = $0;
    $11 = $2;
    $2 = $0 + 688 | 0;
    gjkepa2_impl__Initialize_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btGjkEpaSolver2__sResults__2c_20gjkepa2_impl__MinkowskiDiff__2c_20bool_29($11, $4, $3, $5, $9, $2, 0);
    $3 = $0 + 256 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $0 + 264 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $0 + 272 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$0 + 248 >> 2] = 0;
    HEAP32[$0 + 252 >> 2] = 0;
    HEAP32[$0 + 672 >> 2] = 0;
    HEAP32[$0 + 676 >> 2] = 0;
    HEAP32[$0 + 684 >> 2] = 2;
    HEAP32[$0 + 280 >> 2] = 0;
    HEAP32[$0 + 284 >> 2] = 0;
    label$102 : {
     label$23 : {
      $11 = gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($0 + 8 | 0, $2, $9 + 112 | 0);
      if (!$11) {
       $3 = HEAP32[$0 + 680 >> 2];
       if (!HEAP32[$3 + 48 >> 2]) {
        break label$23
       }
       $5 = 16;
       $2 = 0;
       while (1) {
        $10 = HEAPF64[$3 + $5 >> 3];
        $12 = $0 + 960 | 0;
        $13 = HEAP32[$0 + 924 >> 2];
        $14 = HEAP32[$0 + 688 >> 2] + ($13 >> 1) | 0;
        $16 = HEAP32[$2 + $3 >> 2];
        $3 = HEAP32[$0 + 920 >> 2];
        FUNCTION_TABLE[($13 & 1 ? HEAP32[$3 + HEAP32[$14 >> 2] >> 2] : $3) | 0]($12, $14, $16);
        $3 = HEAP32[HEAP32[$0 + 680 >> 2] + $2 >> 2];
        $24 = -HEAPF64[$3 + 16 >> 3];
        $27 = -HEAPF64[$3 + 8 >> 3];
        $25 = -HEAPF64[$3 >> 3];
        $3 = HEAP32[$0 + 920 >> 2];
        $13 = HEAP32[$0 + 924 >> 2];
        $14 = HEAP32[$0 + 692 >> 2] + ($13 >> 1) | 0;
        $3 = $13 & 1 ? HEAP32[$3 + HEAP32[$14 >> 2] >> 2] : $3;
        $39 = $39 + $10 * HEAPF64[$0 + 976 >> 3];
        $40 = $40 + $10 * HEAPF64[$0 + 968 >> 3];
        $41 = $41 + $10 * HEAPF64[$0 + 960 >> 3];
        HEAP32[$0 + 952 >> 2] = 0;
        HEAP32[$0 + 956 >> 2] = 0;
        HEAPF64[$0 + 944 >> 3] = HEAPF64[$0 + 776 >> 3] * $24 + (HEAPF64[$0 + 760 >> 3] * $25 + HEAPF64[$0 + 768 >> 3] * $27);
        HEAPF64[$0 + 936 >> 3] = HEAPF64[$0 + 744 >> 3] * $24 + (HEAPF64[$0 + 728 >> 3] * $25 + HEAPF64[$0 + 736 >> 3] * $27);
        HEAPF64[$0 + 928 >> 3] = HEAPF64[$0 + 712 >> 3] * $24 + (HEAPF64[$0 + 696 >> 3] * $25 + HEAPF64[$0 + 704 >> 3] * $27);
        FUNCTION_TABLE[$3 | 0]($12, $14, $0 + 928 | 0);
        $24 = HEAPF64[$0 + 976 >> 3];
        $27 = HEAPF64[$0 + 960 >> 3];
        $25 = HEAPF64[$0 + 968 >> 3];
        $42 = $42 + $10 * ($24 * HEAPF64[$0 + 872 >> 3] + ($27 * HEAPF64[$0 + 856 >> 3] + $25 * HEAPF64[$0 + 864 >> 3]) + HEAPF64[$0 + 904 >> 3]);
        $43 = $43 + $10 * ($24 * HEAPF64[$0 + 840 >> 3] + ($27 * HEAPF64[$0 + 824 >> 3] + $25 * HEAPF64[$0 + 832 >> 3]) + HEAPF64[$0 + 896 >> 3]);
        $44 = $44 + $10 * ($24 * HEAPF64[$0 + 808 >> 3] + ($27 * HEAPF64[$0 + 792 >> 3] + $25 * HEAPF64[$0 + 800 >> 3]) + HEAPF64[$0 + 888 >> 3]);
        $2 = $2 + 4 | 0;
        $5 = $5 + 8 | 0;
        $50 = $50 + 1 | 0;
        $3 = HEAP32[$0 + 680 >> 2];
        if ($50 >>> 0 < HEAPU32[$3 + 48 >> 2]) {
         continue
        }
        break;
       };
       break label$23;
      }
      HEAP32[$9 >> 2] = ($11 | 0) == 1 ? 1 : 2;
      break label$102;
     }
     $2 = $4 + 104 | 0;
     $10 = HEAPF64[$2 >> 3];
     $3 = $4 + 48 | 0;
     $24 = HEAPF64[$3 >> 3];
     $5 = $4 + 40 | 0;
     $27 = HEAPF64[$5 >> 3];
     $12 = $4 + 112 | 0;
     $25 = HEAPF64[$12 >> 3];
     $13 = $4 + 80 | 0;
     $15 = HEAPF64[$13 >> 3];
     $14 = $4 + 72 | 0;
     $18 = HEAPF64[$14 >> 3];
     $22 = HEAPF64[$4 + 32 >> 3];
     $19 = HEAPF64[$4 + 64 >> 3];
     $17 = HEAPF64[$4 + 96 >> 3];
     $20 = HEAPF64[$4 + 16 >> 3];
     $23 = HEAPF64[$4 >> 3];
     $26 = HEAPF64[$4 + 8 >> 3];
     $21 = $9 + 32 | 0;
     HEAP32[$21 >> 2] = 0;
     HEAP32[$21 + 4 >> 2] = 0;
     HEAPF64[$9 + 8 >> 3] = $17 + ($39 * $20 + ($41 * $23 + $40 * $26));
     HEAPF64[$9 + 24 >> 3] = $25 + ($39 * $15 + ($41 * $19 + $40 * $18));
     HEAPF64[$9 + 16 >> 3] = $10 + ($39 * $24 + ($41 * $22 + $40 * $27));
     $15 = HEAPF64[$2 >> 3];
     $18 = HEAPF64[$3 >> 3];
     $22 = HEAPF64[$5 >> 3];
     $19 = HEAPF64[$12 >> 3];
     $17 = HEAPF64[$13 >> 3];
     $20 = HEAPF64[$14 >> 3];
     $23 = HEAPF64[$4 + 96 >> 3];
     $26 = HEAPF64[$4 + 16 >> 3];
     $33 = HEAPF64[$4 >> 3];
     $37 = HEAPF64[$4 + 8 >> 3];
     $38 = HEAPF64[$4 + 32 >> 3];
     $46 = HEAPF64[$4 + 64 >> 3];
     $10 = $39 - $42;
     $24 = $41 - $44;
     $27 = $40 - $43;
     $25 = Math_sqrt($10 * $10 + ($24 * $24 + $27 * $27));
     HEAPF64[$9 + 104 >> 3] = $25;
     $2 = $9 + 96 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     $2 = $9 - -64 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     $30 = $10;
     $10 = $25 > 1.0e-12 ? 1.0 / $25 : 1.0;
     HEAPF64[$9 + 88 >> 3] = $30 * $10;
     HEAPF64[$9 + 80 >> 3] = $27 * $10;
     HEAPF64[$9 + 72 >> 3] = $24 * $10;
     HEAPF64[$9 + 56 >> 3] = $19 + ($42 * $17 + ($44 * $46 + $43 * $20));
     HEAPF64[$9 + 48 >> 3] = $15 + ($42 * $18 + ($44 * $38 + $43 * $22));
     HEAPF64[$9 + 40 >> 3] = $23 + ($42 * $26 + ($44 * $33 + $43 * $37));
    }
    __stack_pointer = $0 + 992 | 0;
    $0 = 0;
    if ($11) {
     break label$1
    }
   }
   $0 = HEAP32[$9 + 12 >> 2];
   HEAP32[$7 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$7 + 4 >> 2] = $0;
   $0 = $9 + 32 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $7 + 24 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $9 + 24 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $7 + 16 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $9 + 16 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $7 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $9 + 40 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   HEAP32[$8 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$8 + 4 >> 2] = $2;
   $0 = $9 + 48 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $8 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $9 + 56 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $8 + 16 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $9 - -64 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $8 + 24 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = HEAP32[$9 + 76 >> 2];
   HEAP32[$6 >> 2] = HEAP32[$9 + 72 >> 2];
   HEAP32[$6 + 4 >> 2] = $0;
   $0 = $9 + 80 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $6 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $9 + 88 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $6 + 16 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $9 + 96 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = $6 + 24 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = $1;
  }
  __stack_pointer = $9 + 144 | 0;
  return $0 | 0;
 }
 
 function btVoronoiSimplexSolver__reset_28_29($0) {
  var $1 = 0;
  HEAP8[$0 + 712 | 0] = 1;
  HEAP32[$0 >> 2] = 0;
  HEAP8[$0 + 624 | 0] = 0;
  HEAP32[$0 + 584 >> 2] = 966823146;
  HEAP32[$0 + 588 >> 2] = 1177108057;
  $1 = $0 + 672 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 608 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 600 | 0;
  HEAP32[$1 >> 2] = 966823146;
  HEAP32[$1 + 4 >> 2] = 1177108057;
  $1 = $0 + 592 | 0;
  HEAP32[$1 >> 2] = 966823146;
  HEAP32[$1 + 4 >> 2] = 1177108057;
  $1 = $0 + 680 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 688 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 696 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 704 | 0] = 0;
  $0 = $0 + 664 | 0;
  HEAP8[$0 | 0] = HEAPU8[$0 | 0] & 240;
 }
 
 function btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 584 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 588 >> 2] = $4;
  $5 = $1 + 24 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $0 + 608 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $6 = $1 + 16 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $0 + 600 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $7 = $1 + 8 | 0;
  $8 = HEAP32[$7 + 4 >> 2];
  $4 = $0 + 592 | 0;
  HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$4 + 4 >> 2] = $8;
  HEAP8[$0 + 712 | 0] = 1;
  $9 = HEAP32[$5 + 4 >> 2];
  $4 = (HEAP32[$0 >> 2] << 5) + $0 | 0;
  $8 = $4 + 32 | 0;
  HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$8 + 4 >> 2] = $9;
  $8 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $8;
  $6 = HEAP32[$7 + 4 >> 2];
  $5 = $4 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $5 = HEAP32[$1 + 4 >> 2];
  $4 = $4 + 8 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $5 = $2 + 16 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $1 = (HEAP32[$0 >> 2] << 5) + $0 | 0;
  $4 = $1 + 184 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $2 + 8 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $1 + 176 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + 168 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $2 = $2 + 24 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $1 = $1 + 192 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = (HEAP32[$0 >> 2] << 5) + $0 | 0;
  $2 = $1 + 328 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $4 = $3 + 8 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $2 = $1 + 336 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $4 = $3 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $2 = $1 + 344 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $2 = $3 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $1 = $1 + 352 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0;
  $19 = __stack_pointer - 32 | 0;
  __stack_pointer = $19;
  label$1 : {
   if (!HEAPU8[$0 + 712 | 0]) {
    $5 = HEAPU8[$0 + 624 | 0];
    break label$1;
   }
   HEAP8[$0 + 712 | 0] = 0;
   $11 = $0 + 704 | 0;
   HEAP8[$11 | 0] = 0;
   $7 = $0 + 696 | 0;
   $3 = $7;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $1 = $0 + 688 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $17 = $0 + 680 | 0;
   HEAP32[$17 >> 2] = 0;
   HEAP32[$17 + 4 >> 2] = 0;
   $22 = $0 + 672 | 0;
   $3 = $22;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 664 | 0;
   $2 = HEAPU8[$3 | 0] & -16;
   HEAP8[$3 | 0] = $2;
   $3 = $0 + 632 | 0;
   label$4 : {
    label$5 : {
     switch (HEAP32[$0 >> 2] - 1 | 0) {
     case 0:
      $5 = $0 + 336 | 0;
      $2 = HEAP32[$5 + 4 >> 2];
      $3 = $0 + 528 | 0;
      HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$3 + 4 >> 2] = $2;
      $2 = $0 + 176 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      $5 = $0 + 496 | 0;
      HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$5 + 4 >> 2] = $4;
      $4 = $0 + 344 | 0;
      $12 = HEAP32[$4 + 4 >> 2];
      $2 = $0 + 536 | 0;
      HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$2 + 4 >> 2] = $12;
      $12 = $0 + 184 | 0;
      $9 = HEAP32[$12 + 4 >> 2];
      $4 = $0 + 504 | 0;
      HEAP32[$4 >> 2] = HEAP32[$12 >> 2];
      HEAP32[$4 + 4 >> 2] = $9;
      $12 = HEAP32[$0 + 332 >> 2];
      HEAP32[$0 + 520 >> 2] = HEAP32[$0 + 328 >> 2];
      HEAP32[$0 + 524 >> 2] = $12;
      $12 = HEAP32[$0 + 172 >> 2];
      HEAP32[$0 + 488 >> 2] = HEAP32[$0 + 168 >> 2];
      HEAP32[$0 + 492 >> 2] = $12;
      $12 = $0 + 192 | 0;
      $9 = HEAP32[$12 + 4 >> 2];
      $22 = $0 + 512 | 0;
      HEAP32[$22 >> 2] = HEAP32[$12 >> 2];
      HEAP32[$22 + 4 >> 2] = $9;
      $12 = $0 + 352 | 0;
      $9 = HEAP32[$12 + 4 >> 2];
      $22 = $0 + 544 | 0;
      HEAP32[$22 >> 2] = HEAP32[$12 >> 2];
      HEAP32[$22 + 4 >> 2] = $9;
      $16 = HEAPF64[$3 >> 3];
      $6 = HEAPF64[$5 >> 3];
      $14 = HEAPF64[$2 >> 3];
      $15 = HEAPF64[$4 >> 3];
      $18 = HEAPF64[$0 + 520 >> 3];
      $21 = HEAPF64[$0 + 488 >> 3];
      HEAP8[$11 | 0] = 0;
      $3 = $0 + 576 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAPF64[$0 + 552 >> 3] = $21 - $18;
      HEAPF64[$0 + 568 >> 3] = $15 - $14;
      HEAPF64[$0 + 560 >> 3] = $6 - $16;
      HEAP32[$0 + 672 >> 2] = 0;
      HEAP32[$0 + 676 >> 2] = 1072693248;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$17 >> 2] = 0;
      HEAP32[$17 + 4 >> 2] = 0;
      $5 = 1;
      break label$4;
     case 1:
      $3 = 1;
      $18 = HEAPF64[$0 + 16 >> 3];
      $6 = HEAPF64[$0 + 48 >> 3] - $18;
      $15 = HEAPF64[$0 + 24 >> 3];
      $14 = HEAPF64[$0 + 56 >> 3] - $15;
      $20 = $14 * (0.0 - $15);
      $21 = HEAPF64[$0 + 8 >> 3];
      $15 = HEAPF64[$0 + 40 >> 3] - $21;
      $18 = $20 + ($15 * (0.0 - $21) + (0.0 - $18) * $6);
      $1 = 1;
      label$9 : {
       if (!($18 > 0.0)) {
        break label$9
       }
       $16 = $14 * $14 + ($15 * $15 + $6 * $6);
       if (!($16 > $18)) {
        $16 = 1.0;
        $1 = 2;
        break label$9;
       }
       $16 = $18 / $16;
       $1 = 3;
      }
      $5 = $0 + 688 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAPF64[$0 + 680 >> 3] = $16;
      $18 = 1.0 - $16;
      HEAPF64[$0 + 672 >> 3] = $18;
      HEAP8[$0 + 664 | 0] = $1 | $2;
      $5 = $0 + 696 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $5 = $0 + 512 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $6 = HEAPF64[$0 + 184 >> 3];
      $21 = $6 + $16 * (HEAPF64[$0 + 216 >> 3] - $6);
      HEAPF64[$0 + 504 >> 3] = $21;
      $6 = HEAPF64[$0 + 176 >> 3];
      $24 = $6 + $16 * (HEAPF64[$0 + 208 >> 3] - $6);
      HEAPF64[$0 + 496 >> 3] = $24;
      $6 = HEAPF64[$0 + 168 >> 3];
      $25 = $6 + $16 * (HEAPF64[$0 + 200 >> 3] - $6);
      HEAPF64[$0 + 488 >> 3] = $25;
      $20 = HEAPF64[$0 + 360 >> 3];
      $27 = HEAPF64[$0 + 368 >> 3];
      $6 = HEAPF64[$0 + 336 >> 3];
      $28 = HEAPF64[$0 + 376 >> 3];
      $14 = HEAPF64[$0 + 344 >> 3];
      $15 = HEAPF64[$0 + 328 >> 3];
      $5 = $0 + 576 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $14 = $14 + $16 * ($28 - $14);
      HEAPF64[$0 + 568 >> 3] = $21 - $14;
      $6 = $6 + $16 * ($27 - $6);
      HEAPF64[$0 + 560 >> 3] = $24 - $6;
      $15 = $15 + $16 * ($20 - $15);
      HEAPF64[$0 + 552 >> 3] = $25 - $15;
      $5 = $0 + 544 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAPF64[$0 + 536 >> 3] = $14;
      HEAPF64[$0 + 528 >> 3] = $6;
      HEAPF64[$0 + 520 >> 3] = $15;
      if (!($1 & 2)) {
       HEAP32[$0 >> 2] = 1;
       $3 = 0;
      }
      if (!($1 & 1)) {
       HEAP32[$0 >> 2] = $3;
       $3 = ($3 << 5) + $0 | 0;
       $5 = $3 + 8 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $1 = $0 + 8 | 0;
       HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$1 + 4 >> 2] = $7;
       $5 = $3 + 16 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 24 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 16 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 32 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $1 = $1 + 24 | 0;
       HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$1 + 4 >> 2] = $7;
       $5 = $3 + 168 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $1 = $0 + 168 | 0;
       HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$1 + 4 >> 2] = $7;
       $5 = $3 + 176 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 184 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 16 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 192 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $1 = $1 + 24 | 0;
       HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$1 + 4 >> 2] = $7;
       $5 = $3 + 352 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $1 = $0 + 328 | 0;
       $2 = $1 + 24 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 344 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 16 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 336 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $3 = $3 + 328 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$1 + 4 >> 2] = $5;
      }
      $5 = $18 >= 0.0 & $16 >= 0.0;
      break label$4;
     case 2:
      $5 = $19 + 24 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $5 = $19 + 16 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $5 = $19 + 8 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$19 >> 2] = 0;
      HEAP32[$19 + 4 >> 2] = 0;
      $7 = $0 + 8 | 0;
      $2 = $0 + 40 | 0;
      $4 = $0 + 72 | 0;
      btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($19, $7, $2, $4, $3);
      $3 = $0 + 512 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $14 = HEAPF64[$0 + 672 >> 3];
      $16 = HEAPF64[$17 >> 3];
      $6 = HEAPF64[$1 >> 3];
      $15 = $14 * HEAPF64[$0 + 184 >> 3] + $16 * HEAPF64[$0 + 216 >> 3] + $6 * HEAPF64[$0 + 248 >> 3];
      HEAPF64[$0 + 504 >> 3] = $15;
      $18 = $14 * HEAPF64[$0 + 176 >> 3] + $16 * HEAPF64[$0 + 208 >> 3] + $6 * HEAPF64[$0 + 240 >> 3];
      HEAPF64[$0 + 496 >> 3] = $18;
      $17 = $0 + 200 | 0;
      $11 = $0 + 232 | 0;
      $21 = $14 * HEAPF64[$0 + 168 >> 3] + $16 * HEAPF64[$17 >> 3] + $6 * HEAPF64[$11 >> 3];
      HEAPF64[$0 + 488 >> 3] = $21;
      $12 = $0 + 360 | 0;
      $24 = HEAPF64[$12 >> 3];
      $9 = $0 + 392 | 0;
      $25 = HEAPF64[$9 >> 3];
      $20 = HEAPF64[$0 + 336 >> 3];
      $27 = HEAPF64[$0 + 368 >> 3];
      $28 = HEAPF64[$0 + 400 >> 3];
      $31 = HEAPF64[$0 + 344 >> 3];
      $32 = HEAPF64[$0 + 376 >> 3];
      $33 = HEAPF64[$0 + 408 >> 3];
      $34 = HEAPF64[$0 + 328 >> 3];
      $3 = $0 + 576 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $23 = $15;
      $15 = $14 * $31 + $16 * $32 + $6 * $33;
      HEAPF64[$0 + 568 >> 3] = $23 - $15;
      $23 = $18;
      $18 = $14 * $20 + $16 * $27 + $6 * $28;
      HEAPF64[$0 + 560 >> 3] = $23 - $18;
      $14 = $14 * $34 + $16 * $24 + $6 * $25;
      HEAPF64[$0 + 552 >> 3] = $21 - $14;
      $3 = $0 + 544 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAPF64[$0 + 536 >> 3] = $15;
      HEAPF64[$0 + 528 >> 3] = $18;
      HEAPF64[$0 + 520 >> 3] = $14;
      label$13 : {
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           $1 = HEAP32[$0 >> 2];
           label$18 : {
            if (($1 | 0) >= 4) {
             $5 = HEAPU8[$0 + 664 | 0];
             if ($5 & 8) {
              $3 = $1;
              break label$18;
             }
             $3 = $1 - 1 | 0;
             $1 = ($3 << 5) + $0 | 0;
             $8 = $1 + 32 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 128 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 24 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 120 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 16 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 112 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 8 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 104 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             HEAP32[$0 >> 2] = $3;
             $8 = $1 + 168 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 264 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 176 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 272 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 184 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 280 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 192 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 288 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 328 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 424 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 336 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 432 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $8 = $1 + 344 | 0;
             $13 = HEAP32[$8 + 4 >> 2];
             $10 = $0 + 440 | 0;
             HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$10 + 4 >> 2] = $13;
             $1 = $1 + 352 | 0;
             $8 = HEAP32[$1 + 4 >> 2];
             $13 = $0 + 448 | 0;
             HEAP32[$13 >> 2] = HEAP32[$1 >> 2];
             HEAP32[$13 + 4 >> 2] = $8;
             break label$18;
            }
            $3 = 3;
            if (($1 | 0) != 3) {
             break label$17
            }
            $5 = HEAPU8[$0 + 664 | 0];
           }
           if ($5 & 4) {
            break label$16
           }
           $3 = $3 - 1 | 0;
           HEAP32[$0 >> 2] = $3;
           $1 = ($3 << 5) + $0 | 0;
           $8 = $1 + 32 | 0;
           $13 = HEAP32[$8 + 4 >> 2];
           $10 = $4 + 24 | 0;
           HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$10 + 4 >> 2] = $13;
           $8 = $1 + 24 | 0;
           $13 = HEAP32[$8 + 4 >> 2];
           $10 = $4 + 16 | 0;
           HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$10 + 4 >> 2] = $13;
           $8 = $1 + 16 | 0;
           $13 = HEAP32[$8 + 4 >> 2];
           $10 = $4 + 8 | 0;
           HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$10 + 4 >> 2] = $13;
           $8 = $1 + 8 | 0;
           $13 = HEAP32[$8 + 4 >> 2];
           HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$4 + 4 >> 2] = $13;
           $4 = $1 + 176 | 0;
           $8 = HEAP32[$4 + 4 >> 2];
           $13 = $11 + 8 | 0;
           HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$13 + 4 >> 2] = $8;
           $4 = $1 + 184 | 0;
           $8 = HEAP32[$4 + 4 >> 2];
           $13 = $11 + 16 | 0;
           HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$13 + 4 >> 2] = $8;
           $4 = $1 + 192 | 0;
           $8 = HEAP32[$4 + 4 >> 2];
           $13 = $11 + 24 | 0;
           HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$13 + 4 >> 2] = $8;
           $4 = $1 + 168 | 0;
           $8 = HEAP32[$4 + 4 >> 2];
           HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$11 + 4 >> 2] = $8;
           $4 = $1 + 328 | 0;
           $11 = HEAP32[$4 + 4 >> 2];
           HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$9 + 4 >> 2] = $11;
           $4 = $1 + 336 | 0;
           $11 = HEAP32[$4 + 4 >> 2];
           $8 = $9 + 8 | 0;
           HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$8 + 4 >> 2] = $11;
           $4 = $1 + 344 | 0;
           $11 = HEAP32[$4 + 4 >> 2];
           $8 = $9 + 16 | 0;
           HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$8 + 4 >> 2] = $11;
           $1 = $1 + 352 | 0;
           $4 = HEAP32[$1 + 4 >> 2];
           $11 = $9 + 24 | 0;
           HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
           HEAP32[$11 + 4 >> 2] = $4;
           break label$16;
          }
          $3 = 2;
          if (($1 | 0) < 2) {
           break label$15
          }
          $5 = HEAPU8[$0 + 664 | 0];
         }
         if ($5 & 2) {
          break label$14
         }
         $3 = $3 - 1 | 0;
         HEAP32[$0 >> 2] = $3;
         $1 = ($3 << 5) + $0 | 0;
         $4 = $1 + 32 | 0;
         $11 = HEAP32[$4 + 4 >> 2];
         $9 = $2 + 24 | 0;
         HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$9 + 4 >> 2] = $11;
         $4 = $1 + 24 | 0;
         $11 = HEAP32[$4 + 4 >> 2];
         $9 = $2 + 16 | 0;
         HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$9 + 4 >> 2] = $11;
         $4 = $1 + 16 | 0;
         $11 = HEAP32[$4 + 4 >> 2];
         $9 = $2 + 8 | 0;
         HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$9 + 4 >> 2] = $11;
         $4 = $1 + 8 | 0;
         $11 = HEAP32[$4 + 4 >> 2];
         HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$2 + 4 >> 2] = $11;
         $2 = $1 + 176 | 0;
         $4 = HEAP32[$2 + 4 >> 2];
         $11 = $17 + 8 | 0;
         HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$11 + 4 >> 2] = $4;
         $2 = $1 + 184 | 0;
         $4 = HEAP32[$2 + 4 >> 2];
         $11 = $17 + 16 | 0;
         HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$11 + 4 >> 2] = $4;
         $2 = $1 + 192 | 0;
         $4 = HEAP32[$2 + 4 >> 2];
         $11 = $17 + 24 | 0;
         HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$11 + 4 >> 2] = $4;
         $2 = $1 + 168 | 0;
         $4 = HEAP32[$2 + 4 >> 2];
         HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$17 + 4 >> 2] = $4;
         $2 = $1 + 328 | 0;
         $4 = HEAP32[$2 + 4 >> 2];
         HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$12 + 4 >> 2] = $4;
         $2 = $1 + 336 | 0;
         $4 = HEAP32[$2 + 4 >> 2];
         $17 = $12 + 8 | 0;
         HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$17 + 4 >> 2] = $4;
         $2 = $1 + 344 | 0;
         $4 = HEAP32[$2 + 4 >> 2];
         $17 = $12 + 16 | 0;
         HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
         HEAP32[$17 + 4 >> 2] = $4;
         $1 = $1 + 352 | 0;
         $2 = HEAP32[$1 + 4 >> 2];
         $4 = $12 + 24 | 0;
         HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
         HEAP32[$4 + 4 >> 2] = $2;
         break label$14;
        }
        $3 = 1;
        if (($1 | 0) != 1) {
         break label$13
        }
        $5 = HEAPU8[$0 + 664 | 0];
       }
       if ($5 & 1) {
        break label$13
       }
       $3 = $3 - 1 | 0;
       HEAP32[$0 >> 2] = $3;
       $3 = ($3 << 5) + $0 | 0;
       $1 = $3 + 32 | 0;
       $5 = HEAP32[$1 + 4 >> 2];
       $2 = $7 + 24 | 0;
       HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$2 + 4 >> 2] = $5;
       $1 = $3 + 24 | 0;
       $5 = HEAP32[$1 + 4 >> 2];
       $2 = $7 + 16 | 0;
       HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$2 + 4 >> 2] = $5;
       $1 = $3 + 16 | 0;
       $5 = HEAP32[$1 + 4 >> 2];
       $2 = $7 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$2 + 4 >> 2] = $5;
       $1 = $3 + 8 | 0;
       $5 = HEAP32[$1 + 4 >> 2];
       HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$7 + 4 >> 2] = $5;
       $5 = $3 + 176 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $1 = $0 + 168 | 0;
       $2 = $1 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 184 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 16 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 192 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 24 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 168 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$1 + 4 >> 2] = $7;
       $5 = $3 + 328 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $1 = $0 + 328 | 0;
       HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$1 + 4 >> 2] = $7;
       $5 = $3 + 336 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $5 = $3 + 344 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $2 = $1 + 16 | 0;
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $3 = $3 + 352 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       $1 = $1 + 24 | 0;
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$1 + 4 >> 2] = $5;
      }
      $5 = 0;
      if (!($6 >= 0.0) | (!(HEAPF64[$22 >> 3] >= 0.0) | !($16 >= 0.0))) {
       break label$4
      }
      $5 = HEAPF64[$0 + 696 >> 3] >= 0.0;
      break label$4;
     case 3:
      break label$5;
     default:
      break label$4;
     };
    }
    $4 = $19 + 24 | 0;
    $1 = $4;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $11 = $19 + 16 | 0;
    $1 = $11;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $9 = $19 + 8 | 0;
    $1 = $9;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$19 + 4 >> 2] = 0;
    $1 = __stack_pointer - 80 | 0;
    __stack_pointer = $1;
    $7 = HEAP32[$19 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$19 >> 2];
    HEAP32[$3 + 4 >> 2] = $7;
    $2 = HEAP32[$4 >> 2];
    $7 = HEAP32[$4 + 4 >> 2];
    $4 = $11;
    $17 = HEAP32[$4 >> 2];
    $12 = HEAP32[$4 + 4 >> 2];
    $11 = $9;
    $9 = HEAP32[$9 + 4 >> 2];
    $22 = HEAP32[$11 >> 2];
    HEAP8[$3 + 32 | 0] = HEAPU8[$3 + 32 | 0] | 15;
    $8 = $3 + 8 | 0;
    HEAP32[$8 >> 2] = $22;
    HEAP32[$8 + 4 >> 2] = $9;
    $9 = $3 + 16 | 0;
    HEAP32[$9 >> 2] = $17;
    HEAP32[$9 + 4 >> 2] = $12;
    $17 = $3 + 24 | 0;
    HEAP32[$17 >> 2] = $2;
    HEAP32[$17 + 4 >> 2] = $7;
    $12 = 0;
    HEAP8[$1 + 32 | 0] = 0;
    $45 = HEAPF64[$4 >> 3];
    $7 = $0 + 8 | 0;
    $16 = HEAPF64[$7 + 16 >> 3];
    $44 = $45 - $16;
    $2 = $0 + 72 | 0;
    $23 = HEAPF64[$2 + 16 >> 3];
    $6 = $23 - $16;
    $4 = $0 + 104 | 0;
    $29 = HEAPF64[$4 >> 3];
    $14 = HEAPF64[$7 >> 3];
    $15 = $29 - $14;
    $17 = $0 + 40 | 0;
    $18 = HEAPF64[$17 + 8 >> 3];
    $21 = HEAPF64[$7 + 8 >> 3];
    $24 = $18 - $21;
    $25 = HEAPF64[$17 >> 3];
    $20 = $25 - $14;
    $38 = HEAPF64[$4 + 8 >> 3];
    $27 = $38 - $21;
    $36 = $15 * $24 - $20 * $27;
    $39 = HEAPF64[$2 >> 3];
    $28 = $39 - $14;
    $31 = HEAPF64[$17 + 16 >> 3];
    $32 = $31 - $16;
    $46 = HEAPF64[$4 + 16 >> 3];
    $33 = $46 - $16;
    $37 = $27 * $32 - $24 * $33;
    $40 = HEAPF64[$2 + 8 >> 3];
    $34 = $40 - $21;
    $41 = $33 * $20 - $32 * $15;
    $35 = $6 * $36 + ($28 * $37 + $34 * $41);
    $42 = $44 * $36;
    $47 = HEAPF64[$19 >> 3];
    $36 = $47 - $14;
    $43 = $36 * $37;
    $48 = HEAPF64[$11 >> 3];
    $37 = $48 - $21;
    $11 = $35 * $35 < 1.0000000000000001e-16 ? -1 : ($42 + ($43 + $37 * $41)) * $35 < 0.0;
    $41 = $20 * $34 - $28 * $24;
    $42 = $24 * $6 - $34 * $32;
    $43 = $32 * $28 - $6 * $20;
    $35 = $33 * $41 + ($15 * $42 + $43 * $27);
    $49 = $16 - $31;
    $16 = $29 - $25;
    $29 = $40 - $18;
    $39 = $39 - $25;
    $38 = $38 - $18;
    $40 = $16 * $29 - $39 * $38;
    $50 = $14 - $25;
    $14 = $23 - $31;
    $23 = $46 - $31;
    $29 = $38 * $14 - $29 * $23;
    $14 = $23 * $39 - $14 * $16;
    $16 = $49 * $40 + ($50 * $29 + ($21 - $18) * $14);
    $21 = $28 * $27 - $15 * $34;
    $23 = $20;
    $20 = $34 * $33 - $27 * $6;
    $15 = $6 * $15 - $33 * $28;
    $6 = $32 * $21 + ($23 * $20 + $24 * $15);
    $9 = $6 * $6 < 1.0000000000000001e-16 ? -1 : ($44 * $21 + ($36 * $20 + $37 * $15)) * $6 < 0.0;
    $22 = $16 * $16 < 1.0000000000000001e-16 ? -1 : (($45 - $31) * $40 + (($47 - $25) * $29 + ($48 - $18) * $14)) * $16 < 0.0;
    $8 = $35 * $35 < 1.0000000000000001e-16 ? -1 : ($44 * $41 + ($36 * $42 + $37 * $43)) * $35 < 0.0;
    $13 = $9 | ($22 | ($11 | $8));
    label$10 : {
     if (($13 | 0) < 0) {
      HEAP8[$3 + 72 | 0] = 1;
      break label$10;
     }
     if (!$13) {
      break label$10
     }
     $18 = 3402823466385288598117041.0e14;
     label$31 : {
      if (!$8) {
       break label$31
      }
      btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($19, $7, $17, $2, $1);
      $16 = HEAPF64[$1 + 16 >> 3];
      $6 = $16 - HEAPF64[$19 + 16 >> 3];
      $18 = $6 * $6;
      $6 = HEAPF64[$1 >> 3];
      $14 = $6 - HEAPF64[$19 >> 3];
      $20 = $14 * $14;
      $14 = HEAPF64[$1 + 8 >> 3];
      $15 = $14 - HEAPF64[$19 + 8 >> 3];
      $15 = $18 + ($20 + $15 * $15);
      $18 = 3402823466385288598117041.0e14;
      if (!($15 < 3402823466385288598117041.0e14)) {
       break label$31
      }
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$1 + 24 >> 3];
      HEAPF64[$3 + 16 >> 3] = $16;
      HEAPF64[$3 + 8 >> 3] = $14;
      HEAPF64[$3 >> 3] = $6;
      HEAPF64[$3 + 40 >> 3] = HEAPF64[$1 + 40 >> 3];
      $12 = $3 - -64 | 0;
      HEAP32[$12 >> 2] = 0;
      HEAP32[$12 + 4 >> 2] = 0;
      HEAPF64[$3 + 56 >> 3] = HEAPF64[$1 + 56 >> 3];
      HEAPF64[$3 + 48 >> 3] = HEAPF64[$1 + 48 >> 3];
      $12 = HEAPU8[$1 + 32 | 0];
      HEAP8[$3 + 32 | 0] = $12 & 1 | HEAPU8[$3 + 32 | 0] & 240 | $12 & 2 | $12 & 4;
      $18 = $15;
     }
     $16 = $18;
     label$52 : {
      if (!$9) {
       break label$52
      }
      btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($19, $7, $2, $4, $1);
      $14 = HEAPF64[$1 + 16 >> 3];
      $6 = $14 - HEAPF64[$19 + 16 >> 3];
      $20 = $6 * $6;
      $15 = HEAPF64[$1 >> 3];
      $6 = $15 - HEAPF64[$19 >> 3];
      $23 = $6 * $6;
      $18 = HEAPF64[$1 + 8 >> 3];
      $6 = $18 - HEAPF64[$19 + 8 >> 3];
      $6 = $20 + ($23 + $6 * $6);
      if (!($6 < $16)) {
       break label$52
      }
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$1 + 24 >> 3];
      HEAPF64[$3 + 16 >> 3] = $14;
      HEAPF64[$3 + 8 >> 3] = $18;
      HEAPF64[$3 >> 3] = $15;
      HEAPF64[$3 + 40 >> 3] = HEAPF64[$1 + 40 >> 3];
      $12 = $3 + 48 | 0;
      HEAP32[$12 >> 2] = 0;
      HEAP32[$12 + 4 >> 2] = 0;
      HEAPF64[$3 - -64 >> 3] = HEAPF64[$1 + 56 >> 3];
      HEAPF64[$3 + 56 >> 3] = HEAPF64[$1 + 48 >> 3];
      $12 = HEAPU8[$1 + 32 | 0];
      $9 = $12 << 1;
      HEAP8[$3 + 32 | 0] = $9 & 8 | ($9 & 4 | ($12 & 1 | HEAPU8[$3 + 32 | 0] & 240));
      $16 = $6;
     }
     label$63 : {
      if (!$11) {
       break label$63
      }
      btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($19, $7, $4, $17, $1);
      $14 = HEAPF64[$1 + 16 >> 3];
      $6 = $14 - HEAPF64[$19 + 16 >> 3];
      $20 = $6 * $6;
      $15 = HEAPF64[$1 >> 3];
      $6 = $15 - HEAPF64[$19 >> 3];
      $23 = $6 * $6;
      $18 = HEAPF64[$1 + 8 >> 3];
      $6 = $18 - HEAPF64[$19 + 8 >> 3];
      $6 = $20 + ($23 + $6 * $6);
      if (!($6 < $16)) {
       break label$63
      }
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$1 + 24 >> 3];
      HEAPF64[$3 + 16 >> 3] = $14;
      HEAPF64[$3 + 8 >> 3] = $18;
      HEAPF64[$3 >> 3] = $15;
      HEAPF64[$3 + 40 >> 3] = HEAPF64[$1 + 40 >> 3];
      $11 = $3 + 56 | 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[$11 + 4 >> 2] = 0;
      HEAPF64[$3 - -64 >> 3] = HEAPF64[$1 + 48 >> 3];
      HEAPF64[$3 + 48 >> 3] = HEAPF64[$1 + 56 >> 3];
      $11 = HEAPU8[$1 + 32 | 0];
      HEAP8[$3 + 32 | 0] = $11 & 1 | HEAPU8[$3 + 32 | 0] & 240 | $11 >>> 1 & 2 | $11 << 2 & 8;
      $16 = $6;
     }
     $12 = 1;
     if (!$22) {
      break label$10
     }
     btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($19, $17, $4, $2, $1);
     $6 = HEAPF64[$1 + 16 >> 3];
     $14 = $6 - HEAPF64[$19 + 16 >> 3];
     $20 = $14 * $14;
     $14 = HEAPF64[$1 >> 3];
     $15 = $14 - HEAPF64[$19 >> 3];
     $23 = $15 * $15;
     $15 = HEAPF64[$1 + 8 >> 3];
     $18 = $15 - HEAPF64[$19 + 8 >> 3];
     if (!($16 > $20 + ($23 + $18 * $18))) {
      break label$10
     }
     HEAPF64[$3 + 24 >> 3] = HEAPF64[$1 + 24 >> 3];
     HEAPF64[$3 + 16 >> 3] = $6;
     HEAPF64[$3 + 8 >> 3] = $15;
     HEAPF64[$3 >> 3] = $14;
     HEAP32[$3 + 40 >> 2] = 0;
     HEAP32[$3 + 44 >> 2] = 0;
     HEAPF64[$3 + 48 >> 3] = HEAPF64[$1 + 40 >> 3];
     HEAPF64[$3 - -64 >> 3] = HEAPF64[$1 + 48 >> 3];
     HEAPF64[$3 + 56 >> 3] = HEAPF64[$1 + 56 >> 3];
     $11 = HEAPU8[$1 + 32 | 0];
     HEAP8[$3 + 32 | 0] = $11 & 4 | HEAPU8[$3 + 32 | 0] & 240 | $11 << 1 & 2 | $11 << 2 & 8;
    }
    __stack_pointer = $1 + 80 | 0;
    if ($12) {
     $3 = $0 + 512 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $6 = HEAPF64[$0 + 672 >> 3];
     $14 = HEAPF64[$0 + 680 >> 3];
     $15 = HEAPF64[$0 + 688 >> 3];
     $16 = HEAPF64[$0 + 696 >> 3];
     $18 = $6 * HEAPF64[$0 + 184 >> 3] + $14 * HEAPF64[$0 + 216 >> 3] + $15 * HEAPF64[$0 + 248 >> 3] + $16 * HEAPF64[$0 + 280 >> 3];
     HEAPF64[$0 + 504 >> 3] = $18;
     $21 = $6 * HEAPF64[$0 + 176 >> 3] + $14 * HEAPF64[$0 + 208 >> 3] + $15 * HEAPF64[$0 + 240 >> 3] + $16 * HEAPF64[$0 + 272 >> 3];
     HEAPF64[$0 + 496 >> 3] = $21;
     $11 = $0 + 200 | 0;
     $12 = $0 + 232 | 0;
     $9 = $0 + 264 | 0;
     $24 = $6 * HEAPF64[$0 + 168 >> 3] + $14 * HEAPF64[$11 >> 3] + $15 * HEAPF64[$12 >> 3] + $16 * HEAPF64[$9 >> 3];
     HEAPF64[$0 + 488 >> 3] = $24;
     $3 = $0 + 576 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 544 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $22 = $0 + 360 | 0;
     $8 = $0 + 392 | 0;
     $13 = $0 + 424 | 0;
     $25 = $6 * HEAPF64[$0 + 328 >> 3] + $14 * HEAPF64[$22 >> 3] + $15 * HEAPF64[$8 >> 3] + $16 * HEAPF64[$13 >> 3];
     HEAPF64[$0 + 520 >> 3] = $25;
     $20 = $6 * HEAPF64[$0 + 336 >> 3] + $14 * HEAPF64[$0 + 368 >> 3] + $15 * HEAPF64[$0 + 400 >> 3] + $16 * HEAPF64[$0 + 432 >> 3];
     HEAPF64[$0 + 528 >> 3] = $20;
     $6 = $6 * HEAPF64[$0 + 344 >> 3] + $14 * HEAPF64[$0 + 376 >> 3] + $15 * HEAPF64[$0 + 408 >> 3] + $16 * HEAPF64[$0 + 440 >> 3];
     HEAPF64[$0 + 536 >> 3] = $6;
     HEAPF64[$0 + 552 >> 3] = $24 - $25;
     HEAPF64[$0 + 560 >> 3] = $21 - $20;
     HEAPF64[$0 + 568 >> 3] = $18 - $6;
     label$22 : {
      label$23 : {
       label$24 : {
        label$25 : {
         label$26 : {
          $1 = HEAP32[$0 >> 2];
          label$27 : {
           if (($1 | 0) >= 4) {
            $5 = HEAPU8[$0 + 664 | 0];
            if ($5 & 8) {
             $3 = $1;
             break label$27;
            }
            $3 = $1 - 1 | 0;
            $1 = ($3 << 5) + $0 | 0;
            $10 = $1 + 32 | 0;
            $26 = HEAP32[$10 + 4 >> 2];
            $30 = $4 + 24 | 0;
            HEAP32[$30 >> 2] = HEAP32[$10 >> 2];
            HEAP32[$30 + 4 >> 2] = $26;
            $10 = $1 + 24 | 0;
            $26 = HEAP32[$10 + 4 >> 2];
            $30 = $4 + 16 | 0;
            HEAP32[$30 >> 2] = HEAP32[$10 >> 2];
            HEAP32[$30 + 4 >> 2] = $26;
            $10 = $1 + 16 | 0;
            $26 = HEAP32[$10 + 4 >> 2];
            $30 = $4 + 8 | 0;
            HEAP32[$30 >> 2] = HEAP32[$10 >> 2];
            HEAP32[$30 + 4 >> 2] = $26;
            $10 = $1 + 8 | 0;
            $26 = HEAP32[$10 + 4 >> 2];
            HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
            HEAP32[$4 + 4 >> 2] = $26;
            HEAP32[$0 >> 2] = $3;
            $4 = $1 + 168 | 0;
            $10 = HEAP32[$4 + 4 >> 2];
            HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$9 + 4 >> 2] = $10;
            $4 = $1 + 176 | 0;
            $10 = HEAP32[$4 + 4 >> 2];
            $26 = $9 + 8 | 0;
            HEAP32[$26 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$26 + 4 >> 2] = $10;
            $4 = $1 + 184 | 0;
            $10 = HEAP32[$4 + 4 >> 2];
            $26 = $9 + 16 | 0;
            HEAP32[$26 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$26 + 4 >> 2] = $10;
            $4 = $9 + 24 | 0;
            $9 = $1 + 192 | 0;
            $10 = HEAP32[$9 + 4 >> 2];
            HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
            HEAP32[$4 + 4 >> 2] = $10;
            $4 = $1 + 328 | 0;
            $9 = HEAP32[$4 + 4 >> 2];
            HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$13 + 4 >> 2] = $9;
            $4 = $1 + 336 | 0;
            $9 = HEAP32[$4 + 4 >> 2];
            $10 = $13 + 8 | 0;
            HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$10 + 4 >> 2] = $9;
            $4 = $1 + 344 | 0;
            $9 = HEAP32[$4 + 4 >> 2];
            $10 = $13 + 16 | 0;
            HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$10 + 4 >> 2] = $9;
            $1 = $1 + 352 | 0;
            $4 = HEAP32[$1 + 4 >> 2];
            $9 = $13 + 24 | 0;
            HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
            HEAP32[$9 + 4 >> 2] = $4;
            break label$27;
           }
           $3 = 3;
           if (($1 | 0) != 3) {
            break label$26
           }
           $5 = HEAPU8[$0 + 664 | 0];
          }
          if ($5 & 4) {
           break label$25
          }
          $3 = $3 - 1 | 0;
          HEAP32[$0 >> 2] = $3;
          $1 = ($3 << 5) + $0 | 0;
          $4 = $1 + 32 | 0;
          $9 = HEAP32[$4 + 4 >> 2];
          $13 = $2 + 24 | 0;
          HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
          HEAP32[$13 + 4 >> 2] = $9;
          $4 = $1 + 24 | 0;
          $9 = HEAP32[$4 + 4 >> 2];
          $13 = $2 + 16 | 0;
          HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
          HEAP32[$13 + 4 >> 2] = $9;
          $4 = $1 + 16 | 0;
          $9 = HEAP32[$4 + 4 >> 2];
          $13 = $2 + 8 | 0;
          HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
          HEAP32[$13 + 4 >> 2] = $9;
          $4 = $1 + 8 | 0;
          $9 = HEAP32[$4 + 4 >> 2];
          HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
          HEAP32[$2 + 4 >> 2] = $9;
          $2 = $1 + 176 | 0;
          $4 = HEAP32[$2 + 4 >> 2];
          $9 = $12 + 8 | 0;
          HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$9 + 4 >> 2] = $4;
          $2 = $1 + 184 | 0;
          $4 = HEAP32[$2 + 4 >> 2];
          $9 = $12 + 16 | 0;
          HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$9 + 4 >> 2] = $4;
          $2 = $1 + 192 | 0;
          $4 = HEAP32[$2 + 4 >> 2];
          $9 = $12 + 24 | 0;
          HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$9 + 4 >> 2] = $4;
          $2 = $1 + 168 | 0;
          $4 = HEAP32[$2 + 4 >> 2];
          HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$12 + 4 >> 2] = $4;
          $2 = $1 + 328 | 0;
          $4 = HEAP32[$2 + 4 >> 2];
          HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$8 + 4 >> 2] = $4;
          $2 = $1 + 336 | 0;
          $4 = HEAP32[$2 + 4 >> 2];
          $12 = $8 + 8 | 0;
          HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$12 + 4 >> 2] = $4;
          $2 = $1 + 344 | 0;
          $4 = HEAP32[$2 + 4 >> 2];
          $12 = $8 + 16 | 0;
          HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
          HEAP32[$12 + 4 >> 2] = $4;
          $1 = $1 + 352 | 0;
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = $8 + 24 | 0;
          HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$4 + 4 >> 2] = $2;
          break label$25;
         }
         $3 = 2;
         if (($1 | 0) < 2) {
          break label$24
         }
         $5 = HEAPU8[$0 + 664 | 0];
        }
        if ($5 & 2) {
         break label$23
        }
        $3 = $3 - 1 | 0;
        HEAP32[$0 >> 2] = $3;
        $1 = ($3 << 5) + $0 | 0;
        $2 = $1 + 32 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $12 = $17 + 24 | 0;
        HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$12 + 4 >> 2] = $4;
        $2 = $1 + 24 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $12 = $17 + 16 | 0;
        HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$12 + 4 >> 2] = $4;
        $2 = $1 + 16 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $12 = $17 + 8 | 0;
        HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$12 + 4 >> 2] = $4;
        $2 = $1 + 8 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$17 + 4 >> 2] = $4;
        $2 = $1 + 176 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $17 = $11 + 8 | 0;
        HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$17 + 4 >> 2] = $4;
        $2 = $1 + 184 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $17 = $11 + 16 | 0;
        HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$17 + 4 >> 2] = $4;
        $2 = $1 + 192 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $17 = $11 + 24 | 0;
        HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$17 + 4 >> 2] = $4;
        $2 = $1 + 168 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$11 + 4 >> 2] = $4;
        $2 = $1 + 328 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$22 + 4 >> 2] = $4;
        $2 = $1 + 336 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $17 = $22 + 8 | 0;
        HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$17 + 4 >> 2] = $4;
        $2 = $1 + 344 | 0;
        $4 = HEAP32[$2 + 4 >> 2];
        $17 = $22 + 16 | 0;
        HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$17 + 4 >> 2] = $4;
        $1 = $1 + 352 | 0;
        $2 = HEAP32[$1 + 4 >> 2];
        $4 = $22 + 24 | 0;
        HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
        HEAP32[$4 + 4 >> 2] = $2;
        break label$23;
       }
       $3 = 1;
       if (($1 | 0) != 1) {
        break label$22
       }
       $5 = HEAPU8[$0 + 664 | 0];
      }
      if ($5 & 1) {
       break label$22
      }
      $3 = $3 - 1 | 0;
      HEAP32[$0 >> 2] = $3;
      $3 = ($3 << 5) + $0 | 0;
      $1 = $3 + 32 | 0;
      $5 = HEAP32[$1 + 4 >> 2];
      $2 = $7 + 24 | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $5;
      $1 = $3 + 24 | 0;
      $5 = HEAP32[$1 + 4 >> 2];
      $2 = $7 + 16 | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $5;
      $1 = $3 + 16 | 0;
      $5 = HEAP32[$1 + 4 >> 2];
      $2 = $7 + 8 | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $5;
      $1 = $3 + 8 | 0;
      $5 = HEAP32[$1 + 4 >> 2];
      HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$7 + 4 >> 2] = $5;
      $5 = $3 + 176 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $1 = $0 + 168 | 0;
      $2 = $1 + 8 | 0;
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $7;
      $5 = $3 + 184 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $2 = $1 + 16 | 0;
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $7;
      $5 = $3 + 192 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $2 = $1 + 24 | 0;
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $7;
      $5 = $3 + 168 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$1 + 4 >> 2] = $7;
      $5 = $3 + 328 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $1 = $0 + 328 | 0;
      HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$1 + 4 >> 2] = $7;
      $5 = $3 + 336 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $2 = $1 + 8 | 0;
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $7;
      $5 = $3 + 344 | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $2 = $1 + 16 | 0;
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $7;
      $3 = $3 + 352 | 0;
      $5 = HEAP32[$3 + 4 >> 2];
      $1 = $1 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
     }
     $5 = HEAPF64[$0 + 672 >> 3] >= 0.0 & HEAPF64[$0 + 680 >> 3] >= 0.0 & HEAPF64[$0 + 688 >> 3] >= 0.0 & $16 >= 0.0;
     break label$4;
    }
    if (HEAPU8[$0 + 704 | 0]) {
     break label$4
    }
    HEAP32[$0 + 552 >> 2] = 0;
    HEAP32[$0 + 556 >> 2] = 0;
    $5 = 1;
    HEAP8[$0 + 624 | 0] = 1;
    $3 = $0 + 560 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $0 + 568 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $0 = $0 + 576 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    break label$1;
   }
   HEAP8[$0 + 624 | 0] = $5;
  }
  __stack_pointer = $19 + 32 | 0;
  return ($5 | 0) != 0;
 }
 
 function btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
  $10 = HEAPU8[$4 + 32 | 0] & -16;
  HEAP8[$4 + 32 | 0] = $10;
  $27 = HEAPF64[$3 + 16 >> 3];
  $13 = HEAPF64[$1 + 16 >> 3];
  $17 = $27 - $13;
  $7 = HEAPF64[$0 + 16 >> 3];
  $6 = $7 - $13;
  $28 = HEAPF64[$3 >> 3];
  $14 = HEAPF64[$1 >> 3];
  $18 = $28 - $14;
  $11 = HEAPF64[$0 >> 3];
  $8 = $11 - $14;
  $29 = HEAPF64[$3 + 8 >> 3];
  $15 = HEAPF64[$1 + 8 >> 3];
  $19 = $29 - $15;
  $9 = HEAPF64[$0 + 8 >> 3];
  $12 = $9 - $15;
  $5 = $17 * $6 + ($18 * $8 + $19 * $12);
  folding_inner0 : {
   $24 = HEAPF64[$2 + 16 >> 3];
   $20 = $24 - $13;
   $25 = HEAPF64[$2 >> 3];
   $21 = $25 - $14;
   $26 = HEAPF64[$2 + 8 >> 3];
   $22 = $26 - $15;
   $8 = $20 * $6 + ($21 * $8 + $22 * $12);
   if (!(!($8 <= 0.0) | !($5 <= 0.0))) {
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$4 + 4 >> 2] = $0;
    $0 = $1 + 24 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    $3 = $4 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    $0 = $1 + 16 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    $3 = $4 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    $0 = $1 + 8 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = $4 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    $0 = $4 + 48 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$4 + 40 >> 2] = 0;
    HEAP32[$4 + 44 >> 2] = 1072693248;
    HEAP8[$4 + 32 | 0] = $10 | 1;
    $0 = $4 + 56 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    break folding_inner0;
   }
   $6 = $7 - $24;
   $16 = $11 - $25;
   $23 = $9 - $26;
   $12 = $17 * $6 + ($18 * $16 + $19 * $23);
   $6 = $20 * $6 + ($21 * $16 + $22 * $23);
   if (!(!($6 >= 0.0) | !($6 >= $12))) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $0;
    $0 = $2 + 24 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $3 = $4 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$3 + 4 >> 2] = $1;
    $0 = $2 + 16 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $3 = $4 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$3 + 4 >> 2] = $1;
    $0 = $2 + 8 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = $4 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    $0 = $4 + 56 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $4 + 48 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 1072693248;
    HEAP32[$4 + 40 >> 2] = 0;
    HEAP32[$4 + 44 >> 2] = 0;
    HEAP8[$4 + 32 | 0] = $10 | 2;
    break folding_inner0;
   }
   $16 = $8 * $12 - $5 * $6;
   if (!(!($16 <= 0.0) | (!($6 <= 0.0) | !($8 >= 0.0)))) {
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    $0 = $4 + 56 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP8[$4 + 32 | 0] = $10 | 3;
    $0 = $4 - -64 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $5 = $8 / ($8 - $6);
    HEAPF64[$4 + 48 >> 3] = $5;
    HEAPF64[$4 + 40 >> 3] = 1.0 - $5;
    HEAPF64[$4 + 16 >> 3] = $13 + $20 * $5;
    HEAPF64[$4 + 8 >> 3] = $15 + $22 * $5;
    HEAPF64[$4 >> 3] = $14 + $21 * $5;
    return;
   }
   $7 = $7 - $27;
   $23 = $11 - $28;
   $9 = $9 - $29;
   $11 = $20 * $7 + ($21 * $23 + $22 * $9);
   $7 = $17 * $7 + ($18 * $23 + $19 * $9);
   if (!(!($7 >= 0.0) | !($7 >= $11))) {
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = $0;
    $0 = $3 + 24 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = $4 + 24 | 0;
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    $0 = $3 + 16 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = $4 + 16 | 0;
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    $0 = $3 + 8 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = $4 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    HEAP32[$4 + 40 >> 2] = 0;
    HEAP32[$4 + 44 >> 2] = 0;
    HEAP8[$4 + 32 | 0] = $10 | 4;
    $0 = $4 + 48 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $4 - -64 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $4 + 56 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 1072693248;
    return;
   }
   $8 = $11 * $5 - $7 * $8;
   if (!(!($8 <= 0.0) | (!($7 <= 0.0) | !($5 >= 0.0)))) {
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    $0 = $4 - -64 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $4 + 48 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP8[$4 + 32 | 0] = $10 | 5;
    $5 = $5 / ($5 - $7);
    HEAPF64[$4 + 56 >> 3] = $5;
    HEAPF64[$4 + 40 >> 3] = 1.0 - $5;
    HEAPF64[$4 + 16 >> 3] = $13 + $17 * $5;
    HEAPF64[$4 + 8 >> 3] = $15 + $19 * $5;
    HEAPF64[$4 >> 3] = $14 + $18 * $5;
    return;
   }
   label$6 : {
    $9 = $6 * $7 - $12 * $11;
    if (!($9 <= 0.0)) {
     break label$6
    }
    $5 = $12 - $6;
    if (!($5 >= 0.0)) {
     break label$6
    }
    $6 = $11 - $7;
    if (!($6 >= 0.0)) {
     break label$6
    }
    HEAP32[$4 + 40 >> 2] = 0;
    HEAP32[$4 + 44 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    $0 = $4 - -64 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP8[$4 + 32 | 0] = $10 | 6;
    $5 = $5 / ($5 + $6);
    HEAPF64[$4 + 56 >> 3] = $5;
    HEAPF64[$4 + 48 >> 3] = 1.0 - $5;
    HEAPF64[$4 + 16 >> 3] = $24 + ($27 - $24) * $5;
    HEAPF64[$4 + 8 >> 3] = $26 + ($29 - $26) * $5;
    HEAPF64[$4 >> 3] = $25 + ($28 - $25) * $5;
    return;
   }
   HEAP32[$4 + 24 >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 0;
   $0 = $4 - -64 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP8[$4 + 32 | 0] = $10 | 7;
   $6 = 1.0 / ($16 + ($9 + $8));
   $5 = $16 * $6;
   HEAPF64[$4 + 56 >> 3] = $5;
   $6 = $8 * $6;
   HEAPF64[$4 + 48 >> 3] = $6;
   HEAPF64[$4 + 40 >> 3] = 1.0 - $6 - $5;
   HEAPF64[$4 + 16 >> 3] = $17 * $5 + ($13 + $20 * $6);
   HEAPF64[$4 + 8 >> 3] = $19 * $5 + ($15 + $22 * $6);
   HEAPF64[$4 >> 3] = $18 * $5 + ($14 + $21 * $6);
   return;
  }
  $0 = $4 - -64 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btVoronoiSimplexSolver__closest_28btVector3__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $5 = btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0);
  $3 = $0 + 576 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $1 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 568 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $1 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 560 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $1 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$0 + 556 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 + 552 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  return $5;
 }
 
 function btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0;
  $5 = HEAP32[$0 >> 2];
  label$1 : {
   if (($5 | 0) <= 0) {
    break label$1
   }
   $3 = $0 + 16 | 0;
   $7 = HEAPF64[$0 + 616 >> 3];
   $8 = HEAPF64[$1 + 16 >> 3];
   $9 = HEAPF64[$1 + 8 >> 3];
   $10 = HEAPF64[$1 >> 3];
   $4 = 1;
   while (1) {
    $2 = $8 - HEAPF64[$3 + 8 >> 3];
    $11 = $2 * $2;
    $2 = $10 - HEAPF64[$3 - 8 >> 3];
    $12 = $2 * $2;
    $2 = $9 - HEAPF64[$3 >> 3];
    if ($11 + ($12 + $2 * $2) <= $7) {
     break label$1
    }
    $3 = $3 + 32 | 0;
    $6 = $6 + 1 | 0;
    $4 = ($6 | 0) < ($5 | 0);
    if (($6 | 0) != ($5 | 0)) {
     continue
    }
    break;
   };
  }
  if (!(HEAPF64[$1 + 24 >> 3] != HEAPF64[$0 + 608 >> 3] | HEAPF64[$1 + 16 >> 3] != HEAPF64[$0 + 600 >> 3] | HEAPF64[$1 + 8 >> 3] != HEAPF64[$0 + 592 >> 3])) {
   $4 = HEAPF64[$1 >> 3] == HEAPF64[$0 + 584 >> 3] | $4
  }
  return $4 & 1;
 }
 
 function btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0);
  $3 = HEAP32[$0 + 492 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 + 488 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $4 = $0 + 512 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $4 = $0 + 504 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $1 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $3 = $0 + 496 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $1 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 544 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 24 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 536 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 16 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $3 = $0 + 528 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $2 + 8 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $1 = HEAP32[$0 + 524 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 + 520 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
 }
 
 function btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5 = $0 + 32 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $0 + 24 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 15044;
  HEAP32[$0 + 52 >> 2] = $2;
  HEAP32[$0 + 48 >> 2] = $1;
  HEAP32[$0 + 44 >> 2] = $3;
  HEAP32[$0 + 40 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $3 = $0 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 60 >> 2] = HEAP32[$2 + 4 >> 2];
  (wasm2js_i32$0 = $0, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)), HEAPF64[wasm2js_i32$0 + 64 >> 3] = wasm2js_f64$0;
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
  HEAP32[$0 + 108 >> 2] = 1;
  HEAP32[$0 + 112 >> 2] = 1;
  HEAP32[$0 + 96 >> 2] = -1;
  HEAP8[$0 + 80 | 0] = 0;
  HEAPF64[$0 + 72 >> 3] = $6;
  return $0;
 }
 
 function btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
  $4 = __stack_pointer - 544 | 0;
  __stack_pointer = $4;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  $8 = $4 + 512 | 0;
  $6 = $8 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $8 + 16 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $8 = $8 + 8 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$4 + 512 >> 2] = 0;
  HEAP32[$4 + 516 >> 2] = 0;
  $6 = $1 + 24 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $8 = $4 + 320 | 0;
  $5 = $8 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 16 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 8 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 40 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 40 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 48 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 48 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 56 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 56 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 72 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 72 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 80 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 80 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $1 + 88 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 88 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 320 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 324 >> 2] = $6;
  $6 = HEAP32[$1 + 36 >> 2];
  HEAP32[$4 + 352 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 356 >> 2] = $6;
  $6 = HEAP32[$1 + 68 >> 2];
  HEAP32[$4 + 384 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$4 + 388 >> 2] = $6;
  $6 = $1 + 120 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $8 + 120 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $7 = $1 + 112 | 0;
  $5 = HEAP32[$7 + 4 >> 2];
  $6 = $8 + 112 | 0;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $7 = $8 + 104 | 0;
  $8 = $1 + 104 | 0;
  $5 = HEAP32[$8 + 4 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$7 + 4 >> 2] = $5;
  $8 = HEAP32[$1 + 100 >> 2];
  HEAP32[$4 + 416 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$4 + 420 >> 2] = $8;
  $5 = $1 + 152 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $8 = $4 + 192 | 0;
  $14 = $8 + 24 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 144 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 16 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 136 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 8 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 168 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 40 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 176 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 48 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 184 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 56 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 200 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 72 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 208 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 80 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = $1 + 216 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $14 = $8 + 88 | 0;
  HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$14 + 4 >> 2] = $9;
  $5 = HEAP32[$1 + 132 >> 2];
  HEAP32[$4 + 192 >> 2] = HEAP32[$1 + 128 >> 2];
  HEAP32[$4 + 196 >> 2] = $5;
  $5 = $1 + 160 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  HEAP32[$4 + 224 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 228 >> 2] = $9;
  $5 = $1 + 192 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  HEAP32[$4 + 256 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 260 >> 2] = $9;
  $9 = $1 + 240 | 0;
  $14 = HEAP32[$9 + 4 >> 2];
  $5 = $8 + 112 | 0;
  HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$5 + 4 >> 2] = $14;
  $14 = $1 + 232 | 0;
  $22 = HEAP32[$14 + 4 >> 2];
  $9 = $8 + 104 | 0;
  HEAP32[$9 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$9 + 4 >> 2] = $22;
  $14 = $1 + 248 | 0;
  $22 = HEAP32[$14 + 4 >> 2];
  $8 = $8 + 120 | 0;
  HEAP32[$8 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$8 + 4 >> 2] = $22;
  $12 = HEAPF64[$6 >> 3];
  $10 = HEAPF64[$5 >> 3];
  $24 = ($12 + $10) * .5;
  HEAPF64[$6 >> 3] = $12 - $24;
  $12 = HEAPF64[$7 >> 3];
  $11 = HEAPF64[$9 >> 3];
  $25 = ($12 + $11) * .5;
  HEAPF64[$7 >> 3] = $12 - $25;
  HEAPF64[$9 >> 3] = $11 - $25;
  HEAPF64[$5 >> 3] = $10 - $24;
  $8 = $1 + 224 | 0;
  $6 = HEAP32[$8 + 4 >> 2];
  HEAP32[$4 + 288 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$4 + 292 >> 2] = $6;
  $12 = HEAPF64[$4 + 416 >> 3];
  $10 = HEAPF64[$4 + 288 >> 3];
  $26 = ($12 + $10) * .5;
  HEAPF64[$4 + 416 >> 3] = $12 - $26;
  HEAPF64[$4 + 288 >> 3] = $10 - $26;
  $6 = HEAP32[HEAP32[$0 + 52 >> 2] + 4 >> 2] - 17 >>> 0 < 2 & HEAP32[HEAP32[$0 + 48 >> 2] + 4 >> 2] - 17 >>> 0 <= 1;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = -1;
  HEAP32[$0 + 100 >> 2] = 0;
  $8 = $0 + 16 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 1072693248;
  $8 = $0 + 24 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $0 + 32 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[7904] = HEAP32[7904] + 1;
  $12 = HEAPF64[$0 + 64 >> 3];
  $10 = HEAPF64[$0 + 72 >> 3];
  $8 = HEAPU8[$0 + 80 | 0];
  btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 44 >> 2]);
  $17 = $8 ? 0.0 : $12;
  $18 = $8 ? 0.0 : $10;
  $20 = $17 + $18;
  $8 = $0 + 8 | 0;
  $12 = 1.e+30;
  label$2 : {
   label$3 : {
    label$4 : {
     while (1) {
      HEAP32[$4 + 504 >> 2] = 0;
      HEAP32[$4 + 508 >> 2] = 0;
      $13 = HEAPF64[$0 + 8 >> 3];
      $15 = -$13;
      $10 = HEAPF64[$0 + 16 >> 3];
      $11 = HEAPF64[$0 + 24 >> 3];
      HEAPF64[$4 + 496 >> 3] = HEAPF64[$1 + 16 >> 3] * $15 - HEAPF64[$1 + 48 >> 3] * $10 - HEAPF64[$1 + 80 >> 3] * $11;
      HEAPF64[$4 + 488 >> 3] = HEAPF64[$1 + 8 >> 3] * $15 - $10 * HEAPF64[$1 + 40 >> 3] - $11 * HEAPF64[$1 + 72 >> 3];
      HEAPF64[$4 + 480 >> 3] = HEAPF64[$1 >> 3] * $15 - $10 * HEAPF64[$1 + 32 >> 3] - $11 * HEAPF64[$1 + 64 >> 3];
      HEAP32[$4 + 472 >> 2] = 0;
      HEAP32[$4 + 476 >> 2] = 0;
      HEAPF64[$4 + 464 >> 3] = $11 * HEAPF64[$1 + 208 >> 3] + ($13 * HEAPF64[$1 + 144 >> 3] + $10 * HEAPF64[$1 + 176 >> 3]);
      HEAPF64[$4 + 456 >> 3] = $11 * HEAPF64[$1 + 200 >> 3] + ($13 * HEAPF64[$1 + 136 >> 3] + $10 * HEAPF64[$1 + 168 >> 3]);
      HEAPF64[$4 + 448 >> 3] = $11 * HEAPF64[$1 + 192 >> 3] + ($13 * HEAPF64[$1 + 128 >> 3] + $10 * HEAPF64[$1 + 160 >> 3]);
      btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 160 | 0, HEAP32[$0 + 48 >> 2], $4 + 480 | 0);
      btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 128 | 0, HEAP32[$0 + 52 >> 2], $4 + 448 | 0);
      HEAP32[$4 + 120 >> 2] = 0;
      HEAP32[$4 + 124 >> 2] = 0;
      $10 = HEAPF64[$4 + 176 >> 3];
      $11 = HEAPF64[$4 + 160 >> 3];
      $15 = HEAPF64[$4 + 168 >> 3];
      $13 = $10 * HEAPF64[$4 + 400 >> 3] + ($11 * HEAPF64[$4 + 384 >> 3] + $15 * HEAPF64[$4 + 392 >> 3]) + HEAPF64[$4 + 432 >> 3];
      HEAPF64[$4 + 112 >> 3] = $13;
      $19 = $10 * HEAPF64[$4 + 368 >> 3] + ($11 * HEAPF64[$4 + 352 >> 3] + $15 * HEAPF64[$4 + 360 >> 3]) + HEAPF64[$4 + 424 >> 3];
      HEAPF64[$4 + 104 >> 3] = $19;
      $23 = $10 * HEAPF64[$4 + 336 >> 3] + ($11 * HEAPF64[$4 + 320 >> 3] + $15 * HEAPF64[$4 + 328 >> 3]) + HEAPF64[$4 + 416 >> 3];
      HEAPF64[$4 + 96 >> 3] = $23;
      HEAP32[$4 + 88 >> 2] = 0;
      HEAP32[$4 + 92 >> 2] = 0;
      $10 = HEAPF64[$4 + 144 >> 3];
      $11 = HEAPF64[$4 + 128 >> 3];
      $16 = HEAPF64[$4 + 136 >> 3];
      $15 = $10 * HEAPF64[$4 + 272 >> 3] + ($11 * HEAPF64[$4 + 256 >> 3] + $16 * HEAPF64[$4 + 264 >> 3]) + HEAPF64[$4 + 304 >> 3];
      HEAPF64[$4 + 80 >> 3] = $15;
      $21 = $10 * HEAPF64[$4 + 240 >> 3] + ($11 * HEAPF64[$4 + 224 >> 3] + $16 * HEAPF64[$4 + 232 >> 3]) + HEAPF64[$4 + 296 >> 3];
      HEAPF64[$4 + 72 >> 3] = $21;
      $10 = $10 * HEAPF64[$4 + 208 >> 3] + ($11 * HEAPF64[$4 + 192 >> 3] + $16 * HEAPF64[$4 + 200 >> 3]) + HEAPF64[$4 + 288 >> 3];
      HEAPF64[$4 + 64 >> 3] = $10;
      if ($6) {
       HEAP32[$4 + 80 >> 2] = 0;
       HEAP32[$4 + 84 >> 2] = 0;
       HEAP32[$4 + 112 >> 2] = 0;
       HEAP32[$4 + 116 >> 2] = 0;
       $15 = 0.0;
       $13 = 0.0;
      }
      HEAP32[$4 + 56 >> 2] = 0;
      HEAP32[$4 + 60 >> 2] = 0;
      $11 = $19 - $21;
      HEAPF64[$4 + 40 >> 3] = $11;
      $16 = HEAPF64[$0 + 16 >> 3];
      $10 = $23 - $10;
      HEAPF64[$4 + 32 >> 3] = $10;
      $19 = HEAPF64[$0 + 8 >> 3];
      $13 = $13 - $15;
      HEAPF64[$4 + 48 >> 3] = $13;
      $10 = HEAPF64[$0 + 24 >> 3] * $13 + ($19 * $10 + $11 * $16);
      if (!(!($10 > 0.0) | !($10 * $10 > $12 * HEAPF64[$1 + 256 >> 3]))) {
       HEAP32[$0 + 104 >> 2] = 10;
       break label$4;
      }
      if (btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29(HEAP32[$0 + 44 >> 2], $4 + 32 | 0)) {
       HEAP32[$0 + 104 >> 2] = 1;
       break label$4;
      }
      $10 = $12 - $10;
      if ($10 <= $12 * 1.0e-12) {
       HEAP32[$0 + 104 >> 2] = $10 <= 0.0 ? 2 : 11;
       break label$4;
      }
      btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29(HEAP32[$0 + 44 >> 2], $4 + 32 | 0, $4 + 96 | 0, $4 - -64 | 0);
      label$10 : {
       if (!btVoronoiSimplexSolver__closest_28btVector3__29(HEAP32[$0 + 44 >> 2], $4)) {
        $6 = 3;
        break label$10;
       }
       $10 = HEAPF64[$4 + 16 >> 3];
       $11 = $10 * $10;
       $10 = HEAPF64[$4 >> 3];
       $13 = $10 * $10;
       $10 = HEAPF64[$4 + 8 >> 3];
       $10 = $11 + ($13 + $10 * $10);
       if ($10 < 1.0e-12) {
        $6 = HEAP32[$4 + 4 >> 2];
        HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$8 + 4 >> 2] = $6;
        $6 = $4 + 24 | 0;
        $7 = HEAP32[$6 + 4 >> 2];
        $5 = $8 + 24 | 0;
        HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
        HEAP32[$5 + 4 >> 2] = $7;
        $6 = $4 + 16 | 0;
        $7 = HEAP32[$6 + 4 >> 2];
        $5 = $8 + 16 | 0;
        HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
        HEAP32[$5 + 4 >> 2] = $7;
        $6 = $4 + 8 | 0;
        $7 = HEAP32[$6 + 4 >> 2];
        $5 = $8 + 8 | 0;
        HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
        HEAP32[$5 + 4 >> 2] = $7;
        $6 = 6;
        break label$10;
       }
       if ($12 - $10 <= $12 * 2.220446049250313e-16) {
        $6 = 12;
        $12 = $10;
        break label$10;
       }
       $7 = HEAP32[$4 + 4 >> 2];
       HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$8 + 4 >> 2] = $7;
       $7 = $4 + 24 | 0;
       $5 = HEAP32[$7 + 4 >> 2];
       $9 = $8 + 24 | 0;
       HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$9 + 4 >> 2] = $5;
       $7 = $4 + 16 | 0;
       $5 = HEAP32[$7 + 4 >> 2];
       $9 = $8 + 16 | 0;
       HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$9 + 4 >> 2] = $5;
       $7 = $4 + 8 | 0;
       $5 = HEAP32[$7 + 4 >> 2];
       $9 = $8 + 8 | 0;
       HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$9 + 4 >> 2] = $5;
       $7 = HEAP32[$0 + 100 >> 2];
       HEAP32[$0 + 100 >> 2] = $7 + 1;
       if (($7 | 0) > 1e3) {
        break label$3
       }
       if (HEAP32[HEAP32[$0 + 44 >> 2] >> 2] == 4) {
        HEAP32[$0 + 104 >> 2] = 13;
        break label$3;
       }
       $12 = $10;
       continue;
      }
      break;
     };
     HEAP32[$0 + 104 >> 2] = $6;
    }
    btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29(HEAP32[$0 + 44 >> 2], $4 + 480 | 0, $4 + 448 | 0);
    $7 = $8 + 24 | 0;
    $5 = HEAP32[$7 + 4 >> 2];
    $6 = $4 + 512 | 0;
    $9 = $6 + 24 | 0;
    HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$9 + 4 >> 2] = $5;
    $7 = $8 + 16 | 0;
    $5 = HEAP32[$7 + 4 >> 2];
    $9 = $6 + 16 | 0;
    HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$9 + 4 >> 2] = $5;
    $7 = $8 + 8 | 0;
    $5 = HEAP32[$7 + 4 >> 2];
    $6 = $6 + 8 | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $6 = HEAP32[$8 + 4 >> 2];
    HEAP32[$4 + 512 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$4 + 516 >> 2] = $6;
    $10 = HEAPF64[$0 + 24 >> 3];
    $11 = HEAPF64[$0 + 8 >> 3];
    $13 = HEAPF64[$0 + 16 >> 3];
    $15 = $10 * $10 + ($11 * $11 + $13 * $13);
    if ($15 < 1.0e-12) {
     HEAP32[$0 + 104 >> 2] = 5
    }
    if ($15 > 4.930380657631324e-32) {
     $6 = 1;
     HEAP32[$0 + 96 >> 2] = 1;
     $15 = 1.0 / Math_sqrt($15);
     HEAPF64[$4 + 512 >> 3] = $15 * HEAPF64[$4 + 512 >> 3];
     HEAPF64[$4 + 520 >> 3] = $15 * HEAPF64[$4 + 520 >> 3];
     HEAPF64[$4 + 528 >> 3] = $15 * HEAPF64[$4 + 528 >> 3];
     $16 = Math_sqrt($12);
     $12 = $17 / $16;
     HEAPF64[$4 + 480 >> 3] = HEAPF64[$4 + 480 >> 3] - $12 * $11;
     HEAPF64[$4 + 488 >> 3] = HEAPF64[$4 + 488 >> 3] - $12 * $13;
     HEAPF64[$4 + 496 >> 3] = HEAPF64[$4 + 496 >> 3] - $12 * $10;
     $12 = $18 / $16;
     HEAPF64[$4 + 448 >> 3] = $12 * $11 + HEAPF64[$4 + 448 >> 3];
     HEAPF64[$4 + 456 >> 3] = $12 * $13 + HEAPF64[$4 + 456 >> 3];
     HEAPF64[$4 + 464 >> 3] = $12 * $10 + HEAPF64[$4 + 464 >> 3];
     $10 = 1.0 / $15 - $20;
     break label$2;
    }
    HEAP32[$0 + 96 >> 2] = 2;
   }
   $6 = 0;
   $10 = 0.0;
  }
  $7 = HEAP32[$0 + 40 >> 2];
  $9 = !$7;
  $5 = 1;
  label$17 : {
   if (!HEAP32[$0 + 108 >> 2]) {
    break label$17
   }
   $5 = 1;
   if (!$7) {
    break label$17
   }
   $5 = 1;
   if (!HEAP32[$0 + 104 >> 2]) {
    break label$17
   }
   $5 = !(HEAPF64[3847] > $20 + $10);
  }
  label$18 : {
   label$19 : {
    label$20 : {
     if ($9 | $5 & $6) {
      break label$20
     }
     $5 = !$6;
     HEAP32[$8 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     $9 = $8 + 8 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 16 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 24 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[7903] = HEAP32[7903] + 1;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7, HEAP32[$0 + 44 >> 2], HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2], $4 + 320 | 0, $4 + 192 | 0, $8, $4 + 160 | 0, $4 + 128 | 0, $3) | 0) {
      $15 = 0.0;
      $11 = HEAPF64[$4 + 144 >> 3];
      $20 = HEAPF64[$4 + 176 >> 3];
      $17 = $11 - $20;
      $16 = HEAPF64[$4 + 128 >> 3];
      $19 = HEAPF64[$4 + 160 >> 3];
      $12 = $16 - $19;
      $23 = HEAPF64[$4 + 136 >> 3];
      $21 = HEAPF64[$4 + 168 >> 3];
      $18 = $23 - $21;
      $13 = $17 * $17 + ($12 * $12 + $18 * $18);
      if ($13 <= 4.930380657631324e-32) {
       $15 = HEAPF64[$0 + 32 >> 3];
       $17 = HEAPF64[$0 + 24 >> 3];
       $12 = HEAPF64[$0 + 8 >> 3];
       $18 = HEAPF64[$0 + 16 >> 3];
       $13 = $17 * $17 + ($12 * $12 + $18 * $18);
      }
      if ($13 > 4.930380657631324e-32) {
       HEAP32[$0 + 96 >> 2] = 3;
       $11 = $20 - $11;
       $20 = $11 * $11;
       $11 = $19 - $16;
       $16 = $11 * $11;
       $11 = $21 - $23;
       $11 = -Math_sqrt($20 + ($16 + $11 * $11));
       if ($11 < $10 | $5) {
        $3 = $4 + 160 | 0;
        $7 = $3 + 24 | 0;
        $5 = HEAP32[$7 + 4 >> 2];
        $6 = $4 + 480 | 0;
        $9 = $6 + 24 | 0;
        HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$9 + 4 >> 2] = $5;
        $7 = $3 + 16 | 0;
        $5 = HEAP32[$7 + 4 >> 2];
        $9 = $6 + 16 | 0;
        HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$9 + 4 >> 2] = $5;
        $3 = $3 + 8 | 0;
        $7 = HEAP32[$3 + 4 >> 2];
        $6 = $6 + 8 | 0;
        HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$6 + 4 >> 2] = $7;
        $3 = $4 + 128 | 0;
        $7 = $3 + 8 | 0;
        $5 = HEAP32[$7 + 4 >> 2];
        $6 = $4 + 448 | 0;
        $9 = $6 + 8 | 0;
        HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$9 + 4 >> 2] = $5;
        $7 = $3 + 16 | 0;
        $5 = HEAP32[$7 + 4 >> 2];
        $9 = $6 + 16 | 0;
        HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$9 + 4 >> 2] = $5;
        $3 = $3 + 24 | 0;
        $7 = HEAP32[$3 + 4 >> 2];
        $6 = $6 + 24 | 0;
        HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$6 + 4 >> 2] = $7;
        $3 = HEAP32[$4 + 164 >> 2];
        HEAP32[$4 + 480 >> 2] = HEAP32[$4 + 160 >> 2];
        HEAP32[$4 + 484 >> 2] = $3;
        $3 = HEAP32[$4 + 132 >> 2];
        HEAP32[$4 + 448 >> 2] = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 452 >> 2] = $3;
        HEAPF64[$4 + 536 >> 3] = $15;
        $10 = 1.0 / Math_sqrt($13);
        HEAPF64[$4 + 528 >> 3] = $17 * $10;
        HEAPF64[$4 + 520 >> 3] = $18 * $10;
        HEAPF64[$4 + 512 >> 3] = $12 * $10;
        $10 = $11;
        break label$19;
       }
       HEAP32[$0 + 96 >> 2] = 8;
       if ($6) {
        break label$19
       }
       break label$18;
      }
      HEAP32[$0 + 96 >> 2] = 9;
      if ($6) {
       break label$19
      }
      break label$18;
     }
     $11 = HEAPF64[$0 + 24 >> 3];
     $13 = HEAPF64[$0 + 8 >> 3];
     $15 = HEAPF64[$0 + 16 >> 3];
     if (!($11 * $11 + ($13 * $13 + $15 * $15) > 0.0)) {
      break label$20
     }
     $12 = HEAPF64[$4 + 176 >> 3] - HEAPF64[$4 + 144 >> 3];
     $16 = $12 * $12;
     $12 = HEAPF64[$4 + 160 >> 3] - HEAPF64[$4 + 128 >> 3];
     $19 = $12 * $12;
     $12 = HEAPF64[$4 + 168 >> 3] - HEAPF64[$4 + 136 >> 3];
     $12 = Math_sqrt($16 + ($19 + $12 * $12)) - $20;
     if ($12 < $10 | $5) {
      $6 = $4 + 160 | 0;
      $5 = $6 + 8 | 0;
      $9 = HEAP32[$5 + 4 >> 2];
      $7 = $4 + 480 | 0;
      $3 = $7 + 8 | 0;
      HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$3 + 4 >> 2] = $9;
      $5 = $6 + 24 | 0;
      $9 = HEAP32[$5 + 4 >> 2];
      $14 = $7 + 24 | 0;
      HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$14 + 4 >> 2] = $9;
      $5 = $6 + 16 | 0;
      $9 = HEAP32[$5 + 4 >> 2];
      $6 = $7 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $9;
      $9 = $4 + 128 | 0;
      $5 = $9 + 8 | 0;
      $22 = HEAP32[$5 + 4 >> 2];
      $14 = $4 + 448 | 0;
      $7 = $14 + 8 | 0;
      HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$7 + 4 >> 2] = $22;
      $22 = $9 + 16 | 0;
      $33 = HEAP32[$22 + 4 >> 2];
      $5 = $14 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$22 >> 2];
      HEAP32[$5 + 4 >> 2] = $33;
      $9 = $9 + 24 | 0;
      $22 = HEAP32[$9 + 4 >> 2];
      $14 = $14 + 24 | 0;
      HEAP32[$14 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$14 + 4 >> 2] = $22;
      HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] - $17 * $15;
      $3 = HEAP32[$4 + 164 >> 2];
      HEAP32[$4 + 480 >> 2] = HEAP32[$4 + 160 >> 2];
      HEAP32[$4 + 484 >> 2] = $3;
      $3 = HEAP32[$4 + 132 >> 2];
      HEAP32[$4 + 448 >> 2] = HEAP32[$4 + 128 >> 2];
      HEAP32[$4 + 452 >> 2] = $3;
      HEAPF64[$4 + 480 >> 3] = HEAPF64[$4 + 480 >> 3] - $17 * $13;
      HEAPF64[$6 >> 3] = HEAPF64[$6 >> 3] - $17 * $11;
      HEAPF64[$4 + 448 >> 3] = $18 * $13 + HEAPF64[$4 + 448 >> 3];
      HEAPF64[$7 >> 3] = $18 * $15 + HEAPF64[$7 >> 3];
      HEAPF64[$5 >> 3] = $18 * $11 + HEAPF64[$5 >> 3];
      $3 = $8 + 24 | 0;
      $7 = HEAP32[$3 + 4 >> 2];
      $6 = $4 + 512 | 0;
      $5 = $6 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $7;
      $7 = $8 + 16 | 0;
      $5 = HEAP32[$7 + 4 >> 2];
      $3 = $6 + 16 | 0;
      HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $7 = $8 + 8 | 0;
      $5 = HEAP32[$7 + 4 >> 2];
      $6 = $6 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = $5;
      $7 = HEAP32[$8 + 4 >> 2];
      HEAP32[$4 + 512 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$4 + 516 >> 2] = $7;
      $11 = HEAPF64[$3 >> 3];
      $13 = HEAPF64[$4 + 512 >> 3];
      $15 = HEAPF64[$6 >> 3];
      $10 = 1.0 / Math_sqrt($11 * $11 + ($13 * $13 + $15 * $15));
      HEAPF64[$3 >> 3] = $11 * $10;
      HEAPF64[$6 >> 3] = $15 * $10;
      HEAPF64[$4 + 512 >> 3] = $13 * $10;
      HEAP32[$0 + 96 >> 2] = 6;
      $10 = $12;
      break label$19;
     }
     HEAP32[$0 + 96 >> 2] = 5;
    }
    if (!$6) {
     break label$18
    }
   }
   if (!($10 < 0.0 | HEAPF64[$1 + 256 >> 3] > $10 * $10)) {
    break label$18
   }
   $3 = HEAP32[$4 + 516 >> 2];
   HEAP32[$8 >> 2] = HEAP32[$4 + 512 >> 2];
   HEAP32[$8 + 4 >> 2] = $3;
   HEAPF64[$0 + 88 >> 3] = $10;
   $6 = $4 + 512 | 0;
   $3 = $6 + 24 | 0;
   $7 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 24 | 0;
   HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $3 = $6 + 16 | 0;
   $7 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $6 = $6 + 8 | 0;
   $7 = HEAP32[$6 + 4 >> 2];
   $8 = $8 + 8 | 0;
   HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$8 + 4 >> 2] = $7;
   HEAP32[$4 + 184 >> 2] = 0;
   HEAP32[$4 + 188 >> 2] = 0;
   $12 = HEAPF64[$3 >> 3];
   $13 = HEAPF64[$4 + 512 >> 3];
   $11 = HEAPF64[$6 >> 3];
   HEAPF64[$4 + 176 >> 3] = HEAPF64[$1 + 80 >> 3] * $12 + (HEAPF64[$1 + 16 >> 3] * $13 + $11 * HEAPF64[$1 + 48 >> 3]);
   HEAPF64[$4 + 168 >> 3] = $12 * HEAPF64[$1 + 72 >> 3] + ($13 * HEAPF64[$1 + 8 >> 3] + $11 * HEAPF64[$1 + 40 >> 3]);
   HEAPF64[$4 + 160 >> 3] = $12 * HEAPF64[$1 + 64 >> 3] + ($13 * HEAPF64[$1 >> 3] + $11 * HEAPF64[$1 + 32 >> 3]);
   HEAP32[$4 + 152 >> 2] = 0;
   HEAP32[$4 + 156 >> 2] = 0;
   $13 = -$13;
   HEAPF64[$4 + 144 >> 3] = HEAPF64[$1 + 144 >> 3] * $13 - $11 * HEAPF64[$1 + 176 >> 3] - $12 * HEAPF64[$1 + 208 >> 3];
   HEAPF64[$4 + 136 >> 3] = HEAPF64[$1 + 136 >> 3] * $13 - $11 * HEAPF64[$1 + 168 >> 3] - $12 * HEAPF64[$1 + 200 >> 3];
   HEAPF64[$4 + 128 >> 3] = HEAPF64[$1 + 128 >> 3] * $13 - $11 * HEAPF64[$1 + 160 >> 3] - $12 * HEAPF64[$1 + 192 >> 3];
   $8 = $4 + 96 | 0;
   $7 = $4 + 160 | 0;
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($8, HEAP32[$0 + 48 >> 2], $7);
   $5 = $4 - -64 | 0;
   $9 = $4 + 128 | 0;
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($5, HEAP32[$0 + 52 >> 2], $9);
   $12 = HEAPF64[$3 >> 3];
   $11 = HEAPF64[$6 >> 3];
   $34 = HEAPF64[$4 + 432 >> 3];
   $35 = HEAPF64[$4 + 400 >> 3];
   $36 = HEAPF64[$4 + 384 >> 3];
   $37 = HEAPF64[$4 + 392 >> 3];
   $38 = HEAPF64[$4 + 304 >> 3];
   $39 = HEAPF64[$4 + 272 >> 3];
   $40 = HEAPF64[$4 + 256 >> 3];
   $41 = HEAPF64[$4 + 264 >> 3];
   $42 = HEAPF64[$4 + 416 >> 3];
   $43 = HEAPF64[$4 + 336 >> 3];
   $44 = HEAPF64[$4 + 320 >> 3];
   $45 = HEAPF64[$4 + 328 >> 3];
   $46 = HEAPF64[$4 + 288 >> 3];
   $47 = HEAPF64[$4 + 208 >> 3];
   $48 = HEAPF64[$4 + 192 >> 3];
   $49 = HEAPF64[$4 + 200 >> 3];
   $50 = HEAPF64[$4 + 424 >> 3];
   $51 = HEAPF64[$4 + 368 >> 3];
   $15 = HEAPF64[$4 + 112 >> 3];
   $52 = HEAPF64[$4 + 352 >> 3];
   $17 = HEAPF64[$4 + 96 >> 3];
   $53 = HEAPF64[$4 + 360 >> 3];
   $18 = HEAPF64[$4 + 104 >> 3];
   $54 = HEAPF64[$4 + 296 >> 3];
   $55 = HEAPF64[$4 + 240 >> 3];
   $20 = HEAPF64[$4 + 80 >> 3];
   $56 = HEAPF64[$4 + 224 >> 3];
   $16 = HEAPF64[$4 + 64 >> 3];
   $57 = HEAPF64[$4 + 232 >> 3];
   $19 = HEAPF64[$4 + 72 >> 3];
   $13 = HEAPF64[$4 + 512 >> 3];
   HEAP32[$4 + 184 >> 2] = 0;
   HEAP32[$4 + 188 >> 2] = 0;
   $23 = -$13;
   HEAPF64[$4 + 176 >> 3] = HEAPF64[$1 + 16 >> 3] * $23 - $11 * HEAPF64[$1 + 48 >> 3] - $12 * HEAPF64[$1 + 80 >> 3];
   HEAPF64[$4 + 168 >> 3] = HEAPF64[$1 + 8 >> 3] * $23 - $11 * HEAPF64[$1 + 40 >> 3] - $12 * HEAPF64[$1 + 72 >> 3];
   HEAPF64[$4 + 160 >> 3] = HEAPF64[$1 >> 3] * $23 - $11 * HEAPF64[$1 + 32 >> 3] - $12 * HEAPF64[$1 + 64 >> 3];
   HEAP32[$4 + 152 >> 2] = 0;
   HEAP32[$4 + 156 >> 2] = 0;
   HEAPF64[$4 + 144 >> 3] = $12 * HEAPF64[$1 + 208 >> 3] + ($13 * HEAPF64[$1 + 144 >> 3] + $11 * HEAPF64[$1 + 176 >> 3]);
   HEAPF64[$4 + 136 >> 3] = $12 * HEAPF64[$1 + 200 >> 3] + ($13 * HEAPF64[$1 + 136 >> 3] + $11 * HEAPF64[$1 + 168 >> 3]);
   HEAPF64[$4 + 128 >> 3] = $12 * HEAPF64[$1 + 192 >> 3] + ($13 * HEAPF64[$1 + 128 >> 3] + $11 * HEAPF64[$1 + 160 >> 3]);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($8, HEAP32[$0 + 48 >> 2], $7);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($5, HEAP32[$0 + 52 >> 2], $9);
   $31 = HEAPF64[$3 >> 3];
   $13 = HEAPF64[$4 + 112 >> 3];
   $21 = HEAPF64[$4 + 96 >> 3];
   $27 = HEAPF64[$4 + 104 >> 3];
   $28 = HEAPF64[$4 + 80 >> 3];
   $29 = HEAPF64[$4 + 64 >> 3];
   $30 = HEAPF64[$4 + 72 >> 3];
   $58 = $31 * ($13 * HEAPF64[$4 + 400 >> 3] + ($21 * HEAPF64[$4 + 384 >> 3] + $27 * HEAPF64[$4 + 392 >> 3]) + HEAPF64[$4 + 432 >> 3] - ($28 * HEAPF64[$4 + 272 >> 3] + ($29 * HEAPF64[$4 + 256 >> 3] + $30 * HEAPF64[$4 + 264 >> 3]) + HEAPF64[$4 + 304 >> 3]));
   $32 = HEAPF64[$4 + 512 >> 3];
   $59 = $32 * ($13 * HEAPF64[$4 + 336 >> 3] + ($21 * HEAPF64[$4 + 320 >> 3] + $27 * HEAPF64[$4 + 328 >> 3]) + HEAPF64[$4 + 416 >> 3] - ($28 * HEAPF64[$4 + 208 >> 3] + ($29 * HEAPF64[$4 + 192 >> 3] + $30 * HEAPF64[$4 + 200 >> 3]) + HEAPF64[$4 + 288 >> 3]));
   $21 = $13 * HEAPF64[$4 + 368 >> 3] + ($21 * HEAPF64[$4 + 352 >> 3] + $27 * HEAPF64[$4 + 360 >> 3]) + HEAPF64[$4 + 424 >> 3] - ($28 * HEAPF64[$4 + 240 >> 3] + ($29 * HEAPF64[$4 + 224 >> 3] + $30 * HEAPF64[$4 + 232 >> 3]) + HEAPF64[$4 + 296 >> 3]);
   $13 = HEAPF64[$6 >> 3];
   if ($58 + ($59 + $21 * $13) < $23 * ($42 + ($15 * $43 + ($17 * $44 + $18 * $45)) - ($46 + ($20 * $47 + ($16 * $48 + $19 * $49)))) - $11 * ($50 + ($15 * $51 + ($17 * $52 + $18 * $53)) - ($54 + ($20 * $55 + ($16 * $56 + $19 * $57)))) - $12 * ($34 + ($15 * $35 + ($17 * $36 + $18 * $37)) - ($38 + ($20 * $39 + ($16 * $40 + $19 * $41))))) {
    HEAP32[$0 + 96 >> 2] = 10;
    HEAPF64[$4 + 528 >> 3] = -$31;
    HEAPF64[$4 + 520 >> 3] = -$13;
    HEAPF64[$4 + 512 >> 3] = -$32;
   }
   HEAP32[$4 + 184 >> 2] = 0;
   HEAP32[$4 + 188 >> 2] = 0;
   HEAPF64[$4 + 176 >> 3] = $24 + HEAPF64[$4 + 464 >> 3];
   HEAPF64[$4 + 168 >> 3] = $25 + HEAPF64[$4 + 456 >> 3];
   HEAPF64[$4 + 160 >> 3] = $26 + HEAPF64[$4 + 448 >> 3];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $4 + 512 | 0, $4 + 160 | 0, $10);
  }
  __stack_pointer = $4 + 544 | 0;
 }
 
 function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0;
  $10 = __stack_pointer - 8416 | 0;
  __stack_pointer = $10;
  $20 = HEAP32[$2 + 4 >> 2] - 17 >>> 0 <= 1 ? HEAP32[$3 + 4 >> 2] - 17 >>> 0 < 2 : $20;
  while (1) {
   btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
   $0 = ($10 + 2464 | 0) + $15 | 0;
   $12 = $0 + 24 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $16 = HEAPF64[$15 + 31632 >> 3];
   $11 = -$16;
   $13 = HEAPF64[$15 + 31640 >> 3];
   $14 = HEAPF64[$15 + 31648 >> 3];
   HEAPF64[$0 + 16 >> 3] = HEAPF64[$4 + 16 >> 3] * $11 - HEAPF64[$4 + 48 >> 3] * $13 - HEAPF64[$4 + 80 >> 3] * $14;
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$4 + 8 >> 3] * $11 - $13 * HEAPF64[$4 + 40 >> 3] - $14 * HEAPF64[$4 + 72 >> 3];
   HEAPF64[$0 >> 3] = HEAPF64[$4 >> 3] * $11 - $13 * HEAPF64[$4 + 32 >> 3] - $14 * HEAPF64[$4 + 64 >> 3];
   $11 = HEAPF64[$5 + 64 >> 3];
   $18 = HEAPF64[$5 >> 3];
   $23 = HEAPF64[$5 + 32 >> 3];
   $24 = HEAPF64[$5 + 72 >> 3];
   $19 = HEAPF64[$5 + 8 >> 3];
   $25 = HEAPF64[$5 + 40 >> 3];
   $26 = HEAPF64[$5 + 80 >> 3];
   $27 = HEAPF64[$5 + 16 >> 3];
   $28 = HEAPF64[$5 + 48 >> 3];
   $0 = ($10 + 480 | 0) + $15 | 0;
   $12 = $0 + 24 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   HEAPF64[$0 + 16 >> 3] = $26 * $14 + ($27 * $16 + $13 * $28);
   HEAPF64[$0 + 8 >> 3] = $24 * $14 + ($19 * $16 + $13 * $25);
   HEAPF64[$0 >> 3] = $11 * $14 + ($18 * $16 + $13 * $23);
   $15 = $15 + 32 | 0;
   if (($15 | 0) != 1344) {
    continue
   }
   break;
  };
  $32 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 84 >> 2]]($2) | 0;
  if (($32 | 0) <= 0) {
   $0 = 42
  } else {
   $15 = 0;
   $0 = $10 + 6456 | 0;
   $12 = $10 + 6440 | 0;
   $21 = $10 + 6448 | 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 88 >> 2]]($2, $30, $10 + 6432 | 0);
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $13 = HEAPF64[$21 >> 3];
    $14 = HEAPF64[$10 + 6432 >> 3];
    $16 = HEAPF64[$12 >> 3];
    HEAPF64[$21 >> 3] = HEAPF64[$4 + 80 >> 3] * $13 + (HEAPF64[$4 + 64 >> 3] * $14 + $16 * HEAPF64[$4 + 72 >> 3]);
    HEAPF64[$12 >> 3] = $13 * HEAPF64[$4 + 48 >> 3] + ($14 * HEAPF64[$4 + 32 >> 3] + $16 * HEAPF64[$4 + 40 >> 3]);
    HEAPF64[$10 + 6432 >> 3] = $13 * HEAPF64[$4 + 16 >> 3] + ($14 * HEAPF64[$4 >> 3] + $16 * HEAPF64[$4 + 8 >> 3]);
    btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
    $22 = HEAP32[$0 + 4 >> 2];
    $17 = $15 + 33e3 | 0;
    HEAP32[$17 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$17 + 4 >> 2] = $22;
    $22 = HEAP32[$21 + 4 >> 2];
    $17 = $15 + 32992 | 0;
    HEAP32[$17 >> 2] = HEAP32[$21 >> 2];
    HEAP32[$17 + 4 >> 2] = $22;
    $22 = HEAP32[$12 + 4 >> 2];
    $17 = $15 + 32984 | 0;
    HEAP32[$17 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$17 + 4 >> 2] = $22;
    $22 = HEAP32[$10 + 6436 >> 2];
    $17 = $15 + 32976 | 0;
    HEAP32[$17 >> 2] = HEAP32[$10 + 6432 >> 2];
    HEAP32[$17 + 4 >> 2] = $22;
    $18 = HEAPF64[$4 + 64 >> 3];
    $23 = HEAPF64[$4 >> 3];
    $24 = HEAPF64[$4 + 32 >> 3];
    $19 = HEAPF64[$4 + 72 >> 3];
    $25 = HEAPF64[$4 + 8 >> 3];
    $26 = HEAPF64[$4 + 40 >> 3];
    $13 = HEAPF64[$21 >> 3];
    $27 = HEAPF64[$4 + 80 >> 3];
    $11 = HEAPF64[$4 + 16 >> 3];
    $14 = HEAPF64[$12 >> 3];
    $28 = HEAPF64[$4 + 48 >> 3];
    $16 = HEAPF64[$10 + 6432 >> 3];
    $17 = ($10 + 2464 | 0) + $15 | 0;
    $22 = $17 + 1368 | 0;
    HEAP32[$22 >> 2] = 0;
    HEAP32[$22 + 4 >> 2] = 0;
    $31 = $11;
    $11 = -$16;
    HEAPF64[$17 + 1360 >> 3] = $31 * $11 - $28 * $14 - $27 * $13;
    HEAPF64[$17 + 1352 >> 3] = $25 * $11 - $26 * $14 - $19 * $13;
    HEAPF64[$17 + 1344 >> 3] = $23 * $11 - $24 * $14 - $18 * $13;
    $11 = HEAPF64[$5 + 64 >> 3];
    $18 = HEAPF64[$5 >> 3];
    $23 = HEAPF64[$5 + 32 >> 3];
    $24 = HEAPF64[$5 + 72 >> 3];
    $19 = HEAPF64[$5 + 8 >> 3];
    $25 = HEAPF64[$5 + 40 >> 3];
    $26 = HEAPF64[$5 + 80 >> 3];
    $27 = HEAPF64[$5 + 16 >> 3];
    $28 = HEAPF64[$5 + 48 >> 3];
    $17 = ($10 + 480 | 0) + $15 | 0;
    $22 = $17 + 1368 | 0;
    HEAP32[$22 >> 2] = 0;
    HEAP32[$22 + 4 >> 2] = 0;
    HEAPF64[$17 + 1360 >> 3] = $26 * $13 + ($27 * $16 + $14 * $28);
    HEAPF64[$17 + 1352 >> 3] = $24 * $13 + ($19 * $16 + $14 * $25);
    HEAPF64[$17 + 1344 >> 3] = $11 * $13 + ($18 * $16 + $14 * $23);
    $15 = $15 + 32 | 0;
    $30 = $30 + 1 | 0;
    if (($32 | 0) != ($30 | 0)) {
     continue
    }
    break;
   };
   $0 = $30 + 42 | 0;
  }
  $37 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 84 >> 2]]($3) | 0;
  if (($37 | 0) > 0) {
   $17 = $0 << 5;
   $15 = 0;
   $32 = 31632;
   $22 = $10 + 2464 | 0;
   $35 = $10 + 480 | 0;
   while (1) {
    $33 = $10 + 6432 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 88 >> 2]]($3, $15, $33);
    $29 = $33 + 24 | 0;
    HEAP32[$29 >> 2] = 0;
    HEAP32[$29 + 4 >> 2] = 0;
    $12 = $33 + 16 | 0;
    $13 = HEAPF64[$12 >> 3];
    $14 = HEAPF64[$10 + 6432 >> 3];
    $21 = $33 + 8 | 0;
    $16 = HEAPF64[$21 >> 3];
    HEAPF64[$12 >> 3] = HEAPF64[$5 + 80 >> 3] * $13 + (HEAPF64[$5 + 64 >> 3] * $14 + $16 * HEAPF64[$5 + 72 >> 3]);
    HEAPF64[$21 >> 3] = $13 * HEAPF64[$5 + 48 >> 3] + ($14 * HEAPF64[$5 + 32 >> 3] + $16 * HEAPF64[$5 + 40 >> 3]);
    HEAPF64[$10 + 6432 >> 3] = $13 * HEAPF64[$5 + 16 >> 3] + ($14 * HEAPF64[$5 >> 3] + $16 * HEAPF64[$5 + 8 >> 3]);
    btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
    $33 = HEAP32[$29 + 4 >> 2];
    $30 = $17 + $32 | 0;
    $34 = $30 + 24 | 0;
    HEAP32[$34 >> 2] = HEAP32[$29 >> 2];
    HEAP32[$34 + 4 >> 2] = $33;
    $34 = HEAP32[$12 + 4 >> 2];
    $29 = $30 + 16 | 0;
    HEAP32[$29 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$29 + 4 >> 2] = $34;
    $34 = HEAP32[$21 + 4 >> 2];
    $29 = $30 + 8 | 0;
    HEAP32[$29 >> 2] = HEAP32[$21 >> 2];
    HEAP32[$29 + 4 >> 2] = $34;
    $29 = HEAP32[$10 + 6436 >> 2];
    HEAP32[$30 >> 2] = HEAP32[$10 + 6432 >> 2];
    HEAP32[$30 + 4 >> 2] = $29;
    $18 = HEAPF64[$4 + 64 >> 3];
    $23 = HEAPF64[$4 >> 3];
    $24 = HEAPF64[$4 + 32 >> 3];
    $19 = HEAPF64[$4 + 72 >> 3];
    $25 = HEAPF64[$4 + 8 >> 3];
    $26 = HEAPF64[$4 + 40 >> 3];
    $13 = HEAPF64[$12 >> 3];
    $27 = HEAPF64[$4 + 80 >> 3];
    $11 = HEAPF64[$4 + 16 >> 3];
    $14 = HEAPF64[$21 >> 3];
    $28 = HEAPF64[$4 + 48 >> 3];
    $16 = HEAPF64[$10 + 6432 >> 3];
    $12 = $17 + $22 | 0;
    $21 = $12 + 24 | 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$21 + 4 >> 2] = 0;
    $31 = $11;
    $11 = -$16;
    HEAPF64[$12 + 16 >> 3] = $31 * $11 - $28 * $14 - $27 * $13;
    HEAPF64[$12 + 8 >> 3] = $25 * $11 - $26 * $14 - $19 * $13;
    HEAPF64[$12 >> 3] = $23 * $11 - $24 * $14 - $18 * $13;
    $11 = HEAPF64[$5 + 64 >> 3];
    $18 = HEAPF64[$5 >> 3];
    $23 = HEAPF64[$5 + 32 >> 3];
    $24 = HEAPF64[$5 + 72 >> 3];
    $19 = HEAPF64[$5 + 8 >> 3];
    $25 = HEAPF64[$5 + 40 >> 3];
    $26 = HEAPF64[$5 + 80 >> 3];
    $27 = HEAPF64[$5 + 16 >> 3];
    $28 = HEAPF64[$5 + 48 >> 3];
    $12 = $17 + $35 | 0;
    $21 = $12 + 24 | 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$21 + 4 >> 2] = 0;
    HEAPF64[$12 + 16 >> 3] = $26 * $13 + ($27 * $16 + $14 * $28);
    HEAPF64[$12 + 8 >> 3] = $24 * $13 + ($19 * $16 + $14 * $25);
    HEAPF64[$12 >> 3] = $11 * $13 + ($18 * $16 + $14 * $23);
    $35 = $35 + 32 | 0;
    $22 = $22 + 32 | 0;
    $32 = $32 + 32 | 0;
    $15 = $15 + 1 | 0;
    if (($37 | 0) != ($15 | 0)) {
     continue
    }
    break;
   };
   $0 = $0 + $15 | 0;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 76 >> 2]]($2, $10 + 2464 | 0, $10 + 6432 | 0, $0);
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 76 >> 2]]($3, $10 + 480 | 0, $10 + 4448 | 0, $0);
  label$8 : {
   if (($0 | 0) <= 0) {
    $11 = 1.e+30;
    $13 = 0.0;
    $14 = 0.0;
    $16 = 0.0;
    $25 = 0.0;
    break label$8;
   }
   $11 = 1.e+30;
   $15 = 0;
   $25 = 0.0;
   $16 = 0.0;
   $14 = 0.0;
   $13 = 0.0;
   while (1) {
    btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
    $18 = $20 ? 0.0 : HEAPF64[$15 + 31648 >> 3];
    $23 = HEAPF64[$15 + 31632 >> 3];
    $24 = HEAPF64[$15 + 31640 >> 3];
    label$11 : {
     if (!($18 * $18 + ($23 * $23 + $24 * $24) > .01)) {
      break label$11
     }
     $12 = ($10 + 4448 | 0) + $15 | 0;
     $19 = HEAPF64[$12 + 16 >> 3];
     $26 = HEAPF64[$12 >> 3];
     $27 = HEAPF64[$12 + 8 >> 3];
     $12 = ($10 + 6432 | 0) + $15 | 0;
     $28 = HEAPF64[$12 + 16 >> 3];
     $36 = HEAPF64[$12 >> 3];
     $31 = HEAPF64[$12 + 8 >> 3];
     $19 = $18 * ($20 ? 0.0 : $19 * HEAPF64[$5 + 80 >> 3] + ($26 * HEAPF64[$5 + 64 >> 3] + $27 * HEAPF64[$5 + 72 >> 3]) + HEAPF64[$5 + 112 >> 3] - ($28 * HEAPF64[$4 + 80 >> 3] + ($36 * HEAPF64[$4 + 64 >> 3] + $31 * HEAPF64[$4 + 72 >> 3]) + HEAPF64[$4 + 112 >> 3])) + ($23 * ($19 * HEAPF64[$5 + 16 >> 3] + ($26 * HEAPF64[$5 >> 3] + $27 * HEAPF64[$5 + 8 >> 3]) + HEAPF64[$5 + 96 >> 3] - ($28 * HEAPF64[$4 + 16 >> 3] + ($36 * HEAPF64[$4 >> 3] + $31 * HEAPF64[$4 + 8 >> 3]) + HEAPF64[$4 + 96 >> 3])) + $24 * ($19 * HEAPF64[$5 + 48 >> 3] + ($26 * HEAPF64[$5 + 32 >> 3] + $27 * HEAPF64[$5 + 40 >> 3]) + HEAPF64[$5 + 104 >> 3] - ($28 * HEAPF64[$4 + 48 >> 3] + ($36 * HEAPF64[$4 + 32 >> 3] + $31 * HEAPF64[$4 + 40 >> 3]) + HEAPF64[$4 + 104 >> 3])));
     if (!($19 < $11)) {
      break label$11
     }
     $25 = HEAPF64[$15 + 31656 >> 3];
     $13 = $23;
     $14 = $24;
     $16 = $18;
     $11 = $19;
    }
    $15 = $15 + 32 | 0;
    $0 = $0 - 1 | 0;
    if ($0) {
     continue
    }
    break;
   };
  }
  btConvexShape__getMarginNonVirtual_28_29_20const($2);
  btConvexShape__getMarginNonVirtual_28_29_20const($3);
  $15 = 0;
  if (!($11 < 0.0)) {
   $18 = btConvexShape__getMarginNonVirtual_28_29_20const($2);
   $23 = btConvexShape__getMarginNonVirtual_28_29_20const($3);
   $0 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($10 + 360 | 0, $2, $3, $1, 0);
   $2 = $4 + 8 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $20 = $10 + 96 | 0;
   $1 = $20 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $4 + 16 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $4 + 24 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 24 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $4 + 40 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 40 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $4 + 48 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 48 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $4 + 56 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 56 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP32[$10 + 96 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$10 + 100 >> 2] = $1;
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$10 + 128 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$10 + 132 >> 2] = $1;
   $24 = HEAPF64[$4 + 112 >> 3];
   $19 = HEAPF64[$4 + 96 >> 3];
   $11 = $11 + ($18 + $23 + .5);
   HEAPF64[$20 + 104 >> 3] = $14 * $11 + HEAPF64[$4 + 104 >> 3];
   HEAPF64[$20 + 112 >> 3] = $24 + $16 * $11;
   $1 = $20 + 120 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $2 = $4 + 88 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 88 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $4 + 80 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 80 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $4 + 72 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $20 + 72 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 8 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 232 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 16 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 240 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 24 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 248 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   HEAPF64[$10 + 192 >> 3] = $19 + $13 * $11;
   $1 = HEAP32[$4 + 68 >> 2];
   HEAP32[$10 + 160 >> 2] = HEAP32[$4 + 64 >> 2];
   HEAP32[$10 + 164 >> 2] = $1;
   $1 = HEAP32[$5 + 4 >> 2];
   HEAP32[$10 + 224 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$10 + 228 >> 2] = $1;
   $2 = $5 + 56 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 280 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 48 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 272 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 40 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 264 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = HEAP32[$5 + 36 >> 2];
   $1 = $10 + 256 | 0;
   HEAP32[$1 >> 2] = HEAP32[$5 + 32 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $2 = $5 + 88 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 312 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 80 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 304 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 72 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 296 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = HEAP32[$5 + 68 >> 2];
   $1 = $10 + 288 | 0;
   HEAP32[$1 >> 2] = HEAP32[$5 + 64 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $2 = $5 + 120 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 344 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 112 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 336 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $5 + 104 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $10 + 328 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = HEAP32[$5 + 100 >> 2];
   $1 = $10 + 320 | 0;
   HEAP32[$1 >> 2] = HEAP32[$5 + 96 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   HEAP32[$10 + 352 >> 2] = 966823146;
   HEAP32[$10 + 356 >> 2] = 1177108057;
   $1 = $0 + 32 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAPF64[$0 + 24 >> 3] = -$16;
   HEAPF64[$0 + 16 >> 3] = -$14;
   HEAPF64[$0 + 8 >> 3] = -$13;
   HEAP8[$10 + 88 | 0] = 0;
   HEAP32[$10 + 8 >> 2] = 15212;
   btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $20, $10 + 8 | 0, $9, 0);
   $2 = HEAPU8[$10 + 88 | 0];
   if ($2) {
    $18 = HEAPF64[$10 + 80 >> 3];
    HEAP32[$7 + 24 >> 2] = 0;
    HEAP32[$7 + 28 >> 2] = 0;
    $11 = $11 - $18;
    HEAPF64[$7 >> 3] = HEAPF64[$10 + 48 >> 3] - $13 * $11;
    $1 = $10 + 8 | 0;
    $0 = $1 + 56 | 0;
    HEAPF64[$7 + 16 >> 3] = HEAPF64[$0 >> 3] - $16 * $11;
    $1 = $1 + 48 | 0;
    HEAPF64[$7 + 8 >> 3] = HEAPF64[$1 >> 3] - $14 * $11;
    $3 = HEAP32[$10 + 52 >> 2];
    HEAP32[$8 >> 2] = HEAP32[$10 + 48 >> 2];
    HEAP32[$8 + 4 >> 2] = $3;
    $4 = HEAP32[$1 + 4 >> 2];
    $3 = $8 + 8 | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $3 = HEAP32[$0 + 4 >> 2];
    $1 = $8 + 16 | 0;
    HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$1 + 4 >> 2] = $3;
    $1 = $10 + 72 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $0 = $8 + 24 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $3;
    HEAPF64[$6 >> 3] = $13;
    HEAPF64[$6 + 8 >> 3] = $14;
    HEAPF64[$6 + 16 >> 3] = $16;
    HEAPF64[$6 + 24 >> 3] = $25;
   }
   $15 = ($2 | 0) != 0;
  }
  __stack_pointer = $10 + 8416 | 0;
  return $15 | 0;
 }
 
 function btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29() {
  if (!HEAPU8[33616]) {
   HEAP32[8086] = 1984068732;
   HEAP32[8087] = 1070843614;
   HEAP32[8084] = 802368610;
   HEAP32[8085] = 1072590609;
   HEAP32[8082] = 0;
   HEAP32[8083] = 0;
   HEAP32[8080] = 2139649628;
   HEAP32[8081] = -1075785e3;
   HEAP32[8078] = 574769703;
   HEAP32[8079] = 1072292717;
   HEAP32[8076] = 2139649628;
   HEAP32[8077] = 1070650072;
   HEAP32[8074] = 0;
   HEAP32[8075] = 0;
   HEAP32[8072] = 1305120302;
   HEAP32[8073] = -1075785004;
   HEAP32[8070] = 1791379320;
   HEAP32[8071] = 1071644659;
   HEAP32[8068] = 149808459;
   HEAP32[8069] = -1075444313;
   HEAP32[8066] = 0;
   HEAP32[8067] = 0;
   HEAP32[8064] = -1127824052;
   HEAP32[8065] = -1075103602;
   HEAP32[8062] = 122320669;
   HEAP32[8063] = 1071644651;
   HEAP32[8060] = -1283130070;
   HEAP32[8061] = -1077621925;
   HEAP32[8058] = 0;
   HEAP32[8059] = 0;
   HEAP32[8056] = 1305120302;
   HEAP32[8057] = -1075785004;
   HEAP32[8054] = 1791379320;
   HEAP32[8055] = -1075838989;
   HEAP32[8052] = 149808459;
   HEAP32[8053] = -1075444313;
   HEAP32[8050] = 0;
   HEAP32[8051] = 0;
   HEAP32[8048] = -1962353378;
   HEAP32[8049] = -1075103606;
   HEAP32[8046] = 0;
   HEAP32[8047] = -2147483648;
   HEAP32[8044] = -1198467674;
   HEAP32[8045] = -1075785017;
   HEAP32[8042] = 0;
   HEAP32[8043] = 0;
   HEAP32[8040] = 1305120302;
   HEAP32[8041] = -1075785004;
   HEAP32[8038] = 0;
   HEAP32[8039] = -2147483648;
   HEAP32[8036] = 663555267;
   HEAP32[8037] = 1072380034;
   HEAP32[8034] = 0;
   HEAP32[8035] = 0;
   HEAP32[8032] = -1127824052;
   HEAP32[8033] = -1075103602;
   HEAP32[8030] = 315010081;
   HEAP32[8031] = 1070843606;
   HEAP32[8028] = -170974058;
   HEAP32[8029] = 1071331453;
   HEAP32[8026] = 0;
   HEAP32[8027] = 0;
   HEAP32[8024] = 2139649628;
   HEAP32[8025] = -1075785e3;
   HEAP32[8022] = 574769703;
   HEAP32[8023] = -1075190931;
   HEAP32[8020] = 2139649628;
   HEAP32[8021] = 1070650072;
   HEAP32[8018] = 0;
   HEAP32[8019] = 0;
   HEAP32[8016] = -1127824052;
   HEAP32[8017] = -1075103602;
   HEAP32[8014] = 122320669;
   HEAP32[8015] = -1075838997;
   HEAP32[8012] = -1283130070;
   HEAP32[8013] = -1077621925;
   HEAP32[8010] = 0;
   HEAP32[8011] = 0;
   HEAP32[8008] = -1127824052;
   HEAP32[8009] = -1075103602;
   HEAP32[8006] = 315010081;
   HEAP32[8007] = -1076640042;
   HEAP32[8004] = -170974058;
   HEAP32[8005] = 1071331453;
   HEAP32[8002] = 0;
   HEAP32[8003] = 0;
   HEAP32[8e3] = 0;
   HEAP32[8001] = 1072693248;
   HEAP32[7998] = 0;
   HEAP32[7999] = 0;
   HEAP32[7996] = 0;
   HEAP32[7997] = -2147483648;
   HEAP32[7994] = 0;
   HEAP32[7995] = 0;
   HEAP32[7992] = -611328465;
   HEAP32[7993] = 1071423279;
   HEAP32[7990] = 0;
   HEAP32[7991] = 0;
   HEAP32[7988] = 1180050855;
   HEAP32[7989] = 1072471843;
   HEAP32[7986] = 0;
   HEAP32[7987] = 0;
   HEAP32[7984] = 1892259511;
   HEAP32[7985] = 1071423292;
   HEAP32[7982] = 1080819930;
   HEAP32[7983] = 1072380036;
   HEAP32[7980] = 1262514227;
   HEAP32[7981] = 1070706775;
   HEAP32[7978] = 0;
   HEAP32[7979] = 0;
   HEAP32[7976] = 1892259511;
   HEAP32[7977] = 1071423292;
   HEAP32[7974] = 1010176308;
   HEAP32[7975] = 1071698621;
   HEAP32[7972] = -152832116;
   HEAP32[7973] = -1075370037;
   HEAP32[7970] = 0;
   HEAP32[7971] = 0;
   HEAP32[7968] = 1892259511;
   HEAP32[7969] = 1071423292;
   HEAP32[7966] = 1010176308;
   HEAP32[7967] = -1075785027;
   HEAP32[7964] = -152832116;
   HEAP32[7965] = -1075370037;
   HEAP32[7962] = 0;
   HEAP32[7963] = 0;
   HEAP32[7960] = -1568178459;
   HEAP32[7961] = 1071423296;
   HEAP32[7958] = 1080819930;
   HEAP32[7959] = -1075103612;
   HEAP32[7956] = 1262514227;
   HEAP32[7957] = 1070706775;
   HEAP32[7954] = 0;
   HEAP32[7955] = 0;
   HEAP32[7952] = 1892259511;
   HEAP32[7953] = -1076060356;
   HEAP32[7950] = 1010176308;
   HEAP32[7951] = 1071698621;
   HEAP32[7948] = -152832116;
   HEAP32[7949] = 1072113611;
   HEAP32[7946] = 0;
   HEAP32[7947] = 0;
   HEAP32[7944] = -1568178459;
   HEAP32[7945] = -1076060352;
   HEAP32[7942] = 1080819930;
   HEAP32[7943] = 1072380036;
   HEAP32[7940] = 1262514227;
   HEAP32[7941] = -1076776873;
   HEAP32[7938] = 0;
   HEAP32[7939] = 0;
   HEAP32[7936] = -611328465;
   HEAP32[7937] = -1076060369;
   HEAP32[7934] = 0;
   HEAP32[7935] = -2147483648;
   HEAP32[7932] = 1180050855;
   HEAP32[7933] = -1075011805;
   HEAP32[7930] = 0;
   HEAP32[7931] = 0;
   HEAP32[7928] = 1892259511;
   HEAP32[7929] = -1076060356;
   HEAP32[7926] = 1080819930;
   HEAP32[7927] = -1075103612;
   HEAP32[7924] = 1262514227;
   HEAP32[7925] = -1076776873;
   HEAP32[7922] = 0;
   HEAP32[7923] = 0;
   HEAP32[7920] = 1892259511;
   HEAP32[7921] = -1076060356;
   HEAP32[7918] = 1010176308;
   HEAP32[7919] = -1075785027;
   HEAP32[7916] = -152832116;
   HEAP32[7917] = 1072113611;
   HEAP32[7914] = 0;
   HEAP32[7915] = 0;
   HEAP32[7912] = 0;
   HEAP32[7913] = -1074790400;
   HEAP32[7910] = 0;
   HEAP32[7911] = -2147483648;
   HEAP32[7908] = 0;
   HEAP32[7909] = 0;
   HEAP32[8090] = 0;
   HEAP32[8091] = 0;
   HEAP32[8088] = 0;
   HEAP32[8089] = 0;
   HEAP32[8094] = 1984068732;
   HEAP32[8095] = -1076640034;
   HEAP32[8092] = 802368610;
   HEAP32[8093] = 1072590609;
   HEAP32[8096] = 0;
   HEAP32[8097] = 0;
   HEAP32[8098] = 0;
   HEAP32[8099] = 0;
   HEAP32[8102] = -1633874279;
   HEAP32[8103] = -1075190921;
   HEAP32[8100] = -1780384203;
   HEAP32[8101] = 1071828772;
   HEAP32[8104] = 0;
   HEAP32[8105] = 0;
   HEAP32[8106] = 0;
   HEAP32[8107] = 0;
   HEAP32[8108] = 0;
   HEAP32[8109] = 0;
   HEAP32[8110] = 0;
   HEAP32[8111] = -1074790400;
   HEAP32[8112] = 0;
   HEAP32[8113] = 0;
   HEAP32[8114] = 0;
   HEAP32[8115] = 0;
   HEAP32[8118] = -1633874279;
   HEAP32[8119] = -1075190921;
   HEAP32[8116] = -1780384203;
   HEAP32[8117] = -1075654876;
   HEAP32[8120] = 0;
   HEAP32[8121] = 0;
   HEAP32[8122] = 0;
   HEAP32[8123] = 0;
   HEAP32[8242] = 0;
   HEAP32[8243] = 0;
   HEAP32[8240] = -1127824052;
   HEAP32[8241] = 1072380046;
   HEAP32[8238] = 122320669;
   HEAP32[8239] = 1071644651;
   HEAP32[8236] = -1283130070;
   HEAP32[8237] = 1069861723;
   HEAP32[8234] = 0;
   HEAP32[8235] = 0;
   HEAP32[8232] = -1127824052;
   HEAP32[8233] = 1072380046;
   HEAP32[8230] = 315010081;
   HEAP32[8231] = 1070843606;
   HEAP32[8228] = -170974058;
   HEAP32[8229] = -1076152195;
   HEAP32[8226] = 0;
   HEAP32[8227] = 0;
   HEAP32[8224] = -1127824052;
   HEAP32[8225] = 1072380046;
   HEAP32[8222] = 315010081;
   HEAP32[8223] = -1076640042;
   HEAP32[8220] = -170974058;
   HEAP32[8221] = -1076152195;
   HEAP32[8218] = 0;
   HEAP32[8219] = 0;
   HEAP32[8216] = -1127824052;
   HEAP32[8217] = 1072380046;
   HEAP32[8214] = 122320669;
   HEAP32[8215] = -1075838997;
   HEAP32[8212] = -1283130070;
   HEAP32[8213] = 1069861723;
   HEAP32[8210] = 0;
   HEAP32[8211] = 0;
   HEAP32[8208] = -1962353378;
   HEAP32[8209] = 1072380042;
   HEAP32[8206] = 0;
   HEAP32[8207] = 0;
   HEAP32[8204] = -1198467674;
   HEAP32[8205] = 1071698631;
   HEAP32[8202] = 0;
   HEAP32[8203] = 0;
   HEAP32[8200] = 1305120302;
   HEAP32[8201] = 1071698644;
   HEAP32[8198] = 1791379320;
   HEAP32[8199] = 1071644659;
   HEAP32[8196] = 149808459;
   HEAP32[8197] = 1072039335;
   HEAP32[8194] = 0;
   HEAP32[8195] = 0;
   HEAP32[8192] = 2139649628;
   HEAP32[8193] = 1071698648;
   HEAP32[8190] = 574769703;
   HEAP32[8191] = 1072292717;
   HEAP32[8188] = 2139649628;
   HEAP32[8189] = -1076833576;
   HEAP32[8186] = 0;
   HEAP32[8187] = 0;
   HEAP32[8184] = 1305120302;
   HEAP32[8185] = 1071698644;
   HEAP32[8182] = 0;
   HEAP32[8183] = 0;
   HEAP32[8180] = 663555267;
   HEAP32[8181] = -1075103614;
   HEAP32[8178] = 0;
   HEAP32[8179] = 0;
   HEAP32[8176] = 2139649628;
   HEAP32[8177] = 1071698648;
   HEAP32[8174] = 574769703;
   HEAP32[8175] = -1075190931;
   HEAP32[8172] = 2139649628;
   HEAP32[8173] = -1076833576;
   HEAP32[8170] = 0;
   HEAP32[8171] = 0;
   HEAP32[8168] = 1305120302;
   HEAP32[8169] = 1071698644;
   HEAP32[8166] = 1791379320;
   HEAP32[8167] = -1075838989;
   HEAP32[8164] = 149808459;
   HEAP32[8165] = 1072039335;
   HEAP32[8162] = 0;
   HEAP32[8163] = 0;
   HEAP32[8160] = 0;
   HEAP32[8161] = -2147483648;
   HEAP32[8158] = -1633874279;
   HEAP32[8159] = 1072292727;
   HEAP32[8156] = -1780384203;
   HEAP32[8157] = 1071828772;
   HEAP32[8154] = 0;
   HEAP32[8155] = 0;
   HEAP32[8152] = 0;
   HEAP32[8153] = -2147483648;
   HEAP32[8150] = 0;
   HEAP32[8151] = 1072693248;
   HEAP32[8148] = 0;
   HEAP32[8149] = -2147483648;
   HEAP32[8146] = 0;
   HEAP32[8147] = 0;
   HEAP32[8144] = 0;
   HEAP32[8145] = -2147483648;
   HEAP32[8142] = -1633874279;
   HEAP32[8143] = 1072292727;
   HEAP32[8140] = -1780384203;
   HEAP32[8141] = -1075654876;
   HEAP32[8138] = 0;
   HEAP32[8139] = 0;
   HEAP32[8136] = 0;
   HEAP32[8137] = -2147483648;
   HEAP32[8134] = 1984068732;
   HEAP32[8135] = 1070843614;
   HEAP32[8132] = 802368610;
   HEAP32[8133] = -1074893039;
   HEAP32[8130] = 0;
   HEAP32[8131] = 0;
   HEAP32[8128] = 0;
   HEAP32[8129] = -2147483648;
   HEAP32[8126] = 1984068732;
   HEAP32[8127] = -1076640034;
   HEAP32[8124] = 802368610;
   HEAP32[8125] = -1074893039;
   HEAP8[33616] = 1;
  }
 }
 
 function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 12 >> 2] = $4;
  $5 = $1 + 24 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $0 + 32 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 16 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $0 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $1 = $1 + 8 | 0;
  $5 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 44 >> 2] = $1;
  $4 = $2 + 8 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$1 + 4 >> 2] = $5;
  $4 = $2 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$1 + 4 >> 2] = $5;
  $2 = $2 + 24 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  HEAP8[$0 + 80 | 0] = 1;
  HEAPF64[$0 + 72 >> 3] = $3;
 }
 
 function btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20double_2c_20double_2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
  $24 = __stack_pointer + -64 | 0;
  __stack_pointer = $24;
  if ((HEAP32[$4 + 4 >> 2] & HEAP32[$4 + 8 >> 2]) < 0) {
   $11 = HEAP32[$4 + 12 >> 2];
   if (!(!$11 | !HEAPU8[$4 + 16 | 0])) {
    btAlignedFreeInternal_28void__29($11)
   }
   HEAP8[$4 + 16 | 0] = 1;
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 + 12 >> 2] = 0;
  }
  HEAP32[$4 + 4 >> 2] = 0;
  $28 = HEAP32[$3 + 4 >> 2];
  if (($28 | 0) > HEAP32[$4 + 8 >> 2]) {
   label$4 : {
    if (!$28) {
     break label$4
    }
    $26 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($28 << 5);
    $16 = HEAP32[$4 + 4 >> 2];
    if (($16 | 0) <= 0) {
     break label$4
    }
    if (($16 | 0) != 1) {
     $10 = $16 & -2;
     while (1) {
      $8 = HEAP32[$4 + 12 >> 2] + $13 | 0;
      $18 = HEAP32[$8 + 4 >> 2];
      $11 = $13 + $26 | 0;
      HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$11 + 4 >> 2] = $18;
      $18 = $8 + 24 | 0;
      $17 = HEAP32[$18 + 4 >> 2];
      $20 = $11 + 24 | 0;
      HEAP32[$20 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$20 + 4 >> 2] = $17;
      $18 = $8 + 16 | 0;
      $17 = HEAP32[$18 + 4 >> 2];
      $20 = $11 + 16 | 0;
      HEAP32[$20 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$20 + 4 >> 2] = $17;
      $8 = $8 + 8 | 0;
      $18 = HEAP32[$8 + 4 >> 2];
      $17 = $11 + 8 | 0;
      HEAP32[$17 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$17 + 4 >> 2] = $18;
      $8 = HEAP32[$4 + 12 >> 2] + $13 | 0;
      $18 = $8 + 40 | 0;
      $17 = HEAP32[$18 + 4 >> 2];
      $20 = $11 + 40 | 0;
      HEAP32[$20 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$20 + 4 >> 2] = $17;
      $18 = $8 + 48 | 0;
      $17 = HEAP32[$18 + 4 >> 2];
      $20 = $11 + 48 | 0;
      HEAP32[$20 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$20 + 4 >> 2] = $17;
      $18 = $8 + 56 | 0;
      $17 = HEAP32[$18 + 4 >> 2];
      $20 = $11 + 56 | 0;
      HEAP32[$20 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$20 + 4 >> 2] = $17;
      $8 = $8 + 32 | 0;
      $18 = HEAP32[$8 + 4 >> 2];
      $11 = $11 + 32 | 0;
      HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$11 + 4 >> 2] = $18;
      $13 = $13 - -64 | 0;
      $9 = $9 + 2 | 0;
      if (($10 | 0) != ($9 | 0)) {
       continue
      }
      break;
     };
    }
    if (!($16 & 1)) {
     break label$4
    }
    $13 = $9 << 5;
    $11 = $13 + $26 | 0;
    $13 = $13 + HEAP32[$4 + 12 >> 2] | 0;
    $9 = HEAP32[$13 + 4 >> 2];
    HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$11 + 4 >> 2] = $9;
    $9 = $13 + 24 | 0;
    $8 = HEAP32[$9 + 4 >> 2];
    $16 = $11 + 24 | 0;
    HEAP32[$16 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$16 + 4 >> 2] = $8;
    $9 = $13 + 16 | 0;
    $8 = HEAP32[$9 + 4 >> 2];
    $16 = $11 + 16 | 0;
    HEAP32[$16 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$16 + 4 >> 2] = $8;
    $13 = $13 + 8 | 0;
    $9 = HEAP32[$13 + 4 >> 2];
    $11 = $11 + 8 | 0;
    HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$11 + 4 >> 2] = $9;
   }
   $11 = HEAP32[$4 + 12 >> 2];
   if (!(!$11 | !HEAPU8[$4 + 16 | 0])) {
    btAlignedFreeInternal_28void__29($11)
   }
   HEAP32[$4 + 12 >> 2] = $26;
   HEAP8[$4 + 16 | 0] = 1;
   HEAP32[$4 + 8 >> 2] = $28;
  }
  $26 = HEAP32[$1 + 28 >> 2];
  label$8 : {
   if (($26 | 0) <= 0) {
    break label$8
   }
   $9 = HEAP32[$1 + 36 >> 2] + 24 | 0;
   $29 = HEAPF64[$2 + 80 >> 3];
   $30 = HEAPF64[$2 + 72 >> 3];
   $27 = HEAPF64[$2 + 48 >> 3];
   $32 = HEAPF64[$2 + 40 >> 3];
   $33 = HEAPF64[$0 + 16 >> 3];
   $31 = HEAPF64[$0 + 8 >> 3];
   $37 = HEAPF64[$0 >> 3];
   $38 = HEAPF64[$2 + 64 >> 3];
   $39 = HEAPF64[$2 + 32 >> 3];
   $40 = HEAPF64[$2 + 16 >> 3];
   $41 = HEAPF64[$2 + 8 >> 3];
   $36 = HEAPF64[$2 >> 3];
   $13 = 0;
   $21 = 3402823466385288598117041.0e14;
   $8 = -1;
   while (1) {
    $22 = HEAPF64[$9 + 16 >> 3];
    $23 = HEAPF64[$9 >> 3];
    $25 = HEAPF64[$9 + 8 >> 3];
    $22 = ($29 * $22 + ($38 * $23 + $25 * $30)) * $33 + (($40 * $22 + ($36 * $23 + $25 * $41)) * $37 + ($27 * $22 + ($39 * $23 + $25 * $32)) * $31);
    $11 = $22 < $21;
    $21 = $11 ? $22 : $21;
    $8 = $11 ? $13 : $8;
    $9 = $9 + 56 | 0;
    $13 = $13 + 1 | 0;
    if (($26 | 0) != ($13 | 0)) {
     continue
    }
    break;
   };
   if (($8 | 0) < 0) {
    break label$8
   }
   $28 = HEAP32[$1 + 36 >> 2] + Math_imul($8, 56) | 0;
   $44 = HEAP32[$28 + 4 >> 2];
   label$10 : {
    if (($44 | 0) <= 0) {
     $11 = $3;
     break label$10;
    }
    $51 = $28 + 40 | 0;
    $52 = $28 + 32 | 0;
    $53 = $28 + 24 | 0;
    $54 = $28 + 12 | 0;
    $26 = 0;
    while (1) {
     $11 = $26;
     $26 = $11 + 1 | 0;
     $45 = ($44 | 0) == ($26 | 0);
     $9 = HEAP32[$1 + 16 >> 2];
     $8 = HEAP32[$54 >> 2];
     $13 = $9 + (HEAP32[$8 + (($45 ? 0 : $26) << 2) >> 2] << 5) | 0;
     $36 = HEAPF64[$13 + 16 >> 3];
     $42 = HEAPF64[$13 >> 3];
     $43 = HEAPF64[$13 + 8 >> 3];
     $11 = $9 + (HEAP32[$8 + ($11 << 2) >> 2] << 5) | 0;
     $21 = HEAPF64[$11 + 16 >> 3];
     $22 = HEAPF64[$11 >> 3];
     $23 = HEAPF64[$11 + 8 >> 3];
     $55 = HEAPF64[$2 + 112 >> 3];
     $56 = HEAPF64[$2 + 96 >> 3];
     $57 = HEAPF64[$2 + 104 >> 3];
     $25 = HEAPF64[$2 + 80 >> 3];
     $29 = HEAPF64[$2 + 64 >> 3];
     $30 = HEAPF64[$2 + 72 >> 3];
     $27 = HEAPF64[$51 >> 3];
     $32 = HEAPF64[$2 + 16 >> 3];
     $33 = HEAPF64[$53 >> 3];
     $31 = HEAPF64[$2 >> 3];
     $37 = HEAPF64[$52 >> 3];
     $38 = HEAPF64[$2 + 8 >> 3];
     $39 = HEAPF64[$2 + 48 >> 3];
     $40 = HEAPF64[$2 + 32 >> 3];
     $41 = HEAPF64[$2 + 40 >> 3];
     HEAP32[$24 + 56 >> 2] = 0;
     HEAP32[$24 + 60 >> 2] = 0;
     $36 = $21 - $36;
     $42 = $22 - $42;
     $43 = $23 - $43;
     $46 = $32 * $36 + ($31 * $42 + $38 * $43);
     $47 = $39 * $27 + ($40 * $33 + $41 * $37);
     $48 = $32 * $27 + ($31 * $33 + $38 * $37);
     $49 = $39 * $36 + ($40 * $42 + $43 * $41);
     $50 = $46 * $47 - $48 * $49;
     HEAPF64[$24 + 48 >> 3] = -$50;
     $36 = $25 * $36 + ($29 * $42 + $43 * $30);
     $27 = $25 * $27 + ($29 * $33 + $30 * $37);
     $33 = $36 * $48 - $27 * $46;
     HEAPF64[$24 + 40 >> 3] = -$33;
     $27 = -($49 * $27 - $47 * $36);
     HEAPF64[$24 + 32 >> 3] = $27;
     $11 = $4;
     $16 = $24 + 32 | 0;
     $33 = -(($56 + ($21 * $32 + ($22 * $31 + $23 * $38))) * $27 - ($57 + ($21 * $39 + ($22 * $40 + $23 * $41))) * $33 - ($55 + ($21 * $25 + ($22 * $29 + $23 * $30))) * $50);
     $18 = 0;
     label$1 : {
      $4 = $3;
      $20 = HEAP32[$3 + 4 >> 2];
      if (($20 | 0) < 2) {
       break label$1
      }
      $31 = HEAPF64[$16 + 16 >> 3];
      $3 = HEAP32[$4 + 12 >> 2];
      $13 = ($3 + ($20 << 5) | 0) - 32 | 0;
      $22 = HEAPF64[$13 + 16 >> 3];
      $37 = HEAPF64[$16 >> 3];
      $23 = HEAPF64[$13 >> 3];
      $25 = HEAPF64[$13 + 8 >> 3];
      $38 = HEAPF64[$16 + 8 >> 3];
      $21 = $31 * $22 + ($37 * $23 + $25 * $38) + $33;
      while (1) {
       $3 = ($18 << 5) + $3 | 0;
       $29 = HEAPF64[$3 + 16 >> 3];
       $30 = HEAPF64[$3 >> 3];
       $27 = HEAPF64[$3 + 8 >> 3];
       $32 = $31 * $29 + ($37 * $30 + $27 * $38) + $33;
       $31 = HEAPF64[$3 + 24 >> 3];
       label$3 : {
        label$40 : {
         if ($21 < 0.0) {
          if ($32 < 0.0) {
           $3 = HEAP32[$11 + 4 >> 2];
           label$7 : {
            if (($3 | 0) != HEAP32[$11 + 8 >> 2]) {
             break label$7
            }
            $17 = $3 ? $3 << 1 : 1;
            if (($17 | 0) <= ($3 | 0)) {
             break label$7
            }
            label$81 : {
             if (!$17) {
              $13 = 0;
              break label$81;
             }
             $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($17 << 5);
             $3 = HEAP32[$11 + 4 >> 2];
            }
            label$102 : {
             if (($3 | 0) <= 0) {
              break label$102
             }
             $19 = $3 & 1;
             $9 = 0;
             if (($3 | 0) != 1) {
              $34 = $3 & -2;
              $3 = 0;
              while (1) {
               $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
               $12 = HEAP32[$10 + 4 >> 2];
               $8 = $3 + $13 | 0;
               HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
               HEAP32[$8 + 4 >> 2] = $12;
               $12 = $10 + 24 | 0;
               $15 = HEAP32[$12 + 4 >> 2];
               $14 = $8 + 24 | 0;
               HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$14 + 4 >> 2] = $15;
               $12 = $10 + 16 | 0;
               $15 = HEAP32[$12 + 4 >> 2];
               $14 = $8 + 16 | 0;
               HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$14 + 4 >> 2] = $15;
               $10 = $10 + 8 | 0;
               $12 = HEAP32[$10 + 4 >> 2];
               $15 = $8 + 8 | 0;
               HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
               HEAP32[$15 + 4 >> 2] = $12;
               $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
               $12 = $10 + 40 | 0;
               $15 = HEAP32[$12 + 4 >> 2];
               $14 = $8 + 40 | 0;
               HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$14 + 4 >> 2] = $15;
               $12 = $10 + 48 | 0;
               $15 = HEAP32[$12 + 4 >> 2];
               $14 = $8 + 48 | 0;
               HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$14 + 4 >> 2] = $15;
               $12 = $10 + 56 | 0;
               $15 = HEAP32[$12 + 4 >> 2];
               $14 = $8 + 56 | 0;
               HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$14 + 4 >> 2] = $15;
               $10 = $10 + 32 | 0;
               $12 = HEAP32[$10 + 4 >> 2];
               $8 = $8 + 32 | 0;
               HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
               HEAP32[$8 + 4 >> 2] = $12;
               $3 = $3 - -64 | 0;
               $9 = $9 + 2 | 0;
               if (($34 | 0) != ($9 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$19) {
              break label$102
             }
             $9 = $9 << 5;
             $3 = $9 + $13 | 0;
             $9 = $9 + HEAP32[$11 + 12 >> 2] | 0;
             $8 = HEAP32[$9 + 4 >> 2];
             HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
             HEAP32[$3 + 4 >> 2] = $8;
             $8 = $9 + 24 | 0;
             $10 = HEAP32[$8 + 4 >> 2];
             $19 = $3 + 24 | 0;
             HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$19 + 4 >> 2] = $10;
             $8 = $9 + 16 | 0;
             $10 = HEAP32[$8 + 4 >> 2];
             $19 = $3 + 16 | 0;
             HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$19 + 4 >> 2] = $10;
             $9 = $9 + 8 | 0;
             $8 = HEAP32[$9 + 4 >> 2];
             $3 = $3 + 8 | 0;
             HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
             HEAP32[$3 + 4 >> 2] = $8;
            }
            $3 = HEAP32[$11 + 12 >> 2];
            if (!(!$3 | !HEAPU8[$11 + 16 | 0])) {
             btAlignedFreeInternal_28void__29($3)
            }
            HEAP32[$11 + 12 >> 2] = $13;
            HEAP8[$11 + 16 | 0] = 1;
            HEAP32[$11 + 8 >> 2] = $17;
            $3 = HEAP32[$11 + 4 >> 2];
           }
           $3 = HEAP32[$11 + 12 >> 2] + ($3 << 5) | 0;
           HEAPF64[$3 + 24 >> 3] = $31;
           HEAPF64[$3 + 16 >> 3] = $29;
           HEAPF64[$3 + 8 >> 3] = $27;
           HEAPF64[$3 >> 3] = $30;
           break label$40;
          }
          $21 = $21 / ($21 - $32);
          $22 = ($29 - $22) * $21 + $22;
          $25 = ($27 - $25) * $21 + $25;
          $21 = ($30 - $23) * $21 + $23;
          $3 = HEAP32[$11 + 4 >> 2];
          label$14 : {
           if (($3 | 0) != HEAP32[$11 + 8 >> 2]) {
            break label$14
           }
           $17 = $3 ? $3 << 1 : 1;
           if (($17 | 0) <= ($3 | 0)) {
            break label$14
           }
           label$15 : {
            if (!$17) {
             $13 = 0;
             break label$15;
            }
            $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($17 << 5);
            $3 = HEAP32[$11 + 4 >> 2];
           }
           label$17 : {
            if (($3 | 0) <= 0) {
             break label$17
            }
            $19 = $3 & 1;
            $9 = 0;
            if (($3 | 0) != 1) {
             $34 = $3 & -2;
             $3 = 0;
             while (1) {
              $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
              $12 = HEAP32[$10 + 4 >> 2];
              $8 = $3 + $13 | 0;
              HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$8 + 4 >> 2] = $12;
              $12 = $10 + 24 | 0;
              $15 = HEAP32[$12 + 4 >> 2];
              $14 = $8 + 24 | 0;
              HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
              HEAP32[$14 + 4 >> 2] = $15;
              $12 = $10 + 16 | 0;
              $15 = HEAP32[$12 + 4 >> 2];
              $14 = $8 + 16 | 0;
              HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
              HEAP32[$14 + 4 >> 2] = $15;
              $10 = $10 + 8 | 0;
              $12 = HEAP32[$10 + 4 >> 2];
              $15 = $8 + 8 | 0;
              HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$15 + 4 >> 2] = $12;
              $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
              $12 = $10 + 40 | 0;
              $15 = HEAP32[$12 + 4 >> 2];
              $14 = $8 + 40 | 0;
              HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
              HEAP32[$14 + 4 >> 2] = $15;
              $12 = $10 + 48 | 0;
              $15 = HEAP32[$12 + 4 >> 2];
              $14 = $8 + 48 | 0;
              HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
              HEAP32[$14 + 4 >> 2] = $15;
              $12 = $10 + 56 | 0;
              $15 = HEAP32[$12 + 4 >> 2];
              $14 = $8 + 56 | 0;
              HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
              HEAP32[$14 + 4 >> 2] = $15;
              $10 = $10 + 32 | 0;
              $12 = HEAP32[$10 + 4 >> 2];
              $8 = $8 + 32 | 0;
              HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$8 + 4 >> 2] = $12;
              $3 = $3 - -64 | 0;
              $9 = $9 + 2 | 0;
              if (($34 | 0) != ($9 | 0)) {
               continue
              }
              break;
             };
            }
            if (!$19) {
             break label$17
            }
            $9 = $9 << 5;
            $3 = $9 + $13 | 0;
            $9 = $9 + HEAP32[$11 + 12 >> 2] | 0;
            $8 = HEAP32[$9 + 4 >> 2];
            HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
            HEAP32[$3 + 4 >> 2] = $8;
            $8 = $9 + 24 | 0;
            $10 = HEAP32[$8 + 4 >> 2];
            $19 = $3 + 24 | 0;
            HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
            HEAP32[$19 + 4 >> 2] = $10;
            $8 = $9 + 16 | 0;
            $10 = HEAP32[$8 + 4 >> 2];
            $19 = $3 + 16 | 0;
            HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
            HEAP32[$19 + 4 >> 2] = $10;
            $9 = $9 + 8 | 0;
            $8 = HEAP32[$9 + 4 >> 2];
            $3 = $3 + 8 | 0;
            HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
            HEAP32[$3 + 4 >> 2] = $8;
           }
           $3 = HEAP32[$11 + 12 >> 2];
           if (!(!$3 | !HEAPU8[$11 + 16 | 0])) {
            btAlignedFreeInternal_28void__29($3)
           }
           HEAP32[$11 + 12 >> 2] = $13;
           HEAP8[$11 + 16 | 0] = 1;
           HEAP32[$11 + 8 >> 2] = $17;
           $3 = HEAP32[$11 + 4 >> 2];
          }
          $3 = HEAP32[$11 + 12 >> 2] + ($3 << 5) | 0;
          HEAP32[$3 + 24 >> 2] = 0;
          HEAP32[$3 + 28 >> 2] = 0;
          HEAPF64[$3 + 16 >> 3] = $22;
          HEAPF64[$3 + 8 >> 3] = $25;
          HEAPF64[$3 >> 3] = $21;
          break label$40;
         }
         if (!($32 < 0.0)) {
          break label$3
         }
         $21 = $21 / ($21 - $32);
         $22 = ($29 - $22) * $21 + $22;
         $25 = ($27 - $25) * $21 + $25;
         $21 = ($30 - $23) * $21 + $23;
         $3 = HEAP32[$11 + 4 >> 2];
         label$21 : {
          if (($3 | 0) != HEAP32[$11 + 8 >> 2]) {
           break label$21
          }
          $17 = $3 ? $3 << 1 : 1;
          if (($17 | 0) <= ($3 | 0)) {
           break label$21
          }
          label$22 : {
           if (!$17) {
            $13 = 0;
            break label$22;
           }
           $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($17 << 5);
           $3 = HEAP32[$11 + 4 >> 2];
          }
          label$24 : {
           if (($3 | 0) <= 0) {
            break label$24
           }
           $19 = $3 & 1;
           $9 = 0;
           if (($3 | 0) != 1) {
            $34 = $3 & -2;
            $3 = 0;
            while (1) {
             $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
             $12 = HEAP32[$10 + 4 >> 2];
             $8 = $3 + $13 | 0;
             HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$8 + 4 >> 2] = $12;
             $12 = $10 + 24 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 24 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $12 = $10 + 16 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 16 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $10 = $10 + 8 | 0;
             $12 = HEAP32[$10 + 4 >> 2];
             $15 = $8 + 8 | 0;
             HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$15 + 4 >> 2] = $12;
             $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
             $12 = $10 + 40 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 40 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $12 = $10 + 48 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 48 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $12 = $10 + 56 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 56 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $10 = $10 + 32 | 0;
             $12 = HEAP32[$10 + 4 >> 2];
             $8 = $8 + 32 | 0;
             HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$8 + 4 >> 2] = $12;
             $3 = $3 - -64 | 0;
             $9 = $9 + 2 | 0;
             if (($34 | 0) != ($9 | 0)) {
              continue
             }
             break;
            };
           }
           if (!$19) {
            break label$24
           }
           $9 = $9 << 5;
           $3 = $9 + $13 | 0;
           $9 = $9 + HEAP32[$11 + 12 >> 2] | 0;
           $8 = HEAP32[$9 + 4 >> 2];
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $8;
           $8 = $9 + 24 | 0;
           $10 = HEAP32[$8 + 4 >> 2];
           $19 = $3 + 24 | 0;
           HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$19 + 4 >> 2] = $10;
           $8 = $9 + 16 | 0;
           $10 = HEAP32[$8 + 4 >> 2];
           $19 = $3 + 16 | 0;
           HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$19 + 4 >> 2] = $10;
           $9 = $9 + 8 | 0;
           $8 = HEAP32[$9 + 4 >> 2];
           $3 = $3 + 8 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $8;
          }
          $3 = HEAP32[$11 + 12 >> 2];
          if (!(!$3 | !HEAPU8[$11 + 16 | 0])) {
           btAlignedFreeInternal_28void__29($3)
          }
          HEAP32[$11 + 12 >> 2] = $13;
          HEAP8[$11 + 16 | 0] = 1;
          HEAP32[$11 + 8 >> 2] = $17;
          $3 = HEAP32[$11 + 4 >> 2];
         }
         $3 = HEAP32[$11 + 12 >> 2] + ($3 << 5) | 0;
         HEAP32[$3 + 24 >> 2] = 0;
         HEAP32[$3 + 28 >> 2] = 0;
         HEAPF64[$3 + 16 >> 3] = $22;
         HEAPF64[$3 + 8 >> 3] = $25;
         HEAPF64[$3 >> 3] = $21;
         $3 = HEAP32[$11 + 4 >> 2] + 1 | 0;
         HEAP32[$11 + 4 >> 2] = $3;
         label$28 : {
          if (HEAP32[$11 + 8 >> 2] != ($3 | 0)) {
           break label$28
          }
          $17 = $3 ? $3 << 1 : 1;
          if (($17 | 0) <= ($3 | 0)) {
           break label$28
          }
          label$29 : {
           if (!$17) {
            $13 = 0;
            break label$29;
           }
           $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($17 << 5);
           $3 = HEAP32[$11 + 4 >> 2];
          }
          label$31 : {
           if (($3 | 0) <= 0) {
            break label$31
           }
           $19 = $3 & 1;
           $9 = 0;
           if (($3 | 0) != 1) {
            $34 = $3 & -2;
            $3 = 0;
            while (1) {
             $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
             $12 = HEAP32[$10 + 4 >> 2];
             $8 = $3 + $13 | 0;
             HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$8 + 4 >> 2] = $12;
             $12 = $10 + 24 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 24 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $12 = $10 + 16 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 16 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $10 = $10 + 8 | 0;
             $12 = HEAP32[$10 + 4 >> 2];
             $15 = $8 + 8 | 0;
             HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$15 + 4 >> 2] = $12;
             $10 = HEAP32[$11 + 12 >> 2] + $3 | 0;
             $12 = $10 + 40 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 40 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $12 = $10 + 48 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 48 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $12 = $10 + 56 | 0;
             $15 = HEAP32[$12 + 4 >> 2];
             $14 = $8 + 56 | 0;
             HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$14 + 4 >> 2] = $15;
             $10 = $10 + 32 | 0;
             $12 = HEAP32[$10 + 4 >> 2];
             $8 = $8 + 32 | 0;
             HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$8 + 4 >> 2] = $12;
             $3 = $3 - -64 | 0;
             $9 = $9 + 2 | 0;
             if (($34 | 0) != ($9 | 0)) {
              continue
             }
             break;
            };
           }
           if (!$19) {
            break label$31
           }
           $9 = $9 << 5;
           $3 = $9 + $13 | 0;
           $9 = $9 + HEAP32[$11 + 12 >> 2] | 0;
           $8 = HEAP32[$9 + 4 >> 2];
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $8;
           $8 = $9 + 24 | 0;
           $10 = HEAP32[$8 + 4 >> 2];
           $19 = $3 + 24 | 0;
           HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$19 + 4 >> 2] = $10;
           $8 = $9 + 16 | 0;
           $10 = HEAP32[$8 + 4 >> 2];
           $19 = $3 + 16 | 0;
           HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$19 + 4 >> 2] = $10;
           $9 = $9 + 8 | 0;
           $8 = HEAP32[$9 + 4 >> 2];
           $3 = $3 + 8 | 0;
           HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$3 + 4 >> 2] = $8;
          }
          $3 = HEAP32[$11 + 12 >> 2];
          if (!(!$3 | !HEAPU8[$11 + 16 | 0])) {
           btAlignedFreeInternal_28void__29($3)
          }
          HEAP32[$11 + 12 >> 2] = $13;
          HEAP8[$11 + 16 | 0] = 1;
          HEAP32[$11 + 8 >> 2] = $17;
          $3 = HEAP32[$11 + 4 >> 2];
         }
         $3 = HEAP32[$11 + 12 >> 2] + ($3 << 5) | 0;
         HEAPF64[$3 + 24 >> 3] = $31;
         HEAPF64[$3 + 16 >> 3] = $29;
         HEAPF64[$3 + 8 >> 3] = $27;
         HEAPF64[$3 >> 3] = $30;
        }
        HEAP32[$11 + 4 >> 2] = HEAP32[$11 + 4 >> 2] + 1;
       }
       $18 = $18 + 1 | 0;
       if (($18 | 0) == ($20 | 0)) {
        break label$1
       }
       $31 = HEAPF64[$16 + 16 >> 3];
       $38 = HEAPF64[$16 + 8 >> 3];
       $37 = HEAPF64[$16 >> 3];
       $3 = HEAP32[$4 + 12 >> 2];
       $21 = $32;
       $22 = $29;
       $25 = $27;
       $23 = $30;
       continue;
      };
     }
     $3 = HEAP32[$4 + 4 >> 2];
     label$13 : {
      if (($3 | 0) >= 0) {
       break label$13
      }
      if (HEAP32[$4 + 8 >> 2] < 0) {
       $13 = HEAP32[$4 + 12 >> 2];
       if (!(!$13 | !HEAPU8[$4 + 16 | 0])) {
        btAlignedFreeInternal_28void__29($13)
       }
       HEAP8[$4 + 16 | 0] = 1;
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 0;
      }
      $13 = $3;
      $9 = 0 - $3 & 3;
      if ($9) {
       $8 = $3 << 5;
       while (1) {
        $10 = HEAP32[$24 + 4 >> 2];
        $16 = HEAP32[$4 + 12 >> 2] + $8 | 0;
        HEAP32[$16 >> 2] = HEAP32[$24 >> 2];
        HEAP32[$16 + 4 >> 2] = $10;
        $10 = $24 + 24 | 0;
        $18 = HEAP32[$10 + 4 >> 2];
        $17 = $16 + 24 | 0;
        HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$17 + 4 >> 2] = $18;
        $10 = $24 + 16 | 0;
        $18 = HEAP32[$10 + 4 >> 2];
        $17 = $16 + 16 | 0;
        HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$17 + 4 >> 2] = $18;
        $10 = $24 + 8 | 0;
        $18 = HEAP32[$10 + 4 >> 2];
        $16 = $16 + 8 | 0;
        HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
        HEAP32[$16 + 4 >> 2] = $18;
        $8 = $8 + 32 | 0;
        $13 = $13 + 1 | 0;
        $9 = $9 - 1 | 0;
        if ($9) {
         continue
        }
        break;
       };
      }
      if ($3 >>> 0 > 4294967292) {
       break label$13
      }
      $9 = $13 << 5;
      while (1) {
       $8 = HEAP32[$24 + 4 >> 2];
       $3 = HEAP32[$4 + 12 >> 2] + $9 | 0;
       $19 = HEAP32[$24 >> 2];
       HEAP32[$3 >> 2] = $19;
       HEAP32[$3 + 4 >> 2] = $8;
       $34 = $24 + 24 | 0;
       $10 = $34;
       $16 = HEAP32[$10 + 4 >> 2];
       $18 = $3 + 24 | 0;
       $12 = HEAP32[$10 >> 2];
       HEAP32[$18 >> 2] = $12;
       HEAP32[$18 + 4 >> 2] = $16;
       $10 = $24 + 16 | 0;
       $18 = HEAP32[$10 + 4 >> 2];
       $17 = $3 + 16 | 0;
       $15 = HEAP32[$10 >> 2];
       HEAP32[$17 >> 2] = $15;
       HEAP32[$17 + 4 >> 2] = $18;
       $20 = $3 + 8 | 0;
       $3 = $24 + 8 | 0;
       $17 = HEAP32[$3 + 4 >> 2];
       $14 = HEAP32[$3 >> 2];
       HEAP32[$20 >> 2] = $14;
       HEAP32[$20 + 4 >> 2] = $17;
       $20 = HEAP32[$4 + 12 >> 2] + $9 | 0;
       $35 = $20 + 32 | 0;
       HEAP32[$35 >> 2] = $19;
       HEAP32[$35 + 4 >> 2] = $8;
       $35 = $20 + 40 | 0;
       HEAP32[$35 >> 2] = $14;
       HEAP32[$35 + 4 >> 2] = $17;
       $35 = $20 + 48 | 0;
       HEAP32[$35 >> 2] = $15;
       HEAP32[$35 + 4 >> 2] = $18;
       $20 = $20 + 56 | 0;
       HEAP32[$20 >> 2] = $12;
       HEAP32[$20 + 4 >> 2] = $16;
       $20 = HEAP32[$4 + 12 >> 2] + $9 | 0;
       $35 = $20 + 88 | 0;
       HEAP32[$35 >> 2] = $12;
       HEAP32[$35 + 4 >> 2] = $16;
       $16 = $20 + 80 | 0;
       HEAP32[$16 >> 2] = $15;
       HEAP32[$16 + 4 >> 2] = $18;
       $16 = $20 + 72 | 0;
       HEAP32[$16 >> 2] = $14;
       HEAP32[$16 + 4 >> 2] = $17;
       $16 = $20 - -64 | 0;
       HEAP32[$16 >> 2] = $19;
       HEAP32[$16 + 4 >> 2] = $8;
       $16 = HEAP32[$24 + 4 >> 2];
       $8 = HEAP32[$4 + 12 >> 2] + $9 | 0;
       $18 = $8 + 96 | 0;
       HEAP32[$18 >> 2] = HEAP32[$24 >> 2];
       HEAP32[$18 + 4 >> 2] = $16;
       $16 = HEAP32[$3 + 4 >> 2];
       $18 = $8 + 104 | 0;
       HEAP32[$18 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$18 + 4 >> 2] = $16;
       $3 = HEAP32[$10 + 4 >> 2];
       $16 = $8 + 112 | 0;
       HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$16 + 4 >> 2] = $3;
       $3 = HEAP32[$34 + 4 >> 2];
       $8 = $8 + 120 | 0;
       HEAP32[$8 >> 2] = HEAP32[$34 >> 2];
       HEAP32[$8 + 4 >> 2] = $3;
       $9 = $9 + 128 | 0;
       $13 = $13 + 4 | 0;
       if ($13) {
        continue
       }
       break;
      };
     }
     HEAP32[$4 + 4 >> 2] = 0;
     $3 = $11;
     if (!$45) {
      continue
     }
     break;
    };
   }
   $8 = HEAP32[$11 + 4 >> 2];
   if (($8 | 0) <= 0) {
    break label$8
   }
   $21 = HEAPF64[$28 + 40 >> 3];
   $22 = HEAPF64[$28 + 24 >> 3];
   $23 = HEAPF64[$28 + 32 >> 3];
   $25 = HEAPF64[$2 + 80 >> 3] * $21 + (HEAPF64[$2 + 64 >> 3] * $22 + $23 * HEAPF64[$2 + 72 >> 3]);
   $29 = HEAPF64[$2 + 16 >> 3] * $21 + (HEAPF64[$2 >> 3] * $22 + $23 * HEAPF64[$2 + 8 >> 3]);
   $21 = HEAPF64[$2 + 48 >> 3] * $21 + (HEAPF64[$2 + 32 >> 3] * $22 + $23 * HEAPF64[$2 + 40 >> 3]);
   $22 = HEAPF64[$28 + 48 >> 3] - ($25 * HEAPF64[$2 + 112 >> 3] + ($29 * HEAPF64[$2 + 96 >> 3] + $21 * HEAPF64[$2 + 104 >> 3]));
   $9 = 0;
   $13 = 0;
   while (1) {
    $1 = HEAP32[$11 + 12 >> 2] + $9 | 0;
    $3 = $1 + 16 | 0;
    $4 = $1 + 8 | 0;
    $23 = $22 + ($25 * HEAPF64[$3 >> 3] + ($29 * HEAPF64[$1 >> 3] + $21 * HEAPF64[$4 >> 3]));
    $23 = $5 >= $23 ? $5 : $23;
    if ($6 >= $23) {
     $26 = $1 + 24 | 0;
     $8 = HEAP32[$26 + 4 >> 2];
     $2 = $24 + 32 | 0;
     $28 = $2 + 24 | 0;
     HEAP32[$28 >> 2] = HEAP32[$26 >> 2];
     HEAP32[$28 + 4 >> 2] = $8;
     $26 = HEAP32[$3 + 4 >> 2];
     $8 = $2 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $26;
     $3 = HEAP32[$4 + 4 >> 2];
     $26 = $2 + 8 | 0;
     HEAP32[$26 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$26 + 4 >> 2] = $3;
     $3 = HEAP32[$1 + 4 >> 2];
     HEAP32[$24 + 32 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$24 + 36 >> 2] = $3;
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7, $0, $2, $23);
     $8 = HEAP32[$11 + 4 >> 2];
    }
    $9 = $9 + 32 | 0;
    $13 = $13 + 1 | 0;
    if (($8 | 0) > ($13 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $24 - -64 | 0;
 }
 
 function btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $1, $2, $3) {
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = 15448;
  return $0;
 }
 
 function btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
  $7 = __stack_pointer - 512 | 0;
  __stack_pointer = $7;
  btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
  $6 = $1 + 104 | 0;
  $11 = HEAPF64[$6 >> 3];
  $14 = HEAPF64[$2 + 104 >> 3];
  $12 = $3 + 104 | 0;
  $15 = HEAPF64[$12 >> 3];
  $17 = HEAPF64[$4 + 104 >> 3];
  $9 = $1 + 112 | 0;
  $18 = HEAPF64[$9 >> 3];
  $19 = HEAPF64[$2 + 112 >> 3];
  $16 = $3 + 112 | 0;
  $20 = HEAPF64[$16 >> 3];
  $21 = HEAPF64[$4 + 112 >> 3];
  $22 = HEAPF64[$1 + 96 >> 3];
  $24 = HEAPF64[$2 + 96 >> 3];
  $25 = HEAPF64[$3 + 96 >> 3];
  $26 = HEAPF64[$4 + 96 >> 3];
  HEAP8[$7 + 472 | 0] = 0;
  HEAP32[$7 + 464 >> 2] = 966823146;
  HEAP32[$7 + 468 >> 2] = 1177108057;
  HEAP32[$7 + 392 >> 2] = 15500;
  $23 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($7 + 272 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], 0);
  $8 = $1 + 8 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $13 = $7 + 8 | 0;
  $0 = $13 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 16 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 16 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 24 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 24 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 40 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 40 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 48 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 48 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 56 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 56 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 72 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 72 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 80 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 80 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = $1 + 88 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 88 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  HEAP32[$7 + 264 >> 2] = 966823146;
  HEAP32[$7 + 268 >> 2] = 1177108057;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP32[$7 + 40 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$7 + 44 >> 2] = $0;
  $0 = HEAP32[$1 + 68 >> 2];
  HEAP32[$7 + 72 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$7 + 76 >> 2] = $0;
  $8 = $1 + 120 | 0;
  $10 = HEAP32[$8 + 4 >> 2];
  $0 = $13 + 120 | 0;
  HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$0 + 4 >> 2] = $10;
  $8 = HEAP32[$9 + 4 >> 2];
  $0 = $13 + 112 | 0;
  HEAP32[$0 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$0 + 4 >> 2] = $8;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $13 + 104 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = $3 + 8 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 144 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = $3 + 16 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 152 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = $3 + 24 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 160 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = HEAP32[$3 + 36 >> 2];
  $0 = $7 + 168 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$0 + 4 >> 2] = $6;
  $6 = $3 + 40 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 176 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = $3 + 48 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 184 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = $3 + 56 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 192 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $0 = HEAP32[$1 + 100 >> 2];
  HEAP32[$7 + 104 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$7 + 108 >> 2] = $0;
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 136 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$7 + 140 >> 2] = $0;
  $6 = $3 + 88 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 224 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = $3 + 80 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 216 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = $3 + 72 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 208 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = HEAP32[$3 + 68 >> 2];
  $0 = $7 + 200 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3 + 64 >> 2];
  HEAP32[$0 + 4 >> 2] = $6;
  $6 = $3 + 120 | 0;
  $9 = HEAP32[$6 + 4 >> 2];
  $0 = $7 + 256 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $6 = HEAP32[$16 + 4 >> 2];
  $0 = $7 + 248 | 0;
  HEAP32[$0 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$0 + 4 >> 2] = $6;
  $6 = HEAP32[$12 + 4 >> 2];
  $0 = $7 + 240 | 0;
  HEAP32[$0 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$0 + 4 >> 2] = $6;
  $6 = HEAP32[$3 + 100 >> 2];
  $0 = $7 + 232 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3 + 96 >> 2];
  HEAP32[$0 + 4 >> 2] = $6;
  $9 = $7 + 392 | 0;
  btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($23, $13, $9, 0, 0);
  $6 = $9 + 48 | 0;
  $12 = HEAP32[$6 + 4 >> 2];
  $8 = $7 + 480 | 0;
  $0 = $8 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $12;
  $6 = $9 + 56 | 0;
  $12 = HEAP32[$6 + 4 >> 2];
  $0 = $8 + 16 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $12;
  $6 = $7 + 456 | 0;
  $12 = HEAP32[$6 + 4 >> 2];
  $0 = $8 + 24 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $12;
  $0 = HEAP32[$7 + 436 >> 2];
  HEAP32[$7 + 480 >> 2] = HEAP32[$7 + 432 >> 2];
  HEAP32[$7 + 484 >> 2] = $0;
  $6 = 0;
  label$1 : {
   if (!HEAPU8[$7 + 472 | 0]) {
    break label$1
   }
   $20 = $19 - $18 - ($21 - $20);
   $21 = $14 - $11 - ($17 - $15);
   $22 = $24 - $22 - ($26 - $25);
   $0 = $7 + 392 | 0;
   $17 = HEAPF64[$0 + 24 >> 3];
   $18 = HEAPF64[$0 + 16 >> 3];
   $19 = HEAPF64[$7 + 400 >> 3];
   $15 = HEAPF64[$7 + 464 >> 3];
   label$3 : {
    label$4 : {
     if (!($15 > .001)) {
      $11 = 0.0;
      $15 = HEAPF64[$7 + 424 >> 3];
      break label$4;
     }
     $0 = $7 + 432 | 0;
     $12 = 65;
     $14 = 0.0;
     while (1) {
      $12 = $12 - 1 | 0;
      $6 = 0;
      if (!$12) {
       break label$1
      }
      $11 = $14 - $15 / ($20 * $17 + ($22 * $19 + $21 * $18));
      $6 = 0;
      if ($11 <= $14) {
       break label$1
      }
      $6 = 0;
      if ($11 > 1.0) {
       break label$1
      }
      $6 = 0;
      if ($11 < 0.0) {
       break label$1
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $11);
      $14 = 1.0 - $11;
      HEAPF64[$7 + 104 >> 3] = $14 * HEAPF64[$1 + 96 >> 3] + $11 * HEAPF64[$2 + 96 >> 3];
      HEAPF64[$7 + 112 >> 3] = $14 * HEAPF64[$1 + 104 >> 3] + $11 * HEAPF64[$2 + 104 >> 3];
      HEAPF64[$7 + 120 >> 3] = $14 * HEAPF64[$1 + 112 >> 3] + $11 * HEAPF64[$2 + 112 >> 3];
      HEAPF64[$7 + 232 >> 3] = $14 * HEAPF64[$3 + 96 >> 3] + $11 * HEAPF64[$4 + 96 >> 3];
      HEAPF64[$7 + 240 >> 3] = $14 * HEAPF64[$3 + 104 >> 3] + $11 * HEAPF64[$4 + 104 >> 3];
      HEAPF64[$7 + 248 >> 3] = $14 * HEAPF64[$3 + 112 >> 3] + $11 * HEAPF64[$4 + 112 >> 3];
      btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($23, $7 + 8 | 0, $7 + 392 | 0, 0, 0);
      $6 = 0;
      if (!HEAPU8[$7 + 472 | 0]) {
       break label$1
      }
      $15 = HEAPF64[$7 + 464 >> 3];
      if ($15 < 0.0) {
       HEAPF64[$5 + 328 >> 3] = $11;
       $15 = HEAPF64[$7 + 424 >> 3];
       $17 = HEAPF64[$7 + 416 >> 3];
       $18 = HEAPF64[$7 + 408 >> 3];
       $19 = HEAPF64[$7 + 400 >> 3];
       break label$3;
      }
      $9 = $0 + 24 | 0;
      $16 = HEAP32[$9 + 4 >> 2];
      $8 = $7 + 480 | 0;
      $6 = $8 + 24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$6 + 4 >> 2] = $16;
      $9 = $0 + 16 | 0;
      $16 = HEAP32[$9 + 4 >> 2];
      $6 = $8 + 16 | 0;
      HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$6 + 4 >> 2] = $16;
      $9 = $0 + 8 | 0;
      $16 = HEAP32[$9 + 4 >> 2];
      $6 = $8 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$6 + 4 >> 2] = $16;
      $6 = HEAP32[$0 + 4 >> 2];
      HEAP32[$7 + 480 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$7 + 484 >> 2] = $6;
      $17 = HEAPF64[$7 + 416 >> 3];
      $18 = HEAPF64[$7 + 408 >> 3];
      $19 = HEAPF64[$7 + 400 >> 3];
      $14 = $11;
      if ($15 > .001) {
       continue
      }
      break;
     };
     $15 = HEAPF64[$7 + 424 >> 3];
    }
    $6 = 0;
    if (-HEAPF64[$5 + 344 >> 3] <= $17 * $20 + ($19 * $22 + $21 * $18)) {
     break label$1
    }
    HEAPF64[$5 + 328 >> 3] = $11;
    $0 = $7 + 480 | 0;
   }
   HEAPF64[$5 + 264 >> 3] = $19;
   HEAPF64[$5 + 288 >> 3] = $15;
   HEAPF64[$5 + 280 >> 3] = $17;
   HEAPF64[$5 + 272 >> 3] = $18;
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$5 + 296 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 300 >> 2] = $1;
   $2 = $0 + 8 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $5 + 304 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = $0 + 16 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $1 = $5 + 312 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $0 = $0 + 24 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $1 = $5 + 320 | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $6 = 1;
  }
  __stack_pointer = $7 + 512 | 0;
  return $6 | 0;
 }
 
 function btPointCollector__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0;
  if ($3 < HEAPF64[$0 + 72 >> 3]) {
   HEAP8[$0 + 80 | 0] = 1;
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 12 >> 2] = $4;
   $5 = $1 + 8 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $4 = $0 + 16 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   $5 = $1 + 16 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $4 = $0 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   $1 = $1 + 24 | 0;
   $5 = HEAP32[$1 + 4 >> 2];
   $4 = $0 + 32 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 + 40 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 44 >> 2] = $1;
   $4 = $2 + 8 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $1 = $0 + 48 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $5;
   $4 = $2 + 16 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   $1 = $0 + 56 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $5;
   $2 = $2 + 24 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $1 = $0 - -64 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   HEAPF64[$0 + 72 >> 3] = $3;
  }
 }
 
 function btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 15580;
  label$1 : {
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 56 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  $1 = HEAP32[$0 + 44 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 48 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 1;
  $1 = $0 + 36 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 24 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 28 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 28 | 0] = 1;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 15580;
  label$1 : {
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 56 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  $1 = HEAP32[$0 + 44 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 48 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 1;
  $1 = $0 + 36 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 24 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 28 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 28 | 0] = 1;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  operator_20delete_28void__29($0);
 }
 
 function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0;
  $9 = __stack_pointer - 1744 | 0;
  __stack_pointer = $9;
  $5 = HEAP32[$0 + 56 >> 2];
  if (!$5) {
   $5 = HEAP32[$0 + 4 >> 2];
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 12 >> 2]]($5, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 56 >> 2] = $5;
  }
  HEAP32[$4 + 4 >> 2] = $5;
  $14 = HEAP32[$2 + 4 >> 2];
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      $33 = HEAP32[$1 + 4 >> 2];
      switch (HEAP32[$33 + 4 >> 2] - 8 | 0) {
      case 0:
       break label$4;
      case 2:
       break label$5;
      default:
       break label$3;
      };
     }
     label$6 : {
      switch (HEAP32[$14 + 4 >> 2] - 8 | 0) {
      case 2:
       $6 = HEAPF64[$5 + 1464 >> 3];
       $12 = $6;
       $3 = $33 + 48 | 0;
       $0 = HEAP32[$33 + 96 >> 2];
       $19 = HEAPF64[$3 + ($0 << 3) >> 3];
       $18 = HEAPF64[$3 + (($0 + 2 | 0) % 3 << 3) >> 3];
       $5 = $14 + 48 | 0;
       $3 = HEAP32[$14 + 96 >> 2];
       $6 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20double_2c_20double_2c_20double_2c_20double_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20double_29($9 + 760 | 0, $9 + 8 | 0, $19, $18, HEAPF64[$5 + ($3 << 3) >> 3], HEAPF64[$5 + (($3 + 2 | 0) % 3 << 3) >> 3], $0, $3, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $6);
       if ($12 > $6) {
        FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $9 + 760 | 0, $9 + 8 | 0, $6)
       }
       $0 = HEAP32[$4 + 4 >> 2];
       if (!HEAP32[$0 + 1456 >> 2]) {
        break label$2
       }
       $2 = HEAP32[$0 + 1448 >> 2];
       $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
       $1 = ($2 | 0) == ($3 | 0);
       $7 = $0;
       $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
       btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($7, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
       break label$2;
      case 0:
       break label$6;
      default:
       break label$3;
      };
     }
     $6 = HEAPF64[$5 + 1464 >> 3];
     $12 = $6;
     $3 = $33 + 48 | 0;
     $0 = HEAP32[$33 + 96 >> 2];
     $6 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20double_2c_20double_2c_20double_2c_20double_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20double_29($9 + 760 | 0, $9 + 8 | 0, HEAPF64[$3 + ($0 << 3) >> 3], HEAPF64[$3 + (($0 + 2 | 0) % 3 << 3) >> 3], 0.0, HEAPF64[$14 + 48 >> 3] * HEAPF64[$14 + 16 >> 3], $0, 1, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $6);
     if ($12 > $6) {
      FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $9 + 760 | 0, $9 + 8 | 0, $6)
     }
     $0 = HEAP32[$4 + 4 >> 2];
     if (!HEAP32[$0 + 1456 >> 2]) {
      break label$2
     }
     $2 = HEAP32[$0 + 1448 >> 2];
     $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
     $1 = ($2 | 0) == ($3 | 0);
     $7 = $0;
     $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($7, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
     break label$2;
    }
    if (HEAP32[$14 + 4 >> 2] != 10) {
     break label$3
    }
    $6 = HEAPF64[$5 + 1464 >> 3];
    $12 = $6;
    $3 = $14 + 48 | 0;
    $0 = HEAP32[$14 + 96 >> 2];
    $6 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20double_2c_20double_2c_20double_2c_20double_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20double_29($9 + 760 | 0, $9 + 8 | 0, 0.0, HEAPF64[$33 + 48 >> 3] * HEAPF64[$33 + 16 >> 3], HEAPF64[$3 + ($0 << 3) >> 3], HEAPF64[$3 + (($0 + 2 | 0) % 3 << 3) >> 3], 1, $0, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $6);
    if ($12 > $6) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $9 + 760 | 0, $9 + 8 | 0, $6)
    }
    $0 = HEAP32[$4 + 4 >> 2];
    if (!HEAP32[$0 + 1456 >> 2]) {
     break label$2
    }
    $2 = HEAP32[$0 + 1448 >> 2];
    $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
    $1 = ($2 | 0) == ($3 | 0);
    $7 = $0;
    $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($7, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
    break label$2;
   }
   HEAP32[$9 + 1736 >> 2] = 966823146;
   HEAP32[$9 + 1740 >> 2] = 1177108057;
   HEAP8[$9 + 1424 | 0] = 0;
   HEAP32[$9 + 1376 >> 2] = -2147483648;
   HEAP32[$9 + 1380 >> 2] = 1030854553;
   $32 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($9 + 640 | 0, $33, $14, $9 + 760 | 0, HEAP32[$0 + 8 >> 2]);
   HEAP32[$32 + 52 >> 2] = $14;
   HEAP32[$32 + 48 >> 2] = $33;
   $12 = +FUNCTION_TABLE[HEAP32[HEAP32[$33 >> 2] + 48 >> 2]]($33) + +FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 48 >> 2]]($14) + HEAPF64[HEAP32[$0 + 56 >> 2] + 1464 >> 3] + HEAPF64[$4 + 32 >> 3];
   HEAPF64[$9 + 1736 >> 3] = $12 * $12;
   $5 = HEAP32[$1 + 12 >> 2];
   $13 = $5 + 8 | 0;
   $8 = HEAP32[$13 + 4 >> 2];
   $7 = $9 + 1480 | 0;
   $10 = $7 + 8 | 0;
   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $13 = $5 + 16 | 0;
   $8 = HEAP32[$13 + 4 >> 2];
   $10 = $7 + 16 | 0;
   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $13 = $5 + 24 | 0;
   $8 = HEAP32[$13 + 4 >> 2];
   $10 = $7 + 24 | 0;
   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $13 = HEAP32[$5 >> 2];
   $8 = HEAP32[$5 + 4 >> 2];
   $10 = $5 + 56 | 0;
   $20 = HEAP32[$10 + 4 >> 2];
   $16 = $7 + 56 | 0;
   HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$16 + 4 >> 2] = $20;
   $10 = $5 + 48 | 0;
   $20 = HEAP32[$10 + 4 >> 2];
   $16 = $7 + 48 | 0;
   HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$16 + 4 >> 2] = $20;
   $10 = $5 + 40 | 0;
   $20 = HEAP32[$10 + 4 >> 2];
   $16 = $7 + 40 | 0;
   HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$16 + 4 >> 2] = $20;
   $10 = HEAP32[$5 + 32 >> 2];
   $20 = HEAP32[$5 + 36 >> 2];
   $16 = $5 + 88 | 0;
   $28 = HEAP32[$16 + 4 >> 2];
   $29 = $7 + 88 | 0;
   HEAP32[$29 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$29 + 4 >> 2] = $28;
   $16 = $5 + 80 | 0;
   $28 = HEAP32[$16 + 4 >> 2];
   $29 = $7 + 80 | 0;
   HEAP32[$29 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$29 + 4 >> 2] = $28;
   $16 = $5 + 72 | 0;
   $28 = HEAP32[$16 + 4 >> 2];
   $29 = $7 + 72 | 0;
   HEAP32[$29 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$29 + 4 >> 2] = $28;
   HEAP32[$9 + 1480 >> 2] = $13;
   HEAP32[$9 + 1484 >> 2] = $8;
   HEAP32[$9 + 1512 >> 2] = $10;
   HEAP32[$9 + 1516 >> 2] = $20;
   $13 = HEAP32[$5 + 68 >> 2];
   HEAP32[$9 + 1544 >> 2] = HEAP32[$5 + 64 >> 2];
   HEAP32[$9 + 1548 >> 2] = $13;
   $13 = $5 + 120 | 0;
   $8 = HEAP32[$13 + 4 >> 2];
   $10 = $7 + 120 | 0;
   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $13 = $5 + 112 | 0;
   $8 = HEAP32[$13 + 4 >> 2];
   $10 = $7 + 112 | 0;
   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $13 = $5 + 104 | 0;
   $8 = HEAP32[$13 + 4 >> 2];
   $7 = $7 + 104 | 0;
   HEAP32[$7 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$7 + 4 >> 2] = $8;
   $7 = HEAP32[$5 + 100 >> 2];
   HEAP32[$9 + 1576 >> 2] = HEAP32[$5 + 96 >> 2];
   HEAP32[$9 + 1580 >> 2] = $7;
   $5 = HEAP32[$2 + 12 >> 2];
   $7 = $5 + 24 | 0;
   $13 = HEAP32[$7 + 4 >> 2];
   $8 = $9 + 1632 | 0;
   HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$8 + 4 >> 2] = $13;
   $7 = $5 + 16 | 0;
   $13 = HEAP32[$7 + 4 >> 2];
   $8 = $9 + 1624 | 0;
   HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$8 + 4 >> 2] = $13;
   $7 = $5 + 8 | 0;
   $13 = HEAP32[$7 + 4 >> 2];
   $8 = $9 + 1616 | 0;
   HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$8 + 4 >> 2] = $13;
   $7 = HEAP32[$5 + 4 >> 2];
   HEAP32[$9 + 1608 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$9 + 1612 >> 2] = $7;
   $7 = HEAP32[$5 + 36 >> 2];
   $28 = $9 + 1640 | 0;
   HEAP32[$28 >> 2] = HEAP32[$5 + 32 >> 2];
   HEAP32[$28 + 4 >> 2] = $7;
   $7 = $5 + 40 | 0;
   $13 = HEAP32[$7 + 4 >> 2];
   $8 = $9 + 1648 | 0;
   HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$8 + 4 >> 2] = $13;
   $7 = $5 + 48 | 0;
   $13 = HEAP32[$7 + 4 >> 2];
   $8 = $9 + 1656 | 0;
   HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$8 + 4 >> 2] = $13;
   $7 = $5 + 56 | 0;
   $13 = HEAP32[$7 + 4 >> 2];
   $8 = $9 + 1664 | 0;
   HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$8 + 4 >> 2] = $13;
   $7 = HEAP32[$5 + 68 >> 2];
   $13 = $9 + 1672 | 0;
   HEAP32[$13 >> 2] = HEAP32[$5 + 64 >> 2];
   HEAP32[$13 + 4 >> 2] = $7;
   $7 = $5 + 72 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $10 = $9 + 1680 | 0;
   HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $7 = $5 + 80 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $10 = $9 + 1688 | 0;
   HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $7 = $5 + 88 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $10 = $9 + 1696 | 0;
   HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$10 + 4 >> 2] = $8;
   $7 = HEAP32[$5 + 100 >> 2];
   $8 = $9 + 1704 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 + 96 >> 2];
   HEAP32[$8 + 4 >> 2] = $7;
   $7 = $5 + 104 | 0;
   $10 = HEAP32[$7 + 4 >> 2];
   $20 = $9 + 1712 | 0;
   HEAP32[$20 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$20 + 4 >> 2] = $10;
   $7 = $5 + 120 | 0;
   $10 = HEAP32[$7 + 4 >> 2];
   $20 = $9 + 1728 | 0;
   HEAP32[$20 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$20 + 4 >> 2] = $10;
   $5 = $5 + 112 | 0;
   $7 = HEAP32[$5 + 4 >> 2];
   $10 = $9 + 1720 | 0;
   HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$10 + 4 >> 2] = $7;
   label$11 : {
    $5 = HEAP32[$33 + 4 >> 2];
    if (($5 | 0) > 6) {
     break label$11
    }
    $7 = HEAP32[$14 + 4 >> 2];
    if (($7 | 0) > 6) {
     break label$11
    }
    HEAP32[$9 + 632 >> 2] = 15700;
    if ($5) {
     $49 = +FUNCTION_TABLE[HEAP32[HEAP32[$33 >> 2] + 48 >> 2]]($33);
     $7 = HEAP32[$14 + 4 >> 2];
    }
    if ($7) {
     $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 48 >> 2]]($14)
    }
    HEAP8[$9 + 72 | 0] = 0;
    HEAPF64[$9 + 56 >> 3] = $6;
    HEAPF64[$9 + 48 >> 3] = $49;
    HEAP32[$9 + 12 >> 2] = $4;
    HEAP32[$9 + 8 >> 2] = 15876;
    if (!HEAP32[$33 + 96 >> 2]) {
     break label$11
    }
    if (HEAP32[$14 + 96 >> 2]) {
     $57 = HEAPF64[HEAP32[$0 + 56 >> 2] + 1464 >> 3];
     label$15 : {
      label$16 : {
       if (HEAPU8[$3 + 32 | 0]) {
        $49 = -1000000015047466219876688.0e6;
        $16 = HEAP32[$33 + 96 >> 2];
        $32 = HEAP32[$14 + 96 >> 2];
        $10 = HEAP32[$1 + 12 >> 2];
        $20 = HEAP32[$2 + 12 >> 2];
        $28 = $9 + 448 | 0;
        $8 = __stack_pointer - 192 | 0;
        __stack_pointer = $8;
        HEAP32[8407] = HEAP32[8407] + 1;
        $6 = HEAPF64[$16 + 80 >> 3];
        $19 = HEAPF64[$10 + 80 >> 3];
        $12 = HEAPF64[$16 + 64 >> 3];
        $35 = HEAPF64[$10 + 64 >> 3];
        $25 = HEAPF64[$16 + 72 >> 3];
        $30 = HEAPF64[$10 + 72 >> 3];
        $27 = HEAPF64[$32 + 80 >> 3];
        $50 = HEAPF64[$32 + 64 >> 3];
        $39 = HEAPF64[$32 + 72 >> 3];
        $55 = $6 * $19 + ($12 * $35 + $25 * $30) + HEAPF64[$10 + 112 >> 3] - ($27 * HEAPF64[$20 + 80 >> 3] + ($50 * HEAPF64[$20 + 64 >> 3] + $39 * HEAPF64[$20 + 72 >> 3]) + HEAPF64[$20 + 112 >> 3]);
        $36 = HEAPF64[$10 + 48 >> 3];
        $43 = HEAPF64[$10 + 32 >> 3];
        $41 = HEAPF64[$10 + 40 >> 3];
        $56 = $6 * $36 + ($12 * $43 + $25 * $41) + HEAPF64[$10 + 104 >> 3] - ($27 * HEAPF64[$20 + 48 >> 3] + ($50 * HEAPF64[$20 + 32 >> 3] + $39 * HEAPF64[$20 + 40 >> 3]) + HEAPF64[$20 + 104 >> 3]);
        $52 = HEAPF64[$10 + 16 >> 3];
        $40 = HEAPF64[$10 >> 3];
        $38 = HEAPF64[$10 + 8 >> 3];
        $50 = $6 * $52 + ($12 * $40 + $25 * $38) + HEAPF64[$10 + 96 >> 3] - ($27 * HEAPF64[$20 + 16 >> 3] + ($50 * HEAPF64[$20 >> 3] + $39 * HEAPF64[$20 + 8 >> 3]) + HEAPF64[$20 + 96 >> 3]);
        label$1 : {
         label$24 : {
          $3 = HEAP32[$16 + 28 >> 2];
          if (($3 | 0) <= 0) {
           $12 = 3402823466385288598117041.0e14;
           break label$24;
          }
          $3 = $3 - 1 | 0;
          $12 = 3402823466385288598117041.0e14;
          $29 = 24;
          while (1) {
           $5 = HEAP32[$16 + 36 >> 2] + $29 | 0;
           $27 = HEAPF64[$5 + 16 >> 3];
           $39 = HEAPF64[$5 + 8 >> 3];
           $31 = HEAPF64[$5 >> 3];
           HEAP32[$8 + 24 >> 2] = 0;
           HEAP32[$8 + 28 >> 2] = 0;
           $6 = $19 * $27 + ($35 * $31 + $39 * $30);
           HEAPF64[$8 + 16 >> 3] = $6;
           $25 = $36 * $27 + ($43 * $31 + $39 * $41);
           HEAPF64[$8 + 8 >> 3] = $25;
           $27 = $52 * $27 + ($40 * $31 + $39 * $38);
           HEAPF64[$8 >> 3] = $27;
           if ($55 * $6 + ($50 * $27 + $56 * $25) < 0.0) {
            $6 = -$6;
            HEAPF64[$8 + 16 >> 3] = $6;
            $25 = -$25;
            HEAPF64[$8 + 8 >> 3] = $25;
            $27 = -$27;
            HEAPF64[$8 >> 3] = $27;
           }
           HEAP32[8405] = HEAP32[8405] + 1;
           label$66 : {
            label$77 : {
             if (HEAPU8[30784]) {
              $39 = $55 * $6 + ($50 * $27 + $56 * $25);
              $31 = HEAPF64[$16 + 112 >> 3];
              $19 = $19 * $6 + ($52 * $27 + $25 * $36);
              $37 = ($19 < 0.0 ? -$31 : $31) * $19;
              $19 = HEAPF64[$16 + 96 >> 3];
              $36 = -$19;
              $31 = $19;
              $19 = $35 * $6 + ($40 * $27 + $25 * $43);
              $31 = ($19 < 0.0 ? $36 : $31) * $19;
              $19 = $30 * $6 + ($38 * $27 + $25 * $41);
              $35 = HEAPF64[$16 + 104 >> 3];
              $19 = $37 + ($31 + $19 * ($19 < 0.0 ? -$35 : $35));
              $35 = HEAPF64[$16 + 128 >> 3];
              $31 = $19 > $35 ? $19 : $35;
              $19 = HEAPF64[$32 + 112 >> 3];
              $35 = -$19;
              $30 = $19;
              $19 = HEAPF64[$20 + 80 >> 3] * $6 + (HEAPF64[$20 + 16 >> 3] * $27 + $25 * HEAPF64[$20 + 48 >> 3]);
              $35 = ($19 < 0.0 ? $35 : $30) * $19;
              $19 = HEAPF64[$32 + 96 >> 3];
              $37 = -$19;
              $30 = $19;
              $19 = HEAPF64[$20 + 64 >> 3] * $6 + (HEAPF64[$20 >> 3] * $27 + $25 * HEAPF64[$20 + 32 >> 3]);
              $30 = ($19 < 0.0 ? $37 : $30) * $19;
              $6 = HEAPF64[$20 + 72 >> 3] * $6 + (HEAPF64[$20 + 8 >> 3] * $27 + $25 * HEAPF64[$20 + 40 >> 3]);
              $19 = HEAPF64[$32 + 104 >> 3];
              $6 = $35 + ($30 + $6 * ($6 < 0.0 ? -$19 : $19));
              $19 = HEAPF64[$32 + 128 >> 3];
              $6 = $31 + ($6 > $19 ? $6 : $19);
              $19 = $39 + $6;
              $6 = $6 - $39;
              if (($6 > $19 ? $19 : $6) > $12) {
               break label$77
              }
             }
             HEAP32[8406] = HEAP32[8406] + 1;
             btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($16, $10, $8, $8 + 184 | 0, $8 + 176 | 0, $8 + 128 | 0, $8 + 96 | 0);
             btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($32, $20, $8, $8 + 168 | 0, $8 + 160 | 0, $8 - -64 | 0, $8 + 32 | 0);
             $6 = HEAPF64[$8 + 176 >> 3];
             $19 = HEAPF64[$8 + 168 >> 3];
             if ($6 < $19) {
              break label$66
             }
             $35 = HEAPF64[$8 + 160 >> 3];
             $30 = HEAPF64[$8 + 184 >> 3];
             if ($35 < $30) {
              break label$66
             }
             $6 = $6 - $19;
             $19 = $35 - $30;
             $6 = $6 < $19 ? $6 : $19;
             if (!($6 < $12)) {
              break label$77
             }
             $5 = HEAP32[$8 + 4 >> 2];
             HEAP32[$28 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$28 + 4 >> 2] = $5;
             $5 = $8 + 24 | 0;
             $7 = HEAP32[$5 + 4 >> 2];
             $13 = $28 + 24 | 0;
             HEAP32[$13 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$13 + 4 >> 2] = $7;
             $5 = $8 + 16 | 0;
             $7 = HEAP32[$5 + 4 >> 2];
             $13 = $28 + 16 | 0;
             HEAP32[$13 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$13 + 4 >> 2] = $7;
             $5 = $8 + 8 | 0;
             $7 = HEAP32[$5 + 4 >> 2];
             $13 = $28 + 8 | 0;
             HEAP32[$13 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$13 + 4 >> 2] = $7;
             $12 = $6;
            }
            if (!$3) {
             break label$24
            }
            $29 = $29 + 56 | 0;
            $3 = $3 - 1 | 0;
            $19 = HEAPF64[$10 + 80 >> 3];
            $30 = HEAPF64[$10 + 72 >> 3];
            $35 = HEAPF64[$10 + 64 >> 3];
            $36 = HEAPF64[$10 + 48 >> 3];
            $41 = HEAPF64[$10 + 40 >> 3];
            $43 = HEAPF64[$10 + 32 >> 3];
            $52 = HEAPF64[$10 + 16 >> 3];
            $38 = HEAPF64[$10 + 8 >> 3];
            $40 = HEAPF64[$10 >> 3];
            continue;
           }
           break;
          };
          break label$1;
         }
         label$9 : {
          $3 = HEAP32[$32 + 28 >> 2];
          if (($3 | 0) > 0) {
           $29 = 24;
           while (1) {
            $5 = HEAP32[$32 + 36 >> 2] + $29 | 0;
            $19 = HEAPF64[$5 + 16 >> 3];
            $35 = HEAPF64[$5 >> 3];
            $30 = HEAPF64[$5 + 8 >> 3];
            HEAP32[$8 + 24 >> 2] = 0;
            HEAP32[$8 + 28 >> 2] = 0;
            $36 = HEAPF64[$20 + 80 >> 3];
            $43 = HEAPF64[$20 + 64 >> 3];
            $41 = HEAPF64[$20 + 72 >> 3];
            $6 = $19 * $36 + ($35 * $43 + $30 * $41);
            HEAPF64[$8 + 16 >> 3] = $6;
            $52 = HEAPF64[$20 + 48 >> 3];
            $40 = HEAPF64[$20 + 32 >> 3];
            $38 = HEAPF64[$20 + 40 >> 3];
            $25 = $19 * $52 + ($35 * $40 + $30 * $38);
            HEAPF64[$8 + 8 >> 3] = $25;
            $31 = $19;
            $19 = HEAPF64[$20 + 16 >> 3];
            $37 = $35;
            $35 = HEAPF64[$20 >> 3];
            $46 = $30;
            $30 = HEAPF64[$20 + 8 >> 3];
            $27 = $31 * $19 + ($37 * $35 + $46 * $30);
            HEAPF64[$8 >> 3] = $27;
            if ($55 * $6 + ($50 * $27 + $56 * $25) < 0.0) {
             $6 = -$6;
             HEAPF64[$8 + 16 >> 3] = $6;
             $25 = -$25;
             HEAPF64[$8 + 8 >> 3] = $25;
             $27 = -$27;
             HEAPF64[$8 >> 3] = $27;
            }
            HEAP32[8405] = HEAP32[8405] + 1;
            label$13 : {
             if (HEAPU8[30784]) {
              $39 = $55 * $6 + ($50 * $27 + $56 * $25);
              $31 = HEAPF64[$16 + 112 >> 3];
              $46 = -$31;
              $37 = $31;
              $31 = HEAPF64[$10 + 80 >> 3] * $6 + (HEAPF64[$10 + 16 >> 3] * $27 + $25 * HEAPF64[$10 + 48 >> 3]);
              $46 = ($31 < 0.0 ? $46 : $37) * $31;
              $31 = HEAPF64[$16 + 96 >> 3];
              $58 = -$31;
              $37 = $31;
              $31 = HEAPF64[$10 + 64 >> 3] * $6 + (HEAPF64[$10 >> 3] * $27 + $25 * HEAPF64[$10 + 32 >> 3]);
              $37 = ($31 < 0.0 ? $58 : $37) * $31;
              $31 = HEAPF64[$10 + 72 >> 3] * $6 + (HEAPF64[$10 + 8 >> 3] * $27 + $25 * HEAPF64[$10 + 40 >> 3]);
              $53 = HEAPF64[$16 + 104 >> 3];
              $31 = $46 + ($37 + $31 * ($31 < 0.0 ? -$53 : $53));
              $53 = HEAPF64[$16 + 128 >> 3];
              $37 = $31 > $53 ? $31 : $53;
              $31 = HEAPF64[$32 + 112 >> 3];
              $19 = $36 * $6 + ($19 * $27 + $25 * $52);
              $36 = ($19 < 0.0 ? -$31 : $31) * $19;
              $19 = HEAPF64[$32 + 96 >> 3];
              $46 = -$19;
              $31 = $19;
              $19 = $43 * $6 + ($35 * $27 + $25 * $40);
              $31 = ($19 < 0.0 ? $46 : $31) * $19;
              $6 = $41 * $6 + ($30 * $27 + $25 * $38);
              $19 = HEAPF64[$32 + 104 >> 3];
              $6 = $36 + ($31 + $6 * ($6 < 0.0 ? -$19 : $19));
              $19 = HEAPF64[$32 + 128 >> 3];
              $6 = $37 + ($6 > $19 ? $6 : $19);
              $19 = $39 + $6;
              $6 = $6 - $39;
              if (($6 > $19 ? $19 : $6) > $12) {
               break label$13
              }
             }
             HEAP32[8406] = HEAP32[8406] + 1;
             btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($16, $10, $8, $8 + 184 | 0, $8 + 176 | 0, $8 + 128 | 0, $8 + 96 | 0);
             btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($32, $20, $8, $8 + 168 | 0, $8 + 160 | 0, $8 - -64 | 0, $8 + 32 | 0);
             $6 = HEAPF64[$8 + 176 >> 3];
             $19 = HEAPF64[$8 + 168 >> 3];
             if ($6 < $19) {
              break label$9
             }
             $35 = HEAPF64[$8 + 160 >> 3];
             $30 = HEAPF64[$8 + 184 >> 3];
             if ($35 < $30) {
              break label$9
             }
             $6 = $6 - $19;
             $19 = $35 - $30;
             $6 = $6 < $19 ? $6 : $19;
             if (!($6 < $12)) {
              break label$13
             }
             $5 = HEAP32[$8 + 4 >> 2];
             HEAP32[$28 >> 2] = HEAP32[$8 >> 2];
             HEAP32[$28 + 4 >> 2] = $5;
             $5 = $8 + 24 | 0;
             $7 = HEAP32[$5 + 4 >> 2];
             $13 = $28 + 24 | 0;
             HEAP32[$13 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$13 + 4 >> 2] = $7;
             $5 = $8 + 16 | 0;
             $7 = HEAP32[$5 + 4 >> 2];
             $13 = $28 + 16 | 0;
             HEAP32[$13 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$13 + 4 >> 2] = $7;
             $5 = $8 + 8 | 0;
             $7 = HEAP32[$5 + 4 >> 2];
             $13 = $28 + 8 | 0;
             HEAP32[$13 >> 2] = HEAP32[$5 >> 2];
             HEAP32[$13 + 4 >> 2] = $7;
             $12 = $6;
            }
            $29 = $29 + 56 | 0;
            $3 = $3 - 1 | 0;
            if ($3) {
             continue
            }
            break;
           };
          }
          $21 = 1;
          $23 = HEAP32[$16 + 48 >> 2];
          label$159 : {
           if (($23 | 0) <= 0) {
            break label$159
           }
           $29 = HEAP32[$32 + 48 >> 2];
           if (($29 | 0) <= 0) {
            break label$159
           }
           $7 = -1;
           $5 = 0;
           $13 = -1;
           $39 = 0.0;
           $31 = 0.0;
           $53 = 0.0;
           $52 = 0.0;
           $40 = 0.0;
           $38 = 0.0;
           while (1) {
            if (($29 | 0) > 0) {
             $3 = HEAP32[$16 + 56 >> 2] + ($5 << 5) | 0;
             $6 = HEAPF64[$3 + 16 >> 3];
             $30 = HEAPF64[$3 >> 3];
             $36 = HEAPF64[$3 + 8 >> 3];
             $19 = HEAPF64[$10 + 48 >> 3] * $6 + (HEAPF64[$10 + 32 >> 3] * $30 + $36 * HEAPF64[$10 + 40 >> 3]);
             $81 = -$19;
             $35 = HEAPF64[$10 + 16 >> 3] * $6 + (HEAPF64[$10 >> 3] * $30 + $36 * HEAPF64[$10 + 8 >> 3]);
             $82 = -$35;
             $30 = HEAPF64[$10 + 80 >> 3] * $6 + (HEAPF64[$10 + 64 >> 3] * $30 + $36 * HEAPF64[$10 + 72 >> 3]);
             $83 = -$30;
             $3 = 0;
             $23 = 8;
             while (1) {
              $29 = HEAP32[$32 + 56 >> 2] + $23 | 0;
              $41 = HEAPF64[$29 + 8 >> 3];
              $25 = HEAPF64[$29 - 8 >> 3];
              $27 = HEAPF64[$29 >> 3];
              $46 = HEAPF64[$20 + 16 >> 3];
              $61 = HEAPF64[$20 >> 3];
              $62 = HEAPF64[$20 + 8 >> 3];
              $59 = HEAPF64[$20 + 80 >> 3];
              $77 = HEAPF64[$20 + 64 >> 3];
              $78 = HEAPF64[$20 + 72 >> 3];
              $71 = HEAPF64[$20 + 48 >> 3];
              $79 = HEAPF64[$20 + 32 >> 3];
              $80 = HEAPF64[$20 + 40 >> 3];
              HEAP32[$8 + 24 >> 2] = 0;
              HEAP32[$8 + 28 >> 2] = 0;
              $36 = $71 * $41 + ($79 * $25 + $27 * $80);
              $43 = $46 * $41 + ($61 * $25 + $27 * $62);
              $6 = $35 * $36 + $43 * $81;
              $41 = $59 * $41 + ($77 * $25 + $27 * $78);
              $25 = $30 * $43 + $41 * $82;
              $27 = $19 * $41 + $36 * $83;
              label$19 : {
               if (!(Math_abs($27) > 1.0e-06 | Math_abs($25) > 1.0e-06 | Math_abs($6) > 1.0e-06)) {
                break label$19
               }
               $66 = 1.0 / Math_sqrt($6 * $6 + ($27 * $27 + $25 * $25));
               $6 = $6 * $66;
               HEAPF64[$8 + 16 >> 3] = $6;
               $25 = $25 * $66;
               HEAPF64[$8 + 8 >> 3] = $25;
               $27 = $27 * $66;
               HEAPF64[$8 >> 3] = $27;
               if ($55 * $6 + ($50 * $27 + $56 * $25) < 0.0) {
                $6 = -$6;
                HEAPF64[$8 + 16 >> 3] = $6;
                $25 = -$25;
                HEAPF64[$8 + 8 >> 3] = $25;
                $27 = -$27;
                HEAPF64[$8 >> 3] = $27;
               }
               HEAP32[8405] = HEAP32[8405] + 1;
               if (HEAPU8[30784]) {
                $66 = $55 * $6 + ($50 * $27 + $56 * $25);
                $37 = HEAPF64[$16 + 112 >> 3];
                $73 = -$37;
                $58 = $37;
                $37 = HEAPF64[$10 + 80 >> 3] * $6 + (HEAPF64[$10 + 16 >> 3] * $27 + $25 * HEAPF64[$10 + 48 >> 3]);
                $73 = ($37 < 0.0 ? $73 : $58) * $37;
                $37 = HEAPF64[$16 + 96 >> 3];
                $74 = -$37;
                $58 = $37;
                $37 = HEAPF64[$10 + 64 >> 3] * $6 + (HEAPF64[$10 >> 3] * $27 + $25 * HEAPF64[$10 + 32 >> 3]);
                $74 = ($37 < 0.0 ? $74 : $58) * $37;
                $37 = HEAPF64[$10 + 72 >> 3] * $6 + (HEAPF64[$10 + 8 >> 3] * $27 + $25 * HEAPF64[$10 + 40 >> 3]);
                $58 = HEAPF64[$16 + 104 >> 3];
                $37 = $73 + ($74 + $37 * ($37 < 0.0 ? -$58 : $58));
                $58 = HEAPF64[$16 + 128 >> 3];
                $58 = $37 > $58 ? $37 : $58;
                $37 = HEAPF64[$32 + 112 >> 3];
                $46 = $59 * $6 + ($46 * $27 + $25 * $71);
                $59 = ($46 < 0.0 ? -$37 : $37) * $46;
                $46 = HEAPF64[$32 + 96 >> 3];
                $71 = -$46;
                $37 = $46;
                $46 = $77 * $6 + ($61 * $27 + $25 * $79);
                $6 = $78 * $6 + ($62 * $27 + $25 * $80);
                $25 = HEAPF64[$32 + 104 >> 3];
                $6 = $59 + (($46 < 0.0 ? $71 : $37) * $46 + $6 * ($6 < 0.0 ? -$25 : $25));
                $25 = HEAPF64[$32 + 128 >> 3];
                $6 = $58 + ($6 > $25 ? $6 : $25);
                $25 = $66 + $6;
                $6 = $6 - $66;
                if (($6 > $25 ? $25 : $6) > $12) {
                 break label$19
                }
               }
               HEAP32[8406] = HEAP32[8406] + 1;
               btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($16, $10, $8, $8 + 184 | 0, $8 + 176 | 0, $8 + 128 | 0, $8 + 96 | 0);
               btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const($32, $20, $8, $8 + 168 | 0, $8 + 160 | 0, $8 - -64 | 0, $8 + 32 | 0);
               $6 = HEAPF64[$8 + 176 >> 3];
               $25 = HEAPF64[$8 + 168 >> 3];
               if ($6 < $25) {
                break label$9
               }
               $27 = HEAPF64[$8 + 160 >> 3];
               $46 = HEAPF64[$8 + 184 >> 3];
               if ($27 < $46) {
                break label$9
               }
               $6 = $6 - $25;
               $25 = $27 - $46;
               $29 = $6 < $25;
               $6 = $29 ? $6 : $25;
               if (!($6 < $12)) {
                break label$19
               }
               $38 = HEAPF64[($29 ? $8 - -64 | 0 : $8 + 32 | 0) >> 3];
               $53 = HEAPF64[($29 ? $8 + 96 | 0 : $8 + 128 | 0) >> 3];
               $12 = HEAPF64[$8 + 48 >> 3];
               $18 = HEAPF64[$8 + 80 >> 3];
               $26 = HEAPF64[$8 + 40 >> 3];
               $42 = HEAPF64[$8 + 72 >> 3];
               $44 = HEAPF64[$8 + 144 >> 3];
               $47 = HEAPF64[$8 + 112 >> 3];
               $48 = HEAPF64[$8 + 136 >> 3];
               $25 = HEAPF64[$8 + 104 >> 3];
               $7 = HEAP32[$8 + 4 >> 2];
               HEAP32[$28 >> 2] = HEAP32[$8 >> 2];
               HEAP32[$28 + 4 >> 2] = $7;
               $7 = $8 + 24 | 0;
               $13 = HEAP32[$7 + 4 >> 2];
               $22 = $28 + 24 | 0;
               HEAP32[$22 >> 2] = HEAP32[$7 >> 2];
               HEAP32[$22 + 4 >> 2] = $13;
               $7 = $8 + 16 | 0;
               $13 = HEAP32[$7 + 4 >> 2];
               $22 = $28 + 16 | 0;
               HEAP32[$22 >> 2] = HEAP32[$7 >> 2];
               HEAP32[$22 + 4 >> 2] = $13;
               $7 = $8 + 8 | 0;
               $13 = HEAP32[$7 + 4 >> 2];
               $22 = $28 + 8 | 0;
               HEAP32[$22 >> 2] = HEAP32[$7 >> 2];
               HEAP32[$22 + 4 >> 2] = $13;
               $31 = $29 ? $25 : $48;
               $39 = $29 ? $47 : $44;
               $40 = $29 ? $42 : $26;
               $52 = $29 ? $18 : $12;
               $18 = $43;
               $26 = $36;
               $42 = $41;
               $44 = $35;
               $47 = $19;
               $48 = $30;
               $13 = $5;
               $7 = $3;
               $12 = $6;
              }
              $23 = $23 + 32 | 0;
              $3 = $3 + 1 | 0;
              $29 = HEAP32[$32 + 48 >> 2];
              if (($3 | 0) < ($29 | 0)) {
               continue
              }
              break;
             };
             $23 = HEAP32[$16 + 48 >> 2];
            }
            $5 = $5 + 1 | 0;
            if (($5 | 0) < ($23 | 0)) {
             continue
            }
            break;
           };
           if (($7 | $13) < 0) {
            break label$159
           }
           $30 = $52 - $39;
           $36 = $38 - $53;
           $43 = $40 - $31;
           $35 = $48 * $30 + ($44 * $36 + $43 * $47);
           $6 = 0.0;
           $41 = -($42 * $30 + ($18 * $36 + $43 * $26));
           $19 = $48 * $42 + ($44 * $18 + $26 * $47);
           $12 = 1.0 - $19 * $19;
           label$23 : {
            if ($12 == 0.0) {
             break label$23
            }
            $6 = -1000000015047466219876688.0e6;
            $12 = ($41 * $19 + $35) / $12;
            if ($12 < -1000000015047466219876688.0e6) {
             break label$23
            }
            $6 = $12;
            if (!($6 > 1000000015047466219876688.0e6)) {
             break label$23
            }
            $6 = 1000000015047466219876688.0e6;
           }
           $25 = $6 * $19 + $41;
           label$2411 : {
            if ($25 < -1000000015047466219876688.0e6) {
             $12 = $19 * -1000000015047466219876688.0e6 + $35;
             if ($12 < -1000000015047466219876688.0e6) {
              $25 = -1000000015047466219876688.0e6;
              $6 = -1000000015047466219876688.0e6;
              break label$2411;
             }
             $6 = 1000000015047466219876688.0e6;
             if (!($12 > 1000000015047466219876688.0e6)) {
              $25 = -1000000015047466219876688.0e6;
              $6 = $12;
              break label$2411;
             }
             $25 = -1000000015047466219876688.0e6;
             break label$2411;
            }
            if (!($25 > 1000000015047466219876688.0e6)) {
             break label$2411
            }
            $6 = -1000000015047466219876688.0e6;
            $25 = 1000000015047466219876688.0e6;
            $12 = $19 * 1000000015047466219876688.0e6 + $35;
            if ($12 < -1000000015047466219876688.0e6) {
             break label$2411
            }
            $6 = $12;
            if (!($6 > 1000000015047466219876688.0e6)) {
             break label$2411
            }
            $6 = 1000000015047466219876688.0e6;
           }
           HEAP32[$8 + 152 >> 2] = 0;
           HEAP32[$8 + 156 >> 2] = 0;
           $42 = $42 * $25;
           $12 = $42 + ($30 - $48 * $6);
           $48 = $18 * $25;
           $18 = $48 + ($36 - $44 * $6);
           $44 = $26 * $25;
           $6 = $44 + ($43 - $47 * $6);
           $26 = $12 * $12 + ($18 * $18 + $6 * $6);
           if (!($26 > 2.220446049250313e-16)) {
            break label$159
           }
           $19 = $12;
           $47 = Math_sqrt($26);
           $12 = 1.0 / $47;
           $26 = $19 * $12;
           HEAPF64[$8 + 144 >> 3] = $26;
           $6 = $6 * $12;
           HEAPF64[$8 + 136 >> 3] = $6;
           $12 = $18 * $12;
           HEAPF64[$8 + 128 >> 3] = $12;
           if ($26 * $55 + ($12 * $50 + $56 * $6) < 0.0) {
            HEAPF64[$8 + 144 >> 3] = -$26;
            HEAPF64[$8 + 136 >> 3] = -$6;
            HEAPF64[$8 + 128 >> 3] = -$12;
           }
           HEAP32[$8 + 120 >> 2] = 0;
           HEAP32[$8 + 124 >> 2] = 0;
           HEAPF64[$8 + 112 >> 3] = $52 + $42;
           HEAPF64[$8 + 104 >> 3] = $40 + $44;
           HEAPF64[$8 + 96 >> 3] = $38 + $48;
           FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $8 + 128 | 0, $8 + 96 | 0, -$47);
          }
          $6 = HEAPF64[$28 + 16 >> 3];
          $12 = HEAPF64[$28 >> 3];
          $18 = HEAPF64[$28 + 8 >> 3];
          if (!($55 * $6 + ($50 * $12 + $56 * $18) < 0.0)) {
           break label$1
          }
          HEAP32[$28 + 24 >> 2] = 0;
          HEAP32[$28 + 28 >> 2] = 0;
          HEAPF64[$28 + 16 >> 3] = -$6;
          HEAPF64[$28 + 8 >> 3] = -$18;
          HEAPF64[$28 >> 3] = -$12;
          break label$1;
         }
         $21 = 0;
        }
        __stack_pointer = $8 + 192 | 0;
        if ($21) {
         break label$16
        }
        break label$15;
       }
       $5 = $9 + 8 | 0;
       btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($32, $9 + 1480 | 0, $5, HEAP32[$3 + 28 >> 2], 0);
       $3 = $9 + 40 | 0;
       $7 = HEAP32[$3 + 4 >> 2];
       $13 = $9 + 448 | 0;
       $8 = $13 + 24 | 0;
       HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$8 + 4 >> 2] = $7;
       $3 = $5 + 24 | 0;
       $7 = HEAP32[$3 + 4 >> 2];
       $13 = $13 + 16 | 0;
       HEAP32[$13 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$13 + 4 >> 2] = $7;
       $3 = $5 + 16 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       $7 = $9 + 456 | 0;
       HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$7 + 4 >> 2] = $5;
       $3 = HEAP32[$9 + 20 >> 2];
       HEAP32[$9 + 448 >> 2] = HEAP32[$9 + 16 >> 2];
       HEAP32[$9 + 452 >> 2] = $3;
       if (!HEAPU8[$9 + 72 | 0]) {
        break label$15
       }
       $49 = HEAPF64[$9 + 64 >> 3];
       if (!($49 < 0.0)) {
        break label$15
       }
      }
      if ((HEAP32[$0 + 16 >> 2] & HEAP32[$0 + 20 >> 2]) < 0) {
       $3 = HEAP32[$0 + 24 >> 2];
       if (!(!$3 | !HEAPU8[$0 + 28 | 0])) {
        btAlignedFreeInternal_28void__29($3)
       }
       HEAP8[$0 + 28 | 0] = 1;
       HEAP32[$0 + 20 >> 2] = 0;
       HEAP32[$0 + 24 >> 2] = 0;
      }
      HEAP32[$0 + 16 >> 2] = 0;
      $33 = HEAP32[$33 + 96 >> 2];
      $8 = HEAP32[$14 + 96 >> 2];
      $29 = HEAP32[$1 + 12 >> 2];
      $2 = HEAP32[$2 + 12 >> 2];
      $42 = $49 - $57;
      $1 = $0 + 12 | 0;
      $23 = $0 + 32 | 0;
      $5 = 0;
      $16 = 0;
      $13 = __stack_pointer - 32 | 0;
      __stack_pointer = $13;
      $3 = $9 + 448 | 0;
      HEAPF64[$13 + 24 >> 3] = HEAPF64[$3 + 24 >> 3];
      $12 = HEAPF64[$3 + 16 >> 3];
      $18 = HEAPF64[$3 >> 3];
      $26 = HEAPF64[$3 + 8 >> 3];
      $6 = 1.0 / Math_sqrt($12 * $12 + ($18 * $18 + $26 * $26));
      $44 = $12 * $6;
      HEAPF64[$13 + 16 >> 3] = $44;
      $47 = $26 * $6;
      HEAPF64[$13 + 8 >> 3] = $47;
      $48 = $18 * $6;
      HEAPF64[$13 >> 3] = $48;
      $10 = -1;
      $20 = HEAP32[$8 + 28 >> 2];
      if (($20 | 0) > 0) {
       $3 = HEAP32[$8 + 36 >> 2] + 24 | 0;
       $19 = HEAPF64[$2 + 80 >> 3];
       $35 = HEAPF64[$2 + 72 >> 3];
       $30 = HEAPF64[$2 + 48 >> 3];
       $36 = HEAPF64[$2 + 40 >> 3];
       $43 = HEAPF64[$2 + 64 >> 3];
       $41 = HEAPF64[$2 + 32 >> 3];
       $25 = HEAPF64[$2 + 16 >> 3];
       $27 = HEAPF64[$2 + 8 >> 3];
       $49 = HEAPF64[$2 >> 3];
       $6 = -3402823466385288598117041.0e14;
       while (1) {
        $12 = HEAPF64[$3 + 16 >> 3];
        $18 = HEAPF64[$3 >> 3];
        $26 = HEAPF64[$3 + 8 >> 3];
        $12 = ($19 * $12 + ($43 * $18 + $26 * $35)) * $44 + (($25 * $12 + ($49 * $18 + $26 * $27)) * $48 + $47 * ($30 * $12 + ($41 * $18 + $26 * $36)));
        $7 = $12 > $6;
        $6 = $7 ? $12 : $6;
        $10 = $7 ? $5 : $10;
        $3 = $3 + 56 | 0;
        $5 = $5 + 1 | 0;
        if (($20 | 0) != ($5 | 0)) {
         continue
        }
        break;
       };
      }
      if ((HEAP32[$1 + 4 >> 2] & HEAP32[$1 + 8 >> 2]) < 0) {
       $3 = HEAP32[$1 + 12 >> 2];
       if (!(!$3 | !HEAPU8[$1 + 16 | 0])) {
        btAlignedFreeInternal_28void__29($3)
       }
       HEAP8[$1 + 16 | 0] = 1;
       HEAP32[$1 + 8 >> 2] = 0;
       HEAP32[$1 + 12 >> 2] = 0;
      }
      $3 = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $5 = HEAP32[$8 + 36 >> 2] + Math_imul($10, 56) | 0;
      $21 = HEAP32[$5 + 4 >> 2];
      if (($21 | 0) > 0) {
       $22 = $5 + 12 | 0;
       while (1) {
        $5 = HEAP32[$8 + 16 >> 2] + (HEAP32[HEAP32[$22 >> 2] + ($16 << 2) >> 2] << 5) | 0;
        $6 = HEAPF64[$5 + 16 >> 3];
        $12 = HEAPF64[$5 >> 3];
        $18 = HEAPF64[$5 + 8 >> 3];
        $26 = $6 * HEAPF64[$2 + 80 >> 3] + ($12 * HEAPF64[$2 + 64 >> 3] + $18 * HEAPF64[$2 + 72 >> 3]) + HEAPF64[$2 + 112 >> 3];
        $44 = $6 * HEAPF64[$2 + 48 >> 3] + ($12 * HEAPF64[$2 + 32 >> 3] + $18 * HEAPF64[$2 + 40 >> 3]) + HEAPF64[$2 + 104 >> 3];
        $6 = $6 * HEAPF64[$2 + 16 >> 3] + ($12 * HEAPF64[$2 >> 3] + $18 * HEAPF64[$2 + 8 >> 3]) + HEAPF64[$2 + 96 >> 3];
        label$714 : {
         if (HEAP32[$1 + 8 >> 2] != ($3 | 0)) {
          break label$714
         }
         $32 = $3 ? $3 << 1 : 1;
         if (($32 | 0) <= ($3 | 0)) {
          break label$714
         }
         label$8 : {
          if (!$32) {
           $20 = 0;
           break label$8;
          }
          $20 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($32 << 5);
          $3 = HEAP32[$1 + 4 >> 2];
         }
         label$10 : {
          if (($3 | 0) <= 0) {
           break label$10
          }
          $28 = 0;
          if (($3 | 0) != 1) {
           $34 = $3 & -2;
           $5 = 0;
           while (1) {
            $14 = HEAP32[$1 + 12 >> 2] + $5 | 0;
            $45 = HEAP32[$14 + 4 >> 2];
            $7 = $5 + $20 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $45;
            $45 = $14 + 24 | 0;
            $54 = HEAP32[$45 + 4 >> 2];
            $51 = $7 + 24 | 0;
            HEAP32[$51 >> 2] = HEAP32[$45 >> 2];
            HEAP32[$51 + 4 >> 2] = $54;
            $45 = $14 + 16 | 0;
            $54 = HEAP32[$45 + 4 >> 2];
            $51 = $7 + 16 | 0;
            HEAP32[$51 >> 2] = HEAP32[$45 >> 2];
            HEAP32[$51 + 4 >> 2] = $54;
            $14 = $14 + 8 | 0;
            $45 = HEAP32[$14 + 4 >> 2];
            $54 = $7 + 8 | 0;
            HEAP32[$54 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$54 + 4 >> 2] = $45;
            $14 = HEAP32[$1 + 12 >> 2] + $5 | 0;
            $45 = $14 + 40 | 0;
            $54 = HEAP32[$45 + 4 >> 2];
            $51 = $7 + 40 | 0;
            HEAP32[$51 >> 2] = HEAP32[$45 >> 2];
            HEAP32[$51 + 4 >> 2] = $54;
            $45 = $14 + 48 | 0;
            $54 = HEAP32[$45 + 4 >> 2];
            $51 = $7 + 48 | 0;
            HEAP32[$51 >> 2] = HEAP32[$45 >> 2];
            HEAP32[$51 + 4 >> 2] = $54;
            $45 = $14 + 56 | 0;
            $54 = HEAP32[$45 + 4 >> 2];
            $51 = $7 + 56 | 0;
            HEAP32[$51 >> 2] = HEAP32[$45 >> 2];
            HEAP32[$51 + 4 >> 2] = $54;
            $14 = $14 + 32 | 0;
            $45 = HEAP32[$14 + 4 >> 2];
            $7 = $7 + 32 | 0;
            HEAP32[$7 >> 2] = HEAP32[$14 >> 2];
            HEAP32[$7 + 4 >> 2] = $45;
            $5 = $5 - -64 | 0;
            $28 = $28 + 2 | 0;
            if (($34 | 0) != ($28 | 0)) {
             continue
            }
            break;
           };
          }
          if (!($3 & 1)) {
           break label$10
          }
          $5 = $28 << 5;
          $3 = $5 + $20 | 0;
          $5 = $5 + HEAP32[$1 + 12 >> 2] | 0;
          $7 = HEAP32[$5 + 4 >> 2];
          HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
          HEAP32[$3 + 4 >> 2] = $7;
          $7 = $5 + 24 | 0;
          $14 = HEAP32[$7 + 4 >> 2];
          $28 = $3 + 24 | 0;
          HEAP32[$28 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$28 + 4 >> 2] = $14;
          $7 = $5 + 16 | 0;
          $14 = HEAP32[$7 + 4 >> 2];
          $28 = $3 + 16 | 0;
          HEAP32[$28 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$28 + 4 >> 2] = $14;
          $5 = $5 + 8 | 0;
          $7 = HEAP32[$5 + 4 >> 2];
          $3 = $3 + 8 | 0;
          HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
          HEAP32[$3 + 4 >> 2] = $7;
         }
         $3 = HEAP32[$1 + 12 >> 2];
         if (!(!$3 | !HEAPU8[$1 + 16 | 0])) {
          btAlignedFreeInternal_28void__29($3)
         }
         HEAP32[$1 + 12 >> 2] = $20;
         HEAP8[$1 + 16 | 0] = 1;
         HEAP32[$1 + 8 >> 2] = $32;
         $3 = HEAP32[$1 + 4 >> 2];
        }
        $3 = HEAP32[$1 + 12 >> 2] + ($3 << 5) | 0;
        HEAP32[$3 + 24 >> 2] = 0;
        HEAP32[$3 + 28 >> 2] = 0;
        HEAPF64[$3 + 16 >> 3] = $26;
        HEAPF64[$3 + 8 >> 3] = $44;
        HEAPF64[$3 >> 3] = $6;
        $3 = HEAP32[$1 + 4 >> 2] + 1 | 0;
        HEAP32[$1 + 4 >> 2] = $3;
        $16 = $16 + 1 | 0;
        if (($16 | 0) != ($21 | 0)) {
         continue
        }
        break;
       };
      }
      if (($10 | 0) >= 0) {
       btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20double_2c_20double_2c_20btDiscreteCollisionDetectorInterface__Result__29($13, $33, $29, $1, $23, $42, $57, $4)
      }
      __stack_pointer = $13 + 32 | 0;
     }
     if (!HEAPU8[$0 + 52 | 0]) {
      break label$2
     }
     $0 = HEAP32[$4 + 4 >> 2];
     if (!HEAP32[$0 + 1456 >> 2]) {
      break label$2
     }
     $2 = HEAP32[$0 + 1448 >> 2];
     $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
     $1 = ($2 | 0) == ($3 | 0);
     $7 = $0;
     $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($7, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
     break label$2;
    }
    if (HEAP32[$14 + 4 >> 2] != 1) {
     break label$11
    }
    HEAP32[$9 + 612 >> 2] = 0;
    $5 = HEAP32[$2 + 12 >> 2];
    $26 = HEAPF64[$5 + 104 >> 3];
    $42 = HEAPF64[$5 + 40 >> 3];
    $44 = HEAPF64[$5 + 48 >> 3];
    $47 = HEAPF64[$5 + 112 >> 3];
    $48 = HEAPF64[$5 + 72 >> 3];
    $57 = HEAPF64[$5 + 80 >> 3];
    $6 = HEAPF64[$14 + 120 >> 3];
    $12 = HEAPF64[$14 + 104 >> 3];
    $18 = HEAPF64[$14 + 112 >> 3];
    $19 = HEAPF64[$5 + 32 >> 3];
    $35 = HEAPF64[$5 + 64 >> 3];
    $30 = HEAPF64[$5 + 96 >> 3];
    $36 = HEAPF64[$5 + 16 >> 3];
    $43 = HEAPF64[$5 >> 3];
    $41 = HEAPF64[$5 + 8 >> 3];
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32);
    HEAP32[$9 + 620 >> 2] = $5;
    HEAP8[$9 + 624 | 0] = 1;
    HEAP32[$9 + 616 >> 2] = 1;
    HEAPF64[$5 >> 3] = $30 + ($6 * $36 + ($12 * $43 + $18 * $41));
    HEAP32[$5 + 24 >> 2] = 0;
    HEAP32[$5 + 28 >> 2] = 0;
    HEAPF64[$5 + 16 >> 3] = $47 + ($6 * $57 + ($12 * $35 + $18 * $48));
    HEAPF64[$5 + 8 >> 3] = $26 + ($6 * $44 + ($12 * $19 + $18 * $42));
    $7 = HEAP32[$9 + 612 >> 2];
    $10 = $7 + 1 | 0;
    HEAP32[$9 + 612 >> 2] = $10;
    $6 = HEAPF64[$14 + 152 >> 3];
    $5 = HEAP32[$2 + 12 >> 2];
    $12 = HEAPF64[$14 + 136 >> 3];
    $18 = HEAPF64[$14 + 144 >> 3];
    $26 = $6 * HEAPF64[$5 + 80 >> 3] + ($12 * HEAPF64[$5 + 64 >> 3] + $18 * HEAPF64[$5 + 72 >> 3]) + HEAPF64[$5 + 112 >> 3];
    $42 = $6 * HEAPF64[$5 + 48 >> 3] + ($12 * HEAPF64[$5 + 32 >> 3] + $18 * HEAPF64[$5 + 40 >> 3]) + HEAPF64[$5 + 104 >> 3];
    $6 = $6 * HEAPF64[$5 + 16 >> 3] + ($12 * HEAPF64[$5 >> 3] + $18 * HEAPF64[$5 + 8 >> 3]) + HEAPF64[$5 + 96 >> 3];
    label$20 : {
     if (($10 | 0) != HEAP32[$9 + 616 >> 2]) {
      break label$20
     }
     $29 = $10 ? $10 << 1 : 1;
     if (($29 | 0) <= ($10 | 0)) {
      break label$20
     }
     $16 = 0;
     if ($29) {
      $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($29 << 5)
     }
     $28 = HEAP32[$9 + 620 >> 2];
     label$22 : {
      if (($7 | 0) < 0) {
       break label$22
      }
      $20 = $10 & 3;
      $8 = 0;
      if ($7 >>> 0 >= 3) {
       $23 = $10 & -4;
       $13 = 0;
       while (1) {
        $5 = $13 + $28 | 0;
        $21 = HEAP32[$5 + 4 >> 2];
        $7 = $13 + $16 | 0;
        HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$7 + 4 >> 2] = $21;
        $21 = $5 + 24 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 24 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 16 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 16 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 8 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 8 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 56 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 56 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 48 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 48 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 40 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 40 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 32 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 32 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 88 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 88 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 80 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 80 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 72 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 72 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 - -64 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 - -64 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 96 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 96 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 104 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 104 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $21 = $5 + 112 | 0;
        $22 = HEAP32[$21 + 4 >> 2];
        $34 = $7 + 112 | 0;
        HEAP32[$34 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$34 + 4 >> 2] = $22;
        $5 = $5 + 120 | 0;
        $21 = HEAP32[$5 + 4 >> 2];
        $7 = $7 + 120 | 0;
        HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$7 + 4 >> 2] = $21;
        $13 = $13 + 128 | 0;
        $8 = $8 + 4 | 0;
        if (($23 | 0) != ($8 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$20) {
       break label$22
      }
      $7 = $8 << 5;
      $5 = $7 + $16 | 0;
      $7 = $7 + $28 | 0;
      while (1) {
       $13 = HEAP32[$7 + 4 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$5 + 4 >> 2] = $13;
       $13 = $7 + 24 | 0;
       $8 = HEAP32[$13 + 4 >> 2];
       $23 = $5 + 24 | 0;
       HEAP32[$23 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$23 + 4 >> 2] = $8;
       $13 = $7 + 16 | 0;
       $8 = HEAP32[$13 + 4 >> 2];
       $23 = $5 + 16 | 0;
       HEAP32[$23 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$23 + 4 >> 2] = $8;
       $13 = $7 + 8 | 0;
       $8 = HEAP32[$13 + 4 >> 2];
       $23 = $5 + 8 | 0;
       HEAP32[$23 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$23 + 4 >> 2] = $8;
       $5 = $5 + 32 | 0;
       $7 = $7 + 32 | 0;
       $20 = $20 - 1 | 0;
       if ($20) {
        continue
       }
       break;
      };
     }
     if (!(!$28 | !HEAPU8[$9 + 624 | 0])) {
      btAlignedFreeInternal_28void__29($28)
     }
     HEAP32[$9 + 620 >> 2] = $16;
     HEAP8[$9 + 624 | 0] = 1;
     HEAP32[$9 + 616 >> 2] = $29;
    }
    $5 = HEAP32[$9 + 620 >> 2] + ($10 << 5) | 0;
    HEAP32[$5 + 24 >> 2] = 0;
    HEAP32[$5 + 28 >> 2] = 0;
    HEAPF64[$5 + 16 >> 3] = $26;
    HEAPF64[$5 + 8 >> 3] = $42;
    HEAPF64[$5 >> 3] = $6;
    $5 = HEAP32[$9 + 612 >> 2];
    $10 = $5 + 1 | 0;
    HEAP32[$9 + 612 >> 2] = $10;
    $6 = HEAPF64[$14 + 184 >> 3];
    $2 = HEAP32[$2 + 12 >> 2];
    $12 = HEAPF64[$14 + 168 >> 3];
    $18 = HEAPF64[$14 + 176 >> 3];
    $26 = $6 * HEAPF64[$2 + 16 >> 3] + ($12 * HEAPF64[$2 >> 3] + $18 * HEAPF64[$2 + 8 >> 3]) + HEAPF64[$2 + 96 >> 3];
    $42 = $6 * HEAPF64[$2 + 80 >> 3] + ($12 * HEAPF64[$2 + 64 >> 3] + $18 * HEAPF64[$2 + 72 >> 3]) + HEAPF64[$2 + 112 >> 3];
    $6 = $6 * HEAPF64[$2 + 48 >> 3] + ($12 * HEAPF64[$2 + 32 >> 3] + $18 * HEAPF64[$2 + 40 >> 3]) + HEAPF64[$2 + 104 >> 3];
    label$27 : {
     if (($10 | 0) != HEAP32[$9 + 616 >> 2]) {
      break label$27
     }
     $28 = $10 ? $10 << 1 : 1;
     if (($28 | 0) <= ($10 | 0)) {
      break label$27
     }
     $8 = 0;
     if ($28) {
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($28 << 5)
     }
     $16 = HEAP32[$9 + 620 >> 2];
     label$29 : {
      if (($5 | 0) < 0) {
       break label$29
      }
      $20 = $10 & 3;
      $2 = 0;
      if ($5 >>> 0 >= 3) {
       $29 = $10 & -4;
       $13 = 0;
       while (1) {
        $5 = $13 + $16 | 0;
        $23 = HEAP32[$5 + 4 >> 2];
        $7 = $8 + $13 | 0;
        HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$7 + 4 >> 2] = $23;
        $23 = $5 + 24 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 24 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 16 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 16 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 8 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 8 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 56 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 56 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 48 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 48 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 40 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 40 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 32 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 32 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 88 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 88 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 80 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 80 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 72 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 72 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 - -64 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 - -64 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 96 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 96 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 104 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 104 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $23 = $5 + 112 | 0;
        $21 = HEAP32[$23 + 4 >> 2];
        $22 = $7 + 112 | 0;
        HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
        HEAP32[$22 + 4 >> 2] = $21;
        $5 = $5 + 120 | 0;
        $23 = HEAP32[$5 + 4 >> 2];
        $7 = $7 + 120 | 0;
        HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$7 + 4 >> 2] = $23;
        $13 = $13 + 128 | 0;
        $2 = $2 + 4 | 0;
        if (($29 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$20) {
       break label$29
      }
      $2 = $2 << 5;
      $5 = $2 + $8 | 0;
      $7 = $2 + $16 | 0;
      while (1) {
       $2 = HEAP32[$7 + 4 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$5 + 4 >> 2] = $2;
       $2 = $7 + 24 | 0;
       $13 = HEAP32[$2 + 4 >> 2];
       $29 = $5 + 24 | 0;
       HEAP32[$29 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$29 + 4 >> 2] = $13;
       $2 = $7 + 16 | 0;
       $13 = HEAP32[$2 + 4 >> 2];
       $29 = $5 + 16 | 0;
       HEAP32[$29 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$29 + 4 >> 2] = $13;
       $2 = $7 + 8 | 0;
       $13 = HEAP32[$2 + 4 >> 2];
       $29 = $5 + 8 | 0;
       HEAP32[$29 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$29 + 4 >> 2] = $13;
       $5 = $5 + 32 | 0;
       $7 = $7 + 32 | 0;
       $20 = $20 - 1 | 0;
       if ($20) {
        continue
       }
       break;
      };
     }
     if (!(!$16 | !HEAPU8[$9 + 624 | 0])) {
      btAlignedFreeInternal_28void__29($16)
     }
     HEAP32[$9 + 620 >> 2] = $8;
     HEAP8[$9 + 624 | 0] = 1;
     HEAP32[$9 + 616 >> 2] = $28;
    }
    $2 = HEAP32[$9 + 620 >> 2] + ($10 << 5) | 0;
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 28 >> 2] = 0;
    HEAPF64[$2 + 16 >> 3] = $42;
    HEAPF64[$2 + 8 >> 3] = $6;
    HEAPF64[$2 >> 3] = $26;
    HEAP32[$9 + 612 >> 2] = HEAP32[$9 + 612 >> 2] + 1;
    $6 = HEAPF64[HEAP32[$0 + 56 >> 2] + 1464 >> 3];
    btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($32, $9 + 1480 | 0, $9 + 632 | 0, HEAP32[$3 + 28 >> 2], 0);
    $12 = HEAPF64[$32 + 24 >> 3];
    $18 = HEAPF64[$32 + 8 >> 3];
    $26 = HEAPF64[$32 + 16 >> 3];
    $42 = $12 * $12 + ($18 * $18 + $26 * $26);
    if ($42 > 2.220446049250313e-16) {
     HEAP32[$9 + 472 >> 2] = 0;
     HEAP32[$9 + 476 >> 2] = 0;
     $19 = $12;
     $12 = 1.0 / $42;
     HEAPF64[$9 + 464 >> 3] = $19 * $12;
     HEAPF64[$9 + 456 >> 3] = $26 * $12;
     HEAPF64[$9 + 448 >> 3] = $18 * $12;
     $12 = HEAPF64[$32 + 88 >> 3];
     $18 = +FUNCTION_TABLE[HEAP32[HEAP32[$33 >> 2] + 48 >> 2]]($33);
     $26 = +FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 48 >> 2]]($14);
     $3 = $9 + 576 | 0;
     $13 = 0;
     $2 = 0;
     $5 = $0 + 32 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     label$117 : {
      if (($7 | 0) > 0) {
       break label$117
      }
      $10 = ($7 | 0) >= 0;
      if ($10) {
       break label$117
      }
      if (HEAP32[$5 + 8 >> 2] < 0) {
       label$518 : {
        if (($7 | 0) <= 0) {
         break label$518
        }
        if (($7 | 0) != 1) {
         $20 = $7 & -2;
         while (1) {
          $8 = HEAP32[$5 + 12 >> 2] + $2 | 0;
          $14 = HEAP32[$8 + 4 >> 2];
          HEAP32[$2 >> 2] = HEAP32[$8 >> 2];
          HEAP32[$2 + 4 >> 2] = $14;
          $14 = $8 + 24 | 0;
          $16 = HEAP32[$14 + 4 >> 2];
          $32 = $2 + 24 | 0;
          HEAP32[$32 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$32 + 4 >> 2] = $16;
          $14 = $8 + 16 | 0;
          $16 = HEAP32[$14 + 4 >> 2];
          $32 = $2 + 16 | 0;
          HEAP32[$32 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$32 + 4 >> 2] = $16;
          $8 = $8 + 8 | 0;
          $14 = HEAP32[$8 + 4 >> 2];
          $16 = $2 + 8 | 0;
          HEAP32[$16 >> 2] = HEAP32[$8 >> 2];
          HEAP32[$16 + 4 >> 2] = $14;
          $8 = HEAP32[$5 + 12 >> 2] + $2 | 0;
          $14 = $8 + 40 | 0;
          $16 = HEAP32[$14 + 4 >> 2];
          $32 = $2 + 40 | 0;
          HEAP32[$32 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$32 + 4 >> 2] = $16;
          $14 = $8 + 48 | 0;
          $16 = HEAP32[$14 + 4 >> 2];
          $32 = $2 + 48 | 0;
          HEAP32[$32 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$32 + 4 >> 2] = $16;
          $14 = $8 + 56 | 0;
          $16 = HEAP32[$14 + 4 >> 2];
          $32 = $2 + 56 | 0;
          HEAP32[$32 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$32 + 4 >> 2] = $16;
          $8 = $8 + 32 | 0;
          $14 = HEAP32[$8 + 4 >> 2];
          $16 = $2 + 32 | 0;
          HEAP32[$16 >> 2] = HEAP32[$8 >> 2];
          HEAP32[$16 + 4 >> 2] = $14;
          $2 = $2 - -64 | 0;
          $13 = $13 + 2 | 0;
          if (($20 | 0) != ($13 | 0)) {
           continue
          }
          break;
         };
        }
        if (!($7 & 1)) {
         break label$518
        }
        $2 = $13 << 5;
        $13 = $2;
        $2 = $2 + HEAP32[$5 + 12 >> 2] | 0;
        $8 = HEAP32[$2 + 4 >> 2];
        HEAP32[$13 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$13 + 4 >> 2] = $8;
        $8 = $2 + 24 | 0;
        $20 = HEAP32[$8 + 4 >> 2];
        $14 = $13 + 24 | 0;
        HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$14 + 4 >> 2] = $20;
        $8 = $2 + 16 | 0;
        $20 = HEAP32[$8 + 4 >> 2];
        $14 = $13 + 16 | 0;
        HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$14 + 4 >> 2] = $20;
        $2 = $2 + 8 | 0;
        $8 = HEAP32[$2 + 4 >> 2];
        $13 = $13 + 8 | 0;
        HEAP32[$13 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$13 + 4 >> 2] = $8;
       }
       $2 = HEAP32[$5 + 12 >> 2];
       if (!(!$2 | !HEAPU8[$5 + 16 | 0])) {
        btAlignedFreeInternal_28void__29($2)
       }
       HEAP32[$5 + 12 >> 2] = 0;
       HEAP8[$5 + 16 | 0] = 1;
       HEAP32[$5 + 8 >> 2] = 0;
       if ($10) {
        break label$117
       }
      }
      $10 = $7 ^ -1;
      $8 = 0 - $7 & 3;
      if ($8) {
       $2 = $7 << 5;
       while (1) {
        $20 = HEAP32[$3 + 4 >> 2];
        $13 = HEAP32[$5 + 12 >> 2] + $2 | 0;
        HEAP32[$13 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$13 + 4 >> 2] = $20;
        $20 = $3 + 24 | 0;
        $14 = HEAP32[$20 + 4 >> 2];
        $16 = $13 + 24 | 0;
        HEAP32[$16 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$16 + 4 >> 2] = $14;
        $20 = $3 + 16 | 0;
        $14 = HEAP32[$20 + 4 >> 2];
        $16 = $13 + 16 | 0;
        HEAP32[$16 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$16 + 4 >> 2] = $14;
        $20 = $3 + 8 | 0;
        $14 = HEAP32[$20 + 4 >> 2];
        $13 = $13 + 8 | 0;
        HEAP32[$13 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$13 + 4 >> 2] = $14;
        $2 = $2 + 32 | 0;
        $7 = $7 + 1 | 0;
        $8 = $8 - 1 | 0;
        if ($8) {
         continue
        }
        break;
       };
      }
      if ($10 >>> 0 < 3) {
       break label$117
      }
      $13 = $7 << 5;
      $20 = 0 - $7 | 0;
      while (1) {
       $7 = HEAP32[$3 + 4 >> 2];
       $2 = HEAP32[$5 + 12 >> 2] + $13 | 0;
       HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$2 + 4 >> 2] = $7;
       $7 = $3 + 24 | 0;
       $8 = HEAP32[$7 + 4 >> 2];
       $10 = $2 + 24 | 0;
       HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$10 + 4 >> 2] = $8;
       $8 = $3 + 16 | 0;
       $10 = HEAP32[$8 + 4 >> 2];
       $14 = $2 + 16 | 0;
       HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$14 + 4 >> 2] = $10;
       $10 = $2 + 8 | 0;
       $2 = $3 + 8 | 0;
       $14 = HEAP32[$2 + 4 >> 2];
       HEAP32[$10 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$10 + 4 >> 2] = $14;
       $14 = HEAP32[$2 + 4 >> 2];
       $10 = HEAP32[$5 + 12 >> 2] + $13 | 0;
       $16 = $10 + 40 | 0;
       HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $14 = HEAP32[$8 + 4 >> 2];
       $16 = $10 + 48 | 0;
       HEAP32[$16 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $14 = HEAP32[$7 + 4 >> 2];
       $16 = $10 + 56 | 0;
       HEAP32[$16 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $14 = HEAP32[$3 + 4 >> 2];
       $10 = $10 + 32 | 0;
       HEAP32[$10 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$10 + 4 >> 2] = $14;
       $14 = HEAP32[$2 + 4 >> 2];
       $10 = HEAP32[$5 + 12 >> 2] + $13 | 0;
       $16 = $10 + 72 | 0;
       HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $14 = HEAP32[$8 + 4 >> 2];
       $16 = $10 + 80 | 0;
       HEAP32[$16 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $14 = HEAP32[$7 + 4 >> 2];
       $16 = $10 + 88 | 0;
       HEAP32[$16 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $14 = HEAP32[$3 + 4 >> 2];
       $10 = $10 - -64 | 0;
       HEAP32[$10 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$10 + 4 >> 2] = $14;
       $14 = HEAP32[$3 + 4 >> 2];
       $10 = HEAP32[$5 + 12 >> 2] + $13 | 0;
       $16 = $10 + 96 | 0;
       HEAP32[$16 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $14 = HEAP32[$2 + 4 >> 2];
       $16 = $10 + 104 | 0;
       HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$16 + 4 >> 2] = $14;
       $2 = HEAP32[$8 + 4 >> 2];
       $14 = $10 + 112 | 0;
       HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$14 + 4 >> 2] = $2;
       $2 = HEAP32[$7 + 4 >> 2];
       $8 = $10 + 120 | 0;
       HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$8 + 4 >> 2] = $2;
       $13 = $13 + 128 | 0;
       $20 = $20 - 4 | 0;
       if ($20) {
        continue
       }
       break;
      };
     }
     HEAP32[$5 + 4 >> 2] = 0;
     btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20double_2c_20double_2c_20btDiscreteCollisionDetectorInterface__Result__29($9 + 448 | 0, HEAP32[$33 + 96 >> 2], HEAP32[$1 + 12 >> 2], $9 + 608 | 0, $5, $12 - $18 - $26 - $6, $6, $4);
    }
    if (HEAPU8[$0 + 52 | 0]) {
     $0 = HEAP32[$4 + 4 >> 2];
     if (HEAP32[$0 + 1456 >> 2]) {
      $2 = HEAP32[$0 + 1448 >> 2];
      $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
      $1 = ($2 | 0) == ($3 | 0);
      $7 = $0;
      $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
      btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($7, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
     }
    }
    $0 = HEAP32[$9 + 620 >> 2];
    if (!$0 | !HEAPU8[$9 + 624 | 0]) {
     break label$2
    }
    btAlignedFreeInternal_28void__29($0);
    break label$2;
   }
   btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($32, $9 + 1480 | 0, $4, HEAP32[$3 + 28 >> 2], 0);
   label$36 : {
    if (!HEAP32[$0 + 64 >> 2] | HEAP32[HEAP32[$4 + 4 >> 2] + 1456 >> 2] >= HEAP32[$0 + 68 >> 2]) {
     break label$36
    }
    $6 = HEAPF64[$32 + 24 >> 3];
    $12 = HEAPF64[$32 + 8 >> 3];
    $18 = HEAPF64[$32 + 16 >> 3];
    $26 = $6 * $6 + ($12 * $12 + $18 * $18);
    if (!($26 > 2.220446049250313e-16)) {
     break label$36
    }
    $19 = $18;
    $18 = 1.0 / $26;
    $42 = $19 * $18;
    $19 = $12 * $18;
    $35 = $6 * $18;
    label$37 : {
     if (Math_abs($35) > .7071067811865476) {
      $12 = 1.0 / Math_sqrt($42 * $42 + $35 * $35);
      $6 = $42 * $12;
      $49 = $12 * -$35;
      $12 = 0.0;
      break label$37;
     }
     $6 = 1.0 / Math_sqrt($19 * $19 + $42 * $42);
     $49 = $19 * $6;
     $12 = $6 * -$42;
     $6 = 0.0;
    }
    $16 = $9 + 1608 | 0;
    $10 = $9 + 1576 | 0;
    $20 = $9 + 1544 | 0;
    $29 = $9 + 1512 | 0;
    $18 = +FUNCTION_TABLE[HEAP32[HEAP32[$33 >> 2] + 16 >> 2]]($33);
    $26 = +FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 16 >> 2]]($14);
    $44 = HEAPF64[3845];
    $75 = $18 < $26;
    label$39 : {
     if ($75) {
      $5 = $9 + 1480 | 0;
      $14 = $5 + 24 | 0;
      $33 = HEAP32[$14 + 4 >> 2];
      $7 = $9 + 448 | 0;
      $23 = $7 + 24 | 0;
      HEAP32[$23 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$23 + 4 >> 2] = $33;
      $14 = $5 + 16 | 0;
      $33 = HEAP32[$14 + 4 >> 2];
      $23 = $7 + 16 | 0;
      HEAP32[$23 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$23 + 4 >> 2] = $33;
      $5 = $5 + 8 | 0;
      $14 = HEAP32[$5 + 4 >> 2];
      $7 = $7 + 8 | 0;
      HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$7 + 4 >> 2] = $14;
      $5 = HEAP32[$9 + 1484 >> 2];
      HEAP32[$9 + 448 >> 2] = HEAP32[$9 + 1480 >> 2];
      HEAP32[$9 + 452 >> 2] = $5;
      $18 = Math_min($44 / $18, .39269908169872414);
      $5 = $20;
      $7 = $10;
      $14 = $29;
      break label$39;
     }
     $7 = $16 + 24 | 0;
     $14 = HEAP32[$7 + 4 >> 2];
     $5 = $9 + 448 | 0;
     $33 = $5 + 24 | 0;
     HEAP32[$33 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$33 + 4 >> 2] = $14;
     $7 = $16 + 16 | 0;
     $14 = HEAP32[$7 + 4 >> 2];
     $33 = $5 + 16 | 0;
     HEAP32[$33 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$33 + 4 >> 2] = $14;
     $7 = $16 + 8 | 0;
     $14 = HEAP32[$7 + 4 >> 2];
     $5 = $5 + 8 | 0;
     HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$5 + 4 >> 2] = $14;
     $5 = HEAP32[$16 + 4 >> 2];
     HEAP32[$9 + 448 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$9 + 452 >> 2] = $5;
     $18 = Math_min($44 / $26, .39269908169872414);
     $5 = $13;
     $7 = $8;
     $14 = $28;
    }
    $33 = $14 + 24 | 0;
    $23 = HEAP32[$33 + 4 >> 2];
    $21 = $9 + 504 | 0;
    HEAP32[$21 >> 2] = HEAP32[$33 >> 2];
    HEAP32[$21 + 4 >> 2] = $23;
    $23 = $14 + 16 | 0;
    $21 = HEAP32[$23 + 4 >> 2];
    $33 = $9 + 448 | 0;
    $22 = $33 + 48 | 0;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    $23 = $14 + 8 | 0;
    $21 = HEAP32[$23 + 4 >> 2];
    $22 = $9 + 488 | 0;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    $23 = $5 + 8 | 0;
    $21 = HEAP32[$23 + 4 >> 2];
    $22 = $9 + 520 | 0;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    $23 = $5 + 16 | 0;
    $21 = HEAP32[$23 + 4 >> 2];
    $22 = $33 + 80 | 0;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    $23 = $5 + 24 | 0;
    $21 = HEAP32[$23 + 4 >> 2];
    $22 = $9 + 536 | 0;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    $23 = $7 + 8 | 0;
    $21 = HEAP32[$23 + 4 >> 2];
    $22 = $9 + 552 | 0;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    $23 = $7 + 16 | 0;
    $21 = HEAP32[$23 + 4 >> 2];
    $33 = $33 + 112 | 0;
    HEAP32[$33 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$33 + 4 >> 2] = $21;
    $33 = $7 + 24 | 0;
    $23 = HEAP32[$33 + 4 >> 2];
    $21 = $9 + 568 | 0;
    HEAP32[$21 >> 2] = HEAP32[$33 >> 2];
    HEAP32[$21 + 4 >> 2] = $23;
    $33 = HEAP32[$14 + 4 >> 2];
    HEAP32[$9 + 480 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$9 + 484 >> 2] = $33;
    $14 = HEAP32[$5 + 4 >> 2];
    HEAP32[$9 + 512 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$9 + 516 >> 2] = $14;
    $5 = HEAP32[$7 + 4 >> 2];
    HEAP32[$9 + 544 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$9 + 548 >> 2] = $5;
    $5 = HEAP32[$0 + 64 >> 2];
    if (($5 | 0) <= 0) {
     break label$36
    }
    $18 = $18 * .5;
    $26 = sin($18);
    $44 = cos($18);
    $18 = $6 * $6 + ($12 * $12 + $49 * $49);
    if (!($18 > 2.220446049250313e-16)) {
     break label$36
    }
    $30 = $6;
    $6 = $26 / Math_sqrt($18);
    $47 = $30 * $6;
    $48 = $49 * $6;
    $57 = $12 * $6;
    $46 = Math_sqrt($35 * $35 + ($19 * $19 + $42 * $42));
    $7 = $9 + 544 | 0;
    $14 = $9 + 408 | 0;
    $33 = $9 + 376 | 0;
    $23 = $9 + 512 | 0;
    $21 = $9 + 344 | 0;
    $22 = $9 + 480 | 0;
    $34 = $9 + 312 | 0;
    $45 = $9 + 280 | 0;
    $54 = $9 + 248 | 0;
    $51 = $9 + 216 | 0;
    $67 = $9 + 184 | 0;
    $68 = $9 + 152 | 0;
    $60 = $9 + 8 | 0;
    $69 = $60 + 112 | 0;
    $70 = $60 + 80 | 0;
    $60 = $60 + 48 | 0;
    while (1) {
     $26 = 6.283185307179586 / +($5 | 0) * +($76 | 0) * .5;
     $18 = sin($26) / $46;
     $6 = $35 * $18;
     $12 = $42 * $18;
     $18 = $19 * $18;
     $26 = cos($26);
     label$42 : {
      if (!$75) {
       $5 = HEAP32[$1 + 12 >> 2];
       $17 = $5 + 24 | 0;
       $11 = HEAP32[$17 >> 2];
       $15 = HEAP32[$17 + 4 >> 2];
       $17 = $5 + 16 | 0;
       $24 = HEAP32[$17 >> 2];
       $65 = HEAP32[$17 + 4 >> 2];
       $17 = $5 + 8 | 0;
       $72 = HEAP32[$17 >> 2];
       $84 = HEAP32[$17 + 4 >> 2];
       $85 = HEAP32[$5 >> 2];
       $86 = HEAP32[$5 + 4 >> 2];
       $17 = HEAP32[$5 + 36 >> 2];
       HEAP32[$29 >> 2] = HEAP32[$5 + 32 >> 2];
       HEAP32[$29 + 4 >> 2] = $17;
       $17 = $5 + 40 | 0;
       $63 = HEAP32[$17 + 4 >> 2];
       $64 = $29 + 8 | 0;
       HEAP32[$64 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$64 + 4 >> 2] = $63;
       $17 = $5 + 48 | 0;
       $63 = HEAP32[$17 + 4 >> 2];
       $64 = $29 + 16 | 0;
       HEAP32[$64 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$64 + 4 >> 2] = $63;
       $17 = $5 + 56 | 0;
       $63 = HEAP32[$17 + 4 >> 2];
       $64 = $29 + 24 | 0;
       HEAP32[$64 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$64 + 4 >> 2] = $63;
       $17 = $9 + 1480 | 0;
       $63 = $17 + 8 | 0;
       HEAP32[$63 >> 2] = $72;
       HEAP32[$63 + 4 >> 2] = $84;
       $72 = $17 + 16 | 0;
       HEAP32[$72 >> 2] = $24;
       HEAP32[$72 + 4 >> 2] = $65;
       $17 = $17 + 24 | 0;
       HEAP32[$17 >> 2] = $11;
       HEAP32[$17 + 4 >> 2] = $15;
       HEAP32[$9 + 1480 >> 2] = $85;
       HEAP32[$9 + 1484 >> 2] = $86;
       $17 = $5 + 88 | 0;
       $11 = HEAP32[$17 + 4 >> 2];
       $15 = $20 + 24 | 0;
       HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$15 + 4 >> 2] = $11;
       $17 = $5 + 80 | 0;
       $11 = HEAP32[$17 + 4 >> 2];
       $15 = $20 + 16 | 0;
       HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$15 + 4 >> 2] = $11;
       $17 = $5 + 72 | 0;
       $11 = HEAP32[$17 + 4 >> 2];
       $15 = $20 + 8 | 0;
       HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$15 + 4 >> 2] = $11;
       $17 = HEAP32[$5 + 68 >> 2];
       HEAP32[$20 >> 2] = HEAP32[$5 + 64 >> 2];
       HEAP32[$20 + 4 >> 2] = $17;
       $17 = HEAP32[$5 + 100 >> 2];
       HEAP32[$10 >> 2] = HEAP32[$5 + 96 >> 2];
       HEAP32[$10 + 4 >> 2] = $17;
       $17 = $5 + 104 | 0;
       $11 = HEAP32[$17 + 4 >> 2];
       $15 = $10 + 8 | 0;
       HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$15 + 4 >> 2] = $11;
       $17 = $5 + 112 | 0;
       $11 = HEAP32[$17 + 4 >> 2];
       $15 = $10 + 16 | 0;
       HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
       HEAP32[$15 + 4 >> 2] = $11;
       $5 = $5 + 120 | 0;
       $17 = HEAP32[$5 + 4 >> 2];
       $11 = $10 + 24 | 0;
       HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$11 + 4 >> 2] = $17;
       $5 = HEAP32[$2 + 12 >> 2];
       $43 = HEAPF64[$5 + 72 >> 3];
       $41 = HEAPF64[$5 + 40 >> 3];
       $25 = HEAPF64[$5 + 80 >> 3];
       $27 = HEAPF64[$5 + 48 >> 3];
       $49 = HEAPF64[$5 + 64 >> 3];
       $55 = HEAPF64[$5 >> 3];
       $56 = HEAPF64[$5 + 32 >> 3];
       $50 = HEAPF64[$5 + 8 >> 3];
       $52 = HEAPF64[$5 + 16 >> 3];
       HEAP32[$9 + 1632 >> 2] = 0;
       HEAP32[$9 + 1636 >> 2] = 0;
       HEAP32[$9 + 1664 >> 2] = 0;
       HEAP32[$9 + 1668 >> 2] = 0;
       HEAP32[$9 + 1696 >> 2] = 0;
       HEAP32[$9 + 1700 >> 2] = 0;
       $40 = $18 * $47 + ($26 * $48 - $44 * $12 - $6 * $57);
       $38 = $6 * $47 + ($12 * $48 + ($26 * $44 + $57 * $18));
       $39 = $6 * $48 + ($26 * $57 - $44 * $18 - $12 * $47);
       $31 = $12 * $57 + ($26 * $47 - $44 * $6 - $18 * $48);
       $30 = $40 * $6 + ($38 * $18 + $26 * $39) - $31 * $12;
       $36 = $38 * $26 - $18 * $39 - $40 * $12 - $31 * $6;
       $53 = $39 * $12 + ($38 * $6 + $26 * $31) - $40 * $18;
       $6 = $31 * $18 + ($38 * $12 + $26 * $40) - $39 * $6;
       $12 = 2.0 / ($36 * $36 + ($53 * $53 + ($30 * $30 + $6 * $6)));
       $38 = $30 * $12;
       $39 = $30 * $38;
       $18 = $6 * $12;
       $31 = $6 * $18;
       $26 = 1.0 - ($39 + $31);
       $12 = $53 * $12;
       $61 = $30 * $12;
       $62 = $36 * $18;
       $40 = $61 - $62;
       $59 = $6 * $12;
       $38 = $36 * $38;
       $6 = $59 + $38;
       HEAPF64[$9 + 1688 >> 3] = $25 * $26 + ($52 * $40 + $27 * $6);
       HEAPF64[$9 + 1680 >> 3] = $43 * $26 + ($50 * $40 + $6 * $41);
       HEAPF64[$9 + 1672 >> 3] = $49 * $26 + ($55 * $40 + $6 * $56);
       $6 = $61 + $62;
       $40 = $53 * $12;
       $26 = 1.0 - ($31 + $40);
       $18 = $30 * $18;
       $30 = $36 * $12;
       $12 = $18 - $30;
       HEAPF64[$9 + 1624 >> 3] = $25 * $6 + ($52 * $26 + $27 * $12);
       HEAPF64[$9 + 1616 >> 3] = $43 * $6 + ($50 * $26 + $12 * $41);
       HEAPF64[$9 + 1608 >> 3] = $49 * $6 + ($55 * $26 + $12 * $56);
       $6 = $59 - $38;
       $12 = $18 + $30;
       $18 = 1.0 - ($39 + $40);
       HEAPF64[$9 + 1656 >> 3] = $25 * $6 + ($52 * $12 + $27 * $18);
       HEAPF64[$9 + 1648 >> 3] = $43 * $6 + ($50 * $12 + $18 * $41);
       HEAPF64[$9 + 1640 >> 3] = $49 * $6 + ($55 * $12 + $18 * $56);
       break label$42;
      }
      $5 = HEAP32[$1 + 12 >> 2];
      $43 = HEAPF64[$5 >> 3];
      $41 = HEAPF64[$5 + 8 >> 3];
      $25 = HEAPF64[$5 + 16 >> 3];
      HEAP32[$9 + 1504 >> 2] = 0;
      HEAP32[$9 + 1508 >> 2] = 0;
      $27 = HEAPF64[$5 + 72 >> 3];
      $49 = HEAPF64[$5 + 40 >> 3];
      $55 = HEAPF64[$5 + 80 >> 3];
      $56 = HEAPF64[$5 + 48 >> 3];
      $50 = HEAPF64[$5 + 64 >> 3];
      $52 = HEAPF64[$5 + 32 >> 3];
      HEAP32[$9 + 1568 >> 2] = 0;
      HEAP32[$9 + 1572 >> 2] = 0;
      HEAP32[$9 + 1536 >> 2] = 0;
      HEAP32[$9 + 1540 >> 2] = 0;
      $40 = $18 * $47 + ($26 * $48 - $44 * $12 - $6 * $57);
      $38 = $6 * $47 + ($12 * $48 + ($26 * $44 + $57 * $18));
      $39 = $6 * $48 + ($26 * $57 - $44 * $18 - $12 * $47);
      $31 = $12 * $57 + ($26 * $47 - $44 * $6 - $18 * $48);
      $30 = $40 * $6 + ($38 * $18 + $26 * $39) - $31 * $12;
      $36 = $38 * $26 - $18 * $39 - $40 * $12 - $31 * $6;
      $53 = $39 * $12 + ($38 * $6 + $26 * $31) - $40 * $18;
      $6 = $31 * $18 + ($38 * $12 + $26 * $40) - $39 * $6;
      $12 = 2.0 / ($36 * $36 + ($53 * $53 + ($30 * $30 + $6 * $6)));
      $38 = $30 * $12;
      $39 = $30 * $38;
      $18 = $6 * $12;
      $31 = $6 * $18;
      $26 = 1.0 - ($39 + $31);
      $12 = $53 * $12;
      $61 = $30 * $12;
      $62 = $36 * $18;
      $40 = $61 - $62;
      $59 = $6 * $12;
      $38 = $36 * $38;
      $6 = $59 + $38;
      HEAPF64[$9 + 1560 >> 3] = $55 * $26 + ($25 * $40 + $56 * $6);
      HEAPF64[$9 + 1552 >> 3] = $27 * $26 + ($41 * $40 + $6 * $49);
      HEAPF64[$9 + 1544 >> 3] = $50 * $26 + ($43 * $40 + $6 * $52);
      $6 = $59 - $38;
      $26 = $30 * $18;
      $30 = $36 * $12;
      $18 = $26 + $30;
      $36 = $53 * $12;
      $12 = 1.0 - ($39 + $36);
      HEAPF64[$9 + 1528 >> 3] = $55 * $6 + ($25 * $18 + $56 * $12);
      HEAPF64[$9 + 1520 >> 3] = $27 * $6 + ($41 * $18 + $12 * $49);
      HEAPF64[$9 + 1512 >> 3] = $50 * $6 + ($43 * $18 + $12 * $52);
      $6 = $61 + $62;
      $12 = 1.0 - ($31 + $36);
      $18 = $26 - $30;
      HEAPF64[$9 + 1496 >> 3] = $55 * $6 + ($25 * $12 + $56 * $18);
      HEAPF64[$9 + 1488 >> 3] = $27 * $6 + ($41 * $12 + $18 * $49);
      HEAPF64[$9 + 1480 >> 3] = $50 * $6 + ($43 * $12 + $18 * $52);
      $5 = HEAP32[$2 + 12 >> 2];
      $17 = HEAP32[$5 + 4 >> 2];
      HEAP32[$16 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$16 + 4 >> 2] = $17;
      $17 = $5 + 24 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $16 + 24 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 16 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $16 + 16 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 8 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $16 + 8 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 56 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $28 + 24 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 48 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $28 + 16 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 40 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $28 + 8 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = HEAP32[$5 + 36 >> 2];
      HEAP32[$28 >> 2] = HEAP32[$5 + 32 >> 2];
      HEAP32[$28 + 4 >> 2] = $17;
      $17 = $5 + 88 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $13 + 24 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 80 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $13 + 16 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 72 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $13 + 8 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = HEAP32[$5 + 68 >> 2];
      HEAP32[$13 >> 2] = HEAP32[$5 + 64 >> 2];
      HEAP32[$13 + 4 >> 2] = $17;
      $17 = $5 + 120 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $8 + 24 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 112 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $8 + 16 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = $5 + 104 | 0;
      $11 = HEAP32[$17 + 4 >> 2];
      $15 = $8 + 8 | 0;
      HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
      HEAP32[$15 + 4 >> 2] = $11;
      $17 = HEAP32[$5 + 100 >> 2];
      HEAP32[$8 >> 2] = HEAP32[$5 + 96 >> 2];
      HEAP32[$8 + 4 >> 2] = $17;
     }
     $5 = HEAP32[$9 + 1484 >> 2];
     HEAP32[$60 >> 2] = HEAP32[$9 + 1480 >> 2];
     HEAP32[$60 + 4 >> 2] = $5;
     $5 = HEAP32[$29 + 4 >> 2];
     HEAP32[$70 >> 2] = HEAP32[$29 >> 2];
     HEAP32[$70 + 4 >> 2] = $5;
     $5 = $9 + 1480 | 0;
     $17 = $5 + 8 | 0;
     $11 = HEAP32[$17 + 4 >> 2];
     $15 = $60 + 8 | 0;
     HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$15 + 4 >> 2] = $11;
     $17 = $5 + 16 | 0;
     $11 = HEAP32[$17 + 4 >> 2];
     $15 = $60 + 16 | 0;
     HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$15 + 4 >> 2] = $11;
     $17 = $5 + 24 | 0;
     $11 = HEAP32[$17 + 4 >> 2];
     $15 = $60 + 24 | 0;
     HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$15 + 4 >> 2] = $11;
     $17 = $29 + 8 | 0;
     $11 = HEAP32[$17 + 4 >> 2];
     $15 = $70 + 8 | 0;
     HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$15 + 4 >> 2] = $11;
     $17 = $29 + 16 | 0;
     $11 = HEAP32[$17 + 4 >> 2];
     $15 = $70 + 16 | 0;
     HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$15 + 4 >> 2] = $11;
     $17 = $29 + 24 | 0;
     $11 = HEAP32[$17 + 4 >> 2];
     $15 = $70 + 24 | 0;
     HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$15 + 4 >> 2] = $11;
     HEAP32[$9 + 40 >> 2] = 0;
     HEAP32[$9 + 44 >> 2] = 0;
     HEAP32[$9 + 48 >> 2] = $4;
     HEAP32[$9 + 8 >> 2] = 16060;
     $17 = HEAP32[$3 + 28 >> 2];
     $11 = $20 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $69 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $20 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $69 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $20 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $69 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$20 + 4 >> 2];
     HEAP32[$69 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$69 + 4 >> 2] = $11;
     $11 = HEAP32[$10 + 4 >> 2];
     HEAP32[$68 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$68 + 4 >> 2] = $11;
     $11 = $10 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $68 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $10 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $68 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $10 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $68 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$16 + 4 >> 2];
     HEAP32[$67 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$67 + 4 >> 2] = $11;
     $11 = $16 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $67 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $16 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $67 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $16 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $67 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $28 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $51 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $28 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $51 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $28 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $51 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$28 + 4 >> 2];
     HEAP32[$51 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$51 + 4 >> 2] = $11;
     $11 = $13 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $54 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $13 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $54 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $13 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $54 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$13 + 4 >> 2];
     HEAP32[$54 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$54 + 4 >> 2] = $11;
     $11 = $8 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $45 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $8 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $45 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $8 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $45 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$8 + 4 >> 2];
     HEAP32[$45 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$45 + 4 >> 2] = $11;
     $11 = $9 + 448 | 0;
     $15 = $11 + 24 | 0;
     $24 = HEAP32[$15 + 4 >> 2];
     $65 = $34 + 24 | 0;
     HEAP32[$65 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$65 + 4 >> 2] = $24;
     $15 = $11 + 16 | 0;
     $24 = HEAP32[$15 + 4 >> 2];
     $65 = $34 + 16 | 0;
     HEAP32[$65 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$65 + 4 >> 2] = $24;
     $11 = $11 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $34 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$9 + 452 >> 2];
     HEAP32[$34 >> 2] = HEAP32[$9 + 448 >> 2];
     HEAP32[$34 + 4 >> 2] = $11;
     $11 = $22 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $21 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $22 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $21 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $22 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $21 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$22 + 4 >> 2];
     HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
     HEAP32[$21 + 4 >> 2] = $11;
     $11 = $23 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $33 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $23 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $33 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $23 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $33 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$23 + 4 >> 2];
     HEAP32[$33 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$33 + 4 >> 2] = $11;
     $11 = $7 + 24 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $14 + 24 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $7 + 16 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $14 + 16 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = $7 + 8 | 0;
     $15 = HEAP32[$11 + 4 >> 2];
     $24 = $14 + 8 | 0;
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$24 + 4 >> 2] = $15;
     $11 = HEAP32[$7 + 4 >> 2];
     HEAP32[$14 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$14 + 4 >> 2] = $11;
     HEAP32[$9 + 444 >> 2] = $17;
     HEAP8[$9 + 440 | 0] = $75;
     btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($32, $5, $9 + 8 | 0, $17, 0);
     $5 = HEAP32[$0 + 64 >> 2];
     $76 = $76 + 1 | 0;
     if (($5 | 0) > ($76 | 0)) {
      continue
     }
     break;
    };
   }
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$2
   }
   $0 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$0 + 1456 >> 2]) {
    break label$2
   }
   $2 = HEAP32[$0 + 1448 >> 2];
   $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   $1 = ($2 | 0) == ($3 | 0);
   $7 = $0;
   $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($7, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
  }
  __stack_pointer = $9 + 1744 | 0;
 }
 
 function capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20double_2c_20double_2c_20double_2c_20double_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
  $6 = ($6 << 3) + $8 | 0;
  $16 = HEAPF64[$6 - -64 >> 3];
  $17 = HEAPF64[$9 + 112 >> 3] - HEAPF64[$8 + 112 >> 3];
  $18 = HEAPF64[$6 >> 3];
  $20 = HEAPF64[$9 + 96 >> 3] - HEAPF64[$8 + 96 >> 3];
  $14 = HEAPF64[$6 + 32 >> 3];
  $21 = HEAPF64[$9 + 104 >> 3] - HEAPF64[$8 + 104 >> 3];
  $19 = $16 * $17 + ($18 * $20 + $14 * $21);
  $6 = ($7 << 3) + $9 | 0;
  $22 = HEAPF64[$6 - -64 >> 3];
  $23 = HEAPF64[$6 >> 3];
  $24 = HEAPF64[$6 + 32 >> 3];
  $13 = -($22 * $17 + ($23 * $20 + $24 * $21));
  $15 = $16 * $22 + ($18 * $23 + $14 * $24);
  $12 = 1.0 - $15 * $15;
  label$1 : {
   if ($12 == 0.0) {
    break label$1
   }
   $11 = -$2;
   $12 = ($13 * $15 + $19) / $12;
   if ($11 > $12) {
    break label$1
   }
   $11 = $12;
   if (!($11 > $2)) {
    break label$1
   }
   $11 = $2;
  }
  $12 = $11 * $15 + $13;
  $13 = -$4;
  label$2 : {
   label$3 : {
    if ($12 < $13) {
     $11 = -$2;
     $4 = $13 * $15 + $19;
     if ($11 > $4) {
      $12 = $13;
      break label$2;
     }
     if (!($2 < $4)) {
      $12 = $13;
      $11 = $4;
      break label$2;
     }
     $4 = $13;
     break label$3;
    }
    if (!($4 < $12)) {
     break label$2
    }
    $11 = -$2;
    $13 = $4 * $15 + $19;
    if ($11 > $13) {
     $12 = $4;
     break label$2;
    }
    if (!($2 < $13)) {
     $12 = $4;
     $11 = $13;
     break label$2;
    }
   }
   $12 = $4;
   $11 = $2;
  }
  $25 = $10;
  $13 = $22 * $12;
  $2 = $13 + ($17 - $16 * $11);
  $15 = $23 * $12;
  $4 = $15 + ($20 - $18 * $11);
  $12 = $24 * $12;
  $10 = $12 + ($21 - $14 * $11);
  $11 = $2 * $2 + ($4 * $4 + $10 * $10);
  $19 = Math_sqrt($11);
  $17 = $19 - $3 - $5;
  if (!($25 < $17)) {
   label$10 : {
    if ($11 <= 4.930380657631324e-32) {
     if (Math_abs($16) > .7071067811865476) {
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $3 = 1.0 / Math_sqrt($14 * $14 + $16 * $16);
      $2 = $14 * $3;
      HEAPF64[$0 + 16 >> 3] = $2;
      $11 = $3 * -$16;
      HEAPF64[$0 + 8 >> 3] = $11;
      $3 = 0.0;
      break label$10;
     }
     HEAP32[$0 + 16 >> 2] = 0;
     HEAP32[$0 + 20 >> 2] = 0;
     $2 = 1.0 / Math_sqrt($18 * $18 + $14 * $14);
     $11 = $18 * $2;
     HEAPF64[$0 + 8 >> 3] = $11;
     $3 = $2 * -$14;
     HEAPF64[$0 >> 3] = $3;
     $2 = 0.0;
     break label$10;
    }
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    $3 = -1.0 / $19;
    $2 = $2 * $3;
    HEAPF64[$0 + 16 >> 3] = $2;
    $11 = $10 * $3;
    HEAPF64[$0 + 8 >> 3] = $11;
    $3 = $4 * $3;
    HEAPF64[$0 >> 3] = $3;
   }
   $4 = HEAPF64[$9 + 96 >> 3];
   $10 = HEAPF64[$9 + 104 >> 3];
   $14 = HEAPF64[$9 + 112 >> 3];
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 28 >> 2] = 0;
   HEAPF64[$1 + 16 >> 3] = $13 + $14 + $2 * $5;
   HEAPF64[$1 + 8 >> 3] = $12 + $10 + $11 * $5;
   HEAPF64[$1 >> 3] = $15 + $4 + $3 * $5;
  }
  return $17;
 }
 
 function btConvexConvexAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0;
  $0 = __stack_pointer - 1184 | 0;
  __stack_pointer = $0;
  $5 = HEAPF64[$1 + 248 >> 3] - HEAPF64[$1 + 120 >> 3];
  $7 = $5 * $5;
  $5 = HEAPF64[$1 + 232 >> 3] - HEAPF64[$1 + 104 >> 3];
  $6 = $5 * $5;
  $5 = HEAPF64[$1 + 240 >> 3] - HEAPF64[$1 + 112 >> 3];
  $6 = $7 + ($6 + $5 * $5);
  $5 = HEAPF64[$1 + 504 >> 3];
  label$1 : {
   label$2 : {
    if ($6 < $5 * $5) {
     $6 = 1.0;
     $5 = HEAPF64[$2 + 248 >> 3] - HEAPF64[$2 + 120 >> 3];
     $19 = $5 * $5;
     $5 = HEAPF64[$2 + 232 >> 3] - HEAPF64[$2 + 104 >> 3];
     $7 = $5 * $5;
     $5 = HEAPF64[$2 + 240 >> 3] - HEAPF64[$2 + 112 >> 3];
     $7 = $19 + ($7 + $5 * $5);
     $5 = HEAPF64[$2 + 504 >> 3];
     if ($7 < $5 * $5) {
      break label$1
     }
     if (!HEAPU8[33632]) {
      break label$2
     }
     break label$1;
    }
    $6 = 1.0;
    if (HEAPU8[33632]) {
     break label$1
    }
   }
   $8 = HEAP32[$1 + 380 >> 2];
   $5 = HEAPF64[$2 + 496 >> 3];
   $3 = $0 + 1088 | 0;
   btConvexInternalShape__btConvexInternalShape_28_29($3);
   $9 = $0 + 1128 | 0;
   HEAP32[$9 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   $4 = $0 + 1120 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 1072693248;
   $10 = $0 + 1112 | 0;
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 1072693248;
   $11 = $0 + 1144 | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$11 + 4 >> 2] = 0;
   $12 = $0 + 1152 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $13 = $0 + 1160 | 0;
   HEAP32[$13 >> 2] = 0;
   HEAP32[$13 + 4 >> 2] = 0;
   HEAP32[$0 + 1104 >> 2] = 0;
   HEAP32[$0 + 1108 >> 2] = 1072693248;
   HEAPF64[$0 + 1136 >> 3] = $5;
   HEAP32[$0 + 1176 >> 2] = 0;
   HEAP32[$0 + 1180 >> 2] = 0;
   HEAPF64[$0 + 1168 >> 3] = $5;
   HEAP32[$0 + 1092 >> 2] = 8;
   HEAP32[$0 + 1088 >> 2] = 8920;
   HEAP32[$0 + 1080 >> 2] = 0;
   HEAP32[$0 + 1084 >> 2] = 0;
   HEAP32[$0 + 1072 >> 2] = 0;
   HEAP32[$0 + 1064 >> 2] = 966823146;
   HEAP32[$0 + 1068 >> 2] = 1177108057;
   HEAP32[$0 + 736 >> 2] = 16128;
   $14 = $0 + 680 | 0;
   HEAP8[$14 | 0] = 0;
   HEAP32[$0 + 632 >> 2] = -2147483648;
   HEAP32[$0 + 636 >> 2] = 1030854553;
   $3 = btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $8, $3, $0 + 16 | 0);
   $15 = $1 + 8 | 0;
   $16 = $1 + 136 | 0;
   $17 = $2 + 8 | 0;
   $8 = $2 + 136 | 0;
   $6 = 1.0;
   label$4 : {
    if (!btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($3, $15, $16, $17, $8, $0 + 736 | 0)) {
     break label$4
    }
    $5 = HEAPF64[$0 + 1064 >> 3];
    if ($5 < HEAPF64[$1 + 488 >> 3]) {
     HEAPF64[$1 + 488 >> 3] = $5
    }
    if (HEAPF64[$2 + 488 >> 3] > $5) {
     HEAPF64[$2 + 488 >> 3] = $5
    }
    $6 = 1.0;
    if (!($5 < 1.0)) {
     break label$4
    }
    $6 = $5;
   }
   $3 = HEAP32[$2 + 380 >> 2];
   $5 = HEAPF64[$1 + 496 >> 3];
   $18 = $0 + 1088 | 0;
   btConvexInternalShape__btConvexInternalShape_28_29($18);
   HEAP32[$9 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 1072693248;
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 1072693248;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$11 + 4 >> 2] = 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   HEAP32[$13 >> 2] = 0;
   HEAP32[$13 + 4 >> 2] = 0;
   HEAP32[$0 + 1104 >> 2] = 0;
   HEAP32[$0 + 1108 >> 2] = 1072693248;
   HEAPF64[$0 + 1136 >> 3] = $5;
   HEAP32[$0 + 1176 >> 2] = 0;
   HEAP32[$0 + 1180 >> 2] = 0;
   HEAPF64[$0 + 1168 >> 3] = $5;
   HEAP32[$0 + 1092 >> 2] = 8;
   HEAP32[$0 + 1088 >> 2] = 8920;
   HEAP32[$0 + 1080 >> 2] = 0;
   HEAP32[$0 + 1084 >> 2] = 0;
   HEAP32[$0 + 1072 >> 2] = 0;
   HEAP32[$0 + 1064 >> 2] = 966823146;
   HEAP32[$0 + 1068 >> 2] = 1177108057;
   HEAP32[$0 + 736 >> 2] = 16128;
   HEAP8[$14 | 0] = 0;
   HEAP32[$0 + 632 >> 2] = -2147483648;
   HEAP32[$0 + 636 >> 2] = 1030854553;
   label$7 : {
    if (!btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29(btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $18, $3, $0 + 16 | 0), $15, $16, $17, $8, $0 + 736 | 0)) {
     break label$7
    }
    $5 = HEAPF64[$0 + 1064 >> 3];
    if ($5 < HEAPF64[$1 + 488 >> 3]) {
     HEAPF64[$1 + 488 >> 3] = $5
    }
    if (HEAPF64[$2 + 488 >> 3] > $5) {
     HEAPF64[$2 + 488 >> 3] = $5
    }
    if (!($5 < $6)) {
     break label$7
    }
    $6 = $5;
   }
  }
  __stack_pointer = $0 + 1184 | 0;
  return +$6;
 }
 
 function btConvexConvexAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $2 = HEAP32[$1 >> 2];
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2, 72) | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = HEAP32[$0 + 12 >> 2];
  $5 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($2, $1);
  HEAP8[$2 + 28 | 0] = 1;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 >> 2] = 15580;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP8[$2 + 48 | 0] = 1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = $4;
  HEAP32[$2 + 68 >> 2] = $5;
  HEAP8[$2 + 60 | 0] = 0;
  HEAP32[$2 + 56 >> 2] = $3;
  HEAP8[$2 + 52 | 0] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  return $2 | 0;
 }
 
 function btConvexConvexAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = HEAP32[$0 + 56 >> 2];
  if (!(!$2 | !HEAPU8[$0 + 52 | 0])) {
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($4 | 0) <= ($3 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    label$5 : {
     if (($3 | 0) <= 0) {
      break label$5
     }
     $5 = $3 & 3;
     if ($3 - 1 >>> 0 >= 3) {
      $9 = $3 & -4;
      $2 = 0;
      while (1) {
       $6 = $2 + $7 | 0;
       HEAP32[$6 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 8 >> 2];
       HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 12 >> 2];
       $2 = $2 + 16 | 0;
       $8 = $8 + 4 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$5
     }
     $2 = $8 << 2;
     while (1) {
      HEAP32[$2 + $7 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = $7;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 56 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
 }
 
 function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAPF64[$0 + 56 >> 3] = $3;
  $7 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 12 >> 2] = $7;
  $9 = $1 + 8 | 0;
  $5 = $9;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $0 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $10 = $1 + 16 | 0;
  $5 = $10;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $0 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 24 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $0 + 32 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $11 = HEAPF64[$9 >> 3];
  $12 = HEAPF64[$10 >> 3];
  $13 = HEAPF64[$2 >> 3];
  $14 = HEAPF64[$1 >> 3];
  $15 = HEAPF64[$2 + 8 >> 3];
  $16 = HEAPF64[$2 + 16 >> 3];
  $8 = HEAPF64[$0 + 48 >> 3];
  $3 = $8 + HEAPF64[$0 + 40 >> 3] + $3;
  HEAPF64[$0 + 56 >> 3] = $3;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $16 - $8 * $12;
  HEAPF64[$4 + 8 >> 3] = $15 - $8 * $11;
  HEAPF64[$4 >> 3] = $13 - $14 * $8;
  if ($3 < 0.0) {
   HEAP8[$0 + 64 | 0] = 1
  }
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $4, $3);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function btPerturbedContactResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0;
  $10 = __stack_pointer - 32 | 0;
  __stack_pointer = $10;
  $11 = HEAPF64[$1 + 16 >> 3];
  $5 = HEAPF64[$2 + 16 >> 3];
  $16 = $11 * $3 + $5;
  $28 = HEAPF64[$1 + 8 >> 3];
  $27 = HEAPF64[$2 + 8 >> 3];
  $29 = $28 * $3 + $27;
  $30 = HEAPF64[$1 >> 3];
  $4 = $30 * $3;
  $3 = HEAPF64[$2 >> 3];
  $31 = $4 + $3;
  label$1 : {
   if (HEAPU8[$0 + 432 | 0]) {
    $17 = HEAPF64[$0 - -64 >> 3];
    $8 = -HEAPF64[$0 + 144 >> 3];
    $18 = HEAPF64[$0 + 96 >> 3];
    $7 = HEAPF64[$0 + 152 >> 3];
    $19 = HEAPF64[$0 + 128 >> 3];
    $6 = HEAPF64[$0 + 160 >> 3];
    $24 = $17 * $8 - $18 * $7 - $19 * $6;
    $4 = HEAPF64[$0 + 384 >> 3];
    $20 = HEAPF64[$0 + 48 >> 3];
    $21 = HEAPF64[$0 + 80 >> 3];
    $22 = HEAPF64[$0 + 112 >> 3];
    $25 = $20 * $8 - $21 * $7 - $22 * $6;
    $12 = HEAPF64[$0 + 368 >> 3];
    $23 = HEAPF64[$0 + 56 >> 3];
    $9 = $23 * $8;
    $8 = HEAPF64[$0 + 88 >> 3];
    $9 = $9 - $8 * $7;
    $7 = HEAPF64[$0 + 120 >> 3];
    $9 = $9 - $7 * $6;
    $6 = HEAPF64[$0 + 376 >> 3];
    $4 = $24 * $4 + ($25 * $12 + $9 * $6) + HEAPF64[$0 + 416 >> 3] + ($16 * ($19 * $4 + ($22 * $12 + $7 * $6)) + ($31 * ($17 * $4 + ($20 * $12 + $23 * $6)) + $29 * ($18 * $4 + ($21 * $12 + $8 * $6))));
    $6 = $4;
    $12 = $11;
    $14 = ($4 - $5) * $11;
    $5 = HEAPF64[$0 + 320 >> 3];
    $4 = HEAPF64[$0 + 304 >> 3];
    $11 = HEAPF64[$0 + 312 >> 3];
    $4 = $16 * ($19 * $5 + ($22 * $4 + $7 * $11)) + ($31 * ($17 * $5 + ($20 * $4 + $23 * $11)) + $29 * ($18 * $5 + ($21 * $4 + $8 * $11))) + ($24 * $5 + ($25 * $4 + $9 * $11) + HEAPF64[$0 + 400 >> 3]);
    $15 = ($4 - $3) * $30;
    $11 = $16;
    $3 = HEAPF64[$0 + 352 >> 3];
    $5 = HEAPF64[$0 + 336 >> 3];
    $16 = HEAPF64[$0 + 344 >> 3];
    $5 = $11 * ($19 * $3 + ($22 * $5 + $7 * $16)) + ($31 * ($17 * $3 + ($20 * $5 + $23 * $16)) + $29 * ($18 * $3 + ($21 * $5 + $8 * $16))) + ($24 * $3 + ($25 * $5 + $9 * $16) + HEAPF64[$0 + 408 >> 3]);
    $3 = $14 + ($15 + $28 * ($5 - $27));
    HEAPF64[$10 + 16 >> 3] = $6 + $12 * $3;
    HEAPF64[$10 + 8 >> 3] = $5 + $28 * $3;
    HEAPF64[$10 >> 3] = $4 + $30 * $3;
    break label$1;
   }
   $34 = HEAPF64[$0 + 416 >> 3];
   $17 = HEAPF64[$0 + 384 >> 3];
   $18 = HEAPF64[$0 + 368 >> 3];
   $19 = HEAPF64[$0 + 376 >> 3];
   $35 = HEAPF64[$0 + 400 >> 3];
   $4 = HEAPF64[$0 + 312 >> 3];
   $20 = HEAPF64[$0 + 320 >> 3];
   $21 = HEAPF64[$0 + 304 >> 3];
   $22 = HEAPF64[$0 + 192 >> 3];
   $14 = -HEAPF64[$0 + 272 >> 3];
   $12 = HEAPF64[$0 + 224 >> 3];
   $15 = HEAPF64[$0 + 280 >> 3];
   $23 = HEAPF64[$0 + 256 >> 3];
   $26 = HEAPF64[$0 + 288 >> 3];
   $8 = $22 * $14 - $12 * $15 - $23 * $26;
   $7 = HEAPF64[$0 + 176 >> 3];
   $6 = HEAPF64[$0 + 208 >> 3];
   $24 = HEAPF64[$0 + 240 >> 3];
   $25 = $7 * $14 - $6 * $15 - $24 * $26;
   $9 = HEAPF64[$0 + 184 >> 3];
   $13 = $9 * $14;
   $14 = HEAPF64[$0 + 216 >> 3];
   $13 = $13 - $14 * $15;
   $15 = HEAPF64[$0 + 248 >> 3];
   $26 = $13 - $15 * $26;
   $13 = HEAPF64[$0 + 352 >> 3];
   $32 = HEAPF64[$0 + 336 >> 3];
   $33 = HEAPF64[$0 + 344 >> 3];
   $13 = $5 * ($23 * $13 + ($24 * $32 + $15 * $33)) + ($3 * ($22 * $13 + ($7 * $32 + $9 * $33)) + $27 * ($12 * $13 + ($6 * $32 + $14 * $33))) + ($8 * $13 + ($25 * $32 + $26 * $33) + HEAPF64[$0 + 408 >> 3]);
   HEAPF64[$10 + 8 >> 3] = $13;
   $4 = $5 * ($23 * $20 + ($24 * $21 + $15 * $4)) + ($3 * ($22 * $20 + ($7 * $21 + $9 * $4)) + $27 * ($12 * $20 + ($6 * $21 + $14 * $4))) + ($35 + ($8 * $20 + ($25 * $21 + $26 * $4)));
   HEAPF64[$10 >> 3] = $4;
   $3 = $34 + ($8 * $17 + ($25 * $18 + $26 * $19)) + ($5 * ($23 * $17 + ($24 * $18 + $15 * $19)) + ($3 * ($22 * $17 + ($7 * $18 + $9 * $19)) + $27 * ($12 * $17 + ($6 * $18 + $14 * $19))));
   HEAPF64[$10 + 16 >> 3] = $3;
   $3 = ($16 - $3) * $11 + (($31 - $4) * $30 + $28 * ($29 - $13));
  }
  HEAP32[$10 + 24 >> 2] = 0;
  HEAP32[$10 + 28 >> 2] = 0;
  $0 = HEAP32[$0 + 40 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $10, $3);
  __stack_pointer = $10 + 32 | 0;
 }
 
 function CProfileSample__CProfileSample_28char_20const__29($0, $1) {
  FUNCTION_TABLE[HEAP32[7697]]($1);
  return $0;
 }
 
 function CProfileSample___CProfileSample_28_29() {
  FUNCTION_TABLE[HEAP32[7698]]();
 }
 
 function btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $1, $2, $3) {
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = 16196;
  return $0;
 }
 
 function btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
  $6 = __stack_pointer - 192 | 0;
  __stack_pointer = $6;
  btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
  $13 = $3 + 80 | 0;
  $41 = HEAPF64[$13 >> 3];
  $20 = $3 + 72 | 0;
  $42 = HEAPF64[$20 >> 3];
  $22 = $3 + 48 | 0;
  $43 = HEAPF64[$22 >> 3];
  $23 = $3 + 40 | 0;
  $44 = HEAPF64[$23 >> 3];
  $45 = $1 + 40 | 0;
  $24 = HEAPF64[$45 >> 3];
  $46 = $1 + 72 | 0;
  $25 = HEAPF64[$46 >> 3];
  $47 = $1 + 48 | 0;
  $26 = HEAPF64[$47 >> 3];
  $48 = $1 + 104 | 0;
  $27 = HEAPF64[$48 >> 3];
  $14 = HEAPF64[$2 + 104 >> 3];
  $49 = $3 + 104 | 0;
  $28 = HEAPF64[$49 >> 3];
  $11 = HEAPF64[$4 + 104 >> 3];
  $50 = $1 + 80 | 0;
  $29 = HEAPF64[$50 >> 3];
  $51 = $1 + 112 | 0;
  $30 = HEAPF64[$51 >> 3];
  $19 = HEAPF64[$2 + 112 >> 3];
  $52 = $3 + 112 | 0;
  $31 = HEAPF64[$52 >> 3];
  $7 = HEAPF64[$4 + 112 >> 3];
  $53 = HEAPF64[$3 + 64 >> 3];
  $54 = HEAPF64[$3 + 32 >> 3];
  $55 = HEAPF64[$3 + 16 >> 3];
  $56 = HEAPF64[$3 + 8 >> 3];
  $57 = HEAPF64[$3 >> 3];
  $32 = HEAPF64[$1 >> 3];
  $33 = HEAPF64[$1 + 32 >> 3];
  $34 = HEAPF64[$1 + 64 >> 3];
  $35 = HEAPF64[$1 + 8 >> 3];
  $36 = HEAPF64[$1 + 16 >> 3];
  $37 = HEAPF64[$1 + 96 >> 3];
  $10 = HEAPF64[$2 + 96 >> 3];
  $38 = HEAPF64[$3 + 96 >> 3];
  $9 = HEAPF64[$4 + 96 >> 3];
  $16 = HEAP32[$0 + 8 >> 2];
  HEAP32[$6 + 120 >> 2] = 0;
  HEAP32[$6 + 124 >> 2] = 0;
  $21 = $10 - $37 - ($9 - $38);
  $10 = -$21;
  $17 = $14 - $27 - ($11 - $28);
  $18 = $19 - $30 - ($7 - $31);
  HEAPF64[$6 + 112 >> 3] = $36 * $10 - $26 * $17 - $29 * $18;
  HEAPF64[$6 + 104 >> 3] = $35 * $10 - $24 * $17 - $25 * $18;
  HEAPF64[$6 + 96 >> 3] = $32 * $10 - $33 * $17 - $34 * $18;
  FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 64 >> 2]]($6 + 160 | 0, $16, $6 + 96 | 0);
  HEAP32[$6 + 152 >> 2] = 0;
  HEAP32[$6 + 156 >> 2] = 0;
  $10 = HEAPF64[$6 + 176 >> 3];
  $14 = HEAPF64[$6 + 160 >> 3];
  $11 = HEAPF64[$6 + 168 >> 3];
  $19 = $10 * HEAPF64[$50 >> 3] + ($14 * HEAPF64[$1 + 64 >> 3] + $11 * HEAPF64[$46 >> 3]) + HEAPF64[$51 >> 3];
  HEAPF64[$6 + 144 >> 3] = $19;
  $9 = $10 * HEAPF64[$1 + 16 >> 3] + ($14 * HEAPF64[$1 >> 3] + $11 * HEAPF64[$1 + 8 >> 3]) + HEAPF64[$1 + 96 >> 3];
  HEAPF64[$6 + 128 >> 3] = $9;
  $7 = $10 * HEAPF64[$47 >> 3] + ($14 * HEAPF64[$1 + 32 >> 3] + $11 * HEAPF64[$45 >> 3]) + HEAPF64[$48 >> 3];
  HEAPF64[$6 + 136 >> 3] = $7;
  $16 = HEAP32[$0 + 12 >> 2];
  HEAP32[$6 + 56 >> 2] = 0;
  HEAP32[$6 + 60 >> 2] = 0;
  HEAPF64[$6 + 48 >> 3] = HEAPF64[$13 >> 3] * $18 + (HEAPF64[$3 + 16 >> 3] * $21 + $17 * HEAPF64[$22 >> 3]);
  HEAPF64[$6 + 40 >> 3] = HEAPF64[$20 >> 3] * $18 + (HEAPF64[$3 + 8 >> 3] * $21 + $17 * HEAPF64[$23 >> 3]);
  HEAPF64[$6 + 32 >> 3] = HEAPF64[$3 + 64 >> 3] * $18 + (HEAPF64[$3 >> 3] * $21 + $17 * HEAPF64[$3 + 32 >> 3]);
  FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 64 >> 2]]($6 - -64 | 0, $16, $6 + 32 | 0);
  HEAP32[$6 + 120 >> 2] = 0;
  HEAP32[$6 + 124 >> 2] = 0;
  $10 = HEAPF64[$6 + 80 >> 3];
  $14 = HEAPF64[$6 + 64 >> 3];
  $11 = HEAPF64[$6 + 72 >> 3];
  $8 = $10 * HEAPF64[$13 >> 3] + ($14 * HEAPF64[$3 + 64 >> 3] + $11 * HEAPF64[$20 >> 3]) + HEAPF64[$52 >> 3];
  HEAPF64[$6 + 112 >> 3] = $8;
  $12 = $10 * HEAPF64[$3 + 16 >> 3] + ($14 * HEAPF64[$3 >> 3] + $11 * HEAPF64[$3 + 8 >> 3]) + HEAPF64[$3 + 96 >> 3];
  HEAPF64[$6 + 96 >> 3] = $12;
  $10 = $10 * HEAPF64[$22 >> 3] + ($14 * HEAPF64[$3 + 32 >> 3] + $11 * HEAPF64[$23 >> 3]) + HEAPF64[$49 >> 3];
  HEAPF64[$6 + 104 >> 3] = $10;
  HEAP32[$6 + 184 >> 2] = 0;
  HEAP32[$6 + 188 >> 2] = 0;
  $7 = $7 - $10;
  HEAPF64[$6 + 168 >> 3] = $7;
  $9 = $9 - $12;
  HEAPF64[$6 + 160 >> 3] = $9;
  $8 = $19 - $8;
  HEAPF64[$6 + 176 >> 3] = $8;
  $10 = 0.0;
  $14 = 0.0;
  $11 = 0.0;
  $19 = 0.0;
  $12 = 0.0;
  label$1 : {
   label$2 : {
    if (!($8 * $8 + ($9 * $9 + $7 * $7) > .0001)) {
     break label$2
    }
    $13 = -65;
    while (1) {
     $20 = $13 + 1 | 0;
     if ($20 >>> 0 < $13 >>> 0) {
      break label$2
     }
     $13 = HEAP32[$0 + 8 >> 2];
     HEAP32[$6 + 24 >> 2] = 0;
     HEAP32[$6 + 28 >> 2] = 0;
     $7 = -HEAPF64[$6 + 160 >> 3];
     $9 = HEAPF64[$6 + 168 >> 3];
     $8 = HEAPF64[$6 + 176 >> 3];
     HEAPF64[$6 + 16 >> 3] = $36 * $7 - $26 * $9 - $29 * $8;
     HEAPF64[$6 + 8 >> 3] = $35 * $7 - $24 * $9 - $25 * $8;
     HEAPF64[$6 >> 3] = $32 * $7 - $33 * $9 - $34 * $8;
     $16 = $6 + 32 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 64 >> 2]]($16, $13, $6);
     HEAP32[$6 + 152 >> 2] = 0;
     HEAP32[$6 + 156 >> 2] = 0;
     $7 = HEAPF64[$6 + 48 >> 3];
     $9 = HEAPF64[$6 + 32 >> 3];
     $8 = HEAPF64[$6 + 40 >> 3];
     HEAPF64[$6 + 144 >> 3] = $30 + ($7 * $29 + ($9 * $34 + $25 * $8));
     HEAPF64[$6 + 136 >> 3] = $27 + ($7 * $26 + ($9 * $33 + $24 * $8));
     HEAPF64[$6 + 128 >> 3] = $37 + ($7 * $36 + ($9 * $32 + $35 * $8));
     $13 = HEAP32[$0 + 12 >> 2];
     HEAP32[$6 + 24 >> 2] = 0;
     HEAP32[$6 + 28 >> 2] = 0;
     $7 = HEAPF64[$6 + 176 >> 3];
     $9 = HEAPF64[$6 + 160 >> 3];
     $8 = HEAPF64[$6 + 168 >> 3];
     HEAPF64[$6 + 16 >> 3] = $41 * $7 + ($55 * $9 + $43 * $8);
     HEAPF64[$6 + 8 >> 3] = $42 * $7 + ($56 * $9 + $44 * $8);
     HEAPF64[$6 >> 3] = $53 * $7 + ($57 * $9 + $54 * $8);
     FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 64 >> 2]]($16, $13, $6);
     HEAP32[$6 + 120 >> 2] = 0;
     HEAP32[$6 + 124 >> 2] = 0;
     HEAP32[$6 + 88 >> 2] = 0;
     HEAP32[$6 + 92 >> 2] = 0;
     $8 = HEAPF64[$6 + 48 >> 3];
     $15 = HEAPF64[$6 + 32 >> 3];
     $39 = HEAPF64[$6 + 40 >> 3];
     $7 = $28 + ($8 * $43 + ($15 * $54 + $44 * $39));
     HEAPF64[$6 + 104 >> 3] = $7;
     $40 = HEAPF64[$6 + 136 >> 3] - $7;
     HEAPF64[$6 + 72 >> 3] = $40;
     $7 = HEAPF64[$6 + 168 >> 3];
     $9 = $38 + ($8 * $55 + ($15 * $57 + $56 * $39));
     HEAPF64[$6 + 96 >> 3] = $9;
     $58 = HEAPF64[$6 + 128 >> 3] - $9;
     HEAPF64[$6 + 64 >> 3] = $58;
     $9 = HEAPF64[$6 + 160 >> 3];
     $8 = $31 + ($8 * $41 + ($15 * $53 + $42 * $39));
     HEAPF64[$6 + 112 >> 3] = $8;
     $15 = HEAPF64[$6 + 144 >> 3] - $8;
     HEAPF64[$6 + 80 >> 3] = $15;
     $13 = 0;
     if ($12 > 1.0) {
      break label$1
     }
     $8 = HEAPF64[$6 + 176 >> 3];
     $15 = $8 * $15 + ($9 * $58 + $40 * $7);
     if ($15 > 0.0) {
      $10 = $8 * $18 + ($9 * $21 + $17 * $7);
      if ($10 >= -4.930380657631324e-32) {
       break label$1
      }
      HEAP32[$6 + 88 >> 2] = 0;
      HEAP32[$6 + 92 >> 2] = 0;
      HEAPF64[$6 + 72 >> 3] = $40;
      $12 = $12 - $15 / $10;
      $10 = 1.0 - $12;
      $31 = $10 * HEAPF64[$3 + 112 >> 3] + $12 * HEAPF64[$4 + 112 >> 3];
      $28 = $10 * HEAPF64[$3 + 104 >> 3] + $12 * HEAPF64[$4 + 104 >> 3];
      $38 = $10 * HEAPF64[$3 + 96 >> 3] + $12 * HEAPF64[$4 + 96 >> 3];
      $30 = $10 * HEAPF64[$1 + 112 >> 3] + $12 * HEAPF64[$2 + 112 >> 3];
      $27 = $10 * HEAPF64[$1 + 104 >> 3] + $12 * HEAPF64[$2 + 104 >> 3];
      $37 = $10 * HEAPF64[$1 + 96 >> 3] + $12 * HEAPF64[$2 + 96 >> 3];
      $19 = HEAPF64[$6 + 184 >> 3];
      $14 = $7;
      $11 = $8;
      $10 = $9;
     }
     if (!btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29(HEAP32[$0 + 4 >> 2], $6 - -64 | 0)) {
      btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29(HEAP32[$0 + 4 >> 2], $6 - -64 | 0, $6 + 128 | 0, $6 + 96 | 0)
     }
     if (!btVoronoiSimplexSolver__closest_28btVector3__29(HEAP32[$0 + 4 >> 2], $6 + 160 | 0)) {
      break label$2
     }
     $13 = $20;
     $7 = HEAPF64[$6 + 176 >> 3];
     $8 = $7 * $7;
     $7 = HEAPF64[$6 + 160 >> 3];
     $9 = $7 * $7;
     $7 = HEAPF64[$6 + 168 >> 3];
     if ($8 + ($9 + $7 * $7) > .0001) {
      continue
     }
     break;
    };
   }
   HEAPF64[$5 + 328 >> 3] = $12;
   $12 = 0.0;
   $9 = 0.0;
   $7 = 0.0;
   $8 = $11 * $11 + ($10 * $10 + $14 * $14);
   if ($8 >= 4.930380657631324e-32) {
    $7 = $11;
    $11 = 1.0 / Math_sqrt($8);
    $9 = $7 * $11;
    $12 = $14 * $11;
    $59 = $10 * $11;
    $7 = $19;
   }
   HEAPF64[$5 + 264 >> 3] = $59;
   HEAPF64[$5 + 288 >> 3] = $7;
   HEAPF64[$5 + 280 >> 3] = $9;
   HEAPF64[$5 + 272 >> 3] = $12;
   $13 = 0;
   if (-HEAPF64[$5 + 344 >> 3] <= $9 * $18 + ($59 * $21 + $17 * $12)) {
    break label$1
   }
   btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29(HEAP32[$0 + 4 >> 2], $6 + 32 | 0, $6);
   $1 = $6 + 24 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $0 = $5 + 320 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   $1 = $6 + 16 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $0 = $5 + 312 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   $1 = $6 + 8 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $0 = $5 + 304 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   $0 = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 296 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 300 >> 2] = $0;
   $13 = 1;
  }
  __stack_pointer = $6 + 192 | 0;
  return $13 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 >> 2] = 16256;
  HEAP32[$0 + 8 >> 2] = 16284;
  HEAP32[$0 + 96 >> 2] = 0;
  $5 = $4 ? $2 : $3;
  HEAP32[$0 + 84 >> 2] = $5;
  $2 = $4 ? $3 : $2;
  HEAP32[$0 + 80 >> 2] = $2;
  $3 = $0 + 92 | 0;
  $1 = HEAP32[$1 >> 2];
  HEAP32[$3 >> 2] = $1;
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$5 + 8 >> 2]) | 0;
  HEAP32[$0 + 116 >> 2] = $1;
  $2 = HEAP32[$3 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
  HEAP8[$0 + 120 | 0] = $4;
 }
 
 function btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 + 8 >> 2] = 16284;
  HEAP32[$0 >> 2] = 16256;
  $1 = $0 + 92 | 0;
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 116 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[$3 >> 2]);
  $1 = HEAP32[$1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$3 >> 2]);
  return $0 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 + 8 >> 2] = 16284;
  HEAP32[$0 >> 2] = 16256;
  $1 = $0 + 92 | 0;
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 116 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[$3 >> 2]);
  $1 = HEAP32[$1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$3 >> 2]);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btConvexConcaveCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = HEAP32[$0 + 116 >> 2];
  if ($2) {
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($4 | 0) <= ($3 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    label$5 : {
     if (($3 | 0) <= 0) {
      break label$5
     }
     $5 = $3 & 3;
     if ($3 - 1 >>> 0 >= 3) {
      $9 = $3 & -4;
      $2 = 0;
      while (1) {
       $6 = $2 + $7 | 0;
       HEAP32[$6 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 8 >> 2];
       HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 12 >> 2];
       $2 = $2 + 16 | 0;
       $8 = $8 + 4 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$5
     }
     $2 = $8 << 2;
     while (1) {
      HEAP32[$2 + $7 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = $7;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 116 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function btConvexTriangleCallback___btConvexTriangleCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16284;
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$0 + 108 >> 2]);
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$0 + 108 >> 2]);
  return $0 | 0;
 }
 
 function btConvexTriangleCallback___btConvexTriangleCallback_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16284;
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$0 + 108 >> 2]);
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$0 + 108 >> 2]);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btConvexTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0;
  $6 = __stack_pointer - 240 | 0;
  __stack_pointer = $6;
  CProfileSample__CProfileSample_28char_20const__29($6 + 232 | 0, 3553);
  $9 = HEAPF64[$1 >> 3];
  $10 = HEAPF64[$1 + 32 >> 3];
  $12 = $9 < $10 ? $9 : $10;
  $11 = HEAPF64[$1 + 64 >> 3];
  label$1 : {
   if (HEAPF64[$0 + 40 >> 3] < ($11 > $12 ? $12 : $11)) {
    break label$1
   }
   $7 = !($9 > $10) << 5;
   if (HEAPF64[($11 < HEAPF64[$1 + $7 >> 3] ? $7 : 64) + $1 >> 3] < HEAPF64[$0 + 8 >> 3]) {
    break label$1
   }
   $9 = HEAPF64[$1 + 16 >> 3];
   $7 = $1 + 48 | 0;
   $10 = HEAPF64[$7 >> 3];
   $12 = $9 < $10 ? $9 : $10;
   $4 = $1 + 80 | 0;
   $11 = HEAPF64[$4 >> 3];
   if (HEAPF64[$0 + 56 >> 3] < ($11 > $12 ? $12 : $11)) {
    break label$1
   }
   $7 = $9 > $10 ? $1 + 16 | 0 : $7;
   if (HEAPF64[($11 < HEAPF64[$7 >> 3] ? $7 : $4) >> 3] < HEAPF64[$0 + 24 >> 3]) {
    break label$1
   }
   $9 = HEAPF64[$1 + 8 >> 3];
   $7 = $1 + 40 | 0;
   $10 = HEAPF64[$7 >> 3];
   $12 = $9 < $10 ? $9 : $10;
   $4 = $1 + 72 | 0;
   $11 = HEAPF64[$4 >> 3];
   if (HEAPF64[$0 + 48 >> 3] < ($11 > $12 ? $12 : $11)) {
    break label$1
   }
   $7 = $9 > $10 ? $1 + 8 | 0 : $7;
   if (HEAP32[HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2] + 4 >> 2] > 19 | HEAPF64[($11 < HEAPF64[$7 >> 3] ? $7 : $4) >> 3] < HEAPF64[$0 + 16 >> 3]) {
    break label$1
   }
   $7 = HEAP32[$0 + 84 >> 2];
   $13 = $6 + 32 | 0;
   $14 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($13);
   $5 = $1 + 8 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 144 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 16 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 152 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 24 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 160 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = HEAP32[$1 + 36 >> 2];
   $4 = $6 + 168 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $5 = $1 + 40 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 176 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 48 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 184 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 56 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 192 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 88 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 224 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 80 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 216 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 72 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $4 = $6 + 208 | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = HEAP32[$1 + 68 >> 2];
   $4 = $6 + 200 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   HEAP32[$6 + 36 >> 2] = 1;
   HEAP32[$6 + 32 >> 2] = 16392;
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$6 + 136 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 140 >> 2] = $4;
   HEAPF64[$6 + 112 >> 3] = HEAPF64[$0 + 96 >> 3];
   HEAP32[$6 + 28 >> 2] = $3;
   HEAP32[$6 + 24 >> 2] = $2;
   $1 = HEAP32[$0 + 76 >> 2];
   HEAP32[$6 + 8 >> 2] = $1;
   $4 = HEAP32[$1 + 8 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$6 + 16 >> 2] = $4;
   $9 = HEAPF64[HEAP32[$0 + 80 >> 2] + 32 >> 3];
   HEAP32[$6 + 12 >> 2] = $13;
   $1 = HEAP32[$0 + 72 >> 2];
   label$2 : {
    if ($9 > 0.0) {
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7, $1, $6 + 8 | 0, 0, 2) | 0;
     break label$2;
    }
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7, $1, $6 + 8 | 0, HEAP32[$0 + 108 >> 2], 1) | 0;
   }
   $4 = HEAP32[$0 + 80 >> 2];
   $5 = HEAP32[$4 + 8 >> 2];
   label$4 : {
    if (HEAP32[$5 + 8 >> 2] == HEAP32[HEAP32[$0 + 76 >> 2] + 8 >> 2]) {
     HEAP32[$4 + 8 >> 2] = $6 + 8;
     $8 = 2;
     break label$4;
    }
    $5 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 12 >> 2] = $6 + 8;
    $8 = 3;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + ($8 << 2) >> 2]]($4, $2, $3);
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$0 + 72 >> 2], $6 + 8 | 0, HEAP32[$0 + 88 >> 2], HEAP32[$0 + 80 >> 2]);
   $2 = HEAP32[$0 + 80 >> 2];
   label$6 : {
    if (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 76 >> 2] + 8 >> 2]) {
     HEAP32[$2 + 8 >> 2] = $5;
     break label$6;
    }
    HEAP32[$2 + 12 >> 2] = $5;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 60 >> 2]]($7, $1);
   btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($14);
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $6 + 240 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0;
  $19 = __stack_pointer - 16 | 0;
  __stack_pointer = $19;
  CProfileSample__CProfileSample_28char_20const__29($19 + 8 | 0, 3421);
  $5 = HEAPU8[$0 + 120 | 0];
  $18 = $5 ? $1 : $2;
  $7 = HEAP32[$18 + 4 >> 2];
  label$1 : {
   if (HEAP32[$7 + 4 >> 2] - 21 >>> 0 > 8) {
    break label$1
   }
   $8 = $5 ? $2 : $1;
   if (HEAP32[HEAP32[$8 + 4 >> 2] + 4 >> 2] > 19) {
    break label$1
   }
   $34 = +FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 48 >> 2]]($7);
   $35 = $0 + 116 | 0;
   HEAP32[$4 + 4 >> 2] = HEAP32[$35 >> 2];
   $1 = __stack_pointer - 128 | 0;
   __stack_pointer = $1;
   $2 = $0 + 8 | 0;
   HEAPF64[$2 + 96 >> 3] = $34;
   HEAP32[$2 + 88 >> 2] = $3;
   HEAP32[$2 + 76 >> 2] = $18;
   HEAP32[$2 + 72 >> 2] = $8;
   HEAP32[$2 + 80 >> 2] = $4;
   $3 = HEAP32[$18 + 12 >> 2];
   $20 = HEAPF64[$3 + 104 >> 3];
   $21 = HEAPF64[$3 + 112 >> 3];
   $5 = HEAP32[$8 + 12 >> 2];
   $22 = HEAPF64[$5 + 104 >> 3];
   $23 = HEAPF64[$5 + 112 >> 3];
   $6 = HEAPF64[$3 + 40 >> 3];
   $9 = HEAPF64[$3 + 72 >> 3];
   $24 = HEAPF64[$5 + 40 >> 3];
   $25 = HEAPF64[$5 + 72 >> 3];
   $26 = HEAPF64[$5 + 48 >> 3];
   $10 = HEAPF64[$3 + 48 >> 3];
   $27 = HEAPF64[$5 + 80 >> 3];
   $11 = HEAPF64[$3 + 80 >> 3];
   $28 = HEAPF64[$5 + 64 >> 3];
   $12 = HEAPF64[$3 + 64 >> 3];
   $29 = HEAPF64[$5 >> 3];
   $13 = HEAPF64[$3 >> 3];
   $30 = HEAPF64[$5 + 32 >> 3];
   $14 = HEAPF64[$3 + 32 >> 3];
   $15 = HEAPF64[$3 + 96 >> 3];
   $31 = HEAPF64[$5 + 96 >> 3];
   $16 = HEAPF64[$3 + 8 >> 3];
   $32 = HEAPF64[$5 + 8 >> 3];
   $33 = HEAPF64[$5 + 16 >> 3];
   $17 = HEAPF64[$3 + 16 >> 3];
   $3 = $1 + 120 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 88 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 56 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAPF64[$1 + 80 >> 3] = $27 * $11 + ($33 * $17 + $10 * $26);
   HEAPF64[$1 + 72 >> 3] = $25 * $11 + ($32 * $17 + $10 * $24);
   HEAPF64[$1 + 48 >> 3] = $27 * $9 + ($33 * $16 + $6 * $26);
   HEAPF64[$1 + 40 >> 3] = $25 * $9 + ($32 * $16 + $6 * $24);
   $15 = -$15;
   HEAPF64[$1 + 112 >> 3] = $17 * $15 - $10 * $20 - $11 * $21 + ($23 * $11 + ($31 * $17 + $10 * $22));
   HEAPF64[$1 + 104 >> 3] = $16 * $15 - $6 * $20 - $9 * $21 + ($23 * $9 + ($31 * $16 + $6 * $22));
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 28 >> 2] = 0;
   HEAPF64[$1 >> 3] = $28 * $12 + ($29 * $13 + $14 * $30);
   HEAPF64[$1 + 64 >> 3] = $28 * $11 + ($29 * $17 + $10 * $30);
   HEAPF64[$1 + 32 >> 3] = $28 * $9 + ($29 * $16 + $6 * $30);
   HEAPF64[$1 + 16 >> 3] = $27 * $12 + ($33 * $13 + $14 * $26);
   HEAPF64[$1 + 8 >> 3] = $25 * $12 + ($32 * $13 + $14 * $24);
   HEAPF64[$1 + 96 >> 3] = $13 * $15 - $14 * $20 - $12 * $21 + ($23 * $12 + ($31 * $13 + $14 * $22));
   $3 = HEAP32[$8 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $2 + 8 | 0, $2 + 40 | 0);
   $6 = HEAPF64[$4 + 32 >> 3] + $34;
   HEAPF64[$2 + 40 >> 3] = $6 + HEAPF64[$2 + 40 >> 3];
   $3 = $2 + 48 | 0;
   HEAPF64[$3 >> 3] = $6 + HEAPF64[$3 >> 3];
   $3 = $2 + 56 | 0;
   HEAPF64[$3 >> 3] = $6 + HEAPF64[$3 >> 3];
   HEAPF64[$2 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] - $6;
   $3 = $2 + 16 | 0;
   HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] - $6;
   $3 = $2 + 24 | 0;
   HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] - $6;
   __stack_pointer = $1 + 128 | 0;
   $1 = HEAP32[$35 >> 2];
   HEAP32[$1 + 1452 >> 2] = HEAP32[$18 + 8 >> 2];
   HEAP32[$1 + 1448 >> 2] = HEAP32[$8 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 64 >> 2]]($7, $2, $0 + 16 | 0, $0 + 48 | 0);
   $1 = HEAP32[$4 + 4 >> 2];
   if (HEAP32[$1 + 1456 >> 2]) {
    $3 = HEAP32[$1 + 1448 >> 2];
    $5 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
    $2 = ($3 | 0) == ($5 | 0);
    $7 = $1;
    $1 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($7, ($2 ? $3 : $1) + 8 | 0, ($2 ? $1 : $5) + 8 | 0);
   }
   $0 = $0 + 80 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $19 + 16 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
  $3 = __stack_pointer - 480 | 0;
  __stack_pointer = $3;
  $8 = 1.0;
  $4 = HEAPU8[$0 + 120 | 0];
  $6 = $4 ? $2 : $1;
  $24 = HEAPF64[$6 + 120 >> 3];
  $5 = HEAPF64[$6 + 248 >> 3] - $24;
  $7 = $5 * $5;
  $25 = HEAPF64[$6 + 104 >> 3];
  $5 = HEAPF64[$6 + 232 >> 3] - $25;
  $9 = $5 * $5;
  $26 = HEAPF64[$6 + 112 >> 3];
  $5 = HEAPF64[$6 + 240 >> 3] - $26;
  $7 = $7 + ($9 + $5 * $5);
  $5 = HEAPF64[$6 + 504 >> 3];
  label$1 : {
   if ($7 < $5 * $5) {
    break label$1
   }
   $0 = $4 ? $1 : $2;
   $1 = HEAP32[$0 + 380 >> 2];
   if (HEAP32[$1 + 4 >> 2] - 21 >>> 0 > 8) {
    break label$1
   }
   $10 = HEAPF64[$0 + 56 >> 3];
   $7 = HEAPF64[$6 + 184 >> 3];
   $44 = $10 * $7;
   $5 = HEAPF64[$6 + 152 >> 3];
   $11 = HEAPF64[$0 + 24 >> 3];
   $45 = $5 * $11;
   $27 = HEAPF64[$6 + 216 >> 3];
   $28 = HEAPF64[$6 + 176 >> 3];
   $46 = $10 * $28;
   $29 = HEAPF64[$6 + 144 >> 3];
   $47 = $29 * $11;
   $30 = HEAPF64[$6 + 208 >> 3];
   $31 = HEAPF64[$6 + 200 >> 3];
   $32 = HEAPF64[$6 + 168 >> 3];
   $48 = $10 * $32;
   $33 = HEAPF64[$6 + 136 >> 3];
   $49 = $33 * $11;
   $12 = HEAPF64[$0 + 48 >> 3];
   $50 = $12 * $7;
   $13 = HEAPF64[$0 + 16 >> 3];
   $51 = $5 * $13;
   $14 = HEAPF64[$0 + 72 >> 3];
   $15 = HEAPF64[$0 + 40 >> 3];
   $52 = $15 * $7;
   $16 = HEAPF64[$0 + 8 >> 3];
   $53 = $5 * $16;
   $34 = HEAPF64[$6 + 56 >> 3];
   $54 = $10 * $34;
   $35 = HEAPF64[$6 + 24 >> 3];
   $55 = $35 * $11;
   $36 = HEAPF64[$6 + 88 >> 3];
   $37 = HEAPF64[$6 + 48 >> 3];
   $56 = $10 * $37;
   $38 = HEAPF64[$6 + 16 >> 3];
   $57 = $38 * $11;
   $39 = HEAPF64[$6 + 80 >> 3];
   $40 = HEAPF64[$6 + 72 >> 3];
   $41 = HEAPF64[$6 + 40 >> 3];
   $58 = $10 * $41;
   $42 = HEAPF64[$6 + 8 >> 3];
   $59 = $42 * $11;
   $17 = -HEAPF64[$0 + 104 >> 3];
   $7 = HEAPF64[$0 + 112 >> 3];
   $18 = HEAPF64[$0 + 88 >> 3];
   $5 = HEAPF64[$0 + 120 >> 3];
   $43 = $11 * $17 - $10 * $7 - $18 * $5;
   $21 = HEAPF64[$6 + 248 >> 3];
   $8 = HEAPF64[$6 + 232 >> 3];
   $9 = HEAPF64[$6 + 240 >> 3];
   $22 = $21 * $18 + ($8 * $11 + $10 * $9);
   $19 = HEAPF64[$0 + 80 >> 3];
   $20 = $13 * $17 - $12 * $7 - $19 * $5;
   $23 = $20 + ($21 * $19 + ($8 * $13 + $12 * $9));
   HEAP32[$3 + 472 >> 2] = 0;
   HEAP32[$3 + 476 >> 2] = 0;
   $5 = $16 * $17 - $15 * $7 - $14 * $5;
   $17 = $5 + ($24 * $14 + ($25 * $16 + $15 * $26));
   $7 = $17;
   $9 = $5 + ($21 * $14 + ($8 * $16 + $15 * $9));
   if ($17 > $9) {
    HEAPF64[$3 + 448 >> 3] = $9;
    $7 = $9;
   }
   $21 = $20 + ($24 * $19 + ($25 * $13 + $12 * $26));
   $8 = $21;
   if ($23 < $8) {
    HEAPF64[$3 + 456 >> 3] = $23;
    $8 = $23;
   }
   $20 = $43 + $22;
   $22 = $43 + ($24 * $18 + ($25 * $11 + $10 * $26));
   $5 = $22;
   if ($20 < $5) {
    HEAPF64[$3 + 464 >> 3] = $20;
    $5 = $20;
   }
   HEAP32[$3 + 440 >> 2] = 0;
   HEAP32[$3 + 444 >> 2] = 0;
   $10 = $5;
   $5 = HEAPF64[$6 + 496 >> 3];
   HEAPF64[$3 + 464 >> 3] = $10 - $5;
   HEAPF64[$3 + 456 >> 3] = $8 - $5;
   HEAPF64[$3 + 448 >> 3] = $7 - $5;
   HEAPF64[$3 + 432 >> 3] = $5 + ($20 > $22 ? $20 : $22);
   HEAPF64[$3 + 424 >> 3] = $5 + ($21 < $23 ? $23 : $21);
   HEAPF64[$3 + 416 >> 3] = $5 + ($9 > $17 ? $9 : $17);
   $0 = $3 + 264 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 + 256 >> 3] = $20;
   HEAPF64[$3 + 248 >> 3] = $23;
   HEAPF64[$3 + 240 >> 3] = $9;
   $0 = $3 + 232 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 + 224 >> 3] = $27 * $18 + ($45 + $44);
   HEAPF64[$3 + 216 >> 3] = $30 * $18 + ($47 + $46);
   HEAPF64[$3 + 208 >> 3] = $31 * $18 + ($49 + $48);
   $0 = $3 + 200 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 + 192 >> 3] = $27 * $19 + ($51 + $50);
   HEAPF64[$3 + 184 >> 3] = $30 * $19 + ($29 * $13 + $12 * $28);
   HEAPF64[$3 + 176 >> 3] = $31 * $19 + ($33 * $13 + $12 * $32);
   $0 = $3 + 168 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 + 160 >> 3] = $27 * $14 + ($53 + $52);
   HEAPF64[$3 + 152 >> 3] = $30 * $14 + ($29 * $16 + $15 * $28);
   $0 = $3 + 136 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 + 128 >> 3] = $22;
   HEAPF64[$3 + 120 >> 3] = $21;
   HEAPF64[$3 + 112 >> 3] = $17;
   $0 = $3 + 104 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 + 96 >> 3] = $36 * $18 + ($55 + $54);
   HEAPF64[$3 + 88 >> 3] = $39 * $18 + ($57 + $56);
   HEAPF64[$3 + 80 >> 3] = $40 * $18 + ($59 + $58);
   $0 = $3 + 72 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 - -64 >> 3] = $36 * $19 + ($35 * $13 + $12 * $34);
   HEAPF64[$3 + 56 >> 3] = $39 * $19 + ($38 * $13 + $12 * $37);
   HEAPF64[$3 + 48 >> 3] = $40 * $19 + ($42 * $13 + $12 * $41);
   $0 = $3 + 40 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAPF64[$3 + 32 >> 3] = $36 * $14 + ($35 * $16 + $15 * $34);
   HEAPF64[$3 + 24 >> 3] = $39 * $14 + ($38 * $16 + $15 * $37);
   HEAPF64[$3 + 144 >> 3] = $31 * $14 + ($33 * $16 + $15 * $32);
   HEAPF64[$3 + 16 >> 3] = $40 * $14 + ($42 * $16 + $15 * $41);
   HEAP32[$3 + 8 >> 2] = 16528;
   HEAPF64[$3 + 400 >> 3] = $5;
   HEAPF64[$3 + 408 >> 3] = HEAPF64[$6 + 488 >> 3];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 64 >> 2]]($1, $3 + 8 | 0, $3 + 448 | 0, $3 + 416 | 0);
   $8 = HEAPF64[$3 + 408 >> 3];
   if ($8 < HEAPF64[$6 + 488 >> 3]) {
    HEAPF64[$6 + 488 >> 3] = $8;
    break label$1;
   }
   $8 = 1.0;
  }
  __stack_pointer = $3 + 480 | 0;
  return +$8;
 }
 
 function btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0;
  $2 = __stack_pointer - 1520 | 0;
  __stack_pointer = $2;
  CProfileSample__CProfileSample_28char_20const__29($2 + 1512 | 0, 3579);
  $3 = $2 + 1384 | 0;
  $4 = $3 + 16 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 24 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 32 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 48 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 40 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 1072693248;
  $4 = $3 + 56 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 - -64 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 72 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 88 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 80 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 1072693248;
  $4 = $2 + 1480 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $2 + 1488 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 112 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 120 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$2 + 1392 >> 2] = 0;
  HEAP32[$2 + 1396 >> 2] = 0;
  HEAP32[$2 + 1384 >> 2] = 0;
  HEAP32[$2 + 1388 >> 2] = 1072693248;
  HEAP32[$2 + 1376 >> 2] = 0;
  HEAP32[$2 + 1380 >> 2] = 0;
  HEAP32[$2 + 1368 >> 2] = 0;
  HEAP32[$2 + 1032 >> 2] = 16128;
  HEAPF64[$2 + 1360 >> 3] = HEAPF64[$0 + 400 >> 3];
  $9 = HEAPF64[$0 + 392 >> 3];
  $4 = $2 + 936 | 0;
  btConvexInternalShape__btConvexInternalShape_28_29($4);
  $7 = $4 + 40 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 32 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 1072693248;
  $7 = $4 + 24 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 1072693248;
  $7 = $4 + 56 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 - -64 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 72 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$2 + 952 >> 2] = 0;
  HEAP32[$2 + 956 >> 2] = 1072693248;
  HEAPF64[$2 + 984 >> 3] = $9;
  HEAP32[$2 + 1024 >> 2] = 0;
  HEAP32[$2 + 1028 >> 2] = 0;
  HEAPF64[$2 + 1016 >> 3] = $9;
  HEAP32[$2 + 940 >> 2] = 8;
  HEAP32[$2 + 936 >> 2] = 8920;
  $7 = $2 + 736 | 0;
  $10 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($7);
  $5 = $1 + 8 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $7 + 112 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $1 + 16 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $7 + 120 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $1 + 24 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $2 + 864 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = HEAP32[$1 + 36 >> 2];
  $8 = $7 + 136 | 0;
  HEAP32[$8 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$8 + 4 >> 2] = $5;
  $5 = $1 + 40 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $2 + 880 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $1 + 48 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $2 + 888 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $1 + 56 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $2 + 896 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $1 + 88 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $2 + 928 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $1 + 80 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $2 + 920 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $1 + 72 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $2 + 912 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = HEAP32[$1 + 68 >> 2];
  $8 = $2 + 904 | 0;
  HEAP32[$8 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$8 + 4 >> 2] = $5;
  HEAP32[$2 + 740 >> 2] = 1;
  HEAP32[$2 + 736 >> 2] = 16392;
  $5 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 840 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 844 >> 2] = $5;
  HEAP8[$2 + 680 | 0] = 0;
  HEAP32[$2 + 632 >> 2] = -2147483648;
  HEAP32[$2 + 636 >> 2] = 1030854553;
  label$1 : {
   if (!btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29(btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($2, $4, $7, $2 + 16 | 0), $0 + 8 | 0, $0 + 136 | 0, $3, $3, $2 + 1032 | 0)) {
    break label$1
   }
   $9 = HEAPF64[$2 + 1360 >> 3];
   if (!($9 < HEAPF64[$0 + 400 >> 3])) {
    break label$1
   }
   HEAPF64[$0 + 400 >> 3] = $9;
  }
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($10);
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $2 + 1520 | 0;
 }
 
 function btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP8[$0 + 24 | 0] = 1;
  HEAP32[$0 >> 2] = 16720;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $5 = $0 + 12 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $5 = $0 + 32 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 68 | 0] = $4;
  $5 = $0 + 52 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP8[$0 + 76 | 0] = 0;
  HEAP32[$0 + 72 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[HEAP32[($4 ? $3 : $2) + 4 >> 2] + 108 >> 2];
  btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $2, $3);
 }
 
 function btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $14 = HEAPU8[$0 + 68 | 0];
  $9 = $14 ? $2 : $1;
  $11 = HEAP32[$9 + 4 >> 2];
  $6 = HEAP32[$11 + 20 >> 2];
  $4 = HEAP32[$0 + 52 >> 2];
  label$1 : {
   if (($6 | 0) <= ($4 | 0)) {
    break label$1
   }
   if (($6 | 0) > HEAP32[$0 + 56 >> 2]) {
    label$3 : {
     if (!$6) {
      $3 = $4;
      break label$3;
     }
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
     $3 = HEAP32[$0 + 52 >> 2];
    }
    label$5 : {
     if (($3 | 0) <= 0) {
      break label$5
     }
     $10 = $3 & 3;
     if ($3 - 1 >>> 0 >= 3) {
      $8 = $3 & -4;
      $3 = 0;
      while (1) {
       $5 = $3 + $12 | 0;
       HEAP32[$5 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $3 >> 2];
       HEAP32[$5 + 4 >> 2] = HEAP32[(HEAP32[$0 + 60 >> 2] + $3 | 0) + 4 >> 2];
       HEAP32[$5 + 8 >> 2] = HEAP32[(HEAP32[$0 + 60 >> 2] + $3 | 0) + 8 >> 2];
       HEAP32[$5 + 12 >> 2] = HEAP32[(HEAP32[$0 + 60 >> 2] + $3 | 0) + 12 >> 2];
       $3 = $3 + 16 | 0;
       $13 = $13 + 4 | 0;
       if (($8 | 0) != ($13 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$10) {
      break label$5
     }
     $3 = $13 << 2;
     while (1) {
      HEAP32[$3 + $12 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $3 >> 2];
      $3 = $3 + 4 | 0;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$0 + 60 >> 2];
    if (!(!$3 | !HEAPU8[$0 - -64 | 0])) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP32[$0 + 60 >> 2] = $12;
    HEAP8[$0 + 64 | 0] = 1;
    HEAP32[$0 + 56 >> 2] = $6;
   }
   $8 = ($4 ^ -1) + $6 | 0;
   $5 = $6 - $4 & 3;
   if ($5) {
    $3 = $4 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 60 >> 2] + $3 >> 2] = 0;
     $3 = $3 + 4 | 0;
     $4 = $4 + 1 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   if ($8 >>> 0 < 3) {
    break label$1
   }
   $3 = $4 << 2;
   $4 = $6 - $4 | 0;
   while (1) {
    HEAP32[HEAP32[$0 + 60 >> 2] + $3 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 60 >> 2] + $3 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 60 >> 2] + $3 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 60 >> 2] + $3 | 0) + 12 >> 2] = 0;
    $3 = $3 + 16 | 0;
    $4 = $4 - 4 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = $6;
  if (($6 | 0) > 0) {
   $8 = $14 ? $1 : $2;
   $4 = 128;
   $3 = 0;
   $5 = 0;
   while (1) {
    label$15 : {
     if (HEAP32[$11 + 104 >> 2]) {
      HEAP32[HEAP32[$0 + 60 >> 2] + $3 >> 2] = 0;
      break label$15;
     }
     $2 = HEAP32[HEAP32[$11 + 28 >> 2] + $4 >> 2];
     HEAP32[$7 + 28 >> 2] = $5;
     HEAP32[$7 + 24 >> 2] = -1;
     HEAP32[$7 + 8 >> 2] = $9;
     $1 = HEAP32[$9 + 12 >> 2];
     HEAP32[$7 + 16 >> 2] = HEAP32[$9 + 8 >> 2];
     HEAP32[$7 + 20 >> 2] = $1;
     HEAP32[$7 + 12 >> 2] = $2;
     $1 = HEAP32[$0 + 4 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $7 + 8 | 0, $8, HEAP32[$0 + 72 >> 2], 1) | 0;
     HEAP32[HEAP32[$0 + 60 >> 2] + $3 >> 2] = $1;
    }
    $4 = $4 + 152 | 0;
    $3 = $3 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $7 + 32 | 0;
 }
 
 function btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 >> 2] = 16720;
  $3 = HEAP32[$0 + 52 >> 2];
  if (($3 | 0) > 0) {
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 60 >> 2] + $1 >> 2];
    if ($2) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2) | 0;
     $2 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 60 >> 2]]($2, HEAP32[HEAP32[$0 + 60 >> 2] + $1 >> 2]);
    }
    $1 = $1 + 4 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
  $1 = HEAP32[$0 + 60 >> 2];
  if (!(!$1 | !HEAPU8[$0 - -64 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 64 | 0] = 1;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 44 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 20 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 24 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  $1 = $0 + 12 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0));
 }
 
 function btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0;
  $7 = __stack_pointer - 320 | 0;
  __stack_pointer = $7;
  $9 = HEAPU8[$0 + 68 | 0];
  $39 = $9 ? $2 : $1;
  $35 = HEAP32[$39 + 4 >> 2];
  if (HEAP32[$35 + 108 >> 2] != HEAP32[$0 + 80 >> 2]) {
   $8 = HEAP32[$0 + 52 >> 2];
   if (($8 | 0) > 0) {
    while (1) {
     $6 = HEAP32[HEAP32[$0 + 60 >> 2] + $5 >> 2];
     if ($6) {
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] >> 2]]($6) | 0;
      $6 = HEAP32[$0 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, HEAP32[HEAP32[$0 + 60 >> 2] + $5 >> 2]);
     }
     $5 = $5 + 4 | 0;
     $8 = $8 - 1 | 0;
     if ($8) {
      continue
     }
     break;
    }
   }
   btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2);
   HEAP32[$0 + 80 >> 2] = HEAP32[$35 + 108 >> 2];
  }
  $6 = HEAP32[$0 + 52 >> 2];
  label$5 : {
   if (!$6) {
    break label$5
   }
   $11 = HEAP32[$35 + 104 >> 2];
   HEAP32[$7 + 308 >> 2] = $4;
   HEAP32[$7 + 304 >> 2] = $3;
   $36 = $9 ? $1 : $2;
   HEAP32[$7 + 296 >> 2] = $36;
   HEAP32[$7 + 292 >> 2] = $39;
   HEAP32[$7 + 288 >> 2] = 16792;
   HEAP32[$7 + 316 >> 2] = HEAP32[$0 + 72 >> 2];
   HEAP32[$7 + 312 >> 2] = HEAP32[$0 + 60 >> 2];
   HEAP32[$7 + 300 >> 2] = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$0 + 32 >> 2];
   if (($1 | 0) < 0) {
    if (HEAP32[$0 + 36 >> 2] < 0) {
     $2 = HEAP32[$0 + 40 >> 2];
     if (!(!$2 | !HEAPU8[$0 + 44 | 0])) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP8[$0 + 44 | 0] = 1;
     HEAP32[$0 + 36 >> 2] = 0;
     HEAP32[$0 + 40 >> 2] = 0;
    }
    $6 = $1;
    $8 = 0 - $1 & 3;
    if ($8) {
     $5 = $1 << 2;
     while (1) {
      HEAP32[HEAP32[$0 + 40 >> 2] + $5 >> 2] = 0;
      $5 = $5 + 4 | 0;
      $6 = $6 + 1 | 0;
      $8 = $8 - 1 | 0;
      if ($8) {
       continue
      }
      break;
     };
    }
    if ($1 >>> 0 <= 4294967292) {
     $5 = $6 << 2;
     while (1) {
      HEAP32[HEAP32[$0 + 40 >> 2] + $5 >> 2] = 0;
      HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 4 >> 2] = 0;
      HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 8 >> 2] = 0;
      HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 12 >> 2] = 0;
      $5 = $5 + 16 | 0;
      $6 = $6 + 4 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    $6 = HEAP32[$0 + 52 >> 2];
   }
   HEAP32[$0 + 32 >> 2] = 0;
   if (($6 | 0) > 0) {
    $9 = $0 + 28 | 0;
    $2 = 0;
    while (1) {
     $1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($2 << 2) >> 2];
     if ($1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $9);
      $1 = HEAP32[$0 + 32 >> 2];
      if (($1 | 0) > 0) {
       $5 = 0;
       $8 = 0;
       while (1) {
        $3 = HEAP32[HEAP32[$0 + 40 >> 2] + $5 >> 2];
        if (HEAP32[$3 + 1456 >> 2]) {
         HEAP32[$4 + 4 >> 2] = $3;
         $6 = HEAP32[$3 + 1448 >> 2];
         $21 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
         $1 = ($6 | 0) == ($21 | 0);
         $17 = $3;
         $3 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
         btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($17, ($1 ? $6 : $3) + 8 | 0, ($1 ? $3 : $21) + 8 | 0);
         HEAP32[$4 + 4 >> 2] = 0;
         $1 = HEAP32[$0 + 32 >> 2];
        }
        $5 = $5 + 4 | 0;
        $8 = $8 + 1 | 0;
        if (($8 | 0) < ($1 | 0)) {
         continue
        }
        break;
       };
      }
      label$19 : {
       if (($1 | 0) >= 0) {
        break label$19
       }
       if (HEAP32[$0 + 36 >> 2] < 0) {
        $3 = HEAP32[$0 + 40 >> 2];
        if (!(!$3 | !HEAPU8[$0 + 44 | 0])) {
         btAlignedFreeInternal_28void__29($3)
        }
        HEAP8[$0 + 44 | 0] = 1;
        HEAP32[$0 + 36 >> 2] = 0;
        HEAP32[$0 + 40 >> 2] = 0;
       }
       $6 = $1;
       $8 = 0 - $1 & 3;
       if ($8) {
        $5 = $1 << 2;
        while (1) {
         HEAP32[HEAP32[$0 + 40 >> 2] + $5 >> 2] = 0;
         $5 = $5 + 4 | 0;
         $6 = $6 + 1 | 0;
         $8 = $8 - 1 | 0;
         if ($8) {
          continue
         }
         break;
        };
       }
       if ($1 >>> 0 > 4294967292) {
        break label$19
       }
       $5 = $6 << 2;
       while (1) {
        HEAP32[HEAP32[$0 + 40 >> 2] + $5 >> 2] = 0;
        HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 4 >> 2] = 0;
        HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 8 >> 2] = 0;
        HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 12 >> 2] = 0;
        $5 = $5 + 16 | 0;
        $6 = $6 + 4 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 32 >> 2] = 0;
      $6 = HEAP32[$0 + 52 >> 2];
     }
     $2 = $2 + 1 | 0;
     if (($6 | 0) > ($2 | 0)) {
      continue
     }
     break;
    };
   }
   label$25 : {
    if (!$11) {
     if (($6 | 0) <= 0) {
      break label$25
     }
     $5 = 0;
     $4 = 128;
     while (1) {
      btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($7 + 288 | 0, HEAP32[HEAP32[$35 + 28 >> 2] + $4 >> 2], $5);
      $4 = $4 + 152 | 0;
      $5 = $5 + 1 | 0;
      if (($6 | 0) != ($5 | 0)) {
       continue
      }
      break;
     };
     break label$25;
    }
    $1 = HEAP32[$39 + 12 >> 2];
    $22 = HEAPF64[$1 + 104 >> 3];
    $23 = HEAPF64[$1 + 112 >> 3];
    $2 = HEAP32[$36 + 12 >> 2];
    $24 = HEAPF64[$2 + 104 >> 3];
    $25 = HEAPF64[$2 + 112 >> 3];
    $10 = HEAPF64[$1 + 40 >> 3];
    $12 = HEAPF64[$1 + 72 >> 3];
    $26 = HEAPF64[$2 + 40 >> 3];
    $27 = HEAPF64[$2 + 72 >> 3];
    $28 = HEAPF64[$2 + 48 >> 3];
    $13 = HEAPF64[$1 + 48 >> 3];
    $29 = HEAPF64[$2 + 80 >> 3];
    $14 = HEAPF64[$1 + 80 >> 3];
    $30 = HEAPF64[$2 + 64 >> 3];
    $15 = HEAPF64[$1 + 64 >> 3];
    $31 = HEAPF64[$2 >> 3];
    $16 = HEAPF64[$1 >> 3];
    $32 = HEAPF64[$2 + 32 >> 3];
    $18 = HEAPF64[$1 + 32 >> 3];
    $33 = HEAPF64[$1 + 96 >> 3];
    $34 = HEAPF64[$2 + 96 >> 3];
    $19 = HEAPF64[$1 + 8 >> 3];
    $37 = HEAPF64[$2 + 8 >> 3];
    $38 = HEAPF64[$2 + 16 >> 3];
    $20 = HEAPF64[$1 + 16 >> 3];
    $1 = $7 + 216 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $7 + 184 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $7 + 96 | 0;
    $2 = $1 + 56 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAPF64[$1 + 80 >> 3] = $29 * $14 + ($38 * $20 + $13 * $28);
    HEAPF64[$1 + 72 >> 3] = $27 * $14 + ($37 * $20 + $13 * $26);
    HEAPF64[$1 + 48 >> 3] = $29 * $12 + ($38 * $19 + $10 * $28);
    HEAPF64[$1 + 40 >> 3] = $27 * $12 + ($37 * $19 + $10 * $26);
    $33 = -$33;
    HEAPF64[$1 + 112 >> 3] = $20 * $33 - $13 * $22 - $14 * $23 + ($25 * $14 + ($34 * $20 + $13 * $24));
    HEAPF64[$1 + 104 >> 3] = $19 * $33 - $10 * $22 - $12 * $23 + ($25 * $12 + ($34 * $19 + $10 * $24));
    HEAP32[$7 + 120 >> 2] = 0;
    HEAP32[$7 + 124 >> 2] = 0;
    HEAPF64[$7 + 96 >> 3] = $30 * $15 + ($31 * $16 + $18 * $32);
    HEAPF64[$7 + 160 >> 3] = $30 * $14 + ($31 * $20 + $13 * $32);
    HEAPF64[$7 + 128 >> 3] = $30 * $12 + ($31 * $19 + $10 * $32);
    HEAPF64[$7 + 112 >> 3] = $29 * $15 + ($38 * $16 + $18 * $28);
    HEAPF64[$7 + 104 >> 3] = $27 * $15 + ($37 * $16 + $18 * $26);
    HEAPF64[$7 + 192 >> 3] = $16 * $33 - $18 * $22 - $15 * $23 + ($25 * $15 + ($34 * $16 + $18 * $24));
    $3 = HEAP32[$36 + 4 >> 2];
    $6 = $1;
    $1 = $7 + 256 | 0;
    $2 = $7 + 224 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $6, $1, $2);
    $3 = $1 + 8 | 0;
    $10 = HEAPF64[$4 + 32 >> 3];
    HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] - $10;
    $4 = $1 + 16 | 0;
    HEAPF64[$4 >> 3] = HEAPF64[$4 >> 3] - $10;
    $6 = $2 + 8 | 0;
    HEAPF64[$6 >> 3] = $10 + HEAPF64[$6 >> 3];
    $5 = $2 + 16 | 0;
    HEAPF64[$5 >> 3] = $10 + HEAPF64[$5 >> 3];
    HEAPF64[$7 + 256 >> 3] = HEAPF64[$7 + 256 >> 3] - $10;
    HEAPF64[$7 + 224 >> 3] = $10 + HEAPF64[$7 + 224 >> 3];
    $8 = $1 + 24 | 0;
    $9 = HEAP32[$8 + 4 >> 2];
    $1 = $7 + 32 | 0;
    $21 = $1 + 24 | 0;
    HEAP32[$21 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$21 + 4 >> 2] = $9;
    $8 = HEAP32[$4 + 4 >> 2];
    $9 = $1 + 16 | 0;
    HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$9 + 4 >> 2] = $8;
    $4 = HEAP32[$3 + 4 >> 2];
    $8 = $1 + 8 | 0;
    HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$8 + 4 >> 2] = $4;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = $1 + 40 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $3 = HEAP32[$5 + 4 >> 2];
    $4 = $1 + 48 | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $3 = HEAP32[$7 + 260 >> 2];
    HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 256 >> 2];
    HEAP32[$7 + 36 >> 2] = $3;
    $2 = $2 + 24 | 0;
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $1 + 56 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = HEAP32[$7 + 228 >> 2];
    HEAP32[$7 + 64 >> 2] = HEAP32[$7 + 224 >> 2];
    HEAP32[$7 + 68 >> 2] = $2;
    $5 = $0 + 8 | 0;
    $21 = $7 + 288 | 0;
    $9 = 0;
    $8 = 0;
    $11 = HEAP32[$11 >> 2];
    if ($11) {
     $10 = HEAPF64[$1 + 48 >> 3];
     $12 = HEAPF64[$1 + 40 >> 3];
     $3 = HEAP32[$5 + 8 >> 2];
     $13 = HEAPF64[$1 + 32 >> 3];
     $14 = HEAPF64[$1 + 16 >> 3];
     $15 = HEAPF64[$1 + 8 >> 3];
     $16 = HEAPF64[$1 >> 3];
     $4 = HEAP32[$5 + 4 >> 2];
     label$2 : {
      if (($4 | 0) >= 0) {
       break label$2
      }
      if (($3 | 0) < 0) {
       $1 = HEAP32[$5 + 12 >> 2];
       if (!(!$1 | !HEAPU8[$5 + 16 | 0])) {
        btAlignedFreeInternal_28void__29($1)
       }
       HEAP8[$5 + 16 | 0] = 1;
       HEAP32[$5 + 8 >> 2] = 0;
       HEAP32[$5 + 12 >> 2] = 0;
       $3 = 0;
      }
      $1 = $4;
      $6 = 0 - $1 & 3;
      if ($6) {
       $2 = $4 << 2;
       while (1) {
        HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2] = 0;
        $2 = $2 + 4 | 0;
        $1 = $1 + 1 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      if ($4 >>> 0 > 4294967292) {
       break label$2
      }
      $2 = $1 << 2;
      while (1) {
       HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2] = 0;
       HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 4 >> 2] = 0;
       HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 8 >> 2] = 0;
       HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 12 >> 2] = 0;
       $2 = $2 + 16 | 0;
       $1 = $1 + 4 | 0;
       if ($1) {
        continue
       }
       break;
      };
     }
     $4 = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     if (($3 | 0) <= 63) {
      $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(256);
      $4 = HEAP32[$5 + 4 >> 2];
      label$9 : {
       if (($4 | 0) <= 0) {
        break label$9
       }
       $6 = $4 & 3;
       if ($4 - 1 >>> 0 >= 3) {
        $17 = $4 & -4;
        $2 = 0;
        while (1) {
         $3 = $1 + $2 | 0;
         HEAP32[$3 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
         HEAP32[$3 + 4 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 4 >> 2];
         HEAP32[$3 + 8 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 8 >> 2];
         HEAP32[$3 + 12 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 12 >> 2];
         $2 = $2 + 16 | 0;
         $9 = $9 + 4 | 0;
         if (($17 | 0) != ($9 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$6) {
        break label$9
       }
       $2 = $9 << 2;
       while (1) {
        HEAP32[$1 + $2 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
        $2 = $2 + 4 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$5 + 12 >> 2];
      if (!(!$2 | !HEAPU8[$5 + 16 | 0])) {
       btAlignedFreeInternal_28void__29($2);
       $4 = HEAP32[$5 + 4 >> 2];
      }
      HEAP32[$5 + 12 >> 2] = $1;
      HEAP8[$5 + 16 | 0] = 1;
      HEAP32[$5 + 8 >> 2] = 64;
      $3 = 64;
     }
     label$141 : {
      if (($3 | 0) != ($4 | 0)) {
       break label$141
      }
      $17 = $3 << 1;
      if (($3 | 0) >= ($17 | 0)) {
       $4 = $3;
       break label$141;
      }
      $9 = 0;
      label$16 : {
       label$172 : {
        if (!$3) {
         $4 = $3;
         break label$172;
        }
        $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 3);
        $4 = HEAP32[$5 + 4 >> 2];
        if (($4 | 0) <= 0) {
         break label$16
        }
       }
       $6 = $4 & 3;
       if ($4 - 1 >>> 0 >= 3) {
        $3 = $4 & -4;
        $2 = 0;
        while (1) {
         $1 = $2 + $8 | 0;
         HEAP32[$1 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 8 >> 2];
         HEAP32[$1 + 12 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 12 >> 2];
         $2 = $2 + 16 | 0;
         $9 = $9 + 4 | 0;
         if (($3 | 0) != ($9 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$6) {
        break label$16
       }
       $2 = $9 << 2;
       while (1) {
        HEAP32[$2 + $8 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
        $2 = $2 + 4 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      $1 = HEAP32[$5 + 12 >> 2];
      if (!(!$1 | !HEAPU8[$5 + 16 | 0])) {
       btAlignedFreeInternal_28void__29($1);
       $4 = HEAP32[$5 + 4 >> 2];
      }
      HEAP32[$5 + 12 >> 2] = $8;
      HEAP8[$5 + 16 | 0] = 1;
      HEAP32[$5 + 8 >> 2] = $17;
     }
     HEAP32[HEAP32[$5 + 12 >> 2] + ($4 << 2) >> 2] = $11;
     $2 = $4 + 1 | 0;
     while (1) {
      $1 = $2 - 1 | 0;
      HEAP32[$5 + 4 >> 2] = $1;
      $8 = HEAP32[$5 + 12 >> 2];
      $11 = HEAP32[$8 + ($1 << 2) >> 2];
      label$244 : {
       if (!(HEAPF64[$11 >> 3] <= $13)) {
        $2 = $1;
        break label$244;
       }
       if (!(HEAPF64[$11 + 32 >> 3] >= $16)) {
        $2 = $1;
        break label$244;
       }
       if (!(HEAPF64[$11 + 8 >> 3] <= $12)) {
        $2 = $1;
        break label$244;
       }
       if (!(HEAPF64[$11 + 40 >> 3] >= $15)) {
        $2 = $1;
        break label$244;
       }
       if (!(HEAPF64[$11 + 16 >> 3] <= $10)) {
        $2 = $1;
        break label$244;
       }
       if (!(HEAPF64[$11 + 48 >> 3] >= $14)) {
        $2 = $1;
        break label$244;
       }
       if (HEAP32[$11 + 72 >> 2]) {
        $6 = HEAP32[$5 + 8 >> 2];
        label$32 : {
         if (($1 | 0) != ($6 | 0)) {
          break label$32
         }
         $6 = $1 ? $1 << 1 : 1;
         if (($6 | 0) < ($2 | 0)) {
          $6 = $1;
          break label$32;
         }
         label$34 : {
          if (!$6) {
           $8 = 0;
           break label$34;
          }
          $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
          $1 = HEAP32[$5 + 4 >> 2];
         }
         label$36 : {
          if (($1 | 0) <= 0) {
           break label$36
          }
          $4 = $1 & 3;
          $3 = 0;
          if ($1 - 1 >>> 0 >= 3) {
           $17 = $1 & -4;
           $2 = 0;
           while (1) {
            $9 = $2 + $8 | 0;
            HEAP32[$9 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
            HEAP32[$9 + 4 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 4 >> 2];
            HEAP32[$9 + 8 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 8 >> 2];
            HEAP32[$9 + 12 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 12 >> 2];
            $2 = $2 + 16 | 0;
            $3 = $3 + 4 | 0;
            if (($17 | 0) != ($3 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$4) {
           break label$36
          }
          $2 = $3 << 2;
          while (1) {
           HEAP32[$2 + $8 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
           $2 = $2 + 4 | 0;
           $4 = $4 - 1 | 0;
           if ($4) {
            continue
           }
           break;
          };
         }
         $2 = HEAP32[$5 + 12 >> 2];
         if (!(!$2 | !HEAPU8[$5 + 16 | 0])) {
          btAlignedFreeInternal_28void__29($2);
          $1 = HEAP32[$5 + 4 >> 2];
         }
         HEAP32[$5 + 12 >> 2] = $8;
         HEAP8[$5 + 16 | 0] = 1;
         HEAP32[$5 + 8 >> 2] = $6;
        }
        $3 = $1 + 1 | 0;
        HEAP32[$5 + 4 >> 2] = $3;
        HEAP32[($1 << 2) + $8 >> 2] = HEAP32[$11 + 68 >> 2];
        label$41 : {
         if (($3 | 0) != ($6 | 0)) {
          break label$41
         }
         $1 = $6 ? $6 << 1 : 1;
         if (($6 | 0) >= ($1 | 0)) {
          $3 = $6;
          break label$41;
         }
         label$43 : {
          if (!$1) {
           $9 = 0;
           $3 = $6;
           break label$43;
          }
          $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2);
          $3 = HEAP32[$5 + 4 >> 2];
         }
         label$45 : {
          if (($3 | 0) <= 0) {
           break label$45
          }
          $8 = $3 & 3;
          $4 = 0;
          if ($3 - 1 >>> 0 >= 3) {
           $17 = $3 & -4;
           $2 = 0;
           while (1) {
            $6 = $2 + $9 | 0;
            HEAP32[$6 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
            HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 4 >> 2];
            HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 8 >> 2];
            HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$5 + 12 >> 2] + $2 | 0) + 12 >> 2];
            $2 = $2 + 16 | 0;
            $4 = $4 + 4 | 0;
            if (($17 | 0) != ($4 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$8) {
           break label$45
          }
          $2 = $4 << 2;
          while (1) {
           HEAP32[$2 + $9 >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + $2 >> 2];
           $2 = $2 + 4 | 0;
           $8 = $8 - 1 | 0;
           if ($8) {
            continue
           }
           break;
          };
         }
         $2 = HEAP32[$5 + 12 >> 2];
         if (!(!$2 | !HEAPU8[$5 + 16 | 0])) {
          btAlignedFreeInternal_28void__29($2);
          $3 = HEAP32[$5 + 4 >> 2];
         }
         HEAP32[$5 + 12 >> 2] = $9;
         HEAP8[$5 + 16 | 0] = 1;
         HEAP32[$5 + 8 >> 2] = $1;
        }
        $2 = $3 + 1 | 0;
        HEAP32[$5 + 4 >> 2] = $2;
        HEAP32[HEAP32[$5 + 12 >> 2] + ($3 << 2) >> 2] = HEAP32[$11 + 72 >> 2];
        break label$244;
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 12 >> 2]]($21, $11);
       $2 = HEAP32[$5 + 4 >> 2];
      }
      if (($2 | 0) > 0) {
       continue
      }
      break;
     };
    }
   }
   $1 = HEAP32[$0 + 52 >> 2];
   $2 = HEAP32[$0 + 32 >> 2];
   label$28 : {
    if (($2 | 0) >= 0) {
     break label$28
    }
    if (HEAP32[$0 + 36 >> 2] < 0) {
     $3 = HEAP32[$0 + 40 >> 2];
     if (!(!$3 | !HEAPU8[$0 + 44 | 0])) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP8[$0 + 44 | 0] = 1;
     HEAP32[$0 + 36 >> 2] = 0;
     HEAP32[$0 + 40 >> 2] = 0;
    }
    $6 = $2;
    $4 = 0 - $2 & 3;
    if ($4) {
     $5 = $2 << 2;
     while (1) {
      HEAP32[HEAP32[$0 + 40 >> 2] + $5 >> 2] = 0;
      $5 = $5 + 4 | 0;
      $6 = $6 + 1 | 0;
      $4 = $4 - 1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    if ($2 >>> 0 > 4294967292) {
     break label$28
    }
    $5 = $6 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 40 >> 2] + $5 >> 2] = 0;
     HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 4 >> 2] = 0;
     HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 8 >> 2] = 0;
     HEAP32[(HEAP32[$0 + 40 >> 2] + $5 | 0) + 12 >> 2] = 0;
     $5 = $5 + 16 | 0;
     $6 = $6 + 4 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 32 >> 2] = 0;
   if (($1 | 0) <= 0) {
    break label$5
   }
   $8 = 128;
   $4 = 0;
   while (1) {
    label$35 : {
     if (!HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2]) {
      break label$35
     }
     $2 = HEAP32[$35 + 28 >> 2] + $8 | 0;
     $6 = HEAP32[$2 >> 2];
     $3 = HEAP32[$39 + 12 >> 2];
     $37 = HEAPF64[$3 + 104 >> 3];
     $38 = HEAPF64[$3 + 112 >> 3];
     $22 = HEAPF64[$2 - 32 >> 3];
     $23 = HEAPF64[$2 - 24 >> 3];
     $24 = HEAPF64[$2 - 16 >> 3];
     $10 = HEAPF64[$3 + 40 >> 3];
     $12 = HEAPF64[$3 + 48 >> 3];
     $25 = HEAPF64[$2 - 128 >> 3];
     $26 = HEAPF64[$2 - 96 >> 3];
     $27 = HEAPF64[$2 + -64 >> 3];
     $28 = HEAPF64[$2 - 120 >> 3];
     $29 = HEAPF64[$2 - 88 >> 3];
     $30 = HEAPF64[$2 - 56 >> 3];
     $31 = HEAPF64[$2 - 112 >> 3];
     $13 = HEAPF64[$3 + 72 >> 3];
     $32 = HEAPF64[$2 - 80 >> 3];
     $14 = HEAPF64[$3 + 80 >> 3];
     $34 = HEAPF64[$2 - 48 >> 3];
     $33 = HEAPF64[$3 + 96 >> 3];
     $15 = HEAPF64[$3 + 16 >> 3];
     $16 = HEAPF64[$3 >> 3];
     $18 = HEAPF64[$3 + 8 >> 3];
     $19 = HEAPF64[$3 + 32 >> 3];
     $20 = HEAPF64[$3 + 64 >> 3];
     HEAP32[$7 + 216 >> 2] = 0;
     HEAP32[$7 + 220 >> 2] = 0;
     HEAP32[$7 + 184 >> 2] = 0;
     HEAP32[$7 + 188 >> 2] = 0;
     HEAP32[$7 + 152 >> 2] = 0;
     HEAP32[$7 + 156 >> 2] = 0;
     HEAP32[$7 + 120 >> 2] = 0;
     HEAP32[$7 + 124 >> 2] = 0;
     HEAPF64[$7 + 176 >> 3] = $34 * $14 + ($31 * $20 + $13 * $32);
     HEAPF64[$7 + 168 >> 3] = $30 * $14 + ($28 * $20 + $13 * $29);
     HEAPF64[$7 + 160 >> 3] = $27 * $14 + ($25 * $20 + $13 * $26);
     HEAPF64[$7 + 144 >> 3] = $34 * $12 + ($31 * $19 + $10 * $32);
     HEAPF64[$7 + 136 >> 3] = $30 * $12 + ($28 * $19 + $10 * $29);
     HEAPF64[$7 + 128 >> 3] = $27 * $12 + ($25 * $19 + $10 * $26);
     HEAPF64[$7 + 112 >> 3] = $34 * $15 + ($31 * $16 + $18 * $32);
     HEAPF64[$7 + 104 >> 3] = $30 * $15 + ($28 * $16 + $18 * $29);
     HEAPF64[$7 + 96 >> 3] = $27 * $15 + ($25 * $16 + $18 * $26);
     HEAPF64[$7 + 208 >> 3] = $38 + ($24 * $14 + ($22 * $20 + $13 * $23));
     HEAPF64[$7 + 200 >> 3] = $37 + ($24 * $12 + ($22 * $19 + $10 * $23));
     HEAPF64[$7 + 192 >> 3] = $33 + ($24 * $15 + ($22 * $16 + $18 * $23));
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $7 + 96 | 0, $7 + 32 | 0, $7 + 256 | 0);
     $2 = HEAP32[$36 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, HEAP32[$36 + 12 >> 2], $7 + 224 | 0, $7);
     $3 = !(HEAPF64[$7 + 40 >> 3] > HEAPF64[$7 + 8 >> 3]);
     $6 = !(HEAPF64[$7 + 264 >> 3] < HEAPF64[$7 + 232 >> 3]);
     $2 = 0;
     label$367 : {
      if (HEAPF64[$7 + 32 >> 3] > HEAPF64[$7 >> 3]) {
       break label$367
      }
      $2 = 0;
      if (HEAPF64[$7 + 256 >> 3] < HEAPF64[$7 + 224 >> 3]) {
       break label$367
      }
      $2 = 1;
     }
     if ($3 & ($6 & (HEAPF64[$7 + 272 >> 3] < HEAPF64[$7 + 240 >> 3] | HEAPF64[$7 + 48 >> 3] > HEAPF64[$7 + 16 >> 3] ? 0 : $2))) {
      break label$35
     }
     $2 = HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2) | 0;
     $2 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 60 >> 2]]($2, HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2]);
     HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2] = 0;
    }
    $8 = $8 + 152 | 0;
    $4 = $4 + 4 | 0;
    $1 = $1 - 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $7 + 320 | 0;
 }
 
 function btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
  $3 = __stack_pointer - 288 | 0;
  __stack_pointer = $3;
  $5 = HEAP32[$0 + 4 >> 2];
  $4 = HEAP32[$5 + 12 >> 2];
  $17 = HEAPF64[$4 + 104 >> 3];
  $11 = HEAPF64[$4 + 112 >> 3];
  $6 = HEAPF64[$4 + 48 >> 3];
  $12 = HEAPF64[$4 + 40 >> 3];
  $8 = HEAPF64[$4 + 80 >> 3];
  $9 = HEAPF64[$4 + 72 >> 3];
  $5 = HEAP32[HEAP32[$5 + 4 >> 2] + 28 >> 2];
  $27 = HEAPF64[$4 + 96 >> 3];
  $13 = HEAPF64[$4 + 16 >> 3];
  $14 = HEAPF64[$4 >> 3];
  $15 = HEAPF64[$4 + 8 >> 3];
  $16 = HEAPF64[$4 + 32 >> 3];
  $10 = HEAPF64[$4 + 64 >> 3];
  $4 = $3 + 280 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 248 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 216 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $7 = $3 + 160 | 0;
  $4 = $5 + Math_imul($2, 152) | 0;
  $18 = HEAPF64[$4 + 80 >> 3];
  $19 = HEAPF64[$4 + 16 >> 3];
  $20 = HEAPF64[$4 + 48 >> 3];
  HEAPF64[$7 + 80 >> 3] = $8 * $18 + ($10 * $19 + $9 * $20);
  $21 = HEAPF64[$4 + 72 >> 3];
  $22 = HEAPF64[$4 + 8 >> 3];
  $23 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$7 + 72 >> 3] = $8 * $21 + ($10 * $22 + $9 * $23);
  HEAPF64[$7 + 48 >> 3] = $18 * $6 + ($19 * $16 + $12 * $20);
  HEAPF64[$7 + 40 >> 3] = $21 * $6 + ($22 * $16 + $12 * $23);
  $24 = $11;
  $11 = HEAPF64[$4 + 112 >> 3];
  $25 = HEAPF64[$4 + 96 >> 3];
  $26 = HEAPF64[$4 + 104 >> 3];
  HEAPF64[$7 + 112 >> 3] = $24 + ($8 * $11 + ($10 * $25 + $9 * $26));
  HEAPF64[$7 + 104 >> 3] = $17 + ($11 * $6 + ($25 * $16 + $12 * $26));
  HEAP32[$3 + 184 >> 2] = 0;
  HEAP32[$3 + 188 >> 2] = 0;
  $24 = $8;
  $8 = HEAPF64[$4 + 64 >> 3];
  $17 = $10;
  $10 = HEAPF64[$4 >> 3];
  $28 = $9;
  $9 = HEAPF64[$4 + 32 >> 3];
  HEAPF64[$3 + 224 >> 3] = $24 * $8 + ($17 * $10 + $28 * $9);
  HEAPF64[$3 + 192 >> 3] = $8 * $6 + ($10 * $16 + $12 * $9);
  HEAPF64[$3 + 160 >> 3] = $8 * $13 + ($10 * $14 + $15 * $9);
  HEAPF64[$3 + 176 >> 3] = $18 * $13 + ($19 * $14 + $15 * $20);
  HEAPF64[$3 + 168 >> 3] = $21 * $13 + ($22 * $14 + $15 * $23);
  HEAPF64[$3 + 256 >> 3] = $27 + ($11 * $13 + ($25 * $14 + $15 * $26));
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $7, $3 + 128 | 0, $3 + 96 | 0);
  $6 = HEAPF64[HEAP32[$0 + 20 >> 2] + 32 >> 3];
  HEAPF64[$3 + 128 >> 3] = HEAPF64[$3 + 128 >> 3] - $6;
  HEAPF64[$3 + 136 >> 3] = HEAPF64[$3 + 136 >> 3] - $6;
  HEAPF64[$3 + 144 >> 3] = HEAPF64[$3 + 144 >> 3] - $6;
  HEAPF64[$3 + 96 >> 3] = $6 + HEAPF64[$3 + 96 >> 3];
  HEAPF64[$3 + 104 >> 3] = $6 + HEAPF64[$3 + 104 >> 3];
  HEAPF64[$3 + 112 >> 3] = $6 + HEAPF64[$3 + 112 >> 3];
  $4 = HEAP32[$0 + 8 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, HEAP32[$4 + 12 >> 2], $3 - -64 | 0, $3 + 32 | 0);
  $4 = 0;
  $5 = HEAP32[8409];
  label$1 : {
   if ($5) {
    if (!(FUNCTION_TABLE[$5 | 0](HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2], $1) | 0)) {
     break label$1
    }
   }
   $4 = HEAPF64[$3 + 96 >> 3] < HEAPF64[$3 + 64 >> 3] | HEAPF64[$3 + 128 >> 3] > HEAPF64[$3 + 32 >> 3] ? $4 : 1;
   $5 = 0;
   if ((HEAPF64[$3 + 112 >> 3] < HEAPF64[$3 + 80 >> 3] | HEAPF64[$3 + 144 >> 3] > HEAPF64[$3 + 48 >> 3] ? $5 : $4) ^ 1 | HEAPF64[$3 + 104 >> 3] < HEAPF64[$3 + 72 >> 3] | HEAPF64[$3 + 136 >> 3] > HEAPF64[$3 + 40 >> 3]) {
    break label$1
   }
   HEAP32[$3 + 28 >> 2] = $2;
   HEAP32[$3 + 24 >> 2] = -1;
   HEAP32[$3 + 12 >> 2] = $1;
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$3 + 8 >> 2] = $1;
   HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
   $6 = HEAPF64[HEAP32[$0 + 20 >> 2] + 32 >> 3];
   HEAP32[$3 + 20 >> 2] = $3 + 160;
   label$5 : {
    if ($6 > 0.0) {
     $1 = HEAP32[$0 + 12 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], 0, 2) | 0;
     break label$5;
    }
    $4 = $2 << 2;
    $1 = HEAP32[$4 + HEAP32[$0 + 24 >> 2] >> 2];
    if ($1) {
     break label$5
    }
    $1 = HEAP32[$0 + 12 >> 2];
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 28 >> 2], 1) | 0;
    HEAP32[$4 + HEAP32[$0 + 24 >> 2] >> 2] = $1;
    $1 = HEAP32[$4 + HEAP32[$0 + 24 >> 2] >> 2];
   }
   $5 = HEAP32[$0 + 20 >> 2];
   $4 = HEAP32[$5 + 8 >> 2];
   label$7 : {
    if (HEAP32[$4 + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]) {
     HEAP32[$5 + 8 >> 2] = $3 + 8;
     $7 = 2;
     break label$7;
    }
    $4 = HEAP32[$5 + 12 >> 2];
    HEAP32[$5 + 12 >> 2] = $3 + 8;
    $7 = 3;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + ($7 << 2) >> 2]]($5, -1, $2);
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
   $1 = HEAP32[$0 + 20 >> 2];
   if (HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]) {
    HEAP32[$1 + 8 >> 2] = $4;
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = $4;
  }
  __stack_pointer = $3 + 288 | 0;
 }
 
 function btCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0;
  $16 = HEAP32[$0 + 52 >> 2];
  if (($16 | 0) <= 0) {
   return 1.0
  }
  $5 = HEAPU8[$0 + 68 | 0];
  $33 = $5 ? $1 : $2;
  $1 = $5 ? $2 : $1;
  $34 = HEAPF64[$1 + 128 >> 3];
  $29 = HEAPF64[$1 + 120 >> 3];
  $30 = HEAPF64[$1 + 112 >> 3];
  $31 = HEAPF64[$1 + 104 >> 3];
  $35 = HEAPF64[$1 + 96 >> 3];
  $7 = HEAPF64[$1 + 88 >> 3];
  $8 = HEAPF64[$1 + 80 >> 3];
  $9 = HEAPF64[$1 + 72 >> 3];
  $5 = 64;
  $36 = HEAPF64[$1 - -64 >> 3];
  $10 = HEAPF64[$1 + 56 >> 3];
  $11 = HEAPF64[$1 + 48 >> 3];
  $12 = HEAPF64[$1 + 40 >> 3];
  $37 = HEAPF64[$1 + 32 >> 3];
  $13 = HEAPF64[$1 + 24 >> 3];
  $14 = HEAPF64[$1 + 16 >> 3];
  $2 = HEAP32[$1 + 536 >> 2];
  $15 = HEAPF64[$1 + 8 >> 3];
  $38 = HEAP32[$1 + 380 >> 2];
  $17 = 1.0;
  while (1) {
   HEAP32[$1 + 536 >> 2] = $2 + 1;
   $2 = HEAP32[$38 + 28 >> 2] + $5 | 0;
   $6 = HEAPF64[$2 + 48 >> 3];
   $18 = HEAPF64[$2 + 32 >> 3];
   $19 = HEAPF64[$2 + 40 >> 3];
   $20 = HEAPF64[$2 >> 3];
   $21 = HEAPF64[$2 + -64 >> 3];
   $22 = HEAPF64[$2 - 32 >> 3];
   $23 = HEAPF64[$2 + 8 >> 3];
   $24 = HEAPF64[$2 - 56 >> 3];
   $25 = HEAPF64[$2 - 24 >> 3];
   $26 = HEAPF64[$2 + 16 >> 3];
   $27 = HEAPF64[$2 - 48 >> 3];
   $28 = HEAPF64[$2 - 16 >> 3];
   HEAP32[$1 + 128 >> 2] = 0;
   HEAP32[$1 + 132 >> 2] = 0;
   HEAP32[$1 + 96 >> 2] = 0;
   HEAP32[$1 + 100 >> 2] = 0;
   HEAP32[$1 + 64 >> 2] = 0;
   HEAP32[$1 + 68 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAP32[$1 + 36 >> 2] = 0;
   HEAPF64[$1 + 88 >> 3] = $26 * $7 + ($27 * $9 + $8 * $28);
   HEAPF64[$1 + 80 >> 3] = $23 * $7 + ($24 * $9 + $8 * $25);
   HEAPF64[$1 + 72 >> 3] = $20 * $7 + ($21 * $9 + $8 * $22);
   HEAPF64[$1 + 56 >> 3] = $26 * $10 + ($27 * $12 + $11 * $28);
   HEAPF64[$1 + 48 >> 3] = $23 * $10 + ($24 * $12 + $11 * $25);
   HEAPF64[$1 + 40 >> 3] = $20 * $10 + ($21 * $12 + $11 * $22);
   HEAPF64[$1 + 24 >> 3] = $26 * $13 + ($27 * $15 + $14 * $28);
   HEAPF64[$1 + 16 >> 3] = $23 * $13 + ($24 * $15 + $14 * $25);
   HEAPF64[$1 + 8 >> 3] = $20 * $13 + ($21 * $15 + $14 * $22);
   HEAPF64[$1 + 120 >> 3] = $29 + ($6 * $7 + ($18 * $9 + $8 * $19));
   HEAPF64[$1 + 112 >> 3] = $30 + ($6 * $10 + ($18 * $12 + $11 * $19));
   HEAPF64[$1 + 104 >> 3] = $31 + ($6 * $13 + ($18 * $15 + $14 * $19));
   $2 = HEAP32[HEAP32[$0 + 60 >> 2] + $32 >> 2];
   $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1, $33, $3, $4);
   HEAPF64[$1 + 128 >> 3] = $34;
   HEAPF64[$1 + 120 >> 3] = $29;
   HEAPF64[$1 + 112 >> 3] = $30;
   HEAPF64[$1 + 104 >> 3] = $31;
   HEAPF64[$1 + 96 >> 3] = $35;
   HEAPF64[$1 + 88 >> 3] = $7;
   HEAPF64[$1 + 80 >> 3] = $8;
   HEAPF64[$1 + 72 >> 3] = $9;
   HEAPF64[$1 + 64 >> 3] = $36;
   HEAPF64[$1 + 56 >> 3] = $10;
   HEAPF64[$1 + 48 >> 3] = $11;
   HEAPF64[$1 + 40 >> 3] = $12;
   HEAPF64[$1 + 32 >> 3] = $37;
   HEAPF64[$1 + 24 >> 3] = $13;
   HEAPF64[$1 + 16 >> 3] = $14;
   HEAPF64[$1 + 8 >> 3] = $15;
   $2 = HEAP32[$1 + 536 >> 2] + 1 | 0;
   HEAP32[$1 + 536 >> 2] = $2;
   $17 = $6 < $17 ? $6 : $17;
   $5 = $5 + 152 | 0;
   $32 = $32 + 4 | 0;
   $16 = $16 - 1 | 0;
   if ($16) {
    continue
   }
   break;
  };
  return +$17;
 }
 
 function btCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 52 >> 2];
  if (($2 | 0) > 0) {
   while (1) {
    $3 = HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2];
    if ($3) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
     $2 = HEAP32[$0 + 52 >> 2];
    }
    $4 = $4 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($2 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btCompoundLeafCallback__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = $0;
  $3 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2] + 28 >> 2];
  $0 = HEAP32[$1 + 68 >> 2];
  btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($2, HEAP32[($3 + Math_imul($0, 152) | 0) + 128 >> 2], $0);
 }
 
 function btHashedSimplePairCache__growTables_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  label$1 : {
   $9 = HEAP32[$0 + 28 >> 2];
   $4 = HEAP32[$0 + 12 >> 2];
   if (($9 | 0) >= ($4 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 32 >> 2] >= ($4 | 0)) {
     $2 = HEAP32[$0 + 36 >> 2];
     break label$2;
    }
    label$4 : {
     if (!$4) {
      $1 = $9;
      break label$4;
     }
     $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $1 = HEAP32[$0 + 28 >> 2];
    }
    $5 = HEAP32[$0 + 36 >> 2];
    label$6 : {
     if (($1 | 0) > 0) {
      $6 = $1 & 3;
      if ($1 - 1 >>> 0 >= 3) {
       $10 = $1 & -4;
       $1 = 0;
       while (1) {
        $7 = $1 + $2 | 0;
        $8 = $1 + $5 | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        HEAP32[$7 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
        $1 = $1 + 16 | 0;
        $3 = $3 + 4 | 0;
        if (($10 | 0) != ($3 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$6) {
       break label$6
      }
      $3 = $3 << 2;
      $1 = $3 + $2 | 0;
      $3 = $3 + $5 | 0;
      while (1) {
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       $1 = $1 + 4 | 0;
       $3 = $3 + 4 | 0;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue
       }
       break;
      };
      break label$6;
     }
     if ($5) {
      break label$6
     }
     HEAP32[$0 + 36 >> 2] = $2;
     HEAP32[$0 + 32 >> 2] = $4;
     HEAP8[$0 + 40 | 0] = 1;
     break label$2;
    }
    if (HEAPU8[$0 + 40 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 36 >> 2] = $2;
    HEAP8[$0 + 40 | 0] = 1;
    HEAP32[$0 + 32 >> 2] = $4;
   }
   memset(($9 << 2) + $2 | 0, 0, $4 - $9 << 2);
   HEAP32[$0 + 28 >> 2] = $4;
   $8 = $4 << 2;
   $5 = HEAP32[$0 + 48 >> 2];
   if (($5 | 0) < ($4 | 0)) {
    label$13 : {
     if (HEAP32[$0 + 52 >> 2] >= ($4 | 0)) {
      $2 = HEAP32[$0 + 56 >> 2];
      break label$13;
     }
     label$15 : {
      if (!$4) {
       $2 = 0;
       $1 = $5;
       break label$15;
      }
      $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8);
      $1 = HEAP32[$0 + 48 >> 2];
     }
     $7 = HEAP32[$0 + 56 >> 2];
     label$17 : {
      if (($1 | 0) > 0) {
       $6 = $1 & 3;
       $3 = 0;
       if ($1 - 1 >>> 0 >= 3) {
        $12 = $1 & -4;
        $1 = 0;
        while (1) {
         $10 = $1 + $2 | 0;
         $11 = $1 + $7 | 0;
         HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
         HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
         HEAP32[$10 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
         $1 = $1 + 16 | 0;
         $3 = $3 + 4 | 0;
         if (($12 | 0) != ($3 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$6) {
        break label$17
       }
       $3 = $3 << 2;
       $1 = $3 + $2 | 0;
       $3 = $3 + $7 | 0;
       while (1) {
        HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
        $1 = $1 + 4 | 0;
        $3 = $3 + 4 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
       break label$17;
      }
      if ($7) {
       break label$17
      }
      HEAP32[$0 + 56 >> 2] = $2;
      HEAP32[$0 + 52 >> 2] = $4;
      HEAP8[$0 + 60 | 0] = 1;
      break label$13;
     }
     if (HEAPU8[$0 + 60 | 0]) {
      btAlignedFreeInternal_28void__29($7)
     }
     HEAP32[$0 + 56 >> 2] = $2;
     HEAP8[$0 + 60 | 0] = 1;
     HEAP32[$0 + 52 >> 2] = $4;
    }
    memset(($5 << 2) + $2 | 0, 0, $4 - $5 << 2);
   }
   HEAP32[$0 + 48 >> 2] = $4;
   if (($4 | 0) > 0) {
    memset(HEAP32[$0 + 36 >> 2], 255, $8);
    memset(HEAP32[$0 + 56 >> 2], 255, $8);
   }
   if (($9 | 0) <= 0) {
    break label$1
   }
   $3 = HEAP32[$0 + 56 >> 2];
   $1 = HEAP32[$0 + 16 >> 2];
   $4 = HEAP32[$0 + 36 >> 2];
   $5 = 0;
   while (1) {
    $2 = HEAP32[$1 >> 2] | HEAP32[$1 + 4 >> 2] << 16;
    $2 = ($2 << 15 ^ -1) + $2 | 0;
    $2 = Math_imul($2 >>> 10 ^ $2, 9);
    $2 = $2 >>> 6 ^ $2;
    $2 = ($2 << 11 ^ -1) + $2 | 0;
    $2 = $4 + ((HEAP32[$0 + 12 >> 2] - 1 & ($2 >>> 16 ^ $2)) << 2) | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $5;
    $1 = $1 + 12 | 0;
    $3 = $3 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btHashedSimplePairCache___btHashedSimplePairCache_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16868;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btHashedSimplePairCache___btHashedSimplePairCache_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16868;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  operator_20delete_28void__29($0);
 }
 
 function btHashedSimplePairCache__removeAllPairs_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  if (HEAP32[$0 + 12 >> 2] <= 1) {
   $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
   $1 = HEAP32[$0 + 8 >> 2];
   label$5 : {
    if (($1 | 0) <= 0) {
     break label$5
    }
    $7 = $1 & 1;
    if (($1 | 0) != 1) {
     $8 = $1 & -2;
     $1 = 0;
     while (1) {
      $4 = HEAP32[$0 + 16 >> 2] + $1 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $2 = $1 + $5 | 0;
      HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$2 + 4 >> 2] = $6;
      HEAP32[$2 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $4 = HEAP32[$0 + 16 >> 2] + $1 | 0;
      HEAP32[$2 + 20 >> 2] = HEAP32[$4 + 20 >> 2];
      $4 = $4 + 12 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $2 = $2 + 12 | 0;
      HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$2 + 4 >> 2] = $6;
      $1 = $1 + 24 | 0;
      $3 = $3 + 2 | 0;
      if (($8 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$7) {
     break label$5
    }
    $3 = Math_imul($3, 12);
    $1 = $3 + HEAP32[$0 + 16 >> 2] | 0;
    $2 = HEAP32[$1 + 4 >> 2];
    $3 = $3 + $5 | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   }
   $1 = HEAP32[$0 + 16 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = $5;
   HEAP8[$0 + 20 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = 2;
  }
  btHashedSimplePairCache__growTables_28_29($0);
 }
 
 function btHashedSimplePairCache__removeOverlappingPair_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  HEAP32[8410] = HEAP32[8410] + 1;
  $7 = HEAP32[$0 + 36 >> 2];
  $3 = $2 << 16 | $1;
  $3 = ($3 << 15 ^ -1) + $3 | 0;
  $3 = Math_imul($3 >>> 10 ^ $3, 9);
  $3 = $3 >>> 6 ^ $3;
  $3 = ($3 << 11 ^ -1) + $3 | 0;
  $8 = $7 + ((HEAP32[$0 + 12 >> 2] - 1 & ($3 >>> 16 ^ $3)) << 2) | 0;
  $3 = HEAP32[$8 >> 2];
  label$1 : {
   if (($3 | 0) == -1) {
    break label$1
   }
   $5 = HEAP32[$0 + 56 >> 2];
   $6 = HEAP32[$0 + 16 >> 2];
   $4 = $3;
   while (1) {
    $9 = $6 + Math_imul($4, 12) | 0;
    if (!(($1 | 0) == HEAP32[$9 >> 2] & HEAP32[$9 + 4 >> 2] == ($2 | 0))) {
     $4 = HEAP32[$5 + ($4 << 2) >> 2];
     if (($4 | 0) != -1) {
      continue
     }
     break label$1;
    }
    break;
   };
   $10 = HEAP32[($6 + Math_imul($4, 12) | 0) + 8 >> 2];
   label$5 : {
    label$6 : {
     if (($3 | 0) == ($4 | 0)) {
      break label$6
     }
     while (1) {
      $1 = $3;
      $3 = HEAP32[$5 + ($1 << 2) >> 2];
      if (($3 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
     if (($1 | 0) == -1) {
      break label$6
     }
     HEAP32[$5 + ($1 << 2) >> 2] = HEAP32[$5 + ($4 << 2) >> 2];
     break label$5;
    }
    HEAP32[$8 >> 2] = HEAP32[$5 + ($4 << 2) >> 2];
   }
   $3 = HEAP32[$0 + 8 >> 2] - 1 | 0;
   if (($4 | 0) != ($3 | 0)) {
    label$9 : {
     label$10 : {
      $6 = $6 + Math_imul($3, 12) | 0;
      $1 = HEAP32[$6 + 4 >> 2] << 16 | HEAP32[$6 >> 2];
      $1 = ($1 << 15 ^ -1) + $1 | 0;
      $1 = Math_imul($1 >>> 10 ^ $1, 9);
      $1 = $1 >>> 6 ^ $1;
      $1 = ($1 << 11 ^ -1) + $1 | 0;
      $8 = HEAP32[$0 + 12 >> 2] - 1 & ($1 >>> 16 ^ $1);
      $7 = $7 + ($8 << 2) | 0;
      $1 = HEAP32[$7 >> 2];
      if (($3 | 0) == ($1 | 0)) {
       break label$10
      }
      while (1) {
       $2 = $1;
       $1 = HEAP32[$5 + ($1 << 2) >> 2];
       if (($3 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
      if (($2 | 0) == -1) {
       break label$10
      }
      HEAP32[$5 + ($2 << 2) >> 2] = HEAP32[$5 + ($3 << 2) >> 2];
      break label$9;
     }
     HEAP32[$7 >> 2] = HEAP32[$5 + ($3 << 2) >> 2];
    }
    $1 = HEAP32[$6 + 4 >> 2];
    HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$9 + 4 >> 2] = $1;
    HEAP32[$9 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $1 = HEAP32[$0 + 36 >> 2] + ($8 << 2) | 0;
    HEAP32[HEAP32[$0 + 56 >> 2] + ($4 << 2) >> 2] = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $4;
    $4 = HEAP32[$0 + 8 >> 2] - 1 | 0;
   }
   HEAP32[$0 + 8 >> 2] = $4;
  }
  return $10 | 0;
 }
 
 function btHashedSimplePairCache__addOverlappingPair_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  HEAP32[8411] = HEAP32[8411] + 1;
  $3 = $2 << 16 | $1;
  $3 = ($3 << 15 ^ -1) + $3 | 0;
  $3 = Math_imul($3 >>> 10 ^ $3, 9);
  $3 = $3 >>> 6 ^ $3;
  $3 = ($3 << 11 ^ -1) + $3 | 0;
  $13 = $3 >>> 16 ^ $3;
  $3 = HEAP32[$0 + 12 >> 2];
  $10 = $13 & $3 - 1;
  $4 = HEAP32[HEAP32[$0 + 36 >> 2] + ($10 << 2) >> 2];
  label$1 : {
   if (($4 | 0) != -1) {
    $7 = HEAP32[$0 + 56 >> 2];
    $8 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $5 = $8 + Math_imul($4, 12) | 0;
     if (($1 | 0) == HEAP32[$5 >> 2] & HEAP32[$5 + 4 >> 2] == ($2 | 0)) {
      break label$1
     }
     $4 = HEAP32[$7 + ($4 << 2) >> 2];
     if (($4 | 0) != -1) {
      continue
     }
     break;
    };
   }
   label$5 : {
    label$6 : {
     $7 = HEAP32[$0 + 8 >> 2];
     $4 = $7;
     if (($3 | 0) == ($4 | 0)) {
      $8 = $3 ? $3 << 1 : 1;
      $14 = ($8 | 0) <= ($3 | 0);
      if (!$14) {
       break label$6
      }
      $4 = $3;
     }
     HEAP32[$0 + 8 >> 2] = $4 + 1;
     $9 = HEAP32[$0 + 16 >> 2];
     break label$5;
    }
    if ($8) {
     $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 12));
     $3 = HEAP32[$0 + 8 >> 2];
    }
    label$10 : {
     if (($3 | 0) <= 0) {
      break label$10
     }
     if (($3 | 0) != 1) {
      $15 = $3 & -2;
      $4 = 0;
      while (1) {
       $6 = HEAP32[$0 + 16 >> 2] + $4 | 0;
       $11 = HEAP32[$6 + 4 >> 2];
       $5 = $4 + $9 | 0;
       HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$5 + 4 >> 2] = $11;
       HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
       $6 = HEAP32[$0 + 16 >> 2] + $4 | 0;
       HEAP32[$5 + 20 >> 2] = HEAP32[$6 + 20 >> 2];
       $6 = $6 + 12 | 0;
       $11 = HEAP32[$6 + 4 >> 2];
       $5 = $5 + 12 | 0;
       HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$5 + 4 >> 2] = $11;
       $4 = $4 + 24 | 0;
       $12 = $12 + 2 | 0;
       if (($15 | 0) != ($12 | 0)) {
        continue
       }
       break;
      };
     }
     if (!($3 & 1)) {
      break label$10
     }
     $4 = Math_imul($12, 12);
     $3 = $4 + $9 | 0;
     $4 = $4 + HEAP32[$0 + 16 >> 2] | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$3 + 4 >> 2] = $5;
     HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    }
    $3 = HEAP32[$0 + 16 >> 2];
    if (!(!$3 | !HEAPU8[$0 + 20 | 0])) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP32[$0 + 16 >> 2] = $9;
    HEAP8[$0 + 20 | 0] = 1;
    HEAP32[$0 + 12 >> 2] = $8;
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
    if ($14) {
     break label$5
    }
    btHashedSimplePairCache__growTables_28_29($0);
    $10 = HEAP32[$0 + 12 >> 2] - 1 & $13;
   }
   $5 = Math_imul($7, 12) + $9 | 0;
   HEAP32[$5 + 8 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = $2;
   HEAP32[$5 >> 2] = $1;
   $1 = HEAP32[$0 + 56 >> 2] + ($7 << 2) | 0;
   $0 = HEAP32[$0 + 36 >> 2] + ($10 << 2) | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $7;
  }
  return $5 | 0;
 }
 
 function btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 16 >> 2];
 }
 
 function btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  HEAP32[$0 >> 2] = 16932;
  $1 = 8;
  $2 = HEAP32[$0 + 84 >> 2];
  $3 = HEAP32[$2 + 8 >> 2];
  if (($3 | 0) > 0) {
   while (1) {
    $4 = HEAP32[HEAP32[$2 + 16 >> 2] + $1 >> 2];
    if ($4) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] >> 2]]($4) | 0;
     $5 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 60 >> 2]]($5, $4);
    }
    $1 = $1 + 12 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
   $2 = HEAP32[$0 + 84 >> 2];
  }
  btHashedSimplePairCache__removeAllPairs_28_29($2);
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 84 >> 2]);
  $1 = HEAP32[$0 + 100 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 104 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP8[$0 + 104 | 0] = 1;
  $1 = $0 + 92 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0);
  return $0 | 0;
 }
 
 function btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29($0));
 }
 
 function btCompoundCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = 8;
  $0 = HEAP32[$0 + 84 >> 2];
  $3 = HEAP32[$0 + 8 >> 2];
  if (($3 | 0) > 0) {
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 16 >> 2] + $2 >> 2];
    if ($4) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1);
     $3 = HEAP32[$0 + 8 >> 2];
    }
    $2 = $2 + 12 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($3 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btCompoundCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0;
  $6 = __stack_pointer - 6160 | 0;
  __stack_pointer = $6;
  label$1 : {
   label$2 : {
    $45 = HEAP32[$1 + 4 >> 2];
    $9 = HEAP32[$45 + 104 >> 2];
    if ($9) {
     $46 = HEAP32[$2 + 4 >> 2];
     $36 = HEAP32[$46 + 104 >> 2];
     if ($36) {
      break label$2
     }
    }
    btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4);
    break label$1;
   }
   if (!(HEAP32[$45 + 108 >> 2] == HEAP32[$0 + 108 >> 2] & HEAP32[$46 + 108 >> 2] == HEAP32[$0 + 112 >> 2])) {
    $7 = 8;
    $5 = HEAP32[$0 + 84 >> 2];
    $11 = HEAP32[$5 + 8 >> 2];
    if (($11 | 0) > 0) {
     while (1) {
      $8 = HEAP32[HEAP32[$5 + 16 >> 2] + $7 >> 2];
      if ($8) {
       FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] >> 2]]($8) | 0;
       $22 = HEAP32[$0 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 60 >> 2]]($22, $8);
      }
      $7 = $7 + 12 | 0;
      $11 = $11 - 1 | 0;
      if ($11) {
       continue
      }
      break;
     };
     $5 = HEAP32[$0 + 84 >> 2];
    }
    btHashedSimplePairCache__removeAllPairs_28_29($5);
    HEAP32[$0 + 108 >> 2] = HEAP32[$45 + 108 >> 2];
    HEAP32[$0 + 112 >> 2] = HEAP32[$46 + 108 >> 2];
   }
   HEAP32[$6 + 148 >> 2] = 0;
   HEAP8[$6 + 152 | 0] = 1;
   btPersistentManifold__btPersistentManifold_28_29($6 + 176 | 0);
   btPersistentManifold__btPersistentManifold_28_29($6 + 1672 | 0);
   btPersistentManifold__btPersistentManifold_28_29($6 + 3168 | 0);
   btPersistentManifold__btPersistentManifold_28_29($6 + 4664 | 0);
   $5 = HEAP32[$6 + 148 >> 2];
   if (!(!$5 | !HEAPU8[$6 + 152 | 0])) {
    btAlignedFreeInternal_28void__29($5)
   }
   HEAP32[$6 + 140 >> 2] = 0;
   HEAP32[$6 + 144 >> 2] = 4;
   $22 = HEAP32[$0 + 84 >> 2];
   HEAP8[$6 + 152 | 0] = 0;
   $5 = HEAP32[$22 + 8 >> 2];
   HEAP32[$6 + 148 >> 2] = $6 + 176;
   label$10 : {
    if (($5 | 0) <= 0) {
     break label$10
    }
    while (1) {
     $8 = HEAP32[(HEAP32[$22 + 16 >> 2] + Math_imul($12, 12) | 0) + 8 >> 2];
     if ($8) {
      FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 16 >> 2]]($8, $6 + 136 | 0);
      $8 = HEAP32[$6 + 140 >> 2];
      if (($8 | 0) > 0) {
       $7 = 0;
       $11 = 0;
       while (1) {
        $5 = HEAP32[HEAP32[$6 + 148 >> 2] + $7 >> 2];
        if (HEAP32[$5 + 1456 >> 2]) {
         HEAP32[$4 + 4 >> 2] = $5;
         $20 = HEAP32[$5 + 1448 >> 2];
         $21 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
         $8 = ($20 | 0) == ($21 | 0);
         $37 = $5;
         $5 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
         btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($37, ($8 ? $20 : $5) + 8 | 0, ($8 ? $5 : $21) + 8 | 0);
         HEAP32[$4 + 4 >> 2] = 0;
         $8 = HEAP32[$6 + 140 >> 2];
        }
        $7 = $7 + 4 | 0;
        $11 = $11 + 1 | 0;
        if (($8 | 0) > ($11 | 0)) {
         continue
        }
        break;
       };
      }
      label$16 : {
       if (($8 | 0) >= 0) {
        break label$16
       }
       if (HEAP32[$6 + 144 >> 2] < 0) {
        $5 = HEAP32[$6 + 148 >> 2];
        if (!(!$5 | !HEAPU8[$6 + 152 | 0])) {
         btAlignedFreeInternal_28void__29($5)
        }
        HEAP8[$6 + 152 | 0] = 1;
        HEAP32[$6 + 144 >> 2] = 0;
        HEAP32[$6 + 148 >> 2] = 0;
       }
       $5 = $8;
       $11 = 0 - $5 & 3;
       if ($11) {
        $7 = $8 << 2;
        while (1) {
         HEAP32[HEAP32[$6 + 148 >> 2] + $7 >> 2] = 0;
         $7 = $7 + 4 | 0;
         $5 = $5 + 1 | 0;
         $11 = $11 - 1 | 0;
         if ($11) {
          continue
         }
         break;
        };
       }
       if ($8 >>> 0 > 4294967292) {
        break label$16
       }
       $7 = $5 << 2;
       while (1) {
        HEAP32[HEAP32[$6 + 148 >> 2] + $7 >> 2] = 0;
        HEAP32[(HEAP32[$6 + 148 >> 2] + $7 | 0) + 4 >> 2] = 0;
        HEAP32[(HEAP32[$6 + 148 >> 2] + $7 | 0) + 8 >> 2] = 0;
        HEAP32[(HEAP32[$6 + 148 >> 2] + $7 | 0) + 12 >> 2] = 0;
        $7 = $7 + 16 | 0;
        $5 = $5 + 4 | 0;
        if ($5) {
         continue
        }
        break;
       };
      }
      HEAP32[$6 + 140 >> 2] = 0;
      $5 = HEAP32[$22 + 8 >> 2];
     }
     $12 = $12 + 1 | 0;
     if (($12 | 0) < ($5 | 0)) {
      continue
     }
     break;
    };
    $5 = HEAP32[$6 + 148 >> 2];
    if (!$5 | !HEAPU8[$6 + 152 | 0]) {
     break label$10
    }
    btAlignedFreeInternal_28void__29($5);
   }
   HEAP32[$6 + 156 >> 2] = $3;
   HEAP32[$6 + 140 >> 2] = 0;
   HEAP32[$6 + 136 >> 2] = 17012;
   HEAP32[$6 + 152 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$6 + 168 >> 2] = HEAP32[$0 + 72 >> 2];
   HEAP32[$6 + 164 >> 2] = HEAP32[$0 + 84 >> 2];
   HEAP32[$6 + 144 >> 2] = $1;
   $3 = HEAP32[$1 + 12 >> 2];
   $13 = HEAPF64[$3 + 80 >> 3];
   HEAP32[$6 + 148 >> 2] = $2;
   $5 = HEAP32[$2 + 12 >> 2];
   $10 = HEAPF64[$5 + 112 >> 3];
   $32 = HEAPF64[$5 + 104 >> 3];
   $14 = HEAPF64[$3 + 48 >> 3];
   $18 = HEAPF64[$3 + 16 >> 3];
   $26 = HEAPF64[$5 + 96 >> 3];
   $33 = HEAPF64[$3 + 112 >> 3];
   $27 = HEAPF64[$3 + 104 >> 3];
   $38 = HEAPF64[$3 + 96 >> 3];
   $15 = HEAPF64[$3 + 72 >> 3];
   $16 = HEAPF64[$3 + 40 >> 3];
   $19 = HEAPF64[$3 + 8 >> 3];
   $28 = HEAPF64[$5 + 80 >> 3];
   $34 = HEAPF64[$5 + 48 >> 3];
   $29 = HEAPF64[$5 + 16 >> 3];
   $35 = HEAPF64[$5 + 72 >> 3];
   $24 = HEAPF64[$5 + 40 >> 3];
   $30 = HEAPF64[$5 + 8 >> 3];
   $23 = HEAPF64[$3 >> 3];
   $25 = HEAPF64[$3 + 32 >> 3];
   $17 = HEAPF64[$3 + 64 >> 3];
   $31 = HEAPF64[$5 + 32 >> 3];
   $39 = HEAPF64[$5 >> 3];
   $42 = HEAPF64[$5 + 64 >> 3];
   HEAP32[$6 + 160 >> 2] = $4;
   $3 = HEAP32[$9 >> 2];
   label$22 : {
    if (!$3) {
     break label$22
    }
    $5 = HEAP32[$36 >> 2];
    if (!$5) {
     break label$22
    }
    $38 = -$38;
    $47 = $18 * $38 - $14 * $27 - $13 * $33 + ($10 * $13 + ($26 * $18 + $14 * $32));
    $53 = $19 * $38 - $16 * $27 - $15 * $33 + ($10 * $15 + ($26 * $19 + $16 * $32));
    $32 = $23 * $38 - $25 * $27 - $17 * $33 + ($10 * $17 + ($26 * $23 + $25 * $32));
    $10 = HEAPF64[$4 + 32 >> 3];
    HEAP32[$6 + 180 >> 2] = $5;
    HEAP32[$6 + 176 >> 2] = $3;
    $26 = $28 * $13 + ($29 * $18 + $14 * $34);
    $33 = Math_abs($26);
    $27 = $35 * $13 + ($30 * $18 + $14 * $24);
    $38 = Math_abs($27);
    $49 = $42 * $13 + ($39 * $18 + $14 * $31);
    $54 = Math_abs($49);
    $50 = $28 * $15 + ($29 * $19 + $16 * $34);
    $55 = Math_abs($50);
    $51 = $35 * $15 + ($30 * $19 + $16 * $24);
    $56 = Math_abs($51);
    $52 = $42 * $15 + ($39 * $19 + $16 * $31);
    $57 = Math_abs($52);
    $28 = $28 * $17 + ($29 * $23 + $25 * $34);
    $34 = Math_abs($28);
    $29 = $35 * $17 + ($30 * $23 + $25 * $24);
    $35 = Math_abs($29);
    $23 = $42 * $17 + ($39 * $23 + $25 * $31);
    $25 = Math_abs($23);
    $12 = 124;
    $22 = 0;
    $7 = 128;
    $5 = $6 + 176 | 0;
    $9 = 128;
    $11 = 1;
    while (1) {
     label$24 : {
      label$25 : {
       label$26 : {
        $36 = $11 - 1 | 0;
        $43 = $36 << 3;
        $3 = $43 + $5 | 0;
        $21 = HEAP32[$3 >> 2];
        $20 = HEAP32[$3 + 4 >> 2];
        $15 = HEAPF64[$20 + 48 >> 3];
        $16 = HEAPF64[$20 + 16 >> 3];
        $13 = ($15 - $16) * .5 + 0.0;
        $19 = HEAPF64[$20 + 32 >> 3];
        $17 = HEAPF64[$20 >> 3];
        $14 = ($19 - $17) * .5 + 0.0;
        $24 = HEAPF64[$20 + 40 >> 3];
        $30 = HEAPF64[$20 + 8 >> 3];
        $18 = ($24 - $30) * .5 + 0.0;
        $31 = $13 * $34 + ($14 * $25 + $35 * $18);
        $15 = ($15 + $16) * .5;
        $16 = ($19 + $17) * .5;
        $19 = ($24 + $30) * .5;
        $17 = $32 + ($15 * $28 + ($16 * $23 + $29 * $19));
        label$27 : {
         if (!(HEAPF64[$21 >> 3] <= $10 + ($31 + $17)) | !(HEAPF64[$21 + 32 >> 3] >= $17 - $31 - $10)) {
          break label$27
         }
         $17 = $13 * $55 + ($14 * $57 + $56 * $18);
         $24 = $53 + ($15 * $50 + ($16 * $52 + $51 * $19));
         if (!(HEAPF64[$21 + 8 >> 3] <= $10 + ($17 + $24)) | !(HEAPF64[$21 + 40 >> 3] >= $24 - $17 - $10)) {
          break label$27
         }
         $13 = $13 * $33 + ($14 * $54 + $38 * $18);
         $14 = $47 + ($15 * $26 + ($16 * $49 + $27 * $19));
         if (!(HEAPF64[$21 + 16 >> 3] <= $10 + ($13 + $14)) | !(HEAPF64[$21 + 48 >> 3] >= $14 - $13 - $10)) {
          break label$27
         }
         label$28 : {
          if (($12 | 0) >= ($36 | 0)) {
           $8 = $7;
           $3 = $5;
           break label$28;
          }
          $8 = $7 << 1;
          label$30 : {
           if (($7 | 0) >= ($8 | 0)) {
            $3 = $5;
            break label$30;
           }
           if (($8 | 0) <= ($9 | 0)) {
            $3 = $5;
            break label$30;
           }
           label$33 : {
            if (!$7) {
             $3 = 0;
             break label$33;
            }
            $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 4);
            if (($7 | 0) <= 0) {
             break label$33
            }
            $40 = $7 & 3;
            $9 = 0;
            if ($7 - 1 >>> 0 >= 3) {
             $58 = $7 & -4;
             $7 = 0;
             while (1) {
              $41 = $5 + $7 | 0;
              $37 = HEAP32[$41 + 4 >> 2];
              $12 = $3 + $7 | 0;
              HEAP32[$12 >> 2] = HEAP32[$41 >> 2];
              HEAP32[$12 + 4 >> 2] = $37;
              $44 = $41 + 8 | 0;
              $48 = HEAP32[$44 + 4 >> 2];
              $37 = $12 + 8 | 0;
              HEAP32[$37 >> 2] = HEAP32[$44 >> 2];
              HEAP32[$37 + 4 >> 2] = $48;
              $44 = $41 + 16 | 0;
              $48 = HEAP32[$44 + 4 >> 2];
              $37 = $12 + 16 | 0;
              HEAP32[$37 >> 2] = HEAP32[$44 >> 2];
              HEAP32[$37 + 4 >> 2] = $48;
              $41 = $41 + 24 | 0;
              $37 = HEAP32[$41 + 4 >> 2];
              $12 = $12 + 24 | 0;
              HEAP32[$12 >> 2] = HEAP32[$41 >> 2];
              HEAP32[$12 + 4 >> 2] = $37;
              $7 = $7 + 32 | 0;
              $9 = $9 + 4 | 0;
              if (($58 | 0) != ($9 | 0)) {
               continue
              }
              break;
             };
            }
            if (!$40) {
             break label$33
            }
            $9 = $9 << 3;
            $7 = $9 + $3 | 0;
            $12 = $5 + $9 | 0;
            while (1) {
             $9 = HEAP32[$12 + 4 >> 2];
             HEAP32[$7 >> 2] = HEAP32[$12 >> 2];
             HEAP32[$7 + 4 >> 2] = $9;
             $7 = $7 + 8 | 0;
             $12 = $12 + 8 | 0;
             $40 = $40 - 1 | 0;
             if ($40) {
              continue
             }
             break;
            };
           }
           $7 = $22;
           $22 = 1;
           if ($7) {
            btAlignedFreeInternal_28void__29($5)
           }
           $9 = $8;
          }
          $12 = $8 - 4 | 0;
         }
         $5 = HEAP32[$20 + 72 >> 2];
         if (HEAP32[$21 + 72 >> 2]) {
          $7 = HEAP32[$21 + 68 >> 2];
          if ($5) {
           $5 = $3 + $43 | 0;
           HEAP32[$5 + 4 >> 2] = HEAP32[$20 + 68 >> 2];
           HEAP32[$5 >> 2] = $7;
           $7 = HEAP32[$21 + 72 >> 2];
           $5 = ($11 << 3) + $3 | 0;
           HEAP32[$5 + 4 >> 2] = HEAP32[$20 + 68 >> 2];
           HEAP32[$5 >> 2] = $7;
           $7 = HEAP32[$21 + 68 >> 2];
           HEAP32[$5 + 12 >> 2] = HEAP32[$20 + 72 >> 2];
           HEAP32[$5 + 8 >> 2] = $7;
           $7 = HEAP32[$21 + 72 >> 2];
           HEAP32[$5 + 20 >> 2] = HEAP32[$20 + 72 >> 2];
           HEAP32[$5 + 16 >> 2] = $7;
           $11 = $11 + 3 | 0;
           break label$25;
          }
          $5 = $3 + $43 | 0;
          HEAP32[$5 + 4 >> 2] = $20;
          HEAP32[$5 >> 2] = $7;
          $5 = HEAP32[$21 + 72 >> 2];
          $7 = ($11 << 3) + $3 | 0;
          HEAP32[$7 + 4 >> 2] = $20;
          HEAP32[$7 >> 2] = $5;
          break label$26;
         }
         if ($5) {
          $5 = $3 + $43 | 0;
          HEAP32[$5 + 4 >> 2] = HEAP32[$20 + 68 >> 2];
          HEAP32[$5 >> 2] = $21;
          $5 = ($11 << 3) + $3 | 0;
          HEAP32[$5 + 4 >> 2] = HEAP32[$20 + 72 >> 2];
          HEAP32[$5 >> 2] = $21;
          break label$26;
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$6 + 136 >> 2] + 8 >> 2]]($6 + 136 | 0, $21, $20);
         $7 = $8;
         $5 = $3;
        }
        $11 = $36;
        break label$24;
       }
       $11 = $11 + 1 | 0;
      }
      $7 = $8;
      $5 = $3;
     }
     if ($11) {
      continue
     }
     break;
    };
    if (!$5 | !$22) {
     break label$22
    }
    btAlignedFreeInternal_28void__29($5);
   }
   $8 = HEAP32[$0 + 84 >> 2];
   if (HEAP32[$8 + 8 >> 2] > 0) {
    $11 = 0;
    while (1) {
     $22 = Math_imul($11, 12);
     $3 = $22 + HEAP32[$8 + 16 >> 2] | 0;
     $7 = HEAP32[$3 + 8 >> 2];
     label$44 : {
      if (!$7) {
       break label$44
      }
      $3 = HEAP32[$45 + 28 >> 2] + Math_imul(HEAP32[$3 >> 2], 152) | 0;
      $9 = HEAP32[$3 + 128 >> 2];
      $5 = HEAP32[$1 + 12 >> 2];
      $39 = HEAPF64[$5 + 104 >> 3];
      $42 = HEAPF64[$5 + 112 >> 3];
      $17 = HEAPF64[$3 + 96 >> 3];
      $32 = HEAPF64[$3 + 104 >> 3];
      $26 = HEAPF64[$3 + 112 >> 3];
      $33 = HEAPF64[$3 + 8 >> 3];
      $27 = HEAPF64[$3 + 40 >> 3];
      $28 = HEAPF64[$3 + 72 >> 3];
      $34 = HEAPF64[$3 + 16 >> 3];
      $29 = HEAPF64[$3 + 48 >> 3];
      $35 = HEAPF64[$3 + 80 >> 3];
      $10 = HEAPF64[$5 + 40 >> 3];
      $13 = HEAPF64[$5 + 48 >> 3];
      $24 = HEAPF64[$3 >> 3];
      $14 = HEAPF64[$5 + 72 >> 3];
      $30 = HEAPF64[$3 + 32 >> 3];
      $18 = HEAPF64[$5 + 80 >> 3];
      $31 = HEAPF64[$3 + 64 >> 3];
      $38 = HEAPF64[$5 + 96 >> 3];
      $15 = HEAPF64[$5 + 16 >> 3];
      $16 = HEAPF64[$5 >> 3];
      $19 = HEAPF64[$5 + 8 >> 3];
      $23 = HEAPF64[$5 + 32 >> 3];
      $25 = HEAPF64[$5 + 64 >> 3];
      HEAP32[$6 + 296 >> 2] = 0;
      HEAP32[$6 + 300 >> 2] = 0;
      HEAP32[$6 + 264 >> 2] = 0;
      HEAP32[$6 + 268 >> 2] = 0;
      HEAP32[$6 + 232 >> 2] = 0;
      HEAP32[$6 + 236 >> 2] = 0;
      HEAP32[$6 + 200 >> 2] = 0;
      HEAP32[$6 + 204 >> 2] = 0;
      HEAPF64[$6 + 240 >> 3] = $31 * $18 + ($24 * $25 + $14 * $30);
      HEAPF64[$6 + 208 >> 3] = $31 * $13 + ($24 * $23 + $10 * $30);
      HEAPF64[$6 + 176 >> 3] = $31 * $15 + ($24 * $16 + $19 * $30);
      HEAPF64[$6 + 256 >> 3] = $35 * $18 + ($34 * $25 + $14 * $29);
      HEAPF64[$6 + 248 >> 3] = $28 * $18 + ($33 * $25 + $14 * $27);
      HEAPF64[$6 + 224 >> 3] = $35 * $13 + ($34 * $23 + $10 * $29);
      HEAPF64[$6 + 216 >> 3] = $28 * $13 + ($33 * $23 + $10 * $27);
      HEAPF64[$6 + 192 >> 3] = $35 * $15 + ($34 * $16 + $19 * $29);
      HEAPF64[$6 + 184 >> 3] = $28 * $15 + ($33 * $16 + $19 * $27);
      HEAPF64[$6 + 288 >> 3] = $42 + ($26 * $18 + ($17 * $25 + $14 * $32));
      HEAPF64[$6 + 280 >> 3] = $39 + ($26 * $13 + ($17 * $23 + $10 * $32));
      HEAPF64[$6 + 272 >> 3] = $38 + ($26 * $15 + ($17 * $16 + $19 * $32));
      $36 = $6 + 176 | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 8 >> 2]]($9, $36, $6 + 104 | 0, $6 + 72 | 0);
      $10 = HEAPF64[$4 + 32 >> 3];
      HEAPF64[$6 + 104 >> 3] = HEAPF64[$6 + 104 >> 3] - $10;
      HEAPF64[$6 + 112 >> 3] = HEAPF64[$6 + 112 >> 3] - $10;
      HEAPF64[$6 + 120 >> 3] = HEAPF64[$6 + 120 >> 3] - $10;
      HEAPF64[$6 + 72 >> 3] = $10 + HEAPF64[$6 + 72 >> 3];
      HEAPF64[$6 + 80 >> 3] = $10 + HEAPF64[$6 + 80 >> 3];
      HEAPF64[$6 + 88 >> 3] = $10 + HEAPF64[$6 + 88 >> 3];
      $3 = HEAP32[$46 + 28 >> 2] + Math_imul(HEAP32[($22 + HEAP32[$8 + 16 >> 2] | 0) + 4 >> 2], 152) | 0;
      $9 = HEAP32[$3 + 128 >> 2];
      $5 = HEAP32[$2 + 12 >> 2];
      $42 = HEAPF64[$5 + 104 >> 3];
      $38 = HEAPF64[$5 + 112 >> 3];
      $32 = HEAPF64[$3 + 96 >> 3];
      $26 = HEAPF64[$3 + 104 >> 3];
      $33 = HEAPF64[$3 + 112 >> 3];
      $27 = HEAPF64[$3 + 8 >> 3];
      $28 = HEAPF64[$3 + 40 >> 3];
      $34 = HEAPF64[$3 + 72 >> 3];
      $29 = HEAPF64[$3 + 16 >> 3];
      $35 = HEAPF64[$3 + 48 >> 3];
      $24 = HEAPF64[$3 + 80 >> 3];
      $13 = HEAPF64[$5 + 40 >> 3];
      $14 = HEAPF64[$5 + 48 >> 3];
      $30 = HEAPF64[$3 >> 3];
      $18 = HEAPF64[$5 + 72 >> 3];
      $31 = HEAPF64[$3 + 32 >> 3];
      $15 = HEAPF64[$5 + 80 >> 3];
      $39 = HEAPF64[$3 + 64 >> 3];
      $47 = HEAPF64[$5 + 96 >> 3];
      $16 = HEAPF64[$5 + 16 >> 3];
      $19 = HEAPF64[$5 >> 3];
      $23 = HEAPF64[$5 + 8 >> 3];
      $25 = HEAPF64[$5 + 32 >> 3];
      $17 = HEAPF64[$5 + 64 >> 3];
      HEAP32[$6 + 296 >> 2] = 0;
      HEAP32[$6 + 300 >> 2] = 0;
      HEAP32[$6 + 264 >> 2] = 0;
      HEAP32[$6 + 268 >> 2] = 0;
      HEAP32[$6 + 232 >> 2] = 0;
      HEAP32[$6 + 236 >> 2] = 0;
      HEAP32[$6 + 200 >> 2] = 0;
      HEAP32[$6 + 204 >> 2] = 0;
      HEAPF64[$6 + 240 >> 3] = $39 * $15 + ($30 * $17 + $18 * $31);
      HEAPF64[$6 + 208 >> 3] = $39 * $14 + ($30 * $25 + $13 * $31);
      HEAPF64[$6 + 176 >> 3] = $39 * $16 + ($30 * $19 + $23 * $31);
      HEAPF64[$6 + 256 >> 3] = $24 * $15 + ($29 * $17 + $18 * $35);
      HEAPF64[$6 + 248 >> 3] = $34 * $15 + ($27 * $17 + $18 * $28);
      HEAPF64[$6 + 224 >> 3] = $24 * $14 + ($29 * $25 + $13 * $35);
      HEAPF64[$6 + 216 >> 3] = $34 * $14 + ($27 * $25 + $13 * $28);
      HEAPF64[$6 + 192 >> 3] = $24 * $16 + ($29 * $19 + $23 * $35);
      HEAPF64[$6 + 184 >> 3] = $34 * $16 + ($27 * $19 + $23 * $28);
      HEAPF64[$6 + 288 >> 3] = $38 + ($33 * $15 + ($32 * $17 + $18 * $26));
      HEAPF64[$6 + 280 >> 3] = $42 + ($33 * $14 + ($32 * $25 + $13 * $26));
      HEAPF64[$6 + 272 >> 3] = $47 + ($33 * $16 + ($32 * $19 + $23 * $26));
      FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 8 >> 2]]($9, $36, $6 + 40 | 0, $6 + 8 | 0);
      $13 = HEAPF64[$6 + 40 >> 3] - $10;
      HEAPF64[$6 + 40 >> 3] = $13;
      $14 = HEAPF64[$6 + 48 >> 3] - $10;
      HEAPF64[$6 + 48 >> 3] = $14;
      $18 = HEAPF64[$6 + 56 >> 3] - $10;
      HEAPF64[$6 + 56 >> 3] = $18;
      $15 = $10 + HEAPF64[$6 + 8 >> 3];
      HEAPF64[$6 + 8 >> 3] = $15;
      $16 = $10 + HEAPF64[$6 + 24 >> 3];
      HEAPF64[$6 + 24 >> 3] = $16;
      $10 = $10 + HEAPF64[$6 + 16 >> 3];
      HEAPF64[$6 + 16 >> 3] = $10;
      label$45 : {
       if ($10 < HEAPF64[$6 + 112 >> 3] | $14 > HEAPF64[$6 + 80 >> 3] | ($16 < HEAPF64[$6 + 120 >> 3] | $18 > HEAPF64[$6 + 88 >> 3])) {
        break label$45
       }
       if ($15 < HEAPF64[$6 + 104 >> 3]) {
        break label$45
       }
       if (!($13 > HEAPF64[$6 + 72 >> 3])) {
        break label$44
       }
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7) | 0;
      $3 = HEAP32[$0 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 60 >> 2]]($3, $7);
      $3 = $22 + HEAP32[$8 + 16 >> 2] | 0;
      $36 = HEAP32[$3 + 4 >> 2];
      $20 = HEAP32[$3 >> 2];
      $7 = HEAP32[$0 + 92 >> 2];
      label$46 : {
       if (($7 | 0) != HEAP32[$0 + 96 >> 2]) {
        break label$46
       }
       $22 = $7 ? $7 << 1 : 1;
       if (($22 | 0) <= ($7 | 0)) {
        break label$46
       }
       label$47 : {
        if (!$22) {
         $12 = 0;
         break label$47;
        }
        $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($22, 12));
        $7 = HEAP32[$0 + 92 >> 2];
       }
       label$49 : {
        if (($7 | 0) <= 0) {
         break label$49
        }
        $21 = $7 & 1;
        $5 = 0;
        if (($7 | 0) != 1) {
         $43 = $7 & -2;
         $7 = 0;
         while (1) {
          $9 = HEAP32[$0 + 100 >> 2] + $7 | 0;
          $40 = HEAP32[$9 + 4 >> 2];
          $3 = $7 + $12 | 0;
          HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
          HEAP32[$3 + 4 >> 2] = $40;
          HEAP32[$3 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
          $9 = HEAP32[$0 + 100 >> 2] + $7 | 0;
          HEAP32[$3 + 20 >> 2] = HEAP32[$9 + 20 >> 2];
          $9 = $9 + 12 | 0;
          $40 = HEAP32[$9 + 4 >> 2];
          $3 = $3 + 12 | 0;
          HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
          HEAP32[$3 + 4 >> 2] = $40;
          $7 = $7 + 24 | 0;
          $5 = $5 + 2 | 0;
          if (($43 | 0) != ($5 | 0)) {
           continue
          }
          break;
         };
        }
        if (!$21) {
         break label$49
        }
        $5 = Math_imul($5, 12);
        $3 = $5 + $12 | 0;
        $5 = $5 + HEAP32[$0 + 100 >> 2] | 0;
        $7 = HEAP32[$5 + 4 >> 2];
        HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$3 + 4 >> 2] = $7;
        HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
       }
       $3 = HEAP32[$0 + 100 >> 2];
       if (!(!$3 | !HEAPU8[$0 + 104 | 0])) {
        btAlignedFreeInternal_28void__29($3)
       }
       HEAP32[$0 + 100 >> 2] = $12;
       HEAP8[$0 + 104 | 0] = 1;
       HEAP32[$0 + 96 >> 2] = $22;
       $7 = HEAP32[$0 + 92 >> 2];
      }
      $3 = HEAP32[$0 + 100 >> 2] + Math_imul($7, 12) | 0;
      HEAP32[$3 + 8 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = $36;
      HEAP32[$3 >> 2] = $20;
      HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 92 >> 2] + 1;
     }
     $11 = $11 + 1 | 0;
     if (($11 | 0) < HEAP32[$8 + 8 >> 2]) {
      continue
     }
     break;
    };
   }
   if (HEAP32[$0 + 92 >> 2] > 0) {
    $5 = 0;
    $7 = 4;
    while (1) {
     $1 = HEAP32[$0 + 84 >> 2];
     $2 = HEAP32[$0 + 100 >> 2] + $7 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$2 - 4 >> 2], HEAP32[$2 >> 2]) | 0;
     $7 = $7 + 12 | 0;
     $5 = $5 + 1 | 0;
     if (($5 | 0) < HEAP32[$0 + 92 >> 2]) {
      continue
     }
     break;
    };
   }
   $1 = HEAP32[$0 + 100 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 104 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 100 >> 2] = 0;
   HEAP8[$0 + 104 | 0] = 1;
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 96 >> 2] = 0;
  }
  __stack_pointer = $6 + 6160 | 0;
 }
 
 function btCompoundCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return 0.0;
 }
 
 function btCompoundCompoundLeafCallback__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 448 | 0;
  __stack_pointer = $3;
  CProfileSample__CProfileSample_28char_20const__29($3 + 440 | 0, 2897);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $29 = HEAP32[$2 + 68 >> 2];
  $30 = Math_imul($29, 152);
  $5 = HEAP32[$0 + 12 >> 2];
  $31 = HEAP32[$5 + 4 >> 2] + 28 | 0;
  $16 = HEAP32[($30 + HEAP32[$31 >> 2] | 0) + 128 >> 2];
  $4 = HEAP32[$0 + 8 >> 2];
  $1 = HEAP32[$1 + 68 >> 2];
  $2 = HEAP32[HEAP32[$4 + 4 >> 2] + 28 >> 2] + Math_imul($1, 152) | 0;
  $18 = HEAP32[$2 + 128 >> 2];
  $4 = HEAP32[$4 + 12 >> 2];
  $19 = HEAPF64[$4 + 104 >> 3];
  $10 = HEAPF64[$4 + 112 >> 3];
  $9 = HEAPF64[$4 + 48 >> 3];
  $11 = HEAPF64[$4 + 40 >> 3];
  $6 = HEAPF64[$4 + 80 >> 3];
  $7 = HEAPF64[$4 + 72 >> 3];
  $32 = HEAPF64[$4 + 96 >> 3];
  $12 = HEAPF64[$4 + 16 >> 3];
  $13 = HEAPF64[$4 >> 3];
  $14 = HEAPF64[$4 + 8 >> 3];
  $15 = HEAPF64[$4 + 32 >> 3];
  $8 = HEAPF64[$4 + 64 >> 3];
  $4 = $3 + 312 | 0;
  $17 = $4 + 120 | 0;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$17 + 4 >> 2] = 0;
  $17 = $4 + 88 | 0;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$17 + 4 >> 2] = 0;
  $17 = $4 + 56 | 0;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$17 + 4 >> 2] = 0;
  $20 = HEAPF64[$2 + 80 >> 3];
  $21 = HEAPF64[$2 + 16 >> 3];
  $22 = HEAPF64[$2 + 48 >> 3];
  HEAPF64[$4 + 80 >> 3] = $6 * $20 + ($8 * $21 + $7 * $22);
  $23 = HEAPF64[$2 + 72 >> 3];
  $24 = HEAPF64[$2 + 8 >> 3];
  $25 = HEAPF64[$2 + 40 >> 3];
  HEAPF64[$4 + 72 >> 3] = $6 * $23 + ($8 * $24 + $7 * $25);
  HEAPF64[$4 + 48 >> 3] = $20 * $9 + ($21 * $15 + $11 * $22);
  HEAPF64[$4 + 40 >> 3] = $23 * $9 + ($24 * $15 + $11 * $25);
  $26 = $10;
  $10 = HEAPF64[$2 + 112 >> 3];
  $27 = HEAPF64[$2 + 96 >> 3];
  $28 = HEAPF64[$2 + 104 >> 3];
  HEAPF64[$4 + 112 >> 3] = $26 + ($6 * $10 + ($8 * $27 + $7 * $28));
  HEAPF64[$4 + 104 >> 3] = $19 + ($10 * $9 + ($27 * $15 + $11 * $28));
  HEAP32[$3 + 336 >> 2] = 0;
  HEAP32[$3 + 340 >> 2] = 0;
  $33 = $6;
  $6 = HEAPF64[$2 + 64 >> 3];
  $19 = $8;
  $8 = HEAPF64[$2 >> 3];
  $26 = $7;
  $7 = HEAPF64[$2 + 32 >> 3];
  HEAPF64[$3 + 376 >> 3] = $33 * $6 + ($19 * $8 + $26 * $7);
  HEAPF64[$3 + 344 >> 3] = $6 * $9 + ($8 * $15 + $11 * $7);
  HEAPF64[$3 + 328 >> 3] = $20 * $12 + ($21 * $13 + $14 * $22);
  HEAPF64[$3 + 320 >> 3] = $23 * $12 + ($24 * $13 + $14 * $25);
  HEAPF64[$3 + 312 >> 3] = $6 * $12 + ($8 * $13 + $14 * $7);
  HEAPF64[$3 + 408 >> 3] = $32 + ($10 * $12 + ($27 * $13 + $14 * $28));
  $2 = HEAP32[$5 + 12 >> 2];
  $19 = HEAPF64[$2 + 104 >> 3];
  $10 = HEAPF64[$2 + 112 >> 3];
  $9 = HEAPF64[$2 + 48 >> 3];
  $11 = HEAPF64[$2 + 40 >> 3];
  $6 = HEAPF64[$2 + 80 >> 3];
  $7 = HEAPF64[$2 + 72 >> 3];
  $31 = HEAP32[$31 >> 2];
  $32 = HEAPF64[$2 + 96 >> 3];
  $12 = HEAPF64[$2 + 16 >> 3];
  $13 = HEAPF64[$2 >> 3];
  $14 = HEAPF64[$2 + 8 >> 3];
  $15 = HEAPF64[$2 + 32 >> 3];
  $8 = HEAPF64[$2 + 64 >> 3];
  $5 = $3 + 184 | 0;
  $2 = $5 + 120 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $5 + 88 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $5 + 56 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $30 + $31 | 0;
  $20 = HEAPF64[$2 + 80 >> 3];
  $21 = HEAPF64[$2 + 16 >> 3];
  $22 = HEAPF64[$2 + 48 >> 3];
  HEAPF64[$5 + 80 >> 3] = $6 * $20 + ($8 * $21 + $7 * $22);
  $23 = HEAPF64[$2 + 72 >> 3];
  $24 = HEAPF64[$2 + 8 >> 3];
  $25 = HEAPF64[$2 + 40 >> 3];
  HEAPF64[$5 + 72 >> 3] = $6 * $23 + ($8 * $24 + $7 * $25);
  HEAPF64[$5 + 48 >> 3] = $20 * $9 + ($21 * $15 + $11 * $22);
  HEAPF64[$5 + 40 >> 3] = $23 * $9 + ($24 * $15 + $11 * $25);
  $26 = $10;
  $10 = HEAPF64[$2 + 112 >> 3];
  $27 = HEAPF64[$2 + 96 >> 3];
  $28 = HEAPF64[$2 + 104 >> 3];
  HEAPF64[$5 + 112 >> 3] = $26 + ($6 * $10 + ($8 * $27 + $7 * $28));
  HEAPF64[$5 + 104 >> 3] = $19 + ($10 * $9 + ($27 * $15 + $11 * $28));
  HEAP32[$3 + 208 >> 2] = 0;
  HEAP32[$3 + 212 >> 2] = 0;
  $33 = $6;
  $6 = HEAPF64[$2 + 64 >> 3];
  $19 = $8;
  $8 = HEAPF64[$2 >> 3];
  $26 = $7;
  $7 = HEAPF64[$2 + 32 >> 3];
  HEAPF64[$3 + 248 >> 3] = $33 * $6 + ($19 * $8 + $26 * $7);
  HEAPF64[$3 + 216 >> 3] = $6 * $9 + ($8 * $15 + $11 * $7);
  HEAPF64[$3 + 200 >> 3] = $20 * $12 + ($21 * $13 + $14 * $22);
  HEAPF64[$3 + 192 >> 3] = $23 * $12 + ($24 * $13 + $14 * $25);
  HEAPF64[$3 + 184 >> 3] = $6 * $12 + ($8 * $13 + $14 * $7);
  HEAPF64[$3 + 280 >> 3] = $32 + ($10 * $12 + ($27 * $13 + $14 * $28));
  FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 8 >> 2]]($18, $4, $3 + 152 | 0, $3 + 120 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 8 >> 2]]($16, $5, $3 + 88 | 0, $3 + 56 | 0);
  $9 = HEAPF64[HEAP32[$0 + 24 >> 2] + 32 >> 3];
  $11 = HEAPF64[$3 + 152 >> 3] - $9;
  HEAPF64[$3 + 152 >> 3] = $11;
  HEAPF64[$3 + 160 >> 3] = HEAPF64[$3 + 160 >> 3] - $9;
  HEAPF64[$3 + 168 >> 3] = HEAPF64[$3 + 168 >> 3] - $9;
  HEAPF64[$3 + 120 >> 3] = $9 + HEAPF64[$3 + 120 >> 3];
  HEAPF64[$3 + 128 >> 3] = $9 + HEAPF64[$3 + 128 >> 3];
  HEAPF64[$3 + 136 >> 3] = $9 + HEAPF64[$3 + 136 >> 3];
  $2 = HEAP32[8413];
  label$1 : {
   if ($2) {
    if (!(FUNCTION_TABLE[$2 | 0]($18, $16) | 0)) {
     break label$1
    }
    $10 = HEAPF64[$3 + 152 >> 3];
   } else {
    $10 = $11
   }
   if ((HEAPF64[$3 + 136 >> 3] < HEAPF64[$3 + 104 >> 3] | HEAPF64[$3 + 168 >> 3] > HEAPF64[$3 + 72 >> 3] ? 1 : $10 > HEAPF64[$3 + 56 >> 3] | HEAPF64[$3 + 120 >> 3] < HEAPF64[$3 + 88 >> 3]) | HEAPF64[$3 + 128 >> 3] < HEAPF64[$3 + 96 >> 3] | HEAPF64[$3 + 160 >> 3] > HEAPF64[$3 + 64 >> 3]) {
    break label$1
   }
   HEAP32[$3 + 52 >> 2] = $1;
   HEAP32[$3 + 48 >> 2] = -1;
   HEAP32[$3 + 36 >> 2] = $18;
   $2 = HEAP32[$0 + 8 >> 2];
   HEAP32[$3 + 32 >> 2] = $2;
   HEAP32[$3 + 40 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$3 + 44 >> 2] = $3 + 312;
   HEAP32[$3 + 28 >> 2] = $29;
   HEAP32[$3 + 24 >> 2] = -1;
   HEAP32[$3 + 12 >> 2] = $16;
   $2 = HEAP32[$0 + 12 >> 2];
   HEAP32[$3 + 8 >> 2] = $2;
   HEAP32[$3 + 16 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$3 + 20 >> 2] = $3 + 184;
   $2 = HEAP32[$0 + 28 >> 2];
   HEAP32[8412] = HEAP32[8412] + 1;
   $4 = $29 << 16 | $1;
   $4 = ($4 << 15 ^ -1) + $4 | 0;
   $4 = Math_imul($4 >>> 10 ^ $4, 9);
   $4 = $4 >>> 6 ^ $4;
   $4 = ($4 << 11 ^ -1) + $4 | 0;
   $4 = HEAP32[$2 + 12 >> 2] - 1 & ($4 >>> 16 ^ $4);
   label$10 : {
    label$2 : {
     if (($4 | 0) >= HEAP32[$2 + 28 >> 2]) {
      break label$2
     }
     $4 = HEAP32[HEAP32[$2 + 36 >> 2] + ($4 << 2) >> 2];
     if (($4 | 0) == -1) {
      break label$2
     }
     $5 = HEAP32[$2 + 56 >> 2];
     $16 = HEAP32[$2 + 16 >> 2];
     while (1) {
      $2 = Math_imul($4, 12) + $16 | 0;
      if (($1 | 0) == HEAP32[$2 >> 2] & HEAP32[$2 + 4 >> 2] == ($29 | 0)) {
       break label$10
      }
      $4 = HEAP32[($4 << 2) + $5 >> 2];
      if (($4 | 0) != -1) {
       continue
      }
      break;
     };
    }
    $2 = 0;
   }
   label$5 : {
    if (HEAPF64[HEAP32[$0 + 24 >> 2] + 32 >> 3] > 0.0) {
     $2 = HEAP32[$0 + 16 >> 2];
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $3 + 32 | 0, $3 + 8 | 0, 0, 2) | 0;
     break label$5;
    }
    if ($2) {
     $2 = HEAP32[$2 + 8 >> 2];
     break label$5;
    }
    $2 = HEAP32[$0 + 16 >> 2];
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $3 + 32 | 0, $3 + 8 | 0, HEAP32[$0 + 32 >> 2], 1) | 0;
    $4 = HEAP32[$0 + 28 >> 2];
    (wasm2js_i32$0 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $1, $29) | 0, wasm2js_i32$1 = $2), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   }
   $4 = HEAP32[$0 + 24 >> 2];
   $5 = HEAP32[$4 + 12 >> 2];
   $16 = HEAP32[$4 + 8 >> 2];
   $18 = $3 + 8 | 0;
   HEAP32[$4 + 12 >> 2] = $18;
   $30 = $3 + 32 | 0;
   HEAP32[$4 + 8 >> 2] = $30;
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, -1, $1);
   $1 = HEAP32[$0 + 24 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, -1, $29);
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $30, $18, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
   $0 = HEAP32[$0 + 24 >> 2];
   HEAP32[$0 + 8 >> 2] = $16;
   HEAP32[$0 + 12 >> 2] = $5;
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $3 + 448 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17156;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17156;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btSphereSphereCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$0) {
    break label$1
   }
   HEAP32[$4 + 4 >> 2] = $0;
   $6 = HEAP32[$1 + 12 >> 2];
   $8 = HEAP32[$2 + 12 >> 2];
   $9 = HEAPF64[$6 + 112 >> 3] - HEAPF64[$8 + 112 >> 3];
   $12 = HEAPF64[$6 + 96 >> 3] - HEAPF64[$8 + 96 >> 3];
   $10 = HEAPF64[$6 + 104 >> 3] - HEAPF64[$8 + 104 >> 3];
   $5 = $9 * $9 + ($12 * $12 + $10 * $10);
   $6 = HEAP32[$2 + 4 >> 2];
   $11 = HEAPF64[$6 + 16 >> 3];
   $7 = HEAPF64[$6 + 48 >> 3];
   $1 = HEAP32[$1 + 4 >> 2];
   $13 = HEAPF64[$1 + 16 >> 3];
   $14 = HEAPF64[$1 + 48 >> 3];
   $6 = HEAP32[$0 + 1456 >> 2];
   if (($6 | 0) > 0) {
    $1 = $0 + 8 | 0;
    $8 = 0;
    while (1) {
     btPersistentManifold__clearUserCache_28btManifoldPoint__29($1);
     $1 = $1 + 360 | 0;
     $8 = $8 + 1 | 0;
     $6 = HEAP32[$0 + 1456 >> 2];
     if (($8 | 0) < ($6 | 0)) {
      continue
     }
     break;
    };
   }
   $5 = Math_sqrt($5);
   $11 = $7 * $11;
   $7 = $14 * $13;
   $1 = HEAP32[7896];
   if (!(!$1 | !$6)) {
    HEAP32[$3 + 32 >> 2] = $0;
    FUNCTION_TABLE[$1 | 0]($3 + 32 | 0);
   }
   HEAP32[$0 + 1456 >> 2] = 0;
   $7 = $7 + $11;
   if ($5 > $7 + HEAPF64[$4 + 32 >> 3]) {
    break label$1
   }
   $0 = $3 + 48 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $3 + 56 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$3 + 40 >> 2] = 0;
   HEAP32[$3 + 44 >> 2] = 0;
   HEAP32[$3 + 32 >> 2] = 0;
   HEAP32[$3 + 36 >> 2] = 1072693248;
   $7 = $5 - $7;
   label$5 : {
    if (!($5 > 2.220446049250313e-16)) {
     $5 = 1.0;
     $9 = 0.0;
     $10 = 0.0;
     break label$5;
    }
    $5 = 1.0 / $5;
    $9 = $9 * $5;
    HEAPF64[$3 + 48 >> 3] = $9;
    $10 = $10 * $5;
    HEAPF64[$3 + 40 >> 3] = $10;
    $5 = $12 * $5;
    HEAPF64[$3 + 32 >> 3] = $5;
   }
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 28 >> 2] = 0;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAPF64[$3 + 16 >> 3] = $11 * $9 + HEAPF64[$0 + 112 >> 3];
   HEAPF64[$3 >> 3] = $11 * $5 + HEAPF64[$0 + 96 >> 3];
   HEAPF64[$3 + 8 >> 3] = $11 * $10 + HEAPF64[$0 + 104 >> 3];
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $3 + 32 | 0, $3, $7);
  }
  __stack_pointer = $3 - -64 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = HEAP32[$0 + 12 >> 2];
  if (!(!$2 | !HEAPU8[$0 + 8 | 0])) {
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($4 | 0) <= ($3 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    label$5 : {
     if (($3 | 0) <= 0) {
      break label$5
     }
     $5 = $3 & 3;
     if ($3 - 1 >>> 0 >= 3) {
      $9 = $3 & -4;
      $2 = 0;
      while (1) {
       $6 = $2 + $7 | 0;
       HEAP32[$6 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 8 >> 2];
       HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 12 >> 2];
       $2 = $2 + 16 | 0;
       $8 = $8 + 4 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$5
     }
     $2 = $8 << 2;
     while (1) {
      HEAP32[$2 + $7 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if (!(!$2 | !HEAPU8[$1 + 16 | 0])) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = $7;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 12 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0;
  $3 = __stack_pointer - 272 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 200 >> 2] = 0;
  HEAP32[$3 + 204 >> 2] = 0;
  $7 = HEAPF64[$1 + 160 >> 3];
  $5 = HEAPF64[$1 + 192 >> 3];
  $13 = HEAPF64[$1 + 240 >> 3];
  $25 = HEAPF64[$1 + 112 >> 3];
  $33 = HEAPF64[$1 + 224 >> 3];
  $37 = HEAPF64[$1 + 232 >> 3];
  $30 = HEAPF64[$1 + 104 >> 3];
  $6 = HEAPF64[$1 + 136 >> 3];
  $8 = HEAPF64[$1 + 168 >> 3];
  $12 = HEAPF64[$1 + 200 >> 3];
  $10 = HEAPF64[$1 + 40 >> 3];
  $21 = HEAPF64[$1 + 72 >> 3];
  $17 = HEAPF64[$1 + 144 >> 3];
  $14 = HEAPF64[$1 + 176 >> 3];
  $22 = HEAPF64[$1 + 48 >> 3];
  $15 = HEAPF64[$1 + 208 >> 3];
  $26 = HEAPF64[$1 + 80 >> 3];
  $16 = HEAPF64[$1 + 128 >> 3];
  $27 = HEAPF64[$1 + 64 >> 3];
  $20 = HEAPF64[$1 >> 3];
  $28 = HEAPF64[$1 + 32 >> 3];
  $36 = HEAPF64[$1 + 96 >> 3];
  $18 = HEAPF64[$1 + 8 >> 3];
  $29 = HEAPF64[$1 + 16 >> 3];
  $9 = $3 + 192 | 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  $9 = $3 + 160 | 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  $9 = $3 + 128 | 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  $9 = $3 + 72 | 0;
  HEAPF64[$9 + 80 >> 3] = $15 * $26 + ($17 * $29 + $22 * $14);
  HEAPF64[$9 + 72 >> 3] = $15 * $21 + ($17 * $18 + $10 * $14);
  HEAPF64[$9 + 48 >> 3] = $12 * $26 + ($6 * $29 + $22 * $8);
  HEAPF64[$9 + 40 >> 3] = $12 * $21 + ($6 * $18 + $10 * $8);
  $13 = $25 - $13;
  $25 = $36 - $33;
  $33 = $30 - $37;
  HEAPF64[$9 + 112 >> 3] = $15 * $13 + ($17 * $25 + $14 * $33);
  HEAPF64[$9 + 104 >> 3] = $12 * $13 + ($6 * $25 + $33 * $8);
  HEAP32[$3 + 96 >> 2] = 0;
  HEAP32[$3 + 100 >> 2] = 0;
  HEAPF64[$3 + 136 >> 3] = $15 * $27 + ($17 * $20 + $28 * $14);
  HEAPF64[$3 + 104 >> 3] = $12 * $27 + ($6 * $20 + $28 * $8);
  HEAPF64[$3 + 88 >> 3] = $5 * $26 + ($16 * $29 + $7 * $22);
  HEAPF64[$3 + 80 >> 3] = $5 * $21 + ($16 * $18 + $7 * $10);
  HEAPF64[$3 + 72 >> 3] = $5 * $27 + ($16 * $20 + $7 * $28);
  HEAPF64[$3 + 168 >> 3] = $5 * $13 + ($16 * $25 + $33 * $7);
  $19 = $3 + 168 | 0;
  $38 = $3 + 240 | 0;
  $31 = $3 + 208 | 0;
  $40 = $3 + 200 | 0;
  $12 = HEAPF64[$0 + 16 >> 3];
  $21 = 0.0;
  $22 = 0.0;
  $26 = 0.0;
  $9 = __stack_pointer + -64 | 0;
  __stack_pointer = $9;
  $11 = HEAP32[$0 + 8 >> 2];
  $7 = HEAPF64[$11 + 104 >> 3];
  $17 = HEAPF64[$11 + 136 >> 3] - $7;
  $5 = HEAPF64[$11 + 112 >> 3];
  $14 = HEAPF64[$11 + 176 >> 3] - $5;
  $15 = HEAPF64[$11 + 168 >> 3] - $7;
  $8 = HEAPF64[$11 + 144 >> 3] - $5;
  $6 = $17 * $14 - $15 * $8;
  $13 = $8;
  $8 = HEAPF64[$11 + 120 >> 3];
  $16 = HEAPF64[$11 + 184 >> 3] - $8;
  $10 = HEAPF64[$11 + 152 >> 3] - $8;
  $14 = $13 * $16 - $14 * $10;
  $15 = $10 * $15 - $16 * $17;
  $17 = $6 * $6 + ($14 * $14 + $15 * $15);
  label$10 : {
   if (!($17 >= 4.930380657631324e-32)) {
    break label$10
   }
   $23 = HEAP32[$0 + 4 >> 2];
   $27 = HEAPF64[$23 + 48 >> 3] * HEAPF64[$23 + 16 >> 3];
   $12 = $27 + $12;
   $10 = $6;
   $6 = 1.0 / Math_sqrt($17);
   $17 = $10 * $6;
   $14 = $14 * $6;
   $15 = $15 * $6;
   $7 = (HEAPF64[$19 + 16 >> 3] - $8) * $17 + ((HEAPF64[$19 >> 3] - $7) * $14 + $15 * (HEAPF64[$19 + 8 >> 3] - $5));
   if ($7 < 0.0) {
    $17 = -$17;
    $15 = -$15;
    $14 = -$14;
    $7 = -$7;
   }
   if (!($7 < $12)) {
    break label$10
   }
   $32 = $19 + 24 | 0;
   $39 = HEAP32[$32 + 4 >> 2];
   $23 = $9 + 32 | 0;
   $34 = $23 + 24 | 0;
   HEAP32[$34 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$34 + 4 >> 2] = $39;
   $32 = $19 + 16 | 0;
   $39 = HEAP32[$32 + 4 >> 2];
   $34 = $23 + 16 | 0;
   HEAP32[$34 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$34 + 4 >> 2] = $39;
   $32 = $19 + 8 | 0;
   $39 = HEAP32[$32 + 4 >> 2];
   $34 = $23 + 8 | 0;
   HEAP32[$34 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$34 + 4 >> 2] = $39;
   $32 = HEAP32[$19 + 4 >> 2];
   HEAP32[$9 + 32 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$9 + 36 >> 2] = $32;
   HEAP32[$9 + 24 >> 2] = 0;
   HEAP32[$9 + 28 >> 2] = 0;
   HEAPF64[$9 + 16 >> 3] = $17;
   HEAPF64[$9 + 8 >> 3] = $15;
   HEAPF64[$9 >> 3] = $14;
   $11 = $11 + 104 | 0;
   $16 = HEAPF64[$11 + 80 >> 3];
   $10 = HEAPF64[$11 + 48 >> 3];
   $20 = $16 - $10;
   $28 = HEAPF64[$11 + 64 >> 3];
   $18 = HEAPF64[$11 + 32 >> 3];
   $30 = $28 - $18;
   $5 = HEAPF64[$9 + 8 >> 3];
   $6 = HEAPF64[$9 >> 3];
   $29 = HEAPF64[$11 + 72 >> 3];
   $13 = HEAPF64[$11 + 40 >> 3];
   $8 = $29 - $13;
   $25 = HEAPF64[$23 + 16 >> 3];
   $36 = ($30 * $5 - $6 * $8) * ($25 - $10);
   $24 = $8;
   $8 = HEAPF64[$9 + 16 >> 3];
   $33 = HEAPF64[$23 >> 3];
   $37 = HEAPF64[$23 + 8 >> 3];
   $20 = $36 + (($24 * $8 - $5 * $20) * ($33 - $18) + ($37 - $13) * ($20 * $6 - $8 * $30));
   $24 = $10;
   $10 = HEAPF64[$11 + 16 >> 3];
   $30 = $24 - $10;
   $24 = $18;
   $18 = HEAPF64[$11 >> 3];
   $36 = $24 - $18;
   $24 = $13;
   $13 = HEAPF64[$11 + 8 >> 3];
   $24 = $24 - $13;
   $30 = ($36 * $5 - $6 * $24) * ($25 - $10) + (($24 * $8 - $5 * $30) * ($33 - $18) + ($37 - $13) * ($30 * $6 - $8 * $36));
   $18 = $18 - $28;
   $13 = $13 - $29;
   $25 = ($18 * $5 - $6 * $13) * ($25 - $16);
   $24 = $5;
   $5 = $10 - $16;
   $5 = $25 + (($13 * $8 - $24 * $5) * ($33 - $28) + ($37 - $29) * ($5 * $6 - $8 * $18));
   label$1 : {
    if (!(!($5 > 0.0) | !($30 > 0.0))) {
     $11 = 1;
     if ($20 > 0.0) {
      break label$1
     }
    }
    $11 = $30 <= 0.0 & $20 <= 0.0 & $5 <= 0.0;
   }
   label$3 : {
    if ($11) {
     $6 = HEAPF64[$19 + 16 >> 3];
     $21 = $6 - $7 * $17;
     $8 = HEAPF64[$19 + 8 >> 3];
     $22 = $8 - $7 * $15;
     $5 = HEAPF64[$19 >> 3];
     $26 = $5 - $7 * $14;
     $20 = $12 * $12;
     break label$3;
    }
    $11 = HEAP32[$0 + 8 >> 2];
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 100 >> 2]]($11) | 0) <= 0) {
     break label$10
    }
    $20 = $12 * $12;
    $23 = 0;
    $11 = 0;
    while (1) {
     $35 = HEAP32[$0 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 104 >> 2]]($35, $11, $9 + 32 | 0, $9);
     $5 = 0.0;
     $28 = HEAPF64[$9 + 48 >> 3];
     $12 = HEAPF64[$9 + 16 >> 3] - $28;
     $7 = HEAPF64[$19 + 16 >> 3] - $28;
     $18 = HEAPF64[$9 + 32 >> 3];
     $16 = HEAPF64[$9 >> 3] - $18;
     $6 = HEAPF64[$19 >> 3] - $18;
     $29 = HEAPF64[$9 + 40 >> 3];
     $8 = HEAPF64[$19 + 8 >> 3] - $29;
     $10 = HEAPF64[$9 + 8 >> 3] - $29;
     $13 = $12 * $7 + ($16 * $6 + $8 * $10);
     label$6 : {
      if (!($13 > 0.0)) {
       break label$6
      }
      $5 = $12 * $12 + ($16 * $16 + $10 * $10);
      if ($13 < $5) {
       $5 = $13 / $5;
       $7 = $7 - $12 * $5;
       $8 = $8 - $10 * $5;
       $6 = $6 - $16 * $5;
       break label$6;
      }
      $7 = $7 - $12;
      $8 = $8 - $10;
      $6 = $6 - $16;
      $5 = 1.0;
     }
     if ($20 > $7 * $7 + ($6 * $6 + $8 * $8)) {
      $26 = $18 + $16 * $5;
      $22 = $29 + $10 * $5;
      $21 = $28 + $12 * $5;
      $23 = 1;
     }
     $35 = HEAP32[$0 + 8 >> 2];
     $11 = $11 + 1 | 0;
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 100 >> 2]]($35) | 0) > ($11 | 0)) {
      continue
     }
     break;
    };
    $35 = 0;
    if (!$23) {
     break label$10
    }
    $6 = HEAPF64[$19 + 16 >> 3];
    $8 = HEAPF64[$19 + 8 >> 3];
    $5 = HEAPF64[$19 >> 3];
   }
   $7 = $6 - $21;
   $5 = $5 - $26;
   $6 = $8 - $22;
   $8 = $7 * $7 + ($5 * $5 + $6 * $6);
   if (!($8 < $20)) {
    break label$10
   }
   label$9 : {
    if ($8 > 2.220446049250313e-16) {
     HEAP32[$31 + 24 >> 2] = 0;
     HEAP32[$31 + 28 >> 2] = 0;
     $10 = $7;
     $8 = Math_sqrt($8);
     $7 = 1.0 / $8;
     HEAPF64[$31 + 16 >> 3] = $10 * $7;
     HEAPF64[$31 + 8 >> 3] = $6 * $7;
     HEAPF64[$31 >> 3] = $5 * $7;
     $27 = $27 - $8;
     break label$9;
    }
    HEAP32[$31 + 24 >> 2] = 0;
    HEAP32[$31 + 28 >> 2] = 0;
    HEAPF64[$31 + 16 >> 3] = $17;
    HEAPF64[$31 + 8 >> 3] = $15;
    HEAPF64[$31 >> 3] = $14;
   }
   HEAP32[$38 + 24 >> 2] = 0;
   HEAP32[$38 + 28 >> 2] = 0;
   HEAPF64[$38 + 16 >> 3] = $21;
   HEAPF64[$38 + 8 >> 3] = $22;
   HEAPF64[$38 >> 3] = $26;
   HEAPF64[$40 >> 3] = -$27;
   $35 = 1;
  }
  __stack_pointer = $9 - -64 | 0;
  label$11 : {
   if (!$35) {
    break label$11
   }
   if ($4) {
    $8 = HEAPF64[$1 + 144 >> 3];
    $12 = HEAPF64[$1 + 128 >> 3];
    $17 = HEAPF64[$1 + 136 >> 3];
    $14 = HEAPF64[$1 + 176 >> 3];
    $15 = HEAPF64[$1 + 160 >> 3];
    $16 = HEAPF64[$1 + 168 >> 3];
    $10 = HEAPF64[$1 + 208 >> 3];
    $21 = HEAPF64[$1 + 192 >> 3];
    $22 = HEAPF64[$1 + 200 >> 3];
    $7 = HEAPF64[$3 + 224 >> 3];
    $5 = HEAPF64[$3 + 208 >> 3];
    $6 = HEAPF64[$3 + 216 >> 3];
    HEAP32[$3 + 64 >> 2] = 0;
    HEAP32[$3 + 68 >> 2] = 0;
    $26 = $10 * $7 + ($21 * $5 + $6 * $22);
    HEAPF64[$3 + 56 >> 3] = -$26;
    $27 = $14 * $7 + ($15 * $5 + $6 * $16);
    HEAPF64[$3 + 48 >> 3] = -$27;
    $20 = $8 * $7 + ($12 * $5 + $17 * $6);
    HEAPF64[$3 + 40 >> 3] = -$20;
    HEAP32[$3 + 32 >> 2] = 0;
    HEAP32[$3 + 36 >> 2] = 0;
    $5 = HEAPF64[$3 + 256 >> 3];
    $13 = $10 * $5;
    $6 = HEAPF64[$3 + 240 >> 3];
    $10 = HEAPF64[$3 + 248 >> 3];
    $7 = HEAPF64[$3 + 200 >> 3];
    HEAPF64[$3 + 24 >> 3] = $13 + ($21 * $6 + $22 * $10) + HEAPF64[$1 + 240 >> 3] + $26 * $7;
    HEAPF64[$3 + 16 >> 3] = $5 * $14 + ($6 * $15 + $10 * $16) + HEAPF64[$1 + 232 >> 3] + $27 * $7;
    HEAPF64[$3 + 8 >> 3] = $5 * $8 + ($6 * $12 + $10 * $17) + HEAPF64[$1 + 224 >> 3] + $20 * $7;
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $3 + 40 | 0, $3 + 8 | 0, $7);
    break label$11;
   }
   HEAP32[$3 + 64 >> 2] = 0;
   HEAP32[$3 + 68 >> 2] = 0;
   $8 = HEAPF64[$1 + 208 >> 3];
   $7 = HEAPF64[$3 + 224 >> 3];
   $12 = HEAPF64[$1 + 192 >> 3];
   $5 = HEAPF64[$3 + 208 >> 3];
   $6 = HEAPF64[$3 + 216 >> 3];
   $17 = HEAPF64[$1 + 200 >> 3];
   HEAPF64[$3 + 56 >> 3] = $8 * $7 + ($12 * $5 + $6 * $17);
   $14 = HEAPF64[$1 + 176 >> 3];
   $15 = HEAPF64[$1 + 160 >> 3];
   $16 = HEAPF64[$1 + 168 >> 3];
   HEAPF64[$3 + 48 >> 3] = $7 * $14 + ($5 * $15 + $6 * $16);
   $10 = HEAPF64[$1 + 144 >> 3];
   $21 = HEAPF64[$1 + 128 >> 3];
   $22 = HEAPF64[$1 + 136 >> 3];
   HEAPF64[$3 + 40 >> 3] = $7 * $10 + ($5 * $21 + $6 * $22);
   HEAP32[$3 + 32 >> 2] = 0;
   HEAP32[$3 + 36 >> 2] = 0;
   $7 = HEAPF64[$3 + 256 >> 3];
   $5 = HEAPF64[$3 + 240 >> 3];
   $6 = HEAPF64[$3 + 248 >> 3];
   HEAPF64[$3 + 24 >> 3] = $8 * $7 + ($12 * $5 + $17 * $6) + HEAPF64[$1 + 240 >> 3];
   HEAPF64[$3 + 16 >> 3] = $7 * $14 + ($5 * $15 + $6 * $16) + HEAPF64[$1 + 232 >> 3];
   HEAPF64[$3 + 8 >> 3] = $7 * $10 + ($5 * $21 + $6 * $22) + HEAPF64[$1 + 224 >> 3];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $3 + 40 | 0, $3 + 8 | 0, HEAPF64[$3 + 200 >> 3]);
  }
  __stack_pointer = $3 + 272 | 0;
 }
 
 function btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17292;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17292;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btSphereTriangleCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $7 = __stack_pointer - 288 | 0;
  __stack_pointer = $7;
  $11 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$11) {
    break label$1
   }
   HEAP32[$4 + 4 >> 2] = $11;
   $5 = HEAPU8[$0 + 16 | 0];
   $6 = $5 ? $2 : $1;
   $8 = HEAP32[$6 + 4 >> 2];
   $2 = $5 ? $1 : $2;
   $5 = HEAP32[$2 + 4 >> 2];
   $1 = $7 + 264 | 0;
   HEAPF64[$1 + 16 >> 3] = HEAPF64[$11 + 1464 >> 3] + HEAPF64[$4 + 32 >> 3];
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $8;
   HEAP32[$1 >> 2] = 17232;
   $11 = $1;
   HEAP32[$7 + 256 >> 2] = 966823146;
   HEAP32[$7 + 260 >> 2] = 1177108057;
   $1 = HEAP32[$6 + 12 >> 2];
   $5 = $1 + 8 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $7 + 8 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 16 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $7 + 16 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 24 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $7 + 24 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = HEAP32[$1 >> 2];
   $6 = HEAP32[$1 + 4 >> 2];
   $8 = $1 + 56 | 0;
   $12 = HEAP32[$8 + 4 >> 2];
   $9 = $7 + 56 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$9 + 4 >> 2] = $12;
   $8 = $1 + 48 | 0;
   $12 = HEAP32[$8 + 4 >> 2];
   $9 = $7 + 48 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$9 + 4 >> 2] = $12;
   $8 = $1 + 40 | 0;
   $12 = HEAP32[$8 + 4 >> 2];
   $9 = $7 + 40 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$9 + 4 >> 2] = $12;
   $8 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $9 = $1 + 88 | 0;
   $13 = HEAP32[$9 + 4 >> 2];
   $10 = $7 + 88 | 0;
   HEAP32[$10 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$10 + 4 >> 2] = $13;
   $9 = $1 + 80 | 0;
   $13 = HEAP32[$9 + 4 >> 2];
   $10 = $7 + 80 | 0;
   HEAP32[$10 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$10 + 4 >> 2] = $13;
   $9 = $1 + 72 | 0;
   $13 = HEAP32[$9 + 4 >> 2];
   $10 = $7 + 72 | 0;
   HEAP32[$10 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$10 + 4 >> 2] = $13;
   HEAP32[$7 >> 2] = $5;
   HEAP32[$7 + 4 >> 2] = $6;
   HEAP32[$7 + 32 >> 2] = $8;
   HEAP32[$7 + 36 >> 2] = $12;
   $5 = HEAP32[$1 + 68 >> 2];
   HEAP32[$7 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$7 + 68 >> 2] = $5;
   $5 = $1 + 120 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $7 + 120 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 112 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $7 + 112 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 104 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $7 + 104 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = HEAP32[$1 + 100 >> 2];
   HEAP32[$7 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
   HEAP32[$7 + 100 >> 2] = $5;
   $1 = HEAP32[$2 + 12 >> 2];
   $2 = $1 + 24 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 152 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 16 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 144 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 8 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 136 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$7 + 128 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$7 + 132 >> 2] = $2;
   $2 = HEAP32[$1 + 36 >> 2];
   $5 = $7 + 160 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   $2 = $1 + 40 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 168 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 48 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 176 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 56 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 184 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 68 >> 2];
   $5 = $7 + 192 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   $2 = $1 + 72 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 200 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 80 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 208 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 88 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 216 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 100 >> 2];
   $5 = $7 + 224 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 96 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   $2 = $1 + 104 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 232 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 120 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 248 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $1 = $1 + 112 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $5 = $7 + 240 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($11, $7, $4, HEAP32[$3 + 28 >> 2], HEAPU8[$0 + 16 | 0]);
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $0 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$0 + 1456 >> 2]) {
    break label$1
   }
   $2 = HEAP32[$0 + 1448 >> 2];
   $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   $1 = ($2 | 0) == ($3 | 0);
   $11 = $0;
   $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($11, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
  }
  __stack_pointer = $7 + 288 | 0;
 }
 
 function atan($0) {
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0;
  wasm2js_scratch_store_f64(+$0);
  $4 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $1 = $4 & 2147483647;
  label$1 : {
   if ($1 >>> 0 >= 1141899264) {
    if ($0 != $0) {
     break label$1
    }
    wasm2js_scratch_store_f64(1.5707963267948966);
    $4 = wasm2js_scratch_load_i32(1) | 0;
    $3 = wasm2js_scratch_load_i32(0) | 0;
    wasm2js_scratch_store_f64(+$0);
    $1 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    wasm2js_scratch_store_i32(0, $3 | 0);
    wasm2js_scratch_store_i32(1, $4 & 2147483647 | $1 & -2147483648);
    return +wasm2js_scratch_load_f64();
   }
   label$3 : {
    if ($1 >>> 0 <= 1071382527) {
     if ($1 >>> 0 < 1044381696) {
      break label$1
     }
     $1 = -1;
     $3 = 1;
     break label$3;
    }
    $0 = Math_abs($0);
    label$5 : {
     if ($1 >>> 0 <= 1072889855) {
      if ($1 >>> 0 <= 1072037887) {
       $0 = ($0 + $0 + -1.0) / ($0 + 2.0);
       $1 = 0;
       $3 = 0;
       break label$3;
      }
      $1 = 1;
      $0 = ($0 + -1.0) / ($0 + 1.0);
      break label$5;
     }
     if ($1 >>> 0 <= 1073971199) {
      $1 = 2;
      $0 = ($0 + -1.5) / ($0 * 1.5 + 1.0);
      break label$5;
     }
     $1 = 3;
     $0 = -1.0 / $0;
    }
    $3 = 0;
   }
   $5 = $0 * $0;
   $2 = $5 * $5;
   $6 = $2 * ($2 * ($2 * ($2 * ($2 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
   $2 = $5 * ($2 * ($2 * ($2 * ($2 * ($2 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
   if ($3) {
    return $0 - $0 * ($6 + $2)
   }
   $1 = $1 << 3;
   $0 = HEAPF64[$1 + 17376 >> 3] - ($0 * ($6 + $2) - HEAPF64[$1 + 17408 >> 3] - $0);
   $0 = ($4 | 0) < 0 ? -$0 : $0;
  }
  return $0;
 }
 
 function atan2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if (!($1 == $1 & $0 == $0)) {
   return $0 + $1
  }
  wasm2js_scratch_store_f64(+$1);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  $6 = wasm2js_scratch_load_i32(0) | 0;
  $3 = $2;
  if (!($6 | $2 - 1072693248)) {
   return atan($0)
  }
  wasm2js_scratch_store_f64(+$0);
  $4 = wasm2js_scratch_load_i32(1) | 0;
  $2 = wasm2js_scratch_load_i32(0) | 0;
  $7 = $3 >>> 30 & 2;
  $8 = $4;
  $4 = $7 | $4 >>> 31;
  folding_inner0 : {
   $9 = $2;
   $2 = $8 & 2147483647;
   label$3 : {
    if (!($9 | $2)) {
     label$5 : {
      switch ($4 - 2 | 0) {
      case 0:
       return 3.141592653589793;
      case 1:
       break label$5;
      default:
       break label$3;
      };
     }
     return -3.141592653589793;
    }
    $3 = $3 & 2147483647;
    if (!($3 | $6)) {
     break folding_inner0
    }
    label$8 : {
     if (($3 | 0) == 2146435072) {
      if (($2 | 0) != 2146435072) {
       break label$8
      }
      return HEAPF64[($4 << 3) + 17440 >> 3];
     }
     if (!(($2 | 0) != 2146435072 & $2 >>> 0 <= $3 + 67108864 >>> 0)) {
      break folding_inner0
     }
     label$12 : {
      if ($7) {
       $5 = 0.0;
       if ($3 >>> 0 > $2 + 67108864 >>> 0) {
        break label$12
       }
      }
      $5 = atan(Math_abs($0 / $1));
     }
     $0 = $5;
     label$14 : {
      switch ($4 | 0) {
      case 1:
       return -$0;
      case 2:
       return 3.141592653589793 - ($0 + -1.2246467991473532e-16);
      case 0:
       break label$3;
      default:
       break label$14;
      };
     }
     return $0 + -1.2246467991473532e-16 + -3.141592653589793;
    }
    $0 = HEAPF64[($4 << 3) + 17472 >> 3];
   }
   return $0;
  }
  wasm2js_scratch_store_f64(1.5707963267948966);
  $4 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $4 & 2147483647 | $2 & -2147483648);
  return +wasm2js_scratch_load_f64();
 }
 
 function btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3 = __stack_pointer - 304 | 0;
  __stack_pointer = $3;
  HEAPF64[$3 + 208 >> 3] = HEAPF64[$1 >> 3];
  HEAPF64[$3 + 112 >> 3] = HEAPF64[$1 + 128 >> 3];
  HEAPF64[$3 + 216 >> 3] = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$3 + 120 >> 3] = HEAPF64[$1 + 136 >> 3];
  HEAPF64[$3 + 224 >> 3] = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$3 + 128 >> 3] = HEAPF64[$1 + 144 >> 3];
  HEAPF64[$3 + 240 >> 3] = HEAPF64[$1 + 32 >> 3];
  HEAPF64[$3 + 144 >> 3] = HEAPF64[$1 + 160 >> 3];
  HEAPF64[$3 + 248 >> 3] = HEAPF64[$1 + 40 >> 3];
  HEAPF64[$3 + 152 >> 3] = HEAPF64[$1 + 168 >> 3];
  HEAPF64[$3 + 256 >> 3] = HEAPF64[$1 + 48 >> 3];
  HEAPF64[$3 + 160 >> 3] = HEAPF64[$1 + 176 >> 3];
  HEAPF64[$3 + 272 >> 3] = HEAPF64[$1 + 64 >> 3];
  HEAPF64[$3 + 176 >> 3] = HEAPF64[$1 + 192 >> 3];
  HEAPF64[$3 + 280 >> 3] = HEAPF64[$1 + 72 >> 3];
  HEAPF64[$3 + 184 >> 3] = HEAPF64[$1 + 200 >> 3];
  HEAPF64[$3 + 288 >> 3] = HEAPF64[$1 + 80 >> 3];
  HEAPF64[$3 + 192 >> 3] = HEAPF64[$1 + 208 >> 3];
  $4 = HEAP32[$0 + 4 >> 2];
  $9 = HEAPF64[$4 - -64 >> 3];
  $8 = HEAPF64[$4 + 56 >> 3];
  $5 = HEAPF64[$4 + 48 >> 3];
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4);
  $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4);
  $14 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4);
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  $8 = $8 + $7;
  HEAPF64[$3 + 40 >> 3] = $8 + $8;
  $8 = $5 + $6;
  HEAPF64[$3 + 32 >> 3] = $8 + $8;
  $9 = $9 + $14;
  HEAPF64[$3 + 48 >> 3] = $9 + $9;
  $0 = HEAP32[$0 + 8 >> 2];
  $9 = HEAPF64[$0 - -64 >> 3];
  $8 = HEAPF64[$0 + 56 >> 3];
  $5 = HEAPF64[$0 + 48 >> 3];
  $6 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $7 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $14 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  $8 = $8 + $7;
  HEAPF64[$3 + 8 >> 3] = $8 + $8;
  $8 = $5 + $6;
  HEAPF64[$3 >> 3] = $8 + $8;
  $9 = $9 + $14;
  HEAPF64[$3 + 16 >> 3] = $9 + $9;
  $26 = $3 + 80 | 0;
  $16 = $3 + 72 | 0;
  $64 = $3 + 68 | 0;
  $44 = $2;
  $4 = 0;
  $10 = __stack_pointer - 688 | 0;
  __stack_pointer = $10;
  $15 = $3 + 32 | 0;
  $11 = HEAPF64[$15 >> 3] * .5;
  HEAPF64[$10 + 656 >> 3] = $11;
  $2 = $3 + 208 | 0;
  $37 = HEAPF64[$2 + 72 >> 3];
  $12 = $2 + 8 | 0;
  $34 = HEAPF64[$12 >> 3];
  $25 = HEAPF64[$2 + 40 >> 3];
  $20 = HEAPF64[$2 + 80 >> 3];
  $17 = $2 + 16 | 0;
  $41 = HEAPF64[$17 >> 3];
  $38 = HEAPF64[$2 + 48 >> 3];
  $9 = HEAPF64[$2 + 32 >> 3];
  $8 = HEAPF64[$2 - -64 >> 3];
  $21 = $1 + 96 | 0;
  $6 = HEAPF64[$21 >> 3];
  $0 = $1 + 224 | 0;
  $14 = HEAPF64[$0 >> 3];
  $23 = HEAPF64[$21 + 8 >> 3];
  $28 = HEAPF64[$0 + 8 >> 3];
  $7 = HEAPF64[$21 + 16 >> 3];
  $35 = HEAPF64[$0 + 16 >> 3];
  $53 = HEAPF64[$2 >> 3];
  $22 = HEAPF64[$15 + 8 >> 3] * .5;
  HEAPF64[$10 + 664 >> 3] = $22;
  $18 = HEAPF64[$15 + 16 >> 3] * .5;
  HEAPF64[$10 + 672 >> 3] = $18;
  $30 = HEAPF64[$3 >> 3] * .5;
  HEAPF64[$10 + 624 >> 3] = $30;
  $27 = HEAPF64[$3 + 8 >> 3] * .5;
  HEAPF64[$10 + 632 >> 3] = $27;
  $5 = HEAPF64[$3 + 16 >> 3] * .5;
  HEAPF64[$10 + 640 >> 3] = $5;
  $7 = $35 - $7;
  $14 = $14 - $6;
  $23 = $28 - $23;
  $6 = $8 * $7 + ($53 * $14 + $9 * $23);
  $1 = $3 + 112 | 0;
  $45 = HEAPF64[$1 + 80 >> 3];
  $46 = HEAPF64[$1 + 16 >> 3];
  $42 = HEAPF64[$1 + 48 >> 3];
  $28 = $8 * $45 + ($53 * $46 + $9 * $42);
  $55 = Math_abs($28);
  $47 = HEAPF64[$1 + 72 >> 3];
  $24 = HEAPF64[$1 + 8 >> 3];
  $48 = HEAPF64[$1 + 40 >> 3];
  $35 = $8 * $47 + ($53 * $24 + $9 * $48);
  $56 = Math_abs($35);
  $49 = HEAPF64[$1 - -64 >> 3];
  $50 = HEAPF64[$1 >> 3];
  $51 = HEAPF64[$1 + 32 >> 3];
  $31 = $8 * $49 + ($53 * $50 + $9 * $51);
  $63 = Math_abs($31);
  $8 = Math_abs($6) - ($5 * $55 + ($27 * $56 + ($30 * $63 + $11)));
  label$1 : {
   if ($8 > 0.0) {
    break label$1
   }
   $36 = $37 * $45 + ($34 * $46 + $25 * $42);
   $57 = Math_abs($36);
   $33 = $37 * $47 + ($34 * $24 + $25 * $48);
   $39 = Math_abs($33);
   $40 = $37 * $49 + ($34 * $50 + $25 * $51);
   $58 = Math_abs($40);
   $9 = -3402823466385288598117041.0e14;
   if ($8 > -3402823466385288598117041.0e14) {
    $13 = $6 < 0.0;
    $9 = $8;
    $29 = 1;
    $4 = $2;
   }
   $37 = $37 * $7 + ($34 * $14 + $23 * $25);
   $8 = Math_abs($37) - ($5 * $57 + ($27 * $39 + ($30 * $58 + $22)));
   if ($8 > 0.0) {
    break label$1
   }
   $34 = $20 * $45 + ($41 * $46 + $38 * $42);
   $59 = Math_abs($34);
   $25 = $20 * $47 + ($41 * $24 + $38 * $48);
   $60 = Math_abs($25);
   $32 = $20 * $49 + ($41 * $50 + $38 * $51);
   $52 = Math_abs($32);
   if ($9 < $8) {
    $13 = $37 < 0.0;
    $9 = $8;
    $29 = 2;
    $4 = $12;
   }
   $20 = $20 * $7 + ($41 * $14 + $23 * $38);
   $8 = Math_abs($20) - ($5 * $59 + ($27 * $60 + ($30 * $52 + $18)));
   if ($8 > 0.0) {
    break label$1
   }
   if ($9 < $8) {
    $13 = $20 < 0.0;
    $9 = $8;
    $29 = 3;
    $4 = $17;
   }
   $38 = $49 * $7 + ($50 * $14 + $23 * $51);
   $8 = Math_abs($38) - ($30 + ($18 * $52 + ($11 * $63 + $22 * $58)));
   if ($8 > 0.0) {
    break label$1
   }
   if ($9 < $8) {
    $13 = $38 < 0.0;
    $9 = $8;
    $29 = 4;
    $4 = $1;
   }
   $38 = $47 * $7 + ($24 * $14 + $23 * $48);
   $8 = Math_abs($38) - ($27 + ($18 * $60 + ($11 * $56 + $22 * $39)));
   if ($8 > 0.0) {
    break label$1
   }
   if ($9 < $8) {
    $13 = $38 < 0.0;
    $9 = $8;
    $29 = 5;
    $4 = $1 + 8 | 0;
   }
   $7 = $45 * $7 + ($46 * $14 + $23 * $42);
   $8 = Math_abs($7) - ($5 + ($18 * $59 + ($11 * $55 + $22 * $57)));
   if ($8 > 0.0) {
    break label$1
   }
   if ($9 < $8) {
    $13 = $7 < 0.0;
    $9 = $8;
    $29 = 6;
    $4 = $1 + 16 | 0;
   }
   $42 = $20 * $40 - $32 * $37;
   $48 = $56 + 9.999999747378752e-06;
   $49 = $55 + 9.999999747378752e-06;
   $50 = $52 + 9.999999747378752e-06;
   $51 = $58 + 9.999999747378752e-06;
   $8 = Math_abs($42) - ($5 * $48 + ($27 * $49 + ($22 * $50 + $18 * $51)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $38 = $60 + 9.999999747378752e-06;
   $45 = $39 + 9.999999747378752e-06;
   $46 = $63 + 9.999999747378752e-06;
   $39 = -$37;
   $23 = 0.0;
   $58 = $40 * $40;
   $60 = $32 * $32 + 0.0;
   $14 = Math_sqrt($58 + $60);
   label$8 : {
    if (!($14 > 2.220446049250313e-16)) {
     $7 = 0.0;
     $24 = 0.0;
     break label$8;
    }
    $7 = 0.0;
    $8 = $8 / $14;
    $24 = 0.0;
    if (!($8 * 1.05 > $9)) {
     break label$8
    }
    $13 = $42 < 0.0;
    $7 = $40 / $14;
    $23 = 0.0 / $14;
    $4 = 0;
    $29 = 7;
    $9 = $8;
    $24 = -$32 / $14;
   }
   $14 = $24;
   $52 = $20 * $33 + $25 * $39;
   $8 = Math_abs($52) - ($5 * $46 + ($30 * $49 + ($22 * $38 + $18 * $45)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $42 = $59 + 9.999999747378752e-06;
   $47 = $57 + 9.999999747378752e-06;
   $57 = $33 * $33;
   $59 = $25 * $25 + 0.0;
   $24 = Math_sqrt($57 + $59);
   label$10 : {
    if (!($24 > 2.220446049250313e-16)) {
     break label$10
    }
    $8 = $8 / $24;
    if (!($8 * 1.05 > $9)) {
     break label$10
    }
    $13 = $52 < 0.0;
    $7 = $33 / $24;
    $14 = -$25 / $24;
    $23 = 0.0 / $24;
    $4 = 0;
    $29 = 8;
    $9 = $8;
   }
   $39 = $20 * $36 + $34 * $39;
   $8 = Math_abs($39) - ($27 * $46 + ($30 * $48 + ($22 * $42 + $18 * $47)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $52 = $36 * $36;
   $55 = $34 * $34 + 0.0;
   $24 = Math_sqrt($52 + $55);
   label$11 : {
    if (!($24 > 2.220446049250313e-16)) {
     break label$11
    }
    $8 = $8 / $24;
    if (!($8 * 1.05 > $9)) {
     break label$11
    }
    $13 = $39 < 0.0;
    $7 = $36 / $24;
    $14 = -$34 / $24;
    $23 = 0.0 / $24;
    $4 = 0;
    $29 = 9;
    $9 = $8;
   }
   $39 = $6 * $32 - $31 * $20;
   $8 = Math_abs($39) - ($5 * $45 + ($27 * $47 + ($11 * $50 + $18 * $46)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $24 = -$20;
   $56 = $31 * $31;
   $20 = Math_sqrt($56 + $60);
   label$12 : {
    if (!($20 > 2.220446049250313e-16)) {
     break label$12
    }
    $8 = $8 / $20;
    if (!($8 * 1.05 > $9)) {
     break label$12
    }
    $13 = $39 < 0.0;
    $7 = -$31 / $20;
    $14 = 0.0 / $20;
    $23 = $32 / $20;
    $4 = 0;
    $29 = 10;
    $9 = $8;
   }
   $20 = $6 * $25 + $35 * $24;
   $8 = Math_abs($20) - ($5 * $51 + ($30 * $47 + ($11 * $38 + $18 * $48)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $39 = $35 * $35;
   $32 = Math_sqrt($39 + $59);
   label$13 : {
    if (!($32 > 2.220446049250313e-16)) {
     break label$13
    }
    $8 = $8 / $32;
    if (!($8 * 1.05 > $9)) {
     break label$13
    }
    $13 = $20 < 0.0;
    $7 = -$35 / $32;
    $14 = 0.0 / $32;
    $23 = $25 / $32;
    $4 = 0;
    $29 = 11;
    $9 = $8;
   }
   $32 = $6 * $34 + $28 * $24;
   $8 = Math_abs($32) - ($27 * $51 + ($30 * $45 + ($11 * $42 + $18 * $49)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $20 = $28 * $28;
   $25 = Math_sqrt($20 + $55);
   label$14 : {
    if (!($25 > 2.220446049250313e-16)) {
     break label$14
    }
    $8 = $8 / $25;
    if (!($8 * 1.05 > $9)) {
     break label$14
    }
    $13 = $32 < 0.0;
    $7 = -$28 / $25;
    $14 = 0.0 / $25;
    $23 = $34 / $25;
    $4 = 0;
    $29 = 12;
    $9 = $8;
   }
   $25 = $37 * $31 - $40 * $6;
   $8 = Math_abs($25) - ($5 * $38 + ($27 * $42 + ($11 * $51 + $22 * $46)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $34 = -$6;
   $6 = Math_sqrt($58 + $56 + 0.0);
   label$15 : {
    if (!($6 > 2.220446049250313e-16)) {
     break label$15
    }
    $8 = $8 / $6;
    if (!($8 * 1.05 > $9)) {
     break label$15
    }
    $13 = $25 < 0.0;
    $7 = 0.0 / $6;
    $14 = $31 / $6;
    $23 = -$40 / $6;
    $4 = 0;
    $29 = 13;
    $9 = $8;
   }
   $6 = $37 * $35 + $33 * $34;
   $8 = Math_abs($6) - ($5 * $50 + ($30 * $42 + ($11 * $45 + $22 * $48)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   $5 = Math_sqrt($57 + $39 + 0.0);
   label$16 : {
    if (!($5 > 2.220446049250313e-16)) {
     break label$16
    }
    $8 = $8 / $5;
    if (!($8 * 1.05 > $9)) {
     break label$16
    }
    $13 = $6 < 0.0;
    $7 = 0.0 / $5;
    $14 = $35 / $5;
    $23 = -$33 / $5;
    $4 = 0;
    $29 = 14;
    $9 = $8;
   }
   $6 = $37 * $28 + $36 * $34;
   $8 = Math_abs($6) - ($27 * $50 + ($30 * $38 + ($11 * $47 + $22 * $49)));
   if ($8 > 2.220446049250313e-16) {
    break label$1
   }
   label$17 : {
    label$18 : {
     label$19 : {
      label$20 : {
       $5 = Math_sqrt($52 + $20 + 0.0);
       if (!($5 > 2.220446049250313e-16)) {
        break label$20
       }
       $8 = $8 / $5;
       if (!($8 * 1.05 > $9)) {
        break label$20
       }
       $13 = $6 < 0.0;
       $7 = 0.0 / $5;
       $14 = $28 / $5;
       $23 = -$36 / $5;
       $29 = 15;
       break label$19;
      }
      if (!$29) {
       break label$1
      }
      if ($4) {
       break label$18
      }
      $8 = $9;
     }
     $5 = $41 * $7 + ($53 * $23 + $14 * HEAPF64[$2 + 8 >> 3]);
     HEAPF64[$26 >> 3] = $5;
     $6 = HEAPF64[$2 + 48 >> 3] * $7 + (HEAPF64[$2 + 32 >> 3] * $23 + $14 * HEAPF64[$2 + 40 >> 3]);
     HEAPF64[$26 + 8 >> 3] = $6;
     $9 = HEAPF64[$2 + 80 >> 3] * $7 + (HEAPF64[$2 - -64 >> 3] * $23 + $14 * HEAPF64[$2 + 72 >> 3]);
     break label$17;
    }
    $5 = HEAPF64[$4 >> 3];
    HEAPF64[$26 >> 3] = $5;
    $6 = HEAPF64[$4 + 32 >> 3];
    HEAPF64[$26 + 8 >> 3] = $6;
    $8 = $9;
    $9 = HEAPF64[$4 + 64 >> 3];
   }
   HEAPF64[$26 + 16 >> 3] = $9;
   if ($13) {
    HEAPF64[$26 + 16 >> 3] = -$9;
    HEAPF64[$26 + 8 >> 3] = -$6;
    HEAPF64[$26 >> 3] = -$5;
   }
   HEAPF64[$16 >> 3] = -$8;
   if ($29 >>> 0 >= 7) {
    $17 = $21 + 16 | 0;
    $13 = HEAP32[$17 + 4 >> 2];
    $12 = $10 + 192 | 0;
    $4 = $12 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$17 >> 2];
    HEAP32[$4 + 4 >> 2] = $13;
    $13 = $21 + 8 | 0;
    $15 = HEAP32[$13 + 4 >> 2];
    $17 = $12 + 8 | 0;
    HEAP32[$17 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$17 + 4 >> 2] = $15;
    $13 = HEAP32[$21 + 4 >> 2];
    HEAP32[$10 + 192 >> 2] = HEAP32[$21 >> 2];
    HEAP32[$10 + 196 >> 2] = $13;
    $23 = HEAPF64[$17 >> 3];
    $28 = HEAPF64[$10 + 192 >> 3];
    $6 = $18;
    $14 = -$18;
    $15 = $26 + 16 | 0;
    $9 = HEAPF64[$15 >> 3];
    $7 = HEAPF64[$2 + 80 >> 3];
    $8 = HEAPF64[$26 >> 3];
    $18 = HEAPF64[$2 + 16 >> 3];
    $19 = $26 + 8 | 0;
    $5 = HEAPF64[$19 >> 3];
    $35 = HEAPF64[$2 + 48 >> 3];
    $6 = $9 * $7 + ($8 * $18 + $5 * $35) > 0.0 ? $6 : $14;
    $20 = $6 * $7;
    $24 = $22;
    $7 = -$22;
    $14 = HEAPF64[$2 + 72 >> 3];
    $22 = HEAPF64[$2 + 8 >> 3];
    $31 = HEAPF64[$2 + 40 >> 3];
    $7 = $9 * $14 + ($8 * $22 + $5 * $31) > 0.0 ? $24 : $7;
    $24 = $7 * $14;
    $14 = $11;
    $25 = -$11;
    $11 = HEAPF64[$2 - -64 >> 3];
    $36 = HEAPF64[$2 >> 3];
    $33 = HEAPF64[$2 + 32 >> 3];
    $14 = $9 * $11 + ($8 * $36 + $5 * $33) > 0.0 ? $14 : $25;
    HEAPF64[$4 >> 3] = $20 + ($24 + ($14 * $11 + HEAPF64[$4 >> 3]));
    HEAPF64[$17 >> 3] = $6 * $35 + ($7 * $31 + ($23 + $14 * $33));
    HEAPF64[$10 + 192 >> 3] = $6 * $18 + ($7 * $22 + ($28 + $14 * $36));
    $13 = $0 + 8 | 0;
    $21 = HEAP32[$13 + 4 >> 2];
    $4 = $10 + 384 | 0;
    $17 = $4 + 8 | 0;
    HEAP32[$17 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$17 + 4 >> 2] = $21;
    $21 = $0 + 16 | 0;
    $43 = HEAP32[$21 + 4 >> 2];
    $13 = $4 + 16 | 0;
    HEAP32[$13 >> 2] = HEAP32[$21 >> 2];
    HEAP32[$13 + 4 >> 2] = $43;
    $6 = HEAPF64[$10 + 640 >> 3];
    $14 = HEAPF64[$1 + 80 >> 3];
    $11 = HEAPF64[$1 + 16 >> 3];
    $7 = HEAPF64[$1 + 48 >> 3];
    $6 = $9 * $14 + ($8 * $11 + $5 * $7) > 0.0 ? -$6 : $6;
    $25 = $6 * $7;
    $20 = -$27;
    $24 = $27;
    $22 = HEAPF64[$1 + 72 >> 3];
    $18 = HEAPF64[$1 + 8 >> 3];
    $27 = HEAPF64[$1 + 40 >> 3];
    $7 = $9 * $22 + ($8 * $18 + $5 * $27) > 0.0 ? $20 : $24;
    $28 = -$30;
    $24 = $30;
    $30 = HEAPF64[$1 - -64 >> 3];
    $20 = $8;
    $8 = HEAPF64[$1 >> 3];
    $23 = $5;
    $5 = HEAPF64[$1 + 32 >> 3];
    $9 = $9 * $30 + ($20 * $8 + $23 * $5) > 0.0 ? $28 : $24;
    $5 = $25 + ($7 * $27 + ($9 * $5 + HEAPF64[$17 >> 3]));
    HEAPF64[$17 >> 3] = $5;
    $14 = $6 * $14 + ($7 * $22 + ($9 * $30 + HEAPF64[$13 >> 3]));
    HEAPF64[$13 >> 3] = $14;
    $21 = HEAP32[$0 + 4 >> 2];
    HEAP32[$10 + 384 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$10 + 388 >> 2] = $21;
    $8 = $6 * $11 + ($7 * $18 + ($9 * $8 + HEAPF64[$10 + 384 >> 3]));
    HEAPF64[$10 + 384 >> 3] = $8;
    $21 = $29 - 7 & 255;
    $0 = $2 + (($21 >>> 0) / 3 << 3) | 0;
    HEAPF64[$10 + 528 >> 3] = HEAPF64[$0 >> 3];
    HEAPF64[$10 + 536 >> 3] = HEAPF64[$0 + 32 >> 3];
    HEAPF64[$10 + 544 >> 3] = HEAPF64[$0 - -64 >> 3];
    $0 = (($21 >>> 0) % 3 << 3) + $1 | 0;
    $6 = HEAPF64[$0 >> 3];
    HEAPF64[$10 + 128 >> 3] = $6;
    $7 = HEAPF64[$0 + 32 >> 3];
    HEAPF64[$10 + 136 >> 3] = $7;
    $11 = HEAPF64[$0 - -64 >> 3];
    HEAPF64[$10 + 144 >> 3] = $11;
    $0 = $10 + 96 | 0;
    $1 = $10 - -64 | 0;
    $2 = $10 + 528 | 0;
    $22 = HEAPF64[$2 + 16 >> 3];
    $21 = $10 + 128 | 0;
    $18 = HEAPF64[$21 + 16 >> 3];
    $30 = HEAPF64[$2 >> 3];
    $27 = HEAPF64[$21 >> 3];
    $23 = HEAPF64[$2 + 8 >> 3];
    $28 = HEAPF64[$21 + 8 >> 3];
    $9 = $22 * $18 + ($30 * $27 + $23 * $28);
    $35 = 1.0 - $9 * $9;
    __inlined_func$dLineClosestApproach_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double__2c_20double__29 : {
     if ($35 <= 9.999999747378752e-05) {
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAPF64[$1 >> 3] = 0;
      break __inlined_func$dLineClosestApproach_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double__2c_20double__29;
     }
     $24 = $18;
     $18 = HEAPF64[$4 + 16 >> 3] - HEAPF64[$12 + 16 >> 3];
     $20 = $27;
     $27 = HEAPF64[$4 >> 3] - HEAPF64[$12 >> 3];
     $31 = HEAPF64[$4 + 8 >> 3] - HEAPF64[$12 + 8 >> 3];
     $28 = -($24 * $18 + ($20 * $27 + $31 * $28));
     $22 = $22 * $18 + ($30 * $27 + $31 * $23);
     $18 = 1.0 / $35;
     HEAPF64[$0 >> 3] = ($9 * $28 + $22) * $18;
     HEAPF64[$1 >> 3] = ($9 * $22 + $28) * $18;
    }
    $9 = HEAPF64[$10 + 64 >> 3];
    HEAPF64[$13 >> 3] = $11 * $9 + $14;
    HEAPF64[$17 >> 3] = $7 * $9 + $5;
    HEAPF64[$10 + 384 >> 3] = $6 * $9 + $8;
    HEAP32[$10 + 616 >> 2] = 0;
    HEAP32[$10 + 620 >> 2] = 0;
    HEAPF64[$10 + 608 >> 3] = -HEAPF64[$15 >> 3];
    HEAPF64[$10 + 600 >> 3] = -HEAPF64[$19 >> 3];
    HEAPF64[$10 + 592 >> 3] = -HEAPF64[$26 >> 3];
    FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 16 >> 2]]($44, $10 + 592 | 0, $4, -HEAPF64[$16 >> 3]);
    HEAP32[$64 >> 2] = $29;
    break label$1;
   }
   $9 = HEAPF64[$26 >> 3];
   label$23 : {
    if ($29 >>> 0 <= 3) {
     $8 = HEAPF64[$26 + 16 >> 3];
     $14 = HEAPF64[$26 + 8 >> 3];
     $19 = $10 + 656 | 0;
     $17 = $1;
     $13 = $10 + 624 | 0;
     break label$23;
    }
    $9 = -$9;
    $8 = -HEAPF64[$26 + 16 >> 3];
    $14 = -HEAPF64[$26 + 8 >> 3];
    $4 = $0;
    $19 = $10 + 624 | 0;
    $0 = $21;
    $21 = $4;
    $17 = $2;
    $2 = $1;
    $13 = $10 + 656 | 0;
   }
   $6 = HEAPF64[$17 - -64 >> 3] * $8 + (HEAPF64[$17 >> 3] * $9 + $14 * HEAPF64[$17 + 32 >> 3]);
   HEAPF64[$10 + 592 >> 3] = $6;
   $7 = HEAPF64[$17 + 72 >> 3] * $8 + (HEAPF64[$17 + 8 >> 3] * $9 + $14 * HEAPF64[$17 + 40 >> 3]);
   HEAPF64[$10 + 600 >> 3] = $7;
   $5 = HEAPF64[$17 + 80 >> 3] * $8 + (HEAPF64[$17 + 16 >> 3] * $9 + $14 * HEAPF64[$17 + 48 >> 3]);
   HEAPF64[$10 + 608 >> 3] = $5;
   $5 = Math_abs($5);
   $7 = Math_abs($7);
   $6 = Math_abs($6);
   label$25 : {
    if ($7 > $6) {
     $12 = $5 < $7;
     $1 = $12 ? 1 : 2;
     $4 = 0;
     break label$25;
    }
    $12 = $5 < $6;
    $1 = !$12 << 1;
    $4 = $12;
   }
   $65 = $4;
   $1 = $1 << 3;
   $5 = HEAPF64[$1 + $13 >> 3];
   $5 = HEAPF64[$1 + ($10 + 592 | 0) >> 3] < 0.0 ? $5 : -$5;
   $1 = $1 + $17 | 0;
   $22 = $5 * HEAPF64[$1 - -64 >> 3] + (HEAPF64[$0 + 16 >> 3] - HEAPF64[$21 + 16 >> 3]);
   $18 = $5 * HEAPF64[$1 + 32 >> 3] + (HEAPF64[$0 + 8 >> 3] - HEAPF64[$21 + 8 >> 3]);
   $30 = $5 * HEAPF64[$1 >> 3] + (HEAPF64[$0 >> 3] - HEAPF64[$21 >> 3]);
   $1 = 2;
   $66 = $12 ? 2 : 1;
   $4 = 1;
   label$27 : {
    label$28 : {
     label$29 : {
      $67 = ($29 >>> 0 < 4 ? -1 : -4) + $29 | 0;
      switch ($67 | 0) {
      case 0:
       break label$27;
      case 1:
       break label$28;
      default:
       break label$29;
      };
     }
     $1 = 1;
    }
    $4 = 0;
   }
   $1 = $1 << 3;
   $0 = $1 + $2 | 0;
   $5 = HEAPF64[$0 - -64 >> 3];
   $6 = HEAPF64[$0 >> 3];
   $7 = HEAPF64[$0 + 32 >> 3];
   $27 = $22 * $5 + ($30 * $6 + $18 * $7);
   $0 = $65 << 3;
   $43 = $0 + $17 | 0;
   $31 = HEAPF64[$43 - -64 >> 3];
   $36 = HEAPF64[$43 >> 3];
   $33 = HEAPF64[$43 + 32 >> 3];
   $23 = $5 * $31 + ($6 * $36 + $7 * $33);
   $40 = HEAPF64[$0 + $13 >> 3];
   $37 = $23 * $40;
   $34 = $27 + $37;
   $0 = $66 << 3;
   $54 = $0 + $17 | 0;
   $25 = HEAPF64[$54 - -64 >> 3];
   $32 = HEAPF64[$54 >> 3];
   $20 = HEAPF64[$54 + 32 >> 3];
   $28 = $5 * $25 + ($6 * $32 + $7 * $20);
   $41 = HEAPF64[$0 + $13 >> 3];
   $5 = $28 * $41;
   HEAPF64[$10 + 584 >> 3] = $34 - $5;
   $4 = $4 << 3;
   $0 = $2 + $4 | 0;
   $6 = HEAPF64[$0 - -64 >> 3];
   $7 = HEAPF64[$0 >> 3];
   $11 = HEAPF64[$0 + 32 >> 3];
   $35 = $22 * $6 + ($30 * $7 + $18 * $11);
   $31 = $6 * $31 + ($7 * $36 + $11 * $33);
   $33 = $40 * $31;
   $40 = $35 + $33;
   $36 = $6 * $25 + ($7 * $32 + $11 * $20);
   $6 = $41 * $36;
   HEAPF64[$10 + 576 >> 3] = $40 - $6;
   HEAPF64[$10 + 568 >> 3] = $34 + $5;
   HEAPF64[$10 + 560 >> 3] = $40 + $6;
   $7 = $27 - $37;
   HEAPF64[$10 + 552 >> 3] = $7 + $5;
   $11 = $35 - $33;
   HEAPF64[$10 + 544 >> 3] = $11 + $6;
   HEAPF64[$10 + 536 >> 3] = $7 - $5;
   HEAPF64[$10 + 528 >> 3] = $11 - $6;
   HEAPF64[$10 + 512 >> 3] = HEAPF64[$4 + $19 >> 3];
   HEAPF64[$10 + 520 >> 3] = HEAPF64[$1 + $19 >> 3];
   $12 = $10 + 384 | 0;
   $0 = 0;
   $13 = __stack_pointer - 128 | 0;
   __stack_pointer = $13;
   $15 = $10 + 512 | 0;
   $5 = HEAPF64[$15 >> 3];
   $2 = $10 + 528 | 0;
   $11 = HEAPF64[$2 >> 3];
   $7 = -$11;
   if ($5 > $7) {
    HEAPF64[$12 >> 3] = $11;
    HEAPF64[$12 + 8 >> 3] = HEAPF64[$2 + 8 >> 3];
    $5 = HEAPF64[$15 >> 3];
    $11 = HEAPF64[$2 >> 3];
    $7 = -$11;
    $0 = 1;
    $1 = $12 + 16 | 0;
   } else {
    $1 = $12
   }
   $4 = $5 > $7;
   $6 = HEAPF64[$2 + 16 >> 3];
   $7 = -$6;
   if (($4 | 0) != ($7 < $5 | 0)) {
    $7 = HEAPF64[$2 + 8 >> 3];
    HEAPF64[$1 + 8 >> 3] = (HEAPF64[$2 + 24 >> 3] - $7) / ($6 - $11) * (-$5 - $11) + $7;
    HEAPF64[$1 >> 3] = -HEAPF64[$15 >> 3];
    $5 = HEAPF64[$15 >> 3];
    $6 = HEAPF64[$2 + 16 >> 3];
    $7 = -$6;
    $1 = $1 + 16 | 0;
    $0 = $0 + 1 | 0;
   }
   if ($5 > $7) {
    HEAPF64[$1 >> 3] = $6;
    HEAPF64[$1 + 8 >> 3] = HEAPF64[$2 + 24 >> 3];
    $5 = HEAPF64[$15 >> 3];
    $6 = HEAPF64[$2 + 16 >> 3];
    $7 = -$6;
    $1 = $1 + 16 | 0;
    $0 = $0 + 1 | 0;
   }
   $4 = $5 > $7;
   $7 = HEAPF64[$2 + 32 >> 3];
   $11 = -$7;
   label$4 : {
    if (($4 | 0) != ($11 < $5 | 0)) {
     $11 = HEAPF64[$2 + 24 >> 3];
     HEAPF64[$1 + 8 >> 3] = (HEAPF64[$2 + 40 >> 3] - $11) / ($7 - $6) * (-$5 - $6) + $11;
     HEAPF64[$1 >> 3] = -HEAPF64[$15 >> 3];
     $0 = $0 + 1 | 0;
     if ($0 & 8) {
      $2 = $0;
      break label$4;
     }
     $5 = HEAPF64[$15 >> 3];
     $7 = HEAPF64[$2 + 32 >> 3];
     $11 = -$7;
     $1 = $1 + 16 | 0;
    }
    if ($5 > $11) {
     HEAPF64[$1 >> 3] = $7;
     HEAPF64[$1 + 8 >> 3] = HEAPF64[$2 + 40 >> 3];
     $0 = $0 + 1 | 0;
     if ($0 & 8) {
      $2 = $0;
      break label$4;
     }
     $5 = HEAPF64[$15 >> 3];
     $7 = HEAPF64[$2 + 32 >> 3];
     $11 = -$7;
     $1 = $1 + 16 | 0;
    }
    $4 = $5 > $11;
    $6 = HEAPF64[$2 + 48 >> 3];
    $11 = -$6;
    if (($4 | 0) != ($11 < $5 | 0)) {
     $11 = HEAPF64[$2 + 40 >> 3];
     HEAPF64[$1 + 8 >> 3] = (HEAPF64[$2 + 56 >> 3] - $11) / ($6 - $7) * (-$5 - $7) + $11;
     HEAPF64[$1 >> 3] = -HEAPF64[$15 >> 3];
     $0 = $0 + 1 | 0;
     if ($0 & 8) {
      $2 = $0;
      break label$4;
     }
     $5 = HEAPF64[$15 >> 3];
     $6 = HEAPF64[$2 + 48 >> 3];
     $11 = -$6;
     $1 = $1 + 16 | 0;
    }
    if ($5 > $11) {
     HEAPF64[$1 >> 3] = $6;
     HEAPF64[$1 + 8 >> 3] = HEAPF64[$2 + 56 >> 3];
     $0 = $0 + 1 | 0;
     if ($0 & 8) {
      $2 = $0;
      break label$4;
     }
     $5 = HEAPF64[$15 >> 3];
     $6 = HEAPF64[$2 + 48 >> 3];
     $11 = -$6;
     $1 = $1 + 16 | 0;
    }
    label$150 : {
     label$161 : {
      $7 = HEAPF64[$2 >> 3];
      if ((-$7 < $5 | 0) != ($5 > $11 | 0)) {
       $11 = HEAPF64[$2 + 56 >> 3];
       HEAPF64[$1 + 8 >> 3] = (HEAPF64[$2 + 8 >> 3] - $11) / ($7 - $6) * (-$5 - $6) + $11;
       HEAPF64[$1 >> 3] = -HEAPF64[$15 >> 3];
       $2 = 8;
       $0 = $0 + 1 | 0;
       if ($0 & 8) {
        break label$4
       }
       break label$161;
      }
      if ($0) {
       break label$161
      }
      $2 = 0;
      break label$150;
     }
     $5 = HEAPF64[$15 >> 3];
     $7 = HEAPF64[$12 >> 3];
     label$182 : {
      if (!($5 > $7)) {
       $1 = $13;
       $2 = 0;
       break label$182;
      }
      HEAPF64[$13 >> 3] = $7;
      HEAPF64[$13 + 8 >> 3] = HEAPF64[$12 + 8 >> 3];
      $5 = HEAPF64[$15 >> 3];
      $7 = HEAPF64[$12 >> 3];
      $1 = $13 + 16 | 0;
      $2 = 1;
     }
     $4 = $12 + 16 | 0;
     $16 = $0 >>> 0 > 1;
     $11 = HEAPF64[($16 << 4) + $12 >> 3];
     label$203 : {
      if (($11 < $5 | 0) == ($5 > $7 | 0)) {
       $6 = $5;
       break label$203;
      }
      $6 = HEAPF64[$15 >> 3];
      HEAPF64[$1 >> 3] = $6;
      $33 = HEAPF64[$12 + 8 >> 3];
      HEAPF64[$1 + 8 >> 3] = (HEAPF64[($16 ? $4 : $12) + 8 >> 3] - $33) / ($11 - $7) * ($5 - $7) + $33;
      $2 = $2 + 1 | 0;
      $1 = $1 + 16 | 0;
     }
     label$22 : {
      if (($0 | 0) < 2) {
       break label$22
      }
      $5 = HEAPF64[$4 >> 3];
      if ($5 < $6) {
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = HEAPF64[$12 + 24 >> 3];
       $6 = HEAPF64[$15 >> 3];
       $5 = HEAPF64[$4 >> 3];
       $2 = $2 + 1 | 0;
       $1 = $1 + 16 | 0;
      }
      $4 = $12 + 32 | 0;
      $16 = $0 - 3 >>> 0 < 4294967294;
      $7 = HEAPF64[($16 << 5) + $12 >> 3];
      if (($7 < $6 | 0) != ($5 < $6 | 0)) {
       $11 = HEAPF64[$12 + 24 >> 3];
       HEAPF64[$1 + 8 >> 3] = (HEAPF64[($16 ? $4 : $12) + 8 >> 3] - $11) / ($7 - $5) * ($6 - $5) + $11;
       HEAPF64[$1 >> 3] = HEAPF64[$15 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $1 = $1 + 16 | 0;
      }
      if (($0 | 0) < 3) {
       break label$22
      }
      $5 = HEAPF64[$4 >> 3];
      if ($5 < $6) {
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = HEAPF64[$12 + 40 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $5 = HEAPF64[$4 >> 3];
       $1 = $1 + 16 | 0;
      }
      $4 = $12 + 48 | 0;
      $16 = ($0 & 254) == 2;
      $7 = HEAPF64[($16 ? 0 : 48) + $12 >> 3];
      if (($7 < $6 | 0) != ($5 < $6 | 0)) {
       $11 = HEAPF64[$12 + 40 >> 3];
       HEAPF64[$1 + 8 >> 3] = (HEAPF64[($16 ? $12 : $4) + 8 >> 3] - $11) / ($7 - $5) * ($6 - $5) + $11;
       HEAPF64[$1 >> 3] = HEAPF64[$15 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $1 = $1 + 16 | 0;
      }
      if (($0 | 0) < 4) {
       break label$22
      }
      $5 = HEAPF64[$4 >> 3];
      if ($5 < $6) {
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = HEAPF64[$12 + 56 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $5 = HEAPF64[$4 >> 3];
       $1 = $1 + 16 | 0;
      }
      $4 = $12 - -64 | 0;
      $16 = $0 - 5 >>> 0 < 4294967294;
      $7 = HEAPF64[($16 << 6) + $12 >> 3];
      if (($7 < $6 | 0) != ($5 < $6 | 0)) {
       $11 = HEAPF64[$12 + 56 >> 3];
       HEAPF64[$1 + 8 >> 3] = (HEAPF64[($16 ? $4 : $12) + 8 >> 3] - $11) / ($7 - $5) * ($6 - $5) + $11;
       HEAPF64[$1 >> 3] = HEAPF64[$15 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $1 = $1 + 16 | 0;
      }
      if (($0 | 0) < 5) {
       break label$22
      }
      $5 = HEAPF64[$4 >> 3];
      if ($5 < $6) {
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = HEAPF64[$12 + 72 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $5 = HEAPF64[$4 >> 3];
       $1 = $1 + 16 | 0;
      }
      $4 = $12 + 80 | 0;
      $16 = ($0 & 254) == 4;
      $7 = HEAPF64[($16 ? 0 : 80) + $12 >> 3];
      if (($7 < $6 | 0) != ($5 < $6 | 0)) {
       $11 = HEAPF64[$12 + 72 >> 3];
       HEAPF64[$1 + 8 >> 3] = (HEAPF64[($16 ? $12 : $4) + 8 >> 3] - $11) / ($7 - $5) * ($6 - $5) + $11;
       HEAPF64[$1 >> 3] = HEAPF64[$15 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $1 = $1 + 16 | 0;
      }
      if (($0 | 0) < 6) {
       break label$22
      }
      $5 = HEAPF64[$4 >> 3];
      if ($5 < $6) {
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = HEAPF64[$12 + 88 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $5 = HEAPF64[$4 >> 3];
       $1 = $1 + 16 | 0;
      }
      $4 = $12 + 96 | 0;
      $16 = $0 - 7 >>> 0 < 4294967294;
      $7 = HEAPF64[($16 ? 96 : 0) + $12 >> 3];
      if (($7 < $6 | 0) != ($5 < $6 | 0)) {
       $11 = HEAPF64[$12 + 88 >> 3];
       HEAPF64[$1 + 8 >> 3] = (HEAPF64[($16 ? $4 : $12) + 8 >> 3] - $11) / ($7 - $5) * ($6 - $5) + $11;
       HEAPF64[$1 >> 3] = HEAPF64[$15 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $1 = $1 + 16 | 0;
      }
      if (($0 | 0) < 7) {
       break label$22
      }
      $5 = HEAPF64[$4 >> 3];
      if ($5 < $6) {
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = HEAPF64[$12 + 104 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $5 = HEAPF64[$4 >> 3];
       $1 = $1 + 16 | 0;
      }
      $4 = $12 + 112 | 0;
      $16 = ($0 & 254) == 6;
      $7 = HEAPF64[($16 ? 0 : 112) + $12 >> 3];
      if (($7 < $6 | 0) != ($5 < $6 | 0)) {
       $11 = HEAPF64[$12 + 104 >> 3];
       HEAPF64[$1 + 8 >> 3] = (HEAPF64[($16 ? $12 : $4) + 8 >> 3] - $11) / ($7 - $5) * ($6 - $5) + $11;
       HEAPF64[$1 >> 3] = HEAPF64[$15 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $1 = $1 + 16 | 0;
      }
      if (($0 | 0) < 8) {
       break label$22
      }
      $5 = HEAPF64[$4 >> 3];
      if ($5 < $6) {
       HEAPF64[$1 >> 3] = $5;
       HEAPF64[$1 + 8 >> 3] = HEAPF64[$12 + 120 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $6 = HEAPF64[$15 >> 3];
       $5 = HEAPF64[$4 >> 3];
       $1 = $1 + 16 | 0;
      }
      $0 = (($0 - 9 >>> 0 < 4294967294) << 7) + $12 | 0;
      $7 = HEAPF64[$0 >> 3];
      if (($7 < $6 | 0) == ($5 < $6 | 0)) {
       break label$22
      }
      $11 = HEAPF64[$12 + 120 >> 3];
      HEAPF64[$1 + 8 >> 3] = (HEAPF64[$0 + 8 >> 3] - $11) / ($7 - $5) * ($6 - $5) + $11;
      HEAPF64[$1 >> 3] = HEAPF64[$15 >> 3];
      $2 = $2 + 1 | 0;
      if ($2 & 8) {
       break label$150
      }
     }
     if (($2 | 0) <= 0) {
      $2 = 0;
      break label$150;
     }
     $61 = $13 | 8;
     $4 = 0;
     $1 = $13;
     $0 = $12;
     while (1) {
      $5 = HEAPF64[$15 + 8 >> 3];
      $16 = $1 + 8 | 0;
      $6 = HEAPF64[$16 >> 3];
      $7 = -$6;
      if ($5 > $7) {
       HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
       HEAPF64[$0 + 8 >> 3] = HEAPF64[$16 >> 3];
       $4 = $4 + 1 | 0;
       if ($4 & 8) {
        $2 = $4;
        break label$4;
       }
       $6 = HEAPF64[$16 >> 3];
       $7 = -$6;
       $5 = HEAPF64[$15 + 8 >> 3];
       $0 = $0 + 16 | 0;
      }
      $16 = $1 + 16 | 0;
      $62 = $2 >>> 0 > 1;
      $11 = HEAPF64[($62 ? $1 + 24 | 0 : $61) >> 3];
      if ((-$11 < $5 | 0) != ($5 > $7 | 0)) {
       $7 = HEAPF64[$1 >> 3];
       HEAPF64[$0 >> 3] = (HEAPF64[($62 ? $16 : $13) >> 3] - $7) / ($11 - $6) * (-$5 - $6) + $7;
       HEAPF64[$0 + 8 >> 3] = -HEAPF64[$15 + 8 >> 3];
       $4 = $4 + 1 | 0;
       if ($4 & 8) {
        $2 = $4;
        break label$4;
       }
       $0 = $0 + 16 | 0;
      }
      $62 = ($2 | 0) > 1;
      $2 = $2 - 1 | 0;
      $1 = $16;
      if ($62) {
       continue
      }
      break;
     };
     $2 = 0;
     if (($4 | 0) <= 0) {
      break label$150
     }
     $0 = $13;
     $1 = $12;
     while (1) {
      $5 = HEAPF64[$15 + 8 >> 3];
      $16 = $1 + 8 | 0;
      $7 = HEAPF64[$16 >> 3];
      if ($5 > $7) {
       HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
       HEAPF64[$0 + 8 >> 3] = HEAPF64[$16 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $7 = HEAPF64[$16 >> 3];
       $5 = HEAPF64[$15 + 8 >> 3];
       $0 = $0 + 16 | 0;
      }
      $16 = $1 + 16 | 0;
      $61 = $4 >>> 0 > 1 ? $16 : $12;
      $6 = HEAPF64[$61 + 8 >> 3];
      if (($6 < $5 | 0) != ($5 > $7 | 0)) {
       $11 = HEAPF64[$1 >> 3];
       HEAPF64[$0 >> 3] = (HEAPF64[$61 >> 3] - $11) / ($6 - $7) * ($5 - $7) + $11;
       HEAPF64[$0 + 8 >> 3] = HEAPF64[$15 + 8 >> 3];
       $2 = $2 + 1 | 0;
       if ($2 & 8) {
        break label$150
       }
       $0 = $0 + 16 | 0;
      }
      $61 = ($4 | 0) > 1;
      $4 = $4 - 1 | 0;
      $1 = $16;
      if ($61) {
       continue
      }
      break;
     };
    }
    if (($12 | 0) == ($13 | 0)) {
     break label$4
    }
    memcpy($12, $13, $2 << 4);
   }
   __stack_pointer = $13 + 128 | 0;
   $4 = $2;
   if (($2 | 0) <= 0) {
    break label$1
   }
   $5 = 1.0 / ($31 * $28 - $23 * $36);
   $7 = $5 * -$23;
   $11 = $5 * -$36;
   $23 = $28 * $5;
   $28 = $31 * $5;
   $31 = HEAPF64[($67 << 3) + $19 >> 3];
   $0 = ($66 << 3) + $17 | 0;
   $36 = HEAPF64[$0 - -64 >> 3];
   $1 = ($65 << 3) + $17 | 0;
   $33 = HEAPF64[$1 - -64 >> 3];
   $40 = HEAPF64[$0 + 32 >> 3];
   $37 = HEAPF64[$1 + 32 >> 3];
   $34 = HEAPF64[$54 >> 3];
   $25 = HEAPF64[$43 >> 3];
   $1 = 0;
   $2 = $10 + 384 | 0;
   while (1) {
    $0 = ($10 + 192 | 0) + Math_imul($1, 24) | 0;
    $32 = HEAPF64[$2 >> 3];
    $6 = $32 - $35;
    $20 = HEAPF64[$2 + 8 >> 3];
    $41 = $20 - $27;
    $5 = $7 * $6 + $28 * $41;
    $6 = $23 * $6 + $11 * $41;
    $41 = $5 * $34 + ($6 * $25 + $30);
    HEAPF64[$0 >> 3] = $41;
    $53 = $5 * $36 + ($6 * $33 + $22);
    HEAPF64[$0 + 16 >> 3] = $53;
    $5 = $5 * $40 + ($6 * $37 + $18);
    HEAPF64[$0 + 8 >> 3] = $5;
    $5 = $31 - ($8 * $53 + ($9 * $41 + $14 * $5));
    HEAPF64[($10 + 128 | 0) + ($1 << 3) >> 3] = $5;
    if ($5 >= 0.0) {
     $0 = ($10 + 384 | 0) + ($1 << 4) | 0;
     HEAPF64[$0 + 8 >> 3] = $20;
     HEAPF64[$0 >> 3] = $32;
     $1 = $1 + 1 | 0;
    }
    $2 = $2 + 16 | 0;
    $4 = $4 - 1 | 0;
    if ($4) {
     continue
    }
    break;
   };
   if (($1 | 0) <= 0) {
    break label$1
   }
   $0 = ($1 | 0) < 4 ? $1 : 4;
   $15 = ($0 | 0) > 1 ? $0 : 1;
   label$34 : {
    if ($1 >>> 0 <= $15 >>> 0) {
     if ($29 >>> 0 >= 4) {
      $0 = $10 + 128 | 0;
      $2 = $10 + 192 | 0;
      $4 = $1;
      while (1) {
       $8 = HEAPF64[$26 >> 3];
       $9 = HEAPF64[$0 >> 3];
       HEAPF64[$10 + 96 >> 3] = HEAPF64[$2 >> 3] + HEAPF64[$21 >> 3] - $8 * $9;
       $5 = HEAPF64[$26 + 8 >> 3];
       HEAPF64[$10 + 104 >> 3] = HEAPF64[$2 + 8 >> 3] + HEAPF64[$21 + 8 >> 3] - $9 * $5;
       $6 = HEAPF64[$26 + 16 >> 3];
       HEAPF64[$10 + 112 >> 3] = HEAPF64[$2 + 16 >> 3] + HEAPF64[$21 + 16 >> 3] - $9 * $6;
       HEAP32[$10 + 88 >> 2] = 0;
       HEAP32[$10 + 92 >> 2] = 0;
       HEAPF64[$10 + 80 >> 3] = -$6;
       HEAPF64[$10 + 72 >> 3] = -$5;
       HEAPF64[$10 + 64 >> 3] = -$8;
       FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 16 >> 2]]($44, $10 - -64 | 0, $10 + 96 | 0, -$9);
       $2 = $2 + 24 | 0;
       $0 = $0 + 8 | 0;
       $4 = $4 - 1 | 0;
       if ($4) {
        continue
       }
       break;
      };
      break label$34;
     }
     $0 = $10 + 128 | 0;
     $2 = $10 + 192 | 0;
     $4 = $1;
     while (1) {
      HEAPF64[$10 + 96 >> 3] = HEAPF64[$2 >> 3] + HEAPF64[$21 >> 3];
      HEAPF64[$10 + 104 >> 3] = HEAPF64[$2 + 8 >> 3] + HEAPF64[$21 + 8 >> 3];
      HEAPF64[$10 + 112 >> 3] = HEAPF64[$2 + 16 >> 3] + HEAPF64[$21 + 16 >> 3];
      HEAP32[$10 + 88 >> 2] = 0;
      HEAP32[$10 + 92 >> 2] = 0;
      HEAPF64[$10 + 80 >> 3] = -HEAPF64[$26 + 16 >> 3];
      HEAPF64[$10 + 72 >> 3] = -HEAPF64[$26 + 8 >> 3];
      HEAPF64[$10 + 64 >> 3] = -HEAPF64[$26 >> 3];
      FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 16 >> 2]]($44, $10 - -64 | 0, $10 + 96 | 0, -HEAPF64[$0 >> 3]);
      $2 = $2 + 24 | 0;
      $0 = $0 + 8 | 0;
      $4 = $4 - 1 | 0;
      if ($4) {
       continue
      }
      break;
     };
     break label$34;
    }
    $17 = 0;
    label$39 : {
     if ($1 >>> 0 < 2) {
      break label$39
     }
     $0 = $1 - 1 | 0;
     $19 = $0 & 3;
     $14 = HEAPF64[$10 + 128 >> 3];
     label$40 : {
      if ($1 - 2 >>> 0 < 3) {
       $2 = 1;
       break label$40;
      }
      $43 = $0 & -4;
      $0 = $10 + 160 | 0;
      $2 = 1;
      while (1) {
       $9 = HEAPF64[$0 - 24 >> 3];
       $4 = $9 > $14;
       $8 = HEAPF64[$0 - 16 >> 3];
       $9 = $4 ? $9 : $14;
       $12 = $8 > $9;
       $5 = HEAPF64[$0 - 8 >> 3];
       $9 = $12 ? $8 : $9;
       $13 = $5 > $9;
       $8 = HEAPF64[$0 >> 3];
       $9 = $13 ? $5 : $9;
       $16 = $8 > $9;
       $14 = $16 ? $8 : $9;
       $54 = $2 + 3 | 0;
       $17 = $16 ? $54 : $13 ? $2 + 2 | 0 : $12 ? $2 + 1 | 0 : $4 ? $2 : $17;
       $2 = $2 + 4 | 0;
       $0 = $0 + 32 | 0;
       if (($43 | 0) != ($54 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$19) {
      break label$39
     }
     $0 = ($10 + 128 | 0) + ($2 << 3) | 0;
     while (1) {
      $9 = HEAPF64[$0 >> 3];
      $4 = $9 > $14;
      $14 = $4 ? $9 : $14;
      $17 = $4 ? $2 : $17;
      $0 = $0 + 8 | 0;
      $2 = $2 + 1 | 0;
      $19 = $19 - 1 | 0;
      if ($19) {
       continue
      }
      break;
     };
    }
    $4 = $10 + 384 | 0;
    $2 = $10 + 96 | 0;
    $8 = 0.0;
    $7 = 0.0;
    $11 = 0.0;
    $16 = __stack_pointer - 96 | 0;
    __stack_pointer = $16;
    label$110 : {
     label$2 : {
      label$3 : {
       label$411 : {
        label$5 : {
         $12 = $1 - 1 | 0;
         switch ($12 | 0) {
         case 1:
          break label$3;
         case 0:
          break label$411;
         default:
          break label$5;
         };
        }
        if (($1 | 0) >= 2) {
         $13 = $4;
         while (1) {
          $5 = HEAPF64[$13 >> 3];
          $6 = HEAPF64[$13 + 24 >> 3];
          $14 = HEAPF64[$13 + 8 >> 3];
          $13 = $13 + 16 | 0;
          $22 = HEAPF64[$13 >> 3];
          $9 = $5 * $6 - $14 * $22;
          $7 = $9 * ($6 + $14) + $7;
          $8 = $8 + $9;
          $11 = $9 * ($5 + $22) + $11;
          $12 = $12 - 1 | 0;
          if ($12) {
           continue
          }
          break;
         };
        }
        $9 = 1.e+30;
        $18 = $8;
        $0 = ($1 << 4) + $4 | 0;
        $5 = HEAPF64[$0 - 16 >> 3];
        $6 = HEAPF64[$4 + 8 >> 3];
        $14 = HEAPF64[$0 - 8 >> 3];
        $22 = HEAPF64[$4 >> 3];
        $8 = $5 * $6 - $14 * $22;
        $18 = $18 + $8;
        if (Math_abs($18) > 2.220446049250313e-16) {
         $9 = 1.0 / ($18 * 3.0)
        }
        $12 = 0;
        if (($1 | 0) <= 0) {
         break label$110
        }
        $7 = ($8 * ($6 + $14) + $7) * $9;
        $9 = ($8 * ($5 + $22) + $11) * $9;
        break label$2;
       }
       $7 = HEAPF64[$4 + 8 >> 3];
       $9 = HEAPF64[$4 >> 3];
       break label$2;
      }
      $7 = (HEAPF64[$4 + 8 >> 3] + HEAPF64[$4 + 24 >> 3]) * .5;
      $9 = (HEAPF64[$4 >> 3] + HEAPF64[$4 + 16 >> 3]) * .5;
     }
     $13 = $16 + 32 | 0;
     $12 = $1;
     while (1) {
      (wasm2js_i32$0 = $13, wasm2js_f64$0 = atan2(HEAPF64[$4 + 8 >> 3] - $7, HEAPF64[$4 >> 3] - $9)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
      $4 = $4 + 16 | 0;
      $13 = $13 + 8 | 0;
      $12 = $12 - 1 | 0;
      if ($12) {
       continue
      }
      break;
     };
     $13 = $1 & 7;
     $12 = 0;
     if ($1 - 1 >>> 0 >= 7) {
      $0 = $1 & -8;
      $4 = $16 + 16 | 0;
      while (1) {
       HEAP32[$4 >> 2] = 1;
       HEAP32[$4 + 4 >> 2] = 1;
       $19 = $4 + 8 | 0;
       HEAP32[$19 >> 2] = 1;
       HEAP32[$19 + 4 >> 2] = 1;
       $19 = $4 - 8 | 0;
       HEAP32[$19 >> 2] = 1;
       HEAP32[$19 + 4 >> 2] = 1;
       $19 = $4 - 16 | 0;
       HEAP32[$19 >> 2] = 1;
       HEAP32[$19 + 4 >> 2] = 1;
       $4 = $4 + 32 | 0;
       $12 = $12 + 8 | 0;
       if (($0 | 0) != ($12 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$13) {
      $12 = 1;
      break label$110;
     }
     $4 = ($12 << 2) + $16 | 0;
     while (1) {
      $12 = 1;
      HEAP32[$4 >> 2] = 1;
      $4 = $4 + 4 | 0;
      $13 = $13 - 1 | 0;
      if ($13) {
       continue
      }
      break;
     };
    }
    HEAP32[$2 >> 2] = $17;
    $0 = ($17 << 2) + $16 | 0;
    HEAP32[$0 >> 2] = 0;
    label$1414 : {
     if (($15 | 0) < 2) {
      break label$1414
     }
     $19 = $2 + 4 | 0;
     if ($12) {
      $5 = HEAPF64[($16 + 32 | 0) + ($17 << 3) >> 3];
      $6 = +Math_fround(Math_fround(6.2831854820251465) / Math_fround($15 | 0));
      $7 = 1.0;
      $43 = 1;
      while (1) {
       HEAP32[$19 >> 2] = $17;
       $9 = $7 * $6 + $5;
       $14 = $9 > 3.1415927410125732 ? $9 + -6.2831854820251465 : $9;
       $8 = 1.0e9;
       $13 = $16 + 32 | 0;
       $4 = $16;
       $0 = $17;
       $12 = 0;
       while (1) {
        label$1817 : {
         if (!HEAP32[$4 >> 2]) {
          break label$1817
         }
         $9 = Math_abs(HEAPF64[$13 >> 3] - $14);
         $9 = $9 > 3.1415927410125732 ? 6.2831854820251465 - $9 : $9;
         if (!($9 < $8)) {
          break label$1817
         }
         HEAP32[$19 >> 2] = $12;
         $0 = $12;
         $8 = $9;
        }
        $4 = $4 + 4 | 0;
        $13 = $13 + 8 | 0;
        $12 = $12 + 1 | 0;
        if (($12 | 0) != ($1 | 0)) {
         continue
        }
        break;
       };
       HEAP32[($0 << 2) + $16 >> 2] = 0;
       $19 = $19 + 4 | 0;
       $7 = $7 + 1.0;
       $43 = $43 + 1 | 0;
       if (($43 | 0) != ($15 | 0)) {
        continue
       }
       break;
      };
      break label$1414;
     }
     $1 = $15 - 1 | 0;
     $4 = $1 & 7;
     if ($15 - 2 >>> 0 >= 7) {
      $13 = $1 & -8;
      while (1) {
       HEAP32[$19 >> 2] = $17;
       HEAP32[$19 + 28 >> 2] = $17;
       HEAP32[$19 + 24 >> 2] = $17;
       HEAP32[$19 + 20 >> 2] = $17;
       HEAP32[$19 + 16 >> 2] = $17;
       HEAP32[$19 + 12 >> 2] = $17;
       HEAP32[$19 + 8 >> 2] = $17;
       HEAP32[$19 + 4 >> 2] = $17;
       $19 = $19 + 32 | 0;
       $13 = $13 - 8 | 0;
       if ($13) {
        continue
       }
       break;
      };
     }
     if ($4) {
      while (1) {
       HEAP32[$19 >> 2] = $17;
       $19 = $19 + 4 | 0;
       $4 = $4 - 1 | 0;
       if ($4) {
        continue
       }
       break;
      }
     }
     HEAP32[$0 >> 2] = 0;
    }
    __stack_pointer = $16 + 96 | 0;
    $12 = $29 >>> 0 > 3;
    $0 = $15;
    while (1) {
     $1 = HEAP32[$2 >> 2];
     $4 = ($10 + 192 | 0) + Math_imul($1, 24) | 0;
     $8 = HEAPF64[$4 >> 3] + HEAPF64[$21 >> 3];
     HEAPF64[$10 + 64 >> 3] = $8;
     $5 = HEAPF64[$4 + 8 >> 3] + HEAPF64[$21 + 8 >> 3];
     HEAPF64[$10 + 72 >> 3] = $5;
     $9 = HEAPF64[$4 + 16 >> 3] + HEAPF64[$21 + 16 >> 3];
     HEAPF64[$10 + 80 >> 3] = $9;
     label$45 : {
      if (!$12) {
       HEAP32[$10 + 56 >> 2] = 0;
       HEAP32[$10 + 60 >> 2] = 0;
       HEAPF64[$10 + 48 >> 3] = -HEAPF64[$26 + 16 >> 3];
       HEAPF64[$10 + 40 >> 3] = -HEAPF64[$26 + 8 >> 3];
       HEAPF64[$10 + 32 >> 3] = -HEAPF64[$26 >> 3];
       FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 16 >> 2]]($44, $10 + 32 | 0, $10 - -64 | 0, -HEAPF64[($10 + 128 | 0) + ($1 << 3) >> 3]);
       break label$45;
      }
      HEAP32[$10 + 56 >> 2] = 0;
      HEAP32[$10 + 60 >> 2] = 0;
      $6 = HEAPF64[$26 + 16 >> 3];
      HEAPF64[$10 + 48 >> 3] = -$6;
      $7 = HEAPF64[$26 + 8 >> 3];
      HEAPF64[$10 + 40 >> 3] = -$7;
      $14 = HEAPF64[$26 >> 3];
      HEAPF64[$10 + 32 >> 3] = -$14;
      HEAP32[$10 + 24 >> 2] = 0;
      HEAP32[$10 + 28 >> 2] = 0;
      $18 = $9;
      $9 = HEAPF64[($10 + 128 | 0) + ($1 << 3) >> 3];
      HEAPF64[$10 + 16 >> 3] = $18 - $6 * $9;
      HEAPF64[$10 + 8 >> 3] = $5 - $7 * $9;
      HEAPF64[$10 >> 3] = $8 - $14 * $9;
      FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 16 >> 2]]($44, $10 + 32 | 0, $10, -$9);
     }
     $2 = $2 + 4 | 0;
     $0 = $0 - 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   HEAP32[$64 >> 2] = $29;
  }
  __stack_pointer = $10 + 688 | 0;
  __stack_pointer = $3 + 304 | 0;
 }
 
 function btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17564;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17564;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btBoxBoxCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $7 = __stack_pointer - 288 | 0;
  __stack_pointer = $7;
  $10 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$10) {
    break label$1
   }
   HEAP32[$4 + 4 >> 2] = $10;
   $14 = HEAP32[$2 + 4 >> 2];
   $15 = HEAP32[$1 + 4 >> 2];
   HEAP32[$7 + 280 >> 2] = 966823146;
   HEAP32[$7 + 284 >> 2] = 1177108057;
   $1 = HEAP32[$1 + 12 >> 2];
   $5 = $1 + 8 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $10 = $7 + 24 | 0;
   $8 = $10 + 8 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 16 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $10 + 16 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 24 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $10 + 24 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = HEAP32[$1 >> 2];
   $6 = HEAP32[$1 + 4 >> 2];
   $8 = $1 + 56 | 0;
   $12 = HEAP32[$8 + 4 >> 2];
   $9 = $10 + 56 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$9 + 4 >> 2] = $12;
   $8 = $1 + 48 | 0;
   $12 = HEAP32[$8 + 4 >> 2];
   $9 = $10 + 48 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$9 + 4 >> 2] = $12;
   $8 = $1 + 40 | 0;
   $12 = HEAP32[$8 + 4 >> 2];
   $9 = $10 + 40 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$9 + 4 >> 2] = $12;
   $8 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $9 = $1 + 88 | 0;
   $13 = HEAP32[$9 + 4 >> 2];
   $11 = $10 + 88 | 0;
   HEAP32[$11 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$11 + 4 >> 2] = $13;
   $9 = $1 + 80 | 0;
   $13 = HEAP32[$9 + 4 >> 2];
   $11 = $10 + 80 | 0;
   HEAP32[$11 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$11 + 4 >> 2] = $13;
   $9 = $1 + 72 | 0;
   $13 = HEAP32[$9 + 4 >> 2];
   $11 = $10 + 72 | 0;
   HEAP32[$11 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$11 + 4 >> 2] = $13;
   HEAP32[$7 + 24 >> 2] = $5;
   HEAP32[$7 + 28 >> 2] = $6;
   HEAP32[$7 + 56 >> 2] = $8;
   HEAP32[$7 + 60 >> 2] = $12;
   $5 = HEAP32[$1 + 68 >> 2];
   HEAP32[$7 + 88 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$7 + 92 >> 2] = $5;
   $5 = $1 + 120 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $10 + 120 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 112 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $10 + 112 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = $1 + 104 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = $10 + 104 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $5 = HEAP32[$1 + 100 >> 2];
   HEAP32[$7 + 120 >> 2] = HEAP32[$1 + 96 >> 2];
   HEAP32[$7 + 124 >> 2] = $5;
   $1 = HEAP32[$2 + 12 >> 2];
   $2 = $1 + 24 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 176 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 16 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 168 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 8 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 160 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$7 + 152 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$7 + 156 >> 2] = $2;
   $2 = HEAP32[$1 + 36 >> 2];
   $5 = $7 + 184 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   $2 = $1 + 40 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 192 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 48 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 200 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 56 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 208 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 68 >> 2];
   $5 = $7 + 216 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   $2 = $1 + 72 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 224 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 80 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 232 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 88 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 240 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = HEAP32[$1 + 100 >> 2];
   $5 = $7 + 248 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 96 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   $2 = $1 + 104 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 256 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $2 = $1 + 120 | 0;
   $5 = HEAP32[$2 + 4 >> 2];
   $6 = $7 + 272 | 0;
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $1 = $1 + 112 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $5 = $7 + 264 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   $1 = $7 + 8 | 0;
   HEAP32[$1 + 8 >> 2] = $14;
   HEAP32[$1 + 4 >> 2] = $15;
   HEAP32[$1 >> 2] = 17512;
   btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($1, $10, $4, HEAP32[$3 + 28 >> 2], 0);
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $0 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$0 + 1456 >> 2]) {
    break label$1
   }
   $2 = HEAP32[$0 + 1448 >> 2];
   $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   $1 = ($2 | 0) == ($3 | 0);
   $5 = $0;
   $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($5, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $3) + 8 | 0);
  }
  __stack_pointer = $7 + 288 | 0;
 }
 
 function btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17636;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17636;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btConvexPlaneCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (!HEAP32[$0 + 12 >> 2]) {
    break label$1
   }
   $20 = HEAPU8[$0 + 16 | 0];
   $14 = $20 ? $2 : $1;
   $5 = HEAP32[$14 + 12 >> 2];
   $36 = HEAPF64[$5 + 112 >> 3];
   $37 = HEAPF64[$5 + 104 >> 3];
   $38 = HEAPF64[$5 + 96 >> 3];
   $22 = $20 ? $1 : $2;
   $6 = HEAP32[$22 + 12 >> 2];
   $39 = HEAPF64[$6 + 112 >> 3];
   $21 = HEAPF64[$6 + 96 >> 3];
   $40 = HEAPF64[$6 + 104 >> 3];
   $14 = HEAP32[$14 + 4 >> 2];
   $25 = HEAPF64[$5 + 64 >> 3];
   $26 = HEAPF64[$5 + 32 >> 3];
   $27 = HEAPF64[$5 >> 3];
   $29 = HEAPF64[$5 + 72 >> 3];
   $12 = HEAPF64[$5 + 40 >> 3];
   $16 = HEAPF64[$5 + 8 >> 3];
   $8 = HEAPF64[$6 + 80 >> 3];
   $9 = HEAPF64[$6 + 48 >> 3];
   $7 = HEAPF64[$6 + 16 >> 3];
   $10 = HEAPF64[$6 + 64 >> 3];
   $13 = HEAPF64[$6 + 32 >> 3];
   $15 = HEAPF64[$6 >> 3];
   $20 = HEAP32[$22 + 4 >> 2];
   $18 = HEAPF64[$6 + 72 >> 3];
   $11 = HEAPF64[$5 + 80 >> 3];
   $19 = HEAPF64[$6 + 40 >> 3];
   $31 = HEAPF64[$5 + 48 >> 3];
   $28 = HEAPF64[$6 + 8 >> 3];
   $32 = HEAPF64[$5 + 16 >> 3];
   HEAP32[$3 + 56 >> 2] = 0;
   HEAP32[$3 + 60 >> 2] = 0;
   $45 = $10 * $11 + ($15 * $32 + $31 * $13);
   $33 = -HEAPF64[$20 + 88 >> 3];
   $46 = $18 * $11 + ($28 * $32 + $31 * $19);
   $6 = $20 + 96 | 0;
   $41 = HEAPF64[$6 >> 3];
   $31 = $8 * $11 + ($7 * $32 + $31 * $9);
   $44 = $20 + 104 | 0;
   $11 = HEAPF64[$44 >> 3];
   HEAPF64[$3 + 48 >> 3] = $45 * $33 - $46 * $41 - $31 * $11;
   $32 = $10 * $29 + ($15 * $16 + $12 * $13);
   $47 = $18 * $29 + ($28 * $16 + $12 * $19);
   $48 = $8 * $29 + ($7 * $16 + $12 * $9);
   HEAPF64[$3 + 40 >> 3] = $32 * $33 - $41 * $47 - $11 * $48;
   $49 = $10 * $25 + ($15 * $27 + $26 * $13);
   $43 = $49 * $33;
   $33 = $18 * $25 + ($28 * $27 + $26 * $19);
   $34 = $11;
   $11 = $8 * $25 + ($7 * $27 + $26 * $9);
   HEAPF64[$3 + 32 >> 3] = $43 - $41 * $33 - $34 * $11;
   FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 64 >> 2]]($3 - -64 | 0, $14, $3 + 32 | 0);
   $5 = HEAP32[$22 + 12 >> 2];
   $41 = HEAPF64[$5 + 96 >> 3];
   $17 = HEAPF64[$5 + 64 >> 3];
   $24 = HEAPF64[$5 + 32 >> 3];
   $30 = HEAPF64[$5 + 16 >> 3];
   $35 = HEAPF64[$5 + 8 >> 3];
   $23 = HEAPF64[$5 >> 3];
   $42 = HEAPF64[$5 + 112 >> 3];
   $50 = HEAPF64[$5 + 104 >> 3];
   $34 = HEAPF64[$5 + 80 >> 3];
   $51 = HEAPF64[$5 + 72 >> 3];
   $52 = HEAPF64[$5 + 48 >> 3];
   $53 = HEAPF64[$5 + 40 >> 3];
   $54 = HEAPF64[$20 + 120 >> 3];
   $29 = HEAPF64[$44 >> 3];
   $12 = HEAPF64[$20 + 88 >> 3];
   $16 = HEAPF64[$6 >> 3];
   $25 = HEAPF64[$3 + 80 >> 3];
   $26 = HEAPF64[$3 + 64 >> 3];
   $27 = HEAPF64[$3 + 72 >> 3];
   $55 = HEAPF64[HEAP32[$0 + 12 >> 2] + 1464 >> 3];
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
   $57 = $36 * $8 + ($38 * $7 + $37 * $9);
   $43 = $7;
   $7 = -$21;
   $11 = $57 + ($43 * $7 - $9 * $40 - $8 * $39) + ($25 * $31 + ($26 * $11 + $48 * $27));
   $13 = $36 * $10 + ($38 * $15 + $37 * $13) + ($15 * $7 - $13 * $40 - $10 * $39) + ($25 * $45 + ($26 * $49 + $32 * $27));
   $15 = $36 * $18 + ($38 * $28 + $37 * $19) + ($28 * $7 - $19 * $40 - $18 * $39) + ($25 * $46 + ($26 * $33 + $47 * $27));
   $8 = $29 * $11 + ($12 * $13 + $16 * $15) - $54;
   if ($55 > $8) {
    HEAP32[$3 + 56 >> 2] = 0;
    HEAP32[$3 + 60 >> 2] = 0;
    $5 = HEAP32[$22 + 12 >> 2];
    $9 = HEAPF64[$20 + 104 >> 3];
    $7 = HEAPF64[$20 + 88 >> 3];
    $10 = HEAPF64[$20 + 96 >> 3];
    HEAPF64[$3 + 32 >> 3] = HEAPF64[$5 + 16 >> 3] * $9 + (HEAPF64[$5 >> 3] * $7 + HEAPF64[$5 + 8 >> 3] * $10);
    HEAPF64[$3 + 48 >> 3] = $9 * HEAPF64[$5 + 80 >> 3] + ($7 * HEAPF64[$5 + 64 >> 3] + $10 * HEAPF64[$5 + 72 >> 3]);
    HEAPF64[$3 + 40 >> 3] = $9 * HEAPF64[$5 + 48 >> 3] + ($7 * HEAPF64[$5 + 32 >> 3] + $10 * HEAPF64[$5 + 40 >> 3]);
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 28 >> 2] = 0;
    $9 = $11 - $29 * $8;
    $7 = $13 - $12 * $8;
    $10 = $15 - $16 * $8;
    HEAPF64[$3 + 16 >> 3] = $9 * $34 + ($7 * $17 + $10 * $51) + $42;
    HEAPF64[$3 + 8 >> 3] = $9 * $52 + ($7 * $24 + $10 * $53) + $50;
    HEAPF64[$3 >> 3] = $9 * $30 + ($7 * $23 + $35 * $10) + $41;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $3 + 32 | 0, $3, $8);
   }
   label$3 : {
    if (HEAP32[$14 + 4 >> 2] > 6 | HEAP32[HEAP32[$4 + 4 >> 2] + 1456 >> 2] >= HEAP32[$0 + 24 >> 2]) {
     break label$3
    }
    $9 = HEAPF64[$20 + 104 >> 3];
    label$4 : {
     if (Math_abs($9) > .7071067811865476) {
      $8 = HEAPF64[$20 + 96 >> 3];
      $7 = 1.0 / Math_sqrt($8 * $8 + $9 * $9);
      $8 = $8 * $7;
      $9 = $7 * -$9;
      $7 = 0.0;
      break label$4;
     }
     $8 = HEAPF64[$20 + 88 >> 3];
     $7 = HEAPF64[$20 + 96 >> 3];
     $10 = 1.0 / Math_sqrt($8 * $8 + $7 * $7);
     $9 = $8 * $10;
     $8 = 0.0;
     $7 = $10 * -$7;
    }
    $44 = 0;
    $10 = +FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 16 >> 2]]($14);
    $10 = Math_min(HEAPF64[3845] / $10, .39269908169872414) * .5;
    $13 = sin($10);
    $5 = HEAP32[$0 + 20 >> 2];
    $31 = cos($10);
    if (($5 | 0) <= 0) {
     break label$3
    }
    $11 = $8;
    $8 = $13 / Math_sqrt($8 * $8 + ($7 * $7 + $9 * $9));
    $32 = $11 * $8;
    $33 = $9 * $8;
    $41 = $7 * $8;
    while (1) {
     $9 = HEAPF64[$20 + 96 >> 3];
     $10 = HEAPF64[$20 + 88 >> 3];
     $8 = HEAPF64[$20 + 104 >> 3];
     $7 = 6.283185307179586 / +($5 | 0) * +($44 | 0) * .5;
     $13 = sin($7) / Math_sqrt($8 * $8 + ($10 * $10 + $9 * $9));
     $8 = $8 * $13;
     $9 = $9 * $13;
     $7 = cos($7);
     $10 = $10 * $13;
     $13 = $8 * $32 + ($9 * $33 + ($7 * $31 + $41 * $10));
     $15 = $8 * $33 + ($7 * $41 - $31 * $10 - $9 * $32);
     $18 = $10 * $32 + ($7 * $33 - $31 * $9 - $8 * $41);
     $19 = $9 * $41 + ($7 * $32 - $31 * $8 - $10 * $33);
     HEAPF64[$3 + 56 >> 3] = $13 * $7 - $10 * $15 - $18 * $9 - $19 * $8;
     HEAPF64[$3 + 48 >> 3] = $15 * $9 + ($13 * $8 + $7 * $19) - $18 * $10;
     HEAPF64[$3 + 40 >> 3] = $19 * $10 + ($13 * $9 + $7 * $18) - $15 * $8;
     HEAPF64[$3 + 32 >> 3] = $18 * $8 + ($13 * $10 + $7 * $15) - $19 * $9;
     $5 = __stack_pointer - 96 | 0;
     __stack_pointer = $5;
     $14 = HEAPU8[$0 + 16 | 0];
     $22 = $14 ? $2 : $1;
     $6 = HEAP32[$22 + 12 >> 2];
     $45 = HEAPF64[$6 + 112 >> 3];
     $46 = HEAPF64[$6 + 104 >> 3];
     $47 = HEAPF64[$6 + 96 >> 3];
     $56 = $14 ? $1 : $2;
     $14 = HEAP32[$56 + 12 >> 2];
     $48 = HEAPF64[$14 + 112 >> 3];
     $50 = HEAPF64[$14 + 96 >> 3];
     $49 = HEAPF64[$14 + 104 >> 3];
     $58 = HEAP32[$22 + 4 >> 2];
     $8 = HEAPF64[$14 + 80 >> 3];
     $9 = HEAPF64[$14 + 16 >> 3];
     $7 = HEAPF64[$14 + 48 >> 3];
     $10 = HEAPF64[$14 + 64 >> 3];
     $13 = HEAPF64[$14 >> 3];
     $15 = HEAPF64[$14 + 32 >> 3];
     $22 = HEAP32[$56 + 4 >> 2];
     $18 = HEAPF64[$14 + 72 >> 3];
     $36 = HEAPF64[$6 + 80 >> 3];
     $37 = HEAPF64[$6 + 64 >> 3];
     $38 = HEAPF64[$6 + 72 >> 3];
     $19 = HEAPF64[$14 + 8 >> 3];
     $39 = HEAPF64[$6 + 16 >> 3];
     $40 = HEAPF64[$6 >> 3];
     $25 = HEAPF64[$6 + 8 >> 3];
     $28 = HEAPF64[$14 + 40 >> 3];
     $26 = HEAPF64[$6 + 48 >> 3];
     $27 = HEAPF64[$6 + 32 >> 3];
     $29 = HEAPF64[$6 + 40 >> 3];
     $6 = $3 + 32 | 0;
     $16 = HEAPF64[$6 + 24 >> 3];
     $21 = HEAPF64[$6 + 16 >> 3];
     $12 = HEAPF64[$6 >> 3];
     $11 = HEAPF64[$6 + 8 >> 3];
     HEAP32[$5 + 56 >> 2] = 0;
     HEAP32[$5 + 60 >> 2] = 0;
     $17 = 2.0 / ($16 * $16 + ($21 * $21 + ($12 * $12 + $11 * $11)));
     $23 = $12 * $17;
     $34 = $12 * $23;
     $24 = $11 * $17;
     $51 = $11 * $24;
     $30 = 1.0 - ($34 + $51);
     $17 = $21 * $17;
     $52 = $12 * $17;
     $53 = $16 * $24;
     $35 = $52 + $53;
     $54 = $11 * $17;
     $55 = $16 * $23;
     $11 = $54 - $55;
     $23 = $36 * $30 + ($37 * $35 + $38 * $11);
     $42 = $30 * $39 + ($35 * $40 + $25 * $11);
     $11 = $30 * $26 + ($35 * $27 + $29 * $11);
     $30 = -HEAPF64[$22 + 88 >> 3];
     $14 = $22 + 96 | 0;
     $35 = HEAPF64[$14 >> 3];
     $43 = ($10 * $23 + ($13 * $42 + $15 * $11)) * $30 - ($18 * $23 + ($19 * $42 + $28 * $11)) * $35;
     $23 = $8 * $23 + ($9 * $42 + $7 * $11);
     $59 = $22 + 104 | 0;
     $11 = HEAPF64[$59 >> 3];
     HEAPF64[$5 + 48 >> 3] = $43 - $23 * $11;
     $23 = $54 + $55;
     $24 = $12 * $24;
     $42 = $16 * $17;
     $12 = $24 - $42;
     $43 = $34;
     $34 = $21 * $17;
     $16 = 1.0 - ($43 + $34);
     $21 = $36 * $23 + ($37 * $12 + $38 * $16);
     $17 = $23 * $39 + ($12 * $40 + $25 * $16);
     $12 = $23 * $26 + ($12 * $27 + $29 * $16);
     HEAPF64[$5 + 40 >> 3] = ($10 * $21 + ($13 * $17 + $15 * $12)) * $30 - $35 * ($18 * $21 + ($19 * $17 + $28 * $12)) - $11 * ($8 * $21 + ($9 * $17 + $7 * $12));
     $12 = $52 - $53;
     $16 = 1.0 - ($51 + $34);
     $21 = $24 + $42;
     $17 = $36 * $12 + ($37 * $16 + $38 * $21);
     $24 = $12 * $39 + ($16 * $40 + $25 * $21);
     $12 = $12 * $26 + ($16 * $27 + $29 * $21);
     HEAPF64[$5 + 32 >> 3] = ($10 * $17 + ($13 * $24 + $15 * $12)) * $30 - $35 * ($18 * $17 + ($19 * $24 + $28 * $12)) - $11 * ($8 * $17 + ($9 * $24 + $7 * $12));
     FUNCTION_TABLE[HEAP32[HEAP32[$58 >> 2] + 64 >> 2]]($5 - -64 | 0, $58, $5 + 32 | 0);
     $6 = HEAP32[$56 + 12 >> 2];
     $35 = HEAPF64[$6 + 96 >> 3];
     $23 = HEAPF64[$6 + 64 >> 3];
     $42 = HEAPF64[$6 + 32 >> 3];
     $34 = HEAPF64[$6 + 16 >> 3];
     $51 = HEAPF64[$6 + 8 >> 3];
     $52 = HEAPF64[$6 >> 3];
     $53 = HEAPF64[$6 + 112 >> 3];
     $54 = HEAPF64[$6 + 104 >> 3];
     $55 = HEAPF64[$6 + 80 >> 3];
     $43 = HEAPF64[$6 + 72 >> 3];
     $57 = HEAPF64[$6 + 48 >> 3];
     $60 = HEAPF64[$6 + 40 >> 3];
     $61 = HEAPF64[$22 + 120 >> 3];
     $21 = HEAPF64[$59 >> 3];
     $17 = HEAPF64[$22 + 88 >> 3];
     $24 = HEAPF64[$14 >> 3];
     $12 = HEAPF64[$5 + 80 >> 3];
     $16 = HEAPF64[$5 + 64 >> 3];
     $11 = HEAPF64[$5 + 72 >> 3];
     $62 = HEAPF64[HEAP32[$0 + 12 >> 2] + 1464 >> 3];
     HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
     $30 = -$50;
     $50 = $45 * $8 + ($47 * $9 + $46 * $7) + ($9 * $30 - $7 * $49 - $8 * $48) + ($12 * ($36 * $8 + ($39 * $9 + $26 * $7)) + ($16 * ($37 * $8 + ($40 * $9 + $27 * $7)) + $11 * ($38 * $8 + ($25 * $9 + $29 * $7))));
     $13 = $45 * $10 + ($47 * $13 + $46 * $15) + ($13 * $30 - $15 * $49 - $10 * $48) + ($12 * ($36 * $10 + ($39 * $13 + $26 * $15)) + ($16 * ($37 * $10 + ($40 * $13 + $27 * $15)) + $11 * ($38 * $10 + ($25 * $13 + $29 * $15))));
     $15 = $45 * $18 + ($47 * $19 + $46 * $28) + ($19 * $30 - $28 * $49 - $18 * $48) + ($12 * ($36 * $18 + ($39 * $19 + $26 * $28)) + ($16 * ($37 * $18 + ($40 * $19 + $27 * $28)) + $11 * ($38 * $18 + ($25 * $19 + $29 * $28))));
     $8 = $21 * $50 + ($17 * $13 + $24 * $15) - $61;
     if ($62 > $8) {
      HEAP32[$5 + 56 >> 2] = 0;
      HEAP32[$5 + 60 >> 2] = 0;
      $6 = HEAP32[$56 + 12 >> 2];
      $9 = HEAPF64[$22 + 104 >> 3];
      $7 = HEAPF64[$22 + 88 >> 3];
      $10 = HEAPF64[$22 + 96 >> 3];
      HEAPF64[$5 + 32 >> 3] = HEAPF64[$6 + 16 >> 3] * $9 + (HEAPF64[$6 >> 3] * $7 + HEAPF64[$6 + 8 >> 3] * $10);
      HEAPF64[$5 + 48 >> 3] = $9 * HEAPF64[$6 + 80 >> 3] + ($7 * HEAPF64[$6 + 64 >> 3] + $10 * HEAPF64[$6 + 72 >> 3]);
      HEAPF64[$5 + 40 >> 3] = $9 * HEAPF64[$6 + 48 >> 3] + ($7 * HEAPF64[$6 + 32 >> 3] + $10 * HEAPF64[$6 + 40 >> 3]);
      HEAP32[$5 + 24 >> 2] = 0;
      HEAP32[$5 + 28 >> 2] = 0;
      $9 = $50 - $21 * $8;
      $7 = $13 - $17 * $8;
      $10 = $15 - $24 * $8;
      HEAPF64[$5 + 16 >> 3] = $9 * $55 + ($7 * $23 + $10 * $43) + $53;
      HEAPF64[$5 + 8 >> 3] = $9 * $57 + ($7 * $42 + $10 * $60) + $54;
      HEAPF64[$5 >> 3] = $9 * $34 + ($7 * $52 + $51 * $10) + $35;
      FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 32 | 0, $5, $8);
     }
     __stack_pointer = $5 + 96 | 0;
     $44 = $44 + 1 | 0;
     $5 = HEAP32[$0 + 20 >> 2];
     if (($44 | 0) < ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if (!HEAPU8[$0 + 8 | 0] | !HEAP32[HEAP32[$0 + 12 >> 2] + 1456 >> 2]) {
    break label$1
   }
   $0 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$0 + 1456 >> 2]) {
    break label$1
   }
   $2 = HEAP32[$0 + 1448 >> 2];
   $5 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   $1 = ($2 | 0) == ($5 | 0);
   $6 = $0;
   $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($6, ($1 ? $2 : $0) + 8 | 0, ($1 ? $0 : $5) + 8 | 0);
  }
  __stack_pointer = $3 + 96 | 0;
 }
 
 function btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 17712;
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29(HEAP32[HEAP32[$0 + 16 >> 2] + 16 >> 2]);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 16 >> 2]);
  }
  if (HEAPU8[$0 + 12 | 0]) {
   btAlignedFreeInternal_28void__29(HEAP32[HEAP32[$0 + 8 >> 2] + 16 >> 2]);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 8 >> 2]);
  }
  $1 = HEAP32[$0 + 28 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 28 >> 2]);
  $1 = HEAP32[$0 + 32 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 32 >> 2]);
  $1 = HEAP32[$0 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 36 >> 2]);
  $1 = HEAP32[$0 + 40 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 40 >> 2]);
  $1 = HEAP32[$0 + 44 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 44 >> 2]);
  $1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 48 >> 2]);
  $1 = HEAP32[$0 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 52 >> 2]);
  $1 = HEAP32[$0 + 56 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
  $1 = HEAP32[$0 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 72 >> 2]);
  $1 = HEAP32[$0 + 76 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 76 >> 2]);
  $1 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 68 >> 2]);
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 84 >> 2]);
  $1 = HEAP32[$0 + 80 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 80 >> 2]);
  $1 = HEAP32[$0 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 24 >> 2]);
  return $0 | 0;
 }
 
 function btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29($0));
 }
 
 function btDefaultCollisionConfiguration__getClosestPointsAlgorithmCreateFunc_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = ($1 | 0) != 8;
  if (!($3 | ($2 | 0) != 8)) {
   return HEAP32[$0 + 56 >> 2]
  }
  if (!(($2 | 0) != 1 | $3)) {
   return HEAP32[$0 + 72 >> 2]
  }
  if (!(($1 | 0) != 1 | ($2 | 0) != 8)) {
   return HEAP32[$0 + 76 >> 2]
  }
  if (!(($2 | 0) != 28 | ($1 | 0) > 19)) {
   return HEAP32[$0 + 84 >> 2]
  }
  if (!(($1 | 0) != 28 | ($2 | 0) > 19)) {
   return HEAP32[$0 + 80 >> 2]
  }
  label$6 : {
   if (($1 | 0) <= 19) {
    if (($2 | 0) <= 19) {
     return HEAP32[$0 + 28 >> 2]
    }
    if ($2 - 21 >>> 0 > 8) {
     break label$6
    }
    return HEAP32[$0 + 32 >> 2];
   }
   if (!(($2 | 0) > 19 | $1 - 21 >>> 0 > 8)) {
    return HEAP32[$0 + 36 >> 2]
   }
   if (($1 | 0) != 31) {
    break label$6
   }
   if (($2 | 0) == 31) {
    return HEAP32[$0 + 44 >> 2]
   }
   return HEAP32[$0 + 40 >> 2];
  }
  if (($2 | 0) == 31) {
   return HEAP32[$0 + 48 >> 2]
  }
  return HEAP32[$0 + 52 >> 2];
 }
 
 function btDefaultCollisionConfiguration__getCollisionAlgorithmCreateFunc_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = ($1 | 0) != 8;
  if (!($3 | ($2 | 0) != 8)) {
   return HEAP32[$0 + 56 >> 2]
  }
  if (!(($2 | 0) != 1 | $3)) {
   return HEAP32[$0 + 72 >> 2]
  }
  if (!(($1 | 0) != 1 | ($2 | 0) != 8)) {
   return HEAP32[$0 + 76 >> 2]
  }
  if (!($1 | $2)) {
   return HEAP32[$0 + 68 >> 2]
  }
  if (!(($2 | 0) != 28 | ($1 | 0) > 19)) {
   return HEAP32[$0 + 84 >> 2]
  }
  if (!(($1 | 0) != 28 | ($2 | 0) > 19)) {
   return HEAP32[$0 + 80 >> 2]
  }
  label$7 : {
   if (($1 | 0) <= 19) {
    if (($2 | 0) <= 19) {
     return HEAP32[$0 + 28 >> 2]
    }
    if ($2 - 21 >>> 0 > 8) {
     break label$7
    }
    return HEAP32[$0 + 32 >> 2];
   }
   if (!(($2 | 0) > 19 | $1 - 21 >>> 0 > 8)) {
    return HEAP32[$0 + 36 >> 2]
   }
   if (($1 | 0) != 31) {
    break label$7
   }
   if (($2 | 0) == 31) {
    return HEAP32[$0 + 44 >> 2]
   }
   return HEAP32[$0 + 40 >> 2];
  }
  if (($2 | 0) == 31) {
   return HEAP32[$0 + 48 >> 2]
  }
  return HEAP32[$0 + 52 >> 2];
 }
 
 function btDefaultCollisionConfiguration__getPersistentManifoldPool_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function btDefaultCollisionConfiguration__getCollisionAlgorithmPool_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 16 >> 2];
 }
 
 function btConvexConcaveCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 128) | 0;
  btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
  return $0 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 128) | 0;
  btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 1);
  return $0 | 0;
 }
 
 function btCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
  btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
  return $0 | 0;
 }
 
 function btCompoundCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $0 = HEAP32[$1 >> 2];
  $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 116) | 0;
  btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($5, $1, $2, $3, 0);
  HEAP8[$5 + 104 | 0] = 1;
  HEAP32[$5 >> 2] = 16932;
  HEAP32[$5 + 100 >> 2] = 0;
  $0 = $5 + 92 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(64);
  HEAP32[$0 >> 2] = 16868;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $4 = $0 + 28 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  $4 = $0 + 48 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
  $8 = HEAP32[$1 >> 2];
  label$1 : {
   if (($8 | 0) <= 0) {
    break label$1
   }
   if (($8 | 0) != 1) {
    $11 = $8 & -2;
    $1 = 0;
    while (1) {
     $6 = HEAP32[$0 + 16 >> 2] + $1 | 0;
     $10 = HEAP32[$6 + 4 >> 2];
     $4 = $1 + $9 | 0;
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $10;
     HEAP32[$4 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $6 = HEAP32[$0 + 16 >> 2] + $1 | 0;
     HEAP32[$4 + 20 >> 2] = HEAP32[$6 + 20 >> 2];
     $6 = $6 + 12 | 0;
     $10 = HEAP32[$6 + 4 >> 2];
     $4 = $4 + 12 | 0;
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $10;
     $1 = $1 + 24 | 0;
     $7 = $7 + 2 | 0;
     if (($11 | 0) != ($7 | 0)) {
      continue
     }
     break;
    };
   }
   if (!($8 & 1)) {
    break label$1
   }
   $4 = Math_imul($7, 12);
   $1 = $4 + HEAP32[$0 + 16 >> 2] | 0;
   $7 = HEAP32[$1 + 4 >> 2];
   $4 = $4 + $9 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = $9;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = 2;
  btHashedSimplePairCache__growTables_28_29($0);
  HEAP32[$5 + 84 >> 2] = $0;
  HEAP32[$5 + 108 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 108 >> 2];
  HEAP32[$5 + 112 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 108 >> 2];
  return $5 | 0;
 }
 
 function btCompoundCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
  btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 1);
  return $0 | 0;
 }
 
 function btEmptyAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 8) | 0;
  btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
  HEAP32[$0 >> 2] = 17096;
  return $0 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 17156;
  $1 = HEAP32[$0 + 4 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$3 + 8 >> 2]) | 0;
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = $1;
  return $0 | 0;
 }
 
 function btSphereTriangleCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = HEAP32[$1 >> 2];
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4, 20) | 0;
  $5 = HEAP32[$1 + 4 >> 2];
  $0 = HEAPU8[$0 + 4 | 0];
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($4, $1);
  HEAP8[$4 + 16 | 0] = $0;
  HEAP32[$4 + 12 >> 2] = $5;
  HEAP8[$4 + 8 | 0] = 0;
  HEAP32[$4 >> 2] = 17292;
  if (!$5) {
   $0 = HEAP32[$4 + 4 >> 2];
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 + 8 >> 2], HEAP32[$3 + 8 >> 2]) | 0;
   HEAP8[$4 + 8 | 0] = 1;
   HEAP32[$4 + 12 >> 2] = $0;
  }
  return $4 | 0;
 }
 
 function btBoxBoxCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 17564;
  $1 = HEAP32[$0 + 4 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$3 + 8 >> 2]) | 0) {
   $1 = HEAP32[$0 + 4 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$3 + 8 >> 2]) | 0;
   HEAP8[$0 + 8 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $1;
  }
  return $0 | 0;
 }
 
 function btConvexPlaneCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[$1 >> 2];
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4, 28) | 0;
  $5 = HEAPU8[$0 + 4 | 0];
  $6 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($4, $1);
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP8[$4 + 16 | 0] = $5;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP8[$4 + 8 | 0] = 0;
  HEAP32[$4 >> 2] = 17636;
  $0 = HEAP32[$4 + 4 >> 2];
  $1 = $5 ? $3 : $2;
  $2 = $5 ? $2 : $3;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0) {
   $0 = HEAP32[$4 + 4 >> 2];
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
   HEAP8[$4 + 8 | 0] = 1;
   HEAP32[$4 + 12 >> 2] = $0;
  }
  return $4 | 0;
 }
 
 function btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  HEAP32[$0 >> 2] = 18648;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $2 = $0 + 32 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  $2 = $0 + 52 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32);
  $3 = HEAP32[$1 >> 2];
  if (($3 | 0) > 0) {
   $1 = 12;
   while (1) {
    $4 = $1 + $2 | 0;
    $5 = HEAP32[$0 + 16 >> 2] + $1 | 0;
    HEAP32[$4 - 12 >> 2] = HEAP32[$5 - 12 >> 2];
    $6 = $5 - 8 | 0;
    $8 = HEAP32[$6 + 4 >> 2];
    $7 = $4 - 8 | 0;
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$7 + 4 >> 2] = $8;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    $1 = $1 + 16 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = 2;
  btHashedOverlappingPairCache__growTables_28_29($0);
 }
 
 function btHashedOverlappingPairCache__growTables_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  label$1 : {
   $9 = HEAP32[$0 + 32 >> 2];
   $4 = HEAP32[$0 + 12 >> 2];
   if (($9 | 0) >= ($4 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 36 >> 2] >= ($4 | 0)) {
     $2 = HEAP32[$0 + 40 >> 2];
     break label$2;
    }
    label$4 : {
     if (!$4) {
      $1 = $9;
      break label$4;
     }
     $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $1 = HEAP32[$0 + 32 >> 2];
    }
    $5 = HEAP32[$0 + 40 >> 2];
    label$6 : {
     if (($1 | 0) > 0) {
      $6 = $1 & 3;
      if ($1 - 1 >>> 0 >= 3) {
       $10 = $1 & -4;
       $1 = 0;
       while (1) {
        $7 = $1 + $2 | 0;
        $8 = $1 + $5 | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        HEAP32[$7 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
        $1 = $1 + 16 | 0;
        $3 = $3 + 4 | 0;
        if (($10 | 0) != ($3 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$6) {
       break label$6
      }
      $3 = $3 << 2;
      $1 = $3 + $2 | 0;
      $3 = $3 + $5 | 0;
      while (1) {
       HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
       $1 = $1 + 4 | 0;
       $3 = $3 + 4 | 0;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue
       }
       break;
      };
      break label$6;
     }
     if ($5) {
      break label$6
     }
     HEAP32[$0 + 40 >> 2] = $2;
     HEAP32[$0 + 36 >> 2] = $4;
     HEAP8[$0 + 44 | 0] = 1;
     break label$2;
    }
    if (HEAPU8[$0 + 44 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 40 >> 2] = $2;
    HEAP8[$0 + 44 | 0] = 1;
    HEAP32[$0 + 36 >> 2] = $4;
   }
   memset(($9 << 2) + $2 | 0, 0, $4 - $9 << 2);
   HEAP32[$0 + 32 >> 2] = $4;
   $8 = $4 << 2;
   $5 = HEAP32[$0 + 52 >> 2];
   if (($5 | 0) < ($4 | 0)) {
    label$13 : {
     if (HEAP32[$0 + 56 >> 2] >= ($4 | 0)) {
      $2 = HEAP32[$0 + 60 >> 2];
      break label$13;
     }
     label$15 : {
      if (!$4) {
       $2 = 0;
       $1 = $5;
       break label$15;
      }
      $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8);
      $1 = HEAP32[$0 + 52 >> 2];
     }
     $7 = HEAP32[$0 + 60 >> 2];
     label$17 : {
      if (($1 | 0) > 0) {
       $6 = $1 & 3;
       $3 = 0;
       if ($1 - 1 >>> 0 >= 3) {
        $12 = $1 & -4;
        $1 = 0;
        while (1) {
         $10 = $1 + $2 | 0;
         $11 = $1 + $7 | 0;
         HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
         HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
         HEAP32[$10 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
         $1 = $1 + 16 | 0;
         $3 = $3 + 4 | 0;
         if (($12 | 0) != ($3 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$6) {
        break label$17
       }
       $3 = $3 << 2;
       $1 = $3 + $2 | 0;
       $3 = $3 + $7 | 0;
       while (1) {
        HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
        $1 = $1 + 4 | 0;
        $3 = $3 + 4 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
       break label$17;
      }
      if ($7) {
       break label$17
      }
      HEAP32[$0 + 60 >> 2] = $2;
      HEAP32[$0 + 56 >> 2] = $4;
      HEAP8[$0 - -64 | 0] = 1;
      break label$13;
     }
     if (HEAPU8[$0 - -64 | 0]) {
      btAlignedFreeInternal_28void__29($7)
     }
     HEAP32[$0 + 60 >> 2] = $2;
     HEAP8[$0 + 64 | 0] = 1;
     HEAP32[$0 + 56 >> 2] = $4;
    }
    memset(($5 << 2) + $2 | 0, 0, $4 - $5 << 2);
   }
   HEAP32[$0 + 52 >> 2] = $4;
   if (($4 | 0) > 0) {
    memset(HEAP32[$0 + 40 >> 2], 255, $8);
    memset(HEAP32[$0 + 60 >> 2], 255, $8);
   }
   if (($9 | 0) <= 0) {
    break label$1
   }
   $3 = HEAP32[$0 + 60 >> 2];
   $1 = HEAP32[$0 + 16 >> 2];
   $4 = HEAP32[$0 + 40 >> 2];
   $5 = 0;
   while (1) {
    $2 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2] | HEAP32[HEAP32[$1 + 4 >> 2] + 12 >> 2] << 16;
    $2 = ($2 << 15 ^ -1) + $2 | 0;
    $2 = Math_imul($2 >>> 10 ^ $2, 9);
    $2 = $2 >>> 6 ^ $2;
    $2 = ($2 << 11 ^ -1) + $2 | 0;
    $2 = $4 + ((HEAP32[$0 + 12 >> 2] - 1 & ($2 >>> 16 ^ $2)) << 2) | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $5;
    $1 = $1 + 16 | 0;
    $3 = $3 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 18648;
  $1 = HEAP32[$0 + 60 >> 2];
  if (!(!$1 | !HEAPU8[$0 - -64 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 64 | 0] = 1;
  $1 = $0 + 52 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 44 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 18648;
  $1 = HEAP32[$0 + 60 >> 2];
  if (!(!$1 | !HEAPU8[$0 - -64 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 64 | 0] = 1;
  $1 = $0 + 52 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 44 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btHashedOverlappingPairCache__cleanOverlappingPair_28btBroadphasePair__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 60 >> 2]]($2, HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 8 >> 2] = 0;
  }
 }
 
 function btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = 18804;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3, $2);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = 18948;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3 + 8 | 0, $2);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function btHashedOverlappingPairCache__findPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[8417] = HEAP32[8417] + 1;
  $3 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
  $4 = HEAP32[($3 ? $1 : $2) + 12 >> 2];
  $3 = HEAP32[($3 ? $2 : $1) + 12 >> 2];
  $1 = $3 | $4 << 16;
  $1 = ($1 << 15 ^ -1) + $1 | 0;
  $1 = Math_imul($1 >>> 10 ^ $1, 9);
  $1 = $1 >>> 6 ^ $1;
  $1 = ($1 << 11 ^ -1) + $1 | 0;
  $1 = HEAP32[$0 + 12 >> 2] - 1 & ($1 >>> 16 ^ $1);
  label$1 : {
   label$2 : {
    if (($1 | 0) >= HEAP32[$0 + 32 >> 2]) {
     break label$2
    }
    $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($1 << 2) >> 2];
    if (($1 | 0) == -1) {
     break label$2
    }
    $6 = HEAP32[$0 + 60 >> 2];
    $0 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $5 = $1 << 4;
     $2 = $5 + $0 | 0;
     if (($3 | 0) == HEAP32[HEAP32[$2 >> 2] + 12 >> 2] & HEAP32[HEAP32[($0 + $5 | 0) + 4 >> 2] + 12 >> 2] == ($4 | 0)) {
      break label$1
     }
     $1 = HEAP32[($1 << 2) + $6 >> 2];
     if (($1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function btHashedOverlappingPairCache__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  HEAP32[8415] = HEAP32[8415] + 1;
  $4 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
  $7 = $4 ? $1 : $2;
  $5 = HEAP32[$7 + 12 >> 2];
  $8 = $4 ? $2 : $1;
  $6 = HEAP32[$8 + 12 >> 2];
  $1 = $5 << 16 | $6;
  $1 = ($1 << 15 ^ -1) + $1 | 0;
  $1 = Math_imul($1 >>> 10 ^ $1, 9);
  $1 = $1 >>> 6 ^ $1;
  $1 = ($1 << 11 ^ -1) + $1 | 0;
  $9 = HEAP32[$0 + 12 >> 2] - 1 & ($1 >>> 16 ^ $1);
  $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($9 << 2) >> 2];
  label$1 : {
   if (($1 | 0) == -1) {
    break label$1
   }
   $10 = HEAP32[$0 + 60 >> 2];
   $4 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $2 = $4 + ($1 << 4) | 0;
    if (!(HEAP32[HEAP32[$2 >> 2] + 12 >> 2] == ($6 | 0) & ($5 | 0) == HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2])) {
     $1 = HEAP32[$10 + ($1 << 2) >> 2];
     if (($1 | 0) != -1) {
      continue
     }
     break label$1;
    }
    break;
   };
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $2, $3);
   $11 = HEAP32[($4 + ($1 << 4) | 0) + 12 >> 2];
   label$5 : {
    label$6 : {
     $5 = HEAP32[$0 + 40 >> 2] + ($9 << 2) | 0;
     $1 = HEAP32[$5 >> 2];
     $4 = $2 - HEAP32[$0 + 16 >> 2] >> 4;
     if (($1 | 0) == ($4 | 0)) {
      break label$6
     }
     $6 = HEAP32[$0 + 60 >> 2];
     while (1) {
      $2 = $1;
      $1 = HEAP32[$6 + ($1 << 2) >> 2];
      if (($4 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
     if (($2 | 0) == -1) {
      break label$6
     }
     $1 = HEAP32[$0 + 60 >> 2];
     HEAP32[$1 + ($2 << 2) >> 2] = HEAP32[$1 + ($4 << 2) >> 2];
     break label$5;
    }
    HEAP32[$5 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + ($4 << 2) >> 2];
   }
   $5 = HEAP32[$0 + 8 >> 2] - 1 | 0;
   $1 = HEAP32[$0 + 68 >> 2];
   if ($1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $8, $7, $3) | 0
   }
   if (($4 | 0) != ($5 | 0)) {
    label$10 : {
     label$11 : {
      $7 = HEAP32[$0 + 16 >> 2];
      $3 = $7 + ($5 << 4) | 0;
      $1 = HEAP32[HEAP32[$3 + 4 >> 2] + 12 >> 2] << 16 | HEAP32[HEAP32[$3 >> 2] + 12 >> 2];
      $1 = ($1 << 15 ^ -1) + $1 | 0;
      $1 = Math_imul($1 >>> 10 ^ $1, 9);
      $1 = $1 >>> 6 ^ $1;
      $1 = ($1 << 11 ^ -1) + $1 | 0;
      $8 = HEAP32[$0 + 12 >> 2] - 1 & ($1 >>> 16 ^ $1);
      $6 = HEAP32[$0 + 40 >> 2] + ($8 << 2) | 0;
      $1 = HEAP32[$6 >> 2];
      if (($5 | 0) == ($1 | 0)) {
       break label$11
      }
      $9 = HEAP32[$0 + 60 >> 2];
      while (1) {
       $2 = $1;
       $1 = HEAP32[$9 + ($1 << 2) >> 2];
       if (($5 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
      if (($2 | 0) == -1) {
       break label$11
      }
      $1 = HEAP32[$0 + 60 >> 2];
      HEAP32[$1 + ($2 << 2) >> 2] = HEAP32[$1 + ($5 << 2) >> 2];
      break label$10;
     }
     HEAP32[$6 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + ($5 << 2) >> 2];
    }
    $2 = HEAP32[$3 + 4 >> 2];
    $1 = $7 + ($4 << 4) | 0;
    HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$1 + 4 >> 2] = $2;
    $2 = $3 + 8 | 0;
    $3 = HEAP32[$2 + 4 >> 2];
    $1 = $1 + 8 | 0;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 4 >> 2] = $3;
    $1 = HEAP32[$0 + 40 >> 2] + ($8 << 2) | 0;
    HEAP32[HEAP32[$0 + 60 >> 2] + ($4 << 2) >> 2] = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $4;
   }
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] - 1;
  }
  return $11 | 0;
 }
 
 function btHashedOverlappingPairCache__processAllOverlappingPairs_28btOverlapCallback__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 2963);
  if (HEAP32[$0 + 8 >> 2] > 0) {
   while (1) {
    $5 = HEAP32[$0 + 16 >> 2] + ($4 << 4) | 0;
    label$3 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5) | 0) {
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$5 >> 2], HEAP32[$5 + 4 >> 2], $2) | 0;
      HEAP32[8414] = HEAP32[8414] - 1;
      break label$3;
     }
     $4 = $4 + 1 | 0;
    }
    if (HEAP32[$0 + 8 >> 2] > ($4 | 0)) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $3 + 16 | 0;
 }
 
 function btHashedOverlappingPairCache__sortOverlappingPairs_28btDispatcher__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP8[$4 + 24 | 0] = 1;
  label$1 : {
   if (($2 | 0) <= 0) {
    break label$1
   }
   $2 = 0;
   while (1) {
    $12 = HEAP32[$0 + 16 >> 2];
    label$3 : {
     if (($2 | 0) != ($3 | 0)) {
      break label$3
     }
     $5 = $2 ? $2 << 1 : 1;
     if (($2 | 0) >= ($5 | 0)) {
      $3 = $2;
      break label$3;
     }
     if ($5) {
      $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 4)
     } else {
      $3 = 0
     }
     $6 = $3;
     if (($2 | 0) > 0) {
      $3 = 12;
      while (1) {
       $8 = $3 + $6 | 0;
       $9 = HEAP32[$4 + 20 >> 2] + $3 | 0;
       HEAP32[$8 - 12 >> 2] = HEAP32[$9 - 12 >> 2];
       $10 = $9 - 8 | 0;
       $13 = HEAP32[$10 + 4 >> 2];
       $11 = $8 - 8 | 0;
       HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$11 + 4 >> 2] = $13;
       HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
       $3 = $3 + 16 | 0;
       $2 = $2 - 1 | 0;
       if ($2) {
        continue
       }
       break;
      };
     }
     $3 = HEAP32[$4 + 20 >> 2];
     if (!(!$3 | !HEAPU8[$4 + 24 | 0])) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$4 + 20 >> 2] = $6;
     HEAP8[$4 + 24 | 0] = 1;
     HEAP32[$4 + 16 >> 2] = $5;
     $3 = HEAP32[$4 + 12 >> 2];
    }
    $3 = HEAP32[$4 + 20 >> 2] + ($3 << 4) | 0;
    $2 = ($7 << 4) + $12 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    $5 = HEAP32[$2 + 8 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = $5;
    HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
    $2 = HEAP32[$4 + 12 >> 2];
    $3 = $2 + 1 | 0;
    HEAP32[$4 + 12 >> 2] = $3;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < HEAP32[$0 + 8 >> 2]) {
     $2 = HEAP32[$4 + 16 >> 2];
     continue;
    }
    break;
   };
   $5 = 0;
   if (($2 | 0) < 0) {
    break label$1
   }
   $6 = $2 + 1 | 0;
   $8 = $6 & 1;
   $7 = HEAP32[$4 + 20 >> 2];
   if ($2) {
    $6 = $6 & -2;
    $2 = $7;
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], $1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], $1) | 0;
     $2 = $2 + 32 | 0;
     $5 = $5 + 2 | 0;
     if (($6 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$8) {
    break label$1
   }
   $2 = $7 + ($5 << 4) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], $1) | 0;
  }
  if (HEAP32[$0 + 52 >> 2] > 0) {
   $3 = HEAP32[$0 + 60 >> 2];
   $2 = 0;
   while (1) {
    HEAP32[$3 >> 2] = -1;
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) < HEAP32[$0 + 52 >> 2]) {
     continue
    }
    break;
   };
   $3 = HEAP32[$4 + 12 >> 2];
  }
  if (($3 | 0) >= 2) {
   void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($4 + 8 | 0, $4, 0, $3 - 1 | 0);
   $3 = HEAP32[$4 + 12 >> 2];
  }
  if (($3 | 0) > 0) {
   $2 = 0;
   $3 = 4;
   while (1) {
    $1 = HEAP32[$4 + 20 >> 2] + $3 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 - 4 >> 2], HEAP32[$1 >> 2]) | 0;
    $3 = $3 + 16 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) < HEAP32[$4 + 12 >> 2]) {
     continue
    }
    break;
   };
  }
  $0 = HEAP32[$4 + 20 >> 2];
  if (!(!$0 | !HEAPU8[$4 + 24 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function btHashedOverlappingPairCache__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  HEAP32[8416] = HEAP32[8416] + 1;
  $3 = HEAP32[$0 + 24 >> 2];
  label$1 : {
   label$2 : {
    if ($3) {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $2) | 0) {
      break label$2
     }
     break label$1;
    }
    if (!(HEAP32[$2 + 8 >> 2] & HEAP32[$1 + 4 >> 2]) | !(HEAP32[$1 + 8 >> 2] & HEAP32[$2 + 4 >> 2])) {
     break label$1
    }
   }
   $3 = $0;
   $0 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
   $8 = $0 ? $1 : $2;
   $5 = HEAP32[$8 + 12 >> 2];
   $9 = $0 ? $2 : $1;
   $6 = HEAP32[$9 + 12 >> 2];
   $0 = $5 << 16 | $6;
   $0 = ($0 << 15 ^ -1) + $0 | 0;
   $0 = Math_imul($0 >>> 10 ^ $0, 9);
   $0 = $0 >>> 6 ^ $0;
   $0 = ($0 << 11 ^ -1) + $0 | 0;
   $12 = $0 >>> 16 ^ $0;
   $1 = HEAP32[$3 + 12 >> 2];
   $11 = $12 & $1 - 1;
   $0 = HEAP32[HEAP32[$3 + 40 >> 2] + ($11 << 2) >> 2];
   label$10 : {
    if (($0 | 0) != -1) {
     $10 = HEAP32[$3 + 60 >> 2];
     $4 = HEAP32[$3 + 16 >> 2];
     while (1) {
      $7 = $0 << 4;
      $2 = $7 + $4 | 0;
      if (HEAP32[HEAP32[$2 >> 2] + 12 >> 2] == ($6 | 0) & ($5 | 0) == HEAP32[HEAP32[($4 + $7 | 0) + 4 >> 2] + 12 >> 2]) {
       break label$10
      }
      $0 = HEAP32[$10 + ($0 << 2) >> 2];
      if (($0 | 0) != -1) {
       continue
      }
      break;
     };
    }
    $0 = $1;
    $5 = HEAP32[$3 + 8 >> 2];
    $2 = $5;
    label$5 : {
     if (($0 | 0) != ($2 | 0)) {
      break label$5
     }
     $2 = $1;
     $4 = $0 ? $0 << 1 : 1;
     if (($4 | 0) <= ($0 | 0)) {
      break label$5
     }
     label$6 : {
      if (!$4) {
       $6 = 0;
       $2 = $1;
       break label$6;
      }
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 4);
      $2 = HEAP32[$3 + 8 >> 2];
     }
     if (($2 | 0) > 0) {
      $0 = 12;
      while (1) {
       $10 = $0 + $6 | 0;
       $7 = HEAP32[$3 + 16 >> 2] + $0 | 0;
       HEAP32[$10 - 12 >> 2] = HEAP32[$7 - 12 >> 2];
       $13 = $7 - 8 | 0;
       $15 = HEAP32[$13 + 4 >> 2];
       $14 = $10 - 8 | 0;
       HEAP32[$14 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$14 + 4 >> 2] = $15;
       HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
       $0 = $0 + 16 | 0;
       $2 = $2 - 1 | 0;
       if ($2) {
        continue
       }
       break;
      };
     }
     $0 = HEAP32[$3 + 16 >> 2];
     if (!(!$0 | !HEAPU8[$3 + 20 | 0])) {
      btAlignedFreeInternal_28void__29($0)
     }
     HEAP32[$3 + 16 >> 2] = $6;
     HEAP8[$3 + 20 | 0] = 1;
     HEAP32[$3 + 12 >> 2] = $4;
     $2 = HEAP32[$3 + 8 >> 2];
     $0 = $4;
    }
    HEAP32[$3 + 8 >> 2] = $2 + 1;
    $4 = HEAP32[$3 + 16 >> 2];
    $2 = HEAP32[$3 + 68 >> 2];
    if ($2) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $9, $8) | 0;
     $0 = HEAP32[$3 + 12 >> 2];
    }
    $2 = $4 + ($5 << 4) | 0;
    if (($0 | 0) > ($1 | 0)) {
     btHashedOverlappingPairCache__growTables_28_29($3);
     $11 = HEAP32[$3 + 12 >> 2] - 1 & $12;
    }
    $1 = HEAP32[$8 + 12 >> 2];
    $6 = HEAP32[$9 + 12 >> 2];
    $0 = $4 + ($5 << 4) | 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    $4 = $0;
    $0 = ($1 | 0) > ($6 | 0);
    HEAP32[$4 + 4 >> 2] = $0 ? $8 : $9;
    HEAP32[$2 >> 2] = $0 ? $9 : $8;
    $0 = HEAP32[$3 + 40 >> 2] + ($11 << 2) | 0;
    HEAP32[HEAP32[$3 + 60 >> 2] + ($5 << 2) >> 2] = HEAP32[$0 >> 2];
    HEAP32[$0 >> 2] = $5;
   }
   $4 = $2;
  }
  return $4 | 0;
 }
 
 function btHashedOverlappingPairCache__getOverlappingPairArray_28_29($0) {
  $0 = $0 | 0;
  return $0 + 4 | 0;
 }
 
 function btHashedOverlappingPairCache__getNumOverlappingPairs_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function btHashedOverlappingPairCache__setOverlapFilterCallback_28btOverlapFilterCallback__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 24 >> 2] = $1;
 }
 
 function btHashedOverlappingPairCache__setInternalGhostPairCallback_28btOverlappingPairCallback__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 68 >> 2] = $1;
 }
 
 function btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  if (!(($2 | 0) != HEAP32[$1 >> 2] & ($2 | 0) != HEAP32[$1 + 4 >> 2])) {
   $2 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 32 >> 2]]($2, $1, HEAP32[$0 + 12 >> 2]);
  }
  return 0;
 }
 
 function btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  return ($0 | 0) == HEAP32[$1 >> 2] | ($0 | 0) == HEAP32[$1 + 4 >> 2];
 }
 
 function btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  $4 = HEAP32[$1 + 4 >> 2];
  if (($4 | 0) <= 0) {
   HEAP32[$0 + 4 >> 2] = $4;
   return;
  }
  $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
  $2 = HEAP32[$0 + 4 >> 2];
  label$2 : {
   if (($2 | 0) <= 0) {
    break label$2
   }
   $3 = $2 & 3;
   if ($2 - 1 >>> 0 >= 3) {
    $8 = $2 & -4;
    $2 = 0;
    while (1) {
     $7 = $2 + $6 | 0;
     HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + $2 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[(HEAP32[$0 + 12 >> 2] + $2 | 0) + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[(HEAP32[$0 + 12 >> 2] + $2 | 0) + 8 >> 2];
     HEAP32[$7 + 12 >> 2] = HEAP32[(HEAP32[$0 + 12 >> 2] + $2 | 0) + 12 >> 2];
     $2 = $2 + 16 | 0;
     $5 = $5 + 4 | 0;
     if (($8 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$3) {
    break label$2
   }
   $2 = $5 << 2;
   while (1) {
    HEAP32[$2 + $6 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + $2 >> 2];
    $2 = $2 + 4 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if (!(!$2 | !HEAPU8[$0 + 16 | 0])) {
   btAlignedFreeInternal_28void__29($2)
  }
  HEAP32[$0 + 12 >> 2] = $6;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = $4;
  $5 = $4 & 3;
  $7 = $4 - 1 | 0;
  label$7 : {
   if ($7 >>> 0 < 3) {
    $3 = 0;
    break label$7;
   }
   $8 = $4 & -4;
   $2 = 8;
   $3 = 0;
   while (1) {
    HEAP32[($2 + $6 | 0) - 8 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 12 >> 2] + $2 | 0) - 4 >> 2] = 0;
    HEAP32[HEAP32[$0 + 12 >> 2] + $2 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 12 >> 2] + $2 | 0) + 4 >> 2] = 0;
    $2 = $2 + 16 | 0;
    $6 = HEAP32[$0 + 12 >> 2];
    $3 = $3 + 4 | 0;
    if (($8 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  if ($5) {
   $2 = $3 << 2;
   while (1) {
    HEAP32[$2 + $6 >> 2] = 0;
    $2 = $2 + 4 | 0;
    $6 = HEAP32[$0 + 12 >> 2];
    $5 = $5 - 1 | 0;
    if ($5) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 4 >> 2] = $4;
  label$12 : {
   if (($4 | 0) <= 0) {
    break label$12
   }
   $3 = $4 & 3;
   $5 = 0;
   if ($7 >>> 0 >= 3) {
    $4 = $4 & -4;
    $2 = 0;
    while (1) {
     $0 = $2 + $6 | 0;
     HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 4 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[(HEAP32[$1 + 12 >> 2] + $2 | 0) + 12 >> 2];
     $2 = $2 + 16 | 0;
     $5 = $5 + 4 | 0;
     if (($4 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$3) {
    break label$12
   }
   $2 = $5 << 2;
   while (1) {
    HEAP32[$2 + $6 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $2 >> 2];
    $2 = $2 + 4 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
 }
 
 function btDbvtBroadphase___btDbvtBroadphase_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 >> 2] = 19112;
  if (HEAPU8[$0 + 164 | 0]) {
   $1 = HEAP32[$0 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 96 >> 2]);
  }
  $3 = HEAP32[$0 + 172 >> 2];
  if (($3 | 0) > 0) {
   $1 = 8;
   while (1) {
    $2 = HEAP32[$0 + 180 >> 2] + $1 | 0;
    $4 = $2 + 8 | 0;
    $5 = $2 + 4 | 0;
    $6 = HEAP32[$5 >> 2];
    if (!(!$6 | !HEAPU8[$4 | 0])) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$5 >> 2] = 0;
    HEAP8[$4 | 0] = 1;
    $2 = $2 - 4 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $1 = $1 + 20 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 180 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 184 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP8[$0 + 184 | 0] = 1;
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP32[$0 + 176 >> 2] = 0;
  btDbvt___btDbvt_28_29($0 + 44 | 0);
  btDbvt___btDbvt_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function btDbvtBroadphase___btDbvtBroadphase_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btDbvtBroadphase___btDbvtBroadphase_28_29($0));
 }
 
 function btDbvtBroadphase__createProxy_28btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20void__2c_20int_2c_20int_2c_20btDispatcher__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(96);
  HEAP32[$3 + 8 >> 2] = $6;
  HEAP32[$3 + 4 >> 2] = $5;
  HEAP32[$3 >> 2] = $4;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 20 >> 2] = $4;
  $4 = $1 + 8 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $3 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $5 = $1 + 16 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $3 + 32 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $6 = $1 + 24 | 0;
  $10 = HEAP32[$6 + 4 >> 2];
  $8 = $3 + 40 | 0;
  HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$8 + 4 >> 2] = $10;
  $8 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 48 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 52 >> 2] = $8;
  $8 = $2 + 8 | 0;
  $11 = HEAP32[$8 + 4 >> 2];
  $10 = $3 + 56 | 0;
  HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$10 + 4 >> 2] = $11;
  $10 = $2 + 16 | 0;
  $9 = HEAP32[$10 + 4 >> 2];
  $11 = $3 - -64 | 0;
  HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$11 + 4 >> 2] = $9;
  $11 = $2 + 24 | 0;
  $13 = HEAP32[$11 + 4 >> 2];
  $9 = $3 + 72 | 0;
  HEAP32[$9 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$9 + 4 >> 2] = $13;
  HEAP32[$3 + 84 >> 2] = 0;
  HEAP32[$3 + 88 >> 2] = 0;
  $13 = HEAP32[$6 + 4 >> 2];
  $12 = $7 + 16 | 0;
  $9 = $12 + 24 | 0;
  HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$9 + 4 >> 2] = $13;
  $9 = HEAP32[$5 + 4 >> 2];
  $6 = $12 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $12 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $5 = HEAP32[$8 + 4 >> 2];
  $4 = $12 + 40 | 0;
  HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $4 = HEAP32[$11 >> 2];
  $5 = HEAP32[$11 + 4 >> 2];
  $6 = HEAP32[$10 >> 2];
  $8 = HEAP32[$10 + 4 >> 2];
  $10 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $11 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  HEAP32[$3 + 92 >> 2] = HEAP32[$0 + 112 >> 2];
  $9 = $7 - -64 | 0;
  HEAP32[$9 >> 2] = $6;
  HEAP32[$9 + 4 >> 2] = $8;
  $6 = $12 + 56 | 0;
  HEAP32[$6 >> 2] = $4;
  HEAP32[$6 + 4 >> 2] = $5;
  HEAP32[$7 + 16 >> 2] = $11;
  HEAP32[$7 + 20 >> 2] = $1;
  HEAP32[$7 + 48 >> 2] = $10;
  HEAP32[$7 + 52 >> 2] = $2;
  $1 = HEAP32[$0 + 160 >> 2] + 1 | 0;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$0 + 160 >> 2] = $1;
  $2 = $0 + 4 | 0;
  $1 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($2, $12, $3);
  HEAP32[$3 + 84 >> 2] = 0;
  HEAP32[$3 + 80 >> 2] = $1;
  $1 = ((HEAP32[$0 + 112 >> 2] << 2) + $0 | 0) + 84 | 0;
  HEAP32[$3 + 88 >> 2] = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 >> 2];
  if ($4) {
   HEAP32[$4 + 84 >> 2] = $3
  }
  HEAP32[$1 >> 2] = $3;
  if (!HEAPU8[$0 + 165 | 0]) {
   HEAP32[$7 + 8 >> 2] = $3;
   HEAP32[$7 >> 2] = 19240;
   HEAP32[$7 + 4 >> 2] = $0;
   $1 = $7 + 16 | 0;
   btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($2, HEAP32[$0 + 4 >> 2], $1, $7);
   $0 = $0 + 44 | 0;
   btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, HEAP32[$0 >> 2], $1, $7);
  }
  __stack_pointer = $7 + 80 | 0;
  return $3 | 0;
 }
 
 function btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0;
  $11 = __stack_pointer - 256 | 0;
  __stack_pointer = $11;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $14 = HEAPF64[$2 + 48 >> 3];
   $15 = HEAPF64[$2 + 40 >> 3];
   $16 = HEAPF64[$2 + 32 >> 3];
   $17 = HEAPF64[$2 + 16 >> 3];
   $18 = HEAPF64[$2 + 8 >> 3];
   $19 = HEAPF64[$2 >> 3];
   HEAP32[$11 >> 2] = $1;
   $1 = 64;
   $0 = $11;
   $2 = 1;
   while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       $6 = $2 - 1 | 0;
       $12 = $6 << 2;
       $7 = HEAP32[$12 + $0 >> 2];
       label$6 : {
        if (!(HEAPF64[$7 >> 3] <= $16) | !(HEAPF64[$7 + 32 >> 3] >= $19) | (!(HEAPF64[$7 + 8 >> 3] <= $15) | !(HEAPF64[$7 + 40 >> 3] >= $18))) {
         break label$6
        }
        if (!(HEAPF64[$7 + 16 >> 3] <= $14) | !(HEAPF64[$7 + 48 >> 3] >= $17)) {
         break label$6
        }
        if (HEAP32[$7 + 72 >> 2]) {
         if (($1 | 0) != ($6 | 0)) {
          break label$5
         }
         $4 = $1 ? $1 << 1 : 1;
         if (($4 | 0) < ($2 | 0)) {
          break label$5
         }
         if ($4) {
          $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2)
         } else {
          $6 = 0
         }
         label$10 : {
          if (!$1) {
           break label$10
          }
          $8 = $1 & 3;
          $9 = 0;
          if ($1 - 1 >>> 0 >= 3) {
           $20 = $1 & -4;
           $5 = 0;
           while (1) {
            $1 = $5 + $6 | 0;
            $10 = $0 + $5 | 0;
            HEAP32[$1 >> 2] = HEAP32[$10 >> 2];
            HEAP32[$1 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
            HEAP32[$1 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
            HEAP32[$1 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
            $5 = $5 + 16 | 0;
            $9 = $9 + 4 | 0;
            if (($20 | 0) != ($9 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$8) {
           break label$10
          }
          $1 = $9 << 2;
          $5 = $1 + $6 | 0;
          $1 = $0 + $1 | 0;
          while (1) {
           HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
           $5 = $5 + 4 | 0;
           $1 = $1 + 4 | 0;
           $8 = $8 - 1 | 0;
           if ($8) {
            continue
           }
           break;
          };
         }
         $1 = $13;
         $13 = 1;
         if (!$1) {
          break label$4
         }
         btAlignedFreeInternal_28void__29($0);
         break label$4;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $7);
       }
       $2 = $6;
       break label$3;
      }
      $4 = $1;
      $6 = $0;
     }
     HEAP32[$6 + $12 >> 2] = HEAP32[$7 + 68 >> 2];
     label$14 : {
      if (($2 | 0) != ($4 | 0)) {
       $1 = $4;
       $0 = $6;
       break label$14;
      }
      $1 = $2 << 1;
      if (($2 | 0) >= ($1 | 0)) {
       $1 = $2;
       $0 = $6;
       break label$14;
      }
      $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 3);
      label$17 : {
       if (($2 | 0) <= 0) {
        break label$17
       }
       $8 = $2 & 3;
       $9 = 0;
       if ($2 - 1 >>> 0 >= 3) {
        $12 = $2 & -4;
        $5 = 0;
        while (1) {
         $4 = $0 + $5 | 0;
         $10 = $5 + $6 | 0;
         HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
         HEAP32[$4 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
         HEAP32[$4 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
         HEAP32[$4 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
         $5 = $5 + 16 | 0;
         $9 = $9 + 4 | 0;
         if (($12 | 0) != ($9 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$8) {
        break label$17
       }
       $4 = $9 << 2;
       $5 = $4 + $0 | 0;
       $4 = $4 + $6 | 0;
       while (1) {
        HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
        $5 = $5 + 4 | 0;
        $4 = $4 + 4 | 0;
        $8 = $8 - 1 | 0;
        if ($8) {
         continue
        }
        break;
       };
      }
      $4 = $13;
      $13 = 1;
      if (!$4) {
       break label$14
      }
      btAlignedFreeInternal_28void__29($6);
     }
     HEAP32[($2 << 2) + $0 >> 2] = HEAP32[$7 + 72 >> 2];
     $2 = $2 + 1 | 0;
    }
    if (($2 | 0) > 0) {
     continue
    }
    break;
   };
   if (!$13) {
    break label$1
   }
   btAlignedFreeInternal_28void__29($0);
  }
  __stack_pointer = $11 + 256 | 0;
 }
 
 function btDbvtBroadphase__destroyProxy_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = $1 + 92 | 0;
  btDbvt__remove_28btDbvtNode__29((HEAP32[$3 >> 2] == 2 ? 44 : 4) + $0 | 0, HEAP32[$1 + 80 >> 2]);
  $4 = HEAP32[$1 + 84 >> 2];
  $4 = $4 ? $4 + 88 | 0 : ((HEAP32[$3 >> 2] << 2) + $0 | 0) + 84 | 0;
  $3 = $1 + 88 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 >> 2];
  if ($3) {
   HEAP32[$3 + 84 >> 2] = HEAP32[$1 + 84 >> 2]
  }
  $3 = HEAP32[$0 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1, $2);
  btAlignedFreeInternal_28void__29($1);
  HEAP8[$0 + 166 | 0] = 1;
 }
 
 function btDbvtBroadphase__getAabb_28btBroadphaseProxy__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $0 = HEAP32[$1 + 20 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
  $4 = $1 + 40 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $0 = $2 + 24 | 0;
  HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$0 + 4 >> 2] = $5;
  $4 = $1 + 32 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $0 = $2 + 16 | 0;
  HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$0 + 4 >> 2] = $5;
  $0 = $2 + 8 | 0;
  $2 = $1 + 24 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $2 = $1 + 72 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $0 = $3 + 24 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $2 = $1 - -64 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $0 = $3 + 16 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $2 = $1 + 56 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $0 = $3 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $0 = HEAP32[$1 + 52 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$3 + 4 >> 2] = $0;
 }
 
 function btDbvtBroadphase__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseRayCallback__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = 19312;
  HEAP32[$2 + 12 >> 2] = $3;
  $6 = $3 + 8 | 0;
  $7 = $3 + 40 | 0;
  $8 = HEAP32[$0 + 180 >> 2];
  $9 = $2 + 8 | 0;
  btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20double_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $1, $6, $7, HEAPF64[$3 + 56 >> 3], $4, $5, $8, $9);
  $0 = $0 + 44 | 0;
  btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20double_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, HEAP32[$0 >> 2], $1, $6, $7, HEAPF64[$3 + 56 >> 3], $4, $5, $8, $9);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20double_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
  $14 = __stack_pointer + -64 | 0;
  __stack_pointer = $14;
  if ($1) {
   $11 = HEAP32[$8 + 4 >> 2];
   label$2 : {
    if (($11 | 0) > 127) {
     break label$2
    }
    if (HEAP32[$8 + 8 >> 2] <= 127) {
     $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(512);
     $10 = HEAP32[$8 + 4 >> 2];
     label$4 : {
      if (($10 | 0) <= 0) {
       break label$4
      }
      $13 = $10 & 3;
      if ($10 - 1 >>> 0 >= 3) {
       $20 = $10 & -4;
       $10 = 0;
       while (1) {
        $15 = $0 + $10 | 0;
        HEAP32[$15 >> 2] = HEAP32[HEAP32[$8 + 12 >> 2] + $10 >> 2];
        HEAP32[$15 + 4 >> 2] = HEAP32[(HEAP32[$8 + 12 >> 2] + $10 | 0) + 4 >> 2];
        HEAP32[$15 + 8 >> 2] = HEAP32[(HEAP32[$8 + 12 >> 2] + $10 | 0) + 8 >> 2];
        HEAP32[$15 + 12 >> 2] = HEAP32[(HEAP32[$8 + 12 >> 2] + $10 | 0) + 12 >> 2];
        $10 = $10 + 16 | 0;
        $12 = $12 + 4 | 0;
        if (($20 | 0) != ($12 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$13) {
       break label$4
      }
      $10 = $12 << 2;
      while (1) {
       HEAP32[$0 + $10 >> 2] = HEAP32[HEAP32[$8 + 12 >> 2] + $10 >> 2];
       $10 = $10 + 4 | 0;
       $13 = $13 - 1 | 0;
       if ($13) {
        continue
       }
       break;
      };
     }
     $10 = HEAP32[$8 + 12 >> 2];
     if (!(!$10 | !HEAPU8[$8 + 16 | 0])) {
      btAlignedFreeInternal_28void__29($10)
     }
     HEAP32[$8 + 12 >> 2] = $0;
     HEAP8[$8 + 16 | 0] = 1;
     HEAP32[$8 + 8 >> 2] = 128;
    }
    $0 = $11;
    $13 = 0 - $11 & 3;
    if ($13) {
     $10 = $11 << 2;
     while (1) {
      HEAP32[HEAP32[$8 + 12 >> 2] + $10 >> 2] = 0;
      $10 = $10 + 4 | 0;
      $0 = $0 + 1 | 0;
      $13 = $13 - 1 | 0;
      if ($13) {
       continue
      }
      break;
     };
    }
    if ($11 - 125 >>> 0 < 3) {
     break label$2
    }
    $10 = $0 << 2;
    $0 = $0 - 128 | 0;
    while (1) {
     HEAP32[HEAP32[$8 + 12 >> 2] + $10 >> 2] = 0;
     HEAP32[(HEAP32[$8 + 12 >> 2] + $10 | 0) + 4 >> 2] = 0;
     HEAP32[(HEAP32[$8 + 12 >> 2] + $10 | 0) + 8 >> 2] = 0;
     HEAP32[(HEAP32[$8 + 12 >> 2] + $10 | 0) + 12 >> 2] = 0;
     $10 = $10 + 16 | 0;
     $0 = $0 + 4 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   HEAP32[$8 + 4 >> 2] = 128;
   HEAP32[HEAP32[$8 + 12 >> 2] >> 2] = $1;
   $15 = 126;
   $0 = 1;
   while (1) {
    HEAP32[$14 + 24 >> 2] = 0;
    HEAP32[$14 + 28 >> 2] = 0;
    $13 = HEAP32[$8 + 12 >> 2];
    $1 = $0 - 1 | 0;
    $24 = $1 << 2;
    $10 = HEAP32[$13 + $24 >> 2];
    HEAPF64[$14 + 16 >> 3] = HEAPF64[$10 + 16 >> 3] - HEAPF64[$7 + 16 >> 3];
    HEAPF64[$14 + 8 >> 3] = HEAPF64[$10 + 8 >> 3] - HEAPF64[$7 + 8 >> 3];
    HEAPF64[$14 >> 3] = HEAPF64[$10 >> 3] - HEAPF64[$7 >> 3];
    $17 = HEAPF64[$10 + 48 >> 3];
    $18 = HEAPF64[$10 + 40 >> 3];
    $16 = HEAPF64[$6 + 16 >> 3];
    $21 = HEAPF64[$6 + 8 >> 3];
    HEAPF64[$14 + 32 >> 3] = HEAPF64[$10 + 32 >> 3] - HEAPF64[$6 >> 3];
    HEAPF64[$14 + 40 >> 3] = $18 - $21;
    HEAPF64[$14 + 48 >> 3] = $17 - $16;
    $16 = HEAPF64[$3 + 8 >> 3];
    $11 = HEAP32[$4 + 4 >> 2];
    $21 = HEAPF64[$2 + 8 >> 3];
    $17 = $16 * (HEAPF64[((1 - $11 << 5) + $14 | 0) + 8 >> 3] - $21);
    $12 = HEAP32[$4 >> 2];
    $19 = HEAPF64[$2 >> 3];
    $22 = HEAPF64[$3 >> 3];
    $18 = (HEAPF64[($12 << 5) + $14 >> 3] - $19) * $22;
    label$13 : {
     label$14 : {
      if ($17 < $18) {
       break label$14
      }
      $16 = (HEAPF64[(($11 << 5) + $14 | 0) + 8 >> 3] - $21) * $16;
      $21 = $22 * (HEAPF64[(1 - $12 << 5) + $14 >> 3] - $19);
      if ($16 > $21) {
       break label$14
      }
      $18 = $16 > $18 ? $16 : $18;
      $19 = HEAPF64[$3 + 16 >> 3];
      $11 = HEAP32[$4 + 8 >> 2];
      $22 = HEAPF64[$2 + 16 >> 3];
      $16 = $19 * (HEAPF64[((1 - $11 << 5) + $14 | 0) + 16 >> 3] - $22);
      if ($18 > $16) {
       break label$14
      }
      $19 = (HEAPF64[(($11 << 5) + $14 | 0) + 16 >> 3] - $22) * $19;
      $17 = $17 < $21 ? $17 : $21;
      if ($19 > $17 | !(($18 < $19 ? $19 : $18) < $5) | !(($16 < $17 ? $16 : $17) > 0.0)) {
       break label$14
      }
      if (HEAP32[$10 + 72 >> 2]) {
       if (($1 | 0) > ($15 | 0)) {
        $12 = HEAP32[$8 + 4 >> 2];
        $20 = $12 << 1;
        label$17 : {
         if (($12 | 0) >= ($20 | 0)) {
          break label$17
         }
         if (($20 | 0) > HEAP32[$8 + 8 >> 2]) {
          label$19 : {
           if (!$12) {
            $13 = 0;
            break label$19;
           }
           $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 3);
           $11 = HEAP32[$8 + 4 >> 2];
           if (($11 | 0) <= 0) {
            break label$19
           }
           $15 = $11 & 3;
           $1 = 0;
           if ($11 - 1 >>> 0 >= 3) {
            $25 = $11 & -4;
            $11 = 0;
            while (1) {
             $23 = $11 + $13 | 0;
             HEAP32[$23 >> 2] = HEAP32[HEAP32[$8 + 12 >> 2] + $11 >> 2];
             HEAP32[$23 + 4 >> 2] = HEAP32[(HEAP32[$8 + 12 >> 2] + $11 | 0) + 4 >> 2];
             HEAP32[$23 + 8 >> 2] = HEAP32[(HEAP32[$8 + 12 >> 2] + $11 | 0) + 8 >> 2];
             HEAP32[$23 + 12 >> 2] = HEAP32[(HEAP32[$8 + 12 >> 2] + $11 | 0) + 12 >> 2];
             $11 = $11 + 16 | 0;
             $1 = $1 + 4 | 0;
             if (($25 | 0) != ($1 | 0)) {
              continue
             }
             break;
            };
           }
           if (!$15) {
            break label$19
           }
           $11 = $1 << 2;
           while (1) {
            HEAP32[$11 + $13 >> 2] = HEAP32[HEAP32[$8 + 12 >> 2] + $11 >> 2];
            $11 = $11 + 4 | 0;
            $15 = $15 - 1 | 0;
            if ($15) {
             continue
            }
            break;
           };
          }
          $1 = HEAP32[$8 + 12 >> 2];
          if (!(!$1 | !HEAPU8[$8 + 16 | 0])) {
           btAlignedFreeInternal_28void__29($1)
          }
          HEAP32[$8 + 12 >> 2] = $13;
          HEAP8[$8 + 16 | 0] = 1;
          HEAP32[$8 + 8 >> 2] = $20;
         }
         $15 = $12 - 1 | 0;
         $1 = $12 & 3;
         if ($1) {
          $11 = $12 << 2;
          while (1) {
           HEAP32[$11 + $13 >> 2] = 0;
           $11 = $11 + 4 | 0;
           $12 = $12 + 1 | 0;
           $13 = HEAP32[$8 + 12 >> 2];
           $1 = $1 - 1 | 0;
           if ($1) {
            continue
           }
           break;
          };
         }
         if ($15 >>> 0 < 3) {
          break label$17
         }
         $11 = $12 << 2;
         $12 = $12 - $20 | 0;
         while (1) {
          HEAP32[$11 + $13 >> 2] = 0;
          HEAP32[(HEAP32[$8 + 12 >> 2] + $11 | 0) + 4 >> 2] = 0;
          HEAP32[(HEAP32[$8 + 12 >> 2] + $11 | 0) + 8 >> 2] = 0;
          HEAP32[(HEAP32[$8 + 12 >> 2] + $11 | 0) + 12 >> 2] = 0;
          $11 = $11 + 16 | 0;
          $13 = HEAP32[$8 + 12 >> 2];
          $12 = $12 + 4 | 0;
          if ($12) {
           continue
          }
          break;
         };
        }
        HEAP32[$8 + 4 >> 2] = $20;
        $15 = $20 - 2 | 0;
       }
       HEAP32[$13 + $24 >> 2] = HEAP32[$10 + 68 >> 2];
       HEAP32[HEAP32[$8 + 12 >> 2] + ($0 << 2) >> 2] = HEAP32[$10 + 72 >> 2];
       $0 = $0 + 1 | 0;
       break label$13;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 12 >> 2]]($9, $10);
     }
     $0 = $1;
    }
    if ($0) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $14 - -64 | 0;
 }
 
 function btDbvtBroadphase__aabbTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseAabbCallback__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 80 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 76 >> 2] = $3;
  HEAP32[$5 + 72 >> 2] = 19384;
  $4 = $1 + 24 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $7 = $5 + 8 | 0;
  $3 = $7 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $1 + 16 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $7 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $1 + 8 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $7 + 8 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $2 + 8 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $5 + 48 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $2 + 16 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $5 + 56 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $2 + 24 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $5 - -64 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 12 >> 2] = $3;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 40 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 44 >> 2] = $1;
  $1 = $5 + 72 | 0;
  btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $7, $1);
  $0 = $0 + 44 | 0;
  btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, HEAP32[$0 >> 2], $7, $1);
  __stack_pointer = $5 + 80 | 0;
 }
 
 function btDbvtBroadphase__setAabb_28btBroadphaseProxy__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDispatcher__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  $8 = $2 + 24 | 0;
  $6 = HEAP32[$8 + 4 >> 2];
  $5 = $4 + 32 | 0;
  $7 = $5 + 24 | 0;
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $8 = $2 + 16 | 0;
  $6 = HEAP32[$8 + 4 >> 2];
  $7 = $5 + 16 | 0;
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $8 = $2 + 8 | 0;
  $6 = HEAP32[$8 + 4 >> 2];
  $5 = $5 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $5 = $3 + 8 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 72 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $3 + 16 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 80 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = $3 + 24 | 0;
  $8 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 88 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $8;
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 36 >> 2] = $5;
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 64 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 68 >> 2] = $5;
  label$1 : {
   if (HEAP32[$1 + 92 >> 2] == 2) {
    btDbvt__remove_28btDbvtNode__29($0 + 44 | 0, HEAP32[$1 + 80 >> 2]);
    (wasm2js_i32$0 = $1, wasm2js_i32$1 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($0 + 4 | 0, $4 + 32 | 0, $1)), HEAP32[wasm2js_i32$0 + 80 >> 2] = wasm2js_i32$1;
    $8 = 1;
    break label$1;
   }
   $8 = 1;
   HEAP32[$0 + 136 >> 2] = HEAP32[$0 + 136 >> 2] + 1;
   $5 = HEAP32[$1 + 80 >> 2];
   if (!(!(HEAPF64[$5 >> 3] <= HEAPF64[$4 + 64 >> 3]) | !(HEAPF64[$5 + 32 >> 3] >= HEAPF64[$4 + 32 >> 3]) | (!(HEAPF64[$5 + 8 >> 3] <= HEAPF64[$4 + 72 >> 3]) | !(HEAPF64[$5 + 40 >> 3] >= HEAPF64[$4 + 40 >> 3])) | (!(HEAPF64[$5 + 16 >> 3] <= HEAPF64[$4 + 80 >> 3]) | !(HEAPF64[$5 + 48 >> 3] >= HEAPF64[$4 + 48 >> 3])))) {
    $10 = HEAPF64[$1 + 24 >> 3];
    $14 = HEAPF64[$1 + 32 >> 3];
    $20 = HEAPF64[$2 >> 3];
    $21 = HEAPF64[$2 + 8 >> 3];
    $22 = HEAPF64[$2 + 16 >> 3];
    $16 = HEAPF64[$1 + 16 >> 3];
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    $13 = HEAPF64[$0 + 104 >> 3];
    $17 = $13 * ((HEAPF64[$1 - -64 >> 3] - $14) * .5);
    HEAPF64[$4 + 16 >> 3] = $17;
    $18 = $13 * ((HEAPF64[$1 + 56 >> 3] - $10) * .5);
    HEAPF64[$4 + 8 >> 3] = $18;
    $13 = $13 * ((HEAPF64[$1 + 48 >> 3] - $16) * .5);
    HEAPF64[$4 >> 3] = $13;
    if ($20 - $16 < 0.0) {
     HEAPF64[$4 >> 3] = -$13
    }
    if ($21 - $10 < 0.0) {
     HEAPF64[$4 + 8 >> 3] = -$18
    }
    if ($22 - $14 < 0.0) {
     HEAPF64[$4 + 16 >> 3] = -$17
    }
    $15 = $0 + 4 | 0;
    $7 = $4 + 32 | 0;
    $14 = HEAPF64[$7 >> 3];
    label$10 : {
     label$2 : {
      if (!($14 >= HEAPF64[$5 >> 3])) {
       $10 = HEAPF64[$7 + 8 >> 3];
       break label$2;
      }
      $10 = HEAPF64[$7 + 8 >> 3];
      if (!($10 >= HEAPF64[$5 + 8 >> 3]) | !(HEAPF64[$5 + 16 >> 3] <= HEAPF64[$7 + 16 >> 3]) | (!(HEAPF64[$5 + 32 >> 3] >= HEAPF64[$7 + 32 >> 3]) | !(HEAPF64[$5 + 40 >> 3] >= HEAPF64[$7 + 40 >> 3]))) {
       break label$2
      }
      $8 = 0;
      if (HEAPF64[$5 + 48 >> 3] >= HEAPF64[$7 + 48 >> 3]) {
       break label$10
      }
     }
     HEAPF64[$7 + 8 >> 3] = $10 - .05;
     HEAPF64[$7 >> 3] = $14 - .05;
     HEAPF64[$7 + 16 >> 3] = HEAPF64[$7 + 16 >> 3] - .05;
     HEAPF64[$7 + 32 >> 3] = HEAPF64[$7 + 32 >> 3] + .05;
     $11 = $7 + 40 | 0;
     HEAPF64[$11 >> 3] = HEAPF64[$11 >> 3] + .05;
     $9 = $7 + 48 | 0;
     HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] + .05;
     $10 = HEAPF64[$4 >> 3];
     $8 = (($10 > 0.0) << 5) + $7 | 0;
     HEAPF64[$8 >> 3] = $10 + HEAPF64[$8 >> 3];
     $10 = HEAPF64[$4 + 8 >> 3];
     $8 = ($10 > 0.0 ? 40 : 8) + $7 | 0;
     HEAPF64[$8 >> 3] = $10 + HEAPF64[$8 >> 3];
     $10 = HEAPF64[$4 + 16 >> 3];
     $8 = ($10 > 0.0 ? 48 : 16) + $7 | 0;
     HEAPF64[$8 >> 3] = $10 + HEAPF64[$8 >> 3];
     $8 = removeleaf_28btDbvt__2c_20btDbvtNode__29($15, $5);
     label$4 : {
      if (!$8) {
       $8 = 0;
       break label$4;
      }
      $12 = HEAP32[$15 + 8 >> 2];
      if (($12 | 0) >= 0) {
       if (!$12) {
        break label$4
       }
       while (1) {
        $6 = HEAP32[$8 + 64 >> 2];
        if (!$6) {
         break label$4
        }
        $8 = $6;
        $12 = $12 - 1 | 0;
        if ($12) {
         continue
        }
        break;
       };
       break label$4;
      }
      $8 = HEAP32[$15 >> 2];
     }
     $6 = HEAP32[$7 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $6 = $7 + 56 | 0;
     $12 = HEAP32[$6 + 4 >> 2];
     $19 = $5 + 56 | 0;
     HEAP32[$19 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$19 + 4 >> 2] = $12;
     $6 = HEAP32[$9 + 4 >> 2];
     $12 = $5 + 48 | 0;
     HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$12 + 4 >> 2] = $6;
     $6 = HEAP32[$11 + 4 >> 2];
     $9 = $5 + 40 | 0;
     HEAP32[$9 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$9 + 4 >> 2] = $6;
     $6 = $7 + 32 | 0;
     $11 = HEAP32[$6 + 4 >> 2];
     $9 = $5 + 32 | 0;
     HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$9 + 4 >> 2] = $11;
     $6 = $7 + 24 | 0;
     $11 = HEAP32[$6 + 4 >> 2];
     $9 = $5 + 24 | 0;
     HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$9 + 4 >> 2] = $11;
     $6 = $7 + 16 | 0;
     $11 = HEAP32[$6 + 4 >> 2];
     $9 = $5 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$9 + 4 >> 2] = $11;
     $6 = $7 + 8 | 0;
     $7 = HEAP32[$6 + 4 >> 2];
     $11 = $5 + 8 | 0;
     HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$11 + 4 >> 2] = $7;
     insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($15, $8, $5);
     $8 = 1;
    }
    if (!$8) {
     break label$1
    }
    HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
    break label$1;
   }
   btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29($0 + 4 | 0, $5, $4 + 32 | 0);
   HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
  }
  $5 = HEAP32[$1 + 84 >> 2];
  $6 = $5 ? $5 + 88 | 0 : ((HEAP32[$1 + 92 >> 2] << 2) + $0 | 0) + 84 | 0;
  $5 = $1 + 88 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 >> 2];
  if ($5) {
   HEAP32[$5 + 84 >> 2] = HEAP32[$1 + 84 >> 2]
  }
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 20 >> 2] = $5;
  $5 = $2 + 24 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $7 = $1 + 40 | 0;
  HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $5 = $2 + 16 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $7 = $1 + 32 | 0;
  HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $2 = $2 + 8 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $6 = $1 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $2 = $3 + 24 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $6 = $1 + 72 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $2 = $3 + 16 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $6 = $1 - -64 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $2 = $3 + 8 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $6 = $1 + 56 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $2 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 52 >> 2] = $2;
  HEAP32[$1 + 84 >> 2] = 0;
  $3 = HEAP32[$0 + 112 >> 2];
  $2 = (($3 << 2) + $0 | 0) + 84 | 0;
  HEAP32[$1 + 88 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 92 >> 2] = $3;
  $3 = HEAP32[$2 >> 2];
  if ($3) {
   HEAP32[$3 + 84 >> 2] = $1
  }
  HEAP32[$2 >> 2] = $1;
  label$9 : {
   if (!$8) {
    break label$9
   }
   HEAP8[$0 + 166 | 0] = 1;
   if (HEAPU8[$0 + 165 | 0]) {
    break label$9
   }
   HEAP32[$4 >> 2] = 19240;
   HEAP32[$4 + 4 >> 2] = $0;
   $2 = $0 + 44 | 0;
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($2, HEAP32[$2 >> 2], HEAP32[$1 + 80 >> 2], $4);
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($0 + 4 | 0, HEAP32[$0 + 4 >> 2], HEAP32[$1 + 80 >> 2], $4);
  }
  __stack_pointer = $4 + 96 | 0;
 }
 
 function btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if (!(!$1 | !$2)) {
   if (!(HEAP32[$0 + 24 >> 2] > 127 | HEAP32[$0 + 28 >> 2] > 127)) {
    $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(1024);
    $4 = HEAP32[$0 + 24 >> 2];
    label$3 : {
     if (($4 | 0) <= 0) {
      break label$3
     }
     $9 = $4 & 3;
     if ($4 - 1 >>> 0 >= 3) {
      $7 = $4 & -4;
      $4 = 0;
      while (1) {
       $8 = HEAP32[$0 + 32 >> 2] + $4 | 0;
       $10 = HEAP32[$8 + 4 >> 2];
       $6 = $4 + $12 | 0;
       HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$6 + 4 >> 2] = $10;
       $10 = (HEAP32[$0 + 32 >> 2] + $4 | 0) + 8 | 0;
       $11 = HEAP32[$10 + 4 >> 2];
       $8 = $6 + 8 | 0;
       HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$8 + 4 >> 2] = $11;
       $10 = (HEAP32[$0 + 32 >> 2] + $4 | 0) + 16 | 0;
       $11 = HEAP32[$10 + 4 >> 2];
       $8 = $6 + 16 | 0;
       HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$8 + 4 >> 2] = $11;
       $8 = (HEAP32[$0 + 32 >> 2] + $4 | 0) + 24 | 0;
       $10 = HEAP32[$8 + 4 >> 2];
       $6 = $6 + 24 | 0;
       HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$6 + 4 >> 2] = $10;
       $4 = $4 + 32 | 0;
       $5 = $5 + 4 | 0;
       if (($7 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$9) {
      break label$3
     }
     $4 = $5 << 3;
     while (1) {
      $6 = HEAP32[$0 + 32 >> 2] + $4 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $5 = $4 + $12 | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $7;
      $4 = $4 + 8 | 0;
      $9 = $9 - 1 | 0;
      if ($9) {
       continue
      }
      break;
     };
    }
    $5 = HEAP32[$0 + 32 >> 2];
    if (!(!$5 | !HEAPU8[$0 + 36 | 0])) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 32 >> 2] = $12;
    HEAP8[$0 + 36 | 0] = 1;
    HEAP32[$0 + 28 >> 2] = 128;
   }
   HEAP32[$0 + 24 >> 2] = 128;
   $5 = HEAP32[$0 + 32 >> 2];
   HEAP32[$5 + 4 >> 2] = $2;
   HEAP32[$5 >> 2] = $1;
   $1 = 124;
   $5 = 1;
   while (1) {
    $9 = HEAP32[$0 + 32 >> 2];
    $12 = $5;
    $5 = $5 - 1 | 0;
    $8 = $5 << 3;
    $2 = $9 + $8 | 0;
    $7 = HEAP32[$2 + 4 >> 2];
    $6 = HEAP32[$2 >> 2];
    if (($1 | 0) < ($5 | 0)) {
     $1 = HEAP32[$0 + 24 >> 2];
     $10 = $1 << 1;
     if (!(($10 | 0) <= ($1 | 0) | HEAP32[$0 + 28 >> 2] >= ($10 | 0))) {
      label$11 : {
       if (!$1) {
        $9 = 0;
        break label$11;
       }
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 4);
       $4 = HEAP32[$0 + 24 >> 2];
       if (($4 | 0) <= 0) {
        break label$11
       }
       $1 = $4 & 3;
       $2 = 0;
       if ($4 - 1 >>> 0 >= 3) {
        $15 = $4 & -4;
        $4 = 0;
        while (1) {
         $13 = HEAP32[$0 + 32 >> 2] + $4 | 0;
         $14 = HEAP32[$13 + 4 >> 2];
         $11 = $4 + $9 | 0;
         HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
         HEAP32[$11 + 4 >> 2] = $14;
         $14 = (HEAP32[$0 + 32 >> 2] + $4 | 0) + 8 | 0;
         $16 = HEAP32[$14 + 4 >> 2];
         $13 = $11 + 8 | 0;
         HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
         HEAP32[$13 + 4 >> 2] = $16;
         $14 = (HEAP32[$0 + 32 >> 2] + $4 | 0) + 16 | 0;
         $16 = HEAP32[$14 + 4 >> 2];
         $13 = $11 + 16 | 0;
         HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
         HEAP32[$13 + 4 >> 2] = $16;
         $13 = (HEAP32[$0 + 32 >> 2] + $4 | 0) + 24 | 0;
         $14 = HEAP32[$13 + 4 >> 2];
         $11 = $11 + 24 | 0;
         HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
         HEAP32[$11 + 4 >> 2] = $14;
         $4 = $4 + 32 | 0;
         $2 = $2 + 4 | 0;
         if (($15 | 0) != ($2 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$1) {
        break label$11
       }
       $4 = $2 << 3;
       while (1) {
        $11 = HEAP32[$0 + 32 >> 2] + $4 | 0;
        $15 = HEAP32[$11 + 4 >> 2];
        $2 = $4 + $9 | 0;
        HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$2 + 4 >> 2] = $15;
        $4 = $4 + 8 | 0;
        $1 = $1 - 1 | 0;
        if ($1) {
         continue
        }
        break;
       };
      }
      $1 = HEAP32[$0 + 32 >> 2];
      if (!(!$1 | !HEAPU8[$0 + 36 | 0])) {
       btAlignedFreeInternal_28void__29($1)
      }
      HEAP32[$0 + 32 >> 2] = $9;
      HEAP8[$0 + 36 | 0] = 1;
      HEAP32[$0 + 28 >> 2] = $10;
     }
     HEAP32[$0 + 24 >> 2] = $10;
     $1 = $10 - 4 | 0;
    }
    label$17 : {
     if (($6 | 0) == ($7 | 0)) {
      if (!HEAP32[$6 + 72 >> 2]) {
       break label$17
      }
      $2 = $9 + $8 | 0;
      $5 = HEAP32[$6 + 68 >> 2];
      HEAP32[$2 + 4 >> 2] = $5;
      HEAP32[$2 >> 2] = $5;
      $2 = $12 << 3;
      $5 = $2 + HEAP32[$0 + 32 >> 2] | 0;
      $4 = HEAP32[$6 + 72 >> 2];
      HEAP32[$5 + 4 >> 2] = $4;
      HEAP32[$5 >> 2] = $4;
      $5 = HEAP32[$6 + 72 >> 2];
      $2 = ($2 + HEAP32[$0 + 32 >> 2] | 0) + 8 | 0;
      HEAP32[$2 >> 2] = HEAP32[$6 + 68 >> 2];
      HEAP32[$2 + 4 >> 2] = $5;
      $5 = $12 + 2 | 0;
      break label$17;
     }
     if (!(HEAPF64[$6 >> 3] <= HEAPF64[$7 + 32 >> 3]) | !(HEAPF64[$6 + 32 >> 3] >= HEAPF64[$7 >> 3]) | (!(HEAPF64[$6 + 8 >> 3] <= HEAPF64[$7 + 40 >> 3]) | !(HEAPF64[$6 + 40 >> 3] >= HEAPF64[$7 + 8 >> 3]))) {
      break label$17
     }
     if (!(HEAPF64[$6 + 16 >> 3] <= HEAPF64[$7 + 48 >> 3]) | !(HEAPF64[$6 + 48 >> 3] >= HEAPF64[$7 + 16 >> 3])) {
      break label$17
     }
     $2 = HEAP32[$7 + 72 >> 2];
     if (HEAP32[$6 + 72 >> 2]) {
      $5 = HEAP32[$6 + 68 >> 2];
      if ($2) {
       $2 = $9 + $8 | 0;
       HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 68 >> 2];
       HEAP32[$2 >> 2] = $5;
       $5 = HEAP32[$6 + 72 >> 2];
       $2 = $12 << 3;
       $4 = $2 + HEAP32[$0 + 32 >> 2] | 0;
       HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 68 >> 2];
       HEAP32[$4 >> 2] = $5;
       $5 = HEAP32[$6 + 68 >> 2];
       $4 = $2 + HEAP32[$0 + 32 >> 2] | 0;
       HEAP32[$4 + 12 >> 2] = HEAP32[$7 + 72 >> 2];
       HEAP32[$4 + 8 >> 2] = $5;
       $5 = HEAP32[$6 + 72 >> 2];
       $2 = $2 + HEAP32[$0 + 32 >> 2] | 0;
       HEAP32[$2 + 20 >> 2] = HEAP32[$7 + 72 >> 2];
       HEAP32[$2 + 16 >> 2] = $5;
       $5 = $12 + 3 | 0;
       break label$17;
      }
      $2 = $9 + $8 | 0;
      HEAP32[$2 + 4 >> 2] = $7;
      HEAP32[$2 >> 2] = $5;
      $2 = HEAP32[$6 + 72 >> 2];
      $5 = HEAP32[$0 + 32 >> 2] + ($12 << 3) | 0;
      HEAP32[$5 + 4 >> 2] = $7;
      HEAP32[$5 >> 2] = $2;
      $5 = $12 + 1 | 0;
      break label$17;
     }
     if ($2) {
      $2 = $9 + $8 | 0;
      HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 68 >> 2];
      HEAP32[$2 >> 2] = $6;
      $2 = HEAP32[$0 + 32 >> 2] + ($12 << 3) | 0;
      HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 72 >> 2];
      HEAP32[$2 >> 2] = $6;
      $5 = $12 + 1 | 0;
      break label$17;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $6, $7);
    }
    if ($5) {
     continue
    }
    break;
   };
  }
 }
 
 function btDbvtBroadphase__calculateOverlappingPairs_28btDispatcher__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  $10 = $0 + 4 | 0;
  btDbvt__optimizeIncremental_28int_29($10, ((Math_imul(HEAP32[$0 + 120 >> 2], HEAP32[$0 + 16 >> 2]) | 0) / 100 | 0) + 1 | 0);
  if (HEAP32[$0 + 132 >> 2]) {
   $3 = ((Math_imul(HEAP32[$0 + 116 >> 2], HEAP32[$0 + 56 >> 2]) | 0) / 100 | 0) + 1 | 0;
   btDbvt__optimizeIncremental_28int_29($0 + 44 | 0, $3);
   $3 = HEAP32[$0 + 132 >> 2] - $3 | 0;
   HEAP32[$0 + 132 >> 2] = ($3 | 0) > 0 ? $3 : 0;
  }
  $3 = (HEAP32[$0 + 112 >> 2] + 1 | 0) % 2 | 0;
  HEAP32[$0 + 112 >> 2] = $3;
  $2 = HEAP32[(($3 << 2) + $0 | 0) + 84 >> 2];
  if ($2) {
   $13 = $0 + 44 | 0;
   $11 = $5 + 32 | 0;
   while (1) {
    $3 = HEAP32[$2 + 84 >> 2];
    $7 = $3 ? $3 + 88 | 0 : ((HEAP32[$2 + 92 >> 2] << 2) + $0 | 0) + 84 | 0;
    $4 = $2 + 88 | 0;
    $3 = HEAP32[$4 >> 2];
    HEAP32[$7 >> 2] = $3;
    $4 = HEAP32[$4 >> 2];
    if ($4) {
     HEAP32[$4 + 84 >> 2] = HEAP32[$2 + 84 >> 2]
    }
    HEAP32[$2 + 84 >> 2] = 0;
    HEAP32[$2 + 88 >> 2] = HEAP32[$0 + 92 >> 2];
    $4 = HEAP32[$0 + 92 >> 2];
    if ($4) {
     HEAP32[$4 + 84 >> 2] = $2
    }
    HEAP32[$0 + 92 >> 2] = $2;
    btDbvt__remove_28btDbvtNode__29($10, HEAP32[$2 + 80 >> 2]);
    $6 = $2 + 40 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $4 = $5 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    $6 = $2 + 32 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $4 = $5 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    $6 = $2 + 24 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $4 = $5 + 8 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    $12 = HEAP32[$2 + 16 >> 2];
    $9 = HEAP32[$2 + 20 >> 2];
    $4 = HEAP32[$2 + 52 >> 2];
    HEAP32[$11 >> 2] = HEAP32[$2 + 48 >> 2];
    HEAP32[$11 + 4 >> 2] = $4;
    $6 = $2 + 56 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $4 = $11 + 8 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    $6 = $2 - -64 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $4 = $11 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    $6 = $2 + 72 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $4 = $11 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    HEAP32[$5 >> 2] = $12;
    HEAP32[$5 + 4 >> 2] = $9;
    $4 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($13, $5, $2);
    HEAP32[$2 + 92 >> 2] = 2;
    HEAP32[$2 + 80 >> 2] = $4;
    $2 = $3;
    if ($2) {
     continue
    }
    break;
   };
   HEAP8[$0 + 166 | 0] = 1;
   HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 56 >> 2];
  }
  HEAP32[$5 >> 2] = 19240;
  HEAP32[$5 + 4 >> 2] = $0;
  label$6 : {
   if (!HEAPU8[$0 + 165 | 0]) {
    break label$6
   }
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($10, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 44 >> 2], $5);
   if (!HEAPU8[$0 + 165 | 0]) {
    break label$6
   }
   $3 = HEAP32[$10 >> 2];
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($10, $3, $3, $5);
  }
  label$7 : {
   if (!HEAPU8[$0 + 166 | 0]) {
    break label$7
   }
   $3 = HEAP32[$0 + 96 >> 2];
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3) | 0;
   $4 = HEAP32[$6 + 4 >> 2];
   if (($4 | 0) <= 0) {
    break label$7
   }
   label$8 : {
    $2 = HEAP32[$0 + 128 >> 2];
    $3 = (Math_imul(HEAP32[$0 + 124 >> 2], $4) | 0) / 100 | 0;
    $3 = ($2 | 0) > ($3 | 0) ? $2 : $3;
    $9 = ($3 | 0) > ($4 | 0) ? $4 : $3;
    if (($9 | 0) > 0) {
     $2 = 0;
     while (1) {
      $3 = HEAP32[$6 + 12 >> 2] + ((HEAP32[$0 + 156 >> 2] + $2 | 0) % ($4 | 0) << 4) | 0;
      $7 = HEAP32[$3 >> 2];
      $12 = HEAP32[$7 + 80 >> 2];
      $4 = HEAP32[$3 + 4 >> 2];
      $3 = HEAP32[$4 + 80 >> 2];
      if (!(!(!(HEAPF64[$12 >> 3] <= HEAPF64[$3 + 32 >> 3]) | !(HEAPF64[$12 + 32 >> 3] >= HEAPF64[$3 >> 3]) | (!(HEAPF64[$12 + 8 >> 3] <= HEAPF64[$3 + 40 >> 3]) | !(HEAPF64[$12 + 40 >> 3] >= HEAPF64[$3 + 8 >> 3])) | !(HEAPF64[$12 + 16 >> 3] <= HEAPF64[$3 + 48 >> 3])) & HEAPF64[$12 + 48 >> 3] >= HEAPF64[$3 + 16 >> 3])) {
       $3 = HEAP32[$0 + 96 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $7, $4, $1) | 0;
       $9 = $9 - 1 | 0;
       $2 = $2 - 1 | 0;
      }
      $4 = HEAP32[$6 + 4 >> 2];
      $2 = $2 + 1 | 0;
      if (($9 | 0) > ($2 | 0)) {
       continue
      }
      break;
     };
     if (($4 | 0) <= 0) {
      break label$8
     }
    }
    HEAP32[$0 + 156 >> 2] = (HEAP32[$0 + 156 >> 2] + $9 | 0) % ($4 | 0);
    break label$7;
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP8[$0 + 166 | 0] = 0;
  HEAP32[$0 + 128 >> 2] = 1;
  HEAP32[$0 + 152 >> 2] = HEAP32[$0 + 152 >> 2] + 1;
  $2 = HEAP32[$0 + 140 >> 2];
  $3 = HEAP32[$0 + 136 >> 2];
  if ($3) {
   $14 = +($2 >>> 0) / +($3 >>> 0)
  } else {
   $14 = 0.0
  }
  HEAPF64[$0 + 144 >> 3] = $14;
  HEAP32[$0 + 140 >> 2] = $2 >>> 1;
  HEAP32[$0 + 136 >> 2] = $3 >>> 1;
  __stack_pointer = $5 - -64 | 0;
  $7 = 0;
  $2 = 0;
  $10 = 0;
  $11 = 0;
  $13 = 0;
  $12 = __stack_pointer - 16 | 0;
  __stack_pointer = $12;
  $3 = $0;
  $0 = HEAP32[$0 + 96 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0) | 0) {
   $0 = HEAP32[$3 + 96 >> 2];
   $8 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
   $0 = HEAP32[$8 + 4 >> 2];
   if (($0 | 0) >= 2) {
    void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($8, $12 + 8 | 0, 0, $0 - 1 | 0);
    $0 = HEAP32[$8 + 4 >> 2];
   }
   if (($0 | 0) > 0) {
    while (1) {
     $6 = HEAP32[$8 + 12 >> 2] + $10 | 0;
     $4 = HEAP32[$6 + 4 >> 2];
     $5 = $7;
     $7 = HEAP32[$6 >> 2];
     label$5 : {
      label$60 : {
       if (($5 | 0) == ($7 | 0) & ($2 | 0) == ($4 | 0)) {
        break label$60
       }
       $9 = HEAP32[$7 + 80 >> 2];
       $2 = HEAP32[$4 + 80 >> 2];
       if (!(HEAPF64[$9 >> 3] <= HEAPF64[$2 + 32 >> 3]) | !(HEAPF64[$9 + 32 >> 3] >= HEAPF64[$2 >> 3]) | (!(HEAPF64[$9 + 8 >> 3] <= HEAPF64[$2 + 40 >> 3]) | !(HEAPF64[$9 + 40 >> 3] >= HEAPF64[$2 + 8 >> 3])) | !(HEAPF64[$9 + 16 >> 3] <= HEAPF64[$2 + 48 >> 3])) {
        break label$60
       }
       if (HEAPF64[$9 + 48 >> 3] >= HEAPF64[$2 + 16 >> 3]) {
        break label$5
       }
      }
      $0 = HEAP32[$3 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $6, $1);
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $11 = $11 + 1 | 0;
      $0 = HEAP32[$8 + 4 >> 2];
     }
     $10 = $10 + 16 | 0;
     $2 = $4;
     $13 = $13 + 1 | 0;
     if (($13 | 0) < ($0 | 0)) {
      continue
     }
     break;
    };
    if (($0 | 0) >= 2) {
     void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($8, $12, 0, $0 - 1 | 0);
     $0 = HEAP32[$8 + 4 >> 2];
    }
    $1 = $0 - $11 | 0;
    label$9 : {
     if (($11 | 0) >= 0) {
      break label$9
     }
     if (HEAP32[$8 + 8 >> 2] < ($1 | 0)) {
      label$111 : {
       if (!$1) {
        $13 = 0;
        $3 = $0;
        break label$111;
       }
       $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 4);
       $3 = HEAP32[$8 + 4 >> 2];
      }
      if (($3 | 0) > 0) {
       $5 = 12;
       while (1) {
        $9 = $5 + $13 | 0;
        $6 = HEAP32[$8 + 12 >> 2] + $5 | 0;
        HEAP32[$9 - 12 >> 2] = HEAP32[$6 - 12 >> 2];
        $7 = $6 - 8 | 0;
        $4 = HEAP32[$7 + 4 >> 2];
        $2 = $9 - 8 | 0;
        HEAP32[$2 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$2 + 4 >> 2] = $4;
        HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
        $5 = $5 + 16 | 0;
        $3 = $3 - 1 | 0;
        if ($3) {
         continue
        }
        break;
       };
      }
      $3 = HEAP32[$8 + 12 >> 2];
      if (!(!$3 | !HEAPU8[$8 + 16 | 0])) {
       btAlignedFreeInternal_28void__29($3)
      }
      HEAP32[$8 + 12 >> 2] = $13;
      HEAP8[$8 + 16 | 0] = 1;
      HEAP32[$8 + 8 >> 2] = $1;
     }
     $3 = $0;
     $10 = 0 - $11 & 3;
     if ($10) {
      $5 = $0 << 4;
      while (1) {
       $2 = HEAP32[$8 + 12 >> 2] + $5 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $2 = $2 + 8 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $5 = $5 + 16 | 0;
       $3 = $3 + 1 | 0;
       $10 = $10 - 1 | 0;
       if ($10) {
        continue
       }
       break;
      };
     }
     if ($11 >>> 0 > 4294967292) {
      break label$9
     }
     $5 = $3 << 4;
     $3 = ($3 - $0 | 0) + $11 | 0;
     while (1) {
      $0 = HEAP32[$8 + 12 >> 2] + $5 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $0 + 8 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $2 = HEAP32[$8 + 12 >> 2] + $5 | 0;
      $0 = $2 + 24 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $2 + 16 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $2 = HEAP32[$8 + 12 >> 2] + $5 | 0;
      $0 = $2 + 40 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $2 + 32 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $2 = HEAP32[$8 + 12 >> 2] + $5 | 0;
      $0 = $2 + 56 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $0 = $2 + 48 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $5 = $5 - -64 | 0;
      $3 = $3 + 4 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    $0 = $1;
   }
   HEAP32[$8 + 4 >> 2] = $0;
  }
  __stack_pointer = $12 + 16 | 0;
 }
 
 function void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  while (1) {
   $19 = $2;
   $11 = HEAP32[$0 + 12 >> 2];
   $6 = $11 + (($2 + $3 | 0) / 2 << 4) | 0;
   $20 = HEAP32[$6 + 8 >> 2];
   $12 = HEAP32[$6 + 4 >> 2];
   $10 = HEAP32[$6 >> 2];
   $6 = $3;
   while (1) {
    $4 = ($2 << 4) + $11 | 0;
    while (1) {
     $5 = -1;
     $7 = -1;
     $13 = HEAP32[$4 >> 2];
     if ($13) {
      $7 = HEAP32[$13 + 12 >> 2]
     }
     $5 = $10 ? HEAP32[$10 + 12 >> 2] : $5;
     $8 = -1;
     $9 = -1;
     $14 = HEAP32[$4 + 4 >> 2];
     if ($14) {
      $9 = HEAP32[$14 + 12 >> 2]
     }
     $8 = $12 ? HEAP32[$12 + 12 >> 2] : $8;
     label$8 : {
      label$9 : {
       if (($7 | 0) > ($5 | 0)) {
        break label$9
       }
       $5 = ($10 | 0) == ($13 | 0) & ($8 | 0) < ($9 | 0);
       if (!($5 | ($10 | 0) != ($13 | 0))) {
        if (($12 | 0) != ($14 | 0) | HEAPU32[$4 + 8 >> 2] <= $20 >>> 0) {
         break label$8
        }
        break label$9;
       }
       if (!$5) {
        break label$8
       }
      }
      $4 = $4 + 16 | 0;
      $2 = $2 + 1 | 0;
      continue;
     }
     break;
    };
    $5 = $6 << 4 | 12;
    while (1) {
     $7 = -1;
     $8 = -1;
     $8 = $10 ? HEAP32[$10 + 12 >> 2] : $8;
     $16 = $5 + $11 | 0;
     $9 = $16 - 12 | 0;
     $15 = HEAP32[$9 >> 2];
     if ($15) {
      $7 = HEAP32[$15 + 12 >> 2]
     }
     $21 = -1;
     $17 = -1;
     $17 = $12 ? HEAP32[$12 + 12 >> 2] : $17;
     $18 = HEAP32[$16 - 8 >> 2];
     if ($18) {
      $21 = HEAP32[$18 + 12 >> 2]
     }
     label$16 : {
      label$17 : {
       if (($7 | 0) < ($8 | 0)) {
        break label$17
       }
       $7 = ($10 | 0) == ($15 | 0) & ($21 | 0) < ($17 | 0);
       if (!($7 | ($10 | 0) != ($15 | 0))) {
        if (($12 | 0) != ($18 | 0)) {
         break label$16
        }
        if (HEAPU32[$16 - 4 >> 2] < $20 >>> 0) {
         break label$17
        }
        break label$16;
       }
       if (!$7) {
        break label$16
       }
      }
      $5 = $5 - 16 | 0;
      $6 = $6 - 1 | 0;
      continue;
     }
     break;
    };
    if (($2 | 0) <= ($6 | 0)) {
     $7 = HEAP32[$9 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$4 + 4 >> 2] = $7;
     $4 = $4 + 8 | 0;
     $7 = HEAP32[$4 >> 2];
     $8 = HEAP32[$4 + 4 >> 2];
     $11 = $9 + 8 | 0;
     $9 = HEAP32[$11 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$4 + 4 >> 2] = $9;
     $4 = HEAP32[$0 + 12 >> 2] + $5 | 0;
     HEAP32[$4 - 8 >> 2] = $14;
     $5 = $4 - 4 | 0;
     HEAP32[$5 >> 2] = $7;
     HEAP32[$5 + 4 >> 2] = $8;
     HEAP32[$4 - 12 >> 2] = $13;
     $6 = $6 - 1 | 0;
     $2 = $2 + 1 | 0;
    }
    if (($2 | 0) <= ($6 | 0)) {
     $11 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($6 | 0) > ($19 | 0)) {
    void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $19, $6)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function btDbvtBroadphase__getOverlappingPairCache_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 96 >> 2];
 }
 
 function btDbvtBroadphase__getBroadphaseAabb_28btVector3__2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0;
  $4 = HEAP32[$0 + 44 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if ($0) {
    $10 = HEAPF64[$0 >> 3];
    if ($4) {
     $3 = HEAPF64[$0 + 48 >> 3];
     $5 = HEAPF64[$4 + 48 >> 3];
     $5 = $3 > $5 ? $3 : $5;
     $3 = HEAPF64[$0 + 40 >> 3];
     $6 = HEAPF64[$4 + 40 >> 3];
     $6 = $3 > $6 ? $3 : $6;
     $3 = HEAPF64[$0 + 16 >> 3];
     $7 = HEAPF64[$4 + 16 >> 3];
     $7 = $3 < $7 ? $3 : $7;
     $3 = HEAPF64[$0 + 8 >> 3];
     $8 = HEAPF64[$4 + 8 >> 3];
     $8 = $3 < $8 ? $3 : $8;
     $3 = HEAPF64[$0 + 32 >> 3];
     $9 = HEAPF64[$4 + 32 >> 3];
     $9 = $3 > $9 ? $3 : $9;
     $3 = HEAPF64[$4 >> 3];
     $10 = $3 > $10 ? $10 : $3;
     break label$1;
    }
    $11 = HEAPF64[$0 + 56 >> 3];
    $5 = HEAPF64[$0 + 48 >> 3];
    $6 = HEAPF64[$0 + 40 >> 3];
    $9 = HEAPF64[$0 + 32 >> 3];
    $3 = HEAPF64[$0 + 24 >> 3];
    $7 = HEAPF64[$0 + 16 >> 3];
    $8 = HEAPF64[$0 + 8 >> 3];
    break label$1;
   }
   if (!$4) {
    break label$1
   }
   $11 = HEAPF64[$4 + 56 >> 3];
   $5 = HEAPF64[$4 + 48 >> 3];
   $6 = HEAPF64[$4 + 40 >> 3];
   $9 = HEAPF64[$4 + 32 >> 3];
   $3 = HEAPF64[$4 + 24 >> 3];
   $7 = HEAPF64[$4 + 16 >> 3];
   $8 = HEAPF64[$4 + 8 >> 3];
   $10 = HEAPF64[$4 >> 3];
  }
  HEAPF64[$1 + 24 >> 3] = $3;
  HEAPF64[$1 + 16 >> 3] = $7;
  HEAPF64[$1 + 8 >> 3] = $8;
  HEAPF64[$1 >> 3] = $10;
  HEAPF64[$2 + 24 >> 3] = $11;
  HEAPF64[$2 + 16 >> 3] = $5;
  HEAPF64[$2 + 8 >> 3] = $6;
  HEAPF64[$2 >> 3] = $9;
 }
 
 function btDbvtBroadphase__resetPool_28btDispatcher__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (HEAP32[$0 + 16 >> 2] == (0 - HEAP32[$0 + 56 >> 2] | 0)) {
   btDbvt__clear_28_29($0 + 4 | 0);
   btDbvt__clear_28_29($0 + 44 | 0);
   HEAP8[$0 + 165 | 0] = 0;
   HEAP8[$0 + 166 | 0] = 1;
   HEAP32[$0 + 132 >> 2] = 0;
   HEAP32[$0 + 112 >> 2] = 0;
   HEAP32[$0 + 124 >> 2] = 10;
   HEAP32[$0 + 128 >> 2] = 1;
   HEAP32[$0 + 116 >> 2] = 1;
   HEAP32[$0 + 120 >> 2] = 0;
   $1 = $0 + 84 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 136 >> 2] = 0;
   HEAP32[$0 + 140 >> 2] = 0;
   $1 = $0 + 144 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $1 = $0 + 152 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$0 + 160 >> 2] = 0;
  }
 }
 
 function btDbvtTreeCollider__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  if (($1 | 0) != ($2 | 0)) {
   $3 = HEAP32[HEAP32[$0 + 4 >> 2] + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 68 >> 2], HEAP32[$2 + 68 >> 2]) | 0;
   $0 = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
  }
 }
 
 function btDbvtTreeCollider__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, HEAP32[HEAP32[$0 + 8 >> 2] + 80 >> 2]);
 }
 
 function BroadphaseRayTester__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 + 68 >> 2]) | 0;
 }
 
 function __math_xflow($0, $1) {
  return ($0 ? -$1 : $1) * $1;
 }
 
 function __math_oflow($0) {
  return __math_xflow($0, 3105036184601417870297958.0e207);
 }
 
 function __math_uflow($0) {
  return __math_xflow($0, 1.2882297539194267e-231);
 }
 
 function pow($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  wasm2js_scratch_store_f64(+$1);
  $5 = wasm2js_scratch_load_i32(1) | 0;
  $8 = wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  $16 = $5 >>> 20 | 0;
  $17 = $16 & 2047;
  $18 = $17 - 1086 | 0;
  $15 = $2 >>> 20 | 0;
  label$1 : {
   label$2 : {
    if ($18 >>> 0 > 4294967167 & $15 - 2047 >>> 0 >= 4294965250) {
     break label$2
    }
    $6 = $5 << 1 | $8 >>> 31;
    $9 = $6 - 1 | 0;
    $24 = $9 + 1 | 0;
    $10 = $9;
    $9 = $8 << 1;
    $19 = $9 - 1 | 0;
    $10 = ($19 | 0) != -1 ? $24 : $10;
    if (!(($10 | 0) == -2097153 & ($19 | 0) != -1 | $10 >>> 0 < 4292870143)) {
     $4 = 1.0;
     if (!($6 | $9) | !$3 & ($2 | 0) == 1072693248) {
      break label$1
     }
     $2 = $2 << 1 | $3 >>> 31;
     $3 = $3 << 1;
     if (!(!(($2 | 0) == -2097152 & ($3 | 0) != 0 | $2 >>> 0 > 4292870144) & (!$9 & ($6 | 0) == -2097152 | $6 >>> 0 < 4292870144))) {
      return $0 + $1
     }
     if (!$3 & ($2 | 0) == 2145386496) {
      break label$1
     }
     return (!($5 >>> 31 | 0) | 0) == ($2 >>> 0 < 2145386496 | 0) ? 0.0 : $1 * $1;
    }
    $6 = ($2 << 1 | $3 >>> 31) - 1 | 0;
    $10 = $6 + 1 | 0;
    $9 = $6;
    $6 = ($3 << 1) - 1 | 0;
    $9 = ($6 | 0) != -1 ? $10 : $9;
    if (!(($9 | 0) == -2097153 & ($6 | 0) != -1 | $9 >>> 0 < 4292870143)) {
     $4 = $0 * $0;
     if (($2 | 0) < 0) {
      $4 = (checkint($8, $5) | 0) == 1 ? -$4 : $4
     }
     if (($5 | 0) >= 0) {
      break label$1
     }
     return 1.0 / $4;
    }
    $6 = 0;
    if (($2 | 0) < 0) {
     $6 = checkint($8, $5);
     if (!$6) {
      $0 = $0 - $0;
      return $0 / $0;
     }
     $15 = $15 & 2047;
     $6 = (($6 | 0) == 1) << 18;
     $2 = $2 & 2147483647;
    }
    if ($18 >>> 0 <= 4294967167) {
     $4 = 1.0;
     if (!$3 & ($2 | 0) == 1072693248 | $17 >>> 0 < 958) {
      break label$1
     }
     if ((!$3 & ($2 | 0) == 1072693248 | $2 >>> 0 < 1072693248) != ($16 >>> 0 < 2048 | 0)) {
      return __math_oflow(0)
     }
     return __math_uflow(0);
    }
    if ($15) {
     break label$2
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $3 = wasm2js_scratch_load_i32(0) | 0;
    $2 = ($2 & 2147483647) - 54525952 | 0;
   }
   wasm2js_scratch_store_i32(0, $8 & -134217728);
   wasm2js_scratch_store_i32(1, $5 | 0);
   $13 = +wasm2js_scratch_load_f64();
   wasm2js_scratch_store_i32(0, 0);
   $5 = $2 - 1072076117 | 0;
   $8 = $2 - ($5 & -1048576) | 0;
   $2 = $8;
   wasm2js_scratch_store_i32(1, ($3 - -2147483648 >>> 0 < 2147483648 ? $2 + 1 | 0 : $2) | 0);
   $4 = +wasm2js_scratch_load_f64();
   $2 = ($5 >>> 13 & 127) << 5;
   $7 = HEAPF64[$2 + 19520 >> 3];
   $0 = $4 * $7 + -1.0;
   $14 = HEAPF64[2433];
   $11 = $0 * $14;
   $20 = $0 * $11;
   $21 = +($5 >> 20);
   $22 = $21 * HEAPF64[2431] + HEAPF64[$2 + 19536 >> 3];
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $8 | 0);
   $23 = $7 * (+wasm2js_scratch_load_f64() - $4);
   $0 = $0 + $23;
   $12 = $22 + $0;
   $4 = $20 + $12;
   $14 = $14 * $0;
   $7 = $0 * $14;
   $12 = $20 + ($12 - $4) + ($23 * ($11 + $14) + ($21 * HEAPF64[2432] + HEAPF64[$2 + 19544 >> 3] + ($0 + ($22 - $12)))) + $0 * $7 * ($7 * ($7 * ($0 * HEAPF64[2439] + HEAPF64[2438]) + ($0 * HEAPF64[2437] + HEAPF64[2436])) + ($0 * HEAPF64[2435] + HEAPF64[2434]));
   $0 = $4 + $12;
   wasm2js_scratch_store_f64(+$0);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_store_i32(0, wasm2js_scratch_load_i32(0) & -134217728);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $7 = +wasm2js_scratch_load_f64();
   $11 = $13 * $7;
   wasm2js_scratch_store_f64(+$11);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   label$13 : {
    $2 = $3 >>> 20 & 2047;
    if ($2 - 969 >>> 0 < 63) {
     break label$13
    }
    if ($2 >>> 0 <= 968) {
     return $6 ? -1.0 : 1.0
    }
    $5 = $2 >>> 0 < 1033;
    $2 = 0;
    if ($5) {
     break label$13
    }
    if (($3 | 0) < 0) {
     return __math_uflow($6)
    }
    return __math_oflow($6);
   }
   $1 = ($1 - $13) * $7 + ($12 + ($4 - $0) + ($0 - $7)) * $1;
   $0 = HEAPF64[2953];
   $4 = $11 * HEAPF64[2952] + $0;
   $0 = $4 - $0;
   $0 = $1 + ($0 * HEAPF64[2955] + ($0 * HEAPF64[2954] + $11));
   $1 = $0 * $0;
   $7 = $1 * $1 * ($0 * HEAPF64[2959] + HEAPF64[2958]);
   $1 = $1 * ($0 * HEAPF64[2957] + HEAPF64[2956]);
   wasm2js_scratch_store_f64(+$4);
   wasm2js_scratch_load_i32(1) | 0;
   $8 = wasm2js_scratch_load_i32(0) | 0;
   $3 = $8 << 4 & 2032;
   $0 = $7 + ($1 + (HEAPF64[$3 + 23728 >> 3] + $0));
   $5 = $3 + 23736 | 0;
   $3 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2] + ($6 + $8 << 13) | 0;
   if (!$2) {
    __inlined_func$specialcase : {
     if (!($8 & -2147483648)) {
      wasm2js_scratch_store_i32(0, $3 | 0);
      wasm2js_scratch_store_i32(1, $5 - 1058013184 | 0);
      $1 = +wasm2js_scratch_load_f64();
      $0 = ($1 * $0 + $1) * 5486124068793688683255936.0e279;
      break __inlined_func$specialcase;
     }
     wasm2js_scratch_store_i32(0, $3 | 0);
     $3 = $5 + 1071644672 | 0;
     wasm2js_scratch_store_i32(1, $3 | 0);
     $1 = +wasm2js_scratch_load_f64();
     $7 = $1 * $0;
     $0 = $7 + $1;
     if (Math_abs($0) < 1.0) {
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $3 & -2147483648);
      $4 = $0 < 0.0 ? -1.0 : 1.0;
      $13 = $0 + $4;
      $0 = $13 + ($7 + ($1 - $0) + ($0 + ($4 - $13))) - $4;
      $0 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0, wasm2js_i32$0 = $0 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
     }
     $0 = $0 * 2.2250738585072014e-308;
    }
    return $0;
   }
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $5 | 0);
   $1 = +wasm2js_scratch_load_f64();
   $4 = $1 * $0 + $1;
  }
  return $4;
 }
 
 function checkint($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = $1 >>> 20 & 2047;
  label$1 : {
   if ($2 >>> 0 < 1023) {
    break label$1
   }
   $5 = 2;
   if ($2 >>> 0 > 1075) {
    break label$1
   }
   $5 = 0;
   $2 = 1075 - $2 | 0;
   $3 = $2 & 31;
   if (($2 & 63) >>> 0 >= 32) {
    $2 = 1 << $3;
    $4 = 0;
   } else {
    $4 = 1 << $3;
    $2 = $4 - 1 & 1 >>> 32 - $3;
   }
   $3 = $2 - 1 | 0;
   $6 = $4 - 1 | 0;
   $3 = ($6 | 0) != -1 ? $3 + 1 | 0 : $3;
   if ($0 & $6 | $1 & $3) {
    break label$1
   }
   $5 = $0 & $4 | $1 & $2 ? 1 : 2;
  }
  return $5;
 }
 
 function acos($0) {
  var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  $5 = wasm2js_scratch_load_i32(0) | 0;
  $3 = $2 & 2147483647;
  if ($3 >>> 0 >= 1072693248) {
   if (!($5 | $3 - 1072693248)) {
    return ($2 | 0) >= 0 ? 0.0 : 3.141592653589793
   }
   return 0.0 / ($0 - $0);
  }
  label$3 : {
   if ($3 >>> 0 <= 1071644671) {
    $1 = 1.5707963267948966;
    if ($3 >>> 0 < 1012924417) {
     break label$3
    }
    $1 = $0 * $0;
    return 6.123233995736766e-17 - $0 * ($1 * ($1 * ($1 * ($1 * ($1 * ($1 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($1 * ($1 * ($1 * ($1 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0)) - $0 + 1.5707963267948966;
   }
   if (($2 | 0) < 0) {
    $0 = ($0 + 1.0) * .5;
    $1 = Math_sqrt($0);
    $0 = 1.5707963267948966 - ($1 + ($1 * ($0 * ($0 * ($0 * ($0 * ($0 * ($0 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0 * ($0 * ($0 * ($0 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0)) + -6.123233995736766e-17));
    return $0 + $0;
   }
   $0 = (1.0 - $0) * .5;
   $4 = Math_sqrt($0);
   wasm2js_scratch_store_f64(+$4);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   wasm2js_scratch_store_i32(0, 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $1 = +wasm2js_scratch_load_f64();
   $0 = $0 * ($0 * ($0 * ($0 * ($0 * ($0 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0 * ($0 * ($0 * ($0 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0) * $4 + ($0 - $1 * $1) / ($4 + $1) + $1;
   $1 = $0 + $0;
  }
  return $1;
 }
 
 function btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0;
  HEAP32[$0 + 672 >> 2] = 0;
  HEAP32[$0 + 676 >> 2] = 0;
  HEAP32[$0 + 472 >> 2] = 2;
  HEAP32[$0 + 1104 >> 2] = 0;
  HEAP32[$0 + 1108 >> 2] = 1072693248;
  HEAP32[$0 + 744 >> 2] = 0;
  HEAP32[$0 + 748 >> 2] = 1072693248;
  $2 = $0 + 680 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 688 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 696 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 704 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 712 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 720 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 728 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 1128 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 1120 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $2 = $0 + 1112 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $2 = $0 + 760 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $2 = $0 + 752 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  memset($0 + 768 | 0, 0, 72);
  $2 = $0 + 928 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 920 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 912 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 904 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 896 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 888 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 880 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 872 >> 2] = 0;
  HEAP32[$0 + 876 >> 2] = 0;
  HEAP32[$0 + 1232 >> 2] = 0;
  HEAP32[$0 + 1236 >> 2] = 0;
  HEAPF64[$0 + 992 >> 3] = HEAPF64[$1 + 232 >> 3];
  HEAPF64[$0 + 1e3 >> 3] = HEAPF64[$1 + 240 >> 3];
  $3 = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 1008 >> 2] = $3;
  $6 = HEAPF64[$1 + 192 >> 3];
  HEAPF64[$0 + 944 >> 3] = $6 < 0.0 ? 0.0 : Math_min($6, 1.0);
  $6 = HEAPF64[$1 + 184 >> 3];
  HEAPF64[$0 + 936 >> 3] = $6 < 0.0 ? 0.0 : Math_min($6, 1.0);
  HEAP8[$0 + 952 | 0] = HEAPU8[$1 + 248 | 0];
  HEAPF64[$0 + 960 >> 3] = HEAPF64[$1 + 256 >> 3];
  HEAPF64[$0 + 968 >> 3] = HEAPF64[$1 + 264 >> 3];
  HEAPF64[$0 + 976 >> 3] = HEAPF64[$1 + 272 >> 3];
  HEAPF64[$0 + 984 >> 3] = HEAPF64[$1 + 280 >> 3];
  label$1 : {
   if ($3) {
    $2 = $0 + 8 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $2);
    break label$1;
   }
   $2 = HEAP32[$1 + 20 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$0 + 12 >> 2] = $2;
   $3 = $1 + 40 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 32 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 32 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 24 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 24 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 16 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 72 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 - -64 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 - -64 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 56 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 56 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 48 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 48 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 40 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 80 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 72 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 88 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 80 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 96 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 88 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 104 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 96 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 120 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 112 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 128 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 120 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 136 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 128 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 112 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 104 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $2 = $0 + 8 | 0;
  }
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 140 >> 2] = $3;
  $4 = $2 + 24 | 0;
  $21 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 160 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $21;
  $4 = $2 + 16 | 0;
  $21 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 152 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $21;
  $2 = $2 + 8 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 144 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = $0 + 40 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 168 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 48 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 176 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 56 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 184 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 - -64 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 192 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 72 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 200 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 80 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 208 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 88 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 216 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 96 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 224 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$0 + 264 >> 2] = 0;
  HEAP32[$0 + 268 >> 2] = 0;
  $2 = $0 + 272 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 280 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 288 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 296 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 304 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 312 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 320 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = $0 + 128 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 256 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 120 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 248 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 112 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 240 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 104 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 232 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  HEAPF64[$0 + 424 >> 3] = HEAPF64[$1 + 200 >> 3];
  HEAPF64[$0 + 440 >> 3] = HEAPF64[$1 + 208 >> 3];
  HEAPF64[$0 + 448 >> 3] = HEAPF64[$1 + 216 >> 3];
  HEAPF64[$0 + 432 >> 3] = HEAPF64[$1 + 224 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 + 144 >> 2]);
  $2 = HEAP32[8419];
  HEAP32[$0 + 1036 >> 2] = $2;
  HEAP32[8419] = $2 + 1;
  $6 = 0.0;
  $2 = HEAP32[$0 + 392 >> 2];
  $5 = HEAPF64[$1 >> 3];
  label$3 : {
   if ($5 == 0.0) {
    HEAP32[$0 + 392 >> 2] = $2 | 1;
    break label$3;
   }
   HEAP32[$0 + 392 >> 2] = $2 & -2;
   $6 = 1.0 / $5;
  }
  HEAPF64[$0 + 736 >> 3] = $6;
  $2 = $0 + 800 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAPF64[$0 + 776 >> 3] = $5 * HEAPF64[$0 + 808 >> 3];
  HEAPF64[$0 + 792 >> 3] = $5 * HEAPF64[$0 + 824 >> 3];
  HEAPF64[$0 + 784 >> 3] = $5 * HEAPF64[$0 + 816 >> 3];
  $5 = HEAPF64[$1 + 168 >> 3];
  $7 = HEAPF64[$1 + 160 >> 3];
  $14 = HEAPF64[$1 + 152 >> 3];
  $1 = $0 + 864 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $15 = $14 != 0.0 ? 1.0 / $14 : 0.0;
  HEAPF64[$0 + 840 >> 3] = $15;
  $16 = $7 != 0.0 ? 1.0 / $7 : 0.0;
  HEAPF64[$0 + 848 >> 3] = $16;
  $17 = $5 != 0.0 ? 1.0 / $5 : 0.0;
  HEAPF64[$0 + 856 >> 3] = $17;
  $1 = $0 + 664 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 632 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 600 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = HEAPF64[$0 + 88 >> 3];
  $7 = HEAPF64[$0 + 72 >> 3];
  $14 = HEAPF64[$0 + 80 >> 3];
  $18 = HEAPF64[$0 + 56 >> 3];
  $19 = HEAPF64[$0 + 40 >> 3];
  $20 = HEAPF64[$0 + 48 >> 3];
  $11 = HEAPF64[$0 + 24 >> 3];
  $12 = HEAPF64[$0 + 16 >> 3];
  $13 = HEAPF64[$0 + 8 >> 3];
  HEAP32[$0 + 1032 >> 2] = 8;
  $8 = $17 * $11;
  $9 = $15 * $13;
  $10 = $16 * $12;
  HEAPF64[$0 + 576 >> 3] = $11 * $8 + ($13 * $9 + $12 * $10);
  HEAPF64[$0 + 584 >> 3] = $18 * $8 + ($19 * $9 + $10 * $20);
  HEAPF64[$0 + 592 >> 3] = $5 * $8 + ($7 * $9 + $10 * $14);
  $8 = $17 * $18;
  $9 = $15 * $19;
  $10 = $16 * $20;
  HEAPF64[$0 + 608 >> 3] = $11 * $8 + ($13 * $9 + $12 * $10);
  HEAPF64[$0 + 616 >> 3] = $18 * $8 + ($19 * $9 + $20 * $10);
  HEAPF64[$0 + 624 >> 3] = $5 * $8 + ($7 * $9 + $10 * $14);
  $8 = $11;
  $11 = $17 * $5;
  $9 = $13;
  $13 = $15 * $7;
  $10 = $12;
  $12 = $16 * $14;
  HEAPF64[$0 + 640 >> 3] = $8 * $11 + ($9 * $13 + $10 * $12);
  HEAPF64[$0 + 648 >> 3] = $18 * $11 + ($19 * $13 + $20 * $12);
  HEAPF64[$0 + 656 >> 3] = $5 * $11 + ($7 * $13 + $14 * $12);
  $1 = $0 + 1096 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1088 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1080 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1072 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1064 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1056 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1048 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 1040 >> 2] = 0;
  HEAP32[$0 + 1044 >> 2] = 0;
  $5 = HEAPF64[$0 + 744 >> 3];
  $7 = HEAPF64[$0 + 752 >> 3];
  HEAPF64[$0 + 1152 >> 3] = $6 * HEAPF64[$0 + 760 >> 3];
  HEAPF64[$0 + 1144 >> 3] = $6 * $7;
  HEAPF64[$0 + 1136 >> 3] = $6 * $5;
  memset($0 + 1160 | 0, 0, 72);
 }
 
 function btRigidBody__setMassProps_28double_2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
  $3 = HEAP32[$0 + 392 >> 2];
  label$1 : {
   if ($1 == 0.0) {
    HEAP32[$0 + 392 >> 2] = $3 | 1;
    break label$1;
   }
   HEAP32[$0 + 392 >> 2] = $3 & -2;
   $4 = 1.0 / $1;
  }
  HEAPF64[$0 + 736 >> 3] = $4;
  $3 = $0 + 800 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAPF64[$0 + 776 >> 3] = HEAPF64[$0 + 808 >> 3] * $1;
  HEAPF64[$0 + 792 >> 3] = HEAPF64[$0 + 824 >> 3] * $1;
  HEAPF64[$0 + 784 >> 3] = HEAPF64[$0 + 816 >> 3] * $1;
  $1 = HEAPF64[$2 + 16 >> 3];
  $5 = HEAPF64[$2 + 8 >> 3];
  $6 = HEAPF64[$2 >> 3];
  HEAPF64[$0 + 1136 >> 3] = HEAPF64[$0 + 744 >> 3] * $4;
  HEAPF64[$0 + 1144 >> 3] = $4 * HEAPF64[$0 + 752 >> 3];
  HEAPF64[$0 + 1152 >> 3] = $4 * HEAPF64[$0 + 760 >> 3];
  $2 = $0 + 1160 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 864 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAPF64[$0 + 840 >> 3] = $6 != 0.0 ? 1.0 / $6 : 0.0;
  HEAPF64[$0 + 848 >> 3] = $5 != 0.0 ? 1.0 / $5 : 0.0;
  HEAPF64[$0 + 856 >> 3] = $1 != 0.0 ? 1.0 / $1 : 0.0;
 }
 
 function btRigidBody__predictIntegratedTransform_28double_2c_20btTransform__29($0, $1, $2) {
  btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btTransform__29($0 + 8 | 0, $0 + 672 | 0, $0 + 704 | 0, $1, $2);
 }
 
 function btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btTransform__29($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0;
  $15 = __stack_pointer - 32 | 0;
  __stack_pointer = $15;
  $7 = HEAPF64[$0 + 104 >> 3];
  $5 = HEAPF64[$0 + 112 >> 3];
  $8 = HEAPF64[$0 + 96 >> 3];
  $6 = HEAPF64[$1 >> 3];
  $10 = HEAPF64[$1 + 8 >> 3];
  $11 = HEAPF64[$1 + 16 >> 3];
  $1 = $4 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF64[$4 + 112 >> 3] = $5 + $11 * $3;
  HEAPF64[$4 + 104 >> 3] = $7 + $10 * $3;
  HEAPF64[$4 + 96 >> 3] = $8 + $6 * $3;
  $12 = HEAPF64[$2 + 16 >> 3];
  $13 = HEAPF64[$2 >> 3];
  $14 = HEAPF64[$2 + 8 >> 3];
  $7 = $12 * $12 + ($13 * $13 + $14 * $14);
  $7 = $7 > 2.220446049250313e-16 ? Math_sqrt($7) : 0.0;
  $5 = $7 * $3 > .7853981633974483 ? .7853981633974483 / $3 : $7;
  label$1 : {
   if ($5 < .001) {
    $7 = $3 * .5 + $5 * ($3 * $3 * $3 * -.020833333333 * $5);
    break label$1;
   }
   $7 = sin($5 * .5 * $3) / $5;
  }
  btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $15);
  $8 = HEAPF64[$15 + 8 >> 3];
  $6 = HEAPF64[$15 + 24 >> 3];
  $10 = cos($5 * $3 * .5);
  $11 = HEAPF64[$15 >> 3];
  $13 = $13 * $7;
  $14 = $14 * $7;
  $12 = $12 * $7;
  $16 = HEAPF64[$15 + 16 >> 3];
  $5 = $6 * $10 - $11 * $13 - $8 * $14 - $12 * $16;
  $7 = $13 * $8 + ($10 * $16 + $12 * $6) - $14 * $11;
  $3 = $14 * $16 + ($10 * $11 + $13 * $6) - $12 * $8;
  $8 = $12 * $11 + ($10 * $8 + $14 * $6) - $13 * $16;
  $6 = $5 * $5 + ($7 * $7 + ($3 * $3 + $8 * $8));
  if ($6 > 2.220446049250313e-16) {
   $6 = 1.0 / Math_sqrt($6);
   $5 = $5 * $6;
   $7 = $7 * $6;
   $3 = $3 * $6;
   $8 = $8 * $6;
   $6 = $5 * $5 + ($7 * $7 + ($3 * $3 + $8 * $8));
  }
  label$4 : {
   if ($6 > 2.220446049250313e-16) {
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    $0 = $4 + 88 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $4 + 56 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $10 = 2.0 / $6;
    $6 = $7 * $10;
    $11 = $8 * $6;
    $13 = $3 * $10;
    $14 = $5 * $13;
    HEAPF64[$4 + 72 >> 3] = $11 + $14;
    $12 = $3 * $6;
    $10 = $8 * $10;
    $16 = $5 * $10;
    HEAPF64[$4 + 64 >> 3] = $12 - $16;
    HEAPF64[$4 + 48 >> 3] = $11 - $14;
    $11 = $3 * $10;
    $5 = $5 * $6;
    HEAPF64[$4 + 32 >> 3] = $11 + $5;
    HEAPF64[$4 + 16 >> 3] = $12 + $16;
    HEAPF64[$4 + 8 >> 3] = $11 - $5;
    $3 = $3 * $13;
    $5 = $8 * $10;
    HEAPF64[$4 + 80 >> 3] = 1.0 - ($3 + $5);
    $8 = $3;
    $3 = $7 * $6;
    HEAPF64[$4 + 40 >> 3] = 1.0 - ($8 + $3);
    HEAPF64[$4 >> 3] = 1.0 - ($5 + $3);
    break label$4;
   }
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$4 + 4 >> 2] = $1;
   $2 = $0 + 24 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 24 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $2 = $0 + 16 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $2 = $0 + 8 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $1 = HEAP32[$0 + 36 >> 2];
   HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
   HEAP32[$4 + 36 >> 2] = $1;
   $2 = $0 + 40 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 40 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $2 = $0 + 48 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 48 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $2 = $0 + 56 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 56 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $1 = HEAP32[$0 + 68 >> 2];
   HEAP32[$4 + 64 >> 2] = HEAP32[$0 + 64 >> 2];
   HEAP32[$4 + 68 >> 2] = $1;
   $2 = $0 + 72 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 72 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $2 = $0 + 80 | 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $1 = $4 + 80 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $9;
   $0 = $0 + 88 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   $1 = $4 + 88 | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
  }
  __stack_pointer = $15 + 32 | 0;
 }
 
 function btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20double__29($0, $1, $2, $3) {
  var $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  $16 = HEAPF64[$1 + 48 >> 3];
  $17 = HEAPF64[$1 + 40 >> 3];
  $18 = HEAPF64[$1 + 80 >> 3];
  $19 = HEAPF64[$1 + 72 >> 3];
  $9 = HEAPF64[$0 + 80 >> 3];
  $10 = HEAPF64[$0 + 40 >> 3];
  $13 = HEAPF64[$0 + 72 >> 3];
  $11 = HEAPF64[$0 + 48 >> 3];
  $20 = HEAPF64[$1 + 16 >> 3];
  $21 = HEAPF64[$1 >> 3];
  $22 = HEAPF64[$1 + 8 >> 3];
  $23 = HEAPF64[$1 + 32 >> 3];
  $24 = HEAPF64[$1 + 64 >> 3];
  $7 = HEAPF64[$0 + 16 >> 3];
  $8 = HEAPF64[$0 + 8 >> 3];
  $14 = HEAPF64[$0 + 64 >> 3];
  $12 = HEAPF64[$0 + 32 >> 3];
  $6 = HEAPF64[$0 >> 3];
  $0 = $5 + 120 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $5 + 88 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $5 + 32 | 0;
  $26 = $12 * $13 - $14 * $10;
  $27 = $10 * $9 - $13 * $11;
  $15 = $11 * $14 - $9 * $12;
  $4 = 1.0 / ($7 * $26 + ($6 * $27 + $8 * $15));
  $25 = ($6 * $10 - $12 * $8) * $4;
  $10 = ($8 * $11 - $10 * $7) * $4;
  $11 = ($7 * $12 - $11 * $6) * $4;
  HEAPF64[$0 + 80 >> 3] = $18 * $25 + ($24 * $10 + $19 * $11);
  $12 = ($8 * $14 - $13 * $6) * $4;
  $8 = ($7 * $13 - $9 * $8) * $4;
  $7 = ($6 * $9 - $14 * $7) * $4;
  HEAPF64[$0 + 72 >> 3] = $18 * $12 + ($24 * $8 + $19 * $7);
  HEAPF64[$0 + 48 >> 3] = $25 * $16 + ($10 * $23 + $11 * $17);
  HEAPF64[$0 + 40 >> 3] = $12 * $16 + ($8 * $23 + $7 * $17);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = $26 * $4;
  $9 = $27 * $4;
  $4 = $15 * $4;
  HEAPF64[$5 + 96 >> 3] = $18 * $6 + ($24 * $9 + $19 * $4);
  HEAPF64[$5 + 64 >> 3] = $6 * $16 + ($9 * $23 + $4 * $17);
  HEAPF64[$5 + 48 >> 3] = $25 * $20 + ($10 * $21 + $22 * $11);
  HEAPF64[$5 + 40 >> 3] = $12 * $20 + ($8 * $21 + $22 * $7);
  HEAPF64[$5 + 32 >> 3] = $6 * $20 + ($9 * $21 + $22 * $4);
  btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $5);
  $6 = HEAPF64[$5 + 24 >> 3];
  $9 = HEAPF64[$5 + 16 >> 3];
  $8 = HEAPF64[$5 >> 3];
  $7 = HEAPF64[$5 + 8 >> 3];
  $4 = 1.0 / Math_sqrt($6 * $6 + ($9 * $9 + ($8 * $8 + $7 * $7)));
  $7 = $7 * $4;
  HEAPF64[$5 + 8 >> 3] = $7;
  $8 = $8 * $4;
  HEAPF64[$5 >> 3] = $8;
  $6 = acos(Math_min(Math_max($6 * $4, -1.0), 1.0));
  HEAPF64[$3 >> 3] = $6 + $6;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $4 = $9 * $4;
  $6 = $4 * $4 + ($8 * $8 + $7 * $7);
  label$1 : {
   if ($6 < 4.930380657631324e-32) {
    $0 = $2 + 8 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 1072693248;
    $1 = $0 + 8 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $0 = $0 + 16 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    break label$1;
   }
   $15 = $4;
   $4 = 1.0 / Math_sqrt($6);
   HEAPF64[$2 + 16 >> 3] = $15 * $4;
   HEAPF64[$2 + 8 >> 3] = $7 * $4;
   HEAPF64[$2 >> 3] = $8 * $4;
  }
  __stack_pointer = $5 + 128 | 0;
 }
 
 function btRigidBody__setGravity_28btVector3_20const__29($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $3 = HEAPF64[$0 + 736 >> 3];
  if ($3 != 0.0) {
   $6 = HEAPF64[$1 >> 3];
   $7 = HEAPF64[$1 + 8 >> 3];
   $8 = HEAPF64[$1 + 16 >> 3];
   $2 = $0 + 800 | 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   $3 = 1.0 / $3;
   HEAPF64[$0 + 792 >> 3] = $8 * $3;
   HEAPF64[$0 + 784 >> 3] = $3 * $7;
   HEAPF64[$0 + 776 >> 3] = $3 * $6;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 808 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 812 >> 2] = $2;
  $4 = $1 + 24 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $2 = $0 + 832 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $4 = $1 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $2 = $0 + 824 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 816 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btRigidBody__proceedToTransform_28btTransform_20const__29($0, $1) {
  btRigidBody__setCenterOfMassTransform_28btTransform_20const__29($0, $1);
 }
 
 function btRigidBody__setCenterOfMassTransform_28btTransform_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
  label$1 : {
   if (HEAPU8[$0 + 392 | 0] & 2) {
    $2 = HEAP32[$0 + 12 >> 2];
    HEAP32[$0 + 136 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 140 >> 2] = $2;
    $3 = $0 + 32 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 160 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 24 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 152 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 16 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 144 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 40 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 168 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 48 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 176 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 56 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 184 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 - -64 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 192 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 72 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 200 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 80 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 208 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 88 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 216 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $0 + 96 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 224 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $2 = $0 + 104 | 0;
    break label$1;
   }
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 136 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 140 >> 2] = $2;
   $3 = $1 + 24 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 160 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 16 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 152 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 8 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 144 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = HEAP32[$1 + 36 >> 2];
   $2 = $0 + 168 | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   $3 = $1 + 40 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 176 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 48 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 184 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 56 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 192 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = HEAP32[$1 + 68 >> 2];
   $2 = $0 + 200 | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   $3 = $1 + 72 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 208 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 80 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 216 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 88 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 224 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $2 = $1 + 96 | 0;
  }
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 232 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = $2 + 8 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $8 = $2 + 16 | 0;
  $9 = HEAP32[$8 >> 2];
  $8 = HEAP32[$8 + 4 >> 2];
  $2 = $2 + 24 | 0;
  $10 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $7 = $0 + 728 | 0;
  $6 = HEAP32[$7 + 4 >> 2];
  $5 = $0 + 320 | 0;
  HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $7 = $0 + 720 | 0;
  $6 = HEAP32[$7 + 4 >> 2];
  $5 = $0 + 312 | 0;
  HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $7 = $0 + 712 | 0;
  $6 = HEAP32[$7 + 4 >> 2];
  $5 = $0 + 304 | 0;
  HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $5 = HEAP32[$0 + 708 >> 2];
  HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 704 >> 2];
  HEAP32[$0 + 300 >> 2] = $5;
  $5 = $0 + 256 | 0;
  HEAP32[$5 >> 2] = $10;
  HEAP32[$5 + 4 >> 2] = $2;
  $2 = $0 + 248 | 0;
  HEAP32[$2 >> 2] = $9;
  HEAP32[$2 + 4 >> 2] = $8;
  $2 = $0 + 240 | 0;
  HEAP32[$2 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = $3;
  $2 = HEAP32[$0 + 676 >> 2];
  HEAP32[$0 + 264 >> 2] = HEAP32[$0 + 672 >> 2];
  HEAP32[$0 + 268 >> 2] = $2;
  $3 = $0 + 680 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 272 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 688 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 280 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $0 + 696 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 288 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 32 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $4 = $1 + 8 | 0;
  $8 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 12 >> 2] = $4;
  $8 = $1 + 56 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $4 = $0 - -64 | 0;
  HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$4 + 4 >> 2] = $9;
  $8 = $1 + 48 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $4 = $0 + 56 | 0;
  HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$4 + 4 >> 2] = $9;
  $9 = $1 + 40 | 0;
  $10 = HEAP32[$9 + 4 >> 2];
  $8 = $0 + 48 | 0;
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$8 + 4 >> 2] = $10;
  $10 = HEAP32[$1 + 36 >> 2];
  $9 = $0 + 40 | 0;
  HEAP32[$9 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$9 + 4 >> 2] = $10;
  $5 = $1 + 88 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $10 = $0 + 96 | 0;
  HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$10 + 4 >> 2] = $7;
  $5 = $1 + 80 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $10 = $0 + 88 | 0;
  HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$10 + 4 >> 2] = $7;
  $7 = $1 + 72 | 0;
  $6 = HEAP32[$7 + 4 >> 2];
  $5 = $0 + 80 | 0;
  HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $6 = HEAP32[$1 + 68 >> 2];
  $7 = $0 + 72 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $11 = $1 + 120 | 0;
  $18 = HEAP32[$11 + 4 >> 2];
  $6 = $0 + 128 | 0;
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = $18;
  $11 = $1 + 112 | 0;
  $18 = HEAP32[$11 + 4 >> 2];
  $6 = $0 + 120 | 0;
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = $18;
  $11 = $1 + 104 | 0;
  $18 = HEAP32[$11 + 4 >> 2];
  $6 = $0 + 112 | 0;
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = $18;
  $11 = HEAP32[$1 + 100 >> 2];
  $6 = $0 + 104 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$6 + 4 >> 2] = $11;
  $19 = HEAPF64[$3 >> 3];
  $20 = HEAPF64[$2 >> 3];
  $21 = HEAPF64[$4 >> 3];
  $22 = HEAPF64[$9 >> 3];
  $23 = HEAPF64[$8 >> 3];
  $15 = HEAPF64[$10 >> 3];
  $25 = HEAPF64[$0 + 856 >> 3];
  $16 = HEAPF64[$7 >> 3];
  $17 = HEAPF64[$5 >> 3];
  $26 = HEAPF64[$0 + 848 >> 3];
  $24 = HEAPF64[$0 + 8 >> 3];
  $27 = HEAPF64[$0 + 840 >> 3];
  $1 = $0 + 664 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 632 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 600 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $12 = $25 * $15;
  $13 = $27 * $16;
  $14 = $26 * $17;
  HEAPF64[$0 + 656 >> 3] = $15 * $12 + ($16 * $13 + $17 * $14);
  HEAPF64[$0 + 648 >> 3] = $21 * $12 + ($22 * $13 + $23 * $14);
  HEAPF64[$0 + 640 >> 3] = $20 * $12 + ($24 * $13 + $19 * $14);
  $12 = $25 * $21;
  $13 = $27 * $22;
  $14 = $26 * $23;
  HEAPF64[$0 + 624 >> 3] = $15 * $12 + ($16 * $13 + $17 * $14);
  HEAPF64[$0 + 616 >> 3] = $21 * $12 + ($22 * $13 + $23 * $14);
  HEAPF64[$0 + 608 >> 3] = $20 * $12 + ($24 * $13 + $19 * $14);
  $12 = $15;
  $15 = $20 * $25;
  $13 = $16;
  $16 = $24 * $27;
  $14 = $17;
  $17 = $19 * $26;
  HEAPF64[$0 + 592 >> 3] = $12 * $15 + ($13 * $16 + $14 * $17);
  HEAPF64[$0 + 584 >> 3] = $21 * $15 + ($22 * $16 + $17 * $23);
  HEAPF64[$0 + 576 >> 3] = $20 * $15 + ($24 * $16 + $19 * $17);
 }
 
 function btRigidBody__addConstraintRef_28btTypedConstraint__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   $4 = HEAP32[$0 + 1016 >> 2];
   label$2 : {
    if (($4 | 0) <= 0) {
     break label$2
    }
    $2 = HEAP32[$0 + 1024 >> 2];
    $3 = $4;
    while (1) {
     if (($1 | 0) != HEAP32[$2 >> 2]) {
      $2 = $2 + 4 | 0;
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($3) {
     break label$1
    }
   }
   label$5 : {
    if (HEAP32[$0 + 1020 >> 2] != ($4 | 0)) {
     break label$5
    }
    $5 = $4 ? $4 << 1 : 1;
    if (($5 | 0) <= ($4 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$5) {
      break label$6
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
     $4 = HEAP32[$0 + 1016 >> 2];
    }
    label$8 : {
     if (($4 | 0) <= 0) {
      break label$8
     }
     $6 = $4 & 3;
     if ($4 - 1 >>> 0 >= 3) {
      $3 = $4 & -4;
      $2 = 0;
      while (1) {
       $9 = $2 + $7 | 0;
       HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 1024 >> 2] + $2 >> 2];
       HEAP32[$9 + 4 >> 2] = HEAP32[(HEAP32[$0 + 1024 >> 2] + $2 | 0) + 4 >> 2];
       HEAP32[$9 + 8 >> 2] = HEAP32[(HEAP32[$0 + 1024 >> 2] + $2 | 0) + 8 >> 2];
       HEAP32[$9 + 12 >> 2] = HEAP32[(HEAP32[$0 + 1024 >> 2] + $2 | 0) + 12 >> 2];
       $2 = $2 + 16 | 0;
       $8 = $8 + 4 | 0;
       if (($3 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$6) {
      break label$8
     }
     $2 = $8 << 2;
     while (1) {
      HEAP32[$2 + $7 >> 2] = HEAP32[HEAP32[$0 + 1024 >> 2] + $2 >> 2];
      $2 = $2 + 4 | 0;
      $6 = $6 - 1 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 1024 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 1028 | 0])) {
     btAlignedFreeInternal_28void__29($2);
     $4 = HEAP32[$0 + 1016 >> 2];
    }
    HEAP32[$0 + 1024 >> 2] = $7;
    HEAP8[$0 + 1028 | 0] = 1;
    HEAP32[$0 + 1020 >> 2] = $5;
   }
   HEAP32[HEAP32[$0 + 1024 >> 2] + ($4 << 2) >> 2] = $1;
   HEAP32[$0 + 1016 >> 2] = $4 + 1;
   $2 = HEAP32[$1 + 36 >> 2];
   $3 = HEAP32[$1 + 32 >> 2];
   label$13 : {
    if (($0 | 0) == ($3 | 0)) {
     $1 = HEAP32[$0 + 520 >> 2];
     if (($1 | 0) != HEAP32[$0 + 524 >> 2]) {
      break label$13
     }
     $5 = $1 ? $1 << 1 : 1;
     if (($5 | 0) <= ($1 | 0)) {
      break label$13
     }
     label$15 : {
      if (!$5) {
       $7 = 0;
       break label$15;
      }
      $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
      $1 = HEAP32[$0 + 520 >> 2];
     }
     label$17 : {
      if (($1 | 0) <= 0) {
       break label$17
      }
      $6 = $1 & 3;
      $8 = 0;
      if ($1 - 1 >>> 0 >= 3) {
       $4 = $1 & -4;
       $3 = 0;
       while (1) {
        $9 = $3 + $7 | 0;
        HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 528 >> 2] + $3 >> 2];
        HEAP32[$9 + 4 >> 2] = HEAP32[(HEAP32[$0 + 528 >> 2] + $3 | 0) + 4 >> 2];
        HEAP32[$9 + 8 >> 2] = HEAP32[(HEAP32[$0 + 528 >> 2] + $3 | 0) + 8 >> 2];
        HEAP32[$9 + 12 >> 2] = HEAP32[(HEAP32[$0 + 528 >> 2] + $3 | 0) + 12 >> 2];
        $3 = $3 + 16 | 0;
        $8 = $8 + 4 | 0;
        if (($4 | 0) != ($8 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$6) {
       break label$17
      }
      $3 = $8 << 2;
      while (1) {
       HEAP32[$3 + $7 >> 2] = HEAP32[HEAP32[$0 + 528 >> 2] + $3 >> 2];
       $3 = $3 + 4 | 0;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue
       }
       break;
      };
     }
     $3 = HEAP32[$0 + 528 >> 2];
     if (!(!$3 | !HEAPU8[$0 + 532 | 0])) {
      btAlignedFreeInternal_28void__29($3);
      $1 = HEAP32[$0 + 520 >> 2];
     }
     HEAP32[$0 + 528 >> 2] = $7;
     HEAP8[$0 + 532 | 0] = 1;
     HEAP32[$0 + 524 >> 2] = $5;
     break label$13;
    }
    $1 = HEAP32[$2 + 520 >> 2];
    label$22 : {
     if (($1 | 0) != HEAP32[$2 + 524 >> 2]) {
      break label$22
     }
     $8 = $1 ? $1 << 1 : 1;
     if (($8 | 0) <= ($1 | 0)) {
      break label$22
     }
     label$23 : {
      if (!$8) {
       $6 = 0;
       break label$23;
      }
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2);
      $1 = HEAP32[$2 + 520 >> 2];
     }
     label$25 : {
      if (($1 | 0) <= 0) {
       break label$25
      }
      $4 = $1 & 3;
      $7 = 0;
      if ($1 - 1 >>> 0 >= 3) {
       $9 = $1 & -4;
       $0 = 0;
       while (1) {
        $5 = $0 + $6 | 0;
        HEAP32[$5 >> 2] = HEAP32[HEAP32[$2 + 528 >> 2] + $0 >> 2];
        HEAP32[$5 + 4 >> 2] = HEAP32[(HEAP32[$2 + 528 >> 2] + $0 | 0) + 4 >> 2];
        HEAP32[$5 + 8 >> 2] = HEAP32[(HEAP32[$2 + 528 >> 2] + $0 | 0) + 8 >> 2];
        HEAP32[$5 + 12 >> 2] = HEAP32[(HEAP32[$2 + 528 >> 2] + $0 | 0) + 12 >> 2];
        $0 = $0 + 16 | 0;
        $7 = $7 + 4 | 0;
        if (($9 | 0) != ($7 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$4) {
       break label$25
      }
      $0 = $7 << 2;
      while (1) {
       HEAP32[$0 + $6 >> 2] = HEAP32[HEAP32[$2 + 528 >> 2] + $0 >> 2];
       $0 = $0 + 4 | 0;
       $4 = $4 - 1 | 0;
       if ($4) {
        continue
       }
       break;
      };
     }
     $0 = HEAP32[$2 + 528 >> 2];
     if (!(!$0 | !HEAPU8[$2 + 532 | 0])) {
      btAlignedFreeInternal_28void__29($0);
      $1 = HEAP32[$2 + 520 >> 2];
     }
     HEAP32[$2 + 528 >> 2] = $6;
     HEAP8[$2 + 532 | 0] = 1;
     HEAP32[$2 + 524 >> 2] = $8;
    }
    $0 = $2;
    $2 = $3;
   }
   HEAP32[$0 + 520 >> 2] = $1 + 1;
   HEAP32[$0 + 512 >> 2] = ($1 ^ -1) >>> 31;
   HEAP32[HEAP32[$0 + 528 >> 2] + ($1 << 2) >> 2] = $2;
  }
 }
 
 function btRigidBody__removeConstraintRef_28btTypedConstraint__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   $5 = HEAP32[$0 + 1016 >> 2];
   if (($5 | 0) <= 0) {
    break label$1
   }
   $4 = HEAP32[$0 + 1024 >> 2];
   $2 = $4;
   while (1) {
    if (($1 | 0) != HEAP32[$2 >> 2]) {
     $2 = $2 + 4 | 0;
     $3 = $3 + 1 | 0;
     if (($5 | 0) != ($3 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($3 | 0) >= ($5 | 0)) {
    break label$1
   }
   $3 = 0;
   $2 = $4;
   label$4 : {
    while (1) {
     if (($1 | 0) != HEAP32[$2 >> 2]) {
      $2 = $2 + 4 | 0;
      $3 = $3 + 1 | 0;
      if (($5 | 0) != ($3 | 0)) {
       continue
      }
      break label$4;
     }
     break;
    };
    if (($3 | 0) >= ($5 | 0)) {
     break label$4
    }
    $3 = $2;
    $6 = $4;
    $2 = $5 - 1 | 0;
    $4 = $2 << 2;
    HEAP32[$3 >> 2] = HEAP32[$6 + $4 >> 2];
    HEAP32[$0 + 1016 >> 2] = $2;
    HEAP32[$4 + HEAP32[$0 + 1024 >> 2] >> 2] = $1;
   }
   $4 = HEAP32[$1 + 36 >> 2];
   $5 = HEAP32[$1 + 32 >> 2];
   label$7 : {
    if (($0 | 0) == ($5 | 0)) {
     $1 = HEAP32[$0 + 520 >> 2];
     if (($1 | 0) <= 0) {
      break label$7
     }
     $3 = 0;
     $5 = HEAP32[$0 + 528 >> 2];
     $2 = $5;
     while (1) {
      if (HEAP32[$2 >> 2] != ($4 | 0)) {
       $2 = $2 + 4 | 0;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($1 | 0)) {
        continue
       }
       break label$7;
      }
      break;
     };
     if (($1 | 0) <= ($3 | 0)) {
      break label$7
     }
     $3 = $2;
     $1 = $1 - 1 | 0;
     $2 = $1 << 2;
     HEAP32[$3 >> 2] = HEAP32[$2 + $5 >> 2];
     HEAP32[$0 + 520 >> 2] = $1;
     HEAP32[$2 + HEAP32[$0 + 528 >> 2] >> 2] = $4;
     break label$7;
    }
    $1 = HEAP32[$4 + 520 >> 2];
    label$11 : {
     if (($1 | 0) <= 0) {
      break label$11
     }
     $3 = 0;
     $0 = HEAP32[$4 + 528 >> 2];
     $2 = $0;
     while (1) {
      if (HEAP32[$2 >> 2] != ($5 | 0)) {
       $2 = $2 + 4 | 0;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($1 | 0)) {
        continue
       }
       break label$11;
      }
      break;
     };
     if (($1 | 0) <= ($3 | 0)) {
      break label$11
     }
     $3 = $0;
     $1 = $1 - 1 | 0;
     $0 = $1 << 2;
     HEAP32[$2 >> 2] = HEAP32[$3 + $0 >> 2];
     HEAP32[$4 + 520 >> 2] = $1;
     HEAP32[$0 + HEAP32[$4 + 528 >> 2] >> 2] = $5;
    }
    $0 = $4;
   }
   HEAP32[$0 + 512 >> 2] = ($1 | 0) > 0;
  }
 }
 
 function btRigidBody__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 944;
 }
 
 function btRigidBody__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionObject__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAPF64[$1 + 480 >> 3] = HEAPF64[$0 + 576 >> 3];
  HEAPF64[$1 + 488 >> 3] = HEAPF64[$0 + 584 >> 3];
  HEAPF64[$1 + 496 >> 3] = HEAPF64[$0 + 592 >> 3];
  HEAPF64[$1 + 504 >> 3] = HEAPF64[$0 + 600 >> 3];
  HEAPF64[$1 + 512 >> 3] = HEAPF64[$0 + 608 >> 3];
  HEAPF64[$1 + 520 >> 3] = HEAPF64[$0 + 616 >> 3];
  HEAPF64[$1 + 528 >> 3] = HEAPF64[$0 + 624 >> 3];
  HEAPF64[$1 + 536 >> 3] = HEAPF64[$0 + 632 >> 3];
  HEAPF64[$1 + 544 >> 3] = HEAPF64[$0 + 640 >> 3];
  HEAPF64[$1 + 552 >> 3] = HEAPF64[$0 + 648 >> 3];
  HEAPF64[$1 + 560 >> 3] = HEAPF64[$0 + 656 >> 3];
  HEAPF64[$1 + 568 >> 3] = HEAPF64[$0 + 664 >> 3];
  HEAPF64[$1 + 576 >> 3] = HEAPF64[$0 + 672 >> 3];
  HEAPF64[$1 + 584 >> 3] = HEAPF64[$0 + 680 >> 3];
  HEAPF64[$1 + 592 >> 3] = HEAPF64[$0 + 688 >> 3];
  HEAPF64[$1 + 600 >> 3] = HEAPF64[$0 + 696 >> 3];
  HEAPF64[$1 + 608 >> 3] = HEAPF64[$0 + 704 >> 3];
  HEAPF64[$1 + 616 >> 3] = HEAPF64[$0 + 712 >> 3];
  HEAPF64[$1 + 624 >> 3] = HEAPF64[$0 + 720 >> 3];
  HEAPF64[$1 + 632 >> 3] = HEAPF64[$0 + 728 >> 3];
  HEAPF64[$1 + 864 >> 3] = HEAPF64[$0 + 736 >> 3];
  HEAPF64[$1 + 640 >> 3] = HEAPF64[$0 + 1104 >> 3];
  HEAPF64[$1 + 648 >> 3] = HEAPF64[$0 + 1112 >> 3];
  HEAPF64[$1 + 656 >> 3] = HEAPF64[$0 + 1120 >> 3];
  HEAPF64[$1 + 664 >> 3] = HEAPF64[$0 + 1128 >> 3];
  HEAPF64[$1 + 672 >> 3] = HEAPF64[$0 + 744 >> 3];
  HEAPF64[$1 + 680 >> 3] = HEAPF64[$0 + 752 >> 3];
  HEAPF64[$1 + 688 >> 3] = HEAPF64[$0 + 760 >> 3];
  HEAPF64[$1 + 696 >> 3] = HEAPF64[$0 + 768 >> 3];
  HEAPF64[$1 + 704 >> 3] = HEAPF64[$0 + 776 >> 3];
  HEAPF64[$1 + 712 >> 3] = HEAPF64[$0 + 784 >> 3];
  HEAPF64[$1 + 720 >> 3] = HEAPF64[$0 + 792 >> 3];
  HEAPF64[$1 + 728 >> 3] = HEAPF64[$0 + 800 >> 3];
  HEAPF64[$1 + 736 >> 3] = HEAPF64[$0 + 808 >> 3];
  HEAPF64[$1 + 744 >> 3] = HEAPF64[$0 + 816 >> 3];
  HEAPF64[$1 + 752 >> 3] = HEAPF64[$0 + 824 >> 3];
  HEAPF64[$1 + 760 >> 3] = HEAPF64[$0 + 832 >> 3];
  HEAPF64[$1 + 768 >> 3] = HEAPF64[$0 + 840 >> 3];
  HEAPF64[$1 + 776 >> 3] = HEAPF64[$0 + 848 >> 3];
  HEAPF64[$1 + 784 >> 3] = HEAPF64[$0 + 856 >> 3];
  HEAPF64[$1 + 792 >> 3] = HEAPF64[$0 + 864 >> 3];
  HEAPF64[$1 + 800 >> 3] = HEAPF64[$0 + 872 >> 3];
  HEAPF64[$1 + 808 >> 3] = HEAPF64[$0 + 880 >> 3];
  HEAPF64[$1 + 816 >> 3] = HEAPF64[$0 + 888 >> 3];
  HEAPF64[$1 + 824 >> 3] = HEAPF64[$0 + 896 >> 3];
  HEAPF64[$1 + 832 >> 3] = HEAPF64[$0 + 904 >> 3];
  HEAPF64[$1 + 840 >> 3] = HEAPF64[$0 + 912 >> 3];
  HEAPF64[$1 + 848 >> 3] = HEAPF64[$0 + 920 >> 3];
  HEAPF64[$1 + 856 >> 3] = HEAPF64[$0 + 928 >> 3];
  HEAPF64[$1 + 872 >> 3] = HEAPF64[$0 + 936 >> 3];
  HEAPF64[$1 + 880 >> 3] = HEAPF64[$0 + 944 >> 3];
  HEAPF64[$1 + 888 >> 3] = HEAPF64[$0 + 960 >> 3];
  HEAPF64[$1 + 896 >> 3] = HEAPF64[$0 + 968 >> 3];
  HEAPF64[$1 + 904 >> 3] = HEAPF64[$0 + 976 >> 3];
  HEAPF64[$1 + 912 >> 3] = HEAPF64[$0 + 984 >> 3];
  HEAPF64[$1 + 920 >> 3] = HEAPF64[$0 + 992 >> 3];
  HEAPF64[$1 + 928 >> 3] = HEAPF64[$0 + 1e3 >> 3];
  HEAP32[$1 + 936 >> 2] = HEAPU8[$0 + 952 | 0];
  HEAP32[$1 + 940 >> 2] = 0;
  return 3942;
 }
 
 function btRigidBody__serializeSingleObject_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function btRigidBody___btRigidBody_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 25784;
  $1 = HEAP32[$0 + 1024 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 1028 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 1024 >> 2] = 0;
  HEAP8[$0 + 1028 | 0] = 1;
  $1 = $0 + 1016 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCollisionObject___btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btRigidBody___btRigidBody_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 25784;
  $1 = HEAP32[$0 + 1024 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 1028 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 1024 >> 2] = 0;
  HEAP8[$0 + 1028 | 0] = 1;
  $1 = $0 + 1016 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCollisionObject___btCollisionObject_28_29($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($0) {
  var $1 = 0;
  HEAP32[$0 >> 2] = 25848;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  $1 = $0 + 68 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1 = $0 + 108 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  HEAP32[$0 + 156 >> 2] = 0;
  $1 = $0 + 148 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 180 | 0] = 1;
  HEAP32[$0 + 176 >> 2] = 0;
  $1 = $0 + 168 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  HEAP32[$0 + 240 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  $1 = $0 + 196 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 224 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = 574;
  HEAP32[$0 + 216 >> 2] = 575;
  HEAP32[$0 + 220 >> 2] = 576;
 }
 
 function gResolveSingleConstraintRowGeneric_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
  $6 = HEAPF64[$2 + 200 >> 3];
  $7 = HEAPF64[$2 + 48 >> 3];
  $8 = HEAPF64[$2 + 32 >> 3];
  $9 = HEAPF64[$2 + 40 >> 3];
  $4 = HEAPF64[$2 + 216 >> 3];
  $3 = HEAPF64[$2 + 224 >> 3] - $6 * HEAPF64[$2 + 232 >> 3] - ($7 * HEAPF64[$0 + 144 >> 3] + ($8 * HEAPF64[$0 + 128 >> 3] + $9 * HEAPF64[$0 + 136 >> 3]) + (HEAPF64[$2 + 16 >> 3] * HEAPF64[$0 + 176 >> 3] + (HEAPF64[$2 >> 3] * HEAPF64[$0 + 160 >> 3] + HEAPF64[$2 + 8 >> 3] * HEAPF64[$0 + 168 >> 3]))) * $4 - (HEAPF64[$2 + 112 >> 3] * HEAPF64[$1 + 144 >> 3] + (HEAPF64[$2 + 96 >> 3] * HEAPF64[$1 + 128 >> 3] + HEAPF64[$2 + 104 >> 3] * HEAPF64[$1 + 136 >> 3]) + (HEAPF64[$2 + 80 >> 3] * HEAPF64[$1 + 176 >> 3] + (HEAPF64[$2 + 64 >> 3] * HEAPF64[$1 + 160 >> 3] + HEAPF64[$2 + 72 >> 3] * HEAPF64[$1 + 168 >> 3]))) * $4;
  $4 = $6 + $3;
  $5 = HEAPF64[$2 + 240 >> 3];
  label$1 : {
   if ($4 < $5) {
    $3 = $5 - $6;
    $4 = $5;
    break label$1;
   }
   $5 = HEAPF64[$2 + 248 >> 3];
   if (!($5 < $4)) {
    break label$1
   }
   $3 = $5 - $6;
   $4 = $5;
  }
  HEAPF64[$2 + 200 >> 3] = $4;
  if (HEAP32[$0 + 480 >> 2]) {
   HEAPF64[$0 + 128 >> 3] = HEAPF64[$0 + 224 >> 3] * ($3 * ($8 * HEAPF64[$0 + 256 >> 3])) + HEAPF64[$0 + 128 >> 3];
   HEAPF64[$0 + 136 >> 3] = $3 * ($9 * HEAPF64[$0 + 264 >> 3]) * HEAPF64[$0 + 232 >> 3] + HEAPF64[$0 + 136 >> 3];
   HEAPF64[$0 + 144 >> 3] = $3 * ($7 * HEAPF64[$0 + 272 >> 3]) * HEAPF64[$0 + 240 >> 3] + HEAPF64[$0 + 144 >> 3];
   $4 = HEAPF64[$2 + 144 >> 3];
   $5 = HEAPF64[$2 + 136 >> 3];
   HEAPF64[$0 + 160 >> 3] = $3 * HEAPF64[$0 + 192 >> 3] * HEAPF64[$2 + 128 >> 3] + HEAPF64[$0 + 160 >> 3];
   $6 = HEAPF64[$0 + 208 >> 3];
   HEAPF64[$0 + 168 >> 3] = $5 * ($3 * HEAPF64[$0 + 200 >> 3]) + HEAPF64[$0 + 168 >> 3];
   HEAPF64[$0 + 176 >> 3] = $4 * ($3 * $6) + HEAPF64[$0 + 176 >> 3];
  }
  if (HEAP32[$1 + 480 >> 2]) {
   $4 = HEAPF64[$2 + 112 >> 3];
   $5 = HEAPF64[$2 + 104 >> 3];
   HEAPF64[$1 + 128 >> 3] = HEAPF64[$1 + 224 >> 3] * ($3 * (HEAPF64[$2 + 96 >> 3] * HEAPF64[$1 + 256 >> 3])) + HEAPF64[$1 + 128 >> 3];
   HEAPF64[$1 + 136 >> 3] = $3 * ($5 * HEAPF64[$1 + 264 >> 3]) * HEAPF64[$1 + 232 >> 3] + HEAPF64[$1 + 136 >> 3];
   HEAPF64[$1 + 144 >> 3] = $3 * ($4 * HEAPF64[$1 + 272 >> 3]) * HEAPF64[$1 + 240 >> 3] + HEAPF64[$1 + 144 >> 3];
   $4 = HEAPF64[$2 + 176 >> 3];
   $5 = HEAPF64[$2 + 168 >> 3];
   HEAPF64[$1 + 160 >> 3] = $3 * HEAPF64[$1 + 192 >> 3] * HEAPF64[$2 + 160 >> 3] + HEAPF64[$1 + 160 >> 3];
   $6 = HEAPF64[$1 + 208 >> 3];
   HEAPF64[$1 + 168 >> 3] = $5 * ($3 * HEAPF64[$1 + 200 >> 3]) + HEAPF64[$1 + 168 >> 3];
   HEAPF64[$1 + 176 >> 3] = $4 * ($3 * $6) + HEAPF64[$1 + 176 >> 3];
  }
  return +$3;
 }
 
 function gResolveSingleConstraintRowLowerLimit_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0;
  $3 = HEAPF64[$2 + 200 >> 3];
  $6 = HEAPF64[$2 + 48 >> 3];
  $7 = HEAPF64[$2 + 32 >> 3];
  $8 = HEAPF64[$2 + 40 >> 3];
  $4 = HEAPF64[$2 + 216 >> 3];
  $4 = HEAPF64[$2 + 224 >> 3] - $3 * HEAPF64[$2 + 232 >> 3] - ($6 * HEAPF64[$0 + 144 >> 3] + ($7 * HEAPF64[$0 + 128 >> 3] + $8 * HEAPF64[$0 + 136 >> 3]) + (HEAPF64[$2 + 16 >> 3] * HEAPF64[$0 + 176 >> 3] + (HEAPF64[$2 >> 3] * HEAPF64[$0 + 160 >> 3] + HEAPF64[$2 + 8 >> 3] * HEAPF64[$0 + 168 >> 3]))) * $4 - (HEAPF64[$2 + 112 >> 3] * HEAPF64[$1 + 144 >> 3] + (HEAPF64[$2 + 96 >> 3] * HEAPF64[$1 + 128 >> 3] + HEAPF64[$2 + 104 >> 3] * HEAPF64[$1 + 136 >> 3]) + (HEAPF64[$2 + 80 >> 3] * HEAPF64[$1 + 176 >> 3] + (HEAPF64[$2 + 64 >> 3] * HEAPF64[$1 + 160 >> 3] + HEAPF64[$2 + 72 >> 3] * HEAPF64[$1 + 168 >> 3]))) * $4;
  $5 = HEAPF64[$2 + 240 >> 3];
  $9 = $3 + $4;
  $10 = $5 > $9;
  HEAPF64[$2 + 200 >> 3] = $10 ? $5 : $9;
  $3 = $10 ? $5 - $3 : $4;
  if (HEAP32[$0 + 480 >> 2]) {
   HEAPF64[$0 + 128 >> 3] = HEAPF64[$0 + 224 >> 3] * ($3 * ($7 * HEAPF64[$0 + 256 >> 3])) + HEAPF64[$0 + 128 >> 3];
   HEAPF64[$0 + 136 >> 3] = $3 * ($8 * HEAPF64[$0 + 264 >> 3]) * HEAPF64[$0 + 232 >> 3] + HEAPF64[$0 + 136 >> 3];
   HEAPF64[$0 + 144 >> 3] = $3 * ($6 * HEAPF64[$0 + 272 >> 3]) * HEAPF64[$0 + 240 >> 3] + HEAPF64[$0 + 144 >> 3];
   $4 = HEAPF64[$2 + 144 >> 3];
   $5 = HEAPF64[$2 + 136 >> 3];
   HEAPF64[$0 + 160 >> 3] = $3 * HEAPF64[$0 + 192 >> 3] * HEAPF64[$2 + 128 >> 3] + HEAPF64[$0 + 160 >> 3];
   $6 = HEAPF64[$0 + 208 >> 3];
   HEAPF64[$0 + 168 >> 3] = $5 * ($3 * HEAPF64[$0 + 200 >> 3]) + HEAPF64[$0 + 168 >> 3];
   HEAPF64[$0 + 176 >> 3] = $4 * ($3 * $6) + HEAPF64[$0 + 176 >> 3];
  }
  if (HEAP32[$1 + 480 >> 2]) {
   $4 = HEAPF64[$2 + 112 >> 3];
   $5 = HEAPF64[$2 + 104 >> 3];
   HEAPF64[$1 + 128 >> 3] = HEAPF64[$1 + 224 >> 3] * ($3 * (HEAPF64[$2 + 96 >> 3] * HEAPF64[$1 + 256 >> 3])) + HEAPF64[$1 + 128 >> 3];
   HEAPF64[$1 + 136 >> 3] = $3 * ($5 * HEAPF64[$1 + 264 >> 3]) * HEAPF64[$1 + 232 >> 3] + HEAPF64[$1 + 136 >> 3];
   HEAPF64[$1 + 144 >> 3] = $3 * ($4 * HEAPF64[$1 + 272 >> 3]) * HEAPF64[$1 + 240 >> 3] + HEAPF64[$1 + 144 >> 3];
   $4 = HEAPF64[$2 + 176 >> 3];
   $5 = HEAPF64[$2 + 168 >> 3];
   HEAPF64[$1 + 160 >> 3] = $3 * HEAPF64[$1 + 192 >> 3] * HEAPF64[$2 + 160 >> 3] + HEAPF64[$1 + 160 >> 3];
   $6 = HEAPF64[$1 + 208 >> 3];
   HEAPF64[$1 + 168 >> 3] = $5 * ($3 * HEAPF64[$1 + 200 >> 3]) + HEAPF64[$1 + 168 >> 3];
   HEAPF64[$1 + 176 >> 3] = $4 * ($3 * $6) + HEAPF64[$1 + 176 >> 3];
  }
  return +$3;
 }
 
 function gResolveSplitPenetrationImpulse_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0;
  $4 = HEAPF64[$2 + 256 >> 3];
  label$1 : {
   if ($4 == 0.0) {
    break label$1
   }
   HEAP32[8420] = HEAP32[8420] + 1;
   $3 = HEAPF64[$2 + 192 >> 3];
   $5 = $4 - $3 * HEAPF64[$2 + 232 >> 3];
   $6 = HEAPF64[$2 + 48 >> 3];
   $7 = HEAPF64[$2 + 32 >> 3];
   $8 = HEAPF64[$2 + 40 >> 3];
   $4 = HEAPF64[$2 + 216 >> 3];
   $4 = $5 - ($6 * HEAPF64[$0 + 304 >> 3] + ($7 * HEAPF64[$0 + 288 >> 3] + $8 * HEAPF64[$0 + 296 >> 3]) + (HEAPF64[$2 + 16 >> 3] * HEAPF64[$0 + 336 >> 3] + (HEAPF64[$2 >> 3] * HEAPF64[$0 + 320 >> 3] + HEAPF64[$2 + 8 >> 3] * HEAPF64[$0 + 328 >> 3]))) * $4 - (HEAPF64[$2 + 112 >> 3] * HEAPF64[$1 + 304 >> 3] + (HEAPF64[$2 + 96 >> 3] * HEAPF64[$1 + 288 >> 3] + HEAPF64[$2 + 104 >> 3] * HEAPF64[$1 + 296 >> 3]) + (HEAPF64[$2 + 80 >> 3] * HEAPF64[$1 + 336 >> 3] + (HEAPF64[$2 + 64 >> 3] * HEAPF64[$1 + 320 >> 3] + HEAPF64[$2 + 72 >> 3] * HEAPF64[$1 + 328 >> 3]))) * $4;
   $5 = HEAPF64[$2 + 240 >> 3];
   $9 = $3 + $4;
   $10 = $5 > $9;
   HEAPF64[$2 + 192 >> 3] = $10 ? $5 : $9;
   $3 = $10 ? $5 - $3 : $4;
   if (HEAP32[$0 + 480 >> 2]) {
    HEAPF64[$0 + 288 >> 3] = HEAPF64[$0 + 224 >> 3] * ($3 * ($7 * HEAPF64[$0 + 256 >> 3])) + HEAPF64[$0 + 288 >> 3];
    HEAPF64[$0 + 296 >> 3] = $3 * ($8 * HEAPF64[$0 + 264 >> 3]) * HEAPF64[$0 + 232 >> 3] + HEAPF64[$0 + 296 >> 3];
    HEAPF64[$0 + 304 >> 3] = $3 * ($6 * HEAPF64[$0 + 272 >> 3]) * HEAPF64[$0 + 240 >> 3] + HEAPF64[$0 + 304 >> 3];
    $4 = HEAPF64[$2 + 144 >> 3];
    $5 = HEAPF64[$2 + 136 >> 3];
    HEAPF64[$0 + 320 >> 3] = $3 * HEAPF64[$0 + 192 >> 3] * HEAPF64[$2 + 128 >> 3] + HEAPF64[$0 + 320 >> 3];
    $6 = HEAPF64[$0 + 208 >> 3];
    HEAPF64[$0 + 328 >> 3] = $5 * ($3 * HEAPF64[$0 + 200 >> 3]) + HEAPF64[$0 + 328 >> 3];
    HEAPF64[$0 + 336 >> 3] = $4 * ($3 * $6) + HEAPF64[$0 + 336 >> 3];
   }
   if (!HEAP32[$1 + 480 >> 2]) {
    break label$1
   }
   $4 = HEAPF64[$2 + 112 >> 3];
   $5 = HEAPF64[$2 + 104 >> 3];
   HEAPF64[$1 + 288 >> 3] = HEAPF64[$1 + 224 >> 3] * ($3 * (HEAPF64[$2 + 96 >> 3] * HEAPF64[$1 + 256 >> 3])) + HEAPF64[$1 + 288 >> 3];
   HEAPF64[$1 + 296 >> 3] = $3 * ($5 * HEAPF64[$1 + 264 >> 3]) * HEAPF64[$1 + 232 >> 3] + HEAPF64[$1 + 296 >> 3];
   HEAPF64[$1 + 304 >> 3] = $3 * ($4 * HEAPF64[$1 + 272 >> 3]) * HEAPF64[$1 + 240 >> 3] + HEAPF64[$1 + 304 >> 3];
   $4 = HEAPF64[$2 + 176 >> 3];
   $5 = HEAPF64[$2 + 168 >> 3];
   HEAPF64[$1 + 320 >> 3] = $3 * HEAPF64[$1 + 192 >> 3] * HEAPF64[$2 + 160 >> 3] + HEAPF64[$1 + 320 >> 3];
   $6 = HEAPF64[$1 + 208 >> 3];
   HEAPF64[$1 + 328 >> 3] = $5 * ($3 * HEAPF64[$1 + 200 >> 3]) + HEAPF64[$1 + 328 >> 3];
   HEAPF64[$1 + 336 >> 3] = $4 * ($3 * $6) + HEAPF64[$1 + 336 >> 3];
  }
  return +$3;
 }
 
 function btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 25848;
  $1 = HEAP32[$0 + 204 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 208 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  $1 = $0 + 196 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 176 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 180 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 176 >> 2] = 0;
  HEAP8[$0 + 180 | 0] = 1;
  $1 = $0 + 168 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 156 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 160 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  $1 = $0 + 148 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 136 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 140 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 116 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 120 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1 = $0 + 108 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 96 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 100 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 76 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 80 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $1 = $0 + 68 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29($0));
 }
 
 function btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20btContactSolverInfo_20const__2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
  $12 = HEAP32[$0 + 68 >> 2];
  $17 = $12;
  label$1 : {
   if (($12 | 0) != HEAP32[$0 + 72 >> 2]) {
    break label$1
   }
   $17 = $12;
   $40 = $12 ? $12 << 1 : 1;
   if (($12 | 0) >= ($40 | 0)) {
    break label$1
   }
   if ($40) {
    $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($40, 288));
    $17 = HEAP32[$0 + 68 >> 2];
   } else {
    $17 = $12
   }
   $15 = $17;
   label$4 : {
    if (($15 | 0) <= 0) {
     break label$4
    }
    if (($15 | 0) != 1) {
     $25 = $15 & -2;
     $17 = 0;
     while (1) {
      memcpy(memcpy($13 + $17 | 0, HEAP32[$0 + 76 >> 2] + $17 | 0, 288) + 288 | 0, (HEAP32[$0 + 76 >> 2] + $17 | 0) + 288 | 0, 288);
      $17 = $17 + 576 | 0;
      $14 = $14 + 2 | 0;
      if (($25 | 0) != ($14 | 0)) {
       continue
      }
      break;
     };
    }
    if (!($15 & 1)) {
     break label$4
    }
    $15 = Math_imul($14, 288);
    memcpy($15 + $13 | 0, $15 + HEAP32[$0 + 76 >> 2] | 0, 288);
   }
   $15 = HEAP32[$0 + 76 >> 2];
   if (!(!$15 | !HEAPU8[$0 + 80 | 0])) {
    btAlignedFreeInternal_28void__29($15)
   }
   HEAP32[$0 + 76 >> 2] = $13;
   HEAP8[$0 + 80 | 0] = 1;
   HEAP32[$0 + 72 >> 2] = $40;
   $17 = HEAP32[$0 + 68 >> 2];
  }
  HEAP32[$0 + 68 >> 2] = $17 + 1;
  $12 = HEAP32[$0 + 76 >> 2] + Math_imul($12, 288) | 0;
  HEAP32[$12 + 276 >> 2] = $4;
  HEAP32[$12 + 284 >> 2] = $3;
  HEAP32[$12 + 280 >> 2] = $2;
  $41 = HEAPF64[$5 + 168 >> 3];
  HEAPF64[$12 + 208 >> 3] = $41;
  $17 = HEAP32[$0 + 16 >> 2];
  $13 = HEAP32[($17 + Math_imul($3, 488) | 0) + 480 >> 2];
  $14 = HEAP32[(Math_imul($2, 488) + $17 | 0) + 480 >> 2];
  $0 = $12 + 200 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$12 + 192 >> 2] = 0;
  HEAP32[$12 + 196 >> 2] = 0;
  HEAP32[$12 + 264 >> 2] = 0;
  $25 = $12 + 32 | 0;
  label$10 : {
   if ($14) {
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$25 + 4 >> 2] = $0;
    $15 = $1 + 24 | 0;
    $4 = HEAP32[$15 + 4 >> 2];
    $0 = $25 + 24 | 0;
    HEAP32[$0 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$0 + 4 >> 2] = $4;
    $15 = $1 + 16 | 0;
    $4 = HEAP32[$15 + 4 >> 2];
    $0 = $25 + 16 | 0;
    HEAP32[$0 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$0 + 4 >> 2] = $4;
    $15 = $1 + 8 | 0;
    $4 = HEAP32[$15 + 4 >> 2];
    $0 = $25 + 8 | 0;
    HEAP32[$0 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$0 + 4 >> 2] = $4;
    $19 = HEAPF64[$6 + 16 >> 3];
    $18 = HEAPF64[$6 >> 3];
    $16 = HEAPF64[$6 + 8 >> 3];
    HEAP32[$12 + 24 >> 2] = 0;
    HEAP32[$12 + 28 >> 2] = 0;
    $42 = HEAPF64[$12 + 40 >> 3];
    $43 = HEAPF64[$12 + 32 >> 3];
    $32 = $18 * $42 - $16 * $43;
    HEAPF64[$12 + 16 >> 3] = $32;
    $44 = HEAPF64[$12 + 48 >> 3];
    $33 = $19 * $43 - $18 * $44;
    HEAPF64[$12 + 8 >> 3] = $33;
    $34 = $16 * $44 - $42 * $19;
    HEAPF64[$12 >> 3] = $34;
    $35 = HEAPF64[$14 + 1120 >> 3];
    $36 = HEAPF64[$14 + 656 >> 3];
    $27 = HEAPF64[$14 + 640 >> 3];
    $20 = HEAPF64[$14 + 648 >> 3];
    $21 = HEAPF64[$14 + 1112 >> 3];
    $28 = HEAPF64[$14 + 624 >> 3];
    $22 = HEAPF64[$14 + 608 >> 3];
    $23 = HEAPF64[$14 + 616 >> 3];
    $24 = HEAPF64[$14 + 592 >> 3];
    $19 = HEAPF64[$14 + 584 >> 3];
    $18 = HEAPF64[$14 + 1104 >> 3];
    $16 = HEAPF64[$14 + 576 >> 3];
    $0 = $12 + 152 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $29 = $18 * ($24 * $32 + ($16 * $34 + $33 * $19));
    HEAPF64[$12 + 128 >> 3] = $29;
    $30 = $21 * ($28 * $32 + ($22 * $34 + $33 * $23));
    HEAPF64[$12 + 136 >> 3] = $30;
    $26 = $35 * ($36 * $32 + ($27 * $34 + $33 * $20));
    HEAPF64[$12 + 144 >> 3] = $26;
    break label$10;
   }
   HEAP32[$12 + 128 >> 2] = 0;
   HEAP32[$12 + 132 >> 2] = 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $0 = $12 + 152 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 144 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 136 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 8 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 16 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 24 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$25 >> 2] = 0;
   HEAP32[$25 + 4 >> 2] = 0;
   $0 = $12 + 40 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 48 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 56 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
  label$3 : {
   if ($13) {
    $22 = HEAPF64[$1 >> 3];
    $23 = HEAPF64[$1 + 8 >> 3];
    $24 = HEAPF64[$1 + 16 >> 3];
    $0 = $12 + 120 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $45 = -$24;
    HEAPF64[$12 + 112 >> 3] = $45;
    $46 = -$23;
    HEAPF64[$12 + 104 >> 3] = $46;
    $47 = -$22;
    HEAPF64[$12 + 96 >> 3] = $47;
    $19 = HEAPF64[$7 + 16 >> 3];
    $18 = HEAPF64[$7 + 8 >> 3];
    $16 = HEAPF64[$7 >> 3];
    $0 = $12 + 88 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $37 = $22 * $18 - $16 * $23;
    HEAPF64[$12 + 80 >> 3] = $37;
    $38 = $24 * $16 - $19 * $22;
    HEAPF64[$12 + 72 >> 3] = $38;
    $39 = $23 * $19 - $18 * $24;
    HEAPF64[$12 + 64 >> 3] = $39;
    $35 = HEAPF64[$13 + 592 >> 3];
    $36 = HEAPF64[$13 + 584 >> 3];
    $27 = HEAPF64[$13 + 1112 >> 3];
    $20 = HEAPF64[$13 + 624 >> 3];
    $21 = HEAPF64[$13 + 608 >> 3];
    $28 = HEAPF64[$13 + 616 >> 3];
    $22 = HEAPF64[$13 + 1120 >> 3];
    $23 = HEAPF64[$13 + 656 >> 3];
    $24 = HEAPF64[$13 + 640 >> 3];
    $19 = HEAPF64[$13 + 648 >> 3];
    $18 = HEAPF64[$13 + 1104 >> 3];
    $16 = HEAPF64[$13 + 576 >> 3];
    $0 = $12 + 184 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $31 = $22 * ($23 * $37 + ($24 * $39 + $38 * $19));
    HEAPF64[$12 + 176 >> 3] = $31;
    $20 = $27 * ($20 * $37 + ($21 * $39 + $38 * $28));
    HEAPF64[$12 + 168 >> 3] = $20;
    $21 = $18 * ($35 * $37 + ($16 * $39 + $38 * $36));
    HEAPF64[$12 + 160 >> 3] = $21;
    break label$3;
   }
   HEAP32[$12 + 160 >> 2] = 0;
   HEAP32[$12 + 164 >> 2] = 0;
   HEAP32[$12 + 64 >> 2] = 0;
   HEAP32[$12 + 68 >> 2] = 0;
   $0 = $12 + 184 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 176 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 168 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 72 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 80 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 88 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 96 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 104 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 112 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $12 + 120 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $20 = 0.0;
   $21 = 0.0;
  }
  $28 = 0.0;
  $36 = $8;
  if ($14) {
   $18 = HEAPF64[$6 + 8 >> 3];
   $16 = HEAPF64[$6 >> 3];
   $8 = HEAPF64[$6 + 16 >> 3];
   $27 = HEAPF64[$14 + 736 >> 3] + (HEAPF64[$1 + 16 >> 3] * ($29 * $18 - $16 * $30) + (HEAPF64[$1 >> 3] * ($30 * $8 - $18 * $26) + ($26 * $16 - $8 * $29) * HEAPF64[$1 + 8 >> 3]));
  } else {
   $27 = 0.0
  }
  if ($13) {
   $16 = HEAPF64[$7 >> 3];
   $8 = HEAPF64[$7 + 8 >> 3];
   $26 = HEAPF64[$1 + 16 >> 3] * ($20 * $16 - $21 * $8);
   $35 = $31 * $8;
   $8 = HEAPF64[$7 + 16 >> 3];
   $8 = HEAPF64[$13 + 736 >> 3] + ($26 + (HEAPF64[$1 >> 3] * ($35 - $20 * $8) + ($21 * $8 - $31 * $16) * HEAPF64[$1 + 8 >> 3]));
  } else {
   $8 = 0.0
  }
  $22 = $36 / ($27 + $8);
  HEAPF64[$12 + 216 >> 3] = $22;
  $23 = 0.0;
  $29 = 0.0;
  $30 = 0.0;
  $26 = 0.0;
  $31 = 0.0;
  $20 = 0.0;
  if ($14) {
   $0 = Math_imul($2, 488) + $17 | 0;
   $30 = HEAPF64[$0 + 352 >> 3] + HEAPF64[$0 + 416 >> 3];
   $26 = HEAPF64[$0 + 384 >> 3];
   $20 = HEAPF64[$0 + 400 >> 3];
   $29 = HEAPF64[$0 + 360 >> 3] + HEAPF64[$0 + 424 >> 3];
   $31 = HEAPF64[$0 + 392 >> 3];
   $23 = HEAPF64[$0 + 368 >> 3] + HEAPF64[$0 + 432 >> 3];
  }
  $21 = 0.0;
  $24 = 0.0;
  $19 = 0.0;
  $18 = 0.0;
  $16 = 0.0;
  if ($13) {
   $0 = Math_imul($3, 488) + $17 | 0;
   $28 = HEAPF64[$0 + 352 >> 3] + HEAPF64[$0 + 416 >> 3];
   $21 = HEAPF64[$0 + 360 >> 3] + HEAPF64[$0 + 424 >> 3];
   $19 = HEAPF64[$0 + 400 >> 3];
   $18 = HEAPF64[$0 + 392 >> 3];
   $24 = HEAPF64[$0 + 368 >> 3] + HEAPF64[$0 + 432 >> 3];
   $16 = HEAPF64[$0 + 384 >> 3];
  }
  $8 = HEAPU8[$5 + 220 | 0] & 16 ? $22 * (HEAPF64[$9 + 88 >> 3] * -((HEAPF64[$5 + 112 >> 3] - HEAPF64[$5 + 80 >> 3]) * HEAPF64[$1 + 16 >> 3] + ((HEAPF64[$5 + 96 >> 3] - HEAPF64[$5 + 64 >> 3]) * HEAPF64[$1 >> 3] + (HEAPF64[$5 + 104 >> 3] - HEAPF64[$5 + 72 >> 3]) * HEAPF64[$1 + 8 >> 3])) / HEAPF64[$9 + 24 >> 3]) : 0.0;
  HEAP32[$12 + 256 >> 2] = 0;
  HEAP32[$12 + 260 >> 2] = 0;
  HEAPF64[$12 + 248 >> 3] = $41;
  HEAPF64[$12 + 232 >> 3] = $11;
  HEAPF64[$12 + 240 >> 3] = -$41;
  HEAPF64[$12 + 224 >> 3] = $22 * ($10 - ($44 * $23 + ($43 * $30 + $29 * $42) + ($32 * $20 + ($34 * $26 + $31 * $33)) + ($45 * $24 + ($47 * $28 + $21 * $46) + ($37 * $19 + ($39 * $16 + $18 * $38))))) + $8;
 }
 
 function btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20double_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
  $6 = HEAP32[$0 + 88 >> 2];
  $7 = $6;
  label$1 : {
   if (($6 | 0) != HEAP32[$0 + 92 >> 2]) {
    break label$1
   }
   $7 = $6;
   $20 = $6 ? $6 << 1 : 1;
   if (($6 | 0) >= ($20 | 0)) {
    break label$1
   }
   if ($20) {
    $23 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($20, 288));
    $7 = HEAP32[$0 + 88 >> 2];
   } else {
    $7 = $6
   }
   $8 = $7;
   label$4 : {
    if (($8 | 0) <= 0) {
     break label$4
    }
    if (($8 | 0) != 1) {
     $26 = $8 & -2;
     $7 = 0;
     while (1) {
      memcpy(memcpy($7 + $23 | 0, HEAP32[$0 + 96 >> 2] + $7 | 0, 288) + 288 | 0, (HEAP32[$0 + 96 >> 2] + $7 | 0) + 288 | 0, 288);
      $7 = $7 + 576 | 0;
      $24 = $24 + 2 | 0;
      if (($26 | 0) != ($24 | 0)) {
       continue
      }
      break;
     };
    }
    if (!($8 & 1)) {
     break label$4
    }
    $8 = Math_imul($24, 288);
    memcpy($8 + $23 | 0, $8 + HEAP32[$0 + 96 >> 2] | 0, 288);
   }
   $8 = HEAP32[$0 + 96 >> 2];
   if (!(!$8 | !HEAPU8[$0 + 100 | 0])) {
    btAlignedFreeInternal_28void__29($8)
   }
   HEAP32[$0 + 96 >> 2] = $23;
   HEAP8[$0 + 100 | 0] = 1;
   HEAP32[$0 + 92 >> 2] = $20;
   $7 = HEAP32[$0 + 88 >> 2];
  }
  HEAP32[$0 + 88 >> 2] = $7 + 1;
  $6 = HEAP32[$0 + 96 >> 2] + Math_imul($6, 288) | 0;
  HEAP32[$6 + 276 >> 2] = $4;
  HEAP32[$6 + 96 >> 2] = 0;
  HEAP32[$6 + 100 >> 2] = -2147483648;
  HEAP32[$6 + 32 >> 2] = 0;
  HEAP32[$6 + 36 >> 2] = 0;
  $4 = $6 + 120 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $6 + 112 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = -2147483648;
  $4 = $6 + 104 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = -2147483648;
  $4 = $6 + 56 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $6 + 48 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $6 + 40 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAPF64[$6 + 208 >> 3] = $5;
  $4 = HEAP32[$0 + 16 >> 2];
  $7 = HEAP32[($4 + Math_imul($2, 488) | 0) + 480 >> 2];
  $8 = HEAP32[(Math_imul($3, 488) + $4 | 0) + 480 >> 2];
  HEAP32[$6 + 264 >> 2] = 0;
  HEAP32[$6 + 192 >> 2] = 0;
  HEAP32[$6 + 196 >> 2] = 0;
  $0 = $6 + 200 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$6 + 284 >> 2] = $3;
  HEAP32[$6 + 280 >> 2] = $2;
  $9 = HEAPF64[$1 + 16 >> 3];
  $17 = HEAPF64[$1 + 8 >> 3];
  $18 = HEAPF64[$1 >> 3];
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  $12 = -$18;
  HEAPF64[$6 >> 3] = $12;
  $13 = -$17;
  HEAPF64[$6 + 8 >> 3] = $13;
  $9 = -$9;
  HEAPF64[$6 + 16 >> 3] = $9;
  $17 = 0.0;
  $18 = 0.0;
  if ($7) {
   $18 = (HEAPF64[$7 + 656 >> 3] * $9 + (HEAPF64[$7 + 640 >> 3] * $12 + HEAPF64[$7 + 648 >> 3] * $13)) * HEAPF64[$7 + 1120 >> 3];
   $17 = (HEAPF64[$7 + 624 >> 3] * $9 + (HEAPF64[$7 + 608 >> 3] * $12 + HEAPF64[$7 + 616 >> 3] * $13)) * HEAPF64[$7 + 1112 >> 3];
   $10 = (HEAPF64[$7 + 592 >> 3] * $9 + (HEAPF64[$7 + 576 >> 3] * $12 + HEAPF64[$7 + 584 >> 3] * $13)) * HEAPF64[$7 + 1104 >> 3];
  } else {
   $10 = 0.0
  }
  HEAPF64[$6 + 128 >> 3] = $10;
  $0 = $6 + 152 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$6 + 144 >> 3] = $18;
  HEAPF64[$6 + 136 >> 3] = $17;
  $14 = HEAPF64[$1 >> 3];
  $15 = HEAPF64[$1 + 8 >> 3];
  $16 = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$6 + 88 >> 3] = HEAPF64[$1 + 24 >> 3];
  HEAPF64[$6 + 80 >> 3] = $16;
  HEAPF64[$6 + 72 >> 3] = $15;
  HEAPF64[$6 + 64 >> 3] = $14;
  if ($8) {
   $19 = (HEAPF64[$8 + 656 >> 3] * $16 + (HEAPF64[$8 + 640 >> 3] * $14 + $15 * HEAPF64[$8 + 648 >> 3])) * HEAPF64[$8 + 1120 >> 3];
   $11 = (HEAPF64[$8 + 624 >> 3] * $16 + (HEAPF64[$8 + 608 >> 3] * $14 + $15 * HEAPF64[$8 + 616 >> 3])) * HEAPF64[$8 + 1112 >> 3];
   $10 = (HEAPF64[$8 + 592 >> 3] * $16 + (HEAPF64[$8 + 576 >> 3] * $14 + $15 * HEAPF64[$8 + 584 >> 3])) * HEAPF64[$8 + 1104 >> 3];
  } else {
   $10 = 0.0
  }
  HEAPF64[$6 + 160 >> 3] = $10;
  $0 = $6 + 184 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$6 + 176 >> 3] = $19;
  HEAPF64[$6 + 168 >> 3] = $11;
  $11 = 0.0;
  $19 = 0.0;
  if ($7) {
   $11 = HEAPF64[$7 + 592 >> 3] * $9 + (HEAPF64[$7 + 576 >> 3] * $12 + HEAPF64[$7 + 584 >> 3] * $13);
   $19 = HEAPF64[$7 + 624 >> 3] * $9 + (HEAPF64[$7 + 608 >> 3] * $12 + HEAPF64[$7 + 616 >> 3] * $13);
   $10 = HEAPF64[$7 + 656 >> 3] * $9 + (HEAPF64[$7 + 640 >> 3] * $12 + HEAPF64[$7 + 648 >> 3] * $13);
  } else {
   $10 = $25
  }
  $10 = $10 * $9 + ($11 * $12 + $19 * $13) + 0.0;
  if ($8) {
   $21 = HEAPF64[$8 + 624 >> 3] * $16 + (HEAPF64[$8 + 608 >> 3] * $14 + $15 * HEAPF64[$8 + 616 >> 3]);
   $22 = HEAPF64[$8 + 592 >> 3] * $16 + (HEAPF64[$8 + 576 >> 3] * $14 + HEAPF64[$8 + 584 >> 3] * $15);
   $11 = HEAPF64[$8 + 656 >> 3] * $16 + (HEAPF64[$8 + 640 >> 3] * $14 + $15 * HEAPF64[$8 + 648 >> 3]);
  } else {
   $11 = 0.0
  }
  $18 = 1.0 / ($10 + ($11 * $16 + ($22 * $14 + $21 * $15)));
  HEAPF64[$6 + 216 >> 3] = $18;
  $22 = 0.0;
  $11 = 0.0;
  $19 = 0.0;
  $21 = 0.0;
  if ($7) {
   $0 = Math_imul($2, 488) + $4 | 0;
   $22 = HEAPF64[$0 + 352 >> 3] + HEAPF64[$0 + 416 >> 3];
   $25 = HEAPF64[$0 + 400 >> 3];
   $21 = HEAPF64[$0 + 392 >> 3];
   $11 = (HEAPF64[$0 + 360 >> 3] + HEAPF64[$0 + 424 >> 3]) * 0.0;
   $19 = HEAPF64[$0 + 368 >> 3] + HEAPF64[$0 + 432 >> 3];
   $27 = HEAPF64[$0 + 384 >> 3];
  }
  $17 = -0.0;
  if ($8) {
   $0 = Math_imul($3, 488) + $4 | 0;
   $28 = HEAPF64[$0 + 352 >> 3] + HEAPF64[$0 + 416 >> 3];
   $29 = HEAPF64[$0 + 368 >> 3] + HEAPF64[$0 + 432 >> 3];
   $30 = HEAPF64[$0 + 384 >> 3];
   $31 = HEAPF64[$0 + 400 >> 3];
   $32 = HEAPF64[$0 + 392 >> 3];
   $17 = (HEAPF64[$0 + 360 >> 3] + HEAPF64[$0 + 424 >> 3]) * -0.0;
  }
  HEAPF64[$6 + 248 >> 3] = $5;
  HEAPF64[$6 + 232 >> 3] = 0;
  HEAPF64[$6 + 240 >> 3] = -$5;
  HEAPF64[$6 + 224 >> 3] = $18 * (0.0 - ($19 * 0.0 + ($22 * 0.0 + $11) + ($9 * $25 + ($12 * $27 + $21 * $13)) + ($29 * -0.0 + ($28 * -0.0 + $17) + ($16 * $31 + ($14 * $30 + $15 * $32)))));
 }
 
 function btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
  $14 = __stack_pointer - 496 | 0;
  __stack_pointer = $14;
  $10 = HEAP32[$1 + 400 >> 2];
  label$1 : {
   if (($10 | 0) >= 0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 + 472 >> 2];
    if (!($3 & 2)) {
     break label$2
    }
    $3 = $3 << 30 >> 31 & $1;
    if (HEAPU8[$3 + 392 | 0] & 2 ? 0 : HEAPF64[$3 + 736 >> 3] == 0.0) {
     break label$2
    }
    $10 = HEAP32[$0 + 8 >> 2];
    $3 = $14 + 8 | 0;
    memset($3, 0, 488);
    $0 = btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0 + 4 | 0, $3);
    $3 = $1 ? HEAP32[$1 + 472 >> 2] << 30 >> 31 & $1 : 0;
    HEAP32[$0 + 128 >> 2] = 0;
    HEAP32[$0 + 132 >> 2] = 0;
    HEAP32[$0 + 288 >> 2] = 0;
    HEAP32[$0 + 292 >> 2] = 0;
    $4 = $0 + 184 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 176 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 168 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 160 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 152 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 144 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 136 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 296 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 304 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 312 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 320 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 328 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 336 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $0 + 344 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    label$3 : {
     if ($3) {
      $4 = HEAP32[$3 + 12 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$0 + 4 >> 2] = $4;
      $4 = $3 + 32 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 24 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 16 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 - -64 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 56 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 56 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 48 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 40 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      HEAP32[$0 + 32 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$0 + 36 >> 2] = $6;
      $4 = $3 + 96 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 88 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 88 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 80 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 80 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 72 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 72 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      HEAP32[$0 + 64 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$0 + 68 >> 2] = $6;
      $4 = $3 + 104 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      HEAP32[$0 + 96 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$0 + 100 >> 2] = $6;
      $4 = $3 + 112 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 104 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 128 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 120 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 120 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 112 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 752 | 0;
      $11 = HEAPF64[$4 >> 3];
      $6 = $3 + 760 | 0;
      $12 = HEAPF64[$6 >> 3];
      $13 = HEAPF64[$3 + 744 >> 3];
      $7 = HEAPF64[$3 + 736 >> 3];
      HEAP32[$0 + 480 >> 2] = $3;
      $5 = $0 + 280 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAPF64[$0 + 272 >> 3] = $7 * $12;
      HEAPF64[$0 + 264 >> 3] = $7 * $11;
      HEAPF64[$0 + 256 >> 3] = $7 * $13;
      $5 = $3 + 1128 | 0;
      $9 = HEAP32[$5 + 4 >> 2];
      $8 = $0 + 216 | 0;
      HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$8 + 4 >> 2] = $9;
      $5 = $3 + 1120 | 0;
      $9 = HEAP32[$5 + 4 >> 2];
      $8 = $0 + 208 | 0;
      HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$8 + 4 >> 2] = $9;
      $5 = $3 + 1112 | 0;
      $9 = HEAP32[$5 + 4 >> 2];
      $8 = $0 + 200 | 0;
      HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$8 + 4 >> 2] = $9;
      $5 = HEAP32[$3 + 1108 >> 2];
      HEAP32[$0 + 192 >> 2] = HEAP32[$3 + 1104 >> 2];
      HEAP32[$0 + 196 >> 2] = $5;
      $5 = $3 + 768 | 0;
      $9 = HEAP32[$5 + 4 >> 2];
      $8 = $0 + 248 | 0;
      HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$8 + 4 >> 2] = $9;
      $5 = HEAP32[$6 + 4 >> 2];
      $9 = $0 + 240 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $5;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 232 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = HEAP32[$3 + 748 >> 2];
      HEAP32[$0 + 224 >> 2] = HEAP32[$3 + 744 >> 2];
      HEAP32[$0 + 228 >> 2] = $4;
      $4 = $3 + 696 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 376 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 688 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 368 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 680 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 360 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = HEAP32[$3 + 676 >> 2];
      HEAP32[$0 + 352 >> 2] = HEAP32[$3 + 672 >> 2];
      HEAP32[$0 + 356 >> 2] = $4;
      $4 = $3 + 728 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 408 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 720 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 400 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = $3 + 712 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $5 = $0 + 392 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $4 = HEAP32[$3 + 708 >> 2];
      HEAP32[$0 + 384 >> 2] = HEAP32[$3 + 704 >> 2];
      HEAP32[$0 + 388 >> 2] = $4;
      $11 = HEAPF64[$3 + 880 >> 3];
      $12 = HEAPF64[$3 + 888 >> 3];
      $13 = HEAPF64[$3 + 872 >> 3];
      $7 = HEAPF64[$3 + 736 >> 3];
      $4 = $0 + 440 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAPF64[$0 + 432 >> 3] = $7 * $12 * $2;
      HEAPF64[$0 + 424 >> 3] = $7 * $11 * $2;
      HEAPF64[$0 + 416 >> 3] = $7 * $13 * $2;
      $13 = HEAPF64[$3 + 608 >> 3];
      $15 = HEAPF64[$3 + 640 >> 3];
      $16 = HEAPF64[$3 + 584 >> 3];
      $17 = HEAPF64[$3 + 616 >> 3];
      $18 = HEAPF64[$3 + 648 >> 3];
      $19 = HEAPF64[$3 + 576 >> 3];
      $7 = HEAPF64[$3 + 920 >> 3];
      $11 = HEAPF64[$3 + 904 >> 3];
      $12 = HEAPF64[$3 + 912 >> 3];
      HEAPF64[$0 + 464 >> 3] = (HEAPF64[$3 + 656 >> 3] * $7 + (HEAPF64[$3 + 592 >> 3] * $11 + $12 * HEAPF64[$3 + 624 >> 3])) * $2;
      HEAPF64[$0 + 456 >> 3] = ($18 * $7 + ($16 * $11 + $12 * $17)) * $2;
      HEAPF64[$0 + 448 >> 3] = ($15 * $7 + ($19 * $11 + $13 * $12)) * $2;
      break label$3;
     }
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 + 12 >> 2] = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 1072693248;
     HEAP32[$0 + 480 >> 2] = 0;
     HEAP32[$0 + 256 >> 2] = 0;
     HEAP32[$0 + 260 >> 2] = 0;
     $3 = $0 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 32 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 48 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 40 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     $3 = $0 + 56 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 - -64 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 72 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 88 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 80 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     $3 = $0 + 96 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 104 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 112 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 120 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 280 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 272 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 264 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 248 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 240 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     $3 = $0 + 232 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     HEAP32[$0 + 224 >> 2] = 0;
     HEAP32[$0 + 228 >> 2] = 1072693248;
     $3 = $0 + 216 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 208 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     $3 = $0 + 200 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     HEAP32[$0 + 192 >> 2] = 0;
     HEAP32[$0 + 196 >> 2] = 1072693248;
     memset($0 + 352 | 0, 0, 120);
    }
    $0 = $0 + 472 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$1 + 400 >> 2] = $10;
    break label$1;
   }
   $10 = HEAP32[$0 + 188 >> 2];
   if (($10 | 0) >= 0) {
    break label$1
   }
   HEAP32[$0 + 188 >> 2] = HEAP32[$0 + 8 >> 2];
   $1 = $14 + 8 | 0;
   memset($1, 0, 488);
   $1 = btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0 + 4 | 0, $1);
   $3 = $1 + 184 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 176 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 168 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 160 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 152 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 144 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 136 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 128 >> 2] = 0;
   HEAP32[$1 + 132 >> 2] = 0;
   HEAP32[$1 + 288 >> 2] = 0;
   HEAP32[$1 + 292 >> 2] = 0;
   $3 = $1 + 296 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 304 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 312 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 320 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 328 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 336 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 344 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 1072693248;
   $3 = $1 + 16 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 24 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 32 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 48 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 40 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   $3 = $1 + 56 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 - -64 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 72 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 88 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 80 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   $3 = $1 + 96 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 104 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 112 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 120 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 480 >> 2] = 0;
   $3 = $1 + 280 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 272 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 264 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 256 >> 2] = 0;
   HEAP32[$1 + 260 >> 2] = 0;
   HEAP32[$1 + 192 >> 2] = 0;
   HEAP32[$1 + 196 >> 2] = 1072693248;
   $3 = $1 + 200 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   $3 = $1 + 208 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   $3 = $1 + 216 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 224 >> 2] = 0;
   HEAP32[$1 + 228 >> 2] = 1072693248;
   $3 = $1 + 232 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   $3 = $1 + 240 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   $3 = $1 + 248 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   memset($1 + 352 | 0, 0, 128);
   $10 = HEAP32[$0 + 188 >> 2];
  }
  __stack_pointer = $14 + 496 | 0;
  return $10;
 }
 
 function btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $6 = HEAP32[$0 + 4 >> 2];
  $11 = $6;
  label$1 : {
   if (($6 | 0) != HEAP32[$0 + 8 >> 2]) {
    break label$1
   }
   $11 = $6;
   $12 = $6 ? $6 << 1 : 1;
   if (($12 | 0) <= ($6 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$12) {
     $11 = $6;
     break label$2;
    }
    $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($12, 488));
    $11 = HEAP32[$0 + 4 >> 2];
   }
   if (($11 | 0) > 0) {
    $2 = 128;
    while (1) {
     $7 = HEAP32[$0 + 12 >> 2] + $2 | 0;
     $8 = $7 - 128 | 0;
     $3 = HEAP32[$8 + 4 >> 2];
     $4 = $2 + $13 | 0;
     $9 = $4 - 128 | 0;
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$9 + 4 >> 2] = $3;
     $5 = $8 + 24 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $5 = $8 + 16 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 16 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $8 = $8 + 8 | 0;
     $3 = HEAP32[$8 + 4 >> 2];
     $9 = $9 + 8 | 0;
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$9 + 4 >> 2] = $3;
     $8 = $7 - 96 | 0;
     $5 = $8 + 24 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $9 = $4 - 96 | 0;
     $3 = $9 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $5 = $8 + 16 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 16 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $5 = $8 + 8 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 8 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $3 = HEAP32[$8 + 4 >> 2];
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$9 + 4 >> 2] = $3;
     $8 = $7 + -64 | 0;
     $5 = $8 + 24 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $9 = $4 + -64 | 0;
     $3 = $9 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $5 = $8 + 16 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 16 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $5 = $8 + 8 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 8 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $3 = HEAP32[$8 + 4 >> 2];
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$9 + 4 >> 2] = $3;
     $8 = $7 - 32 | 0;
     $5 = $8 + 24 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $9 = $4 - 32 | 0;
     $3 = $9 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $5 = $8 + 16 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 16 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $5 = $8 + 8 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $3 = $9 + 8 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $10;
     $3 = HEAP32[$8 + 4 >> 2];
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$9 + 4 >> 2] = $3;
     memcpy($4, $7, 356);
     $2 = $2 + 488 | 0;
     $11 = $11 - 1 | 0;
     if ($11) {
      continue
     }
     break;
    };
   }
   $11 = HEAP32[$0 + 12 >> 2];
   if (!(!$11 | !HEAPU8[$0 + 16 | 0])) {
    btAlignedFreeInternal_28void__29($11)
   }
   HEAP32[$0 + 12 >> 2] = $13;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $12;
   $11 = HEAP32[$0 + 4 >> 2];
  }
  HEAP32[$0 + 4 >> 2] = $11 + 1;
  $4 = $1 + 24 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $11 = Math_imul($6, 488);
  $6 = $11 + HEAP32[$0 + 12 >> 2] | 0;
  $2 = $6 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 16 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 8 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $4 = $1 + 56 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 56 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 48 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 40 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 40 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $2 = HEAP32[$1 + 36 >> 2];
  HEAP32[$6 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$6 + 36 >> 2] = $2;
  $2 = HEAP32[$1 + 68 >> 2];
  HEAP32[$6 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$6 + 68 >> 2] = $2;
  $4 = $1 + 72 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 72 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 80 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 80 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 88 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 88 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $2 = HEAP32[$1 + 100 >> 2];
  HEAP32[$6 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$6 + 100 >> 2] = $2;
  $4 = $1 + 104 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 104 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 112 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $4 = $1 + 120 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $2 = $6 + 120 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  memcpy($6 + 128 | 0, $1 + 128 | 0, 356);
  return $11 + HEAP32[$0 + 12 >> 2] | 0;
 }
 
 function btSequentialImpulseConstraintSolver__convertContacts_28btPersistentManifold___2c_20int_2c_20btContactSolverInfo_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $110 = 0.0, $111 = 0.0;
  if (($2 | 0) > 0) {
   while (1) {
    $45 = 0;
    $21 = __stack_pointer - 144 | 0;
    __stack_pointer = $21;
    $41 = HEAP32[$1 >> 2];
    $15 = HEAP32[$41 + 1452 >> 2];
    $16 = HEAP32[$41 + 1448 >> 2];
    $34 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, $16, HEAPF64[$3 + 24 >> 3]);
    $35 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, $15, HEAPF64[$3 + 24 >> 3]);
    $22 = HEAP32[$0 + 16 >> 2];
    $9 = $22 + Math_imul($34, 488) | 0;
    $4 = HEAPF64[$9 + 272 >> 3];
    $8 = $4 * $4;
    $4 = HEAPF64[$9 + 256 >> 3];
    $5 = $4 * $4;
    $4 = HEAPF64[$9 + 264 >> 3];
    label$1 : {
     if ($8 + ($5 + $4 * $4) < 4.930380657631324e-32) {
      $9 = $22 + Math_imul($35, 488) | 0;
      $4 = HEAPF64[$9 + 272 >> 3];
      $8 = $4 * $4;
      $4 = HEAPF64[$9 + 256 >> 3];
      $5 = $4 * $4;
      $4 = HEAPF64[$9 + 264 >> 3];
      if ($8 + ($5 + $4 * $4) < 4.930380657631324e-32) {
       break label$1
      }
     }
     $10 = HEAP32[$41 + 1456 >> 2];
     if (($10 | 0) <= 0) {
      break label$1
     }
     $9 = $22 + Math_imul($35, 488) | 0;
     $54 = $9 + 464 | 0;
     $55 = $9 + 400 | 0;
     $56 = $9 + 456 | 0;
     $57 = $9 + 392 | 0;
     $58 = $9 + 448 | 0;
     $59 = $9 + 384 | 0;
     $60 = $9 + 432 | 0;
     $61 = $9 + 368 | 0;
     $62 = $9 + 424 | 0;
     $63 = $9 + 360 | 0;
     $64 = $9 + 416 | 0;
     $65 = $9 + 352 | 0;
     $66 = $9 + 480 | 0;
     $9 = $22 + Math_imul($34, 488) | 0;
     $67 = $9 + 464 | 0;
     $68 = $9 + 400 | 0;
     $69 = $9 + 456 | 0;
     $70 = $9 + 392 | 0;
     $71 = $9 + 448 | 0;
     $72 = $9 + 384 | 0;
     $73 = $9 + 432 | 0;
     $74 = $9 + 368 | 0;
     $75 = $9 + 424 | 0;
     $76 = $9 + 360 | 0;
     $77 = $9 + 416 | 0;
     $78 = $9 + 352 | 0;
     $79 = $9 + 480 | 0;
     while (1) {
      $25 = Math_imul($45, 360) + $41 | 0;
      if (HEAPF64[$25 + 168 >> 3] <= HEAPF64[$41 + 1472 >> 3]) {
       $22 = $25 + 8 | 0;
       $9 = HEAP32[$0 + 28 >> 2];
       $10 = $9;
       label$5 : {
        if (($9 | 0) != HEAP32[$0 + 32 >> 2]) {
         break label$5
        }
        $10 = $9;
        $17 = $9 ? $9 << 1 : 1;
        if (($17 | 0) <= ($9 | 0)) {
         break label$5
        }
        label$6 : {
         if (!$17) {
          $6 = 0;
          $20 = $9;
          break label$6;
         }
         $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($17, 288));
         $20 = HEAP32[$0 + 28 >> 2];
        }
        label$8 : {
         if (($20 | 0) <= 0) {
          break label$8
         }
         $24 = 0;
         if (($20 | 0) != 1) {
          $32 = $20 & -2;
          $10 = 0;
          while (1) {
           memcpy(memcpy($6 + $10 | 0, HEAP32[$0 + 36 >> 2] + $10 | 0, 288) + 288 | 0, (HEAP32[$0 + 36 >> 2] + $10 | 0) + 288 | 0, 288);
           $10 = $10 + 576 | 0;
           $24 = $24 + 2 | 0;
           if (($32 | 0) != ($24 | 0)) {
            continue
           }
           break;
          };
         }
         if (!($20 & 1)) {
          break label$8
         }
         $10 = Math_imul($24, 288);
         memcpy($10 + $6 | 0, $10 + HEAP32[$0 + 36 >> 2] | 0, 288);
        }
        $10 = HEAP32[$0 + 36 >> 2];
        if (!(!$10 | !HEAPU8[$0 + 40 | 0])) {
         btAlignedFreeInternal_28void__29($10)
        }
        HEAP32[$0 + 36 >> 2] = $6;
        HEAP8[$0 + 40 | 0] = 1;
        HEAP32[$0 + 32 >> 2] = $17;
        $10 = HEAP32[$0 + 28 >> 2];
       }
       HEAP32[$0 + 28 >> 2] = $10 + 1;
       $10 = HEAP32[$0 + 36 >> 2] + Math_imul($9, 288) | 0;
       HEAP32[$10 + 264 >> 2] = $22;
       HEAP32[$10 + 284 >> 2] = $35;
       HEAP32[$10 + 280 >> 2] = $34;
       HEAP32[$21 + 136 >> 2] = 0;
       HEAP32[$21 + 140 >> 2] = 0;
       $4 = HEAPF64[$25 + 120 >> 3] - HEAPF64[$16 + 120 >> 3];
       HEAPF64[$21 + 128 >> 3] = $4;
       $5 = HEAPF64[$25 + 112 >> 3] - HEAPF64[$16 + 112 >> 3];
       HEAPF64[$21 + 120 >> 3] = $5;
       $7 = HEAPF64[$25 + 104 >> 3] - HEAPF64[$16 + 104 >> 3];
       HEAPF64[$21 + 112 >> 3] = $7;
       $8 = HEAPF64[$25 + 72 >> 3];
       $12 = HEAPF64[$25 + 80 >> 3];
       $11 = HEAPF64[$25 + 88 >> 3];
       $14 = HEAPF64[$15 + 104 >> 3];
       $18 = HEAPF64[$15 + 112 >> 3];
       $13 = HEAPF64[$15 + 120 >> 3];
       HEAP32[$21 + 104 >> 2] = 0;
       HEAP32[$21 + 108 >> 2] = 0;
       $11 = $11 - $13;
       HEAPF64[$21 + 96 >> 3] = $11;
       $12 = $12 - $18;
       HEAPF64[$21 + 88 >> 3] = $12;
       $8 = $8 - $14;
       HEAPF64[$21 + 80 >> 3] = $8;
       $36 = 0.0;
       $42 = 0.0;
       $48 = 0.0;
       $49 = 0.0;
       if (HEAP32[$79 >> 2]) {
        $14 = HEAPF64[$72 >> 3] + HEAPF64[$71 >> 3];
        $18 = HEAPF64[$70 >> 3] + HEAPF64[$69 >> 3];
        $49 = HEAPF64[$74 >> 3] + HEAPF64[$73 >> 3] + ($14 * $5 - $7 * $18);
        $13 = HEAPF64[$68 >> 3] + HEAPF64[$67 >> 3];
        $48 = HEAPF64[$76 >> 3] + HEAPF64[$75 >> 3] + ($13 * $7 - $4 * $14);
        $42 = HEAPF64[$78 >> 3] + HEAPF64[$77 >> 3] + ($18 * $4 - $5 * $13);
       }
       $50 = 0.0;
       $51 = 0.0;
       if (HEAP32[$66 >> 2]) {
        $4 = HEAPF64[$59 >> 3] + HEAPF64[$58 >> 3];
        $5 = HEAPF64[$57 >> 3] + HEAPF64[$56 >> 3];
        $51 = HEAPF64[$61 >> 3] + HEAPF64[$60 >> 3] + ($4 * $12 - $8 * $5);
        $7 = HEAPF64[$55 >> 3] + HEAPF64[$54 >> 3];
        $50 = HEAPF64[$63 >> 3] + HEAPF64[$62 >> 3] + ($7 * $8 - $11 * $4);
        $36 = HEAPF64[$65 >> 3] + HEAPF64[$64 >> 3] + ($5 * $11 - $12 * $7);
       }
       $46 = $25 + 152 | 0;
       $80 = HEAPF64[$46 >> 3];
       $38 = $25 + 136 | 0;
       $81 = HEAPF64[$38 >> 3];
       $40 = $25 + 144 | 0;
       $82 = HEAPF64[$40 >> 3];
       $20 = $21 + 112 | 0;
       $14 = 0.0;
       $19 = $21 + 72 | 0;
       HEAPF64[$19 >> 3] = HEAPF64[$3 + 56 >> 3];
       $32 = HEAP32[$0 + 16 >> 2];
       $52 = $32 + Math_imul($35, 488) | 0;
       $53 = Math_imul($34, 488) + $32 | 0;
       $6 = HEAP32[$53 + 480 >> 2];
       $37 = HEAPF64[$3 + 24 >> 3];
       $29 = HEAPF64[$3 + 72 >> 3];
       $11 = HEAPF64[$3 + 80 >> 3];
       $17 = HEAP32[$22 + 220 >> 2];
       label$11 : {
        if ($17 & 6) {
         $11 = $17 & 2 ? HEAPF64[$22 + 264 >> 3] : $11;
         if (!($17 & 4)) {
          break label$11
         }
         $29 = HEAPF64[$22 + 272 >> 3];
         break label$11;
        }
        if (!($17 & 8)) {
         break label$11
        }
        $5 = $37 * HEAPF64[$22 + 264 >> 3];
        $4 = Math_max($5 + HEAPF64[$22 + 272 >> 3], 2.220446049250313e-16);
        $29 = $5 / $4;
        $11 = 1.0 / $4;
       }
       $4 = HEAPF64[$20 >> 3];
       $5 = HEAPF64[$22 + 136 >> 3];
       $7 = HEAPF64[$22 + 128 >> 3];
       $12 = HEAPF64[$20 + 8 >> 3];
       $13 = $4 * $5 - $7 * $12;
       $8 = HEAPF64[$20 + 16 >> 3];
       $23 = $8 * $7;
       $7 = HEAPF64[$22 + 144 >> 3];
       $23 = $23 - $7 * $4;
       $26 = $12 * $7 - $5 * $8;
       $12 = 0.0;
       $8 = 0.0;
       $4 = 0.0;
       if ($6) {
        $14 = (HEAPF64[$6 + 624 >> 3] * $13 + (HEAPF64[$6 + 608 >> 3] * $26 + $23 * HEAPF64[$6 + 616 >> 3])) * HEAPF64[$6 + 1112 >> 3];
        $8 = (HEAPF64[$6 + 592 >> 3] * $13 + (HEAPF64[$6 + 576 >> 3] * $26 + $23 * HEAPF64[$6 + 584 >> 3])) * HEAPF64[$6 + 1104 >> 3];
        $4 = (HEAPF64[$6 + 656 >> 3] * $13 + (HEAPF64[$6 + 640 >> 3] * $26 + $23 * HEAPF64[$6 + 648 >> 3])) * HEAPF64[$6 + 1120 >> 3];
       }
       $17 = HEAP32[$52 + 480 >> 2];
       HEAPF64[$10 + 128 >> 3] = $8;
       $24 = $10 + 152 | 0;
       HEAP32[$24 >> 2] = 0;
       HEAP32[$24 + 4 >> 2] = 0;
       HEAPF64[$10 + 144 >> 3] = $4;
       HEAPF64[$10 + 136 >> 3] = $14;
       $24 = $21 + 80 | 0;
       $5 = HEAPF64[$24 >> 3];
       $7 = HEAPF64[$22 + 136 >> 3];
       $18 = HEAPF64[$22 + 128 >> 3];
       $33 = HEAPF64[$24 + 8 >> 3];
       $27 = $5 * $7 - $18 * $33;
       $28 = HEAPF64[$24 + 16 >> 3];
       $31 = $28 * $18;
       $18 = HEAPF64[$22 + 144 >> 3];
       $30 = $31 - $18 * $5;
       $33 = $33 * $18 - $7 * $28;
       $5 = 0.0;
       $7 = 0.0;
       if ($17) {
        $12 = -$33;
        $7 = (HEAPF64[$17 + 640 >> 3] * $12 - HEAPF64[$17 + 648 >> 3] * $30 - HEAPF64[$17 + 656 >> 3] * $27) * HEAPF64[$17 + 1120 >> 3];
        $5 = (HEAPF64[$17 + 608 >> 3] * $12 - HEAPF64[$17 + 616 >> 3] * $30 - HEAPF64[$17 + 624 >> 3] * $27) * HEAPF64[$17 + 1112 >> 3];
        $12 = (HEAPF64[$17 + 576 >> 3] * $12 - HEAPF64[$17 + 584 >> 3] * $30 - HEAPF64[$17 + 592 >> 3] * $27) * HEAPF64[$17 + 1104 >> 3];
       }
       HEAPF64[$10 + 160 >> 3] = $12;
       $39 = $10 + 184 | 0;
       HEAP32[$39 >> 2] = 0;
       HEAP32[$39 + 4 >> 2] = 0;
       HEAPF64[$10 + 176 >> 3] = $7;
       HEAPF64[$10 + 168 >> 3] = $5;
       $18 = 0.0;
       if ($6) {
        $18 = HEAPF64[$20 + 8 >> 3];
        $28 = HEAPF64[$20 >> 3];
        $47 = HEAPF64[$22 + 144 >> 3] * ($8 * $18 - $28 * $14);
        $31 = $14;
        $14 = HEAPF64[$20 + 16 >> 3];
        $18 = HEAPF64[$6 + 736 >> 3] + ($47 + (HEAPF64[$22 + 128 >> 3] * ($31 * $14 - $18 * $4) + ($4 * $28 - $14 * $8) * HEAPF64[$22 + 136 >> 3]));
       }
       $14 = HEAPF64[$19 >> 3];
       $37 = 1.0 / $37;
       $28 = $37 * $11;
       if ($17) {
        $4 = HEAPF64[$24 >> 3];
        $11 = HEAPF64[$24 + 8 >> 3];
        $31 = HEAPF64[$22 + 144 >> 3] * ($5 * $4 - $12 * $11);
        $8 = $5;
        $5 = HEAPF64[$24 + 16 >> 3];
        $8 = HEAPF64[$17 + 736 >> 3] + ($31 + (HEAPF64[$22 + 128 >> 3] * ($7 * $11 - $8 * $5) + ($12 * $5 - $7 * $4) * HEAPF64[$22 + 136 >> 3]));
       } else {
        $8 = 0.0
       }
       HEAPF64[$10 + 216 >> 3] = $14 / ($28 + ($18 + $8));
       label$7 : {
        if ($6) {
         $19 = $22 + 128 | 0;
         $39 = HEAP32[$19 + 4 >> 2];
         HEAP32[$10 + 32 >> 2] = HEAP32[$19 >> 2];
         HEAP32[$10 + 36 >> 2] = $39;
         $39 = $19 + 24 | 0;
         $43 = HEAP32[$39 + 4 >> 2];
         $44 = $10 + 56 | 0;
         HEAP32[$44 >> 2] = HEAP32[$39 >> 2];
         HEAP32[$44 + 4 >> 2] = $43;
         $39 = $19 + 16 | 0;
         $43 = HEAP32[$39 + 4 >> 2];
         $44 = $10 + 48 | 0;
         HEAP32[$44 >> 2] = HEAP32[$39 >> 2];
         HEAP32[$44 + 4 >> 2] = $43;
         $19 = $19 + 8 | 0;
         $39 = HEAP32[$19 + 4 >> 2];
         $43 = $10 + 40 | 0;
         HEAP32[$43 >> 2] = HEAP32[$19 >> 2];
         HEAP32[$43 + 4 >> 2] = $39;
         HEAP32[$10 + 24 >> 2] = 0;
         HEAP32[$10 + 28 >> 2] = 0;
         HEAPF64[$10 + 16 >> 3] = $13;
         HEAPF64[$10 + 8 >> 3] = $23;
         HEAPF64[$10 >> 3] = $26;
         break label$7;
        }
        HEAP32[$10 >> 2] = 0;
        HEAP32[$10 + 4 >> 2] = 0;
        $19 = $10 + 56 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 48 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 40 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 32 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 24 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 16 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 8 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
       }
       label$9 : {
        if ($17) {
         $4 = HEAPF64[$22 + 128 >> 3];
         $5 = HEAPF64[$22 + 136 >> 3];
         $7 = HEAPF64[$22 + 144 >> 3];
         $19 = $10 + 120 | 0;
         HEAP32[$19 >> 2] = 0;
         HEAP32[$19 + 4 >> 2] = 0;
         $19 = $10 + 88 | 0;
         HEAP32[$19 >> 2] = 0;
         HEAP32[$19 + 4 >> 2] = 0;
         HEAPF64[$10 + 80 >> 3] = -$27;
         HEAPF64[$10 + 72 >> 3] = -$30;
         HEAPF64[$10 + 64 >> 3] = -$33;
         HEAPF64[$10 + 112 >> 3] = -$7;
         HEAPF64[$10 + 104 >> 3] = -$5;
         HEAPF64[$10 + 96 >> 3] = -$4;
         break label$9;
        }
        HEAP32[$10 + 64 >> 2] = 0;
        HEAP32[$10 + 68 >> 2] = 0;
        $19 = $10 + 120 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 112 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 104 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 96 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 88 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 80 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
        $19 = $10 + 72 | 0;
        HEAP32[$19 >> 2] = 0;
        HEAP32[$19 + 4 >> 2] = 0;
       }
       $12 = 0.0;
       $8 = 0.0;
       $4 = 0.0;
       $5 = 0.0;
       if ($6) {
        $4 = HEAPF64[$6 + 704 >> 3];
        $7 = HEAPF64[$20 + 8 >> 3];
        $11 = HEAPF64[$20 >> 3];
        $8 = HEAPF64[$6 + 712 >> 3];
        $5 = $4 * $7 - $11 * $8 + HEAPF64[$6 + 688 >> 3];
        $14 = HEAPF64[$6 + 720 >> 3];
        $13 = $14 * $11;
        $11 = HEAPF64[$20 + 16 >> 3];
        $4 = $13 - $11 * $4 + HEAPF64[$6 + 680 >> 3];
        $8 = $8 * $11 - $7 * $14 + HEAPF64[$6 + 672 >> 3];
       }
       $7 = 0.0;
       $14 = 0.0;
       if ($17) {
        $7 = HEAPF64[$17 + 704 >> 3];
        $11 = HEAPF64[$24 + 8 >> 3];
        $12 = HEAPF64[$24 >> 3];
        $18 = HEAPF64[$17 + 712 >> 3];
        $14 = $7 * $11 - $12 * $18 + HEAPF64[$17 + 688 >> 3];
        $13 = HEAPF64[$17 + 720 >> 3];
        $23 = $13 * $12;
        $12 = HEAPF64[$24 + 16 >> 3];
        $7 = $23 - $12 * $7 + HEAPF64[$17 + 680 >> 3];
        $12 = $18 * $12 - $11 * $13 + HEAPF64[$17 + 672 >> 3];
       }
       $47 = HEAPF64[$3 + 128 >> 3];
       $83 = HEAPF64[$22 + 160 >> 3];
       $24 = $52 + 480 | 0;
       $19 = $53 + 480 | 0;
       $11 = HEAPF64[$22 + 144 >> 3];
       $18 = HEAPF64[$22 + 128 >> 3];
       $13 = HEAPF64[$22 + 136 >> 3];
       HEAPF64[$10 + 208 >> 3] = HEAPF64[$22 + 168 >> 3];
       $31 = $11 * ($5 - $14) + ($18 * ($8 - $12) + $13 * ($4 - $7));
       $84 = Math_abs($31);
       $85 = HEAPF64[$3 + 184 >> 3];
       $86 = HEAPF64[$22 + 192 >> 3];
       label$13 : {
        if (HEAPU8[$3 + 144 | 0] & 4) {
         $4 = HEAPF64[$22 + 224 >> 3] * HEAPF64[$3 + 136 >> 3];
         HEAPF64[$10 + 200 >> 3] = $4;
         if (!(!$6 | !HEAP32[$19 >> 2])) {
          $5 = HEAPF64[$6 + 760 >> 3];
          $7 = HEAPF64[$10 + 48 >> 3];
          $11 = HEAPF64[$6 + 752 >> 3];
          $12 = HEAPF64[$10 + 40 >> 3];
          $20 = Math_imul($34, 488) + $32 | 0;
          HEAPF64[$20 + 128 >> 3] = HEAPF64[$20 + 224 >> 3] * ($4 * (HEAPF64[$10 + 32 >> 3] * HEAPF64[$20 + 256 >> 3] * HEAPF64[$6 + 744 >> 3])) + HEAPF64[$20 + 128 >> 3];
          $6 = $20 + 136 | 0;
          HEAPF64[$6 >> 3] = $4 * ($11 * ($12 * HEAPF64[$20 + 264 >> 3])) * HEAPF64[$20 + 232 >> 3] + HEAPF64[$6 >> 3];
          $6 = $20 + 144 | 0;
          HEAPF64[$6 >> 3] = $4 * ($5 * ($7 * HEAPF64[$20 + 272 >> 3])) * HEAPF64[$20 + 240 >> 3] + HEAPF64[$6 >> 3];
          $5 = HEAPF64[$10 + 144 >> 3];
          $7 = HEAPF64[$10 + 136 >> 3];
          HEAPF64[$20 + 160 >> 3] = $4 * HEAPF64[$20 + 192 >> 3] * HEAPF64[$10 + 128 >> 3] + HEAPF64[$20 + 160 >> 3];
          $11 = HEAPF64[$20 + 208 >> 3];
          $6 = $20 + 168 | 0;
          HEAPF64[$6 >> 3] = $7 * ($4 * HEAPF64[$20 + 200 >> 3]) + HEAPF64[$6 >> 3];
          $6 = $20 + 176 | 0;
          HEAPF64[$6 >> 3] = $5 * ($4 * $11) + HEAPF64[$6 >> 3];
         }
         if (!$17 | !HEAP32[$24 >> 2]) {
          break label$13
         }
         $5 = HEAPF64[$17 + 760 >> 3];
         $7 = HEAPF64[$10 + 112 >> 3];
         $11 = HEAPF64[$17 + 752 >> 3];
         $12 = HEAPF64[$10 + 104 >> 3];
         $8 = HEAPF64[$10 + 176 >> 3];
         $14 = HEAPF64[$10 + 168 >> 3];
         $18 = HEAPF64[$10 + 160 >> 3];
         $6 = Math_imul($35, 488) + $32 | 0;
         $4 = -HEAPF64[$10 + 200 >> 3];
         HEAPF64[$6 + 128 >> 3] = HEAPF64[$6 + 128 >> 3] - HEAPF64[$6 + 224 >> 3] * (HEAPF64[$6 + 256 >> 3] * HEAPF64[$10 + 96 >> 3] * HEAPF64[$17 + 744 >> 3] * $4);
         $17 = $6 + 136 | 0;
         HEAPF64[$17 >> 3] = HEAPF64[$17 >> 3] - $11 * ($12 * HEAPF64[$6 + 264 >> 3]) * $4 * HEAPF64[$6 + 232 >> 3];
         $17 = $6 + 144 | 0;
         HEAPF64[$17 >> 3] = HEAPF64[$17 >> 3] - $5 * ($7 * HEAPF64[$6 + 272 >> 3]) * $4 * HEAPF64[$6 + 240 >> 3];
         HEAPF64[$6 + 160 >> 3] = HEAPF64[$6 + 160 >> 3] - $18 * (HEAPF64[$6 + 192 >> 3] * $4);
         $5 = HEAPF64[$6 + 208 >> 3];
         $17 = $6 + 168 | 0;
         HEAPF64[$17 >> 3] = HEAPF64[$17 >> 3] - $14 * (HEAPF64[$6 + 200 >> 3] * $4);
         $6 = $6 + 176 | 0;
         HEAPF64[$6 >> 3] = HEAPF64[$6 >> 3] - $8 * ($5 * $4);
         break label$13;
        }
        HEAP32[$10 + 200 >> 2] = 0;
        HEAP32[$10 + 204 >> 2] = 0;
       }
       HEAP32[$10 + 192 >> 2] = 0;
       HEAP32[$10 + 196 >> 2] = 0;
       $5 = 0.0;
       $7 = 0.0;
       $14 = 0.0;
       $4 = 0.0;
       $13 = 0.0;
       $23 = 0.0;
       $26 = 0.0;
       if (HEAP32[$19 >> 2]) {
        $6 = Math_imul($34, 488) + $32 | 0;
        $26 = HEAPF64[$6 + 448 >> 3];
        $13 = HEAPF64[$6 + 464 >> 3];
        $23 = HEAPF64[$6 + 456 >> 3];
        $14 = HEAPF64[$6 + 424 >> 3];
        $7 = HEAPF64[$6 + 432 >> 3];
        $4 = HEAPF64[$6 + 416 >> 3];
       }
       $11 = 0.0;
       $27 = 0.0;
       $18 = 0.0;
       $30 = 0.0;
       $33 = 0.0;
       if (HEAP32[$24 >> 2]) {
        $6 = Math_imul($35, 488) + $32 | 0;
        $33 = HEAPF64[$6 + 448 >> 3];
        $18 = HEAPF64[$6 + 464 >> 3];
        $30 = HEAPF64[$6 + 456 >> 3];
        $27 = HEAPF64[$6 + 432 >> 3];
        $11 = HEAPF64[$6 + 424 >> 3];
        $5 = HEAPF64[$6 + 416 >> 3];
       }
       $6 = Math_imul($34, 488) + $32 | 0;
       $87 = HEAPF64[$6 + 400 >> 3];
       $88 = HEAPF64[$6 + 392 >> 3];
       $89 = HEAPF64[$6 + 384 >> 3];
       $90 = HEAPF64[$6 + 352 >> 3];
       $91 = HEAPF64[$10 + 40 >> 3];
       $92 = HEAPF64[$6 + 360 >> 3];
       $93 = HEAPF64[$10 + 48 >> 3];
       $94 = HEAPF64[$6 + 368 >> 3];
       $6 = Math_imul($35, 488) + $32 | 0;
       $95 = HEAPF64[$6 + 352 >> 3];
       $96 = HEAPF64[$10 + 104 >> 3];
       $97 = HEAPF64[$6 + 360 >> 3];
       $98 = HEAPF64[$10 + 112 >> 3];
       $99 = HEAPF64[$6 + 368 >> 3];
       $100 = HEAPF64[$6 + 384 >> 3];
       $101 = HEAPF64[$10 + 72 >> 3];
       $102 = HEAPF64[$6 + 392 >> 3];
       $103 = HEAPF64[$10 + 80 >> 3];
       $104 = HEAPF64[$6 + 400 >> 3];
       $105 = HEAPF64[$10 + 16 >> 3];
       $106 = HEAPF64[$10 + 8 >> 3];
       $107 = HEAPF64[$10 >> 3];
       $108 = HEAPF64[$10 + 32 >> 3];
       $109 = HEAPF64[$10 + 96 >> 3];
       $110 = HEAPF64[$10 + 64 >> 3];
       $6 = HEAP32[$3 + 104 >> 2];
       $111 = HEAPF64[$3 + 112 >> 3];
       $12 = HEAPF64[$10 + 216 >> 3];
       HEAP32[$10 + 248 >> 2] = 536870912;
       HEAP32[$10 + 252 >> 2] = 1107468383;
       HEAP32[$10 + 240 >> 2] = 0;
       HEAP32[$10 + 244 >> 2] = 0;
       HEAPF64[$10 + 232 >> 3] = $28 * $12;
       $8 = $83 + $47;
       $17 = $8 > 0.0;
       $29 = $12 * ($17 ? 0.0 : $37 * ($29 * -$8));
       $6 = !$6 | $8 > $111;
       HEAPF64[$10 + 256 >> 3] = $6 ? 0.0 : $29;
       $28 = $12;
       $12 = $84 < $85 ? 0.0 : $86 * -$31;
       $4 = ($12 <= 0.0 ? 0.0 : $12) - ($93 * ($7 + $94) + ($108 * ($4 + $90) + $91 * ($14 + $92)) + ($105 * ($13 + $87) + ($107 * ($26 + $89) + $106 * ($23 + $88))) + ($98 * ($27 + $99) + ($109 * ($5 + $95) + $96 * ($11 + $97)) + ($103 * ($18 + $104) + ($110 * ($33 + $100) + $101 * ($30 + $102)))));
       HEAPF64[$10 + 224 >> 3] = $28 * ($17 ? $4 - $8 * $37 : $4) + ($6 ? $29 : -0.0);
       HEAP32[$10 + 276 >> 2] = HEAP32[$0 + 68 >> 2];
       $6 = $25 + 184 | 0;
       label$14 : {
        if (!(HEAPF64[$6 >> 3] > 0.0)) {
         break label$14
        }
        btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20double_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20double_2c_20double_29($0, $38, $34, $35, $9, HEAPF64[$25 + 192 >> 3]);
        $4 = HEAPF64[$46 >> 3];
        label$15 : {
         if (Math_abs($4) > .7071067811865476) {
          $8 = HEAPF64[$40 >> 3];
          $5 = $8 * $8 + $4 * $4;
          $7 = 1.0 / Math_sqrt($5);
          $11 = $5 * $7;
          $5 = $7 * -$4;
          $14 = HEAPF64[$38 >> 3];
          $12 = $5 * $14;
          $4 = $8 * $7;
          $8 = $4 * -$14;
          $7 = 0.0;
          break label$15;
         }
         $11 = HEAPF64[$38 >> 3];
         $7 = HEAPF64[$40 >> 3];
         $12 = $11 * $11 + $7 * $7;
         $5 = 1.0 / Math_sqrt($12);
         $12 = $12 * $5;
         $7 = $5 * -$7;
         $8 = $4 * $7;
         $5 = $11 * $5;
         $11 = $5 * -$4;
         $4 = 0.0;
        }
        $14 = 1.0 / Math_sqrt($4 * $4 + ($7 * $7 + $5 * $5));
        $4 = $4 * $14;
        HEAPF64[$21 + 56 >> 3] = $4;
        $5 = $5 * $14;
        HEAPF64[$21 + 48 >> 3] = $5;
        $7 = $7 * $14;
        HEAPF64[$21 + 40 >> 3] = $7;
        $14 = 1.0 / Math_sqrt($12 * $12 + ($11 * $11 + $8 * $8));
        $12 = $12 * $14;
        HEAPF64[$21 + 24 >> 3] = $12;
        $8 = $8 * $14;
        HEAPF64[$21 + 16 >> 3] = $8;
        $11 = $11 * $14;
        HEAPF64[$21 + 8 >> 3] = $11;
        $17 = HEAP32[$16 + 360 >> 2] & 2;
        if ($17) {
         HEAP32[$21 + 64 >> 2] = 0;
         HEAP32[$21 + 68 >> 2] = 0;
         $13 = HEAPF64[$16 + 88 >> 3];
         $23 = HEAPF64[$16 + 24 >> 3];
         $26 = HEAPF64[$16 + 56 >> 3];
         $14 = ($13 * $4 + ($23 * $7 + $5 * $26)) * HEAPF64[$16 + 344 >> 3];
         $27 = HEAPF64[$16 + 72 >> 3];
         $30 = HEAPF64[$16 + 8 >> 3];
         $29 = HEAPF64[$16 + 40 >> 3];
         $18 = ($27 * $4 + ($30 * $7 + $5 * $29)) * HEAPF64[$16 + 328 >> 3];
         $37 = HEAPF64[$16 + 80 >> 3];
         $33 = HEAPF64[$16 + 16 >> 3];
         $28 = $5;
         $5 = HEAPF64[$16 + 48 >> 3];
         $7 = ($37 * $4 + ($33 * $7 + $28 * $5)) * HEAPF64[$16 + 336 >> 3];
         $4 = $13 * $14 + ($27 * $18 + $37 * $7);
         HEAPF64[$21 + 56 >> 3] = $4;
         $5 = $26 * $14 + ($29 * $18 + $5 * $7);
         HEAPF64[$21 + 48 >> 3] = $5;
         $7 = $23 * $14 + ($30 * $18 + $33 * $7);
         HEAPF64[$21 + 40 >> 3] = $7;
        }
        $20 = HEAP32[$15 + 360 >> 2] & 2;
        if ($20) {
         HEAP32[$21 + 64 >> 2] = 0;
         HEAP32[$21 + 68 >> 2] = 0;
         $13 = HEAPF64[$15 + 88 >> 3];
         $23 = HEAPF64[$15 + 24 >> 3];
         $26 = HEAPF64[$15 + 56 >> 3];
         $14 = ($13 * $4 + ($23 * $7 + $5 * $26)) * HEAPF64[$15 + 344 >> 3];
         $27 = HEAPF64[$15 + 72 >> 3];
         $30 = HEAPF64[$15 + 8 >> 3];
         $29 = HEAPF64[$15 + 40 >> 3];
         $18 = ($27 * $4 + ($30 * $7 + $29 * $5)) * HEAPF64[$15 + 328 >> 3];
         $37 = HEAPF64[$15 + 80 >> 3];
         $33 = HEAPF64[$15 + 16 >> 3];
         $28 = $5;
         $5 = HEAPF64[$15 + 48 >> 3];
         $7 = ($37 * $4 + ($33 * $7 + $28 * $5)) * HEAPF64[$15 + 336 >> 3];
         $4 = $13 * $14 + ($27 * $18 + $37 * $7);
         HEAPF64[$21 + 56 >> 3] = $4;
         $5 = $26 * $14 + ($29 * $18 + $5 * $7);
         HEAPF64[$21 + 48 >> 3] = $5;
         $7 = $23 * $14 + ($30 * $18 + $33 * $7);
         HEAPF64[$21 + 40 >> 3] = $7;
        }
        if ($17) {
         HEAP32[$21 + 32 >> 2] = 0;
         HEAP32[$21 + 36 >> 2] = 0;
         $13 = HEAPF64[$16 + 88 >> 3];
         $23 = HEAPF64[$16 + 24 >> 3];
         $26 = HEAPF64[$16 + 56 >> 3];
         $14 = ($13 * $12 + ($23 * $11 + $8 * $26)) * HEAPF64[$16 + 344 >> 3];
         $27 = HEAPF64[$16 + 72 >> 3];
         $30 = HEAPF64[$16 + 8 >> 3];
         $29 = HEAPF64[$16 + 40 >> 3];
         $18 = ($27 * $12 + ($30 * $11 + $8 * $29)) * HEAPF64[$16 + 328 >> 3];
         $37 = HEAPF64[$16 + 80 >> 3];
         $33 = HEAPF64[$16 + 16 >> 3];
         $28 = $8;
         $8 = HEAPF64[$16 + 48 >> 3];
         $11 = ($37 * $12 + ($33 * $11 + $28 * $8)) * HEAPF64[$16 + 336 >> 3];
         $12 = $13 * $14 + ($27 * $18 + $37 * $11);
         HEAPF64[$21 + 24 >> 3] = $12;
         $8 = $26 * $14 + ($29 * $18 + $8 * $11);
         HEAPF64[$21 + 16 >> 3] = $8;
         $11 = $23 * $14 + ($30 * $18 + $33 * $11);
         HEAPF64[$21 + 8 >> 3] = $11;
        }
        if ($20) {
         HEAP32[$21 + 32 >> 2] = 0;
         HEAP32[$21 + 36 >> 2] = 0;
         $13 = HEAPF64[$15 + 88 >> 3];
         $23 = HEAPF64[$15 + 24 >> 3];
         $26 = HEAPF64[$15 + 56 >> 3];
         $14 = ($13 * $12 + ($23 * $11 + $8 * $26)) * HEAPF64[$15 + 344 >> 3];
         $27 = HEAPF64[$15 + 72 >> 3];
         $30 = HEAPF64[$15 + 8 >> 3];
         $29 = HEAPF64[$15 + 40 >> 3];
         $18 = ($27 * $12 + ($30 * $11 + $29 * $8)) * HEAPF64[$15 + 328 >> 3];
         $37 = HEAPF64[$15 + 80 >> 3];
         $33 = HEAPF64[$15 + 16 >> 3];
         $28 = $8;
         $8 = HEAPF64[$15 + 48 >> 3];
         $11 = ($37 * $12 + ($33 * $11 + $28 * $8)) * HEAPF64[$15 + 336 >> 3];
         $12 = $13 * $14 + ($27 * $18 + $37 * $11);
         HEAPF64[$21 + 24 >> 3] = $12;
         $8 = $26 * $14 + ($29 * $18 + $8 * $11);
         HEAPF64[$21 + 16 >> 3] = $8;
         $11 = $23 * $14 + ($30 * $18 + $33 * $11);
         HEAPF64[$21 + 8 >> 3] = $11;
        }
        if (Math_sqrt($4 * $4 + ($7 * $7 + $5 * $5)) > .001) {
         btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20double_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20double_2c_20double_29($0, $21 + 40 | 0, $34, $35, $9, HEAPF64[$6 >> 3])
        }
        if (!(Math_sqrt($12 * $12 + ($11 * $11 + $8 * $8)) > .001)) {
         break label$14
        }
        btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20double_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20double_2c_20double_29($0, $21 + 8 | 0, $34, $35, $9, HEAPF64[$6 >> 3]);
       }
       label$22 : {
        if (!(!!(HEAPU8[$3 + 144 | 0] & 32) & (HEAP8[$25 + 228 | 0] & 1))) {
         $20 = $25 + 328 | 0;
         $6 = $20;
         HEAP32[$6 >> 2] = 0;
         HEAP32[$6 + 4 >> 2] = 0;
         $5 = $49 - $51;
         $11 = $42 - $36;
         $7 = $48 - $50;
         $4 = $80 * $5 + ($81 * $11 + $7 * $82);
         $17 = $25 + 320 | 0;
         $8 = $5;
         $5 = HEAPF64[$46 >> 3];
         $12 = $8 - $4 * $5;
         HEAPF64[$17 >> 3] = $12;
         $24 = $25 + 312 | 0;
         $8 = $7;
         $7 = HEAPF64[$40 >> 3];
         $8 = $8 - $4 * $7;
         HEAPF64[$24 >> 3] = $8;
         $6 = $25 + 304 | 0;
         $13 = $11;
         $11 = HEAPF64[$38 >> 3];
         $4 = $13 - $4 * $11;
         HEAPF64[$6 >> 3] = $4;
         label$25 : {
          if (HEAPU8[$3 + 144 | 0] & 64) {
           break label$25
          }
          $14 = $12 * $12 + ($4 * $4 + $8 * $8);
          if (!($14 > 2.220446049250313e-16)) {
           break label$25
          }
          $5 = 1.0 / Math_sqrt($14);
          $7 = $8 * $5;
          HEAPF64[$24 >> 3] = $7;
          $4 = $4 * $5;
          HEAPF64[$6 >> 3] = $4;
          $5 = $12 * $5;
          HEAPF64[$17 >> 3] = $5;
          if (HEAP8[$16 + 360 | 0] & 1) {
           $30 = HEAPF64[$16 + 344 >> 3];
           $11 = HEAPF64[$16 + 88 >> 3];
           $12 = HEAPF64[$16 + 24 >> 3];
           $8 = HEAPF64[$16 + 56 >> 3];
           $29 = HEAPF64[$16 + 328 >> 3];
           $14 = HEAPF64[$16 + 72 >> 3];
           $18 = HEAPF64[$16 + 8 >> 3];
           $13 = HEAPF64[$16 + 40 >> 3];
           $36 = HEAPF64[$16 + 336 >> 3];
           $23 = HEAPF64[$16 + 80 >> 3];
           $26 = HEAPF64[$16 + 16 >> 3];
           $27 = HEAPF64[$16 + 48 >> 3];
           HEAP32[$20 >> 2] = 0;
           HEAP32[$20 + 4 >> 2] = 0;
           $28 = $8;
           $8 = $30 * ($11 * $5 + ($12 * $4 + $7 * $8));
           $31 = $13;
           $13 = $29 * ($14 * $5 + ($18 * $4 + $7 * $13));
           $5 = $36 * ($23 * $5 + ($26 * $4 + $7 * $27));
           $7 = $28 * $8 + ($31 * $13 + $27 * $5);
           HEAPF64[$24 >> 3] = $7;
           $4 = $12 * $8 + ($18 * $13 + $26 * $5);
           HEAPF64[$6 >> 3] = $4;
           $5 = $11 * $8 + ($14 * $13 + $23 * $5);
           HEAPF64[$17 >> 3] = $5;
          }
          if (HEAP8[$15 + 360 | 0] & 1) {
           $30 = HEAPF64[$15 + 344 >> 3];
           $11 = HEAPF64[$15 + 88 >> 3];
           $12 = HEAPF64[$15 + 24 >> 3];
           $8 = HEAPF64[$15 + 56 >> 3];
           $29 = HEAPF64[$15 + 328 >> 3];
           $14 = HEAPF64[$15 + 72 >> 3];
           $18 = HEAPF64[$15 + 8 >> 3];
           $13 = HEAPF64[$15 + 40 >> 3];
           $36 = HEAPF64[$15 + 336 >> 3];
           $23 = HEAPF64[$15 + 80 >> 3];
           $26 = HEAPF64[$15 + 16 >> 3];
           $27 = HEAPF64[$15 + 48 >> 3];
           HEAP32[$20 >> 2] = 0;
           HEAP32[$20 + 4 >> 2] = 0;
           $28 = $8;
           $8 = $30 * ($11 * $5 + ($12 * $4 + $7 * $8));
           $31 = $13;
           $13 = $29 * ($14 * $5 + ($18 * $4 + $13 * $7));
           $4 = $36 * ($23 * $5 + ($26 * $4 + $7 * $27));
           HEAPF64[$24 >> 3] = $28 * $8 + ($31 * $13 + $27 * $4);
           HEAPF64[$6 >> 3] = $12 * $8 + ($18 * $13 + $26 * $4);
           HEAPF64[$17 >> 3] = $11 * $8 + ($14 * $13 + $23 * $4);
          }
          $30 = HEAPF64[$21 + 72 >> 3];
          btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20btContactSolverInfo_20const__2c_20double_2c_20double_29($0, $6, $34, $35, $9, $22, $21 + 112 | 0, $21 + 80 | 0, $30, $3, 0.0, 0.0);
          if (!(HEAPU8[$3 + 144 | 0] & 16)) {
           break label$22
          }
          $20 = $25 + 360 | 0;
          HEAP32[$20 >> 2] = 0;
          HEAP32[$20 + 4 >> 2] = 0;
          $32 = $25 + 352 | 0;
          $5 = HEAPF64[$6 >> 3];
          $7 = HEAPF64[$40 >> 3];
          $11 = HEAPF64[$38 >> 3];
          $12 = HEAPF64[$24 >> 3];
          $4 = $5 * $7 - $11 * $12;
          $8 = $4;
          $13 = $4 * $4;
          $4 = HEAPF64[$46 >> 3];
          $23 = $12 * $4;
          $12 = HEAPF64[$17 >> 3];
          $7 = $23 - $7 * $12;
          $5 = $12 * $11 - $4 * $5;
          $11 = 1.0 / Math_sqrt($13 + ($7 * $7 + $5 * $5));
          $4 = $8 * $11;
          HEAPF64[$32 >> 3] = $4;
          $6 = $25 + 344 | 0;
          $5 = $5 * $11;
          HEAPF64[$6 >> 3] = $5;
          $25 = $25 + 336 | 0;
          $7 = $7 * $11;
          HEAPF64[$25 >> 3] = $7;
          if (HEAP8[$16 + 360 | 0] & 1) {
           $29 = HEAPF64[$16 + 344 >> 3];
           $11 = HEAPF64[$16 + 88 >> 3];
           $12 = HEAPF64[$16 + 24 >> 3];
           $8 = HEAPF64[$16 + 56 >> 3];
           $36 = HEAPF64[$16 + 328 >> 3];
           $14 = HEAPF64[$16 + 72 >> 3];
           $18 = HEAPF64[$16 + 8 >> 3];
           $13 = HEAPF64[$16 + 40 >> 3];
           $42 = HEAPF64[$16 + 336 >> 3];
           $23 = HEAPF64[$16 + 80 >> 3];
           $26 = HEAPF64[$16 + 16 >> 3];
           $27 = HEAPF64[$16 + 48 >> 3];
           HEAP32[$20 >> 2] = 0;
           HEAP32[$20 + 4 >> 2] = 0;
           $28 = $8;
           $8 = $29 * ($11 * $4 + ($12 * $7 + $5 * $8));
           $31 = $13;
           $13 = $36 * ($14 * $4 + ($18 * $7 + $5 * $13));
           $4 = $42 * ($23 * $4 + ($26 * $7 + $5 * $27));
           $5 = $28 * $8 + ($31 * $13 + $27 * $4);
           HEAPF64[$6 >> 3] = $5;
           $7 = $12 * $8 + ($18 * $13 + $26 * $4);
           HEAPF64[$25 >> 3] = $7;
           $4 = $11 * $8 + ($14 * $13 + $23 * $4);
           HEAPF64[$32 >> 3] = $4;
          }
          if (HEAP8[$15 + 360 | 0] & 1) {
           $29 = HEAPF64[$15 + 344 >> 3];
           $11 = HEAPF64[$15 + 88 >> 3];
           $12 = HEAPF64[$15 + 24 >> 3];
           $8 = HEAPF64[$15 + 56 >> 3];
           $36 = HEAPF64[$15 + 328 >> 3];
           $14 = HEAPF64[$15 + 72 >> 3];
           $18 = HEAPF64[$15 + 8 >> 3];
           $13 = HEAPF64[$15 + 40 >> 3];
           $42 = HEAPF64[$15 + 336 >> 3];
           $23 = HEAPF64[$15 + 80 >> 3];
           $26 = HEAPF64[$15 + 16 >> 3];
           $27 = HEAPF64[$15 + 48 >> 3];
           HEAP32[$20 >> 2] = 0;
           HEAP32[$20 + 4 >> 2] = 0;
           $28 = $8;
           $8 = $29 * ($11 * $4 + ($12 * $7 + $5 * $8));
           $31 = $13;
           $13 = $36 * ($14 * $4 + ($18 * $7 + $13 * $5));
           $4 = $42 * ($23 * $4 + ($26 * $7 + $5 * $27));
           HEAPF64[$6 >> 3] = $28 * $8 + ($31 * $13 + $27 * $4);
           HEAPF64[$25 >> 3] = $12 * $8 + ($18 * $13 + $26 * $4);
           HEAPF64[$32 >> 3] = $11 * $8 + ($14 * $13 + $23 * $4);
          }
          btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20btContactSolverInfo_20const__2c_20double_2c_20double_29($0, $25, $34, $35, $9, $22, $21 + 112 | 0, $21 + 80 | 0, $30, $3, 0.0, 0.0);
          break label$22;
         }
         $32 = $25 + 336 | 0;
         label$30 : {
          if (Math_abs($5) > .7071067811865476) {
           HEAP32[$6 >> 2] = 0;
           HEAP32[$6 + 4 >> 2] = 0;
           $8 = $7 * $7 + $5 * $5;
           $12 = 1.0 / Math_sqrt($8);
           $4 = $12 * -$5;
           HEAPF64[$24 >> 3] = $4;
           $5 = $7 * $12;
           HEAPF64[$17 >> 3] = $5;
           $12 = $8 * $12;
           $8 = $11 * $4;
           $11 = $5 * -$11;
           $7 = 0.0;
           break label$30;
          }
          HEAP32[$17 >> 2] = 0;
          HEAP32[$17 + 4 >> 2] = 0;
          $8 = $11;
          $12 = $11 * $11 + $7 * $7;
          $11 = 1.0 / Math_sqrt($12);
          $4 = $8 * $11;
          HEAPF64[$24 >> 3] = $4;
          $7 = $11 * -$7;
          HEAPF64[$6 >> 3] = $7;
          $8 = $12 * $11;
          $11 = $5 * $7;
          $12 = $4 * -$5;
          $5 = 0.0;
         }
         HEAPF64[$32 >> 3] = $12;
         $38 = $25 + 352 | 0;
         HEAPF64[$38 >> 3] = $8;
         $40 = $25 + 344 | 0;
         HEAPF64[$40 >> 3] = $11;
         if (HEAP8[$16 + 360 | 0] & 1) {
          $30 = HEAPF64[$16 + 344 >> 3];
          $11 = HEAPF64[$16 + 88 >> 3];
          $12 = HEAPF64[$16 + 24 >> 3];
          $8 = HEAPF64[$16 + 56 >> 3];
          $29 = HEAPF64[$16 + 328 >> 3];
          $14 = HEAPF64[$16 + 72 >> 3];
          $18 = HEAPF64[$16 + 8 >> 3];
          $13 = HEAPF64[$16 + 40 >> 3];
          $36 = HEAPF64[$16 + 336 >> 3];
          $23 = HEAPF64[$16 + 80 >> 3];
          $26 = HEAPF64[$16 + 16 >> 3];
          $27 = HEAPF64[$16 + 48 >> 3];
          HEAP32[$20 >> 2] = 0;
          HEAP32[$20 + 4 >> 2] = 0;
          $28 = $8;
          $8 = $30 * ($11 * $5 + ($12 * $7 + $4 * $8));
          $31 = $13;
          $13 = $29 * ($14 * $5 + ($18 * $7 + $13 * $4));
          $5 = $36 * ($23 * $5 + ($26 * $7 + $4 * $27));
          $4 = $28 * $8 + ($31 * $13 + $27 * $5);
          HEAPF64[$24 >> 3] = $4;
          $7 = $12 * $8 + ($18 * $13 + $26 * $5);
          HEAPF64[$6 >> 3] = $7;
          $5 = $11 * $8 + ($14 * $13 + $23 * $5);
          HEAPF64[$17 >> 3] = $5;
         }
         if (HEAP8[$15 + 360 | 0] & 1) {
          $30 = HEAPF64[$15 + 344 >> 3];
          $11 = HEAPF64[$15 + 88 >> 3];
          $12 = HEAPF64[$15 + 24 >> 3];
          $8 = HEAPF64[$15 + 56 >> 3];
          $29 = HEAPF64[$15 + 328 >> 3];
          $14 = HEAPF64[$15 + 72 >> 3];
          $18 = HEAPF64[$15 + 8 >> 3];
          $13 = HEAPF64[$15 + 40 >> 3];
          $36 = HEAPF64[$15 + 336 >> 3];
          $23 = HEAPF64[$15 + 80 >> 3];
          $26 = HEAPF64[$15 + 16 >> 3];
          $27 = HEAPF64[$15 + 48 >> 3];
          HEAP32[$20 >> 2] = 0;
          HEAP32[$20 + 4 >> 2] = 0;
          $28 = $8;
          $8 = $30 * ($11 * $5 + ($12 * $7 + $4 * $8));
          $31 = $13;
          $13 = $29 * ($14 * $5 + ($18 * $7 + $13 * $4));
          $4 = $36 * ($23 * $5 + ($26 * $7 + $4 * $27));
          HEAPF64[$24 >> 3] = $28 * $8 + ($31 * $13 + $27 * $4);
          HEAPF64[$6 >> 3] = $12 * $8 + ($18 * $13 + $26 * $4);
          HEAPF64[$17 >> 3] = $11 * $8 + ($14 * $13 + $23 * $4);
         }
         $30 = HEAPF64[$21 + 72 >> 3];
         btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20btContactSolverInfo_20const__2c_20double_2c_20double_29($0, $6, $34, $35, $9, $22, $21 + 112 | 0, $21 + 80 | 0, $30, $3, 0.0, 0.0);
         $6 = HEAP32[$3 + 144 >> 2];
         if ($6 & 16) {
          if (HEAP8[$16 + 360 | 0] & 1) {
           $23 = HEAPF64[$16 + 344 >> 3];
           $4 = HEAPF64[$16 + 88 >> 3];
           $5 = HEAPF64[$16 + 24 >> 3];
           $7 = HEAPF64[$16 + 56 >> 3];
           $29 = HEAPF64[$16 + 328 >> 3];
           $11 = HEAPF64[$16 + 72 >> 3];
           $12 = HEAPF64[$16 + 8 >> 3];
           $8 = HEAPF64[$16 + 40 >> 3];
           $36 = HEAPF64[$16 + 336 >> 3];
           $14 = HEAPF64[$16 + 80 >> 3];
           $18 = HEAPF64[$16 + 16 >> 3];
           $13 = HEAPF64[$16 + 48 >> 3];
           $6 = $25 + 360 | 0;
           HEAP32[$6 >> 2] = 0;
           HEAP32[$6 + 4 >> 2] = 0;
           $28 = $5;
           $31 = $23;
           $23 = HEAPF64[$38 >> 3];
           $5 = HEAPF64[$32 >> 3];
           $26 = HEAPF64[$40 >> 3];
           $27 = $31 * ($4 * $23 + ($28 * $5 + $7 * $26));
           $31 = $12;
           $12 = $29 * ($11 * $23 + ($12 * $5 + $8 * $26));
           $5 = $36 * ($14 * $23 + ($18 * $5 + $26 * $13));
           HEAPF64[$32 >> 3] = $28 * $27 + ($31 * $12 + $18 * $5);
           HEAPF64[$40 >> 3] = $7 * $27 + ($8 * $12 + $13 * $5);
           HEAPF64[$38 >> 3] = $4 * $27 + ($11 * $12 + $14 * $5);
          }
          if (HEAP8[$15 + 360 | 0] & 1) {
           $23 = HEAPF64[$15 + 344 >> 3];
           $4 = HEAPF64[$15 + 88 >> 3];
           $5 = HEAPF64[$15 + 24 >> 3];
           $7 = HEAPF64[$15 + 56 >> 3];
           $29 = HEAPF64[$15 + 328 >> 3];
           $11 = HEAPF64[$15 + 72 >> 3];
           $12 = HEAPF64[$15 + 8 >> 3];
           $8 = HEAPF64[$15 + 40 >> 3];
           $36 = HEAPF64[$15 + 336 >> 3];
           $14 = HEAPF64[$15 + 80 >> 3];
           $18 = HEAPF64[$15 + 16 >> 3];
           $13 = HEAPF64[$15 + 48 >> 3];
           $6 = $25 + 360 | 0;
           HEAP32[$6 >> 2] = 0;
           HEAP32[$6 + 4 >> 2] = 0;
           $28 = $5;
           $31 = $23;
           $23 = HEAPF64[$38 >> 3];
           $5 = HEAPF64[$32 >> 3];
           $26 = HEAPF64[$40 >> 3];
           $27 = $31 * ($4 * $23 + ($28 * $5 + $7 * $26));
           $31 = $12;
           $12 = $29 * ($11 * $23 + ($12 * $5 + $8 * $26));
           $5 = $36 * ($14 * $23 + ($18 * $5 + $26 * $13));
           HEAPF64[$32 >> 3] = $28 * $27 + ($31 * $12 + $18 * $5);
           HEAPF64[$40 >> 3] = $7 * $27 + ($8 * $12 + $13 * $5);
           HEAPF64[$38 >> 3] = $4 * $27 + ($11 * $12 + $14 * $5);
          }
          btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20btContactSolverInfo_20const__2c_20double_2c_20double_29($0, $32, $34, $35, $9, $22, $21 + 112 | 0, $21 + 80 | 0, $30, $3, 0.0, 0.0);
          $6 = HEAP32[$3 + 144 >> 2];
         }
         if (($6 & 80) != 80) {
          break label$22
         }
         $9 = $25 + 228 | 0;
         HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 1;
         break label$22;
        }
        $4 = HEAPF64[$21 + 72 >> 3];
        $6 = $25 + 288 | 0;
        btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20btContactSolverInfo_20const__2c_20double_2c_20double_29($0, $25 + 304 | 0, $34, $35, $9, $22, $21 + 112 | 0, $21 + 80 | 0, $4, $3, HEAPF64[$25 + 256 >> 3], HEAPF64[$6 >> 3]);
        if (!(HEAPU8[$3 + 144 | 0] & 16)) {
         break label$22
        }
        btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20double_2c_20btContactSolverInfo_20const__2c_20double_2c_20double_29($0, $25 + 336 | 0, $34, $35, $9, $22, $21 + 112 | 0, $21 + 80 | 0, $4, $3, HEAPF64[$25 + 264 >> 3], HEAPF64[$6 >> 3]);
       }
       $17 = HEAP32[$0 + 76 >> 2];
       $32 = HEAP32[$10 + 276 >> 2];
       $38 = HEAP32[$3 + 144 >> 2];
       __inlined_func$btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29 : {
        if ($38 & 4) {
         $20 = HEAP32[$0 + 16 >> 2];
         $10 = HEAP32[($20 + Math_imul($35, 488) | 0) + 480 >> 2];
         $25 = HEAP32[(Math_imul($34, 488) + $20 | 0) + 480 >> 2];
         $6 = Math_imul($32, 288) + $17 | 0;
         $4 = HEAPF64[$22 + 232 >> 3] * HEAPF64[$3 + 136 >> 3];
         HEAPF64[$6 + 200 >> 3] = $4;
         if ($25) {
          $7 = HEAPF64[$25 + 760 >> 3];
          $11 = HEAPF64[$6 + 48 >> 3];
          $12 = HEAPF64[$25 + 752 >> 3];
          $8 = HEAPF64[$6 + 40 >> 3];
          $9 = Math_imul($34, 488) + $20 | 0;
          $5 = HEAPF64[$25 + 736 >> 3];
          HEAPF64[$9 + 128 >> 3] = $4 * ($5 * HEAPF64[$6 + 32 >> 3] * HEAPF64[$25 + 744 >> 3]) * HEAPF64[$9 + 224 >> 3] + HEAPF64[$9 + 128 >> 3];
          $24 = $9 + 136 | 0;
          HEAPF64[$24 >> 3] = $4 * ($12 * ($5 * $8)) * HEAPF64[$9 + 232 >> 3] + HEAPF64[$24 >> 3];
          $24 = $9 + 144 | 0;
          HEAPF64[$24 >> 3] = $4 * ($7 * ($5 * $11)) * HEAPF64[$9 + 240 >> 3] + HEAPF64[$24 >> 3];
          $5 = HEAPF64[$6 + 144 >> 3];
          $7 = HEAPF64[$6 + 136 >> 3];
          HEAPF64[$9 + 160 >> 3] = $4 * HEAPF64[$9 + 192 >> 3] * HEAPF64[$6 + 128 >> 3] + HEAPF64[$9 + 160 >> 3];
          $11 = HEAPF64[$9 + 208 >> 3];
          $24 = $9 + 168 | 0;
          HEAPF64[$24 >> 3] = $7 * ($4 * HEAPF64[$9 + 200 >> 3]) + HEAPF64[$24 >> 3];
          $9 = $9 + 176 | 0;
          HEAPF64[$9 >> 3] = $5 * ($4 * $11) + HEAPF64[$9 >> 3];
         }
         if ($10) {
          $24 = Math_imul($32, 288) + $17 | 0;
          $7 = HEAPF64[$24 + 176 >> 3];
          $11 = HEAPF64[$24 + 168 >> 3];
          $12 = HEAPF64[$24 + 160 >> 3];
          $8 = HEAPF64[$10 + 760 >> 3];
          $14 = HEAPF64[$24 + 112 >> 3];
          $18 = HEAPF64[$10 + 752 >> 3];
          $13 = HEAPF64[$24 + 104 >> 3];
          $9 = Math_imul($35, 488) + $20 | 0;
          $5 = HEAPF64[$10 + 736 >> 3];
          $4 = HEAPF64[$6 + 200 >> 3];
          HEAPF64[$9 + 128 >> 3] = HEAPF64[$9 + 128 >> 3] + $5 * HEAPF64[$24 + 96 >> 3] * HEAPF64[$10 + 744 >> 3] * $4 * HEAPF64[$9 + 224 >> 3];
          $6 = $9 + 136 | 0;
          HEAPF64[$6 >> 3] = HEAPF64[$6 >> 3] + $4 * ($18 * ($5 * $13)) * HEAPF64[$9 + 232 >> 3];
          $6 = $9 + 144 | 0;
          HEAPF64[$6 >> 3] = HEAPF64[$6 >> 3] + $4 * ($8 * ($5 * $14)) * HEAPF64[$9 + 240 >> 3];
          HEAPF64[$9 + 160 >> 3] = HEAPF64[$9 + 160 >> 3] + $12 * ($4 * HEAPF64[$9 + 192 >> 3]);
          $5 = HEAPF64[$9 + 208 >> 3];
          $6 = $9 + 168 | 0;
          HEAPF64[$6 >> 3] = HEAPF64[$6 >> 3] + $11 * ($4 * HEAPF64[$9 + 200 >> 3]);
          $9 = $9 + 176 | 0;
          HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] + $7 * ($5 * $4);
         }
         if (!($38 & 16)) {
          break __inlined_func$btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29
         }
         $24 = $32 + 1 | 0;
         $6 = Math_imul($24, 288) + $17 | 0;
         $4 = HEAPF64[$22 + 240 >> 3] * HEAPF64[$3 + 136 >> 3];
         HEAPF64[$6 + 200 >> 3] = $4;
         if ($25) {
          $7 = HEAPF64[$6 + 48 >> 3];
          $11 = HEAPF64[$6 + 40 >> 3];
          $9 = Math_imul($34, 488) + $20 | 0;
          $5 = HEAPF64[$25 + 736 >> 3];
          HEAPF64[$9 + 128 >> 3] = $4 * ($5 * HEAPF64[$6 + 32 >> 3]) * HEAPF64[$9 + 224 >> 3] + HEAPF64[$9 + 128 >> 3];
          $22 = $9 + 136 | 0;
          HEAPF64[$22 >> 3] = $4 * ($5 * $11) * HEAPF64[$9 + 232 >> 3] + HEAPF64[$22 >> 3];
          $22 = $9 + 144 | 0;
          HEAPF64[$22 >> 3] = $4 * ($5 * $7) * HEAPF64[$9 + 240 >> 3] + HEAPF64[$22 >> 3];
          $5 = HEAPF64[$6 + 144 >> 3];
          $7 = HEAPF64[$6 + 136 >> 3];
          HEAPF64[$9 + 160 >> 3] = $4 * HEAPF64[$9 + 192 >> 3] * HEAPF64[$6 + 128 >> 3] + HEAPF64[$9 + 160 >> 3];
          $11 = HEAPF64[$9 + 208 >> 3];
          $22 = $9 + 168 | 0;
          HEAPF64[$22 >> 3] = $7 * ($4 * HEAPF64[$9 + 200 >> 3]) + HEAPF64[$22 >> 3];
          $9 = $9 + 176 | 0;
          HEAPF64[$9 >> 3] = $5 * ($4 * $11) + HEAPF64[$9 >> 3];
         }
         if (!$10) {
          break __inlined_func$btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29
         }
         $22 = Math_imul($24, 288) + $17 | 0;
         $7 = HEAPF64[$22 + 176 >> 3];
         $11 = HEAPF64[$22 + 168 >> 3];
         $12 = HEAPF64[$22 + 112 >> 3];
         $8 = HEAPF64[$22 + 104 >> 3];
         $14 = HEAPF64[$22 + 96 >> 3];
         $5 = HEAPF64[$10 + 736 >> 3];
         $9 = Math_imul($35, 488) + $20 | 0;
         $4 = HEAPF64[$6 + 200 >> 3];
         HEAPF64[$9 + 160 >> 3] = HEAPF64[$9 + 160 >> 3] + HEAPF64[$22 + 160 >> 3] * (HEAPF64[$9 + 192 >> 3] * $4);
         HEAPF64[$9 + 128 >> 3] = HEAPF64[$9 + 128 >> 3] + $4 * ($5 * $14) * HEAPF64[$9 + 224 >> 3];
         $10 = $9 + 136 | 0;
         HEAPF64[$10 >> 3] = HEAPF64[$10 >> 3] + $4 * ($5 * $8) * HEAPF64[$9 + 232 >> 3];
         $10 = $9 + 144 | 0;
         HEAPF64[$10 >> 3] = HEAPF64[$10 >> 3] + $4 * ($5 * $12) * HEAPF64[$9 + 240 >> 3];
         $5 = HEAPF64[$9 + 208 >> 3];
         $10 = $9 + 168 | 0;
         HEAPF64[$10 >> 3] = HEAPF64[$10 >> 3] + $11 * ($4 * HEAPF64[$9 + 200 >> 3]);
         $9 = $9 + 176 | 0;
         HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] + $7 * ($5 * $4);
         break __inlined_func$btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29;
        }
        $9 = Math_imul($32, 288) + $17 | 0;
        HEAP32[$9 + 200 >> 2] = 0;
        HEAP32[$9 + 204 >> 2] = 0;
        if (!($38 & 16)) {
         break __inlined_func$btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29
        }
        $9 = $9 + 488 | 0;
        HEAP32[$9 >> 2] = 0;
        HEAP32[$9 + 4 >> 2] = 0;
       }
       $10 = HEAP32[$41 + 1456 >> 2];
      }
      $45 = $45 + 1 | 0;
      if (($45 | 0) < ($10 | 0)) {
       continue
      }
      break;
     };
    }
    __stack_pointer = $21 + 144 | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   }
  }
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySetup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
  $41 = __stack_pointer - 496 | 0;
  __stack_pointer = $41;
  HEAP32[$0 + 188 >> 2] = -1;
  CProfileSample__CProfileSample_28char_20const__29($41 + 488 | 0, 3205);
  $8 = HEAP32[$7 + 144 >> 2];
  if (($8 | 0) != HEAP32[$0 + 224 >> 2]) {
   HEAP32[$0 + 224 >> 2] = $8;
   HEAP32[$0 + 220 >> 2] = 576;
   HEAP32[$0 + 216 >> 2] = 575;
   HEAP32[$0 + 212 >> 2] = 574;
  }
  HEAP32[$0 + 184 >> 2] = 0;
  label$2 : {
   if (($2 | 0) <= 0) {
    break label$2
   }
   $9 = $2 & 3;
   if ($2 - 1 >>> 0 >= 3) {
    $16 = $2 & -4;
    $8 = $1;
    while (1) {
     HEAP32[HEAP32[$8 >> 2] + 400 >> 2] = -1;
     HEAP32[HEAP32[$8 + 4 >> 2] + 400 >> 2] = -1;
     HEAP32[HEAP32[$8 + 8 >> 2] + 400 >> 2] = -1;
     HEAP32[HEAP32[$8 + 12 >> 2] + 400 >> 2] = -1;
     $8 = $8 + 16 | 0;
     $10 = $10 + 4 | 0;
     if (($16 | 0) != ($10 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$9) {
    break label$2
   }
   $8 = ($10 << 2) + $1 | 0;
   while (1) {
    HEAP32[HEAP32[$8 >> 2] + 400 >> 2] = -1;
    $8 = $8 + 4 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue
    }
    break;
   };
  }
  $8 = HEAP32[$0 + 12 >> 2];
  if (($2 | 0) >= ($8 | 0)) {
   $8 = $2 + 1 | 0;
   if ($8) {
    $20 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 488))
   } else {
    $20 = 0
   }
   $37 = HEAP32[$0 + 8 >> 2];
   if (($37 | 0) > 0) {
    $10 = 128;
    while (1) {
     $16 = HEAP32[$0 + 16 >> 2] + $10 | 0;
     $9 = $16 - 128 | 0;
     $12 = HEAP32[$9 + 4 >> 2];
     $14 = $10 + $20 | 0;
     $13 = $14 - 128 | 0;
     HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$13 + 4 >> 2] = $12;
     $12 = $9 + 24 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 24 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = $9 + 16 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 16 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $9 = $9 + 8 | 0;
     $12 = HEAP32[$9 + 4 >> 2];
     $13 = $13 + 8 | 0;
     HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$13 + 4 >> 2] = $12;
     $9 = $16 - 96 | 0;
     $12 = $9 + 24 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $13 = $14 - 96 | 0;
     $30 = $13 + 24 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = $9 + 16 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 16 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = $9 + 8 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 8 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = HEAP32[$9 + 4 >> 2];
     HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$13 + 4 >> 2] = $12;
     $9 = $16 + -64 | 0;
     $12 = $9 + 24 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $13 = $14 + -64 | 0;
     $30 = $13 + 24 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = $9 + 16 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 16 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = $9 + 8 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 8 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = HEAP32[$9 + 4 >> 2];
     HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$13 + 4 >> 2] = $12;
     $9 = $16 - 32 | 0;
     $12 = $9 + 24 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $13 = $14 - 32 | 0;
     $30 = $13 + 24 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = $9 + 16 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 16 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = $9 + 8 | 0;
     $19 = HEAP32[$12 + 4 >> 2];
     $30 = $13 + 8 | 0;
     HEAP32[$30 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$30 + 4 >> 2] = $19;
     $12 = HEAP32[$9 + 4 >> 2];
     HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$13 + 4 >> 2] = $12;
     memcpy($14, $16, 356);
     $10 = $10 + 488 | 0;
     $37 = $37 - 1 | 0;
     if ($37) {
      continue
     }
     break;
    };
   }
   $16 = HEAP32[$0 + 16 >> 2];
   if (!(!$16 | !HEAPU8[$0 + 20 | 0])) {
    btAlignedFreeInternal_28void__29($16)
   }
   HEAP32[$0 + 16 >> 2] = $20;
   HEAP8[$0 + 20 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $8;
  }
  $16 = memset($41, 0, 488);
  $10 = HEAP32[$0 + 8 >> 2];
  if (($10 | 0) < 0) {
   if (($8 | 0) < 0) {
    $8 = HEAP32[$0 + 16 >> 2];
    if (!(!$8 | !HEAPU8[$0 + 20 | 0])) {
     btAlignedFreeInternal_28void__29($8)
    }
    HEAP8[$0 + 20 | 0] = 1;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
   }
   $9 = Math_imul($10, 488);
   $41 = $16 + 128 | 0;
   $14 = $16 + 96 | 0;
   $13 = $16 - -64 | 0;
   $37 = $16 + 32 | 0;
   while (1) {
    $8 = HEAP32[$0 + 16 >> 2] + $9 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $20 = $8 + 24 | 0;
    HEAP32[$20 >> 2] = 0;
    HEAP32[$20 + 4 >> 2] = 0;
    $20 = $8 + 16 | 0;
    HEAP32[$20 >> 2] = 0;
    HEAP32[$20 + 4 >> 2] = 0;
    $20 = $8 + 8 | 0;
    HEAP32[$20 >> 2] = 0;
    HEAP32[$20 + 4 >> 2] = 0;
    $20 = HEAP32[$37 + 4 >> 2];
    $12 = $8 + 32 | 0;
    HEAP32[$12 >> 2] = HEAP32[$37 >> 2];
    HEAP32[$12 + 4 >> 2] = $20;
    $20 = $37 + 8 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 40 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = $37 + 16 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 48 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = $37 + 24 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 56 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = HEAP32[$13 + 4 >> 2];
    $12 = $8 - -64 | 0;
    HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$12 + 4 >> 2] = $20;
    $20 = $13 + 8 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 72 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = $13 + 16 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 80 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = $13 + 24 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 88 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = $14 + 24 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 120 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = $14 + 16 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 112 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = $14 + 8 | 0;
    $12 = HEAP32[$20 + 4 >> 2];
    $19 = $8 + 104 | 0;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$19 + 4 >> 2] = $12;
    $20 = HEAP32[$14 + 4 >> 2];
    $12 = $8 + 96 | 0;
    HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$12 + 4 >> 2] = $20;
    memcpy($8 + 128 | 0, $41, 356);
    $9 = $9 + 488 | 0;
    $8 = $10;
    $10 = $10 + 1 | 0;
    if ($8 >>> 0 <= $10 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 8 >> 2] = 0;
  if (($2 | 0) > 0) {
   while (1) {
    $14 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, HEAP32[$1 >> 2], HEAPF64[$7 + 24 >> 3]);
    $8 = HEAP32[$1 >> 2];
    label$18 : {
     if (!(HEAPU8[$8 + 472 | 0] & 2) | !$8 | HEAPF64[$8 + 736 >> 3] == 0.0) {
      break label$18
     }
     $13 = HEAP32[$0 + 16 >> 2];
     $10 = HEAP32[$8 + 1032 >> 2];
     if ($10 & 2) {
      $24 = HEAPF64[$7 + 160 >> 3];
      HEAP32[$16 + 24 >> 2] = 0;
      HEAP32[$16 + 28 >> 2] = 0;
      $21 = HEAPF64[$8 + 88 >> 3];
      $11 = HEAPF64[$8 + 856 >> 3];
      $31 = $11 != 0.0 ? 1.0 / $11 : 0.0;
      $25 = HEAPF64[$8 + 56 >> 3];
      $18 = $31 * $25;
      $26 = HEAPF64[$8 + 72 >> 3];
      $11 = HEAPF64[$8 + 840 >> 3];
      $23 = $11 != 0.0 ? 1.0 / $11 : 0.0;
      $17 = HEAPF64[$8 + 40 >> 3];
      $27 = $23 * $17;
      $11 = HEAPF64[$8 + 848 >> 3];
      $35 = $11 != 0.0 ? 1.0 / $11 : 0.0;
      $28 = HEAPF64[$8 + 48 >> 3];
      $33 = $35 * $28;
      $29 = HEAPF64[$8 + 80 >> 3];
      $11 = HEAPF64[$8 + 720 >> 3];
      $39 = ($21 * $18 + ($26 * $27 + $33 * $29)) * $11;
      $15 = HEAPF64[$8 + 704 >> 3];
      $34 = HEAPF64[$8 + 24 >> 3];
      $32 = HEAPF64[$8 + 8 >> 3];
      $22 = HEAPF64[$8 + 16 >> 3];
      $36 = $15 * ($34 * $18 + ($32 * $27 + $22 * $33));
      $27 = $25 * $18 + ($17 * $27 + $28 * $33);
      $18 = HEAPF64[$8 + 712 >> 3];
      $33 = $39 + ($36 + $27 * $18);
      $27 = $31 * $34;
      $38 = $23 * $32;
      $36 = $35 * $22;
      $38 = ($21 * $27 + ($26 * $38 + $36 * $29)) * $11 + (($34 * $27 + ($32 * $38 + $22 * $36)) * $15 + ($25 * $27 + ($17 * $38 + $36 * $28)) * $18);
      $27 = $15 * $33 - $38 * $18;
      HEAPF64[$16 + 16 >> 3] = $27;
      $39 = $21;
      $21 = $31 * $21;
      $31 = $26;
      $26 = $23 * $26;
      $23 = $29;
      $29 = $35 * $29;
      $21 = $11 * ($39 * $21 + ($31 * $26 + $23 * $29)) + ($15 * ($34 * $21 + ($32 * $26 + $22 * $29)) + $18 * ($25 * $21 + ($17 * $26 + $28 * $29)));
      $15 = $11 * $38 - $15 * $21;
      HEAPF64[$16 + 8 >> 3] = $15;
      $11 = $18 * $21 - $33 * $11;
      HEAPF64[$16 >> 3] = $11;
      $18 = $27 * $27 + ($11 * $11 + $15 * $15);
      if ($18 > $24 * $24) {
       $18 = 1.0 / Math_sqrt($18) * $24;
       HEAPF64[$16 + 16 >> 3] = $27 * $18;
       HEAPF64[$16 + 8 >> 3] = $15 * $18;
       HEAPF64[$16 >> 3] = $11 * $18;
      }
      $21 = HEAPF64[$8 + 656 >> 3];
      $25 = HEAPF64[$8 + 592 >> 3];
      $26 = HEAPF64[$8 + 624 >> 3];
      $17 = HEAPF64[$8 + 648 >> 3];
      $28 = HEAPF64[$8 + 584 >> 3];
      $29 = HEAPF64[$8 + 616 >> 3];
      $9 = $13 + Math_imul($14, 488) | 0;
      $11 = HEAPF64[$16 + 16 >> 3];
      $15 = HEAPF64[$16 >> 3];
      $18 = HEAPF64[$16 + 8 >> 3];
      $24 = HEAPF64[$7 + 24 >> 3];
      HEAPF64[$9 + 448 >> 3] = HEAPF64[$9 + 448 >> 3] - (HEAPF64[$8 + 640 >> 3] * $11 + (HEAPF64[$8 + 576 >> 3] * $15 + $18 * HEAPF64[$8 + 608 >> 3])) * $24;
      $10 = $9 + 456 | 0;
      HEAPF64[$10 >> 3] = HEAPF64[$10 >> 3] - $24 * ($17 * $11 + ($28 * $15 + $18 * $29));
      $9 = $9 + 464 | 0;
      HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] - $24 * ($21 * $11 + ($25 * $15 + $18 * $26));
      $10 = HEAP32[$8 + 1032 >> 2];
     }
     if ($10 & 4) {
      $11 = HEAPF64[$7 + 24 >> 3];
      HEAP32[$16 + 24 >> 2] = 0;
      HEAP32[$16 + 28 >> 2] = 0;
      $21 = HEAPF64[$8 + 24 >> 3];
      $15 = HEAPF64[$8 + 856 >> 3];
      $34 = $15 != 0.0 ? 1.0 / $15 : 0.0;
      $26 = HEAPF64[$8 + 88 >> 3];
      $40 = $34 * $26;
      $17 = HEAPF64[$8 + 8 >> 3];
      $15 = HEAPF64[$8 + 840 >> 3];
      $36 = $15 != 0.0 ? 1.0 / $15 : 0.0;
      $22 = HEAPF64[$8 + 72 >> 3];
      $43 = $36 * $22;
      $29 = HEAPF64[$8 + 16 >> 3];
      $15 = HEAPF64[$8 + 848 >> 3];
      $42 = $15 != 0.0 ? 1.0 / $15 : 0.0;
      $27 = HEAPF64[$8 + 80 >> 3];
      $45 = $42 * $27;
      $31 = $21 * $40 + ($17 * $43 + $29 * $45);
      $15 = HEAPF64[$8 + 720 >> 3];
      $32 = HEAPF64[$8 + 56 >> 3];
      $25 = $34 * $32;
      $23 = HEAPF64[$8 + 40 >> 3];
      $28 = $36 * $23;
      $35 = HEAPF64[$8 + 48 >> 3];
      $44 = $42 * $35;
      $33 = $26 * $25 + ($22 * $28 + $44 * $27);
      $47 = $15 * $33;
      $38 = $21 * $25 + ($17 * $28 + $29 * $44);
      $18 = HEAPF64[$8 + 704 >> 3];
      $46 = $38 * $18;
      $24 = HEAPF64[$8 + 712 >> 3];
      $28 = $32 * $25 + ($23 * $28 + $35 * $44);
      $25 = $47 + ($46 + $24 * $28);
      $44 = $34 * $21;
      $39 = $17;
      $17 = $36 * $17;
      $42 = $42 * $29;
      $29 = $21 * $44 + ($39 * $17 + $29 * $42);
      $36 = $31 + ($25 + ($31 * 0.0 + ($46 - $29 * $24))) * $11;
      $34 = $26 * $40 + ($22 * $43 + $27 * $45);
      $46 = $31 * $18;
      $40 = $32 * $40 + ($23 * $43 + $35 * $45);
      $43 = $24 * $40;
      $21 = $15 * $34 + ($46 + $43);
      $23 = $32 * $44 + ($23 * $17 + $42 * $35);
      $32 = $23 + ($43 + ($23 * 0.0 - $28 * $15) + $21) * $11;
      $22 = $26 * $44 + ($22 * $17 + $42 * $27);
      $27 = $15 * $22;
      $42 = $24 * $23;
      $26 = $27 + ($29 * $18 + $42);
      $43 = $11 * 0.0;
      $17 = $25 + ($15 * $26 - $21 * $18) * $11 - ($43 + $25);
      $27 = $33 + ($26 + ($27 + $33 * 0.0 - $34 * $18)) * $11;
      $35 = $22 + ($34 * $24 + ($22 * 0.0 - $47) - $25) * $11;
      $23 = $28 + ($23 * $15 + $28 * 0.0 - $40 * $18) * $11;
      $45 = $32 * $27 - $35 * $23;
      $31 = $29 + ($31 * $24 + ($29 * 0.0 - $38 * $15)) * $11;
      $34 = $34 + ($34 * 0.0 + ($18 * $33 - $22 * $24)) * $11;
      $22 = $40 + ($40 * 0.0 + ($18 * $28 - $42) - $26) * $11;
      $40 = $23 * $34 - $27 * $22;
      $33 = $38 + ($29 * $15 + $38 * 0.0 - $46 - $21) * $11;
      $38 = $22 * $35 - $34 * $32;
      $28 = $36 * $45 + ($31 * $40 + $33 * $38);
      $29 = Math_abs($28) > 2.220446049250313e-16 ? 1.0 / $28 : $28;
      $28 = $26 + ($24 * $21 - $25 * $15) * $11 - ($43 + $26);
      $11 = ($18 * $25 - $26 * $24) * $11 + $21 - ($43 + $21);
      HEAPF64[$16 + 16 >> 3] = $15 - ($36 * ($32 * $17 - $28 * $23) + ($31 * ($23 * $11 - $17 * $22) + $33 * ($22 * $28 - $11 * $32))) * $29 - $15;
      HEAPF64[$16 + 8 >> 3] = $24 - ($36 * ($28 * $27 - $35 * $17) + ($31 * ($17 * $34 - $27 * $11) + $33 * ($11 * $35 - $34 * $28))) * $29 - $24;
      HEAPF64[$16 >> 3] = $18 - ($11 * $45 + ($28 * $40 + $17 * $38)) * $29 - $18;
      $11 = HEAPF64[$16 + 16 >> 3];
      $15 = HEAPF64[$16 + 8 >> 3];
      $9 = $13 + Math_imul($14, 488) | 0;
      HEAPF64[$9 + 448 >> 3] = HEAPF64[$16 >> 3] + HEAPF64[$9 + 448 >> 3];
      $10 = $9 + 456 | 0;
      HEAPF64[$10 >> 3] = $15 + HEAPF64[$10 >> 3];
      $9 = $9 + 464 | 0;
      HEAPF64[$9 >> 3] = $11 + HEAPF64[$9 >> 3];
      $10 = HEAP32[$8 + 1032 >> 2];
     }
     if (!($10 & 8)) {
      break label$18
     }
     $11 = HEAPF64[$7 + 24 >> 3];
     $9 = __stack_pointer - 32 | 0;
     __stack_pointer = $9;
     $32 = HEAPF64[$8 + 856 >> 3];
     $22 = HEAPF64[$8 + 848 >> 3];
     $28 = HEAPF64[$8 + 720 >> 3];
     $29 = HEAPF64[$8 + 712 >> 3];
     $31 = HEAPF64[$8 + 840 >> 3];
     $34 = HEAPF64[$8 + 704 >> 3];
     btMatrix3x3__getRotation_28btQuaternion__29_20const($8 + 8 | 0, $9);
     HEAP32[$16 + 24 >> 2] = 0;
     HEAP32[$16 + 28 >> 2] = 0;
     $15 = HEAPF64[$9 + 8 >> 3];
     $18 = HEAPF64[$9 + 24 >> 3];
     $24 = HEAPF64[$9 >> 3];
     $17 = $34 * $15 + ($18 * $28 - $29 * $24);
     $21 = HEAPF64[$9 + 16 >> 3];
     $27 = $28 * $21 + ($24 * $34 + $29 * $15);
     $23 = $24 * $28 + ($18 * $29 - $34 * $21);
     $33 = $21 * $29 + ($18 * $34 - $28 * $15);
     $25 = $17 * $24 + ($27 * $15 + $18 * $23) - $33 * $21;
     $26 = $33 * $15 + ($27 * $21 + $18 * $17) - $23 * $24;
     $35 = $26 * 0.0;
     $17 = $23 * $21 + ($27 * $24 + $18 * $33) - $17 * $15;
     $33 = $17 * 0.0;
     $22 = $22 != 0.0 ? 1.0 / $22 : 0.0;
     $27 = $35 + ($33 + $25 * $22);
     $31 = $31 != 0.0 ? 1.0 / $31 : 0.0;
     $38 = ($33 - $25 * $31 + 0.0 + $27) * $11 + 0.0;
     $23 = $32 != 0.0 ? 1.0 / $32 : 0.0;
     $36 = $25 * 0.0;
     $40 = $23 * $26 + ($33 + $36);
     $32 = ($25 * $40 - $27 * $26) * $11;
     $46 = $17 * -0.0;
     $43 = ($46 + ($31 * $26 + 0.0) - $40) * $11 + 0.0;
     $42 = ($36 + (0.0 - $22 * $26) + $40) * $11 + 0.0;
     $45 = $35 + ($31 * $17 + $36);
     $44 = ($35 + 0.0 - $23 * $17 + $45) * $11 + 0.0;
     $39 = $26 * -0.0;
     $47 = ($23 * $25 + ($39 + 0.0) - $27) * $11 + 0.0;
     $35 = $22 + ($46 + ($35 + $22 * 0.0)) * $11;
     $46 = $42 * $44 - $47 * $35;
     $36 = $31 + ($36 + ($31 * 0.0 + $39)) * $11;
     $39 = $23;
     $31 = $23 * 0.0;
     $23 = $25 * -0.0;
     $31 = $39 + ($31 + ($23 + $33)) * $11;
     $23 = ($23 + $22 * $17 + 0.0 - $45) * $11 + 0.0;
     $39 = $35 * $31 - $44 * $23;
     $49 = $23 * $47 - $31 * $42;
     $22 = $38 * $46 + ($36 * $39 + $43 * $49);
     $33 = Math_abs($22) > 2.220446049250313e-16 ? 1.0 / $22 : $22;
     $22 = ($26 * $45 - $40 * $17) * $11;
     $11 = ($17 * $27 - $45 * $25) * $11;
     $25 = $25 - ($38 * ($32 * $44 - $47 * $22) + ($36 * ($22 * $31 - $44 * $11) + $43 * ($11 * $47 - $31 * $32))) * $33;
     $17 = $17 - ($11 * $46 + ($32 * $39 + $22 * $49)) * $33;
     $11 = $26 - ($38 * ($42 * $22 - $32 * $35) + ($36 * ($35 * $11 - $22 * $23) + $43 * ($23 * $32 - $11 * $42))) * $33;
     $26 = $18 * $25 + $21 * $17 - $24 * $11;
     $32 = $18 * $11 + $24 * $25 - $15 * $17;
     $22 = -$24 * $17 - $25 * $15 - $21 * $11;
     $11 = $18 * $17 + $15 * $11 - $21 * $25;
     HEAPF64[$16 + 16 >> 3] = $26 * $24 + ($18 * $32 - $22 * $21 - $11 * $15) - $28;
     HEAPF64[$16 + 8 >> 3] = $11 * $21 + ($18 * $26 - $22 * $15 - $32 * $24) - $29;
     HEAPF64[$16 >> 3] = $32 * $15 + ($18 * $11 - $22 * $24 - $26 * $21) - $34;
     __stack_pointer = $9 + 32 | 0;
     $11 = HEAPF64[$16 + 16 >> 3];
     $15 = HEAPF64[$16 + 8 >> 3];
     $8 = $13 + Math_imul($14, 488) | 0;
     HEAPF64[$8 + 448 >> 3] = HEAPF64[$16 >> 3] + HEAPF64[$8 + 448 >> 3];
     $9 = $8 + 456 | 0;
     HEAPF64[$9 >> 3] = $15 + HEAPF64[$9 >> 3];
     $8 = $8 + 464 | 0;
     HEAPF64[$8 >> 3] = $11 + HEAPF64[$8 >> 3];
    }
    $1 = $1 + 4 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   }
  }
  label$21 : {
   if (($6 | 0) <= 0) {
    break label$21
   }
   $9 = 0;
   if (($6 | 0) != 1) {
    $2 = $6 & -2;
    $8 = $5;
    while (1) {
     $1 = HEAP32[$8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
     HEAP32[$1 + 40 >> 2] = 0;
     HEAP32[$1 + 44 >> 2] = 0;
     $1 = HEAP32[$8 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
     HEAP32[$1 + 40 >> 2] = 0;
     HEAP32[$1 + 44 >> 2] = 0;
     $8 = $8 + 8 | 0;
     $9 = $9 + 2 | 0;
     if (($2 | 0) != ($9 | 0)) {
      continue
     }
     break;
    };
   }
   if (!($6 & 1)) {
    break label$21
   }
   $1 = HEAP32[($9 << 2) + $5 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   HEAP32[$1 + 40 >> 2] = 0;
   HEAP32[$1 + 44 >> 2] = 0;
  }
  $8 = HEAP32[$0 + 168 >> 2];
  if (!(($8 | 0) >= ($6 | 0) | HEAP32[$0 + 172 >> 2] >= ($6 | 0))) {
   label$25 : {
    if (!$6) {
     $10 = 0;
     break label$25;
    }
    $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 3);
    $8 = HEAP32[$0 + 168 >> 2];
   }
   label$27 : {
    if (($8 | 0) <= 0) {
     break label$27
    }
    $9 = $8 & 3;
    $14 = 0;
    if ($8 - 1 >>> 0 >= 3) {
     $2 = $8 & -4;
     $8 = 0;
     while (1) {
      $13 = HEAP32[$0 + 176 >> 2] + $8 | 0;
      $37 = HEAP32[$13 + 4 >> 2];
      $1 = $8 + $10 | 0;
      HEAP32[$1 >> 2] = HEAP32[$13 >> 2];
      HEAP32[$1 + 4 >> 2] = $37;
      $13 = (HEAP32[$0 + 176 >> 2] + $8 | 0) + 8 | 0;
      $37 = HEAP32[$13 + 4 >> 2];
      $41 = $1 + 8 | 0;
      HEAP32[$41 >> 2] = HEAP32[$13 >> 2];
      HEAP32[$41 + 4 >> 2] = $37;
      $13 = (HEAP32[$0 + 176 >> 2] + $8 | 0) + 16 | 0;
      $37 = HEAP32[$13 + 4 >> 2];
      $41 = $1 + 16 | 0;
      HEAP32[$41 >> 2] = HEAP32[$13 >> 2];
      HEAP32[$41 + 4 >> 2] = $37;
      $13 = (HEAP32[$0 + 176 >> 2] + $8 | 0) + 24 | 0;
      $37 = HEAP32[$13 + 4 >> 2];
      $1 = $1 + 24 | 0;
      HEAP32[$1 >> 2] = HEAP32[$13 >> 2];
      HEAP32[$1 + 4 >> 2] = $37;
      $8 = $8 + 32 | 0;
      $14 = $14 + 4 | 0;
      if (($2 | 0) != ($14 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$9) {
     break label$27
    }
    $8 = $14 << 3;
    while (1) {
     $1 = HEAP32[$0 + 176 >> 2] + $8 | 0;
     $2 = HEAP32[$1 + 4 >> 2];
     $14 = $8 + $10 | 0;
     HEAP32[$14 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$14 + 4 >> 2] = $2;
     $8 = $8 + 8 | 0;
     $9 = $9 - 1 | 0;
     if ($9) {
      continue
     }
     break;
    };
   }
   $1 = HEAP32[$0 + 176 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 180 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 176 >> 2] = $10;
   HEAP8[$0 + 180 | 0] = 1;
   HEAP32[$0 + 172 >> 2] = $6;
  }
  HEAP32[$0 + 168 >> 2] = $6;
  label$32 : {
   if (($6 | 0) <= 0) {
    $14 = 0;
    break label$32;
   }
   $9 = 0;
   $1 = $5;
   $2 = $6;
   $14 = 0;
   while (1) {
    $10 = HEAP32[$0 + 176 >> 2] + $9 | 0;
    $8 = HEAP32[$1 >> 2];
    $13 = HEAP32[$8 + 56 >> 2];
    if ($13) {
     memset($13, 0, 128);
     $8 = HEAP32[$1 >> 2];
    }
    label$36 : {
     if (HEAPU8[$8 + 24 | 0]) {
      FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 16 >> 2]]($8, $10);
      $8 = HEAP32[$10 >> 2];
      break label$36;
     }
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $8 = 0;
    }
    $9 = $9 + 8 | 0;
    $1 = $1 + 4 | 0;
    $14 = $8 + $14 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  $8 = HEAP32[$0 + 48 >> 2];
  if (!(($14 | 0) <= ($8 | 0) | HEAP32[$0 + 52 >> 2] >= ($14 | 0))) {
   label$39 : {
    if (!$14) {
     $9 = 0;
     break label$39;
    }
    $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 288));
    $8 = HEAP32[$0 + 48 >> 2];
   }
   label$41 : {
    if (($8 | 0) <= 0) {
     break label$41
    }
    $2 = $8 & 1;
    $1 = 0;
    if (($8 | 0) != 1) {
     $10 = $8 & -2;
     $8 = 0;
     while (1) {
      memcpy(memcpy($8 + $9 | 0, HEAP32[$0 + 56 >> 2] + $8 | 0, 288) + 288 | 0, (HEAP32[$0 + 56 >> 2] + $8 | 0) + 288 | 0, 288);
      $8 = $8 + 576 | 0;
      $1 = $1 + 2 | 0;
      if (($10 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$2) {
     break label$41
    }
    $1 = Math_imul($1, 288);
    memcpy($1 + $9 | 0, $1 + HEAP32[$0 + 56 >> 2] | 0, 288);
   }
   $1 = HEAP32[$0 + 56 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = $9;
   HEAP8[$0 + 60 | 0] = 1;
   HEAP32[$0 + 52 >> 2] = $14;
  }
  HEAP32[$0 + 48 >> 2] = $14;
  if (($6 | 0) > 0) {
   $1 = HEAP32[$0 + 176 >> 2];
   $20 = 0;
   $37 = 0;
   while (1) {
    $53 = $20 << 3;
    $12 = $53 + $1 | 0;
    if (HEAP32[$12 >> 2]) {
     $19 = ($20 << 2) + $5 | 0;
     $41 = HEAP32[$19 >> 2];
     $14 = HEAP32[$41 + 36 >> 2];
     $30 = HEAP32[$0 + 56 >> 2];
     $13 = HEAP32[$41 + 32 >> 2];
     $9 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, $13, HEAPF64[$7 + 24 >> 3]);
     $50 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, $14, HEAPF64[$7 + 24 >> 3]);
     $1 = HEAP32[$41 + 28 >> 2];
     $8 = HEAP32[$7 + 40 >> 2];
     $48 = ($1 | 0) > 0 ? $1 : $8;
     if (($48 | 0) > HEAP32[$0 + 184 >> 2]) {
      HEAP32[$0 + 184 >> 2] = $48
     }
     $51 = Math_imul($37, 288);
     $1 = $51 + $30 | 0;
     $52 = HEAP32[$0 + 16 >> 2];
     if (HEAP32[$12 >> 2] > 0) {
      $10 = 0;
      $8 = $1;
      while (1) {
       $2 = memset($8, 0, 288);
       $8 = $2 + 192 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       $8 = $2 + 200 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       $8 = $2 + 248 | 0;
       HEAP32[$8 >> 2] = -1;
       HEAP32[$8 + 4 >> 2] = 2146435071;
       $8 = $2 + 240 | 0;
       HEAP32[$8 >> 2] = -1;
       HEAP32[$8 + 4 >> 2] = -1048577;
       HEAP32[$2 + 284 >> 2] = $50;
       HEAP32[$2 + 280 >> 2] = $9;
       HEAP32[$2 + 272 >> 2] = $48;
       $8 = $2 + 288 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) < HEAP32[$12 >> 2]) {
        continue
       }
       break;
      };
      $8 = HEAP32[$7 + 40 >> 2];
     }
     $2 = $52 + Math_imul($9, 488) | 0;
     HEAP32[$2 + 288 >> 2] = 0;
     HEAP32[$2 + 292 >> 2] = 0;
     $9 = $2 + 296 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 304 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 312 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 320 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 328 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 336 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 344 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$2 + 128 >> 2] = 0;
     HEAP32[$2 + 132 >> 2] = 0;
     $9 = $2 + 184 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 176 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 168 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 160 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 152 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 144 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 136 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $52 + Math_imul($50, 488) | 0;
     HEAP32[$9 + 288 >> 2] = 0;
     HEAP32[$9 + 292 >> 2] = 0;
     $10 = $9 + 296 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 304 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 312 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 320 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 328 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 336 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 344 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     HEAP32[$9 + 128 >> 2] = 0;
     HEAP32[$9 + 132 >> 2] = 0;
     $10 = $9 + 136 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 144 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 152 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 160 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 168 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 176 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $9 + 184 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     HEAPF64[$1 + 232 >> 3] = HEAPF64[$7 + 80 >> 3];
     HEAP32[$16 + 36 >> 2] = $1 + 224;
     HEAP32[$16 + 32 >> 2] = 36;
     HEAP32[$16 + 28 >> 2] = $1 - -64;
     HEAP32[$16 + 24 >> 2] = $1 + 96;
     HEAP32[$16 + 20 >> 2] = $1;
     HEAP32[$16 + 52 >> 2] = $8;
     HEAP32[$16 + 48 >> 2] = $1 + 248;
     HEAP32[$16 + 44 >> 2] = $1 + 240;
     HEAP32[$16 + 40 >> 2] = $1 + 232;
     HEAPF64[$16 + 56 >> 3] = HEAPF64[$7 + 8 >> 3];
     HEAP32[$16 + 16 >> 2] = $1 + 32;
     HEAPF64[$16 + 8 >> 3] = HEAPF64[$7 + 64 >> 3];
     HEAPF64[$16 >> 3] = 1.0 / HEAPF64[$7 + 24 >> 3];
     $1 = HEAP32[$19 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, $16);
     if (HEAP32[$12 >> 2] > 0) {
      $8 = ($30 + $51 | 0) + 264 | 0;
      $30 = $9 + 464 | 0;
      $50 = $9 + 456 | 0;
      $48 = $9 + 448 | 0;
      $52 = $9 + 432 | 0;
      $51 = $9 + 424 | 0;
      $54 = $9 + 416 | 0;
      $9 = $9 + 480 | 0;
      $55 = $2 + 464 | 0;
      $56 = $2 + 456 | 0;
      $57 = $2 + 448 | 0;
      $58 = $2 + 432 | 0;
      $59 = $2 + 424 | 0;
      $60 = $2 + 416 | 0;
      $2 = $2 + 480 | 0;
      $10 = 0;
      while (1) {
       $11 = HEAPF64[HEAP32[$19 >> 2] + 16 >> 3];
       $1 = $8 - 16 | 0;
       if ($11 <= HEAPF64[$1 >> 3]) {
        HEAPF64[$1 >> 3] = $11
       }
       $11 = -$11;
       $1 = $8 - 24 | 0;
       if ($11 >= HEAPF64[$1 >> 3]) {
        HEAPF64[$1 >> 3] = $11
       }
       HEAP32[$8 >> 2] = $41;
       $1 = HEAP32[$41 + 32 >> 2];
       $24 = HEAPF64[$1 + 584 >> 3];
       $21 = HEAPF64[$1 + 592 >> 3];
       $25 = HEAPF64[$1 + 1112 >> 3];
       $26 = HEAPF64[$1 + 624 >> 3];
       $17 = HEAPF64[$1 + 608 >> 3];
       $28 = HEAPF64[$1 + 616 >> 3];
       $11 = HEAPF64[$1 + 1120 >> 3];
       $15 = HEAPF64[$1 + 656 >> 3];
       $18 = HEAPF64[$1 + 640 >> 3];
       $29 = HEAPF64[$1 + 648 >> 3];
       $34 = HEAPF64[$1 + 1104 >> 3];
       $32 = HEAPF64[$1 + 576 >> 3];
       $1 = $8 - 112 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       $23 = $11;
       $11 = HEAPF64[$8 - 248 >> 3];
       $39 = $15 * $11;
       $15 = HEAPF64[$8 - 264 >> 3];
       $31 = $18 * $15;
       $18 = HEAPF64[$8 - 256 >> 3];
       HEAPF64[$8 - 120 >> 3] = $23 * ($39 + ($31 + $29 * $18));
       HEAPF64[$8 - 128 >> 3] = $25 * ($26 * $11 + ($17 * $15 + $18 * $28));
       HEAPF64[$8 - 136 >> 3] = $34 * ($21 * $11 + ($32 * $15 + $24 * $18));
       $1 = HEAP32[$41 + 36 >> 2];
       $26 = HEAPF64[$1 + 584 >> 3];
       $17 = HEAPF64[$1 + 592 >> 3];
       $28 = HEAPF64[$1 + 1112 >> 3];
       $29 = HEAPF64[$1 + 624 >> 3];
       $34 = HEAPF64[$1 + 608 >> 3];
       $32 = HEAPF64[$1 + 616 >> 3];
       $24 = HEAPF64[$1 + 1120 >> 3];
       $21 = HEAPF64[$1 + 656 >> 3];
       $25 = HEAPF64[$1 + 640 >> 3];
       $22 = HEAPF64[$1 + 648 >> 3];
       $27 = HEAPF64[$1 + 1104 >> 3];
       $31 = HEAPF64[$1 + 576 >> 3];
       $1 = $8 - 80 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       $23 = $24;
       $24 = HEAPF64[$8 - 184 >> 3];
       $39 = $21 * $24;
       $21 = HEAPF64[$8 - 200 >> 3];
       $33 = $25 * $21;
       $25 = HEAPF64[$8 - 192 >> 3];
       HEAPF64[$8 - 88 >> 3] = $23 * ($39 + ($33 + $22 * $25));
       HEAPF64[$8 - 96 >> 3] = $28 * ($29 * $24 + ($34 * $21 + $25 * $32));
       HEAPF64[$8 - 104 >> 3] = $27 * ($17 * $24 + ($31 * $21 + $26 * $25));
       $26 = 0.0;
       $17 = HEAPF64[$13 + 736 >> 3];
       $28 = HEAPF64[$8 - 216 >> 3];
       $29 = HEAPF64[$8 - 232 >> 3];
       $34 = HEAPF64[$8 - 224 >> 3];
       $23 = $17 * $28 * $28 + ($17 * $29 * $29 + $34 * ($17 * $34)) + ($11 * ($11 * HEAPF64[$13 + 656 >> 3] + ($15 * HEAPF64[$13 + 640 >> 3] + $18 * HEAPF64[$13 + 648 >> 3])) + ($15 * ($11 * HEAPF64[$13 + 592 >> 3] + ($15 * HEAPF64[$13 + 576 >> 3] + $18 * HEAPF64[$13 + 584 >> 3])) + $18 * ($11 * HEAPF64[$13 + 624 >> 3] + ($15 * HEAPF64[$13 + 608 >> 3] + $18 * HEAPF64[$13 + 616 >> 3]))));
       $17 = HEAPF64[$14 + 736 >> 3];
       $32 = HEAPF64[$8 - 152 >> 3];
       $22 = HEAPF64[$8 - 168 >> 3];
       $27 = HEAPF64[$8 - 160 >> 3];
       $17 = $23 + ($17 * $32 * $32 + ($17 * $22 * $22 + $27 * ($17 * $27))) + ($24 * ($24 * HEAPF64[$14 + 656 >> 3] + ($21 * HEAPF64[$14 + 640 >> 3] + $25 * HEAPF64[$14 + 648 >> 3])) + ($21 * ($24 * HEAPF64[$14 + 592 >> 3] + ($21 * HEAPF64[$14 + 576 >> 3] + $25 * HEAPF64[$14 + 584 >> 3])) + $25 * ($24 * HEAPF64[$14 + 624 >> 3] + ($21 * HEAPF64[$14 + 608 >> 3] + $25 * HEAPF64[$14 + 616 >> 3]))));
       $17 = Math_abs($17) > 2.220446049250313e-16 ? 1.0 / $17 : 0.0;
       HEAPF64[$8 - 48 >> 3] = $17;
       $31 = 0.0;
       $23 = 0.0;
       $35 = 0.0;
       $33 = 0.0;
       $38 = 0.0;
       $36 = 0.0;
       if (HEAP32[$2 >> 2]) {
        $36 = HEAPF64[$55 >> 3];
        $38 = HEAPF64[$56 >> 3];
        $33 = HEAPF64[$57 >> 3];
        $23 = HEAPF64[$59 >> 3];
        $35 = HEAPF64[$60 >> 3];
        $31 = HEAPF64[$58 >> 3];
       }
       $40 = 0.0;
       $43 = 0.0;
       $42 = 0.0;
       $45 = 0.0;
       $44 = 0.0;
       if (HEAP32[$9 >> 2]) {
        $44 = HEAPF64[$30 >> 3];
        $45 = HEAPF64[$50 >> 3];
        $42 = HEAPF64[$48 >> 3];
        $40 = HEAPF64[$51 >> 3];
        $43 = HEAPF64[$54 >> 3];
        $26 = HEAPF64[$52 >> 3];
       }
       $47 = HEAPF64[$13 + 688 >> 3];
       $46 = HEAPF64[$13 + 672 >> 3];
       $39 = HEAPF64[$13 + 680 >> 3];
       $49 = HEAPF64[$13 + 720 >> 3];
       $61 = HEAPF64[$13 + 704 >> 3];
       $62 = HEAPF64[$13 + 712 >> 3];
       $63 = HEAPF64[$14 + 688 >> 3];
       $64 = HEAPF64[$14 + 672 >> 3];
       $65 = HEAPF64[$14 + 680 >> 3];
       $66 = HEAPF64[$14 + 720 >> 3];
       $67 = HEAPF64[$14 + 704 >> 3];
       $68 = HEAPF64[$14 + 712 >> 3];
       $1 = $8 + -64 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       $1 = $8 - 40 | 0;
       HEAPF64[$1 >> 3] = $17 * HEAPF64[$1 >> 3] + $17 * (0.0 - ($28 * ($31 + $47) + ($29 * ($35 + $46) + $34 * ($23 + $39)) + ($11 * ($36 + $49) + ($15 * ($33 + $61) + $18 * ($38 + $62))) + ($32 * ($26 + $63) + ($22 * ($43 + $64) + $27 * ($40 + $65)) + ($24 * ($44 + $66) + ($21 * ($42 + $67) + $25 * ($45 + $68))))) * HEAPF64[$16 + 56 >> 3]);
       $8 = $8 + 288 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) < HEAP32[$12 >> 2]) {
        continue
       }
       break;
      };
     }
     $1 = HEAP32[$0 + 176 >> 2];
     $2 = HEAP32[$53 + $1 >> 2];
    } else {
     $2 = 0
    }
    $37 = $2 + $37 | 0;
    $20 = $20 + 1 | 0;
    if (($20 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3, $4, $7);
  $4 = HEAP32[$0 + 68 >> 2];
  $3 = HEAP32[$0 + 28 >> 2];
  $8 = HEAP32[$0 + 128 >> 2];
  $5 = HEAP32[$0 + 48 >> 2];
  if (!(($8 | 0) >= ($5 | 0) | ($5 | 0) <= HEAP32[$0 + 132 >> 2])) {
   label$58 : {
    if (!$5) {
     $2 = 0;
     break label$58;
    }
    $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
    $8 = HEAP32[$0 + 128 >> 2];
   }
   $6 = HEAP32[$0 + 136 >> 2];
   label$60 : {
    label$61 : {
     if (($8 | 0) > 0) {
      $10 = $8 & 3;
      $9 = 0;
      if ($8 - 1 >>> 0 >= 3) {
       $13 = $8 & -4;
       $8 = 0;
       while (1) {
        $1 = $2 + $8 | 0;
        $14 = $6 + $8 | 0;
        HEAP32[$1 >> 2] = HEAP32[$14 >> 2];
        HEAP32[$1 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
        HEAP32[$1 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
        $8 = $8 + 16 | 0;
        $9 = $9 + 4 | 0;
        if (($13 | 0) != ($9 | 0)) {
         continue
        }
        break;
       };
      }
      if ($10) {
       $1 = $9 << 2;
       $8 = $1 + $2 | 0;
       $1 = $1 + $6 | 0;
       while (1) {
        HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
        $8 = $8 + 4 | 0;
        $1 = $1 + 4 | 0;
        $10 = $10 - 1 | 0;
        if ($10) {
         continue
        }
        break;
       };
      }
      if (HEAPU8[$0 + 140 | 0]) {
       break label$61
      }
      break label$60;
     }
     if (!$6 | !HEAPU8[$0 + 140 | 0]) {
      break label$60
     }
    }
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$0 + 136 >> 2] = $2;
   HEAP32[$0 + 132 >> 2] = $5;
   HEAP8[$0 + 140 | 0] = 1;
  }
  HEAP32[$0 + 128 >> 2] = $5;
  label$67 : {
   if (HEAPU8[$7 + 144 | 0] & 16) {
    $8 = HEAP32[$0 + 108 >> 2];
    $7 = $3 << 1;
    if (!(($8 | 0) >= ($7 | 0) | ($7 | 0) <= HEAP32[$0 + 112 >> 2])) {
     label$70 : {
      if (!$3) {
       $2 = 0;
       break label$70;
      }
      $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 3);
      $8 = HEAP32[$0 + 108 >> 2];
     }
     $6 = HEAP32[$0 + 116 >> 2];
     label$72 : {
      label$73 : {
       if (($8 | 0) > 0) {
        $10 = $8 & 3;
        $9 = 0;
        if ($8 - 1 >>> 0 >= 3) {
         $13 = $8 & -4;
         $8 = 0;
         while (1) {
          $1 = $2 + $8 | 0;
          $14 = $6 + $8 | 0;
          HEAP32[$1 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$1 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
          HEAP32[$1 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
          HEAP32[$1 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
          $8 = $8 + 16 | 0;
          $9 = $9 + 4 | 0;
          if (($13 | 0) != ($9 | 0)) {
           continue
          }
          break;
         };
        }
        if ($10) {
         $1 = $9 << 2;
         $8 = $1 + $2 | 0;
         $1 = $1 + $6 | 0;
         while (1) {
          HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
          $8 = $8 + 4 | 0;
          $1 = $1 + 4 | 0;
          $10 = $10 - 1 | 0;
          if ($10) {
           continue
          }
          break;
         };
        }
        if (HEAPU8[$0 + 120 | 0]) {
         break label$73
        }
        break label$72;
       }
       if (!$6 | !HEAPU8[$0 + 120 | 0]) {
        break label$72
       }
      }
      btAlignedFreeInternal_28void__29($6);
     }
     HEAP32[$0 + 116 >> 2] = $2;
     HEAP32[$0 + 112 >> 2] = $7;
     HEAP8[$0 + 120 | 0] = 1;
    }
    HEAP32[$0 + 108 >> 2] = $7;
    break label$67;
   }
   $8 = HEAP32[$0 + 108 >> 2];
   if (!(($3 | 0) <= ($8 | 0) | ($3 | 0) <= HEAP32[$0 + 112 >> 2])) {
    label$80 : {
     if (!$3) {
      $2 = 0;
      break label$80;
     }
     $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2);
     $8 = HEAP32[$0 + 108 >> 2];
    }
    $6 = HEAP32[$0 + 116 >> 2];
    label$82 : {
     label$83 : {
      if (($8 | 0) > 0) {
       $10 = $8 & 3;
       $9 = 0;
       if ($8 - 1 >>> 0 >= 3) {
        $14 = $8 & -4;
        $8 = 0;
        while (1) {
         $1 = $2 + $8 | 0;
         $7 = $6 + $8 | 0;
         HEAP32[$1 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
         HEAP32[$1 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
         $8 = $8 + 16 | 0;
         $9 = $9 + 4 | 0;
         if (($14 | 0) != ($9 | 0)) {
          continue
         }
         break;
        };
       }
       if ($10) {
        $1 = $9 << 2;
        $8 = $1 + $2 | 0;
        $1 = $1 + $6 | 0;
        while (1) {
         HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
         $8 = $8 + 4 | 0;
         $1 = $1 + 4 | 0;
         $10 = $10 - 1 | 0;
         if ($10) {
          continue
         }
         break;
        };
       }
       if (HEAPU8[$0 + 120 | 0]) {
        break label$83
       }
       break label$82;
      }
      if (!$6 | !HEAPU8[$0 + 120 | 0]) {
       break label$82
      }
     }
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 116 >> 2] = $2;
    HEAP32[$0 + 112 >> 2] = $3;
    HEAP8[$0 + 120 | 0] = 1;
   }
   HEAP32[$0 + 108 >> 2] = $3;
  }
  $8 = HEAP32[$0 + 148 >> 2];
  if (!(($4 | 0) <= ($8 | 0) | ($4 | 0) <= HEAP32[$0 + 152 >> 2])) {
   label$90 : {
    if (!$4) {
     $2 = 0;
     break label$90;
    }
    $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
    $8 = HEAP32[$0 + 148 >> 2];
   }
   $6 = HEAP32[$0 + 156 >> 2];
   label$92 : {
    label$93 : {
     if (($8 | 0) > 0) {
      $10 = $8 & 3;
      $9 = 0;
      if ($8 - 1 >>> 0 >= 3) {
       $14 = $8 & -4;
       $8 = 0;
       while (1) {
        $1 = $2 + $8 | 0;
        $7 = $6 + $8 | 0;
        HEAP32[$1 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$1 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
        HEAP32[$1 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
        $8 = $8 + 16 | 0;
        $9 = $9 + 4 | 0;
        if (($14 | 0) != ($9 | 0)) {
         continue
        }
        break;
       };
      }
      if ($10) {
       $1 = $9 << 2;
       $8 = $1 + $2 | 0;
       $1 = $1 + $6 | 0;
       while (1) {
        HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
        $8 = $8 + 4 | 0;
        $1 = $1 + 4 | 0;
        $10 = $10 - 1 | 0;
        if ($10) {
         continue
        }
        break;
       };
      }
      if (HEAPU8[$0 + 160 | 0]) {
       break label$93
      }
      break label$92;
     }
     if (!$6 | !HEAPU8[$0 + 160 | 0]) {
      break label$92
     }
    }
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$0 + 156 >> 2] = $2;
   HEAP32[$0 + 152 >> 2] = $4;
   HEAP8[$0 + 160 | 0] = 1;
  }
  HEAP32[$0 + 148 >> 2] = $4;
  label$99 : {
   if (($5 | 0) <= 0) {
    break label$99
   }
   $9 = $5 & 7;
   $2 = HEAP32[$0 + 136 >> 2];
   $8 = 0;
   if ($5 - 1 >>> 0 >= 7) {
    $1 = $2 + 16 | 0;
    $5 = $5 & -8;
    while (1) {
     HEAP32[$1 + 12 >> 2] = $8 + 7;
     HEAP32[$1 + 8 >> 2] = $8 + 6;
     HEAP32[$1 + 4 >> 2] = $8 + 5;
     HEAP32[$1 >> 2] = $8 + 4;
     HEAP32[$1 - 4 >> 2] = $8 + 3;
     HEAP32[$1 - 8 >> 2] = $8 + 2;
     HEAP32[$1 - 12 >> 2] = $8 + 1;
     HEAP32[$1 - 16 >> 2] = $8;
     $1 = $1 + 32 | 0;
     $8 = $8 + 8 | 0;
     if (($5 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$9) {
    break label$99
   }
   $1 = $2 + ($8 << 2) | 0;
   while (1) {
    HEAP32[$1 >> 2] = $8;
    $1 = $1 + 4 | 0;
    $8 = $8 + 1 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue
    }
    break;
   };
  }
  label$103 : {
   if (($3 | 0) <= 0) {
    break label$103
   }
   $9 = $3 & 7;
   $2 = HEAP32[$0 + 116 >> 2];
   $8 = 0;
   if ($3 - 1 >>> 0 >= 7) {
    $1 = $2 + 16 | 0;
    $3 = $3 & -8;
    while (1) {
     HEAP32[$1 + 12 >> 2] = $8 + 7;
     HEAP32[$1 + 8 >> 2] = $8 + 6;
     HEAP32[$1 + 4 >> 2] = $8 + 5;
     HEAP32[$1 >> 2] = $8 + 4;
     HEAP32[$1 - 4 >> 2] = $8 + 3;
     HEAP32[$1 - 8 >> 2] = $8 + 2;
     HEAP32[$1 - 12 >> 2] = $8 + 1;
     HEAP32[$1 - 16 >> 2] = $8;
     $1 = $1 + 32 | 0;
     $8 = $8 + 8 | 0;
     if (($3 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$9) {
    break label$103
   }
   $1 = $2 + ($8 << 2) | 0;
   while (1) {
    HEAP32[$1 >> 2] = $8;
    $1 = $1 + 4 | 0;
    $8 = $8 + 1 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue
    }
    break;
   };
  }
  label$107 : {
   if (($4 | 0) <= 0) {
    break label$107
   }
   $9 = $4 & 7;
   $0 = HEAP32[$0 + 156 >> 2];
   $8 = 0;
   if ($4 - 1 >>> 0 >= 7) {
    $1 = $0 + 16 | 0;
    $2 = $4 & -8;
    while (1) {
     HEAP32[$1 + 12 >> 2] = $8 + 7;
     HEAP32[$1 + 8 >> 2] = $8 + 6;
     HEAP32[$1 + 4 >> 2] = $8 + 5;
     HEAP32[$1 >> 2] = $8 + 4;
     HEAP32[$1 - 4 >> 2] = $8 + 3;
     HEAP32[$1 - 8 >> 2] = $8 + 2;
     HEAP32[$1 - 12 >> 2] = $8 + 1;
     HEAP32[$1 - 16 >> 2] = $8;
     $1 = $1 + 32 | 0;
     $8 = $8 + 8 | 0;
     if (($2 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$9) {
    break label$107
   }
   $1 = $0 + ($8 << 2) | 0;
   while (1) {
    HEAP32[$1 >> 2] = $8;
    $1 = $1 + 4 | 0;
    $8 = $8 + 1 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $16 + 496 | 0;
  return 0.0;
 }
 
 function btSequentialImpulseConstraintSolver__solveSingleIteration_28int_2c_20btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  label$1 : {
   if (!(HEAP8[$8 + 144 | 0] & 1)) {
    break label$1
   }
   $16 = HEAP32[$0 + 68 >> 2];
   $14 = HEAP32[$0 + 28 >> 2];
   $15 = HEAP32[$0 + 48 >> 2];
   if (($15 | 0) > 0) {
    $4 = Math_imul(HEAP32[$0 + 240 >> 2], 1664525) + 1013904223 | 0;
    label$3 : {
     if (($15 | 0) == 1) {
      break label$3
     }
     $11 = HEAP32[$0 + 136 >> 2];
     $2 = HEAP32[$11 + 4 >> 2];
     $4 = Math_imul($4, 1664525) + 1013904223 | 0;
     $3 = $4 ^ $4 >>> 16;
     $3 = $3 >>> 8 ^ $3;
     $3 = $3 >>> 4 ^ $3;
     $3 = $3 >>> 2 ^ $3;
     $3 = $11 + ((($3 >>> 1 ^ $3) & 1) << 2) | 0;
     HEAP32[$11 + 4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $2;
     if (($15 | 0) == 2) {
      break label$3
     }
     $2 = HEAP32[$11 + 8 >> 2];
     $4 = Math_imul($4, 1664525) + 1013904223 | 0;
     $3 = $4 ^ $4 >>> 16;
     $3 = $3 >>> 8 ^ $3;
     $3 = $3 >>> 4 ^ $3;
     $3 = $11 + ((($3 >>> 2 ^ $3) >>> 0) % 3 << 2) | 0;
     HEAP32[$11 + 8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $2;
     if (($15 | 0) == 3) {
      break label$3
     }
     $2 = HEAP32[$11 + 12 >> 2];
     $4 = Math_imul($4, 1664525) + 1013904223 | 0;
     $3 = $4 ^ $4 >>> 16;
     $3 = $3 >>> 8 ^ $3;
     $3 = $3 >>> 4 ^ $3;
     $3 = $11 + ((($3 >>> 2 ^ $3) & 3) << 2) | 0;
     HEAP32[$11 + 12 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $2;
     if (($15 | 0) == 4) {
      break label$3
     }
     $9 = $11 + 16 | 0;
     $2 = 4;
     while (1) {
      $3 = $2;
      $2 = $3 + 1 | 0;
      $17 = HEAP32[$9 >> 2];
      $4 = Math_imul($4, 1664525) + 1013904223 | 0;
      $5 = $4;
      label$5 : {
       if ($3 >>> 0 > 65535) {
        break label$5
       }
       $5 = $4 >>> 16 ^ $4;
       if ($3 >>> 0 > 255) {
        break label$5
       }
       $5 = $5 >>> 8 ^ $5;
       if ($3 >>> 0 > 15) {
        break label$5
       }
       $5 = $5 >>> 4 ^ $5;
      }
      $3 = $11 + (($5 >>> 0) % ($2 >>> 0) << 2) | 0;
      HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$3 >> 2] = $17;
      $9 = $9 + 4 | 0;
      if (($2 | 0) != ($15 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 240 >> 2] = $4;
   }
   if (HEAP32[$8 + 40 >> 2] <= ($1 | 0)) {
    break label$1
   }
   if (($14 | 0) > 0) {
    $4 = Math_imul(HEAP32[$0 + 240 >> 2], 1664525) + 1013904223 | 0;
    label$7 : {
     if (($14 | 0) == 1) {
      break label$7
     }
     $11 = HEAP32[$0 + 116 >> 2];
     $2 = HEAP32[$11 + 4 >> 2];
     $4 = Math_imul($4, 1664525) + 1013904223 | 0;
     $3 = $4 ^ $4 >>> 16;
     $3 = $3 >>> 8 ^ $3;
     $3 = $3 >>> 4 ^ $3;
     $3 = $3 >>> 2 ^ $3;
     $3 = $11 + ((($3 >>> 1 ^ $3) & 1) << 2) | 0;
     HEAP32[$11 + 4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $2;
     if (($14 | 0) == 2) {
      break label$7
     }
     $2 = HEAP32[$11 + 8 >> 2];
     $4 = Math_imul($4, 1664525) + 1013904223 | 0;
     $3 = $4 ^ $4 >>> 16;
     $3 = $3 >>> 8 ^ $3;
     $3 = $3 >>> 4 ^ $3;
     $3 = $11 + ((($3 >>> 2 ^ $3) >>> 0) % 3 << 2) | 0;
     HEAP32[$11 + 8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $2;
     if (($14 | 0) == 3) {
      break label$7
     }
     $2 = HEAP32[$11 + 12 >> 2];
     $4 = Math_imul($4, 1664525) + 1013904223 | 0;
     $3 = $4 ^ $4 >>> 16;
     $3 = $3 >>> 8 ^ $3;
     $3 = $3 >>> 4 ^ $3;
     $3 = $11 + ((($3 >>> 2 ^ $3) & 3) << 2) | 0;
     HEAP32[$11 + 12 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $2;
     if (($14 | 0) == 4) {
      break label$7
     }
     $9 = $11 + 16 | 0;
     $2 = 4;
     while (1) {
      $3 = $2;
      $2 = $3 + 1 | 0;
      $15 = HEAP32[$9 >> 2];
      $4 = Math_imul($4, 1664525) + 1013904223 | 0;
      $5 = $4;
      label$9 : {
       if ($3 >>> 0 > 65535) {
        break label$9
       }
       $5 = $4 >>> 16 ^ $4;
       if ($3 >>> 0 > 255) {
        break label$9
       }
       $5 = $5 >>> 8 ^ $5;
       if ($3 >>> 0 > 15) {
        break label$9
       }
       $5 = $5 >>> 4 ^ $5;
      }
      $3 = $11 + (($5 >>> 0) % ($2 >>> 0) << 2) | 0;
      HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$3 >> 2] = $15;
      $9 = $9 + 4 | 0;
      if (($2 | 0) != ($14 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 240 >> 2] = $4;
   }
   if (($16 | 0) <= 0) {
    break label$1
   }
   $4 = Math_imul(HEAP32[$0 + 240 >> 2], 1664525) + 1013904223 | 0;
   label$10 : {
    if (($16 | 0) == 1) {
     break label$10
    }
    $11 = HEAP32[$0 + 156 >> 2];
    $2 = HEAP32[$11 + 4 >> 2];
    $4 = Math_imul($4, 1664525) + 1013904223 | 0;
    $3 = $4 ^ $4 >>> 16;
    $3 = $3 >>> 8 ^ $3;
    $3 = $3 >>> 4 ^ $3;
    $3 = $3 >>> 2 ^ $3;
    $3 = $11 + ((($3 >>> 1 ^ $3) & 1) << 2) | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $2;
    if (($16 | 0) == 2) {
     break label$10
    }
    $2 = HEAP32[$11 + 8 >> 2];
    $4 = Math_imul($4, 1664525) + 1013904223 | 0;
    $3 = $4 ^ $4 >>> 16;
    $3 = $3 >>> 8 ^ $3;
    $3 = $3 >>> 4 ^ $3;
    $3 = $11 + ((($3 >>> 2 ^ $3) >>> 0) % 3 << 2) | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $2;
    if (($16 | 0) == 3) {
     break label$10
    }
    $2 = HEAP32[$11 + 12 >> 2];
    $4 = Math_imul($4, 1664525) + 1013904223 | 0;
    $3 = $4 ^ $4 >>> 16;
    $3 = $3 >>> 8 ^ $3;
    $3 = $3 >>> 4 ^ $3;
    $3 = $11 + ((($3 >>> 2 ^ $3) & 3) << 2) | 0;
    HEAP32[$11 + 12 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $2;
    if (($16 | 0) == 4) {
     break label$10
    }
    $9 = $11 + 16 | 0;
    $2 = 4;
    while (1) {
     $3 = $2;
     $2 = $3 + 1 | 0;
     $14 = HEAP32[$9 >> 2];
     $4 = Math_imul($4, 1664525) + 1013904223 | 0;
     $5 = $4;
     label$12 : {
      if ($3 >>> 0 > 65535) {
       break label$12
      }
      $5 = $4 >>> 16 ^ $4;
      if ($3 >>> 0 > 255) {
       break label$12
      }
      $5 = $5 >>> 8 ^ $5;
      if ($3 >>> 0 > 15) {
       break label$12
      }
      $5 = $5 >>> 4 ^ $5;
     }
     $3 = $11 + (($5 >>> 0) % ($2 >>> 0) << 2) | 0;
     HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $14;
     $9 = $9 + 4 | 0;
     if (($2 | 0) != ($16 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 240 >> 2] = $4;
  }
  $5 = HEAP32[$0 + 48 >> 2];
  if (($5 | 0) > 0) {
   $4 = 0;
   $2 = 0;
   while (1) {
    $3 = HEAP32[$0 + 56 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 136 >> 2] + $4 >> 2], 288) | 0;
    if (($1 | 0) < HEAP32[$3 + 272 >> 2]) {
     $5 = HEAP32[$0 + 16 >> 2];
     $10 = +FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($5 + Math_imul(HEAP32[$3 + 280 >> 2], 488) | 0, $5 + Math_imul(HEAP32[$3 + 284 >> 2], 488) | 0, $3);
     $13 = $10 * $10 + $13;
     $5 = HEAP32[$0 + 48 >> 2];
    }
    $4 = $4 + 4 | 0;
    $2 = $2 + 1 | 0;
    if (($5 | 0) > ($2 | 0)) {
     continue
    }
    break;
   };
  }
  label$16 : {
   if (HEAP32[$8 + 40 >> 2] <= ($1 | 0)) {
    break label$16
   }
   if (($7 | 0) > 0) {
    while (1) {
     $1 = HEAP32[$6 >> 2];
     if (HEAPU8[$1 + 24 | 0]) {
      $1 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, HEAP32[$1 + 32 >> 2], HEAPF64[$8 + 24 >> 3]);
      $2 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20double_29($0, HEAP32[HEAP32[$6 >> 2] + 36 >> 2], HEAPF64[$8 + 24 >> 3]);
      $3 = HEAP32[$6 >> 2];
      $4 = Math_imul($1, 488);
      $1 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $4 + $1 | 0, $1 + Math_imul($2, 488) | 0, HEAPF64[$8 + 24 >> 3]);
     }
     $6 = $6 + 4 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue
     }
     break;
    }
   }
   $4 = HEAP32[$0 + 28 >> 2];
   $1 = HEAP32[$8 + 144 >> 2];
   label$20 : {
    if ($1 & 512) {
     if (($4 | 0) <= 0) {
      break label$20
     }
     $3 = ($1 & 16 ? 2 : 1) << 2;
     $6 = 0;
     $2 = 0;
     while (1) {
      $5 = HEAP32[$0 + 16 >> 2];
      $1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + $6 >> 2], 288) | 0;
      $10 = +FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($5 + Math_imul(HEAP32[$1 + 280 >> 2], 488) | 0, $5 + Math_imul(HEAP32[$1 + 284 >> 2], 488) | 0, $1);
      $13 = $10 * $10 + $13;
      $10 = HEAPF64[$1 + 200 >> 3];
      $5 = $10 > 0.0;
      if ($5) {
       $1 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 156 >> 2] + $2 >> 2], 288) | 0;
       $12 = HEAPF64[$1 + 208 >> 3];
       HEAPF64[$1 + 248 >> 3] = $10 * $12;
       HEAPF64[$1 + 240 >> 3] = $10 * -$12;
       $7 = HEAP32[$0 + 16 >> 2];
       $12 = +FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($7 + Math_imul(HEAP32[$1 + 280 >> 2], 488) | 0, $7 + Math_imul(HEAP32[$1 + 284 >> 2], 488) | 0, $1);
       $13 = $12 * $12 + $13;
      }
      if (!(!(HEAPU8[$8 + 144 | 0] & 16) | !$5)) {
       $1 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[(HEAP32[$0 + 156 >> 2] + $2 | 0) + 4 >> 2], 288) | 0;
       $12 = HEAPF64[$1 + 208 >> 3];
       HEAPF64[$1 + 248 >> 3] = $10 * $12;
       HEAPF64[$1 + 240 >> 3] = $10 * -$12;
       $5 = HEAP32[$0 + 16 >> 2];
       $10 = +FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($5 + Math_imul(HEAP32[$1 + 280 >> 2], 488) | 0, $5 + Math_imul(HEAP32[$1 + 284 >> 2], 488) | 0, $1);
       $13 = $10 * $10 + $13;
      }
      $6 = $6 + 4 | 0;
      $2 = $2 + $3 | 0;
      $4 = $4 - 1 | 0;
      if ($4) {
       continue
      }
      break;
     };
     break label$20;
    }
    if (($4 | 0) > 0) {
     $9 = 0;
     while (1) {
      $2 = HEAP32[$0 + 16 >> 2];
      $1 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + $9 >> 2], 288) | 0;
      $10 = +FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($2 + Math_imul(HEAP32[$1 + 280 >> 2], 488) | 0, $2 + Math_imul(HEAP32[$1 + 284 >> 2], 488) | 0, $1);
      $13 = $10 * $10 + $13;
      $9 = $9 + 4 | 0;
      $4 = $4 - 1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $6 = HEAP32[$0 + 68 >> 2];
    if (($6 | 0) <= 0) {
     break label$20
    }
    $9 = 0;
    while (1) {
     $1 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 156 >> 2] + $9 >> 2], 288) | 0;
     $10 = HEAPF64[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$1 + 276 >> 2], 288) | 0) + 200 >> 3];
     if ($10 > 0.0) {
      $12 = HEAPF64[$1 + 208 >> 3];
      HEAPF64[$1 + 248 >> 3] = $10 * $12;
      HEAPF64[$1 + 240 >> 3] = $10 * -$12;
      $2 = HEAP32[$0 + 16 >> 2];
      $10 = +FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($2 + Math_imul(HEAP32[$1 + 280 >> 2], 488) | 0, $2 + Math_imul(HEAP32[$1 + 284 >> 2], 488) | 0, $1);
      $13 = $10 * $10 + $13;
     }
     $9 = $9 + 4 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   $6 = HEAP32[$0 + 88 >> 2];
   if (($6 | 0) <= 0) {
    break label$16
   }
   $9 = 0;
   while (1) {
    $1 = HEAP32[$0 + 96 >> 2] + $9 | 0;
    $10 = HEAPF64[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$1 + 276 >> 2], 288) | 0) + 200 >> 3];
    if ($10 > 0.0) {
     $12 = $10;
     $10 = HEAPF64[$1 + 208 >> 3];
     $12 = $12 * $10;
     $10 = $10 < $12 ? $10 : $12;
     HEAPF64[$1 + 248 >> 3] = $10;
     HEAPF64[$1 + 240 >> 3] = -$10;
     $2 = HEAP32[$0 + 16 >> 2];
     $10 = +FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($2 + Math_imul(HEAP32[$1 + 280 >> 2], 488) | 0, $2 + Math_imul(HEAP32[$1 + 284 >> 2], 488) | 0, $1);
     $13 = $10 * $10 + $13;
    }
    $9 = $9 + 288 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  return +$13;
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySplitImpulseIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0.0, $10 = 0.0;
  label$1 : {
   if (!HEAP32[$7 + 104 >> 2]) {
    break label$1
   }
   $1 = HEAP32[$7 + 40 >> 2];
   if (($1 | 0) <= 0) {
    break label$1
   }
   $2 = HEAP32[$0 + 28 >> 2];
   if (($2 | 0) <= 0) {
    break label$1
   }
   $3 = 0;
   while (1) {
    $9 = 0.0;
    if (($2 | 0) > 0) {
     $1 = 0;
     while (1) {
      $5 = HEAP32[$0 + 16 >> 2];
      $4 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + $1 >> 2], 288) | 0;
      $10 = +FUNCTION_TABLE[HEAP32[$0 + 220 >> 2]]($5 + Math_imul(HEAP32[$4 + 280 >> 2], 488) | 0, Math_imul(HEAP32[$4 + 284 >> 2], 488) + $5 | 0, $4);
      $9 = $10 * $10 + $9;
      $1 = $1 + 4 | 0;
      $2 = $2 - 1 | 0;
      if ($2) {
       continue
      }
      break;
     };
     $1 = HEAP32[$7 + 40 >> 2];
    }
    if (($1 - 1 | 0) <= ($3 | 0) | HEAPF64[$7 + 176 >> 3] >= $9) {
     break label$1
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) >= ($1 | 0)) {
     break label$1
    }
    $2 = HEAP32[$0 + 28 >> 2];
    continue;
   };
  }
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0;
  $11 = __stack_pointer - 16 | 0;
  __stack_pointer = $11;
  CProfileSample__CProfileSample_28char_20const__29($11 + 8 | 0, 3060);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8);
  $9 = HEAP32[$0 + 184 >> 2];
  $10 = HEAP32[$7 + 40 >> 2];
  $10 = ($9 | 0) > ($10 | 0) ? $9 : $10;
  label$1 : {
   if (($10 | 0) <= 0) {
    break label$1
   }
   $13 = $10 - 1 | 0;
   $9 = 0;
   while (1) {
    $12 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $9, $1, $2, $3, $4, $5, $6, $7, $8);
    HEAPF64[$0 + 232 >> 3] = $12;
    if (($9 | 0) >= ($13 | 0) | HEAPF64[$7 + 176 >> 3] >= $12) {
     break label$1
    }
    $9 = $9 + 1 | 0;
    if (($10 | 0) > ($9 | 0)) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $11 + 16 | 0;
  return 0.0;
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyFinish_28btCollisionObject___2c_20int_2c_20btContactSolverInfo_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0;
  $1 = HEAP32[$3 + 144 >> 2];
  label$1 : {
   if (!($1 & 4)) {
    break label$1
   }
   $2 = HEAP32[$0 + 28 >> 2];
   if (($2 | 0) <= 0) {
    break label$1
   }
   $5 = HEAP32[$0 + 76 >> 2];
   $4 = HEAP32[$0 + 36 >> 2];
   if ($1 & 16) {
    $1 = $4 + 276 | 0;
    while (1) {
     $8 = HEAP32[$1 - 12 >> 2];
     HEAPF64[$8 + 224 >> 3] = HEAPF64[$1 - 76 >> 3];
     $4 = $5 + Math_imul(HEAP32[$1 >> 2], 288) | 0;
     HEAPF64[$8 + 232 >> 3] = HEAPF64[$4 + 200 >> 3];
     HEAPF64[$8 + 240 >> 3] = HEAPF64[$4 + 488 >> 3];
     $1 = $1 + 288 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    };
    break label$1;
   }
   if (($2 | 0) != 1) {
    $1 = $4 + 488 | 0;
    $14 = $2 & -2;
    while (1) {
     $6 = HEAP32[$1 - 224 >> 2];
     HEAPF64[$6 + 224 >> 3] = HEAPF64[$1 - 288 >> 3];
     HEAPF64[$6 + 232 >> 3] = HEAPF64[($5 + Math_imul(HEAP32[$1 - 212 >> 2], 288) | 0) + 200 >> 3];
     $6 = HEAP32[$1 - -64 >> 2];
     HEAPF64[$6 + 224 >> 3] = HEAPF64[$1 >> 3];
     HEAPF64[$6 + 232 >> 3] = HEAPF64[($5 + Math_imul(HEAP32[$1 + 76 >> 2], 288) | 0) + 200 >> 3];
     $1 = $1 + 576 | 0;
     $8 = $8 + 2 | 0;
     if (($14 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   if (!($2 & 1)) {
    break label$1
   }
   $1 = $4 + Math_imul($8, 288) | 0;
   $2 = HEAP32[$1 + 264 >> 2];
   HEAPF64[$2 + 224 >> 3] = HEAPF64[$1 + 200 >> 3];
   HEAPF64[$2 + 232 >> 3] = HEAPF64[($5 + Math_imul(HEAP32[$1 + 276 >> 2], 288) | 0) + 200 >> 3];
  }
  $4 = HEAP32[$0 + 48 >> 2];
  if (($4 | 0) > 0) {
   $1 = HEAP32[$0 + 56 >> 2] + 200 | 0;
   while (1) {
    $5 = HEAP32[$1 - -64 >> 2];
    $2 = HEAP32[$5 + 56 >> 2];
    if ($2) {
     $8 = HEAP32[$5 + 32 >> 2];
     $11 = HEAPF64[$8 + 760 >> 3];
     $12 = HEAPF64[$1 - 152 >> 3];
     $13 = HEAPF64[$8 + 752 >> 3];
     $15 = HEAPF64[$1 - 160 >> 3];
     $9 = HEAPF64[$1 >> 3];
     $10 = 1.0 / HEAPF64[$3 + 24 >> 3];
     HEAPF64[$2 >> 3] = HEAPF64[$2 >> 3] + HEAPF64[$1 - 168 >> 3] * $9 * HEAPF64[$8 + 744 >> 3] * $10;
     HEAPF64[$2 + 8 >> 3] = $13 * ($9 * $15) * $10 + HEAPF64[$2 + 8 >> 3];
     HEAPF64[$2 + 16 >> 3] = $11 * ($9 * $12) * $10 + HEAPF64[$2 + 16 >> 3];
     $14 = HEAP32[$5 + 36 >> 2];
     $11 = HEAPF64[$14 + 760 >> 3];
     $12 = HEAPF64[$1 - 88 >> 3];
     $13 = HEAPF64[$14 + 752 >> 3];
     $15 = HEAPF64[$1 - 96 >> 3];
     $9 = HEAPF64[$1 >> 3];
     $10 = 1.0 / HEAPF64[$3 + 24 >> 3];
     HEAPF64[$2 + 64 >> 3] = HEAPF64[$2 + 64 >> 3] + HEAPF64[$1 - 104 >> 3] * $9 * HEAPF64[$14 + 744 >> 3] * $10;
     $6 = $2 + 72 | 0;
     HEAPF64[$6 >> 3] = $13 * ($9 * $15) * $10 + HEAPF64[$6 >> 3];
     $6 = $2 + 80 | 0;
     HEAPF64[$6 >> 3] = $11 * ($9 * $12) * $10 + HEAPF64[$6 >> 3];
     $11 = HEAPF64[$8 + 1120 >> 3];
     $12 = HEAPF64[$1 - 184 >> 3];
     $13 = HEAPF64[$8 + 1112 >> 3];
     $15 = HEAPF64[$1 - 192 >> 3];
     $9 = HEAPF64[$1 >> 3];
     $10 = 1.0 / HEAPF64[$3 + 24 >> 3];
     HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 32 >> 3] + HEAPF64[$1 - 200 >> 3] * HEAPF64[$8 + 1104 >> 3] * $9 * $10;
     $8 = $2 + 40 | 0;
     HEAPF64[$8 >> 3] = $9 * ($15 * $13) * $10 + HEAPF64[$8 >> 3];
     $8 = $2 + 48 | 0;
     HEAPF64[$8 >> 3] = $9 * ($12 * $11) * $10 + HEAPF64[$8 >> 3];
     $11 = HEAPF64[$14 + 1120 >> 3];
     $12 = HEAPF64[$1 - 120 >> 3];
     $13 = HEAPF64[$14 + 1112 >> 3];
     $15 = HEAPF64[$1 - 128 >> 3];
     $9 = HEAPF64[$1 >> 3];
     $10 = 1.0 / HEAPF64[$3 + 24 >> 3];
     HEAPF64[$2 + 96 >> 3] = HEAPF64[$2 + 96 >> 3] + HEAPF64[$1 - 136 >> 3] * HEAPF64[$14 + 1104 >> 3] * $9 * $10;
     $8 = $2 + 104 | 0;
     HEAPF64[$8 >> 3] = $9 * ($15 * $13) * $10 + HEAPF64[$8 >> 3];
     $2 = $2 + 112 | 0;
     HEAPF64[$2 >> 3] = $9 * ($12 * $11) * $10 + HEAPF64[$2 >> 3];
    }
    $9 = HEAPF64[$1 >> 3];
    HEAPF64[$5 + 40 >> 3] = $9;
    if (HEAPF64[$5 + 16 >> 3] <= Math_abs($9)) {
     HEAP8[$5 + 24 | 0] = 0
    }
    $1 = $1 + 288 | 0;
    $4 = $4 - 1 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  $4 = HEAP32[$0 + 8 >> 2];
  if (($4 | 0) > 0) {
   $2 = HEAP32[$0 + 16 >> 2];
   $14 = 0;
   $8 = 352;
   while (1) {
    $5 = $2 + $8 | 0;
    $1 = HEAP32[$5 + 128 >> 2];
    if ($1) {
     label$13 : {
      if (HEAP32[$3 + 104 >> 2]) {
       $13 = HEAPF64[$3 + 24 >> 3];
       $9 = HEAPF64[$3 + 120 >> 3];
       $2 = __stack_pointer - 160 | 0;
       __stack_pointer = $2;
       $1 = $5 - 352 | 0;
       label$10 : {
        if (!HEAP32[$1 + 480 >> 2]) {
         break label$10
        }
        HEAPF64[$1 + 352 >> 3] = HEAPF64[$1 + 128 >> 3] + HEAPF64[$1 + 352 >> 3];
        HEAPF64[$1 + 384 >> 3] = HEAPF64[$1 + 160 >> 3] + HEAPF64[$1 + 384 >> 3];
        $5 = $1 + 360 | 0;
        HEAPF64[$5 >> 3] = HEAPF64[$1 + 136 >> 3] + HEAPF64[$5 >> 3];
        $5 = $1 + 368 | 0;
        HEAPF64[$5 >> 3] = HEAPF64[$1 + 144 >> 3] + HEAPF64[$5 >> 3];
        $5 = $1 + 392 | 0;
        HEAPF64[$5 >> 3] = HEAPF64[$1 + 168 >> 3] + HEAPF64[$5 >> 3];
        $5 = $1 + 400 | 0;
        HEAPF64[$5 >> 3] = HEAPF64[$1 + 176 >> 3] + HEAPF64[$5 >> 3];
        $11 = HEAPF64[$1 + 320 >> 3];
        label$2 : {
         if (!(!(HEAPF64[$1 + 288 >> 3] != 0.0 | HEAPF64[$1 + 296 >> 3] != 0.0) & HEAPF64[$1 + 304 >> 3] == 0.0)) {
          $10 = HEAPF64[$1 + 336 >> 3];
          $12 = HEAPF64[$1 + 328 >> 3];
          break label$2;
         }
         $10 = HEAPF64[$1 + 336 >> 3];
         $12 = HEAPF64[$1 + 328 >> 3];
         if ($11 != 0.0 | $12 != 0.0) {
          break label$2
         }
         if ($10 == 0.0) {
          break label$10
         }
        }
        HEAP32[$2 + 24 >> 2] = 0;
        HEAP32[$2 + 28 >> 2] = 0;
        HEAPF64[$2 + 16 >> 3] = $10 * $9;
        HEAPF64[$2 + 8 >> 3] = $12 * $9;
        HEAPF64[$2 >> 3] = $11 * $9;
        $5 = $2 + 32 | 0;
        btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btTransform__29($1, $1 + 288 | 0, $2, $13, $5);
        $4 = $5 + 24 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 24 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 16 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 16 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 8 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 8 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = HEAP32[$2 + 36 >> 2];
        HEAP32[$1 >> 2] = HEAP32[$2 + 32 >> 2];
        HEAP32[$1 + 4 >> 2] = $4;
        $4 = HEAP32[$2 + 68 >> 2];
        HEAP32[$1 + 32 >> 2] = HEAP32[$2 + 64 >> 2];
        HEAP32[$1 + 36 >> 2] = $4;
        $4 = $5 + 40 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 40 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 48 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 48 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 56 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 56 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = HEAP32[$2 + 100 >> 2];
        HEAP32[$1 + 64 >> 2] = HEAP32[$2 + 96 >> 2];
        HEAP32[$1 + 68 >> 2] = $4;
        $4 = $5 + 72 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 72 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 80 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 80 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 88 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 88 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 120 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 120 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $5 + 112 | 0;
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $1 + 112 | 0;
        HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $5 = $5 + 104 | 0;
        $4 = HEAP32[$5 + 4 >> 2];
        $6 = $1 + 104 | 0;
        HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$6 + 4 >> 2] = $4;
        $5 = HEAP32[$2 + 132 >> 2];
        HEAP32[$1 + 96 >> 2] = HEAP32[$2 + 128 >> 2];
        HEAP32[$1 + 100 >> 2] = $5;
       }
       __stack_pointer = $2 + 160 | 0;
       $2 = HEAP32[$0 + 16 >> 2];
       $1 = $8 + $2 | 0;
       $11 = HEAPF64[$1 >> 3];
       $9 = HEAPF64[$1 + 16 >> 3];
       $10 = HEAPF64[$1 + 8 >> 3];
       $1 = HEAP32[$1 + 128 >> 2];
       break label$13;
      }
      $11 = HEAPF64[$5 - 224 >> 3] + HEAPF64[$5 >> 3];
      HEAPF64[$5 >> 3] = $11;
      $4 = $5 + 8 | 0;
      $10 = HEAPF64[$5 - 216 >> 3] + HEAPF64[$4 >> 3];
      HEAPF64[$4 >> 3] = $10;
      $4 = $5 + 16 | 0;
      $9 = HEAPF64[$5 - 208 >> 3] + HEAPF64[$4 >> 3];
      HEAPF64[$4 >> 3] = $9;
      $4 = $5 + 32 | 0;
      HEAPF64[$4 >> 3] = HEAPF64[$5 - 192 >> 3] + HEAPF64[$4 >> 3];
      $4 = $5 + 40 | 0;
      HEAPF64[$4 >> 3] = HEAPF64[$5 - 184 >> 3] + HEAPF64[$4 >> 3];
      $4 = $5 + 48 | 0;
      HEAPF64[$4 >> 3] = HEAPF64[$5 - 176 >> 3] + HEAPF64[$4 >> 3];
     }
     $2 = $2 + $8 | 0;
     $12 = HEAPF64[$2 - -64 >> 3];
     $13 = HEAPF64[$2 + 72 >> 3];
     $15 = HEAPF64[$2 + 80 >> 3];
     $2 = $1 + 696 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAPF64[$1 + 688 >> 3] = $9 + $15;
     HEAPF64[$1 + 680 >> 3] = $10 + $13;
     HEAPF64[$1 + 672 >> 3] = $11 + $12;
     HEAP32[$1 + 536 >> 2] = HEAP32[$1 + 536 >> 2] + 1;
     $1 = HEAP32[$0 + 16 >> 2] + $8 | 0;
     $9 = HEAPF64[$1 + 32 >> 3];
     $10 = HEAPF64[$1 + 96 >> 3];
     $11 = HEAPF64[$1 + 40 >> 3];
     $12 = HEAPF64[$1 + 104 >> 3];
     $13 = HEAPF64[$1 + 48 >> 3];
     $15 = HEAPF64[$1 + 112 >> 3];
     $1 = HEAP32[$1 + 128 >> 2];
     $2 = $1 + 728 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAPF64[$1 + 720 >> 3] = $13 + $15;
     HEAPF64[$1 + 712 >> 3] = $11 + $12;
     HEAPF64[$1 + 704 >> 3] = $9 + $10;
     HEAP32[$1 + 536 >> 2] = HEAP32[$1 + 536 >> 2] + 1;
     if (HEAP32[$3 + 104 >> 2]) {
      $2 = HEAP32[$0 + 16 >> 2] + $8 | 0;
      $1 = HEAP32[$2 + 128 >> 2];
      HEAP32[$1 + 536 >> 2] = HEAP32[$1 + 536 >> 2] + 1;
      $5 = $2 - 352 | 0;
      $4 = $5 + 24 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 + 32 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $4 = $5 + 16 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 + 24 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $4 = $5 + 8 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 + 16 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $4 = HEAP32[$5 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$1 + 12 >> 2] = $4;
      $5 = $2 - 320 | 0;
      $4 = $5 + 24 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 - -64 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $4 = $5 + 16 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 + 56 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $4 = $5 + 8 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 + 48 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $4 = HEAP32[$5 + 4 >> 2];
      $6 = $1 + 40 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $4;
      $5 = $2 - 288 | 0;
      $4 = HEAP32[$5 + 4 >> 2];
      $6 = $1 + 72 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $4;
      $4 = $5 + 8 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 + 80 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $4 = $5 + 16 | 0;
      $6 = HEAP32[$4 + 4 >> 2];
      $7 = $1 + 88 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $5 = $5 + 24 | 0;
      $4 = HEAP32[$5 + 4 >> 2];
      $6 = $1 + 96 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $4;
      $2 = $2 - 256 | 0;
      $5 = HEAP32[$2 + 4 >> 2];
      $4 = $1 + 104 | 0;
      HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$4 + 4 >> 2] = $5;
      $5 = $2 + 8 | 0;
      $4 = HEAP32[$5 + 4 >> 2];
      $6 = $1 + 112 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $4;
      $5 = $2 + 16 | 0;
      $4 = HEAP32[$5 + 4 >> 2];
      $6 = $1 + 120 | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = $4;
      $2 = $2 + 24 | 0;
      $5 = HEAP32[$2 + 4 >> 2];
      $1 = $1 + 128 | 0;
      HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$1 + 4 >> 2] = $5;
     }
     $2 = HEAP32[$0 + 16 >> 2];
     HEAP32[HEAP32[($8 + $2 | 0) + 128 >> 2] + 400 >> 2] = -1;
     $4 = HEAP32[$0 + 8 >> 2];
    }
    $8 = $8 + 488 | 0;
    $14 = $14 + 1 | 0;
    if (($14 | 0) < ($4 | 0)) {
     continue
    }
    break;
   };
  }
  if ((HEAP32[$0 + 28 >> 2] & HEAP32[$0 + 32 >> 2]) < 0) {
   $1 = HEAP32[$0 + 36 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP8[$0 + 40 | 0] = 1;
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  if ((HEAP32[$0 + 48 >> 2] & HEAP32[$0 + 52 >> 2]) < 0) {
   $1 = HEAP32[$0 + 56 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP8[$0 + 60 | 0] = 1;
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 48 >> 2] = 0;
  if ((HEAP32[$0 + 68 >> 2] & HEAP32[$0 + 72 >> 2]) < 0) {
   $1 = HEAP32[$0 + 76 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 80 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP8[$0 + 80 | 0] = 1;
   HEAP32[$0 + 72 >> 2] = 0;
   HEAP32[$0 + 76 >> 2] = 0;
  }
  HEAP32[$0 + 68 >> 2] = 0;
  if ((HEAP32[$0 + 88 >> 2] & HEAP32[$0 + 92 >> 2]) < 0) {
   $1 = HEAP32[$0 + 96 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 100 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP8[$0 + 100 | 0] = 1;
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 96 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  if ((HEAP32[$0 + 8 >> 2] & HEAP32[$0 + 12 >> 2]) < 0) {
   $1 = HEAP32[$0 + 16 >> 2];
   if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP8[$0 + 20 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 8 >> 2] = 0;
  return 0.0;
 }
 
 function btSequentialImpulseConstraintSolver__solveGroup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__2c_20btDispatcher__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  CProfileSample__CProfileSample_28char_20const__29($9 + 8 | 0, 3234);
  +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8);
  +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8);
  +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $7);
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $9 + 16 | 0;
  return 0.0;
 }
 
 function btSequentialImpulseConstraintSolver__reset_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 + 240 >> 2] = 0;
 }
 
 function btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4) {
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = 25988;
  return $0;
 }
 
 function btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0;
  $7 = __stack_pointer - 416 | 0;
  __stack_pointer = $7;
  label$1 : {
   if (HEAP32[$0 + 16 >> 2]) {
    btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
    $8 = HEAP32[$0 + 12 >> 2];
    $4 = HEAP32[$8 + 4 >> 2];
    $5 = HEAP32[$0 + 16 >> 2];
    $6 = HEAP32[$5 + 4 >> 2];
    $13 = +FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 48 >> 2]]($8);
    $24 = HEAP32[$0 + 16 >> 2];
    $11 = +FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 48 >> 2]]($24);
    $24 = HEAP32[$0 + 4 >> 2];
    $32 = HEAP32[$0 + 8 >> 2];
    $0 = $7 + 296 | 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 >> 2] = 15044;
    HEAP32[$0 + 108 >> 2] = 1;
    HEAP32[$0 + 112 >> 2] = 1;
    HEAP32[$0 + 96 >> 2] = -1;
    HEAP8[$0 + 80 | 0] = 0;
    HEAPF64[$0 + 72 >> 3] = $11;
    HEAPF64[$0 + 64 >> 3] = $13;
    HEAP32[$0 + 60 >> 2] = $6;
    HEAP32[$0 + 56 >> 2] = $4;
    HEAP32[$0 + 52 >> 2] = $5;
    HEAP32[$0 + 48 >> 2] = $8;
    HEAP32[$0 + 44 >> 2] = $24;
    HEAP32[$0 + 40 >> 2] = $32;
    $8 = $0 + 24 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $8 = $0 + 16 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 1072693248;
    $8 = $0 + 32 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $8 = $0;
    $4 = $1 + 8 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $0 = $7 + 32 | 0;
    $6 = $0 + 8 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 16 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 24 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 40 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 40 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 48 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 48 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 56 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 56 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 72 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 72 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 80 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 80 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 88 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 88 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    HEAP32[$7 + 288 >> 2] = 966823146;
    HEAP32[$7 + 292 >> 2] = 1177108057;
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$7 + 32 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$7 + 36 >> 2] = $4;
    $4 = HEAP32[$1 + 36 >> 2];
    HEAP32[$7 + 64 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$7 + 68 >> 2] = $4;
    $4 = HEAP32[$1 + 68 >> 2];
    HEAP32[$7 + 96 >> 2] = HEAP32[$1 + 64 >> 2];
    HEAP32[$7 + 100 >> 2] = $4;
    $4 = $1 + 120 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 120 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 112 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 112 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $1 + 104 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $0 + 104 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $2 + 24 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $7 + 184 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $2 + 16 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $7 + 176 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $2 + 8 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $7 + 168 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $2 + 56 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $7 + 216 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $2 + 48 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $7 + 208 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = $2 + 40 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $7 + 200 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $4 = HEAP32[$2 + 36 >> 2];
    $5 = $7 + 192 | 0;
    HEAP32[$5 >> 2] = HEAP32[$2 + 32 >> 2];
    HEAP32[$5 + 4 >> 2] = $4;
    $4 = HEAP32[$1 + 100 >> 2];
    HEAP32[$7 + 128 >> 2] = HEAP32[$1 + 96 >> 2];
    HEAP32[$7 + 132 >> 2] = $4;
    $1 = HEAP32[$2 + 4 >> 2];
    HEAP32[$7 + 160 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$7 + 164 >> 2] = $1;
    $1 = $2 + 88 | 0;
    $4 = HEAP32[$1 + 4 >> 2];
    $5 = $7 + 248 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 80 | 0;
    $4 = HEAP32[$1 + 4 >> 2];
    $5 = $7 + 240 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 72 | 0;
    $4 = HEAP32[$1 + 4 >> 2];
    $5 = $7 + 232 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = HEAP32[$2 + 68 >> 2];
    $4 = $7 + 224 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 + 64 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    $1 = $2 + 120 | 0;
    $4 = HEAP32[$1 + 4 >> 2];
    $5 = $7 + 280 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 112 | 0;
    $4 = HEAP32[$1 + 4 >> 2];
    $5 = $7 + 272 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $2 + 104 | 0;
    $4 = HEAP32[$1 + 4 >> 2];
    $5 = $7 + 264 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = HEAP32[$2 + 100 >> 2];
    $4 = $7 + 256 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 + 96 >> 2];
    HEAP32[$4 + 4 >> 2] = $1;
    btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($8, $0, $3, 0, 0);
    break label$1;
   }
   $27 = HEAPF64[$1 + 104 >> 3];
   $33 = HEAPF64[$1 + 112 >> 3];
   $4 = $2 + 104 | 0;
   $34 = HEAPF64[$4 >> 3];
   $5 = $2 + 112 | 0;
   $35 = HEAPF64[$5 >> 3];
   $15 = HEAPF64[$1 + 40 >> 3];
   $16 = HEAPF64[$1 + 72 >> 3];
   $6 = $2 + 40 | 0;
   $13 = HEAPF64[$6 >> 3];
   $24 = $2 + 72 | 0;
   $11 = HEAPF64[$24 >> 3];
   $32 = $2 + 48 | 0;
   $9 = HEAPF64[$32 >> 3];
   $12 = HEAPF64[$1 + 48 >> 3];
   $37 = $2 + 80 | 0;
   $10 = HEAPF64[$37 >> 3];
   $17 = HEAPF64[$1 + 80 >> 3];
   $36 = HEAPF64[$1 + 96 >> 3];
   $45 = HEAPF64[$2 + 96 >> 3];
   $8 = HEAP32[$0 + 12 >> 2];
   $18 = HEAPF64[$1 + 64 >> 3];
   $25 = HEAPF64[$1 + 32 >> 3];
   $19 = HEAPF64[$1 >> 3];
   $28 = HEAPF64[$1 + 8 >> 3];
   $20 = HEAPF64[$2 + 64 >> 3];
   $21 = HEAPF64[$2 + 32 >> 3];
   $22 = HEAPF64[$2 >> 3];
   $23 = HEAPF64[$2 + 8 >> 3];
   $0 = HEAP32[$0 + 20 >> 2];
   $14 = HEAPF64[$2 + 16 >> 3];
   $29 = HEAPF64[$1 + 16 >> 3];
   HEAP32[$7 + 320 >> 2] = 0;
   HEAP32[$7 + 324 >> 2] = 0;
   $38 = $17 * $20 + ($29 * $22 + $12 * $21);
   $30 = -HEAPF64[$0 + 88 >> 3];
   $39 = $17 * $11 + ($29 * $23 + $12 * $13);
   $1 = $0 + 96 | 0;
   $31 = HEAPF64[$1 >> 3];
   $29 = $17 * $10 + ($29 * $14 + $12 * $9);
   $40 = $0 + 104 | 0;
   $12 = HEAPF64[$40 >> 3];
   HEAPF64[$7 + 312 >> 3] = $38 * $30 - $39 * $31 - $29 * $12;
   $41 = $16 * $20 + ($28 * $22 + $15 * $21);
   $42 = $16 * $11 + ($28 * $23 + $15 * $13);
   $28 = $16 * $10 + ($28 * $14 + $15 * $9);
   HEAPF64[$7 + 304 >> 3] = $41 * $30 - $31 * $42 - $12 * $28;
   $43 = $18 * $20 + ($19 * $22 + $25 * $21);
   $26 = $43 * $30;
   $30 = $18 * $11 + ($19 * $23 + $25 * $13);
   $19 = $18 * $10 + ($19 * $14 + $25 * $9);
   HEAPF64[$7 + 296 >> 3] = $26 - $31 * $30 - $12 * $19;
   $44 = $7 + 296 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 64 >> 2]]($7 + 32 | 0, $8, $44);
   $15 = HEAPF64[$1 >> 3];
   $16 = HEAPF64[$40 >> 3];
   $31 = HEAPF64[$0 + 120 >> 3];
   $12 = HEAPF64[$0 + 88 >> 3];
   $17 = HEAPF64[$7 + 32 >> 3];
   $18 = HEAPF64[$7 + 40 >> 3];
   $25 = HEAPF64[$7 + 48 >> 3];
   HEAP32[$7 + 320 >> 2] = 0;
   HEAP32[$7 + 324 >> 2] = 0;
   $46 = $33 * $10 + ($36 * $14 + $27 * $9);
   $26 = $14;
   $14 = -$45;
   $9 = $46 + ($26 * $14 - $9 * $34 - $10 * $35) + ($25 * $29 + ($17 * $19 + $28 * $18));
   $26 = $9;
   $19 = $16 * $9;
   $9 = $33 * $20 + ($36 * $22 + $27 * $21) + ($22 * $14 - $21 * $34 - $20 * $35) + ($25 * $38 + ($17 * $43 + $41 * $18));
   $10 = $33 * $11 + ($36 * $23 + $27 * $13) + ($23 * $14 - $13 * $34 - $11 * $35) + ($25 * $39 + ($17 * $30 + $42 * $18));
   $13 = $19 + ($12 * $9 + $15 * $10) - $31;
   $11 = $26 - $16 * $13;
   $20 = HEAPF64[$37 >> 3];
   $9 = $9 - $12 * $13;
   $21 = HEAPF64[$2 + 64 >> 3];
   $10 = $10 - $15 * $13;
   $22 = HEAPF64[$24 >> 3];
   HEAPF64[$7 + 312 >> 3] = $11 * $20 + ($9 * $21 + $10 * $22) + HEAPF64[$5 >> 3];
   $23 = HEAPF64[$32 >> 3];
   $14 = HEAPF64[$2 + 32 >> 3];
   $27 = HEAPF64[$6 >> 3];
   HEAPF64[$7 + 304 >> 3] = $11 * $23 + ($9 * $14 + $10 * $27) + HEAPF64[$4 >> 3];
   $26 = $11;
   $11 = HEAPF64[$2 + 16 >> 3];
   $17 = $9;
   $9 = HEAPF64[$2 >> 3];
   $18 = $10;
   $10 = HEAPF64[$2 + 8 >> 3];
   HEAPF64[$7 + 296 >> 3] = $26 * $11 + ($17 * $9 + $18 * $10) + HEAPF64[$2 + 96 >> 3];
   HEAP32[$7 + 24 >> 2] = 0;
   HEAP32[$7 + 28 >> 2] = 0;
   HEAPF64[$7 + 16 >> 3] = $20 * $16 + ($21 * $12 + $15 * $22);
   HEAPF64[$7 + 8 >> 3] = $23 * $16 + ($14 * $12 + $15 * $27);
   HEAPF64[$7 >> 3] = $11 * $16 + ($9 * $12 + $15 * $10);
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $7, $44, $13);
  }
  __stack_pointer = $7 + 416 | 0;
 }
 
 function btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
  $6 = __stack_pointer - 592 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 584 >> 2] = 0;
  HEAP32[$6 + 588 >> 2] = 0;
  $18 = HEAPF64[$2 + 112 >> 3] - HEAPF64[$1 + 112 >> 3];
  HEAPF64[$6 + 576 >> 3] = $18;
  $19 = HEAPF64[$2 + 104 >> 3] - HEAPF64[$1 + 104 >> 3];
  HEAPF64[$6 + 568 >> 3] = $19;
  $24 = HEAPF64[$2 + 96 >> 3] - HEAPF64[$1 + 96 >> 3];
  HEAPF64[$6 + 560 >> 3] = $24;
  $8 = $2;
  $20 = $6 + 216 | 0;
  $2 = $6 + 88 | 0;
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20double__29($1, $8, $20, $2);
  HEAP32[$6 + 552 >> 2] = 0;
  HEAP32[$6 + 556 >> 2] = 0;
  $7 = HEAPF64[$6 + 88 >> 3];
  $11 = $7 * HEAPF64[$6 + 232 >> 3];
  HEAPF64[$6 + 544 >> 3] = $11;
  $14 = $7 * HEAPF64[$6 + 224 >> 3];
  HEAPF64[$6 + 536 >> 3] = $14;
  $7 = $7 * HEAPF64[$6 + 216 >> 3];
  HEAPF64[$6 + 528 >> 3] = $7;
  HEAP32[$6 + 520 >> 2] = 0;
  HEAP32[$6 + 524 >> 2] = 0;
  $25 = HEAPF64[$4 + 112 >> 3] - HEAPF64[$3 + 112 >> 3];
  HEAPF64[$6 + 512 >> 3] = $25;
  $26 = HEAPF64[$4 + 104 >> 3] - HEAPF64[$3 + 104 >> 3];
  HEAPF64[$6 + 504 >> 3] = $26;
  $27 = HEAPF64[$4 + 96 >> 3] - HEAPF64[$3 + 96 >> 3];
  HEAPF64[$6 + 496 >> 3] = $27;
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20double__29($3, $4, $20, $2);
  HEAP32[$6 + 488 >> 2] = 0;
  HEAP32[$6 + 492 >> 2] = 0;
  $12 = HEAPF64[$6 + 88 >> 3];
  $15 = $12 * HEAPF64[$6 + 232 >> 3];
  HEAPF64[$6 + 480 >> 3] = $15;
  $16 = $12 * HEAPF64[$6 + 224 >> 3];
  HEAPF64[$6 + 472 >> 3] = $16;
  $17 = $12 * HEAPF64[$6 + 216 >> 3];
  HEAPF64[$6 + 464 >> 3] = $17;
  $12 = 0.0;
  $4 = 0;
  $2 = HEAP32[$0 + 12 >> 2];
  $11 = Math_sqrt($11 * $11 + ($7 * $7 + $14 * $14)) * +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2);
  $2 = HEAP32[$0 + 16 >> 2];
  if ($2) {
   $12 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2)
  }
  $22 = $11 + $12 * Math_sqrt($15 * $15 + ($17 * $17 + $16 * $16));
  $14 = $25 - $18;
  $15 = $27 - $24;
  $16 = $26 - $19;
  label$2 : {
   if ($22 + Math_sqrt($14 * $14 + ($15 * $15 + $16 * $16)) == 0.0) {
    break label$2
   }
   HEAP8[$6 + 424 | 0] = 0;
   HEAP32[$6 + 416 >> 2] = 966823146;
   HEAP32[$6 + 420 >> 2] = 1177108057;
   HEAP32[$6 + 344 >> 2] = 15500;
   btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $1, $3, $6 + 344 | 0);
   $10 = $6 + 392 | 0;
   $13 = HEAP32[$10 + 4 >> 2];
   $2 = $6 + 440 | 0;
   HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$2 + 4 >> 2] = $13;
   $10 = $6 + 400 | 0;
   $13 = HEAP32[$10 + 4 >> 2];
   $20 = $6 + 432 | 0;
   $2 = $20 + 16 | 0;
   HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$2 + 4 >> 2] = $13;
   $10 = $6 + 408 | 0;
   $13 = HEAP32[$10 + 4 >> 2];
   $2 = $20 + 24 | 0;
   HEAP32[$2 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$2 + 4 >> 2] = $13;
   $2 = HEAP32[$6 + 388 >> 2];
   HEAP32[$6 + 432 >> 2] = HEAP32[$6 + 384 >> 2];
   HEAP32[$6 + 436 >> 2] = $2;
   if (!HEAPU8[$6 + 424 | 0]) {
    break label$2
   }
   $2 = $6 + 344 | 0;
   $12 = HEAPF64[$2 + 24 >> 3];
   $17 = HEAPF64[$6 + 352 >> 3];
   $18 = HEAPF64[$2 + 16 >> 3];
   if ($22 + ($14 * $12 + ($15 * $17 + $16 * $18)) <= 2.220446049250313e-16) {
    break label$2
   }
   label$3 : {
    $19 = HEAPF64[$6 + 416 >> 3] + HEAPF64[$5 + 344 >> 3];
    label$4 : {
     if (!($19 > 1.0000000474974513e-03)) {
      $7 = 0.0;
      $11 = HEAPF64[$6 + 376 >> 3];
      break label$4;
     }
     $2 = $6 + 40 | 0;
     $10 = $6 + 8 | 0;
     $20 = $6 + 312 | 0;
     $13 = 0;
     $11 = 0.0;
     while (1) {
      $4 = HEAP32[$5 + 336 >> 2];
      if ($4) {
       HEAP32[$6 + 240 >> 2] = 0;
       HEAP32[$6 + 244 >> 2] = 0;
       HEAP32[$6 + 232 >> 2] = 0;
       HEAP32[$6 + 236 >> 2] = 1072693248;
       HEAP32[$6 + 224 >> 2] = 0;
       HEAP32[$6 + 228 >> 2] = 1072693248;
       HEAP32[$6 + 216 >> 2] = 0;
       HEAP32[$6 + 220 >> 2] = 1072693248;
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, $6 + 432 | 0, .20000000298023224, $6 + 216 | 0);
      }
      $4 = 0;
      $7 = $22 + ($14 * $12 + ($15 * $17 + $16 * $18));
      if ($7 <= 2.220446049250313e-16) {
       break label$2
      }
      $7 = $11 + $19 / $7;
      if ($11 >= $7 | $7 > 1.0 | $7 < 0.0) {
       break label$2
      }
      btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btTransform__29($1, $6 + 560 | 0, $6 + 528 | 0, $7, $6 + 216 | 0);
      btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btTransform__29($3, $6 + 496 | 0, $6 + 464 | 0, $7, $6 + 88 | 0);
      $8 = HEAP32[$5 + 336 >> 2];
      if ($8) {
       HEAP32[$10 >> 2] = 0;
       HEAP32[$10 + 4 >> 2] = 0;
       $9 = $10 + 8 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       $9 = $10 + 16 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       HEAP32[$6 >> 2] = 0;
       HEAP32[$6 + 4 >> 2] = 1072693248;
       FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 28 >> 2]]($8, $20, .20000000298023224, $6);
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $7);
      HEAP8[$6 + 80 | 0] = 0;
      HEAP32[$6 + 72 >> 2] = 966823146;
      HEAP32[$6 + 76 >> 2] = 1177108057;
      HEAP32[$6 >> 2] = 15500;
      btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $6 + 216 | 0, $6 + 88 | 0, $6);
      if (!HEAPU8[$6 + 80 | 0]) {
       break label$3
      }
      $9 = $2 + 8 | 0;
      $21 = HEAP32[$9 + 4 >> 2];
      $23 = $6 + 432 | 0;
      $8 = $23 + 8 | 0;
      HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$8 + 4 >> 2] = $21;
      $9 = $2 + 16 | 0;
      $21 = HEAP32[$9 + 4 >> 2];
      $8 = $23 + 16 | 0;
      HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$8 + 4 >> 2] = $21;
      $9 = $2 + 24 | 0;
      $21 = HEAP32[$9 + 4 >> 2];
      $8 = $23 + 24 | 0;
      HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$8 + 4 >> 2] = $21;
      $8 = HEAP32[$2 + 4 >> 2];
      HEAP32[$6 + 432 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$6 + 436 >> 2] = $8;
      if (($13 | 0) == 64) {
       FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, -2, 65);
       break label$2;
      }
      $13 = $13 + 1 | 0;
      $17 = HEAPF64[$6 + 8 >> 3];
      $18 = HEAPF64[$6 + 16 >> 3];
      $12 = HEAPF64[$6 + 24 >> 3];
      $11 = $7;
      $19 = HEAPF64[$6 + 72 >> 3] + HEAPF64[$5 + 344 >> 3];
      if ($19 > 1.0000000474974513e-03) {
       continue
      }
      break;
     };
     $11 = HEAPF64[$6 + 32 >> 3];
    }
    HEAPF64[$5 + 264 >> 3] = $17;
    HEAPF64[$5 + 328 >> 3] = $7;
    $0 = HEAP32[$6 + 436 >> 2];
    HEAP32[$5 + 296 >> 2] = HEAP32[$6 + 432 >> 2];
    HEAP32[$5 + 300 >> 2] = $0;
    HEAPF64[$5 + 288 >> 3] = $11;
    HEAPF64[$5 + 280 >> 3] = $12;
    HEAPF64[$5 + 272 >> 3] = $18;
    $1 = $6 + 440 | 0;
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $5 + 304 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $1 = $6 + 448 | 0;
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $5 + 312 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $1 = $6 + 456 | 0;
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $5 + 320 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $4 = 1;
    break label$2;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, -1, $13);
  }
  __stack_pointer = $6 + 592 | 0;
  return $4 | 0;
 }
 
 function btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 >> 2] = 26052;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 12 >> 2] = $4;
  $4 = $1 + 8 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $0 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $1 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $0 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $1 = $1 + 24 | 0;
  $4 = HEAP32[$1 + 4 >> 2];
  $5 = $0 + 32 | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 44 >> 2] = $1;
  $1 = $2 + 8 | 0;
  $4 = HEAP32[$1 + 4 >> 2];
  $5 = $0 + 48 | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $1 = $2 + 16 | 0;
  $4 = HEAP32[$1 + 4 >> 2];
  $5 = $0 + 56 | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $1 = $2 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $4 = $0 - -64 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 1072693248;
  HEAP32[$0 + 72 >> 2] = $3;
 }
 
 function btTriangleRaycastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $7 = __stack_pointer + -64 | 0;
  __stack_pointer = $7;
  $8 = HEAPF64[$1 + 40 >> 3];
  $17 = HEAPF64[$1 + 72 >> 3];
  $18 = HEAPF64[$1 + 48 >> 3];
  $23 = HEAPF64[$1 + 80 >> 3];
  $9 = HEAPF64[$1 + 8 >> 3];
  $19 = HEAPF64[$1 + 64 >> 3];
  $14 = HEAPF64[$1 + 16 >> 3];
  $15 = HEAPF64[$1 >> 3];
  $20 = HEAPF64[$1 + 32 >> 3];
  HEAP32[$7 + 56 >> 2] = 0;
  HEAP32[$7 + 60 >> 2] = 0;
  $6 = $20 - $15;
  $10 = $17 - $9;
  $4 = $19 - $15;
  $11 = $8 - $9;
  $5 = $6 * $10 - $4 * $11;
  $12 = $11;
  $11 = $23 - $14;
  $13 = $18 - $14;
  $10 = $12 * $11 - $10 * $13;
  $6 = $13 * $4 - $11 * $6;
  $4 = $14 * $5 + ($15 * $10 + $9 * $6);
  $21 = HEAPF64[$0 + 24 >> 3];
  $12 = HEAPF64[$0 + 8 >> 3];
  $16 = HEAPF64[$0 + 16 >> 3];
  $11 = $5 * $21 + ($10 * $12 + $6 * $16) - $4;
  $22 = HEAPF64[$0 + 56 >> 3];
  $24 = HEAPF64[$0 + 40 >> 3];
  $25 = HEAPF64[$0 + 48 >> 3];
  $4 = $5 * $22 + ($10 * $24 + $6 * $25) - $4;
  label$1 : {
   if ($11 * $4 >= 0.0) {
    break label$1
   }
   $1 = HEAP32[$0 + 72 >> 2];
   if ($1 & 1 & $11 <= 0.0) {
    break label$1
   }
   $4 = $11 / ($11 - $4);
   if (!($4 < HEAPF64[$0 + 80 >> 3])) {
    break label$1
   }
   $13 = 1.0 - $4;
   $12 = $13 * $12 + $24 * $4;
   $15 = $15 - $12;
   $16 = $13 * $16 + $25 * $4;
   $8 = $8 - $16;
   $20 = $20 - $12;
   $9 = $9 - $16;
   $13 = $13 * $21 + $22 * $4;
   $18 = $18 - $13;
   $14 = $14 - $13;
   $22 = $5 * $5 + ($10 * $10 + $6 * $6);
   $21 = $22 * -.0001;
   if (!(($15 * $8 - $20 * $9) * $5 + (($9 * $18 - $8 * $14) * $10 + $6 * ($14 * $20 - $18 * $15)) >= $21)) {
    break label$1
   }
   $17 = $17 - $16;
   $19 = $19 - $12;
   $16 = ($20 * $17 - $19 * $8) * $5;
   $12 = $8;
   $8 = $23 - $13;
   if (!($21 <= $16 + (($12 * $8 - $17 * $18) * $10 + $6 * ($18 * $19 - $8 * $20))) | !($21 <= ($19 * $9 - $15 * $17) * $5 + (($17 * $14 - $9 * $8) * $10 + $6 * ($8 * $15 - $14 * $19)))) {
    break label$1
   }
   $8 = $5;
   $5 = 1.0 / Math_sqrt($22);
   $9 = $8 * $5;
   HEAPF64[$7 + 48 >> 3] = $9;
   $6 = $6 * $5;
   HEAPF64[$7 + 40 >> 3] = $6;
   $5 = $10 * $5;
   HEAPF64[$7 + 32 >> 3] = $5;
   if (!(!($11 <= 0.0) | $1 & 2)) {
    HEAP32[$7 + 24 >> 2] = 0;
    HEAP32[$7 + 28 >> 2] = 0;
    HEAPF64[$7 + 16 >> 3] = -$9;
    HEAPF64[$7 + 8 >> 3] = -$6;
    HEAPF64[$7 >> 3] = -$5;
    (wasm2js_i32$0 = $0, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $7, $4, $2, $3)), HEAPF64[wasm2js_i32$0 + 80 >> 3] = wasm2js_f64$0;
    break label$1;
   }
   (wasm2js_i32$0 = $0, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $7 + 32 | 0, $4, $2, $3)), HEAPF64[wasm2js_i32$0 + 80 >> 3] = wasm2js_f64$0;
  }
  __stack_pointer = $7 - -64 | 0;
 }
 
 function btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20double_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 >> 2] = 26076;
  $1 = $2 + 24 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 32 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 16 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 24 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 8 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 16 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = $2 + 56 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 - -64 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 48 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 56 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 40 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 48 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = HEAP32[$2 + 36 >> 2];
  $6 = $0 + 40 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$6 + 4 >> 2] = $1;
  $1 = HEAP32[$2 + 68 >> 2];
  $6 = $0 + 72 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$6 + 4 >> 2] = $1;
  $1 = $2 + 72 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 80 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 80 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 88 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 88 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 96 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = HEAP32[$2 + 100 >> 2];
  $6 = $0 + 104 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$6 + 4 >> 2] = $1;
  $1 = $2 + 104 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 112 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 112 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = $0 + 120 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $2 + 120 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 128 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 140 >> 2] = $1;
  $1 = $3 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 144 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 16 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 152 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 160 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 36 >> 2];
  $2 = $0 + 168 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $3 + 40 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 176 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 48 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 184 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 56 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 192 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 68 >> 2];
  $2 = $0 + 200 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 64 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $3 + 72 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 208 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 88 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 224 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 80 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 216 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 100 >> 2];
  $2 = $0 + 232 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 96 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $3 + 104 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 240 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 112 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 248 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 120 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 256 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 264 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$0 + 268 >> 2] = $1;
  $1 = $4 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 272 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 16 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 280 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 288 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 36 >> 2];
  $2 = $0 + 296 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $4 + 40 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 304 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 48 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 312 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 56 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 320 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 88 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 352 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 80 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 344 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 72 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 336 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 68 >> 2];
  $2 = $0 + 328 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 + 64 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = HEAP32[$4 + 100 >> 2];
  $2 = $0 + 360 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 + 96 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $4 + 104 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 368 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 112 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 376 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 120 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 384 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  HEAPF64[$0 + 400 >> 3] = $5;
  HEAP32[$0 + 392 >> 2] = 0;
  HEAP32[$0 + 396 >> 2] = 1072693248;
  HEAP32[$0 + 408 >> 2] = 0;
  HEAP32[$0 + 412 >> 2] = 0;
 }
 
 function btTriangleConvexcastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0;
  $4 = __stack_pointer - 1312 | 0;
  __stack_pointer = $4;
  $9 = $4 + 1112 | 0;
  $14 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($9);
  $5 = $1 + 8 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1224 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 16 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1232 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 24 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1240 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = HEAP32[$1 + 36 >> 2];
  $7 = $9 + 136 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$7 + 4 >> 2] = $5;
  $5 = $1 + 40 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1256 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 48 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1264 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 56 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1272 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 88 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1304 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 80 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1296 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = $1 + 72 | 0;
  $7 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 1288 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $5 = HEAP32[$1 + 68 >> 2];
  $7 = $4 + 1280 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$7 + 4 >> 2] = $5;
  HEAP32[$4 + 1116 >> 2] = 1;
  HEAP32[$4 + 1112 >> 2] = 16392;
  $5 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 1216 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 1220 >> 2] = $5;
  HEAPF64[$4 + 1192 >> 3] = HEAPF64[$0 + 400 >> 3];
  HEAP8[$4 + 1056 | 0] = 0;
  HEAP32[$4 + 1008 >> 2] = -2147483648;
  HEAP32[$4 + 1012 >> 2] = 1030854553;
  HEAP32[$4 + 384 >> 2] = 14936;
  $1 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($4 + 360 | 0, HEAP32[$0 + 4 >> 2], $9, $4 + 392 | 0, $4 + 384 | 0);
  HEAP32[$4 + 344 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 16128;
  HEAP32[$4 + 336 >> 2] = 0;
  HEAP32[$4 + 340 >> 2] = 1072693248;
  HEAPF64[$4 + 352 >> 3] = HEAPF64[$0 + 408 >> 3];
  $5 = $1;
  $1 = $0 + 264 | 0;
  label$1 : {
   if (!btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($5, $0 + 8 | 0, $0 + 136 | 0, $1, $1, $4 + 8 | 0)) {
    break label$1
   }
   $8 = HEAPF64[$4 + 288 >> 3];
   $10 = HEAPF64[$4 + 272 >> 3];
   $11 = HEAPF64[$4 + 280 >> 3];
   $12 = $8 * $8 + ($10 * $10 + $11 * $11);
   if (!($12 > .0001)) {
    break label$1
   }
   $13 = HEAPF64[$4 + 336 >> 3];
   if (!($13 < HEAPF64[$0 + 392 >> 3])) {
    break label$1
   }
   $15 = $8;
   $8 = 1.0 / Math_sqrt($12);
   HEAPF64[$4 + 288 >> 3] = $15 * $8;
   HEAPF64[$4 + 280 >> 3] = $11 * $8;
   HEAPF64[$4 + 272 >> 3] = $10 * $8;
   +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4 + 272 | 0, $4 + 304 | 0, $13, $2, $3);
  }
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($14);
  __stack_pointer = $4 + 1312 | 0;
 }
 
 function btCollisionWorld___btCollisionWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  HEAP32[$0 >> 2] = 26184;
  $1 = HEAP32[$0 + 8 >> 2];
  if (($1 | 0) > 0) {
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 16 >> 2] + $2 >> 2];
    $3 = HEAP32[$4 + 376 >> 2];
    if ($3) {
     $1 = HEAP32[$0 + 96 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     $1 = HEAP32[$0 + 96 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     HEAP32[$4 + 376 >> 2] = 0;
     $1 = HEAP32[$0 + 8 >> 2];
    }
    $2 = $2 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($1 | 0)) {
     continue
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 16 >> 2];
  if (!(!$2 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($2)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCollisionWorld___btCollisionWorld_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  HEAP32[$0 >> 2] = 26184;
  $1 = HEAP32[$0 + 8 >> 2];
  if (($1 | 0) > 0) {
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 16 >> 2] + $2 >> 2];
    $3 = HEAP32[$4 + 376 >> 2];
    if ($3) {
     $1 = HEAP32[$0 + 96 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     $1 = HEAP32[$0 + 96 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     HEAP32[$4 + 376 >> 2] = 0;
     $1 = HEAP32[$0 + 8 >> 2];
    }
    $2 = $2 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($1 | 0)) {
     continue
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 16 >> 2];
  if (!(!$2 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($2)
  }
  operator_20delete_28void__29($0);
 }
 
 function btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = __stack_pointer - 192 | 0;
  __stack_pointer = $8;
  $4 = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 404 >> 2] = $4;
  label$1 : {
   if (HEAP32[$0 + 12 >> 2] != ($4 | 0)) {
    break label$1
   }
   $9 = $4 ? $4 << 1 : 1;
   if (($9 | 0) <= ($4 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$9) {
     break label$2
    }
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2);
    $4 = HEAP32[$0 + 8 >> 2];
   }
   label$4 : {
    if (($4 | 0) <= 0) {
     break label$4
    }
    $10 = $4 & 3;
    if ($4 - 1 >>> 0 >= 3) {
     $12 = $4 & -4;
     while (1) {
      $11 = $5 + $6 | 0;
      HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + $5 >> 2];
      HEAP32[$11 + 4 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] + $5 | 0) + 4 >> 2];
      HEAP32[$11 + 8 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] + $5 | 0) + 8 >> 2];
      HEAP32[$11 + 12 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] + $5 | 0) + 12 >> 2];
      $5 = $5 + 16 | 0;
      $7 = $7 + 4 | 0;
      if (($12 | 0) != ($7 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$10) {
     break label$4
    }
    $5 = $7 << 2;
    while (1) {
     HEAP32[$5 + $6 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + $5 >> 2];
     $5 = $5 + 4 | 0;
     $10 = $10 - 1 | 0;
     if ($10) {
      continue
     }
     break;
    };
   }
   $5 = HEAP32[$0 + 16 >> 2];
   if (!(!$5 | !HEAPU8[$0 + 20 | 0])) {
    btAlignedFreeInternal_28void__29($5);
    $4 = HEAP32[$0 + 8 >> 2];
   }
   HEAP32[$0 + 16 >> 2] = $6;
   HEAP8[$0 + 20 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $9;
  }
  HEAP32[$0 + 8 >> 2] = $4 + 1;
  HEAP32[HEAP32[$0 + 16 >> 2] + ($4 << 2) >> 2] = $1;
  $5 = $1 + 32 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $7 = $8 - -64 | 0;
  $4 = $7 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 24 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 16 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 8 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 48 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 40 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 56 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 48 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 - -64 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 56 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 80 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 72 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 88 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 80 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 96 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 88 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = HEAP32[$1 + 12 >> 2];
  HEAP32[$8 + 64 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$8 + 68 >> 2] = $4;
  $4 = $1 + 40 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$8 + 96 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$8 + 100 >> 2] = $5;
  $4 = $1 + 72 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$8 + 128 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$8 + 132 >> 2] = $5;
  $5 = $1 + 128 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 120 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 120 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 112 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $5 = $1 + 112 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $4 = $7 + 104 | 0;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = $1 + 104 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$8 + 160 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$8 + 164 >> 2] = $5;
  $4 = HEAP32[$1 + 380 >> 2];
  $5 = $8 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $7, $5, $8);
  $4 = HEAP32[$0 + 96 >> 2];
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $5, $8, HEAP32[HEAP32[$1 + 380 >> 2] + 4 >> 2], $1, $2, $3, HEAP32[$0 + 24 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 376 >> 2] = wasm2js_i32$1;
  __stack_pointer = $8 + 192 | 0;
 }
 
 function btCollisionWorld__updateAabbs_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0;
  $11 = __stack_pointer - 16 | 0;
  __stack_pointer = $11;
  CProfileSample__CProfileSample_28char_20const__29($11 + 8 | 0, 3193);
  $5 = HEAP32[$0 + 8 >> 2];
  if (($5 | 0) > 0) {
   while (1) {
    $3 = HEAP32[HEAP32[$0 + 16 >> 2] + $12 >> 2];
    label$3 : {
     label$4 : {
      if (HEAPU8[$0 + 104 | 0]) {
       break label$4
      }
      switch (HEAP32[$3 + 408 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     $1 = __stack_pointer - 128 | 0;
     __stack_pointer = $1;
     $5 = HEAP32[$3 + 380 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $3 + 8 | 0, $1 + 96 | 0, $1 - -64 | 0);
     $2 = HEAPF64[3845];
     $10 = HEAPF64[$1 + 96 >> 3] - $2;
     HEAPF64[$1 + 96 >> 3] = $10;
     $7 = HEAPF64[$1 + 104 >> 3] - $2;
     HEAPF64[$1 + 104 >> 3] = $7;
     $6 = HEAPF64[$1 + 112 >> 3] - $2;
     HEAPF64[$1 + 112 >> 3] = $6;
     $4 = $2 + HEAPF64[$1 + 64 >> 3];
     HEAPF64[$1 + 64 >> 3] = $4;
     $8 = $2 + HEAPF64[$1 + 72 >> 3];
     HEAPF64[$1 + 72 >> 3] = $8;
     $9 = $2 + HEAPF64[$1 + 80 >> 3];
     HEAPF64[$1 + 80 >> 3] = $9;
     label$1 : {
      if (HEAPU8[$3 + 392 | 0] & 3 | (!HEAPU8[$0 + 56 | 0] | HEAP32[$3 + 472 >> 2] != 2)) {
       break label$1
      }
      $5 = HEAP32[$3 + 380 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $3 + 136 | 0, $1 + 32 | 0, $1);
      $7 = HEAPF64[$1 + 32 >> 3] - $2;
      HEAPF64[$1 + 32 >> 3] = $7;
      $6 = HEAPF64[$1 + 40 >> 3] - $2;
      HEAPF64[$1 + 40 >> 3] = $6;
      $4 = HEAPF64[$1 + 48 >> 3] - $2;
      HEAPF64[$1 + 48 >> 3] = $4;
      $8 = $2 + HEAPF64[$1 >> 3];
      HEAPF64[$1 >> 3] = $8;
      $9 = $2 + HEAPF64[$1 + 8 >> 3];
      HEAPF64[$1 + 8 >> 3] = $9;
      $2 = $2 + HEAPF64[$1 + 16 >> 3];
      HEAPF64[$1 + 16 >> 3] = $2;
      $10 = HEAPF64[$1 + 96 >> 3];
      if ($10 > $7) {
       HEAPF64[$1 + 96 >> 3] = $7;
       $10 = $7;
      }
      $7 = HEAPF64[$1 + 104 >> 3];
      if ($7 > $6) {
       HEAPF64[$1 + 104 >> 3] = $6;
       $7 = $6;
      }
      $6 = HEAPF64[$1 + 112 >> 3];
      if ($6 > $4) {
       HEAPF64[$1 + 112 >> 3] = $4;
       $6 = $4;
      }
      $4 = HEAPF64[$1 + 56 >> 3];
      if ($4 < HEAPF64[$1 + 120 >> 3]) {
       HEAPF64[$1 + 120 >> 3] = $4
      }
      $4 = HEAPF64[$1 + 64 >> 3];
      if ($4 < $8) {
       HEAPF64[$1 + 64 >> 3] = $8;
       $4 = $8;
      }
      $8 = HEAPF64[$1 + 72 >> 3];
      if ($8 < $9) {
       HEAPF64[$1 + 72 >> 3] = $9;
       $8 = $9;
      }
      $9 = HEAPF64[$1 + 80 >> 3];
      if ($9 < $2) {
       HEAPF64[$1 + 80 >> 3] = $2;
       $9 = $2;
      }
      $2 = HEAPF64[$1 + 24 >> 3];
      if (!($2 > HEAPF64[$1 + 88 >> 3])) {
       break label$1
      }
      HEAPF64[$1 + 88 >> 3] = $2;
     }
     $5 = HEAP32[$0 + 96 >> 2];
     label$9 : {
      label$10 : {
       if (!(HEAP8[$3 + 392 | 0] & 1)) {
        $2 = $9 - $6;
        $6 = $2 * $2;
        $2 = $4 - $10;
        $4 = $2 * $2;
        $2 = $8 - $7;
        if (!($6 + ($4 + $2 * $2) < 1.0e12)) {
         break label$10
        }
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, HEAP32[$3 + 376 >> 2], $1 + 96 | 0, $1 - -64 | 0, HEAP32[$0 + 24 >> 2]);
       break label$9;
      }
      btCollisionObject__setActivationState_28int_29_20const($3, 5);
      if (HEAPU8[33684]) {
       break label$9
      }
      $3 = HEAP32[$0 + 100 >> 2];
      if (!$3) {
       break label$9
      }
      HEAP8[33684] = 1;
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, 3343);
      $3 = HEAP32[$0 + 100 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, 4415);
      $3 = HEAP32[$0 + 100 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, 4623);
      $3 = HEAP32[$0 + 100 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, 4483);
     }
     __stack_pointer = $1 + 128 | 0;
     $5 = HEAP32[$0 + 8 >> 2];
    }
    $12 = $12 + 4 | 0;
    $13 = $13 + 1 | 0;
    if (($13 | 0) < ($5 | 0)) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $11 + 16 | 0;
 }
 
 function btCollisionWorld__computeOverlappingPairs_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 3020);
  $2 = HEAP32[$0 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 32 >> 2]]($2, HEAP32[$0 + 24 >> 2]);
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function btCollisionWorld__performDiscreteCollisionDetection_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 3309);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
  $2 = HEAP32[$0 + 24 >> 2];
  CProfileSample__CProfileSample_28char_20const__29($1, 2937);
  if ($2) {
   $3 = HEAP32[$0 + 96 >> 2];
   ((((wasm2js_i32$1 = $2, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0), wasm2js_i32$3 = $0 + 32 | 0), wasm2js_i32$4 = HEAP32[$0 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 32 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
  }
  CProfileSample___CProfileSample_28_29();
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = HEAP32[$1 + 376 >> 2];
  if ($3) {
   $2 = HEAP32[$0 + 96 >> 2];
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $3, HEAP32[$0 + 24 >> 2]);
   $2 = HEAP32[$0 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $3, HEAP32[$0 + 24 >> 2]);
   HEAP32[$1 + 376 >> 2] = 0;
  }
  $2 = HEAP32[$1 + 404 >> 2];
  $3 = HEAP32[$0 + 8 >> 2];
  label$2 : {
   if (!(($2 | 0) < 0 | ($2 | 0) >= ($3 | 0))) {
    $5 = $0 + 16 | 0;
    $4 = HEAP32[$5 >> 2];
    $7 = $2 << 2;
    $8 = $4 + $7 | 0;
    $9 = HEAP32[$8 >> 2];
    $6 = $4;
    $3 = $3 - 1 | 0;
    $4 = $3 << 2;
    HEAP32[$8 >> 2] = HEAP32[$6 + $4 >> 2];
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$4 + HEAP32[$5 >> 2] >> 2] = $9;
    if (($2 | 0) >= ($3 | 0)) {
     break label$2
    }
    HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] + $7 >> 2] + 404 >> 2] = $2;
    break label$2;
   }
   if (($3 | 0) <= 0) {
    break label$2
   }
   $4 = HEAP32[$0 + 16 >> 2];
   $2 = $4;
   while (1) {
    if (($1 | 0) != HEAP32[$2 >> 2]) {
     $2 = $2 + 4 | 0;
     $5 = $5 + 1 | 0;
     if (($3 | 0) != ($5 | 0)) {
      continue
     }
     break label$2;
    }
    break;
   };
   if (($3 | 0) <= ($5 | 0)) {
    break label$2
   }
   $6 = $2;
   $3 = $3 - 1 | 0;
   $2 = $3 << 2;
   HEAP32[$6 >> 2] = HEAP32[$2 + $4 >> 2];
   HEAP32[$0 + 8 >> 2] = $3;
   HEAP32[$2 + HEAP32[$0 + 16 >> 2] >> 2] = $1;
  }
  HEAP32[$1 + 404 >> 2] = -1;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 1344 | 0;
  __stack_pointer = $4;
  btConvexInternalShape__btConvexInternalShape_28_29($4 + 1248 | 0);
  $5 = $4 + 1288 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $4 + 1296 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $4 + 1304 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $4 + 1312 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $4 + 1320 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $4 + 1328 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $4 + 1336 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $4 + 1280 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 1072693248;
  $5 = $4 + 1272 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 1072693248;
  HEAP32[$4 + 1264 >> 2] = 0;
  HEAP32[$4 + 1268 >> 2] = 1072693248;
  HEAP32[$4 + 1252 >> 2] = 8;
  HEAP32[$4 + 1248 >> 2] = 8920;
  $5 = HEAP32[$2 + 12 >> 2];
  label$1 : {
   $9 = HEAP32[$2 + 4 >> 2];
   $13 = HEAP32[$9 + 4 >> 2];
   if (($13 | 0) <= 19) {
    HEAP32[$4 + 1240 >> 2] = 0;
    HEAP32[$4 + 1244 >> 2] = 0;
    HEAP32[$4 + 1232 >> 2] = 0;
    HEAP32[$4 + 896 >> 2] = 16128;
    HEAPF64[$4 + 1224 >> 3] = HEAPF64[$3 + 8 >> 3];
    HEAP8[$4 + 840 | 0] = 0;
    HEAP32[$4 + 792 >> 2] = -2147483648;
    HEAP32[$4 + 796 >> 2] = 1030854553;
    $6 = $4 + 1248 | 0;
    $16 = $4 + 176 | 0;
    $12 = btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($4 + 96 | 0, $6, $9, $16);
    $9 = (wasm2js_i32$0 = btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($4 - -64 | 0, $6, $9, $16), wasm2js_i32$1 = $12, wasm2js_i32$2 = HEAP32[$3 + 28 >> 2] & 8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    label$3 : {
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 8 >> 2]]($9, $0, $1, $5, $5, $4 + 896 | 0) | 0)) {
      break label$3
     }
     $8 = HEAPF64[$4 + 1176 >> 3];
     $7 = HEAPF64[$4 + 1160 >> 3];
     $10 = HEAPF64[$4 + 1168 >> 3];
     $11 = $8 * $8 + ($7 * $7 + $10 * $10);
     if (!($11 > .0001)) {
      break label$3
     }
     $15 = HEAPF64[$4 + 1224 >> 3];
     if (!($15 < HEAPF64[$3 + 8 >> 3])) {
      break label$3
     }
     $22 = $8;
     $8 = 1.0 / Math_sqrt($11);
     HEAPF64[$4 + 1176 >> 3] = $22 * $8;
     HEAPF64[$4 + 1168 >> 3] = $10 * $8;
     HEAPF64[$4 + 1160 >> 3] = $7 * $8;
     $0 = $4 + 1160 | 0;
     $5 = $0 + 8 | 0;
     $9 = HEAP32[$5 + 4 >> 2];
     $1 = $4 + 128 | 0;
     $6 = $1 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $9;
     $5 = $0 + 16 | 0;
     $9 = HEAP32[$5 + 4 >> 2];
     $6 = $1 + 24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $9;
     $5 = $0 + 24 | 0;
     $9 = HEAP32[$5 + 4 >> 2];
     $6 = $4 + 160 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $9;
     HEAPF64[$4 + 168 >> 3] = $15;
     $5 = HEAP32[$0 + 4 >> 2];
     HEAP32[$4 + 136 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$4 + 140 >> 2] = $5;
     HEAP32[$4 + 132 >> 2] = 0;
     HEAP32[$4 + 128 >> 2] = HEAP32[$2 + 8 >> 2];
     +FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $1, 1);
    }
    break label$1;
   }
   if ($13 - 21 >>> 0 <= 8) {
    $6 = $5 + 40 | 0;
    $23 = HEAPF64[$6 >> 3];
    $16 = $5 + 72 | 0;
    $10 = HEAPF64[$16 >> 3];
    $12 = $5 + 48 | 0;
    $19 = HEAPF64[$12 >> 3];
    $20 = $5 + 104 | 0;
    $8 = HEAPF64[$20 >> 3];
    $29 = $5 + 112 | 0;
    $11 = HEAPF64[$29 >> 3];
    $24 = $5 + 80 | 0;
    $15 = HEAPF64[$24 >> 3];
    $17 = HEAPF64[$5 + 64 >> 3];
    $25 = HEAPF64[$5 + 32 >> 3];
    $27 = HEAPF64[$5 >> 3];
    $28 = HEAPF64[$5 + 8 >> 3];
    $18 = HEAPF64[$5 + 96 >> 3];
    $7 = HEAPF64[$5 + 16 >> 3];
    HEAP32[$4 + 920 >> 2] = 0;
    HEAP32[$4 + 924 >> 2] = 0;
    $26 = -$8;
    $35 = $19 * $26;
    $32 = $35 - $7 * $18 - $15 * $11;
    $30 = HEAPF64[$0 + 112 >> 3];
    $36 = $15 * $30;
    $8 = HEAPF64[$0 + 96 >> 3];
    $31 = HEAPF64[$0 + 104 >> 3];
    $37 = $19 * $31;
    HEAPF64[$4 + 912 >> 3] = $32 + ($36 + ($7 * $8 + $37));
    $38 = $23 * $26;
    $33 = $38 - $28 * $18 - $10 * $11;
    $41 = $30 * $10;
    $42 = $23 * $31;
    HEAPF64[$4 + 904 >> 3] = $33 + ($41 + ($8 * $28 + $42));
    $43 = $25 * $26;
    $45 = $43 - $27 * $18 - $17 * $11;
    $30 = $30 * $17;
    $31 = $25 * $31;
    HEAPF64[$4 + 896 >> 3] = $45 + ($30 + ($8 * $27 + $31));
    HEAP32[$4 + 152 >> 2] = 0;
    HEAP32[$4 + 156 >> 2] = 0;
    $48 = $32;
    $26 = HEAPF64[$1 + 112 >> 3];
    $32 = $15 * $26;
    $40 = $7;
    $7 = HEAPF64[$1 + 96 >> 3];
    $22 = $19;
    $19 = HEAPF64[$1 + 104 >> 3];
    $46 = $22 * $19;
    HEAPF64[$4 + 144 >> 3] = $48 + ($32 + ($40 * $7 + $46));
    $22 = $33;
    $33 = $26 * $10;
    $40 = $7 * $28;
    $28 = $23 * $19;
    HEAPF64[$4 + 136 >> 3] = $22 + ($33 + ($40 + $28));
    $26 = $26 * $17;
    $22 = $7 * $27;
    $27 = $25 * $19;
    HEAPF64[$4 + 128 >> 3] = $45 + ($26 + ($22 + $27));
    if (($13 | 0) == 21) {
     $13 = HEAP32[$2 + 8 >> 2];
     $2 = $4 + 176 | 0;
     $0 = $4 + 896 | 0;
     $1 = $4 + 128 | 0;
     btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($2, $0, $1, HEAP32[$3 + 28 >> 2]);
     HEAP32[$4 + 272 >> 2] = $9;
     HEAP32[$4 + 268 >> 2] = $13;
     HEAP32[$4 + 264 >> 2] = $3;
     HEAP32[$4 + 176 >> 2] = 26276;
     $13 = $5 + 24 | 0;
     $14 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 304 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $14;
     $13 = $5 + 16 | 0;
     $14 = HEAP32[$13 + 4 >> 2];
     $21 = $2 + 120 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $14;
     $13 = $5 + 8 | 0;
     $14 = HEAP32[$13 + 4 >> 2];
     $21 = $2 + 112 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $14;
     $13 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 280 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 284 >> 2] = $13;
     $13 = $5 + 56 | 0;
     $14 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 336 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $14;
     $13 = HEAP32[$12 + 4 >> 2];
     $14 = $4 + 328 | 0;
     HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$14 + 4 >> 2] = $13;
     $12 = HEAP32[$6 + 4 >> 2];
     $13 = $4 + 320 | 0;
     HEAP32[$13 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$13 + 4 >> 2] = $12;
     $6 = HEAP32[$5 + 36 >> 2];
     $12 = $4 + 312 | 0;
     HEAP32[$12 >> 2] = HEAP32[$5 + 32 >> 2];
     HEAP32[$12 + 4 >> 2] = $6;
     $6 = HEAP32[$5 + 68 >> 2];
     $12 = $4 + 344 | 0;
     HEAP32[$12 >> 2] = HEAP32[$5 + 64 >> 2];
     HEAP32[$12 + 4 >> 2] = $6;
     $6 = HEAP32[$16 + 4 >> 2];
     $12 = $4 + 352 | 0;
     HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$12 + 4 >> 2] = $6;
     $6 = HEAP32[$24 + 4 >> 2];
     $16 = $4 + 360 | 0;
     HEAP32[$16 >> 2] = HEAP32[$24 >> 2];
     HEAP32[$16 + 4 >> 2] = $6;
     $6 = $5 + 88 | 0;
     $16 = HEAP32[$6 + 4 >> 2];
     $12 = $4 + 368 | 0;
     HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$12 + 4 >> 2] = $16;
     $6 = HEAP32[$5 + 100 >> 2];
     $16 = $4 + 376 | 0;
     HEAP32[$16 >> 2] = HEAP32[$5 + 96 >> 2];
     HEAP32[$16 + 4 >> 2] = $6;
     $6 = HEAP32[$20 + 4 >> 2];
     $16 = $4 + 384 | 0;
     HEAP32[$16 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$16 + 4 >> 2] = $6;
     $6 = HEAP32[$29 + 4 >> 2];
     $16 = $4 + 392 | 0;
     HEAP32[$16 >> 2] = HEAP32[$29 >> 2];
     HEAP32[$16 + 4 >> 2] = $6;
     $5 = $5 + 120 | 0;
     $6 = HEAP32[$5 + 4 >> 2];
     $16 = $4 + 400 | 0;
     HEAP32[$16 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$16 + 4 >> 2] = $6;
     HEAPF64[$4 + 256 >> 3] = HEAPF64[$3 + 8 >> 3];
     $3 = __stack_pointer - 16 | 0;
     __stack_pointer = $3;
     HEAP32[$3 + 8 >> 2] = $2;
     HEAP32[$3 >> 2] = 11204;
     HEAP32[$3 + 4 >> 2] = HEAP32[$9 + 88 >> 2];
     $5 = HEAP32[$9 + 92 >> 2];
     $2 = __stack_pointer + -64 | 0;
     __stack_pointer = $2;
     $9 = $2 + 32 | 0;
     $6 = $9 + 24 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $6 = $9 + 16 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $9 = $9 + 8 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$2 + 32 >> 2] = 0;
     HEAP32[$2 + 36 >> 2] = 0;
     $9 = $2 + 24 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 16 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 8 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     label$10 : {
      if (HEAPU8[$5 + 112 | 0]) {
       btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($5, $3, $0, $1, $2 + 32 | 0, $2, HEAP32[$5 + 108 >> 2]);
       break label$10;
      }
      btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($5, $3, $0, $1, $2 + 32 | 0, $2);
     }
     __stack_pointer = $2 - -64 | 0;
     __stack_pointer = $3 + 16 | 0;
     break label$1;
    }
    $13 = $5 + 8 | 0;
    $23 = HEAPF64[$13 >> 3];
    $14 = $5 + 16 | 0;
    $19 = HEAPF64[$14 >> 3];
    $25 = HEAPF64[$5 >> 3];
    $0 = $4 + 96 | 0;
    $1 = $0 + 24 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $21 = $0 + 16 | 0;
    $11 = -$11;
    $22 = $15 * $11;
    $15 = -$18;
    $18 = $22 + ($19 * $15 + $35);
    HEAPF64[$21 >> 3] = $36 + ($8 * $19 + $37) + $18;
    $39 = $0 + 8 | 0;
    $10 = $10 * $11 + ($23 * $15 + $38);
    HEAPF64[$39 >> 3] = $41 + ($8 * $23 + $42) + $10;
    $22 = $30 + ($8 * $25 + $31);
    $8 = $17 * $11 + ($25 * $15 + $43);
    HEAPF64[$4 + 96 >> 3] = $22 + $8;
    HEAP32[$4 + 88 >> 2] = 0;
    HEAP32[$4 + 92 >> 2] = 0;
    HEAPF64[$4 + 80 >> 3] = $32 + ($7 * $19 + $46) + $18;
    HEAPF64[$4 + 72 >> 3] = $33 + ($7 * $23 + $28) + $10;
    HEAPF64[$4 + 64 >> 3] = $26 + ($7 * $25 + $27) + $8;
    $34 = HEAP32[$2 + 8 >> 2];
    $2 = $4 + 176 | 0;
    btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($2, $0, $4 - -64 | 0, HEAP32[$3 + 28 >> 2]);
    HEAP32[$4 + 272 >> 2] = $9;
    HEAP32[$4 + 268 >> 2] = $34;
    HEAP32[$4 + 264 >> 2] = $3;
    HEAP32[$4 + 176 >> 2] = 26460;
    $0 = $5 + 24 | 0;
    $34 = HEAP32[$0 + 4 >> 2];
    $44 = $4 + 304 | 0;
    HEAP32[$44 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$44 + 4 >> 2] = $34;
    $0 = HEAP32[$14 + 4 >> 2];
    $34 = $2 + 120 | 0;
    HEAP32[$34 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$34 + 4 >> 2] = $0;
    $0 = HEAP32[$13 + 4 >> 2];
    $2 = $2 + 112 | 0;
    HEAP32[$2 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 280 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 284 >> 2] = $0;
    $0 = $5 + 56 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    $13 = $4 + 336 | 0;
    HEAP32[$13 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$13 + 4 >> 2] = $2;
    $0 = HEAP32[$12 + 4 >> 2];
    $2 = $4 + 328 | 0;
    HEAP32[$2 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$6 + 4 >> 2];
    $2 = $4 + 320 | 0;
    HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$5 + 36 >> 2];
    $2 = $4 + 312 | 0;
    HEAP32[$2 >> 2] = HEAP32[$5 + 32 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$5 + 68 >> 2];
    $2 = $4 + 344 | 0;
    HEAP32[$2 >> 2] = HEAP32[$5 + 64 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$16 + 4 >> 2];
    $2 = $4 + 352 | 0;
    HEAP32[$2 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$24 + 4 >> 2];
    $2 = $4 + 360 | 0;
    HEAP32[$2 >> 2] = HEAP32[$24 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = $5 + 88 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    $6 = $4 + 368 | 0;
    HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$6 + 4 >> 2] = $2;
    $0 = HEAP32[$5 + 100 >> 2];
    $2 = $4 + 376 | 0;
    HEAP32[$2 >> 2] = HEAP32[$5 + 96 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$20 + 4 >> 2];
    $2 = $4 + 384 | 0;
    HEAP32[$2 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$29 + 4 >> 2];
    $2 = $4 + 392 | 0;
    HEAP32[$2 >> 2] = HEAP32[$29 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = $5 + 120 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    $5 = $4 + 400 | 0;
    HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$5 + 4 >> 2] = $2;
    HEAPF64[$4 + 256 >> 3] = HEAPF64[$3 + 8 >> 3];
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $4 + 32 | 0;
    $3 = $0 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    $1 = HEAP32[$21 + 4 >> 2];
    $2 = $0 + 16 | 0;
    HEAP32[$2 >> 2] = HEAP32[$21 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    $1 = HEAP32[$39 + 4 >> 2];
    $0 = $0 + 8 | 0;
    HEAP32[$0 >> 2] = HEAP32[$39 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $0 = HEAP32[$4 + 100 >> 2];
    HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 96 >> 2];
    HEAP32[$4 + 36 >> 2] = $0;
    $8 = HEAPF64[$4 + 64 >> 3];
    if ($8 < HEAPF64[$4 + 32 >> 3]) {
     HEAPF64[$4 + 32 >> 3] = $8
    }
    $7 = HEAPF64[$4 + 72 >> 3];
    if ($7 < HEAPF64[$4 + 40 >> 3]) {
     HEAPF64[$4 + 40 >> 3] = $7
    }
    $10 = HEAPF64[$4 + 80 >> 3];
    if ($10 < HEAPF64[$4 + 48 >> 3]) {
     HEAPF64[$4 + 48 >> 3] = $10
    }
    $11 = HEAPF64[$4 + 88 >> 3];
    if ($11 < HEAPF64[$4 + 56 >> 3]) {
     HEAPF64[$4 + 56 >> 3] = $11
    }
    $0 = $4 + 96 | 0;
    $1 = $0 + 24 | 0;
    $2 = HEAP32[$1 + 4 >> 2];
    $3 = $4 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    $1 = $0 + 16 | 0;
    $2 = HEAP32[$1 + 4 >> 2];
    $3 = $4 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    $0 = $0 + 8 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = $4 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    $0 = HEAP32[$4 + 100 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$4 + 96 >> 2];
    HEAP32[$4 + 4 >> 2] = $0;
    if (HEAPF64[$4 >> 3] < $8) {
     HEAPF64[$4 >> 3] = $8
    }
    if (HEAPF64[$4 + 8 >> 3] < $7) {
     HEAPF64[$4 + 8 >> 3] = $7
    }
    if (HEAPF64[$4 + 16 >> 3] < $10) {
     HEAPF64[$4 + 16 >> 3] = $10
    }
    if (HEAPF64[$4 + 24 >> 3] < $11) {
     HEAPF64[$4 + 24 >> 3] = $11
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 64 >> 2]]($9, $4 + 176 | 0, $4 + 32 | 0, $4);
    break label$1;
   }
   if (($13 | 0) != 31) {
    break label$1
   }
   $6 = HEAP32[$9 + 104 >> 2];
   HEAP32[$4 + 152 >> 2] = $3;
   HEAP32[$4 + 148 >> 2] = $1;
   HEAP32[$4 + 144 >> 2] = $0;
   HEAP32[$4 + 140 >> 2] = $5;
   HEAP32[$4 + 136 >> 2] = $9;
   HEAP32[$4 + 128 >> 2] = 26648;
   HEAP32[$4 + 132 >> 2] = HEAP32[$2 + 8 >> 2];
   if ($6) {
    $11 = HEAPF64[$5 >> 3];
    $15 = HEAPF64[$5 + 8 >> 3];
    $7 = HEAPF64[$5 + 16 >> 3];
    HEAP32[$4 + 200 >> 2] = 0;
    HEAP32[$4 + 204 >> 2] = 0;
    $17 = HEAPF64[$5 + 80 >> 3];
    $18 = HEAPF64[$5 + 112 >> 3];
    $8 = HEAPF64[$0 + 112 >> 3] - $18;
    $22 = $7;
    $23 = HEAPF64[$5 + 96 >> 3];
    $7 = HEAPF64[$0 + 96 >> 3] - $23;
    $19 = HEAPF64[$5 + 104 >> 3];
    $10 = HEAPF64[$0 + 104 >> 3] - $19;
    $25 = HEAPF64[$5 + 48 >> 3];
    HEAPF64[$4 + 192 >> 3] = $17 * $8 + ($22 * $7 + $10 * $25);
    $27 = HEAPF64[$5 + 72 >> 3];
    $22 = $15 * $7;
    $15 = HEAPF64[$5 + 40 >> 3];
    HEAPF64[$4 + 184 >> 3] = $27 * $8 + ($22 + $10 * $15);
    $28 = HEAPF64[$5 + 64 >> 3];
    $7 = $11 * $7;
    $11 = HEAPF64[$5 + 32 >> 3];
    HEAPF64[$4 + 176 >> 3] = $28 * $8 + ($7 + $10 * $11);
    $26 = HEAPF64[$5 >> 3];
    $30 = HEAPF64[$5 + 8 >> 3];
    $7 = HEAPF64[$5 + 16 >> 3];
    HEAP32[$4 + 920 >> 2] = 0;
    HEAP32[$4 + 924 >> 2] = 0;
    $8 = HEAPF64[$1 + 112 >> 3] - $18;
    $22 = $7;
    $7 = HEAPF64[$1 + 96 >> 3] - $23;
    $10 = HEAPF64[$1 + 104 >> 3] - $19;
    HEAPF64[$4 + 912 >> 3] = $17 * $8 + ($22 * $7 + $25 * $10);
    HEAPF64[$4 + 904 >> 3] = $27 * $8 + ($30 * $7 + $15 * $10);
    HEAPF64[$4 + 896 >> 3] = $28 * $8 + ($26 * $7 + $11 * $10);
    $29 = $4 + 176 | 0;
    $0 = $4 + 896 | 0;
    $39 = $4 + 128 | 0;
    $12 = __stack_pointer - 576 | 0;
    __stack_pointer = $12;
    $1 = HEAP32[$6 >> 2];
    label$13 : {
     if (!$1) {
      break label$13
     }
     $10 = HEAPF64[$29 + 16 >> 3];
     $11 = HEAPF64[$0 + 16 >> 3];
     $8 = HEAPF64[$29 >> 3];
     $15 = HEAPF64[$0 >> 3];
     $7 = HEAPF64[$29 + 8 >> 3];
     $17 = HEAPF64[$0 + 8 >> 3];
     HEAP32[$12 + 64 >> 2] = $1;
     $10 = $11 - $10;
     $11 = $15 - $8;
     $15 = $17 - $7;
     $17 = 1.0 / Math_sqrt($10 * $10 + ($11 * $11 + $15 * $15));
     $18 = $10 * $17;
     $40 = $18 * $10;
     $10 = $11 * $17;
     $22 = $10 * $11;
     $11 = $15 * $17;
     $19 = $40 + ($22 + $15 * $11);
     $15 = $18 == 0.0 ? 1.e+30 : 1.0 / $18;
     $0 = $15 < 0.0;
     $34 = (($0 << 5) + $12 | 0) + 16 | 0;
     $11 = $11 == 0.0 ? 1.e+30 : 1.0 / $11;
     $1 = $11 < 0.0;
     $44 = ($1 << 5) + $12 | 8;
     $49 = ((!$0 << 5) + $12 | 0) + 16 | 0;
     $50 = (!$1 << 5) + $12 | 8;
     $10 = $10 == 0.0 ? 1.e+30 : 1.0 / $10;
     $0 = $10 < 0.0;
     $51 = ($0 << 5) + $12 | 0;
     $52 = (!$0 << 5) + $12 | 0;
     $13 = $12 + 32 | 0;
     $24 = 126;
     $6 = 128;
     $1 = $12 - -64 | 0;
     $3 = 128;
     $9 = 1;
     while (1) {
      $5 = $9 - 1 | 0;
      $47 = $5 << 2;
      $20 = HEAP32[$47 + $1 >> 2];
      $0 = $20 + 56 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $14 = $13 + 24 | 0;
      HEAP32[$14 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$14 + 4 >> 2] = $2;
      $0 = $20 + 48 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $14 = $13 + 16 | 0;
      HEAP32[$14 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$14 + 4 >> 2] = $2;
      $0 = $20 + 40 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $14 = $13 + 8 | 0;
      HEAP32[$14 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$14 + 4 >> 2] = $2;
      $0 = $20 + 24 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $14 = $12 + 24 | 0;
      HEAP32[$14 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$14 + 4 >> 2] = $2;
      $0 = $20 + 16 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $14 = $12 + 16 | 0;
      HEAP32[$14 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$14 + 4 >> 2] = $2;
      $0 = HEAP32[$20 + 36 >> 2];
      HEAP32[$13 >> 2] = HEAP32[$20 + 32 >> 2];
      HEAP32[$13 + 4 >> 2] = $0;
      $0 = $20 + 8 | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      HEAP32[$12 + 8 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$12 + 12 >> 2] = $2;
      $0 = HEAP32[$20 + 4 >> 2];
      HEAP32[$12 >> 2] = HEAP32[$20 >> 2];
      HEAP32[$12 + 4 >> 2] = $0;
      $17 = $10 * (HEAPF64[$51 >> 3] - $8);
      $18 = $11 * (HEAPF64[$50 >> 3] - $7);
      label$34 : {
       label$4 : {
        if ($17 > $18) {
         break label$4
        }
        $7 = $11 * (HEAPF64[$44 >> 3] - $7);
        $8 = $10 * (HEAPF64[$52 >> 3] - $8);
        if ($7 > $8) {
         break label$4
        }
        $25 = HEAPF64[$29 + 16 >> 3];
        $23 = $15 * (HEAPF64[$49 >> 3] - $25);
        $7 = $7 > $17 ? $7 : $17;
        if ($23 < $7) {
         break label$4
        }
        $17 = $15 * (HEAPF64[$34 >> 3] - $25);
        $8 = $8 > $18 ? $18 : $8;
        if ($17 > $8 | !(($7 < $17 ? $17 : $7) < $19) | !(($8 > $23 ? $23 : $8) > 0.0)) {
         break label$4
        }
        if (HEAP32[$20 + 72 >> 2]) {
         label$6 : {
          if (($5 | 0) <= ($24 | 0)) {
           $0 = $1;
           $2 = $3;
           break label$6;
          }
          $2 = $3 << 1;
          label$8 : {
           if (($3 | 0) >= ($2 | 0)) {
            $0 = $1;
            break label$8;
           }
           label$101 : {
            if (($2 | 0) <= ($6 | 0)) {
             $0 = $1;
             break label$101;
            }
            label$12 : {
             if (!$3) {
              $0 = 0;
              break label$12;
             }
             $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 3);
             if (($3 | 0) <= 0) {
              break label$12
             }
             $14 = $3 & 3;
             $6 = 0;
             if ($3 - 1 >>> 0 >= 3) {
              $53 = $3 & -4;
              $5 = 0;
              while (1) {
               $24 = $0 + $5 | 0;
               $21 = $1 + $5 | 0;
               HEAP32[$24 >> 2] = HEAP32[$21 >> 2];
               HEAP32[$24 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
               HEAP32[$24 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
               HEAP32[$24 + 12 >> 2] = HEAP32[$21 + 12 >> 2];
               $5 = $5 + 16 | 0;
               $6 = $6 + 4 | 0;
               if (($53 | 0) != ($6 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$14) {
              break label$12
             }
             $6 = $6 << 2;
             $5 = $6 + $0 | 0;
             $24 = $1 + $6 | 0;
             while (1) {
              HEAP32[$5 >> 2] = HEAP32[$24 >> 2];
              $5 = $5 + 4 | 0;
              $24 = $24 + 4 | 0;
              $14 = $14 - 1 | 0;
              if ($14) {
               continue
              }
              break;
             };
            }
            $5 = $16;
            $16 = 1;
            if ($5) {
             btAlignedFreeInternal_28void__29($1)
            }
            $6 = $2;
           }
           $1 = $3 << 2;
           memset($1 + $0 | 0, 0, $1);
          }
          $24 = $2 - 2 | 0;
         }
         HEAP32[$0 + $47 >> 2] = HEAP32[$20 + 68 >> 2];
         HEAP32[($9 << 2) + $0 >> 2] = HEAP32[$20 + 72 >> 2];
         $5 = $9 + 1 | 0;
         break label$34;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$39 >> 2] + 12 >> 2]]($39, $20);
       }
       $0 = $1;
       $2 = $3;
      }
      if ($5) {
       $7 = HEAPF64[$29 + 8 >> 3];
       $8 = HEAPF64[$29 >> 3];
       $1 = $0;
       $3 = $2;
       $9 = $5;
       continue;
      }
      break;
     };
     if (!$16) {
      break label$13
     }
     btAlignedFreeInternal_28void__29($0);
    }
    __stack_pointer = $12 + 576 | 0;
    break label$1;
   }
   $0 = HEAP32[$9 + 20 >> 2];
   if (($0 | 0) <= 0) {
    break label$1
   }
   $1 = $0 - 1 | 0;
   $3 = 128;
   $2 = 0;
   while (1) {
    $0 = HEAP32[$9 + 28 >> 2] + $3 | 0;
    $9 = HEAP32[$0 >> 2];
    $41 = HEAPF64[$5 + 104 >> 3];
    $42 = HEAPF64[$5 + 112 >> 3];
    $25 = HEAPF64[$0 - 32 >> 3];
    $27 = HEAPF64[$0 - 24 >> 3];
    $28 = HEAPF64[$0 - 16 >> 3];
    $8 = HEAPF64[$5 + 40 >> 3];
    $7 = HEAPF64[$5 + 48 >> 3];
    $26 = HEAPF64[$0 - 128 >> 3];
    $30 = HEAPF64[$0 - 96 >> 3];
    $31 = HEAPF64[$0 + -64 >> 3];
    $35 = HEAPF64[$0 - 120 >> 3];
    $32 = HEAPF64[$0 - 88 >> 3];
    $36 = HEAPF64[$0 - 56 >> 3];
    $37 = HEAPF64[$0 - 112 >> 3];
    $10 = HEAPF64[$5 + 72 >> 3];
    $38 = HEAPF64[$0 - 80 >> 3];
    $11 = HEAPF64[$5 + 80 >> 3];
    $33 = HEAPF64[$0 - 48 >> 3];
    $43 = HEAPF64[$5 + 96 >> 3];
    $15 = HEAPF64[$5 + 16 >> 3];
    $17 = HEAPF64[$5 >> 3];
    $18 = HEAPF64[$5 + 8 >> 3];
    $23 = HEAPF64[$5 + 32 >> 3];
    $19 = HEAPF64[$5 + 64 >> 3];
    HEAP32[$4 + 296 >> 2] = 0;
    HEAP32[$4 + 300 >> 2] = 0;
    HEAP32[$4 + 264 >> 2] = 0;
    HEAP32[$4 + 268 >> 2] = 0;
    HEAP32[$4 + 232 >> 2] = 0;
    HEAP32[$4 + 236 >> 2] = 0;
    HEAP32[$4 + 200 >> 2] = 0;
    HEAP32[$4 + 204 >> 2] = 0;
    HEAPF64[$4 + 256 >> 3] = $33 * $11 + ($37 * $19 + $38 * $10);
    HEAPF64[$4 + 248 >> 3] = $36 * $11 + ($35 * $19 + $32 * $10);
    HEAPF64[$4 + 240 >> 3] = $31 * $11 + ($26 * $19 + $30 * $10);
    HEAPF64[$4 + 224 >> 3] = $33 * $7 + ($37 * $23 + $38 * $8);
    HEAPF64[$4 + 216 >> 3] = $36 * $7 + ($35 * $23 + $32 * $8);
    HEAPF64[$4 + 208 >> 3] = $31 * $7 + ($26 * $23 + $30 * $8);
    HEAPF64[$4 + 192 >> 3] = $33 * $15 + ($37 * $17 + $18 * $38);
    HEAPF64[$4 + 184 >> 3] = $36 * $15 + ($35 * $17 + $18 * $32);
    HEAPF64[$4 + 176 >> 3] = $31 * $15 + ($26 * $17 + $30 * $18);
    HEAPF64[$4 + 288 >> 3] = $42 + ($28 * $11 + ($25 * $19 + $10 * $27));
    HEAPF64[$4 + 280 >> 3] = $41 + ($28 * $7 + ($25 * $23 + $8 * $27));
    HEAPF64[$4 + 272 >> 3] = $43 + ($28 * $15 + ($25 * $17 + $18 * $27));
    HEAP32[$4 + 116 >> 2] = $2;
    HEAP32[$4 + 112 >> 2] = -1;
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 132 >> 2];
    HEAP32[$4 + 100 >> 2] = $9;
    HEAP32[$4 + 96 >> 2] = 0;
    HEAP32[$4 + 108 >> 2] = $4 + 176;
    HEAP32[$4 + 904 >> 2] = 0;
    HEAP32[$4 + 908 >> 2] = 1072693248;
    HEAP32[$4 + 920 >> 2] = -1;
    HEAP32[$4 + 924 >> 2] = 0;
    HEAP32[$4 + 912 >> 2] = 0;
    HEAP32[$4 + 916 >> 2] = 1;
    HEAP32[$4 + 932 >> 2] = $2;
    HEAP32[$4 + 896 >> 2] = 26824;
    $0 = HEAP32[$4 + 152 >> 2];
    HEAP32[$4 + 928 >> 2] = $0;
    HEAPF64[$4 + 904 >> 3] = HEAPF64[$0 + 8 >> 3];
    HEAP32[$4 + 924 >> 2] = HEAP32[$0 + 28 >> 2];
    btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$4 + 144 >> 2], HEAP32[$4 + 148 >> 2], $4 + 96 | 0, $4 + 896 | 0);
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    $2 = $2 + 1 | 0;
    $3 = $3 + 152 | 0;
    $5 = HEAP32[$4 + 140 >> 2];
    $9 = HEAP32[$4 + 136 >> 2];
    continue;
   };
  }
  __stack_pointer = $4 + 1344 | 0;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
  $6 = __stack_pointer - 1312 | 0;
  __stack_pointer = $6;
  $9 = HEAP32[$3 + 12 >> 2];
  $28 = HEAP32[$3 + 4 >> 2];
  $13 = HEAP32[$28 + 4 >> 2];
  label$1 : {
   if (($13 | 0) <= 19) {
    HEAPF64[$6 + 1280 >> 3] = $5;
    HEAP32[$6 + 1272 >> 2] = 0;
    HEAP32[$6 + 936 >> 2] = 16128;
    HEAPF64[$6 + 1264 >> 3] = HEAPF64[$4 + 8 >> 3];
    HEAP8[$6 + 880 | 0] = 0;
    HEAP32[$6 + 832 >> 2] = -2147483648;
    HEAP32[$6 + 836 >> 2] = 1030854553;
    HEAP32[$6 + 72 >> 2] = 14936;
    $0 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($6 + 104 | 0, $0, $28, $6 + 216 | 0, $6 + 72 | 0);
    label$3 : {
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $9, $9, $6 + 936 | 0) | 0)) {
      break label$3
     }
     $10 = HEAPF64[$6 + 1216 >> 3];
     $12 = HEAPF64[$6 + 1200 >> 3];
     $11 = HEAPF64[$6 + 1208 >> 3];
     $7 = $10 * $10 + ($12 * $12 + $11 * $11);
     if (!($7 > .0001)) {
      break label$3
     }
     $5 = HEAPF64[$6 + 1264 >> 3];
     if (!($5 < HEAPF64[$4 + 8 >> 3])) {
      break label$3
     }
     $7 = 1.0 / Math_sqrt($7);
     HEAPF64[$6 + 1216 >> 3] = $10 * $7;
     HEAPF64[$6 + 1208 >> 3] = $11 * $7;
     HEAPF64[$6 + 1200 >> 3] = $12 * $7;
     $2 = $6 + 1240 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $0 = $6 + 184 | 0;
     HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     $2 = $6 + 1248 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $0 = $6 + 192 | 0;
     HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     $2 = $6 + 1256 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $0 = $6 + 200 | 0;
     HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     $13 = $6 + 1200 | 0;
     $2 = $13 + 8 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $8 = $6 + 136 | 0;
     $0 = $8 + 16 | 0;
     HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     $2 = $13 + 16 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $0 = $8 + 24 | 0;
     HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     $2 = $13 + 24 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $0 = $6 + 168 | 0;
     HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     HEAP32[$6 + 140 >> 2] = 0;
     $0 = HEAP32[$6 + 1236 >> 2];
     HEAP32[$6 + 176 >> 2] = HEAP32[$6 + 1232 >> 2];
     HEAP32[$6 + 180 >> 2] = $0;
     HEAP32[$6 + 136 >> 2] = HEAP32[$3 + 8 >> 2];
     $0 = HEAP32[$13 + 4 >> 2];
     HEAP32[$6 + 144 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$6 + 148 >> 2] = $0;
     HEAPF64[$6 + 208 >> 3] = $5;
     +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $8, 1);
    }
    break label$1;
   }
   $8 = $13 - 21 | 0;
   if ($8 >>> 0 <= 8) {
    label$5 : {
     switch ($8 | 0) {
     case 0:
      $16 = HEAPF64[$9 + 40 >> 3];
      $17 = HEAPF64[$9 + 72 >> 3];
      $19 = HEAPF64[$9 + 104 >> 3];
      $18 = HEAPF64[$9 + 48 >> 3];
      $20 = HEAPF64[$9 + 112 >> 3];
      $21 = HEAPF64[$9 + 80 >> 3];
      $22 = HEAPF64[$9 + 64 >> 3];
      $23 = HEAPF64[$9 >> 3];
      $24 = HEAPF64[$9 + 32 >> 3];
      $25 = HEAPF64[$9 + 8 >> 3];
      $26 = HEAPF64[$9 + 16 >> 3];
      $7 = HEAPF64[$9 + 96 >> 3];
      HEAP32[$6 + 160 >> 2] = 0;
      HEAP32[$6 + 164 >> 2] = 0;
      $7 = -$7;
      $12 = $26 * $7 - $18 * $19 - $21 * $20;
      $15 = HEAPF64[$1 + 112 >> 3];
      $14 = HEAPF64[$1 + 96 >> 3];
      $10 = HEAPF64[$1 + 104 >> 3];
      HEAPF64[$6 + 152 >> 3] = $12 + ($21 * $15 + ($26 * $14 + $18 * $10));
      $11 = $25 * $7 - $16 * $19 - $17 * $20;
      HEAPF64[$6 + 144 >> 3] = $11 + ($15 * $17 + ($14 * $25 + $16 * $10));
      $7 = $23 * $7 - $24 * $19 - $22 * $20;
      HEAPF64[$6 + 136 >> 3] = $7 + ($15 * $22 + ($14 * $23 + $24 * $10));
      HEAP32[$6 + 128 >> 2] = 0;
      HEAP32[$6 + 132 >> 2] = 0;
      $35 = $12;
      $14 = HEAPF64[$2 + 112 >> 3];
      $10 = HEAPF64[$2 + 96 >> 3];
      $12 = HEAPF64[$2 + 104 >> 3];
      HEAPF64[$6 + 120 >> 3] = $35 + ($21 * $14 + ($26 * $10 + $18 * $12));
      HEAPF64[$6 + 112 >> 3] = $11 + ($14 * $17 + ($10 * $25 + $16 * $12));
      HEAPF64[$6 + 104 >> 3] = $7 + ($14 * $22 + ($10 * $23 + $24 * $12));
      $8 = $6 + 992 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $13 = $6 + 936 | 0;
      $27 = HEAPF64[$2 + 80 >> 3];
      $19 = HEAPF64[$2 + 16 >> 3];
      $20 = HEAPF64[$2 + 48 >> 3];
      HEAPF64[$13 + 80 >> 3] = $21 * $27 + ($26 * $19 + $18 * $20);
      $15 = HEAPF64[$2 + 72 >> 3];
      $14 = HEAPF64[$2 + 8 >> 3];
      $10 = HEAPF64[$2 + 40 >> 3];
      HEAPF64[$13 + 72 >> 3] = $21 * $15 + ($26 * $14 + $18 * $10);
      HEAPF64[$13 + 48 >> 3] = $27 * $17 + ($19 * $25 + $16 * $20);
      HEAPF64[$13 + 40 >> 3] = $15 * $17 + ($14 * $25 + $16 * $10);
      HEAP32[$6 + 960 >> 2] = 0;
      HEAP32[$6 + 964 >> 2] = 0;
      $12 = HEAPF64[$2 + 64 >> 3];
      $11 = HEAPF64[$2 >> 3];
      $7 = HEAPF64[$2 + 32 >> 3];
      HEAPF64[$6 + 1e3 >> 3] = $21 * $12 + ($26 * $11 + $18 * $7);
      HEAPF64[$6 + 968 >> 3] = $12 * $17 + ($11 * $25 + $16 * $7);
      HEAPF64[$6 + 952 >> 3] = $27 * $22 + ($19 * $23 + $24 * $20);
      HEAPF64[$6 + 944 >> 3] = $15 * $22 + ($14 * $23 + $24 * $10);
      HEAPF64[$6 + 936 >> 3] = $12 * $22 + ($11 * $23 + $24 * $7);
      $8 = $6 + 1056 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $8 = $13 + 112 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $8 = $13 + 104 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $8 = $6 + 1032 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $8 = $6 + 1024 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $8 = HEAP32[$3 + 8 >> 2];
      $3 = $6 + 216 | 0;
      btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20double_29($3, $0, $1, $2, $9, +FUNCTION_TABLE[HEAP32[HEAP32[$28 >> 2] + 48 >> 2]]($28));
      HEAP32[$6 + 640 >> 2] = $28;
      HEAP32[$6 + 636 >> 2] = $8;
      HEAP32[$6 + 216 >> 2] = 26996;
      HEAPF64[$6 + 624 >> 3] = $5;
      HEAP32[$6 + 632 >> 2] = $4;
      HEAPF64[$6 + 608 >> 3] = HEAPF64[$4 + 8 >> 3];
      $2 = $6 + 72 | 0;
      $1 = $6 + 40 | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $13, $2, $1);
      $4 = $6 + 136 | 0;
      $0 = $6 + 104 | 0;
      $8 = __stack_pointer - 16 | 0;
      __stack_pointer = $8;
      HEAP32[$8 + 8 >> 2] = $3;
      HEAP32[$8 >> 2] = 11372;
      HEAP32[$8 + 4 >> 2] = HEAP32[$28 + 88 >> 2];
      $3 = HEAP32[$28 + 92 >> 2];
      __inlined_func$btQuantizedBvh__reportBoxCastOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const : {
       if (HEAPU8[$3 + 112 | 0]) {
        btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($3, $8, $4, $0, $2, $1, HEAP32[$3 + 108 >> 2]);
        break __inlined_func$btQuantizedBvh__reportBoxCastOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const;
       }
       btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($3, $8, $4, $0, $2, $1);
      }
      __stack_pointer = $8 + 16 | 0;
      break label$1;
     case 7:
      HEAPF64[$6 + 560 >> 3] = $5;
      HEAP32[$6 + 552 >> 2] = 0;
      HEAP32[$6 + 216 >> 2] = 16128;
      HEAPF64[$6 + 544 >> 3] = HEAPF64[$4 + 8 >> 3];
      $8 = $6 + 136 | 0;
      HEAP32[$8 + 20 >> 2] = $28;
      HEAP32[$8 + 16 >> 2] = 0;
      HEAP32[$8 + 12 >> 2] = $0;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAP32[$8 + 8 >> 2] = 0;
      HEAP32[$8 >> 2] = 25988;
      label$8 : {
       if (!(FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 8 >> 2]]($8, $1, $2, $9, $9, $6 + 216 | 0) | 0)) {
        break label$8
       }
       $10 = HEAPF64[$6 + 496 >> 3];
       $12 = HEAPF64[$6 + 480 >> 3];
       $11 = HEAPF64[$6 + 488 >> 3];
       $7 = $10 * $10 + ($12 * $12 + $11 * $11);
       if (!($7 > .0001)) {
        break label$8
       }
       $5 = HEAPF64[$6 + 544 >> 3];
       if (!($5 < HEAPF64[$4 + 8 >> 3])) {
        break label$8
       }
       $7 = 1.0 / Math_sqrt($7);
       HEAPF64[$6 + 496 >> 3] = $10 * $7;
       HEAPF64[$6 + 488 >> 3] = $11 * $7;
       HEAPF64[$6 + 480 >> 3] = $12 * $7;
       $2 = $6 + 520 | 0;
       $1 = HEAP32[$2 + 4 >> 2];
       $0 = $6 + 984 | 0;
       HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       $2 = $6 + 528 | 0;
       $1 = HEAP32[$2 + 4 >> 2];
       $0 = $6 + 992 | 0;
       HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       $2 = $6 + 536 | 0;
       $1 = HEAP32[$2 + 4 >> 2];
       $0 = $6 + 1e3 | 0;
       HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       $13 = $6 + 480 | 0;
       $2 = $13 + 8 | 0;
       $1 = HEAP32[$2 + 4 >> 2];
       $8 = $6 + 936 | 0;
       $0 = $8 + 16 | 0;
       HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       $2 = $13 + 16 | 0;
       $1 = HEAP32[$2 + 4 >> 2];
       $0 = $8 + 24 | 0;
       HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       $2 = $13 + 24 | 0;
       $1 = HEAP32[$2 + 4 >> 2];
       $0 = $6 + 968 | 0;
       HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$0 + 4 >> 2] = $1;
       HEAP32[$6 + 940 >> 2] = 0;
       $0 = HEAP32[$6 + 516 >> 2];
       HEAP32[$6 + 976 >> 2] = HEAP32[$6 + 512 >> 2];
       HEAP32[$6 + 980 >> 2] = $0;
       HEAP32[$6 + 936 >> 2] = HEAP32[$3 + 8 >> 2];
       $0 = HEAP32[$13 + 4 >> 2];
       HEAP32[$6 + 944 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$6 + 948 >> 2] = $0;
       HEAPF64[$6 + 1008 >> 3] = $5;
       +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $8, 1);
      }
      break label$1;
     default:
      break label$5;
     };
    }
    $16 = HEAPF64[$1 + 104 >> 3];
    $17 = HEAPF64[$1 + 112 >> 3];
    $18 = HEAPF64[$9 + 104 >> 3];
    $21 = HEAPF64[$9 + 112 >> 3];
    $22 = HEAPF64[$2 + 104 >> 3];
    $23 = HEAPF64[$2 + 112 >> 3];
    $38 = HEAPF64[$9 + 40 >> 3];
    $36 = HEAPF64[$9 + 72 >> 3];
    $35 = HEAPF64[$9 + 48 >> 3];
    $29 = HEAPF64[$9 + 80 >> 3];
    $24 = HEAPF64[$1 + 96 >> 3];
    $7 = HEAPF64[$9 + 96 >> 3];
    $25 = HEAPF64[$2 + 96 >> 3];
    $30 = HEAPF64[$9 + 64 >> 3];
    $31 = HEAPF64[$9 >> 3];
    $32 = HEAPF64[$9 + 32 >> 3];
    $33 = HEAPF64[$9 + 8 >> 3];
    $34 = HEAPF64[$9 + 16 >> 3];
    $8 = $6 + 992 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $13 = $6 + 936 | 0;
    $26 = HEAPF64[$2 + 80 >> 3];
    $27 = HEAPF64[$2 + 16 >> 3];
    $19 = HEAPF64[$2 + 48 >> 3];
    HEAPF64[$13 + 80 >> 3] = $29 * $26 + ($34 * $27 + $35 * $19);
    $20 = HEAPF64[$2 + 72 >> 3];
    $15 = HEAPF64[$2 + 8 >> 3];
    $14 = HEAPF64[$2 + 40 >> 3];
    HEAPF64[$13 + 72 >> 3] = $29 * $20 + ($34 * $15 + $35 * $14);
    HEAPF64[$13 + 48 >> 3] = $26 * $36 + ($27 * $33 + $38 * $19);
    HEAPF64[$13 + 40 >> 3] = $20 * $36 + ($15 * $33 + $38 * $14);
    HEAP32[$6 + 960 >> 2] = 0;
    HEAP32[$6 + 964 >> 2] = 0;
    $10 = HEAPF64[$2 + 64 >> 3];
    $12 = HEAPF64[$2 >> 3];
    $11 = HEAPF64[$2 + 32 >> 3];
    HEAPF64[$6 + 1e3 >> 3] = $29 * $10 + ($34 * $12 + $35 * $11);
    HEAPF64[$6 + 968 >> 3] = $10 * $36 + ($12 * $33 + $38 * $11);
    HEAPF64[$6 + 952 >> 3] = $26 * $30 + ($27 * $31 + $32 * $19);
    HEAPF64[$6 + 944 >> 3] = $20 * $30 + ($15 * $31 + $32 * $14);
    HEAPF64[$6 + 936 >> 3] = $10 * $30 + ($12 * $31 + $32 * $11);
    $8 = $6 + 1056 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $8 = $13 + 112 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $8 = $13 + 104 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $8 = $6 + 1032 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $8 = $6 + 1024 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $3 = HEAP32[$3 + 8 >> 2];
    btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20double_29($6 + 216 | 0, $0, $1, $2, $9, +FUNCTION_TABLE[HEAP32[HEAP32[$28 >> 2] + 48 >> 2]]($28));
    HEAP32[$6 + 640 >> 2] = $28;
    HEAP32[$6 + 636 >> 2] = $3;
    HEAP32[$6 + 216 >> 2] = 27208;
    HEAPF64[$6 + 624 >> 3] = $5;
    HEAP32[$6 + 632 >> 2] = $4;
    HEAPF64[$6 + 608 >> 3] = HEAPF64[$4 + 8 >> 3];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $13, $6 + 136 | 0, $6 + 104 | 0);
    HEAP32[$6 + 96 >> 2] = 0;
    HEAP32[$6 + 100 >> 2] = 0;
    $5 = -$7;
    $12 = $34 * $5 - $35 * $18 - $29 * $21;
    $15 = $12 + ($23 * $29 + ($25 * $34 + $35 * $22));
    $11 = $33 * $5 - $38 * $18 - $36 * $21;
    $14 = $11 + ($23 * $36 + ($25 * $33 + $38 * $22));
    $7 = $31 * $5 - $32 * $18 - $30 * $21;
    $10 = $7 + ($17 * $30 + ($24 * $31 + $32 * $16));
    $5 = $10;
    $7 = $7 + ($23 * $30 + ($25 * $31 + $32 * $22));
    if ($10 > $7) {
     HEAPF64[$6 + 72 >> 3] = $7;
     $5 = $7;
    }
    HEAP32[$6 + 64 >> 2] = 0;
    HEAP32[$6 + 68 >> 2] = 0;
    HEAPF64[$6 + 72 >> 3] = $5 + HEAPF64[$6 + 136 >> 3];
    $11 = $11 + ($17 * $36 + ($24 * $33 + $38 * $16));
    HEAPF64[$6 + 80 >> 3] = ($11 > $14 ? $14 : $11) + HEAPF64[$6 + 144 >> 3];
    $5 = $12 + ($17 * $29 + ($24 * $34 + $35 * $16));
    HEAPF64[$6 + 88 >> 3] = ($5 > $15 ? $15 : $5) + HEAPF64[$6 + 152 >> 3];
    HEAPF64[$6 + 40 >> 3] = ($7 > $10 ? $7 : $10) + HEAPF64[$6 + 104 >> 3];
    HEAPF64[$6 + 48 >> 3] = ($11 < $14 ? $14 : $11) + HEAPF64[$6 + 112 >> 3];
    HEAPF64[$6 + 56 >> 3] = ($5 < $15 ? $15 : $5) + HEAPF64[$6 + 120 >> 3];
    FUNCTION_TABLE[HEAP32[HEAP32[$28 >> 2] + 64 >> 2]]($28, $6 + 216 | 0, $6 + 72 | 0, $6 + 40 | 0);
    break label$1;
   }
   if (($13 | 0) != 31) {
    break label$1
   }
   CProfileSample__CProfileSample_28char_20const__29($6 + 32 | 0, 3595);
   $42 = $9 + 104 | 0;
   $21 = HEAPF64[$42 >> 3];
   $43 = $9 + 112 | 0;
   $22 = HEAPF64[$43 >> 3];
   $23 = HEAPF64[$1 + 104 >> 3];
   $24 = HEAPF64[$1 + 112 >> 3];
   $44 = $9 + 40 | 0;
   $29 = HEAPF64[$44 >> 3];
   $45 = $9 + 72 | 0;
   $30 = HEAPF64[$45 >> 3];
   $25 = HEAPF64[$1 + 40 >> 3];
   $26 = HEAPF64[$1 + 72 >> 3];
   $27 = HEAPF64[$1 + 48 >> 3];
   $46 = $9 + 48 | 0;
   $31 = HEAPF64[$46 >> 3];
   $19 = HEAPF64[$1 + 80 >> 3];
   $47 = $9 + 80 | 0;
   $32 = HEAPF64[$47 >> 3];
   $33 = HEAPF64[$9 + 64 >> 3];
   $34 = HEAPF64[$9 >> 3];
   $16 = HEAPF64[$9 + 32 >> 3];
   $20 = HEAPF64[$1 + 64 >> 3];
   $15 = HEAPF64[$1 >> 3];
   $14 = HEAPF64[$1 + 32 >> 3];
   $7 = HEAPF64[$9 + 96 >> 3];
   $10 = HEAPF64[$1 + 96 >> 3];
   $17 = HEAPF64[$9 + 8 >> 3];
   $12 = HEAPF64[$1 + 8 >> 3];
   $11 = HEAPF64[$1 + 16 >> 3];
   $18 = HEAPF64[$9 + 16 >> 3];
   $39 = $6 + 336 | 0;
   HEAP32[$39 >> 2] = 0;
   HEAP32[$39 + 4 >> 2] = 0;
   $40 = $6 + 304 | 0;
   HEAP32[$40 >> 2] = 0;
   HEAP32[$40 + 4 >> 2] = 0;
   $41 = $6 + 272 | 0;
   HEAP32[$41 >> 2] = 0;
   HEAP32[$41 + 4 >> 2] = 0;
   $37 = $6 + 216 | 0;
   $48 = $37 + 80 | 0;
   HEAPF64[$48 >> 3] = $19 * $32 + ($11 * $18 + $31 * $27);
   $49 = $37 + 72 | 0;
   HEAPF64[$49 >> 3] = $26 * $32 + ($12 * $18 + $31 * $25);
   $50 = $37 + 48 | 0;
   HEAPF64[$50 >> 3] = $19 * $30 + ($11 * $17 + $29 * $27);
   $51 = $37 + 40 | 0;
   HEAPF64[$51 >> 3] = $26 * $30 + ($12 * $17 + $29 * $25);
   $13 = $37 + 112 | 0;
   $7 = -$7;
   HEAPF64[$13 >> 3] = $18 * $7 - $31 * $21 - $32 * $22 + ($24 * $32 + ($10 * $18 + $31 * $23));
   $8 = $37 + 104 | 0;
   HEAPF64[$8 >> 3] = $17 * $7 - $29 * $21 - $30 * $22 + ($24 * $30 + ($10 * $17 + $29 * $23));
   HEAP32[$6 + 240 >> 2] = 0;
   HEAP32[$6 + 244 >> 2] = 0;
   HEAPF64[$6 + 280 >> 3] = $20 * $32 + ($15 * $18 + $31 * $14);
   HEAPF64[$6 + 248 >> 3] = $20 * $30 + ($15 * $17 + $29 * $14);
   HEAPF64[$6 + 232 >> 3] = $19 * $33 + ($11 * $34 + $16 * $27);
   HEAPF64[$6 + 224 >> 3] = $26 * $33 + ($12 * $34 + $16 * $25);
   HEAPF64[$6 + 312 >> 3] = $34 * $7 - $16 * $21 - $33 * $22 + ($24 * $33 + ($10 * $34 + $16 * $23));
   HEAPF64[$6 + 216 >> 3] = $20 * $33 + ($15 * $34 + $16 * $14);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $37, $6 + 104 | 0, $6 + 72 | 0);
   $21 = HEAPF64[$42 >> 3];
   $22 = HEAPF64[$43 >> 3];
   $23 = HEAPF64[$2 + 104 >> 3];
   $24 = HEAPF64[$2 + 112 >> 3];
   $29 = HEAPF64[$44 >> 3];
   $30 = HEAPF64[$45 >> 3];
   $25 = HEAPF64[$2 + 40 >> 3];
   $26 = HEAPF64[$2 + 72 >> 3];
   $27 = HEAPF64[$2 + 48 >> 3];
   $31 = HEAPF64[$46 >> 3];
   $19 = HEAPF64[$2 + 80 >> 3];
   $32 = HEAPF64[$47 >> 3];
   $33 = HEAPF64[$9 + 64 >> 3];
   $34 = HEAPF64[$9 >> 3];
   $16 = HEAPF64[$9 + 32 >> 3];
   $20 = HEAPF64[$2 + 64 >> 3];
   $15 = HEAPF64[$2 >> 3];
   $14 = HEAPF64[$2 + 32 >> 3];
   $7 = HEAPF64[$9 + 96 >> 3];
   $10 = HEAPF64[$2 + 96 >> 3];
   $17 = HEAPF64[$9 + 8 >> 3];
   $12 = HEAPF64[$2 + 8 >> 3];
   $11 = HEAPF64[$2 + 16 >> 3];
   $18 = HEAPF64[$9 + 16 >> 3];
   HEAP32[$39 >> 2] = 0;
   HEAP32[$39 + 4 >> 2] = 0;
   HEAP32[$40 >> 2] = 0;
   HEAP32[$40 + 4 >> 2] = 0;
   HEAP32[$41 >> 2] = 0;
   HEAP32[$41 + 4 >> 2] = 0;
   HEAPF64[$48 >> 3] = $19 * $32 + ($11 * $18 + $31 * $27);
   HEAPF64[$49 >> 3] = $26 * $32 + ($12 * $18 + $31 * $25);
   HEAPF64[$50 >> 3] = $19 * $30 + ($11 * $17 + $29 * $27);
   HEAPF64[$51 >> 3] = $26 * $30 + ($12 * $17 + $29 * $25);
   $7 = -$7;
   HEAPF64[$13 >> 3] = $18 * $7 - $31 * $21 - $32 * $22 + ($24 * $32 + ($10 * $18 + $31 * $23));
   HEAPF64[$8 >> 3] = $17 * $7 - $29 * $21 - $30 * $22 + ($24 * $30 + ($10 * $17 + $29 * $23));
   HEAP32[$6 + 240 >> 2] = 0;
   HEAP32[$6 + 244 >> 2] = 0;
   HEAPF64[$6 + 280 >> 3] = $20 * $32 + ($15 * $18 + $31 * $14);
   HEAPF64[$6 + 248 >> 3] = $20 * $30 + ($15 * $17 + $29 * $14);
   HEAPF64[$6 + 232 >> 3] = $19 * $33 + ($11 * $34 + $16 * $27);
   HEAPF64[$6 + 224 >> 3] = $26 * $33 + ($12 * $34 + $16 * $25);
   HEAPF64[$6 + 312 >> 3] = $34 * $7 - $16 * $21 - $33 * $22 + ($24 * $33 + ($10 * $34 + $16 * $23));
   HEAPF64[$6 + 216 >> 3] = $20 * $33 + ($15 * $34 + $16 * $14);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $37, $6 + 40 | 0, $6);
   $7 = HEAPF64[$6 + 40 >> 3];
   if ($7 < HEAPF64[$6 + 104 >> 3]) {
    HEAPF64[$6 + 104 >> 3] = $7
   }
   $7 = HEAPF64[$6 + 48 >> 3];
   if ($7 < HEAPF64[$6 + 112 >> 3]) {
    HEAPF64[$6 + 112 >> 3] = $7
   }
   $7 = HEAPF64[$6 + 56 >> 3];
   if ($7 < HEAPF64[$6 + 120 >> 3]) {
    HEAPF64[$6 + 120 >> 3] = $7
   }
   $7 = HEAPF64[$6 + 64 >> 3];
   if ($7 < HEAPF64[$6 + 128 >> 3]) {
    HEAPF64[$6 + 128 >> 3] = $7
   }
   $7 = HEAPF64[$6 >> 3];
   if ($7 > HEAPF64[$6 + 72 >> 3]) {
    HEAPF64[$6 + 72 >> 3] = $7
   }
   $7 = HEAPF64[$6 + 8 >> 3];
   if ($7 > HEAPF64[$6 + 80 >> 3]) {
    HEAPF64[$6 + 80 >> 3] = $7
   }
   $7 = HEAPF64[$6 + 16 >> 3];
   if ($7 > HEAPF64[$6 + 88 >> 3]) {
    HEAPF64[$6 + 88 >> 3] = $7
   }
   $7 = HEAPF64[$6 + 24 >> 3];
   if ($7 > HEAPF64[$6 + 96 >> 3]) {
    HEAPF64[$6 + 96 >> 3] = $7
   }
   HEAP32[$6 + 976 >> 2] = $4;
   HEAP32[$6 + 972 >> 2] = $9;
   HEAPF64[$6 + 960 >> 3] = $5;
   HEAP32[$6 + 952 >> 2] = $2;
   HEAP32[$6 + 948 >> 2] = $1;
   HEAP32[$6 + 944 >> 2] = $0;
   HEAP32[$6 + 940 >> 2] = $3;
   HEAP32[$6 + 936 >> 2] = 27424;
   HEAP32[$6 + 968 >> 2] = $28;
   $4 = HEAP32[$28 + 104 >> 2];
   label$18 : {
    if (!$4) {
     if (HEAP32[$28 + 20 >> 2] <= 0) {
      break label$18
     }
     $3 = 128;
     $1 = 1;
     while (1) {
      $0 = HEAP32[$28 + 28 >> 2] + $3 | 0;
      $4 = HEAP32[$0 >> 2];
      $16 = HEAPF64[$0 - 32 >> 3];
      $17 = HEAPF64[$0 - 24 >> 3];
      $18 = HEAPF64[$0 - 16 >> 3];
      $21 = HEAPF64[$0 - 128 >> 3];
      $22 = HEAPF64[$0 - 96 >> 3];
      $23 = HEAPF64[$0 + -64 >> 3];
      $24 = HEAPF64[$0 - 120 >> 3];
      $25 = HEAPF64[$0 - 88 >> 3];
      $26 = HEAPF64[$0 - 56 >> 3];
      $7 = HEAPF64[$0 - 112 >> 3];
      $27 = HEAPF64[$0 - 80 >> 3];
      $5 = HEAPF64[$0 - 48 >> 3];
      HEAP32[$6 + 336 >> 2] = 0;
      HEAP32[$6 + 340 >> 2] = 0;
      HEAP32[$6 + 304 >> 2] = 0;
      HEAP32[$6 + 308 >> 2] = 0;
      HEAP32[$6 + 272 >> 2] = 0;
      HEAP32[$6 + 276 >> 2] = 0;
      HEAP32[$6 + 240 >> 2] = 0;
      HEAP32[$6 + 244 >> 2] = 0;
      $19 = HEAPF64[$9 + 80 >> 3];
      $20 = HEAPF64[$9 + 64 >> 3];
      $15 = HEAPF64[$9 + 72 >> 3];
      HEAPF64[$6 + 296 >> 3] = $5 * $19 + ($7 * $20 + $27 * $15);
      HEAPF64[$6 + 288 >> 3] = $26 * $19 + ($24 * $20 + $25 * $15);
      HEAPF64[$6 + 280 >> 3] = $23 * $19 + ($21 * $20 + $22 * $15);
      $14 = HEAPF64[$9 + 48 >> 3];
      $10 = HEAPF64[$9 + 32 >> 3];
      $12 = HEAPF64[$9 + 40 >> 3];
      HEAPF64[$6 + 264 >> 3] = $5 * $14 + ($7 * $10 + $27 * $12);
      HEAPF64[$6 + 256 >> 3] = $26 * $14 + ($24 * $10 + $25 * $12);
      HEAPF64[$6 + 248 >> 3] = $23 * $14 + ($21 * $10 + $22 * $12);
      $11 = HEAPF64[$9 + 16 >> 3];
      $36 = $5 * $11;
      $35 = $7;
      $7 = HEAPF64[$9 >> 3];
      $5 = HEAPF64[$9 + 8 >> 3];
      HEAPF64[$6 + 232 >> 3] = $36 + ($35 * $7 + $27 * $5);
      HEAPF64[$6 + 224 >> 3] = $26 * $11 + ($24 * $7 + $25 * $5);
      HEAPF64[$6 + 216 >> 3] = $23 * $11 + ($21 * $7 + $22 * $5);
      HEAPF64[$6 + 328 >> 3] = $18 * $19 + ($16 * $20 + $17 * $15) + HEAPF64[$9 + 112 >> 3];
      HEAPF64[$6 + 320 >> 3] = $18 * $14 + ($16 * $10 + $17 * $12) + HEAPF64[$9 + 104 >> 3];
      HEAPF64[$6 + 312 >> 3] = $18 * $11 + ($16 * $7 + $17 * $5) + HEAPF64[$9 + 96 >> 3];
      HEAP32[$6 + 144 >> 2] = 0;
      HEAP32[$6 + 148 >> 2] = 1072693248;
      HEAP32[$6 + 152 >> 2] = 1;
      HEAP32[$6 + 156 >> 2] = -1;
      $2 = $1 - 1 | 0;
      HEAP32[$6 + 164 >> 2] = $2;
      $0 = HEAP32[$6 + 976 >> 2];
      HEAP32[$6 + 160 >> 2] = $0;
      HEAP32[$6 + 136 >> 2] = 27640;
      HEAPF64[$6 + 144 >> 3] = HEAPF64[$0 + 8 >> 3];
      HEAP32[$6 + 1308 >> 2] = $2;
      HEAP32[$6 + 1304 >> 2] = -1;
      HEAP32[$6 + 1292 >> 2] = $4;
      $0 = HEAP32[$6 + 940 >> 2];
      HEAP32[$6 + 1288 >> 2] = $0;
      HEAP32[$6 + 1296 >> 2] = HEAP32[$0 + 8 >> 2];
      HEAP32[$6 + 1300 >> 2] = $6 + 216;
      btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29(HEAP32[$6 + 944 >> 2], HEAP32[$6 + 948 >> 2], HEAP32[$6 + 952 >> 2], $6 + 1288 | 0, $6 + 136 | 0, HEAPF64[$6 + 960 >> 3]);
      if (HEAP32[$28 + 20 >> 2] <= ($1 | 0)) {
       break label$18
      }
      $3 = $3 + 152 | 0;
      $1 = $1 + 1 | 0;
      $9 = HEAP32[$6 + 972 >> 2];
      continue;
     };
    }
    $3 = $6 + 104 | 0;
    $2 = $3 + 24 | 0;
    $1 = HEAP32[$2 + 4 >> 2];
    $8 = $6 + 216 | 0;
    $0 = $8 + 24 | 0;
    HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $2 = $3 + 16 | 0;
    $1 = HEAP32[$2 + 4 >> 2];
    $0 = $8 + 16 | 0;
    HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $2 = $3 + 8 | 0;
    $1 = HEAP32[$2 + 4 >> 2];
    $0 = $8 + 8 | 0;
    HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $3 = $6 + 72 | 0;
    $2 = $3 + 8 | 0;
    $1 = HEAP32[$2 + 4 >> 2];
    $0 = $6 + 256 | 0;
    HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $2 = $3 + 16 | 0;
    $1 = HEAP32[$2 + 4 >> 2];
    $0 = $6 + 264 | 0;
    HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $2 = $3 + 24 | 0;
    $1 = HEAP32[$2 + 4 >> 2];
    $0 = $6 + 272 | 0;
    HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    $0 = HEAP32[$6 + 76 >> 2];
    HEAP32[$6 + 248 >> 2] = HEAP32[$6 + 72 >> 2];
    HEAP32[$6 + 252 >> 2] = $0;
    $0 = HEAP32[$6 + 108 >> 2];
    HEAP32[$6 + 216 >> 2] = HEAP32[$6 + 104 >> 2];
    HEAP32[$6 + 220 >> 2] = $0;
    btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($4, HEAP32[$4 >> 2], $8, $6 + 936 | 0);
   }
   CProfileSample___CProfileSample_28_29();
  }
  __stack_pointer = $6 + 1312 | 0;
 }
 
 function btCollisionWorld__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btCollisionWorld__RayResultCallback__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0;
  $4 = __stack_pointer - 496 | 0;
  __stack_pointer = $4;
  $15 = $1 + 8 | 0;
  $5 = HEAP32[$15 + 4 >> 2];
  $16 = $4 + 144 | 0;
  $10 = $16;
  HEAP32[$10 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$10 + 4 >> 2] = $5;
  $10 = $1 + 16 | 0;
  $6 = HEAP32[$10 + 4 >> 2];
  $17 = $4 + 152 | 0;
  $5 = $17;
  HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $8 = $1 + 24 | 0;
  $6 = $8;
  $9 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 160 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $9;
  $5 = $2 + 8 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $18 = $4 + 176 | 0;
  $6 = $18;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $6 = $2 + 16 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $19 = $4 + 184 | 0;
  $9 = $19;
  HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$9 + 4 >> 2] = $7;
  $9 = $2 + 24 | 0;
  $22 = HEAP32[$9 + 4 >> 2];
  $7 = $4 + 192 | 0;
  HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 + 4 >> 2] = $22;
  HEAP32[$4 + 72 >> 2] = 27900;
  HEAP32[$4 + 492 >> 2] = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 136 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 140 >> 2] = $3;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 + 168 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 172 >> 2] = $3;
  HEAP32[$4 + 488 >> 2] = $0;
  $3 = $4 + 208 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 216 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 224 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 232 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 240 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 248 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 256 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 264 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 272 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 288 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 280 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $7 = HEAP32[$1 + 4 >> 2];
  $3 = $4 + 296 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $7 = HEAP32[$15 + 4 >> 2];
  $3 = $4 + 304 | 0;
  HEAP32[$3 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $7 = HEAP32[$10 + 4 >> 2];
  $3 = $4 + 312 | 0;
  HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $7 = HEAP32[$8 + 4 >> 2];
  $3 = $4 + 320 | 0;
  HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  HEAP32[$4 + 200 >> 2] = 0;
  HEAP32[$4 + 204 >> 2] = 1072693248;
  $3 = $4 + 336 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 344 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 352 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 360 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 376 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 368 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 384 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 392 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 400 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $4 + 408 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $4 + 416 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $8 = HEAP32[$2 + 4 >> 2];
  $3 = $4 + 424 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $8 = HEAP32[$5 + 4 >> 2];
  $3 = $4 + 432 | 0;
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $8 = HEAP32[$6 + 4 >> 2];
  $3 = $4 + 440 | 0;
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $8 = HEAP32[$9 + 4 >> 2];
  $3 = $4 + 448 | 0;
  HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  HEAP32[$4 + 328 >> 2] = 0;
  HEAP32[$4 + 332 >> 2] = 1072693248;
  $11 = HEAPF64[$6 >> 3] - HEAPF64[$10 >> 3];
  $14 = HEAPF64[$2 >> 3] - HEAPF64[$1 >> 3];
  $12 = HEAPF64[$5 >> 3] - HEAPF64[$15 >> 3];
  $13 = 1.0 / Math_sqrt($11 * $11 + ($14 * $14 + $12 * $12));
  $6 = $4 + 72 | 0;
  $11 = $11 * $13;
  $20 = $11 == 0.0 ? 1.e+30 : 1.0 / $11;
  HEAPF64[$6 + 24 >> 3] = $20;
  $12 = $12 * $13;
  $21 = $12 == 0.0 ? 1.e+30 : 1.0 / $12;
  HEAPF64[$6 + 16 >> 3] = $21;
  HEAP32[$4 + 120 >> 2] = $20 < 0.0;
  HEAP32[$4 + 116 >> 2] = $21 < 0.0;
  $13 = $14 * $13;
  $14 = $13 == 0.0 ? 1.e+30 : 1.0 / $13;
  HEAPF64[$4 + 80 >> 3] = $14;
  HEAP32[$4 + 112 >> 2] = $14 < 0.0;
  HEAPF64[$4 + 128 >> 3] = $11 * (HEAPF64[$19 >> 3] - HEAPF64[$17 >> 3]) + ($13 * (HEAPF64[$4 + 168 >> 3] - HEAPF64[$4 + 136 >> 3]) + $12 * (HEAPF64[$18 >> 3] - HEAPF64[$16 >> 3]));
  $0 = HEAP32[$0 + 96 >> 2];
  $7 = $4 + 40 | 0;
  $3 = $7 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $7 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $7 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$4 + 40 >> 2] = 0;
  HEAP32[$4 + 44 >> 2] = 0;
  $5 = $4 + 8 | 0;
  $3 = $5 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $5 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $5 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $6, $7, $5);
  __stack_pointer = $4 + 496 | 0;
 }
 
 function btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0;
  $6 = __stack_pointer - 768 | 0;
  __stack_pointer = $6;
  CProfileSample__CProfileSample_28char_20const__29($6 + 760 | 0, 2790);
  $8 = $2 + 8 | 0;
  $12 = HEAP32[$8 + 4 >> 2];
  $13 = $6 + 632 | 0;
  $9 = $13 + 8 | 0;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $12;
  $9 = $2 + 16 | 0;
  $7 = HEAP32[$9 + 4 >> 2];
  $12 = $13 + 16 | 0;
  HEAP32[$12 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$12 + 4 >> 2] = $7;
  $12 = $2 + 24 | 0;
  $16 = HEAP32[$12 + 4 >> 2];
  $7 = $13 + 24 | 0;
  HEAP32[$7 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$7 + 4 >> 2] = $16;
  $7 = $2 + 40 | 0;
  $21 = HEAP32[$7 + 4 >> 2];
  $16 = $13 + 40 | 0;
  HEAP32[$16 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$16 + 4 >> 2] = $21;
  $16 = $2 + 48 | 0;
  $23 = HEAP32[$16 + 4 >> 2];
  $21 = $13 + 48 | 0;
  HEAP32[$21 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$21 + 4 >> 2] = $23;
  $21 = $2 + 56 | 0;
  $24 = HEAP32[$21 + 4 >> 2];
  $23 = $13 + 56 | 0;
  HEAP32[$23 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$23 + 4 >> 2] = $24;
  $23 = $2 + 72 | 0;
  $25 = HEAP32[$23 + 4 >> 2];
  $24 = $13 + 72 | 0;
  HEAP32[$24 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$24 + 4 >> 2] = $25;
  $24 = $2 + 80 | 0;
  $14 = HEAP32[$24 + 4 >> 2];
  $25 = $13 + 80 | 0;
  HEAP32[$25 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$25 + 4 >> 2] = $14;
  $25 = $2 + 88 | 0;
  $26 = HEAP32[$25 + 4 >> 2];
  $14 = $13 + 88 | 0;
  HEAP32[$14 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$14 + 4 >> 2] = $26;
  $14 = HEAP32[$2 + 4 >> 2];
  HEAP32[$6 + 632 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 636 >> 2] = $14;
  $14 = HEAP32[$2 + 36 >> 2];
  HEAP32[$6 + 664 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$6 + 668 >> 2] = $14;
  $14 = HEAP32[$2 + 68 >> 2];
  HEAP32[$6 + 696 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$6 + 700 >> 2] = $14;
  $14 = $2 + 120 | 0;
  $27 = HEAP32[$14 + 4 >> 2];
  $26 = $13 + 120 | 0;
  HEAP32[$26 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$26 + 4 >> 2] = $27;
  $26 = $2 + 112 | 0;
  $28 = HEAP32[$26 + 4 >> 2];
  $27 = $13 + 112 | 0;
  HEAP32[$27 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$27 + 4 >> 2] = $28;
  $27 = $2 + 104 | 0;
  $29 = HEAP32[$27 + 4 >> 2];
  $28 = $13 + 104 | 0;
  HEAP32[$28 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$28 + 4 >> 2] = $29;
  $28 = $3 + 8 | 0;
  $30 = HEAP32[$28 + 4 >> 2];
  $17 = $6 + 504 | 0;
  $29 = $17 + 8 | 0;
  HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$29 + 4 >> 2] = $30;
  $29 = $3 + 16 | 0;
  $31 = HEAP32[$29 + 4 >> 2];
  $30 = $17 + 16 | 0;
  HEAP32[$30 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$30 + 4 >> 2] = $31;
  $30 = $3 + 24 | 0;
  $32 = HEAP32[$30 + 4 >> 2];
  $31 = $17 + 24 | 0;
  HEAP32[$31 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$31 + 4 >> 2] = $32;
  $31 = $3 + 40 | 0;
  $33 = HEAP32[$31 + 4 >> 2];
  $32 = $17 + 40 | 0;
  HEAP32[$32 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$32 + 4 >> 2] = $33;
  $32 = $3 + 48 | 0;
  $15 = HEAP32[$32 + 4 >> 2];
  $33 = $17 + 48 | 0;
  HEAP32[$33 >> 2] = HEAP32[$32 >> 2];
  HEAP32[$33 + 4 >> 2] = $15;
  $33 = $3 + 56 | 0;
  $34 = HEAP32[$33 + 4 >> 2];
  $15 = $17 + 56 | 0;
  HEAP32[$15 >> 2] = HEAP32[$33 >> 2];
  HEAP32[$15 + 4 >> 2] = $34;
  $15 = HEAP32[$2 + 100 >> 2];
  HEAP32[$6 + 728 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$6 + 732 >> 2] = $15;
  $15 = HEAP32[$3 + 4 >> 2];
  HEAP32[$6 + 504 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 508 >> 2] = $15;
  $15 = HEAP32[$3 + 36 >> 2];
  HEAP32[$6 + 536 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$6 + 540 >> 2] = $15;
  $15 = $3 + 88 | 0;
  $35 = HEAP32[$15 + 4 >> 2];
  $34 = $17 + 88 | 0;
  HEAP32[$34 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$34 + 4 >> 2] = $35;
  $34 = $3 + 80 | 0;
  $36 = HEAP32[$34 + 4 >> 2];
  $35 = $17 + 80 | 0;
  HEAP32[$35 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$35 + 4 >> 2] = $36;
  $35 = $3 + 72 | 0;
  $37 = HEAP32[$35 + 4 >> 2];
  $36 = $17 + 72 | 0;
  HEAP32[$36 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$36 + 4 >> 2] = $37;
  $36 = $3 + 120 | 0;
  $38 = HEAP32[$36 + 4 >> 2];
  $37 = $17 + 120 | 0;
  HEAP32[$37 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$37 + 4 >> 2] = $38;
  $37 = $3 + 112 | 0;
  $10 = HEAP32[$37 + 4 >> 2];
  $38 = $17 + 112 | 0;
  HEAP32[$38 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$38 + 4 >> 2] = $10;
  $38 = $3 + 104 | 0;
  $43 = HEAP32[$38 + 4 >> 2];
  $10 = $17 + 104 | 0;
  HEAP32[$10 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$10 + 4 >> 2] = $43;
  $10 = HEAP32[$3 + 68 >> 2];
  HEAP32[$6 + 568 >> 2] = HEAP32[$3 + 64 >> 2];
  HEAP32[$6 + 572 >> 2] = $10;
  $10 = HEAP32[$3 + 100 >> 2];
  HEAP32[$6 + 600 >> 2] = HEAP32[$3 + 96 >> 2];
  HEAP32[$6 + 604 >> 2] = $10;
  $45 = $6 + 472 | 0;
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20double__29($13, $17, $6, $45);
  HEAP32[$6 + 432 >> 2] = 0;
  HEAP32[$6 + 436 >> 2] = 0;
  $11 = HEAPF64[$6 + 472 >> 3];
  HEAPF64[$6 + 424 >> 3] = $11 * HEAPF64[$6 + 16 >> 3];
  HEAPF64[$6 + 416 >> 3] = $11 * HEAPF64[$6 + 8 >> 3];
  HEAPF64[$6 + 408 >> 3] = $11 * HEAPF64[$6 >> 3];
  $41 = $6 + 376 | 0;
  $10 = $41 + 24 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $41 + 16 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $41 + 8 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$6 + 376 >> 2] = 0;
  HEAP32[$6 + 380 >> 2] = 0;
  $10 = $6 + 120 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $43 = $6 + 112 | 0;
  HEAP32[$43 >> 2] = 0;
  HEAP32[$43 + 4 >> 2] = 0;
  $46 = $6 + 104 | 0;
  HEAP32[$46 >> 2] = 0;
  HEAP32[$46 + 4 >> 2] = 0;
  $47 = $6 + 96 | 0;
  HEAP32[$47 >> 2] = 0;
  HEAP32[$47 + 4 >> 2] = 0;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($13, $45);
  $48 = $6 + 88 | 0;
  HEAP32[$48 >> 2] = 0;
  HEAP32[$48 + 4 >> 2] = 0;
  $44 = $6 + 56 | 0;
  HEAP32[$44 >> 2] = 0;
  HEAP32[$44 + 4 >> 2] = 0;
  $18 = HEAPF64[$6 + 496 >> 3];
  $22 = HEAPF64[$6 + 488 >> 3];
  $11 = HEAPF64[$6 + 472 >> 3];
  $19 = HEAPF64[$6 + 480 >> 3];
  $20 = 2.0 / ($18 * $18 + ($22 * $22 + ($11 * $11 + $19 * $19)));
  $44 = $6 + 72 | 0;
  $42 = $22 * $20;
  $40 = $19 * $42;
  $39 = $11 * $20;
  $51 = $18 * $39;
  HEAPF64[$44 >> 3] = $40 + $51;
  $52 = $6 + 48 | 0;
  HEAPF64[$52 >> 3] = $40 - $51;
  $49 = $6 + 80 | 0;
  $40 = $11 * $39;
  $39 = $19;
  $19 = $19 * $20;
  $20 = $39 * $19;
  HEAPF64[$49 >> 3] = 1.0 - ($40 + $20);
  $22 = $22 * $42;
  HEAPF64[$6 + 40 >> 3] = 1.0 - ($40 + $22);
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  $40 = $11 * $42;
  $39 = $18 * $19;
  HEAPF64[$6 + 64 >> 3] = $40 - $39;
  $11 = $11 * $19;
  $18 = $18 * $42;
  HEAPF64[$6 + 32 >> 3] = $11 + $18;
  HEAPF64[$6 + 16 >> 3] = $40 + $39;
  HEAPF64[$6 + 8 >> 3] = $11 - $18;
  HEAPF64[$6 >> 3] = 1.0 - ($20 + $22);
  $50 = $41;
  $41 = $6 + 440 | 0;
  btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btVector3__2c_20btVector3__29_20const($1, $6, $50, $6 + 408 | 0, $45, $41);
  $50 = HEAP32[$8 + 4 >> 2];
  HEAP32[$44 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$44 + 4 >> 2] = $50;
  $8 = HEAP32[$9 + 4 >> 2];
  HEAP32[$49 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$49 + 4 >> 2] = $8;
  $8 = HEAP32[$12 + 4 >> 2];
  HEAP32[$48 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$48 + 4 >> 2] = $8;
  $8 = HEAP32[$2 + 36 >> 2];
  HEAP32[$47 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$47 + 4 >> 2] = $8;
  $8 = HEAP32[$7 + 4 >> 2];
  HEAP32[$46 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$46 + 4 >> 2] = $8;
  $8 = HEAP32[$16 + 4 >> 2];
  HEAP32[$43 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$43 + 4 >> 2] = $8;
  $8 = HEAP32[$21 + 4 >> 2];
  HEAP32[$10 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$10 + 4 >> 2] = $8;
  $9 = HEAP32[$2 + 68 >> 2];
  $8 = $6 + 128 | 0;
  HEAP32[$8 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$8 + 4 >> 2] = $9;
  $9 = HEAP32[$23 + 4 >> 2];
  $8 = $6 + 136 | 0;
  HEAP32[$8 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$8 + 4 >> 2] = $9;
  $9 = HEAP32[$24 + 4 >> 2];
  $8 = $6 + 144 | 0;
  HEAP32[$8 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$8 + 4 >> 2] = $9;
  $9 = HEAP32[$25 + 4 >> 2];
  $8 = $6 + 152 | 0;
  HEAP32[$8 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$8 + 4 >> 2] = $9;
  HEAP32[$6 >> 2] = 28028;
  $8 = HEAP32[$2 + 4 >> 2];
  HEAP32[$6 + 64 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 68 >> 2] = $8;
  $9 = HEAP32[$14 + 4 >> 2];
  $8 = $6 + 184 | 0;
  HEAP32[$8 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$8 + 4 >> 2] = $9;
  $9 = HEAP32[$26 + 4 >> 2];
  $8 = $6 + 176 | 0;
  HEAP32[$8 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$8 + 4 >> 2] = $9;
  $12 = HEAP32[$27 + 4 >> 2];
  $9 = $6 + 168 | 0;
  HEAP32[$9 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$9 + 4 >> 2] = $12;
  $7 = HEAP32[$2 + 100 >> 2];
  $12 = $6 + 160 | 0;
  HEAP32[$12 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$12 + 4 >> 2] = $7;
  $7 = HEAP32[$30 + 4 >> 2];
  $2 = $6 + 216 | 0;
  HEAP32[$2 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$29 + 4 >> 2];
  $2 = $6 + 208 | 0;
  HEAP32[$2 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$28 + 4 >> 2];
  $2 = $6 + 200 | 0;
  HEAP32[$2 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$33 + 4 >> 2];
  $2 = $6 + 248 | 0;
  HEAP32[$2 >> 2] = HEAP32[$33 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$32 + 4 >> 2];
  $2 = $6 + 240 | 0;
  HEAP32[$2 >> 2] = HEAP32[$32 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$31 + 4 >> 2];
  $2 = $6 + 232 | 0;
  HEAP32[$2 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$3 + 36 >> 2];
  $2 = $6 + 224 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $2 = HEAP32[$3 + 4 >> 2];
  HEAP32[$6 + 192 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 196 >> 2] = $2;
  $7 = HEAP32[$15 + 4 >> 2];
  $2 = $6 + 280 | 0;
  HEAP32[$2 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$34 + 4 >> 2];
  $2 = $6 + 272 | 0;
  HEAP32[$2 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$35 + 4 >> 2];
  $2 = $6 + 264 | 0;
  HEAP32[$2 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$3 + 68 >> 2];
  $2 = $6 + 256 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 64 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$3 + 100 >> 2];
  $2 = $6 + 288 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 96 >> 2];
  HEAP32[$2 + 4 >> 2] = $7;
  $7 = HEAP32[$38 + 4 >> 2];
  $3 = $6 + 296 | 0;
  HEAP32[$3 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $16 = HEAP32[$37 + 4 >> 2];
  $7 = $6 + 304 | 0;
  HEAP32[$7 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$7 + 4 >> 2] = $16;
  $21 = HEAP32[$36 + 4 >> 2];
  $16 = $6 + 312 | 0;
  HEAP32[$16 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$16 + 4 >> 2] = $21;
  HEAP32[$6 + 356 >> 2] = $4;
  HEAPF64[$6 + 360 >> 3] = $5;
  HEAP32[$6 + 368 >> 2] = $1;
  HEAP32[$6 + 352 >> 2] = $0;
  $5 = HEAPF64[$7 >> 3] - HEAPF64[$8 >> 3];
  $11 = HEAPF64[$2 >> 3] - HEAPF64[$12 >> 3];
  $18 = HEAPF64[$3 >> 3] - HEAPF64[$9 >> 3];
  $19 = 1.0 / Math_sqrt($5 * $5 + ($11 * $11 + $18 * $18));
  $22 = $5 * $19;
  $20 = $22 == 0.0 ? 1.e+30 : 1.0 / $22;
  HEAPF64[$6 + 24 >> 3] = $20;
  HEAP32[$52 >> 2] = $20 < 0.0;
  $20 = $18 * $19;
  $42 = $20 == 0.0 ? 1.e+30 : 1.0 / $20;
  HEAP32[$6 + 44 >> 2] = $42 < 0.0;
  HEAPF64[$6 + 16 >> 3] = $42;
  $39 = $22 * $5;
  $5 = $11 * $19;
  HEAPF64[$6 + 56 >> 3] = $39 + ($5 * $11 + $18 * $20);
  $5 = $5 == 0.0 ? 1.e+30 : 1.0 / $5;
  HEAPF64[$6 + 8 >> 3] = $5;
  HEAP32[$6 + 40 >> 2] = $5 < 0.0;
  $0 = HEAP32[$0 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $13 + 96 | 0, $17 + 96 | 0, $6, $45, $41);
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $6 + 768 | 0;
 }
 
 function btCollisionWorld__debugDrawObject_28btTransform_20const__2c_20btCollisionShape_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
  $4 = __stack_pointer - 272 | 0;
  __stack_pointer = $4;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0)) {
    break label$1
   }
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 56 >> 2]]($6) & 32768)) {
    break label$1
   }
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $1, .1);
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            $6 = HEAP32[$2 + 4 >> 2];
            switch ($6 | 0) {
            case 0:
             break label$10;
            case 31:
             break label$11;
            case 24:
             break label$2;
            case 28:
             break label$4;
            case 13:
             break label$5;
            case 11:
             break label$6;
            case 10:
             break label$7;
            case 9:
             break label$8;
            case 8:
             break label$9;
            default:
             break label$3;
            };
           }
           $6 = HEAP32[$2 + 20 >> 2];
           if (($6 | 0) <= 0) {
            break label$2
           }
           $5 = $6 + 1 | 0;
           $7 = Math_imul($6, 152) - 152 | 0;
           while (1) {
            $6 = HEAP32[$2 + 28 >> 2] + $7 | 0;
            $10 = HEAP32[$6 + 128 >> 2];
            $8 = HEAPF64[$6 + 112 >> 3];
            $9 = HEAPF64[$6 + 96 >> 3];
            $11 = HEAPF64[$6 + 104 >> 3];
            $12 = HEAPF64[$6 - -64 >> 3];
            $16 = HEAPF64[$6 >> 3];
            $17 = HEAPF64[$6 + 32 >> 3];
            $20 = HEAPF64[$6 + 72 >> 3];
            $18 = HEAPF64[$6 + 8 >> 3];
            $19 = HEAPF64[$6 + 40 >> 3];
            $13 = HEAPF64[$6 + 80 >> 3];
            $14 = HEAPF64[$6 + 16 >> 3];
            $15 = HEAPF64[$6 + 48 >> 3];
            HEAP32[$4 + 120 >> 2] = 0;
            HEAP32[$4 + 124 >> 2] = 0;
            HEAP32[$4 + 88 >> 2] = 0;
            HEAP32[$4 + 92 >> 2] = 0;
            HEAP32[$4 + 56 >> 2] = 0;
            HEAP32[$4 + 60 >> 2] = 0;
            HEAP32[$4 + 24 >> 2] = 0;
            HEAP32[$4 + 28 >> 2] = 0;
            $23 = HEAPF64[$1 + 80 >> 3];
            $21 = HEAPF64[$1 + 64 >> 3];
            $22 = HEAPF64[$1 + 72 >> 3];
            HEAPF64[$4 + 80 >> 3] = $13 * $23 + ($14 * $21 + $15 * $22);
            HEAPF64[$4 + 72 >> 3] = $20 * $23 + ($18 * $21 + $19 * $22);
            HEAPF64[$4 + 64 >> 3] = $12 * $23 + ($16 * $21 + $17 * $22);
            $24 = HEAPF64[$1 + 48 >> 3];
            $25 = HEAPF64[$1 + 32 >> 3];
            $26 = HEAPF64[$1 + 40 >> 3];
            HEAPF64[$4 + 48 >> 3] = $13 * $24 + ($14 * $25 + $15 * $26);
            HEAPF64[$4 + 40 >> 3] = $20 * $24 + ($18 * $25 + $19 * $26);
            HEAPF64[$4 + 32 >> 3] = $12 * $24 + ($16 * $25 + $17 * $26);
            $28 = $13;
            $13 = HEAPF64[$1 + 16 >> 3];
            $29 = $14;
            $14 = HEAPF64[$1 >> 3];
            $30 = $15;
            $15 = HEAPF64[$1 + 8 >> 3];
            HEAPF64[$4 + 16 >> 3] = $28 * $13 + ($29 * $14 + $30 * $15);
            HEAPF64[$4 + 8 >> 3] = $20 * $13 + ($18 * $14 + $19 * $15);
            HEAPF64[$4 >> 3] = $12 * $13 + ($16 * $14 + $17 * $15);
            HEAPF64[$4 + 112 >> 3] = $8 * $23 + ($9 * $21 + $11 * $22) + HEAPF64[$1 + 112 >> 3];
            HEAPF64[$4 + 104 >> 3] = $8 * $24 + ($9 * $25 + $11 * $26) + HEAPF64[$1 + 104 >> 3];
            HEAPF64[$4 + 96 >> 3] = $8 * $13 + ($9 * $14 + $11 * $15) + HEAPF64[$1 + 96 >> 3];
            FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $4, $10, $3);
            $7 = $7 - 152 | 0;
            $5 = $5 - 1 | 0;
            if ($5 >>> 0 > 1) {
             continue
            }
            break;
           };
           break label$2;
          }
          $5 = $2 + 72 | 0;
          $6 = HEAP32[$5 + 4 >> 2];
          $7 = $4 + 24 | 0;
          HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
          HEAP32[$7 + 4 >> 2] = $6;
          $5 = $2 - -64 | 0;
          $7 = HEAP32[$5 + 4 >> 2];
          $6 = $4 + 16 | 0;
          HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
          HEAP32[$6 + 4 >> 2] = $7;
          $7 = $2 + 56 | 0;
          $10 = HEAP32[$7 + 4 >> 2];
          $5 = $4 + 8 | 0;
          HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$5 + 4 >> 2] = $10;
          $7 = HEAP32[$2 + 52 >> 2];
          HEAP32[$4 >> 2] = HEAP32[$2 + 48 >> 2];
          HEAP32[$4 + 4 >> 2] = $7;
          $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
          $9 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
          $11 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2) + HEAPF64[$6 >> 3];
          HEAPF64[$6 >> 3] = $11;
          $9 = $9 + HEAPF64[$5 >> 3];
          HEAPF64[$5 >> 3] = $9;
          $8 = $8 + HEAPF64[$4 >> 3];
          HEAPF64[$4 >> 3] = $8;
          $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
          HEAP32[$4 + 264 >> 2] = 0;
          HEAP32[$4 + 268 >> 2] = 0;
          HEAPF64[$4 + 256 >> 3] = -$11;
          HEAPF64[$4 + 248 >> 3] = -$9;
          HEAPF64[$4 + 240 >> 3] = -$8;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $4 + 240 | 0, $4, $1, $3);
          break label$2;
         }
         $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
         $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $8, $1, $3);
         break label$2;
        }
        $6 = HEAP32[$2 + 168 >> 2];
        if (($6 | 0) <= 0) {
         break label$2
        }
        $27 = $6 + 1 | 0;
        $5 = ($6 << 3) - 8 | 0;
        $7 = ($6 << 5) - 16 | 0;
        while (1) {
         $6 = HEAP32[$2 + 176 >> 2] + $7 | 0;
         $8 = HEAPF64[$6 >> 3];
         $9 = HEAPF64[$6 - 16 >> 3];
         $11 = HEAPF64[$6 - 8 >> 3];
         $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
         $23 = HEAPF64[HEAP32[$2 + 196 >> 2] + $5 >> 3];
         HEAP32[$4 + 120 >> 2] = 0;
         HEAP32[$4 + 124 >> 2] = 0;
         HEAP32[$4 + 88 >> 2] = 0;
         HEAP32[$4 + 92 >> 2] = 0;
         HEAP32[$4 + 56 >> 2] = 0;
         HEAP32[$4 + 60 >> 2] = 0;
         HEAP32[$4 + 24 >> 2] = 0;
         HEAP32[$4 + 28 >> 2] = 0;
         $12 = HEAPF64[$1 + 80 >> 3];
         $16 = HEAPF64[$1 + 64 >> 3];
         $20 = $16 * 0.0;
         $17 = HEAPF64[$1 + 72 >> 3];
         $18 = $17 * 0.0;
         HEAPF64[$4 + 80 >> 3] = $12 + ($20 + $18);
         $19 = $12 * 0.0;
         HEAPF64[$4 + 72 >> 3] = $19 + ($20 + $17);
         HEAPF64[$4 + 64 >> 3] = $19 + ($16 + $18);
         $20 = HEAPF64[$1 + 48 >> 3];
         $18 = HEAPF64[$1 + 32 >> 3];
         $13 = $18 * 0.0;
         $19 = HEAPF64[$1 + 40 >> 3];
         $14 = $19 * 0.0;
         HEAPF64[$4 + 48 >> 3] = $20 + ($13 + $14);
         $15 = $20 * 0.0;
         HEAPF64[$4 + 40 >> 3] = $15 + ($13 + $19);
         HEAPF64[$4 + 32 >> 3] = $15 + ($18 + $14);
         $13 = HEAPF64[$1 + 16 >> 3];
         $14 = HEAPF64[$1 >> 3];
         $21 = $14 * 0.0;
         $15 = HEAPF64[$1 + 8 >> 3];
         $22 = $15 * 0.0;
         HEAPF64[$4 + 16 >> 3] = $13 + ($21 + $22);
         $24 = $13 * 0.0;
         HEAPF64[$4 + 8 >> 3] = $24 + ($21 + $15);
         HEAPF64[$4 >> 3] = $24 + ($14 + $22);
         HEAPF64[$4 + 112 >> 3] = $8 * $12 + ($9 * $16 + $11 * $17) + HEAPF64[$1 + 112 >> 3];
         HEAPF64[$4 + 104 >> 3] = $8 * $20 + ($9 * $18 + $11 * $19) + HEAPF64[$1 + 104 >> 3];
         HEAPF64[$4 + 96 >> 3] = $8 * $13 + ($9 * $14 + $11 * $15) + HEAPF64[$1 + 96 >> 3];
         FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($6, $23, $4, $3);
         $5 = $5 - 8 | 0;
         $7 = $7 - 32 | 0;
         $27 = $27 - 1 | 0;
         if ($27 >>> 0 > 1) {
          continue
         }
         break;
        };
        break label$2;
       }
       $5 = $2 + 48 | 0;
       $2 = HEAP32[$2 + 96 >> 2];
       $8 = HEAPF64[$5 + ($2 << 3) >> 3];
       $9 = HEAPF64[$5 + (($2 + 2 | 0) % 3 << 3) >> 3];
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $9, $8, $2, $1, $3);
       break label$2;
      }
      $5 = HEAP32[$2 + 124 >> 2];
      $8 = HEAPF64[$2 + 104 >> 3];
      $9 = HEAPF64[$2 + 112 >> 3];
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $8, $9, $5, $1, $3);
      break label$2;
     }
     $6 = HEAP32[$2 + 96 >> 2];
     $8 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 92 >> 2]]($2);
     $5 = $2 + 72 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     $10 = $4 + 24 | 0;
     HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$10 + 4 >> 2] = $7;
     $5 = $2 - -64 | 0;
     $10 = HEAP32[$5 + 4 >> 2];
     $7 = $4 + 16 | 0;
     HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$7 + 4 >> 2] = $10;
     $10 = $2 + 56 | 0;
     $27 = HEAP32[$10 + 4 >> 2];
     $5 = $4 + 8 | 0;
     HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$5 + 4 >> 2] = $27;
     $10 = HEAP32[$2 + 52 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$2 + 48 >> 2];
     HEAP32[$4 + 4 >> 2] = $10;
     $9 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
     $11 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
     $12 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
     HEAPF64[$5 >> 3] = $11 + HEAPF64[$5 >> 3];
     HEAPF64[$7 >> 3] = $12 + HEAPF64[$7 >> 3];
     HEAPF64[$4 >> 3] = $9 + HEAPF64[$4 >> 3];
     $9 = HEAPF64[$4 + ($6 << 3) >> 3];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, $8, $9, $6, $1, $3);
     break label$2;
    }
    $8 = HEAPF64[$2 + 120 >> 3];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0, $2 + 88 | 0, $8, $1, $3);
    break label$2;
   }
   label$14 : {
    if (($6 | 0) > 6) {
     break label$14
    }
    $10 = HEAP32[$2 + 96 >> 2];
    if ($10) {
     if (HEAP32[$10 + 28 >> 2] <= 0) {
      break label$14
     }
     $32 = $4 + 16 | 0;
     $36 = $32 + 8 | 0;
     while (1) {
      $11 = 0.0;
      label$17 : {
       $34 = Math_imul($33, 56);
       $5 = $34 + HEAP32[$10 + 36 >> 2] | 0;
       $31 = HEAP32[$5 + 4 >> 2];
       if (!$31) {
        $8 = 0.0;
        $9 = 0.0;
        break label$17;
       }
       $8 = 0.0;
       $9 = 0.0;
       if (($31 | 0) <= 0) {
        break label$17
       }
       $7 = HEAP32[$5 + 12 >> 2];
       $5 = HEAP32[($7 + ($31 << 2) | 0) - 4 >> 2];
       $27 = 1;
       $35 = 0;
       while (1) {
        $6 = HEAP32[$7 + $35 >> 2];
        $37 = $6 << 5;
        $7 = $37 + HEAP32[$10 + 16 >> 2] | 0;
        $20 = HEAPF64[$7 >> 3];
        $18 = HEAPF64[$7 + 8 >> 3];
        $19 = HEAPF64[$7 + 16 >> 3];
        $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
        HEAP32[$4 + 24 >> 2] = 0;
        HEAP32[$4 + 28 >> 2] = 0;
        $38 = HEAP32[$10 + 16 >> 2];
        $5 = $38 + ($5 << 5) | 0;
        $12 = HEAPF64[$5 + 16 >> 3];
        $13 = HEAPF64[$1 + 80 >> 3];
        $16 = HEAPF64[$5 >> 3];
        $14 = HEAPF64[$1 + 64 >> 3];
        $17 = HEAPF64[$5 + 8 >> 3];
        $15 = HEAPF64[$1 + 72 >> 3];
        $23 = HEAPF64[$1 + 112 >> 3];
        HEAPF64[$4 + 16 >> 3] = $12 * $13 + ($16 * $14 + $17 * $15) + $23;
        $21 = HEAPF64[$1 + 48 >> 3];
        $22 = HEAPF64[$1 + 32 >> 3];
        $24 = HEAPF64[$1 + 40 >> 3];
        $25 = HEAPF64[$1 + 104 >> 3];
        HEAPF64[$4 + 8 >> 3] = $12 * $21 + ($16 * $22 + $17 * $24) + $25;
        $26 = HEAPF64[$1 + 16 >> 3];
        $28 = HEAPF64[$1 >> 3];
        $29 = HEAPF64[$1 + 8 >> 3];
        $30 = HEAPF64[$1 + 96 >> 3];
        HEAPF64[$4 >> 3] = $12 * $26 + ($16 * $28 + $17 * $29) + $30;
        HEAP32[$4 + 264 >> 2] = 0;
        HEAP32[$4 + 268 >> 2] = 0;
        $5 = $37 + $38 | 0;
        $12 = HEAPF64[$5 + 16 >> 3];
        $16 = HEAPF64[$5 >> 3];
        $17 = HEAPF64[$5 + 8 >> 3];
        HEAPF64[$4 + 256 >> 3] = $23 + ($13 * $12 + ($14 * $16 + $15 * $17));
        HEAPF64[$4 + 248 >> 3] = $25 + ($12 * $21 + ($16 * $22 + $24 * $17));
        HEAPF64[$4 + 240 >> 3] = $30 + ($12 * $26 + ($16 * $28 + $29 * $17));
        FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7, $4, $4 + 240 | 0, $3);
        $9 = $9 + $19;
        $8 = $8 + $18;
        $11 = $11 + $20;
        $5 = HEAP32[$10 + 36 >> 2] + $34 | 0;
        if (HEAP32[$5 + 4 >> 2] <= ($27 | 0)) {
         break label$17
        }
        $35 = $35 + 4 | 0;
        $27 = $27 + 1 | 0;
        $7 = HEAP32[$5 + 12 >> 2];
        $5 = $6;
        continue;
       };
      }
      $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      if (FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 56 >> 2]]($5) & 16384) {
       HEAP32[$32 >> 2] = 0;
       HEAP32[$32 + 4 >> 2] = 0;
       HEAP32[$36 >> 2] = 0;
       HEAP32[$36 + 4 >> 2] = 0;
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 1072693248;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 1072693248;
       $5 = HEAP32[$10 + 36 >> 2] + $34 | 0;
       $16 = HEAPF64[$5 + 40 >> 3];
       $17 = HEAPF64[$5 + 24 >> 3];
       $20 = HEAPF64[$5 + 32 >> 3];
       $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       HEAP32[$4 + 264 >> 2] = 0;
       HEAP32[$4 + 268 >> 2] = 0;
       $12 = 1.0 / +($31 | 0);
       $9 = $12 * $9;
       $18 = HEAPF64[$1 + 80 >> 3];
       $11 = $12 * $11;
       $19 = HEAPF64[$1 + 64 >> 3];
       $8 = $12 * $8;
       $12 = HEAPF64[$1 + 72 >> 3];
       $13 = HEAPF64[$1 + 112 >> 3];
       HEAPF64[$4 + 256 >> 3] = $9 * $18 + ($11 * $19 + $8 * $12) + $13;
       $14 = HEAPF64[$1 + 48 >> 3];
       $15 = HEAPF64[$1 + 32 >> 3];
       $23 = HEAPF64[$1 + 40 >> 3];
       $21 = HEAPF64[$1 + 104 >> 3];
       HEAPF64[$4 + 248 >> 3] = $9 * $14 + ($11 * $15 + $8 * $23) + $21;
       $22 = HEAPF64[$1 + 16 >> 3];
       $24 = HEAPF64[$1 >> 3];
       $25 = HEAPF64[$1 + 8 >> 3];
       $26 = HEAPF64[$1 + 96 >> 3];
       HEAPF64[$4 + 240 >> 3] = $9 * $22 + ($11 * $24 + $8 * $25) + $26;
       HEAP32[$4 + 232 >> 2] = 0;
       HEAP32[$4 + 236 >> 2] = 0;
       $9 = $9 + $16;
       $11 = $11 + $17;
       $8 = $8 + $20;
       HEAPF64[$4 + 224 >> 3] = $13 + ($18 * $9 + ($19 * $11 + $12 * $8));
       HEAPF64[$4 + 216 >> 3] = $21 + ($9 * $14 + ($11 * $15 + $8 * $23));
       HEAPF64[$4 + 208 >> 3] = $26 + ($9 * $22 + ($11 * $24 + $8 * $25));
       FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $4 + 240 | 0, $4 + 208 | 0, $4);
      }
      $33 = $33 + 1 | 0;
      if (($33 | 0) < HEAP32[$10 + 28 >> 2]) {
       continue
      }
      break;
     };
     break label$14;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 100 >> 2]]($2) | 0) <= 0) {
     break label$14
    }
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 104 >> 2]]($2, $5, $4, $4 + 240 | 0);
     HEAP32[$4 + 232 >> 2] = 0;
     HEAP32[$4 + 236 >> 2] = 0;
     $8 = HEAPF64[$4 + 16 >> 3];
     $12 = HEAPF64[$1 + 80 >> 3];
     $9 = HEAPF64[$4 >> 3];
     $16 = HEAPF64[$1 + 64 >> 3];
     $11 = HEAPF64[$4 + 8 >> 3];
     $17 = HEAPF64[$1 + 72 >> 3];
     $20 = HEAPF64[$1 + 112 >> 3];
     HEAPF64[$4 + 224 >> 3] = $8 * $12 + ($9 * $16 + $11 * $17) + $20;
     $18 = HEAPF64[$1 + 48 >> 3];
     $19 = HEAPF64[$1 + 32 >> 3];
     $13 = HEAPF64[$1 + 40 >> 3];
     $14 = HEAPF64[$1 + 104 >> 3];
     HEAPF64[$4 + 216 >> 3] = $8 * $18 + ($9 * $19 + $11 * $13) + $14;
     $15 = HEAPF64[$1 + 16 >> 3];
     $23 = HEAPF64[$1 >> 3];
     $21 = HEAPF64[$1 + 8 >> 3];
     $22 = HEAPF64[$1 + 96 >> 3];
     HEAPF64[$4 + 208 >> 3] = $8 * $15 + ($9 * $23 + $11 * $21) + $22;
     HEAP32[$4 + 200 >> 2] = 0;
     HEAP32[$4 + 204 >> 2] = 0;
     $8 = HEAPF64[$4 + 256 >> 3];
     $9 = HEAPF64[$4 + 240 >> 3];
     $11 = HEAPF64[$4 + 248 >> 3];
     HEAPF64[$4 + 192 >> 3] = $20 + ($12 * $8 + ($16 * $9 + $17 * $11));
     HEAPF64[$4 + 184 >> 3] = $14 + ($8 * $18 + ($9 * $19 + $13 * $11));
     HEAPF64[$4 + 176 >> 3] = $22 + ($8 * $15 + ($9 * $23 + $21 * $11));
     $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $4 + 208 | 0, $4 + 176 | 0, $3);
     $5 = $5 + 1 | 0;
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 100 >> 2]]($2) | 0) > ($5 | 0)) {
      continue
     }
     break;
    };
   }
   $5 = HEAP32[$2 + 4 >> 2];
   if ($5 - 21 >>> 0 <= 8) {
    HEAP32[$4 + 264 >> 2] = 0;
    HEAP32[$4 + 268 >> 2] = 0;
    HEAP32[$4 + 256 >> 2] = 966823146;
    HEAP32[$4 + 260 >> 2] = 1177108057;
    HEAP32[$4 + 248 >> 2] = 966823146;
    HEAP32[$4 + 252 >> 2] = 1177108057;
    HEAP32[$4 + 240 >> 2] = 966823146;
    HEAP32[$4 + 244 >> 2] = 1177108057;
    HEAP32[$4 + 232 >> 2] = 0;
    HEAP32[$4 + 236 >> 2] = 0;
    HEAP32[$4 + 224 >> 2] = 966823146;
    HEAP32[$4 + 228 >> 2] = -970375591;
    HEAP32[$4 + 216 >> 2] = 966823146;
    HEAP32[$4 + 220 >> 2] = -970375591;
    HEAP32[$4 + 208 >> 2] = 966823146;
    HEAP32[$4 + 212 >> 2] = -970375591;
    $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    $6 = $3 + 8 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $10 = $4 + 24 | 0;
    HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$10 + 4 >> 2] = $7;
    $6 = $3 + 16 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $10 = $4 + 32 | 0;
    HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$10 + 4 >> 2] = $7;
    $6 = $3 + 24 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $10 = $4 + 40 | 0;
    HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$10 + 4 >> 2] = $7;
    $6 = $1 + 8 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $10 = $4 + 56 | 0;
    HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$10 + 4 >> 2] = $7;
    $6 = $1 + 16 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $10 = $4 - -64 | 0;
    HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$10 + 4 >> 2] = $7;
    $6 = $1 + 24 | 0;
    $7 = HEAP32[$6 + 4 >> 2];
    $10 = $4 + 72 | 0;
    HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$10 + 4 >> 2] = $7;
    HEAP32[$4 + 8 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = 28108;
    HEAP32[$4 >> 2] = 28084;
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 16 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 20 >> 2] = $5;
    $5 = HEAP32[$1 + 4 >> 2];
    HEAP32[$4 + 48 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$4 + 52 >> 2] = $5;
    $5 = $1 + 56 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 104 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = $1 + 48 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 96 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = $1 + 40 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 88 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = HEAP32[$1 + 36 >> 2];
    $6 = $4 + 80 | 0;
    HEAP32[$6 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $5 = $1 + 88 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 136 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = $1 + 80 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 128 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = $1 + 72 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 120 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = HEAP32[$1 + 68 >> 2];
    $6 = $4 + 112 | 0;
    HEAP32[$6 >> 2] = HEAP32[$1 + 64 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $5 = $1 + 120 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 168 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = $1 + 112 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 160 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = $1 + 104 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $7 = $4 + 152 | 0;
    HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $5 = HEAP32[$1 + 100 >> 2];
    $6 = $4 + 144 | 0;
    HEAP32[$6 >> 2] = HEAP32[$1 + 96 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 64 >> 2]]($2, $4, $4 + 208 | 0, $4 + 240 | 0);
    $5 = HEAP32[$2 + 4 >> 2];
   }
   if (($5 | 0) != 3) {
    break label$2
   }
   HEAP32[$4 + 264 >> 2] = 0;
   HEAP32[$4 + 268 >> 2] = 0;
   HEAP32[$4 + 256 >> 2] = 966823146;
   HEAP32[$4 + 260 >> 2] = 1177108057;
   HEAP32[$4 + 248 >> 2] = 966823146;
   HEAP32[$4 + 252 >> 2] = 1177108057;
   HEAP32[$4 + 240 >> 2] = 966823146;
   HEAP32[$4 + 244 >> 2] = 1177108057;
   HEAP32[$4 + 232 >> 2] = 0;
   HEAP32[$4 + 236 >> 2] = 0;
   HEAP32[$4 + 224 >> 2] = 966823146;
   HEAP32[$4 + 228 >> 2] = -970375591;
   HEAP32[$4 + 216 >> 2] = 966823146;
   HEAP32[$4 + 220 >> 2] = -970375591;
   HEAP32[$4 + 208 >> 2] = 966823146;
   HEAP32[$4 + 212 >> 2] = -970375591;
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $5 = $3 + 8 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $7 = $4 + 24 | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $5 = $3 + 16 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $7 = $4 + 32 | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $5 = $3 + 24 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $7 = $4 + 40 | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $5 = $1 + 8 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $7 = $4 + 56 | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $5 = $1 + 16 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $7 = $4 - -64 | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $5 = $1 + 24 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $7 = $4 + 72 | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = 28108;
   HEAP32[$4 >> 2] = 28084;
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 20 >> 2] = $0;
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP32[$4 + 48 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 52 >> 2] = $0;
   $0 = $1 + 56 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 104 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = $1 + 48 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 96 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = $1 + 40 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 88 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = HEAP32[$1 + 36 >> 2];
   $3 = $4 + 80 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   $0 = $1 + 88 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 136 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = $1 + 80 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 128 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = $1 + 72 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 120 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = HEAP32[$1 + 68 >> 2];
   $3 = $4 + 112 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   $0 = $1 + 120 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 168 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = $1 + 112 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 160 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = $1 + 104 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $4 + 152 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $0 = HEAP32[$1 + 100 >> 2];
   $3 = $4 + 144 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1 + 96 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   $0 = HEAP32[$2 + 172 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4 | 4, $4 + 208 | 0, $4 + 240 | 0);
  }
  __stack_pointer = $4 + 272 | 0;
 }
 
 function btCollisionWorld__debugDrawWorldClear_28_29($0) {
  $0 = $0 | 0;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0) {
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 100 >> 2]]($0);
  }
 }
 
 function btCollisionWorld__debugDrawWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0;
  $1 = __stack_pointer - 384 | 0;
  __stack_pointer = $1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0)) {
    break label$1
   }
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($1 + 160 | 0, $5);
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   label$2 : {
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 56 >> 2]]($5) & 8)) {
     break label$2
    }
    $5 = HEAP32[$0 + 24 >> 2];
    if (!$5) {
     break label$2
    }
    $10 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 36 >> 2]]($5) | 0;
    if (($10 | 0) <= 0) {
     break label$2
    }
    $12 = $1 + 352 | 0;
    $5 = 0;
    while (1) {
     $8 = HEAP32[$0 + 24 >> 2];
     $8 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 40 >> 2]]($8, $5) | 0;
     $9 = HEAP32[$8 + 1456 >> 2];
     if (($9 | 0) > 0) {
      $8 = $8 + 296 | 0;
      while (1) {
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 40 >> 2]]($11, $8 - 224 | 0, $8 - 160 | 0, HEAPF64[$8 - 128 >> 3], HEAP32[$8 >> 2], $12);
       $8 = $8 + 360 | 0;
       $9 = $9 - 1 | 0;
       if ($9) {
        continue
       }
       break;
      };
     }
     $5 = $5 + 1 | 0;
     if (($10 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 56 >> 2]]($5) & 3) | HEAP32[$0 + 8 >> 2] <= 0) {
    break label$1
   }
   $9 = $1 + 320 | 0;
   $10 = $1 + 192 | 0;
   $12 = $1 + 224 | 0;
   $11 = $1 + 256 | 0;
   $14 = $1 + 288 | 0;
   $8 = 0;
   while (1) {
    $5 = HEAP32[HEAP32[$0 + 16 >> 2] + $8 >> 2];
    label$7 : {
     if (HEAPU8[$5 + 392 | 0] & 32) {
      break label$7
     }
     label$8 : {
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0)) {
       break label$8
      }
      $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2) & 1)) {
       break label$8
      }
      label$9 : {
       label$10 : {
        switch (HEAP32[$5 + 408 >> 2] - 1 | 0) {
        case 0:
         $15 = $1 + 160 | 0;
         $3 = $15 + 24 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $6 = $1 + 128 | 0;
         $2 = $6 + 24 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $15 + 16 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 16 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $15 + 8 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 8 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $2 = HEAP32[$1 + 164 >> 2];
         HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 160 >> 2];
         HEAP32[$1 + 132 >> 2] = $2;
         break label$9;
        case 1:
         $3 = $10 + 24 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $6 = $1 + 128 | 0;
         $2 = $6 + 24 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $10 + 16 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 16 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $10 + 8 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 8 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $2 = HEAP32[$10 + 4 >> 2];
         HEAP32[$1 + 128 >> 2] = HEAP32[$10 >> 2];
         HEAP32[$1 + 132 >> 2] = $2;
         break label$9;
        case 2:
         $3 = $12 + 24 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $6 = $1 + 128 | 0;
         $2 = $6 + 24 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $12 + 16 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 16 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $12 + 8 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 8 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $2 = HEAP32[$12 + 4 >> 2];
         HEAP32[$1 + 128 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$1 + 132 >> 2] = $2;
         break label$9;
        case 3:
         $3 = $11 + 24 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $6 = $1 + 128 | 0;
         $2 = $6 + 24 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $11 + 16 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 16 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $11 + 8 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 8 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $2 = HEAP32[$11 + 4 >> 2];
         HEAP32[$1 + 128 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$1 + 132 >> 2] = $2;
         break label$9;
        case 4:
         $3 = $14 + 24 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $6 = $1 + 128 | 0;
         $2 = $6 + 24 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $14 + 16 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 16 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $3 = $14 + 8 | 0;
         $4 = HEAP32[$3 + 4 >> 2];
         $2 = $6 + 8 | 0;
         HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$2 + 4 >> 2] = $4;
         $2 = HEAP32[$14 + 4 >> 2];
         HEAP32[$1 + 128 >> 2] = HEAP32[$14 >> 2];
         HEAP32[$1 + 132 >> 2] = $2;
         break label$9;
        default:
         break label$10;
        };
       }
       HEAP32[$1 + 152 >> 2] = 0;
       HEAP32[$1 + 156 >> 2] = 0;
       HEAP32[$1 + 144 >> 2] = 858993459;
       HEAP32[$1 + 148 >> 2] = 1070805811;
       HEAP32[$1 + 136 >> 2] = 858993459;
       HEAP32[$1 + 140 >> 2] = 1070805811;
       HEAP32[$1 + 128 >> 2] = 858993459;
       HEAP32[$1 + 132 >> 2] = 1070805811;
      }
      if (HEAP8[$5 + 393 | 0] & 1) {
       $3 = $5 + 568 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $6 = $1 + 128 | 0;
       $2 = $6 + 24 | 0;
       HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$2 + 4 >> 2] = $4;
       $3 = $5 + 560 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $2 = $6 + 16 | 0;
       HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$2 + 4 >> 2] = $4;
       $3 = $5 + 552 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $2 = $6 + 8 | 0;
       HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$2 + 4 >> 2] = $4;
       $2 = HEAP32[$5 + 548 >> 2];
       HEAP32[$1 + 128 >> 2] = HEAP32[$5 + 544 >> 2];
       HEAP32[$1 + 132 >> 2] = $2;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $5 + 8 | 0, HEAP32[$5 + 380 >> 2], $1 + 128 | 0);
     }
     $2 = HEAP32[$0 + 100 >> 2];
     if (!$2) {
      break label$7
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2) & 2)) {
      break label$7
     }
     $3 = $9 + 24 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $6 = $1 - -64 | 0;
     $2 = $6 + 24 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $9 + 16 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $6 + 16 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $9 + 8 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $6 + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
     $2 = HEAP32[$9 + 4 >> 2];
     HEAP32[$1 + 64 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$1 + 68 >> 2] = $2;
     $2 = HEAP32[$5 + 380 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $5 + 8 | 0, $1 + 128 | 0, $1 + 96 | 0);
     $7 = HEAPF64[3845];
     HEAPF64[$1 + 128 >> 3] = HEAPF64[$1 + 128 >> 3] - $7;
     HEAPF64[$1 + 136 >> 3] = HEAPF64[$1 + 136 >> 3] - $7;
     HEAPF64[$1 + 144 >> 3] = HEAPF64[$1 + 144 >> 3] - $7;
     HEAPF64[$1 + 96 >> 3] = $7 + HEAPF64[$1 + 96 >> 3];
     HEAPF64[$1 + 104 >> 3] = $7 + HEAPF64[$1 + 104 >> 3];
     HEAPF64[$1 + 112 >> 3] = $7 + HEAPF64[$1 + 112 >> 3];
     label$17 : {
      if (HEAPU8[$5 + 392 | 0] & 3 | (!HEAPU8[$0 + 56 | 0] | HEAP32[$5 + 472 >> 2] != 2)) {
       break label$17
      }
      $2 = HEAP32[$5 + 380 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $5 + 136 | 0, $1 + 32 | 0, $1);
      $13 = HEAPF64[$1 + 32 >> 3] - $7;
      HEAPF64[$1 + 32 >> 3] = $13;
      $16 = HEAPF64[$1 + 40 >> 3] - $7;
      HEAPF64[$1 + 40 >> 3] = $16;
      $17 = HEAPF64[$1 + 48 >> 3] - $7;
      HEAPF64[$1 + 48 >> 3] = $17;
      $18 = $7 + HEAPF64[$1 >> 3];
      HEAPF64[$1 >> 3] = $18;
      $19 = $7 + HEAPF64[$1 + 8 >> 3];
      HEAPF64[$1 + 8 >> 3] = $19;
      $7 = $7 + HEAPF64[$1 + 16 >> 3];
      HEAPF64[$1 + 16 >> 3] = $7;
      if (HEAPF64[$1 + 128 >> 3] > $13) {
       HEAPF64[$1 + 128 >> 3] = $13
      }
      if ($16 < HEAPF64[$1 + 136 >> 3]) {
       HEAPF64[$1 + 136 >> 3] = $16
      }
      if ($17 < HEAPF64[$1 + 144 >> 3]) {
       HEAPF64[$1 + 144 >> 3] = $17
      }
      $13 = HEAPF64[$1 + 56 >> 3];
      if ($13 < HEAPF64[$1 + 152 >> 3]) {
       HEAPF64[$1 + 152 >> 3] = $13
      }
      if ($18 > HEAPF64[$1 + 96 >> 3]) {
       HEAPF64[$1 + 96 >> 3] = $18
      }
      if ($19 > HEAPF64[$1 + 104 >> 3]) {
       HEAPF64[$1 + 104 >> 3] = $19
      }
      if (HEAPF64[$1 + 112 >> 3] < $7) {
       HEAPF64[$1 + 112 >> 3] = $7
      }
      $7 = HEAPF64[$1 + 24 >> 3];
      if (!($7 > HEAPF64[$1 + 120 >> 3])) {
       break label$17
      }
      HEAPF64[$1 + 120 >> 3] = $7;
     }
     $5 = HEAP32[$0 + 100 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 60 >> 2]]($5, $1 + 128 | 0, $1 + 96 | 0, $1 - -64 | 0);
    }
    $8 = $8 + 4 | 0;
    $20 = $20 + 1 | 0;
    if (($20 | 0) < HEAP32[$0 + 8 >> 2]) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $1 + 384 | 0;
 }
 
 function btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $6 = __stack_pointer - 96 | 0;
  __stack_pointer = $6;
  HEAP8[$6 + 52 | 0] = 1;
  HEAP32[$6 + 48 >> 2] = 0;
  HEAP8[$6 + 72 | 0] = 1;
  $4 = $6 + 40 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$6 + 68 >> 2] = 0;
  HEAP8[$6 + 92 | 0] = 1;
  $4 = $6 + 60 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$6 + 88 >> 2] = 0;
  $4 = $6 + 80 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  HEAP8[$6 + 32 | 0] = 1;
  HEAP32[$6 + 20 >> 2] = 0;
  HEAP32[$6 + 24 >> 2] = 0;
  $4 = HEAP32[$0 + 8 >> 2];
  label$1 : {
   if (($4 | 0) <= 0) {
    break label$1
   }
   while (1) {
    $5 = HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] + ($17 << 2) >> 2] + 380 >> 2];
    HEAP32[$6 + 12 >> 2] = $5;
    $16 = $2 - 1 | 0;
    $2 = $5 + ($5 << 15 ^ -1) | 0;
    $2 = Math_imul($2 >>> 10 ^ $2, 9);
    $2 = $2 >>> 6 ^ $2;
    $2 = ($2 << 11 ^ -1) + $2 | 0;
    $2 = $16 & ($2 >>> 16 ^ $2);
    label$3 : {
     label$4 : {
      if ($3 >>> 0 <= $2 >>> 0) {
       break label$4
      }
      $3 = HEAP32[HEAP32[$6 + 28 >> 2] + ($2 << 2) >> 2];
      if (($3 | 0) == -1) {
       break label$4
      }
      $2 = HEAP32[$6 + 48 >> 2];
      $8 = HEAP32[$6 + 88 >> 2];
      while (1) {
       if (HEAP32[$8 + ($3 << 3) >> 2] != ($5 | 0)) {
        $3 = HEAP32[$2 + ($3 << 2) >> 2];
        if (($3 | 0) != -1) {
         continue
        }
        break label$4;
       }
       break;
      };
      if (HEAP32[$6 + 68 >> 2]) {
       break label$3
      }
     }
     HEAP32[$6 >> 2] = $5;
     $10 = $6 + 12 | 0;
     __inlined_func$btHashMap_btHashPtr_2c_20btCollisionShape____insert_28btHashPtr_20const__2c_20btCollisionShape__20const__29 : {
      label$10 : {
       $3 = $6 + 16 | 0;
       $5 = HEAP32[$3 + 48 >> 2];
       $4 = HEAP32[$6 >> 2];
       $2 = ($4 << 15 ^ -1) + $4 | 0;
       $2 = Math_imul($2 >>> 10 ^ $2, 9);
       $2 = $2 >>> 6 ^ $2;
       $2 = ($2 << 11 ^ -1) + $2 | 0;
       $14 = $5 - 1 & ($2 >>> 16 ^ $2);
       label$21 : {
        if ($14 >>> 0 >= HEAPU32[$3 + 4 >> 2]) {
         break label$21
        }
        $2 = HEAP32[HEAP32[$3 + 12 >> 2] + ($14 << 2) >> 2];
        if (($2 | 0) == -1) {
         break label$21
        }
        $8 = HEAP32[$3 + 32 >> 2];
        $9 = HEAP32[$3 + 72 >> 2];
        while (1) {
         if (($4 | 0) == HEAP32[$9 + ($2 << 3) >> 2]) {
          break label$10
         }
         $2 = HEAP32[$8 + ($2 << 2) >> 2];
         if (($2 | 0) != -1) {
          continue
         }
         break;
        };
       }
       $16 = HEAP32[$3 + 44 >> 2];
       $4 = $16;
       label$43 : {
        if (($4 | 0) != ($5 | 0)) {
         break label$43
        }
        $4 = $5;
        $11 = $4 ? $4 << 1 : 1;
        if (($4 | 0) >= ($11 | 0)) {
         break label$43
        }
        label$5 : {
         if (!$11) {
          $8 = 0;
          $4 = $5;
          break label$5;
         }
         $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 2);
         $4 = HEAP32[$3 + 44 >> 2];
        }
        label$7 : {
         if (($4 | 0) <= 0) {
          break label$7
         }
         $9 = $4 & 3;
         $7 = 0;
         if ($4 - 1 >>> 0 >= 3) {
          $13 = $4 & -4;
          $2 = 0;
          while (1) {
           $12 = $2 + $8 | 0;
           HEAP32[$12 >> 2] = HEAP32[HEAP32[$3 + 52 >> 2] + $2 >> 2];
           HEAP32[$12 + 4 >> 2] = HEAP32[(HEAP32[$3 + 52 >> 2] + $2 | 0) + 4 >> 2];
           HEAP32[$12 + 8 >> 2] = HEAP32[(HEAP32[$3 + 52 >> 2] + $2 | 0) + 8 >> 2];
           HEAP32[$12 + 12 >> 2] = HEAP32[(HEAP32[$3 + 52 >> 2] + $2 | 0) + 12 >> 2];
           $2 = $2 + 16 | 0;
           $7 = $7 + 4 | 0;
           if (($13 | 0) != ($7 | 0)) {
            continue
           }
           break;
          };
         }
         if (!$9) {
          break label$7
         }
         $2 = $7 << 2;
         while (1) {
          HEAP32[$2 + $8 >> 2] = HEAP32[HEAP32[$3 + 52 >> 2] + $2 >> 2];
          $2 = $2 + 4 | 0;
          $9 = $9 - 1 | 0;
          if ($9) {
           continue
          }
          break;
         };
        }
        $2 = HEAP32[$3 + 52 >> 2];
        if (!(!$2 | !HEAPU8[$3 + 56 | 0])) {
         btAlignedFreeInternal_28void__29($2);
         $4 = HEAP32[$3 + 44 >> 2];
        }
        HEAP32[$3 + 52 >> 2] = $8;
        HEAP8[$3 + 56 | 0] = 1;
        HEAP32[$3 + 48 >> 2] = $11;
       }
       HEAP32[$3 + 44 >> 2] = $4 + 1;
       HEAP32[HEAP32[$3 + 52 >> 2] + ($4 << 2) >> 2] = HEAP32[$10 >> 2];
       $2 = HEAP32[$3 - -64 >> 2];
       label$12 : {
        if (($2 | 0) != HEAP32[$3 + 68 >> 2]) {
         break label$12
        }
        $11 = $2 ? $2 << 1 : 1;
        if (($11 | 0) <= ($2 | 0)) {
         break label$12
        }
        label$13 : {
         if (!$11) {
          $8 = 0;
          break label$13;
         }
         $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 3);
         $2 = HEAP32[$3 + 64 >> 2];
        }
        label$15 : {
         if (($2 | 0) <= 0) {
          break label$15
         }
         $9 = $2 & 3;
         $7 = 0;
         if ($2 - 1 >>> 0 >= 3) {
          $12 = $2 & -4;
          $2 = 0;
          while (1) {
           $10 = HEAP32[$3 + 72 >> 2] + $2 | 0;
           $13 = HEAP32[$10 + 4 >> 2];
           $4 = $2 + $8 | 0;
           HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
           HEAP32[$4 + 4 >> 2] = $13;
           $10 = (HEAP32[$3 + 72 >> 2] + $2 | 0) + 8 | 0;
           $13 = HEAP32[$10 + 4 >> 2];
           $15 = $4 + 8 | 0;
           HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
           HEAP32[$15 + 4 >> 2] = $13;
           $10 = (HEAP32[$3 + 72 >> 2] + $2 | 0) + 16 | 0;
           $13 = HEAP32[$10 + 4 >> 2];
           $15 = $4 + 16 | 0;
           HEAP32[$15 >> 2] = HEAP32[$10 >> 2];
           HEAP32[$15 + 4 >> 2] = $13;
           $10 = (HEAP32[$3 + 72 >> 2] + $2 | 0) + 24 | 0;
           $13 = HEAP32[$10 + 4 >> 2];
           $4 = $4 + 24 | 0;
           HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
           HEAP32[$4 + 4 >> 2] = $13;
           $2 = $2 + 32 | 0;
           $7 = $7 + 4 | 0;
           if (($12 | 0) != ($7 | 0)) {
            continue
           }
           break;
          };
         }
         if (!$9) {
          break label$15
         }
         $2 = $7 << 3;
         while (1) {
          $4 = HEAP32[$3 + 72 >> 2] + $2 | 0;
          $7 = HEAP32[$4 + 4 >> 2];
          $12 = $2 + $8 | 0;
          HEAP32[$12 >> 2] = HEAP32[$4 >> 2];
          HEAP32[$12 + 4 >> 2] = $7;
          $2 = $2 + 8 | 0;
          $9 = $9 - 1 | 0;
          if ($9) {
           continue
          }
          break;
         };
        }
        $4 = HEAP32[$3 + 72 >> 2];
        if (!(!$4 | !HEAPU8[$3 + 76 | 0])) {
         btAlignedFreeInternal_28void__29($4)
        }
        HEAP32[$3 + 72 >> 2] = $8;
        HEAP8[$3 + 76 | 0] = 1;
        HEAP32[$3 + 68 >> 2] = $11;
        $2 = HEAP32[$3 + 64 >> 2];
       }
       $4 = HEAP32[$6 + 4 >> 2];
       $2 = HEAP32[$3 + 72 >> 2] + ($2 << 3) | 0;
       HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$2 + 4 >> 2] = $4;
       HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] + 1;
       if (($5 | 0) < HEAP32[$3 + 48 >> 2]) {
        $2 = 0;
        $9 = 0;
        $4 = HEAP32[$3 + 4 >> 2];
        $8 = HEAP32[$3 + 48 >> 2];
        label$11 : {
         if (($4 | 0) >= ($8 | 0)) {
          break label$11
         }
         label$22 : {
          if (HEAP32[$3 + 8 >> 2] >= ($8 | 0)) {
           $9 = HEAP32[$3 + 12 >> 2];
           break label$22;
          }
          if ($8) {
           $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2);
           $5 = HEAP32[$3 + 4 >> 2];
          } else {
           $5 = $4
          }
          $11 = HEAP32[$3 + 12 >> 2];
          label$63 : {
           label$74 : {
            if (($5 | 0) > 0) {
             $7 = $5 & 3;
             if ($5 - 1 >>> 0 >= 3) {
              $10 = $5 & -4;
              $5 = 0;
              while (1) {
               $14 = $5 + $9 | 0;
               $12 = $5 + $11 | 0;
               HEAP32[$14 >> 2] = HEAP32[$12 >> 2];
               HEAP32[$14 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
               HEAP32[$14 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
               HEAP32[$14 + 12 >> 2] = HEAP32[$12 + 12 >> 2];
               $5 = $5 + 16 | 0;
               $2 = $2 + 4 | 0;
               if (($10 | 0) != ($2 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$7) {
              break label$74
             }
             $2 = $2 << 2;
             $5 = $2 + $9 | 0;
             $2 = $2 + $11 | 0;
             while (1) {
              HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
              $5 = $5 + 4 | 0;
              $2 = $2 + 4 | 0;
              $7 = $7 - 1 | 0;
              if ($7) {
               continue
              }
              break;
             };
             break label$74;
            }
            if ($11) {
             break label$74
            }
            break label$63;
           }
           if (HEAPU8[$3 + 16 | 0]) {
            btAlignedFreeInternal_28void__29($11)
           }
          }
          HEAP32[$3 + 12 >> 2] = $9;
          HEAP8[$3 + 16 | 0] = 1;
          HEAP32[$3 + 8 >> 2] = $8;
         }
         memset(($4 << 2) + $9 | 0, 0, $8 - $4 << 2);
         HEAP32[$3 + 4 >> 2] = $8;
         $14 = $8 << 2;
         $12 = HEAP32[$3 + 24 >> 2];
         if (($12 | 0) < ($8 | 0)) {
          label$14 : {
           if (HEAP32[$3 + 28 >> 2] >= ($8 | 0)) {
            $9 = HEAP32[$3 + 32 >> 2];
            break label$14;
           }
           label$16 : {
            if (!$8) {
             $9 = 0;
             $5 = $12;
             break label$16;
            }
            $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14);
            $5 = HEAP32[$3 + 24 >> 2];
           }
           $11 = HEAP32[$3 + 32 >> 2];
           label$187 : {
            if (($5 | 0) > 0) {
             $7 = $5 & 3;
             $2 = 0;
             if ($5 - 1 >>> 0 >= 3) {
              $15 = $5 & -4;
              $5 = 0;
              while (1) {
               $10 = $5 + $9 | 0;
               $13 = $5 + $11 | 0;
               HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
               HEAP32[$10 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
               HEAP32[$10 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
               HEAP32[$10 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
               $5 = $5 + 16 | 0;
               $2 = $2 + 4 | 0;
               if (($15 | 0) != ($2 | 0)) {
                continue
               }
               break;
              };
             }
             if (!$7) {
              break label$187
             }
             $2 = $2 << 2;
             $5 = $2 + $9 | 0;
             $2 = $2 + $11 | 0;
             while (1) {
              HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
              $5 = $5 + 4 | 0;
              $2 = $2 + 4 | 0;
              $7 = $7 - 1 | 0;
              if ($7) {
               continue
              }
              break;
             };
             break label$187;
            }
            if ($11) {
             break label$187
            }
            HEAP32[$3 + 32 >> 2] = $9;
            HEAP32[$3 + 28 >> 2] = $8;
            HEAP8[$3 + 36 | 0] = 1;
            break label$14;
           }
           if (HEAPU8[$3 + 36 | 0]) {
            btAlignedFreeInternal_28void__29($11)
           }
           HEAP32[$3 + 32 >> 2] = $9;
           HEAP8[$3 + 36 | 0] = 1;
           HEAP32[$3 + 28 >> 2] = $8;
          }
          memset(($12 << 2) + $9 | 0, 0, $8 - $12 << 2);
         }
         HEAP32[$3 + 24 >> 2] = $8;
         if (($8 | 0) > 0) {
          memset(HEAP32[$3 + 12 >> 2], 255, $14);
          memset(HEAP32[$3 + 32 >> 2], 255, $14);
         }
         if (($4 | 0) <= 0) {
          break label$11
         }
         $5 = HEAP32[$3 + 32 >> 2];
         $2 = HEAP32[$3 + 72 >> 2];
         $9 = HEAP32[$3 + 12 >> 2];
         $8 = 0;
         while (1) {
          $7 = HEAP32[$2 >> 2];
          $7 = ($7 << 15 ^ -1) + $7 | 0;
          $7 = Math_imul($7 >>> 10 ^ $7, 9);
          $7 = $7 >>> 6 ^ $7;
          $7 = ($7 << 11 ^ -1) + $7 | 0;
          $7 = $9 + ((HEAP32[$3 + 48 >> 2] - 1 & ($7 >>> 16 ^ $7)) << 2) | 0;
          HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$7 >> 2] = $8;
          $2 = $2 + 8 | 0;
          $5 = $5 + 4 | 0;
          $8 = $8 + 1 | 0;
          if (($8 | 0) != ($4 | 0)) {
           continue
          }
          break;
         };
        }
        $4 = HEAP32[$6 >> 2];
        $4 = ($4 << 15 ^ -1) + $4 | 0;
        $4 = Math_imul($4 >>> 10 ^ $4, 9);
        $4 = $4 >>> 6 ^ $4;
        $4 = ($4 << 11 ^ -1) + $4 | 0;
        $14 = HEAP32[$3 + 48 >> 2] - 1 & ($4 >>> 16 ^ $4);
       }
       $5 = HEAP32[$3 + 32 >> 2] + ($16 << 2) | 0;
       $3 = HEAP32[$3 + 12 >> 2] + ($14 << 2) | 0;
       HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$3 >> 2] = $16;
       break __inlined_func$btHashMap_btHashPtr_2c_20btCollisionShape____insert_28btHashPtr_20const__2c_20btCollisionShape__20const__29;
      }
      HEAP32[HEAP32[$3 + 52 >> 2] + ($2 << 2) >> 2] = HEAP32[$10 >> 2];
     }
     $3 = HEAP32[$6 + 12 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 60 >> 2]]($3, $1);
     $4 = HEAP32[$0 + 8 >> 2];
    }
    $17 = $17 + 1 | 0;
    if (($4 | 0) > ($17 | 0)) {
     $3 = HEAP32[$6 + 20 >> 2];
     $2 = HEAP32[$6 + 64 >> 2];
     continue;
    }
    break;
   };
   if (($4 | 0) <= 0) {
    break label$1
   }
   $3 = 0;
   $5 = 0;
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 16 >> 2] + $3 >> 2];
    $8 = HEAP32[$2 + 472 >> 2];
    if (!(($8 | 0) != 64 & ($8 | 0) != 1)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $1);
     $4 = HEAP32[$0 + 8 >> 2];
    }
    $3 = $3 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($4 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = HEAP32[$6 + 88 >> 2];
  if (!(!$0 | !HEAPU8[$6 + 92 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$6 + 88 >> 2] = 0;
  HEAP8[$6 + 92 | 0] = 1;
  HEAP32[$6 + 80 >> 2] = 0;
  HEAP32[$6 + 84 >> 2] = 0;
  $0 = HEAP32[$6 + 68 >> 2];
  if (!(!$0 | !HEAPU8[$6 + 72 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$6 + 68 >> 2] = 0;
  HEAP8[$6 + 72 | 0] = 1;
  HEAP32[$6 + 60 >> 2] = 0;
  HEAP32[$6 + 64 >> 2] = 0;
  $0 = HEAP32[$6 + 48 >> 2];
  if (!(!$0 | !HEAPU8[$6 + 52 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$6 + 48 >> 2] = 0;
  HEAP8[$6 + 52 | 0] = 1;
  HEAP32[$6 + 40 >> 2] = 0;
  HEAP32[$6 + 44 >> 2] = 0;
  $0 = HEAP32[$6 + 28 >> 2];
  if (!(!$0 | !HEAPU8[$6 + 32 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  __stack_pointer = $6 + 96 | 0;
 }
 
 function btCollisionWorld__serialize_28btSerializer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1);
  btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1);
 }
 
 function btCollisionWorld__setDebugDrawer_28btIDebugDraw__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 100 >> 2] = $1;
 }
 
 function btCollisionWorld__getDebugDrawer_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 100 >> 2];
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20double_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 60 >> 2] = $4;
  HEAP32[$5 + 56 >> 2] = $3;
  $9 = HEAPF64[$0 + 120 >> 3];
  $10 = HEAPF64[$0 + 112 >> 3];
  $11 = HEAPF64[$0 + 152 >> 3];
  $12 = HEAPF64[$0 + 136 >> 3];
  $13 = HEAPF64[$0 + 144 >> 3];
  $14 = HEAPF64[$0 + 184 >> 3];
  $15 = HEAPF64[$0 + 168 >> 3];
  $16 = HEAPF64[$0 + 176 >> 3];
  $17 = HEAPF64[$0 + 104 >> 3];
  $6 = HEAPF64[$1 + 16 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $1 = $5 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF64[$5 + 32 >> 3] = $14 * $6 + ($15 * $7 + $8 * $16);
  HEAPF64[$5 + 24 >> 3] = $11 * $6 + ($12 * $7 + $8 * $13);
  HEAPF64[$5 + 16 >> 3] = $9 * $6 + ($17 * $7 + $10 * $8);
  HEAPF64[$5 + 48 >> 3] = $2;
  HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 92 >> 2];
  HEAP32[$5 + 12 >> 2] = $5 + 56;
  $0 = HEAP32[$0 + 88 >> 2];
  $2 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $5 + 8 | 0, 1);
  __stack_pointer = $5 - -64 | 0;
  return +$2;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  $12 = HEAP32[$1 + 68 >> 2];
  $1 = HEAP32[HEAP32[$0 + 8 >> 2] + 28 >> 2] + Math_imul($12, 152) | 0;
  $25 = HEAP32[$1 + 128 >> 2];
  $13 = HEAPF64[$1 + 64 >> 3];
  $14 = HEAPF64[$1 >> 3];
  $15 = HEAPF64[$1 + 32 >> 3];
  $16 = HEAPF64[$1 + 112 >> 3];
  $17 = HEAPF64[$1 + 104 >> 3];
  $18 = HEAPF64[$1 + 96 >> 3];
  $19 = HEAPF64[$1 + 72 >> 3];
  $20 = HEAPF64[$1 + 40 >> 3];
  $21 = HEAPF64[$1 + 8 >> 3];
  $22 = HEAPF64[$1 + 80 >> 3];
  $23 = HEAPF64[$1 + 48 >> 3];
  $24 = HEAPF64[$1 + 16 >> 3];
  $1 = HEAP32[$0 + 12 >> 2];
  $26 = HEAPF64[$1 + 104 >> 3];
  $27 = HEAPF64[$1 + 112 >> 3];
  $3 = HEAPF64[$1 + 48 >> 3];
  $4 = HEAPF64[$1 + 40 >> 3];
  $5 = HEAPF64[$1 + 80 >> 3];
  $6 = HEAPF64[$1 + 72 >> 3];
  $28 = HEAPF64[$1 + 96 >> 3];
  $7 = HEAPF64[$1 + 16 >> 3];
  $8 = HEAPF64[$1 >> 3];
  $9 = HEAPF64[$1 + 8 >> 3];
  $10 = HEAPF64[$1 + 32 >> 3];
  $11 = HEAPF64[$1 + 64 >> 3];
  $1 = $2 + 184 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $2 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $2 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $2 - -64 | 0;
  HEAPF64[$1 + 80 >> 3] = $22 * $5 + ($24 * $11 + $23 * $6);
  HEAPF64[$1 + 72 >> 3] = $19 * $5 + ($21 * $11 + $20 * $6);
  HEAPF64[$1 + 48 >> 3] = $22 * $3 + ($24 * $10 + $23 * $4);
  HEAPF64[$1 + 40 >> 3] = $19 * $3 + ($21 * $10 + $20 * $4);
  HEAPF64[$1 + 112 >> 3] = $27 + ($16 * $5 + ($18 * $11 + $6 * $17));
  HEAPF64[$1 + 104 >> 3] = $26 + ($16 * $3 + ($18 * $10 + $4 * $17));
  HEAP32[$2 + 88 >> 2] = 0;
  HEAP32[$2 + 92 >> 2] = 0;
  HEAPF64[$2 + 80 >> 3] = $22 * $7 + ($24 * $8 + $9 * $23);
  HEAPF64[$2 + 72 >> 3] = $19 * $7 + ($21 * $8 + $9 * $20);
  HEAPF64[$2 + 64 >> 3] = $13 * $7 + ($14 * $8 + $15 * $9);
  HEAPF64[$2 + 160 >> 3] = $28 + ($16 * $7 + ($18 * $8 + $9 * $17));
  HEAPF64[$2 + 128 >> 3] = $13 * $5 + ($14 * $11 + $15 * $6);
  HEAPF64[$2 + 96 >> 3] = $13 * $3 + ($14 * $10 + $15 * $4);
  HEAP32[$2 + 60 >> 2] = $12;
  HEAP32[$2 + 56 >> 2] = -1;
  HEAP32[$2 + 44 >> 2] = $25;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 52 >> 2] = $1;
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 1;
  HEAP32[$2 + 36 >> 2] = $12;
  HEAP32[$2 >> 2] = 26824;
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAPF64[$2 + 8 >> 3] = HEAPF64[$1 + 8 >> 3];
  HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
  btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $2 + 40 | 0, $2);
  __stack_pointer = $2 + 192 | 0;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 32 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = -1;
  HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 36 >> 2];
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $3 + 8
  }
  $4 = HEAP32[$0 + 32 >> 2];
  $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $1, $2);
  HEAPF64[$0 + 8 >> 3] = HEAPF64[HEAP32[$0 + 32 >> 2] + 8 >> 3];
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 96 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 92 >> 2] = $5;
  HEAP32[$6 + 88 >> 2] = $4;
  $4 = HEAP32[$0 + 416 >> 2];
  if ($3 <= HEAPF64[$4 + 8 >> 3]) {
   $7 = $1 + 8 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $9 = $6 + 8 | 0;
   $5 = $9 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $7 = $1 + 16 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $5 = $9 + 24 | 0;
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $7 = $1 + 24 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $5 = $6 + 40 | 0;
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $7 = $2 + 24 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $5 = $6 + 72 | 0;
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $7 = $2 + 16 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $5 = $6 - -64 | 0;
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $7 = $2 + 8 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   $5 = $6 + 56 | 0;
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   HEAP32[$6 + 8 >> 2] = HEAP32[$0 + 420 >> 2];
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 20 >> 2] = $0;
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$6 + 48 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 52 >> 2] = $0;
   HEAP32[$6 + 12 >> 2] = $6 + 88;
   HEAPF64[$6 + 80 >> 3] = $3;
   $3 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $9, 1);
  }
  __stack_pointer = $6 + 96 | 0;
  return +$3;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__btCompoundLeafCallback__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  $13 = HEAP32[$1 + 68 >> 2];
  $1 = HEAP32[HEAP32[$0 + 32 >> 2] + 28 >> 2] + Math_imul($13, 152) | 0;
  $23 = HEAP32[$1 + 128 >> 2];
  $14 = HEAPF64[$1 + 64 >> 3];
  $15 = HEAPF64[$1 >> 3];
  $16 = HEAPF64[$1 + 32 >> 3];
  $17 = HEAPF64[$1 + 112 >> 3];
  $18 = HEAPF64[$1 + 104 >> 3];
  $19 = HEAPF64[$1 + 96 >> 3];
  $20 = HEAPF64[$1 + 72 >> 3];
  $21 = HEAPF64[$1 + 40 >> 3];
  $22 = HEAPF64[$1 + 8 >> 3];
  $3 = HEAPF64[$1 + 80 >> 3];
  $4 = HEAPF64[$1 + 48 >> 3];
  $5 = HEAPF64[$1 + 16 >> 3];
  $1 = $2 + 184 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $2 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $2 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $6 = $2 - -64 | 0;
  $1 = HEAP32[$0 + 36 >> 2];
  $7 = HEAPF64[$1 + 80 >> 3];
  $8 = HEAPF64[$1 + 64 >> 3];
  $9 = HEAPF64[$1 + 72 >> 3];
  HEAPF64[$6 + 80 >> 3] = $3 * $7 + ($5 * $8 + $4 * $9);
  HEAPF64[$6 + 72 >> 3] = $20 * $7 + ($22 * $8 + $21 * $9);
  $10 = HEAPF64[$1 + 48 >> 3];
  $11 = HEAPF64[$1 + 32 >> 3];
  $12 = HEAPF64[$1 + 40 >> 3];
  HEAPF64[$6 + 48 >> 3] = $3 * $10 + ($5 * $11 + $4 * $12);
  HEAPF64[$6 + 40 >> 3] = $20 * $10 + ($22 * $11 + $21 * $12);
  HEAPF64[$6 + 112 >> 3] = $17 * $7 + ($19 * $8 + $18 * $9) + HEAPF64[$1 + 112 >> 3];
  HEAPF64[$6 + 104 >> 3] = $17 * $10 + ($19 * $11 + $18 * $12) + HEAPF64[$1 + 104 >> 3];
  HEAP32[$2 + 88 >> 2] = 0;
  HEAP32[$2 + 92 >> 2] = 0;
  $24 = $3;
  $3 = HEAPF64[$1 + 16 >> 3];
  $25 = $5;
  $5 = HEAPF64[$1 >> 3];
  $26 = $4;
  $4 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$2 + 80 >> 3] = $24 * $3 + ($25 * $5 + $26 * $4);
  HEAPF64[$2 + 72 >> 3] = $20 * $3 + ($22 * $5 + $21 * $4);
  HEAPF64[$2 + 64 >> 3] = $14 * $3 + ($15 * $5 + $16 * $4);
  HEAPF64[$2 + 160 >> 3] = $17 * $3 + ($19 * $5 + $18 * $4) + HEAPF64[$1 + 96 >> 3];
  HEAPF64[$2 + 128 >> 3] = $14 * $7 + ($15 * $8 + $16 * $9);
  HEAPF64[$2 + 96 >> 3] = $14 * $10 + ($15 * $11 + $16 * $12);
  HEAP32[$2 + 48 >> 2] = 1;
  HEAP32[$2 + 52 >> 2] = -1;
  HEAP32[$2 + 60 >> 2] = $13;
  HEAP32[$2 + 32 >> 2] = 27640;
  $1 = HEAP32[$0 + 40 >> 2];
  HEAP32[$2 + 56 >> 2] = $1;
  HEAPF64[$2 + 40 >> 3] = HEAPF64[$1 + 8 >> 3];
  HEAP32[$2 + 28 >> 2] = $13;
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 12 >> 2] = $23;
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$2 + 20 >> 2] = $6;
  btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], $2 + 8 | 0, $2 + 32 | 0, HEAPF64[$0 + 24 >> 3]);
  __stack_pointer = $2 + 192 | 0;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 24 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = -1;
  HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 28 >> 2];
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $3 + 8
  }
  $4 = HEAP32[$0 + 24 >> 2];
  $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $1, $2);
  HEAPF64[$0 + 8 >> 3] = HEAPF64[HEAP32[$0 + 24 >> 2] + 8 >> 3];
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function btSingleRayCallback__process_28btBroadphaseProxy_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[$0 + 420 >> 2];
  $4 = HEAPF64[$3 + 8 >> 3];
  label$1 : {
   if ($4 == 0.0) {
    break label$1
   }
   $1 = HEAP32[$1 >> 2];
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 376 >> 2]) | 0)) {
    break label$1
   }
   $3 = HEAP32[$0 + 420 >> 2];
   $5 = HEAP32[$1 + 380 >> 2];
   HEAP32[$2 + 24 >> 2] = -1;
   HEAP32[$2 + 28 >> 2] = -1;
   HEAP32[$2 + 20 >> 2] = $1 + 8;
   HEAP32[$2 + 16 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $5;
   HEAP32[$2 + 8 >> 2] = 0;
   btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29($0 + 128 | 0, $0 + 256 | 0, $2 + 8 | 0, $3);
  }
  __stack_pointer = $2 + 32 | 0;
  return $4 != 0.0 | 0;
 }
 
 function btSingleSweepCallback__process_28btBroadphaseProxy_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[$0 + 356 >> 2];
  $4 = HEAPF64[$3 + 8 >> 3];
  label$1 : {
   if ($4 == 0.0) {
    break label$1
   }
   $1 = HEAP32[$1 >> 2];
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 376 >> 2]) | 0)) {
    break label$1
   }
   $5 = HEAPF64[$0 + 360 >> 3];
   $3 = HEAP32[$0 + 356 >> 2];
   $6 = HEAP32[$0 + 368 >> 2];
   $7 = HEAP32[$1 + 380 >> 2];
   HEAP32[$2 + 24 >> 2] = -1;
   HEAP32[$2 + 28 >> 2] = -1;
   HEAP32[$2 + 20 >> 2] = $1 + 8;
   HEAP32[$2 + 16 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $7;
   HEAP32[$2 + 8 >> 2] = 0;
   btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29($6, $0 - -64 | 0, $0 + 192 | 0, $2 + 8 | 0, $3, $5);
  }
  __stack_pointer = $2 + 32 | 0;
  return $4 != 0.0 | 0;
 }
 
 function DebugDrawcallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 184 >> 2] = 0;
  HEAP32[$2 + 188 >> 2] = 0;
  $4 = HEAPF64[$1 + 16 >> 3];
  $8 = HEAPF64[$0 + 128 >> 3];
  $6 = HEAPF64[$1 >> 3];
  $16 = HEAPF64[$0 + 112 >> 3];
  $7 = HEAPF64[$1 + 8 >> 3];
  $17 = HEAPF64[$0 + 120 >> 3];
  $18 = HEAPF64[$0 + 160 >> 3];
  $12 = $4 * $8 + ($6 * $16 + $7 * $17) + $18;
  HEAPF64[$2 + 176 >> 3] = $12;
  $9 = HEAPF64[$0 + 96 >> 3];
  $20 = HEAPF64[$0 + 80 >> 3];
  $21 = HEAPF64[$0 + 88 >> 3];
  $22 = HEAPF64[$0 + 152 >> 3];
  $5 = $4 * $9 + ($6 * $20 + $7 * $21) + $22;
  HEAPF64[$2 + 168 >> 3] = $5;
  $10 = HEAPF64[$0 - -64 >> 3];
  $11 = $6;
  $6 = HEAPF64[$0 + 48 >> 3];
  $13 = $7;
  $7 = HEAPF64[$0 + 56 >> 3];
  $14 = HEAPF64[$0 + 144 >> 3];
  $4 = $4 * $10 + ($11 * $6 + $13 * $7) + $14;
  HEAPF64[$2 + 160 >> 3] = $4;
  HEAP32[$2 + 152 >> 2] = 0;
  HEAP32[$2 + 156 >> 2] = 0;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP32[$2 + 124 >> 2] = 0;
  $15 = HEAPF64[$1 + 48 >> 3];
  $11 = HEAPF64[$1 + 32 >> 3];
  $13 = HEAPF64[$1 + 40 >> 3];
  $23 = $14 + ($10 * $15 + ($6 * $11 + $7 * $13));
  HEAPF64[$2 + 128 >> 3] = $23;
  $24 = $22 + ($15 * $9 + ($11 * $20 + $21 * $13));
  HEAPF64[$2 + 136 >> 3] = $24;
  $15 = $18 + ($15 * $8 + ($11 * $16 + $17 * $13));
  HEAPF64[$2 + 144 >> 3] = $15;
  $11 = $10;
  $10 = HEAPF64[$1 + 80 >> 3];
  $13 = $6;
  $6 = HEAPF64[$1 + 64 >> 3];
  $26 = $7;
  $7 = HEAPF64[$1 + 72 >> 3];
  $14 = $14 + ($11 * $10 + ($13 * $6 + $26 * $7));
  HEAPF64[$2 + 96 >> 3] = $14;
  $9 = $22 + ($10 * $9 + ($6 * $20 + $21 * $7));
  HEAPF64[$2 + 104 >> 3] = $9;
  $8 = $18 + ($10 * $8 + ($6 * $16 + $17 * $7));
  HEAPF64[$2 + 112 >> 3] = $8;
  HEAP32[$2 + 88 >> 2] = 0;
  HEAP32[$2 + 92 >> 2] = 0;
  $6 = ($12 + $15 + $8) * .3333333333333333;
  HEAPF64[$2 + 80 >> 3] = $6;
  $16 = ($5 + $24 + $9) * .3333333333333333;
  HEAPF64[$2 + 72 >> 3] = $16;
  $7 = ($4 + $23 + $14) * .3333333333333333;
  HEAPF64[$2 + 64 >> 3] = $7;
  $1 = HEAP32[$0 + 8 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 16384) {
   $1 = $2 + 56 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$2 + 48 >> 2] = 0;
   HEAP32[$2 + 52 >> 2] = 0;
   HEAP32[$2 + 40 >> 2] = 0;
   HEAP32[$2 + 44 >> 2] = 1072693248;
   HEAP32[$2 + 32 >> 2] = 0;
   HEAP32[$2 + 36 >> 2] = 1072693248;
   $1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 28 >> 2] = 0;
   $17 = $23 - $4;
   $18 = $9 - $5;
   $4 = $14 - $4;
   $9 = $24 - $5;
   $5 = $17 * $18 - $4 * $9;
   $10 = $5;
   $11 = $5 * $5;
   $5 = $8 - $12;
   $8 = $15 - $12;
   $12 = $9 * $5 - $18 * $8;
   $5 = $8 * $4 - $5 * $17;
   $4 = 1.0 / Math_sqrt($11 + ($12 * $12 + $5 * $5));
   HEAPF64[$2 + 16 >> 3] = $10 * $4 + $6;
   HEAPF64[$2 + 8 >> 3] = $5 * $4 + $16;
   HEAPF64[$2 >> 3] = $7 + $12 * $4;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $2 - -64 | 0, $2, $2 + 32 | 0);
  }
  $3 = HEAP32[$0 + 8 >> 2];
  $25 = $2 + 160 | 0;
  $19 = $2 + 128 | 0;
  $1 = $0 + 16 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $25, $19, $1);
  $3 = HEAP32[$0 + 8 >> 2];
  $27 = $19;
  $19 = $2 + 96 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $27, $19, $1);
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $19, $25, $1);
  __stack_pointer = $2 + 192 | 0;
 }
 
 function DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
 }
 
 function non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29($0) {
  $0 = $0 | 0;
  return $0 - 4 | 0;
 }
 
 function non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 - 4 | 0);
 }
 
 function non_virtual_20thunk_20to_20DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = $0 - 4 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
 }
 
 function btUnionFind___btUnionFind_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 16 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  while (1) {
   $11 = $2;
   $8 = HEAP32[$0 + 12 >> 2];
   $12 = HEAP32[$8 + (($2 + $3 | 0) / 2 << 3) >> 2];
   $6 = $2;
   $7 = $3;
   while (1) {
    $5 = (($6 << 3) + $8 | 0) - 8 | 0;
    while (1) {
     $6 = $6 + 1 | 0;
     $5 = $5 + 8 | 0;
     if (HEAP32[$5 >> 2] < ($12 | 0)) {
      continue
     }
     break;
    };
    $2 = $6 - 1 | 0;
    $4 = ($7 << 3) + 8 | 0;
    while (1) {
     $7 = $7 - 1 | 0;
     $9 = $4 + $8 | 0;
     $10 = $4 - 8 | 0;
     $4 = $10;
     if (HEAP32[$9 - 8 >> 2] > ($12 | 0)) {
      continue
     }
     break;
    };
    $4 = $7 + 1 | 0;
    if (($2 | 0) <= ($4 | 0)) {
     $13 = HEAP32[$5 >> 2];
     $9 = HEAP32[$5 + 4 >> 2];
     $4 = $8 + $10 | 0;
     $2 = HEAP32[$4 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $2;
     $2 = HEAP32[$0 + 12 >> 2] + $10 | 0;
     HEAP32[$2 >> 2] = $13;
     HEAP32[$2 + 4 >> 2] = $9;
     $4 = $7;
     $2 = $6;
    }
    if (($2 | 0) <= ($4 | 0)) {
     $8 = HEAP32[$0 + 12 >> 2];
     $6 = $2;
     $7 = $4;
     continue;
    }
    break;
   };
   if (($4 | 0) > ($11 | 0)) {
    void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $11, $4)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function btSimulationIslandManager___btSimulationIslandManager_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28180;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btUnionFind___btUnionFind_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function btSimulationIslandManager___btSimulationIslandManager_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28180;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btUnionFind___btUnionFind_28_29($0 + 4 | 0);
  operator_20delete_28void__29($0);
 }
 
 function btSimulationIslandManager__updateActivationState_28btCollisionWorld__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $5 = HEAP32[$1 + 8 >> 2];
  label$1 : {
   if (($5 | 0) <= 0) {
    break label$1
   }
   $3 = HEAP32[$1 + 16 >> 2];
   if (($5 | 0) != 1) {
    $10 = $5 & -2;
    $2 = $3;
    while (1) {
     $4 = HEAP32[$2 >> 2];
     if (!(HEAPU8[$4 + 392 | 0] & 3)) {
      HEAP32[$4 + 396 >> 2] = $6;
      $6 = $6 + 1 | 0;
     }
     HEAP32[$4 + 488 >> 2] = 0;
     HEAP32[$4 + 492 >> 2] = 1072693248;
     HEAP32[$4 + 400 >> 2] = -1;
     $4 = HEAP32[$2 + 4 >> 2];
     if (!(HEAPU8[$4 + 392 | 0] & 3)) {
      HEAP32[$4 + 396 >> 2] = $6;
      $6 = $6 + 1 | 0;
     }
     HEAP32[$4 + 488 >> 2] = 0;
     HEAP32[$4 + 492 >> 2] = 1072693248;
     HEAP32[$4 + 400 >> 2] = -1;
     $2 = $2 + 8 | 0;
     $7 = $7 + 2 | 0;
     if (($10 | 0) != ($7 | 0)) {
      continue
     }
     break;
    };
   }
   if (!($5 & 1)) {
    break label$1
   }
   $2 = HEAP32[($7 << 2) + $3 >> 2];
   if (!(HEAPU8[$2 + 392 | 0] & 3)) {
    HEAP32[$2 + 396 >> 2] = $6;
    $6 = $6 + 1 | 0;
   }
   HEAP32[$2 + 488 >> 2] = 0;
   HEAP32[$2 + 492 >> 2] = 1072693248;
   HEAP32[$2 + 400 >> 2] = -1;
  }
  $5 = 0;
  $7 = 0;
  $4 = $0 + 4 | 0;
  $2 = HEAP32[$4 + 4 >> 2];
  label$10 : {
   if (($2 | 0) >= ($6 | 0)) {
    break label$10
   }
   if (($6 | 0) > HEAP32[$4 + 8 >> 2]) {
    if ($6) {
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 3);
     $3 = HEAP32[$4 + 4 >> 2];
    } else {
     $3 = $2
    }
    label$51 : {
     if (($3 | 0) <= 0) {
      break label$51
     }
     $10 = $3 & 3;
     if ($3 - 1 >>> 0 >= 3) {
      $13 = $3 & -4;
      $3 = 0;
      while (1) {
       $8 = HEAP32[$4 + 12 >> 2] + $3 | 0;
       $11 = HEAP32[$8 + 4 >> 2];
       $9 = $3 + $5 | 0;
       HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$9 + 4 >> 2] = $11;
       $8 = (HEAP32[$4 + 12 >> 2] + $3 | 0) + 8 | 0;
       $11 = HEAP32[$8 + 4 >> 2];
       $12 = $9 + 8 | 0;
       HEAP32[$12 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$12 + 4 >> 2] = $11;
       $8 = (HEAP32[$4 + 12 >> 2] + $3 | 0) + 16 | 0;
       $11 = HEAP32[$8 + 4 >> 2];
       $12 = $9 + 16 | 0;
       HEAP32[$12 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$12 + 4 >> 2] = $11;
       $8 = (HEAP32[$4 + 12 >> 2] + $3 | 0) + 24 | 0;
       $11 = HEAP32[$8 + 4 >> 2];
       $9 = $9 + 24 | 0;
       HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$9 + 4 >> 2] = $11;
       $3 = $3 + 32 | 0;
       $7 = $7 + 4 | 0;
       if (($13 | 0) != ($7 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$10) {
      break label$51
     }
     $3 = $7 << 3;
     while (1) {
      $7 = HEAP32[$4 + 12 >> 2] + $3 | 0;
      $9 = HEAP32[$7 + 4 >> 2];
      $13 = $3 + $5 | 0;
      HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$13 + 4 >> 2] = $9;
      $3 = $3 + 8 | 0;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$4 + 12 >> 2];
    if (!(!$3 | !HEAPU8[$4 + 16 | 0])) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP32[$4 + 12 >> 2] = $5;
    HEAP8[$4 + 16 | 0] = 1;
    HEAP32[$4 + 8 >> 2] = $6;
   }
   $7 = ($2 ^ -1) + $6 | 0;
   $5 = $6 - $2 & 3;
   if ($5) {
    $3 = $2 << 3;
    while (1) {
     $10 = HEAP32[$4 + 12 >> 2] + $3 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $3 = $3 + 8 | 0;
     $2 = $2 + 1 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   if ($7 >>> 0 < 3) {
    break label$10
   }
   $3 = $2 << 3;
   $2 = $6 - $2 | 0;
   while (1) {
    $5 = HEAP32[$4 + 12 >> 2] + $3 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    $5 = (HEAP32[$4 + 12 >> 2] + $3 | 0) + 8 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    $5 = (HEAP32[$4 + 12 >> 2] + $3 | 0) + 16 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    $5 = (HEAP32[$4 + 12 >> 2] + $3 | 0) + 24 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    $3 = $3 + 32 | 0;
    $2 = $2 - 4 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  HEAP32[$4 + 4 >> 2] = $6;
  label$13 : {
   if (($6 | 0) <= 0) {
    break label$13
   }
   $2 = $6 & 3;
   $5 = HEAP32[$4 + 12 >> 2];
   $3 = 0;
   if ($6 - 1 >>> 0 >= 3) {
    $4 = $5 + 16 | 0;
    $6 = $6 & -4;
    while (1) {
     HEAP32[$4 + 12 >> 2] = 1;
     HEAP32[$4 + 8 >> 2] = $3 + 3;
     HEAP32[$4 + 4 >> 2] = 1;
     HEAP32[$4 >> 2] = $3 + 2;
     HEAP32[$4 - 4 >> 2] = 1;
     HEAP32[$4 - 8 >> 2] = $3 + 1;
     HEAP32[$4 - 12 >> 2] = 1;
     HEAP32[$4 - 16 >> 2] = $3;
     $4 = $4 + 32 | 0;
     $3 = $3 + 4 | 0;
     if (($6 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$2) {
    break label$13
   }
   $4 = $5 + ($3 << 3) | 0;
   while (1) {
    HEAP32[$4 >> 2] = $3;
    HEAP32[$4 + 4 >> 2] = 1;
    $4 = $4 + 8 | 0;
    $3 = $3 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  $4 = 0;
  $1 = HEAP32[$1 + 96 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
  $5 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
  label$14 : {
   if (!$5) {
    break label$14
   }
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1) | 0;
   if (($5 | 0) <= 0) {
    break label$14
   }
   $0 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $1 = ($4 << 4) + $7 | 0;
    $2 = HEAP32[HEAP32[$1 >> 2] >> 2];
    label$35 : {
     if (!$2 | HEAPU8[$2 + 392 | 0] & 7) {
      break label$35
     }
     $1 = HEAP32[HEAP32[$1 + 4 >> 2] >> 2];
     if (!$1 | HEAPU8[$1 + 392 | 0] & 7) {
      break label$35
     }
     $1 = HEAP32[$1 + 396 >> 2];
     $6 = HEAP32[$2 + 396 >> 2];
     $3 = $0 + ($6 << 3) | 0;
     $2 = HEAP32[$3 >> 2];
     if (($2 | 0) != ($6 | 0)) {
      while (1) {
       $2 = $0 + ($2 << 3) | 0;
       HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
       $6 = HEAP32[$2 >> 2];
       $3 = $0 + ($6 << 3) | 0;
       $2 = HEAP32[$3 >> 2];
       if (($2 | 0) != ($6 | 0)) {
        continue
       }
       break;
      }
     }
     $3 = $0 + ($1 << 3) | 0;
     $2 = HEAP32[$3 >> 2];
     if (($1 | 0) != ($2 | 0)) {
      while (1) {
       $1 = $0 + ($2 << 3) | 0;
       HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
       $1 = HEAP32[$1 >> 2];
       $3 = $0 + ($1 << 3) | 0;
       $2 = HEAP32[$3 >> 2];
       if (($1 | 0) != ($2 | 0)) {
        continue
       }
       break;
      }
     }
     if (($1 | 0) == ($6 | 0)) {
      break label$35
     }
     $2 = $0 + ($6 << 3) | 0;
     HEAP32[$2 >> 2] = $1;
     $1 = $0 + ($1 << 3) | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($5 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btSimulationIslandManager__storeIslandActivationState_28btCollisionWorld__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = HEAP32[$1 + 8 >> 2];
  if (($7 | 0) > 0) {
   $3 = HEAP32[$0 + 16 >> 2];
   $9 = HEAP32[$1 + 16 >> 2];
   $0 = 0;
   while (1) {
    $2 = HEAP32[($4 << 2) + $9 >> 2];
    label$3 : {
     if (!(HEAPU8[$2 + 392 | 0] & 3)) {
      $1 = $0;
      $8 = $1 << 3;
      $5 = $3 + $8 | 0;
      $6 = HEAP32[$5 >> 2];
      if (($1 | 0) != ($6 | 0)) {
       while (1) {
        $1 = $3 + ($6 << 3) | 0;
        HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
        $1 = HEAP32[$1 >> 2];
        $5 = $3 + ($1 << 3) | 0;
        $6 = HEAP32[$5 >> 2];
        if (($1 | 0) != ($6 | 0)) {
         continue
        }
        break;
       }
      }
      HEAP32[$2 + 396 >> 2] = $1;
      HEAP32[$2 + 400 >> 2] = -1;
      HEAP32[($3 + $8 | 0) + 4 >> 2] = $4;
      $0 = $0 + 1 | 0;
      break label$3;
     }
     HEAP32[$2 + 396 >> 2] = -1;
     HEAP32[$2 + 400 >> 2] = -2;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  while (1) {
   $12 = $2;
   $5 = HEAP32[$0 + 12 >> 2];
   $11 = HEAP32[$5 + (($2 + $3 | 0) / 2 << 2) >> 2];
   $4 = $3;
   while (1) {
    $10 = HEAP32[HEAP32[$11 + 1448 >> 2] + 396 >> 2];
    $6 = ($10 | 0) < 0;
    label$3 : {
     if (!$6) {
      $7 = $2 - 1 | 0;
      $8 = (($2 << 2) + $5 | 0) - 4 | 0;
      while (1) {
       $7 = $7 + 1 | 0;
       $8 = $8 + 4 | 0;
       $9 = HEAP32[$8 >> 2];
       $2 = HEAP32[HEAP32[$9 + 1448 >> 2] + 396 >> 2];
       if (($2 | 0) < 0) {
        $2 = HEAP32[HEAP32[$9 + 1452 >> 2] + 396 >> 2]
       }
       if (($2 | 0) < ($10 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     $7 = $2 - 1 | 0;
     $8 = (($2 << 2) + $5 | 0) - 4 | 0;
     $13 = HEAP32[HEAP32[$11 + 1452 >> 2] + 396 >> 2];
     while (1) {
      $7 = $7 + 1 | 0;
      $8 = $8 + 4 | 0;
      $9 = HEAP32[$8 >> 2];
      $2 = HEAP32[HEAP32[$9 + 1448 >> 2] + 396 >> 2];
      if (($2 | 0) < 0) {
       $2 = HEAP32[HEAP32[$9 + 1452 >> 2] + 396 >> 2]
      }
      if (($2 | 0) < ($13 | 0)) {
       continue
      }
      break;
     };
    }
    label$9 : {
     if (!$6) {
      $2 = $4 + 1 | 0;
      $6 = ($4 << 2) + $5 | 0;
      while (1) {
       $5 = HEAP32[$6 >> 2];
       $4 = HEAP32[HEAP32[$5 + 1448 >> 2] + 396 >> 2];
       if (($4 | 0) < 0) {
        $4 = HEAP32[HEAP32[$5 + 1452 >> 2] + 396 >> 2]
       }
       $6 = $6 - 4 | 0;
       $2 = $2 - 1 | 0;
       if (($4 | 0) > ($10 | 0)) {
        continue
       }
       break;
      };
      break label$9;
     }
     $2 = $4 + 1 | 0;
     $6 = ($4 << 2) + $5 | 0;
     $10 = HEAP32[HEAP32[$11 + 1452 >> 2] + 396 >> 2];
     while (1) {
      $5 = HEAP32[$6 >> 2];
      $4 = HEAP32[HEAP32[$5 + 1448 >> 2] + 396 >> 2];
      if (($4 | 0) < 0) {
       $4 = HEAP32[HEAP32[$5 + 1452 >> 2] + 396 >> 2]
      }
      $6 = $6 - 4 | 0;
      $2 = $2 - 1 | 0;
      if (($4 | 0) > ($10 | 0)) {
       continue
      }
      break;
     };
    }
    label$15 : {
     if (($2 | 0) < ($7 | 0)) {
      $4 = $2;
      $2 = $7;
      break label$15;
     }
     HEAP32[$8 >> 2] = $5;
     HEAP32[HEAP32[$0 + 12 >> 2] + ($2 << 2) >> 2] = $9;
     $4 = $2 - 1 | 0;
     $2 = $7 + 1 | 0;
    }
    if (($2 | 0) <= ($4 | 0)) {
     $5 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($4 | 0) > ($12 | 0)) {
    void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $12, $4)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function fmod($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  wasm2js_scratch_store_f64(6.283185307179586);
  $8 = wasm2js_scratch_load_i32(1) | 0;
  label$1 : {
   $5 = wasm2js_scratch_load_i32(0) | 0;
   $3 = $5 << 1;
   $2 = $8 << 1 | $5 >>> 31;
   if ($3 | $2) {
    wasm2js_scratch_store_f64(+$0);
    $9 = wasm2js_scratch_load_i32(1) | 0;
    $1 = wasm2js_scratch_load_i32(0) | 0;
    $6 = $9 >>> 20 & 2047;
    if (($6 | 0) != 2047) {
     break label$1
    }
   }
   $0 = $0 * 6.283185307179586;
   return $0 / $0;
  }
  $4 = $9 << 1 | $1 >>> 31;
  $7 = $1 << 1;
  if (!(($4 | 0) == ($2 | 0) & $7 >>> 0 > $3 >>> 0 | $2 >>> 0 < $4 >>> 0)) {
   return ($3 | 0) == ($7 | 0) & ($2 | 0) == ($4 | 0) ? $0 * 0.0 : $0
  }
  $7 = $8 >>> 20 & 2047;
  label$4 : {
   if (!$6) {
    $6 = 0;
    $2 = $1 << 12;
    $3 = $9 << 12 | $1 >>> 20;
    if (($3 | 0) >= 0) {
     while (1) {
      $6 = $6 - 1 | 0;
      $3 = $3 << 1 | $2 >>> 31;
      $2 = $2 << 1;
      if (($3 | 0) >= 0) {
       continue
      }
      break;
     }
    }
    $3 = $1;
    $1 = 1 - $6 | 0;
    $2 = $1 & 31;
    if (($1 & 63) >>> 0 >= 32) {
     $1 = $3 << $2;
     $2 = 0;
    } else {
     $1 = (1 << $2) - 1 & $3 >>> 32 - $2 | $9 << $2;
     $2 = $3 << $2;
    }
    break label$4;
   }
   $2 = $1;
   $1 = $9 & 1048575 | 1048576;
  }
  $3 = $1;
  label$8 : {
   if (!$7) {
    $7 = 0;
    $4 = $5 << 12;
    $1 = $8 << 12 | $5 >>> 20;
    if (($1 | 0) >= 0) {
     while (1) {
      $7 = $7 - 1 | 0;
      $1 = $1 << 1 | $4 >>> 31;
      $4 = $4 << 1;
      if (($1 | 0) >= 0) {
       continue
      }
      break;
     }
    }
    $1 = 1 - $7 | 0;
    $4 = $1 & 31;
    if (($1 & 63) >>> 0 >= 32) {
     $1 = $5 << $4;
     $4 = 0;
    } else {
     $1 = (1 << $4) - 1 & $5 >>> 32 - $4 | $8 << $4;
     $4 = $5 << $4;
    }
    $5 = $4;
    break label$8;
   }
   $1 = $8 & 1048575 | 1048576;
  }
  $8 = $1;
  if (($6 | 0) > ($7 | 0)) {
   while (1) {
    $1 = $2 - $5 | 0;
    label$14 : {
     $4 = $3 - (($2 >>> 0 < $5 >>> 0) + $8 | 0) | 0;
     if (($4 | 0) < 0) {
      break label$14
     }
     $2 = $1;
     $3 = $4;
     if ($2 | $3) {
      break label$14
     }
     return $0 * 0.0;
    }
    $3 = $3 << 1 | $2 >>> 31;
    $2 = $2 << 1;
    $6 = $6 - 1 | 0;
    if (($7 | 0) < ($6 | 0)) {
     continue
    }
    break;
   };
   $6 = $7;
  }
  $1 = $2 - $5 | 0;
  label$15 : {
   $4 = $3 - (($2 >>> 0 < $5 >>> 0) + $8 | 0) | 0;
   if (($4 | 0) < 0) {
    break label$15
   }
   $2 = $1;
   $3 = $4;
   if ($2 | $3) {
    break label$15
   }
   return $0 * 0.0;
  }
  label$16 : {
   if (!(($3 | 0) == 1048575 | $3 >>> 0 < 1048575)) {
    $4 = $2;
    $1 = $3;
    break label$16;
   }
   while (1) {
    $6 = $6 - 1 | 0;
    $5 = $3 >>> 0 < 524288;
    $1 = $3 << 1 | $2 >>> 31;
    $4 = $2 << 1;
    $2 = $4;
    $3 = $1;
    if ($5) {
     continue
    }
    break;
   };
  }
  $5 = $9 & -2147483648;
  label$19 : {
   if (($6 | 0) > 0) {
    $1 = $1 + -1048576 | $6 << 20;
    break label$19;
   }
   $3 = $1;
   $1 = 1 - $6 | 0;
   $2 = $1 & 31;
   if (($1 & 63) >>> 0 >= 32) {
    $1 = 0;
    $4 = $3 >>> $2 | 0;
   } else {
    $1 = $3 >>> $2 | 0;
    $4 = ((1 << $2) - 1 & $3) << 32 - $2 | $4 >>> $2;
   }
  }
  wasm2js_scratch_store_i32(0, $4 | 0);
  wasm2js_scratch_store_i32(1, $1 | $5);
  return +wasm2js_scratch_load_f64();
 }
 
 function btTypedConstraint__getMotorFactor_28double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  var $5 = 0.0;
  $5 = 1.0;
  label$1 : {
   if ($1 > $2) {
    break label$1
   }
   $5 = 0.0;
   if ($1 == $2) {
    break label$1
   }
   $3 = $3 / $4;
   if ($3 < 0.0) {
    if (!(!($0 >= $1) | !($1 - $3 > $0))) {
     return ($1 - $0) / $3
    }
    return $0 < $1 ? 0.0 : 1.0;
   }
   if (!($3 > 0.0)) {
    break label$1
   }
   if (!(!($0 <= $2) | !($2 - $3 < $0))) {
    return ($2 - $0) / $3
   }
   $5 = $0 > $2 ? 0.0 : 1.0;
  }
  return $5;
 }
 
 function btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 32 >> 2]) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 36 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0;
  HEAP32[$1 + 8 >> 2] = $4;
  if ($4) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $3)
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAPU8[$0 + 25 | 0];
  HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAPF64[$1 + 56 >> 3] = HEAPF64[$0 + 16 >> 3];
  HEAP32[$1 + 64 >> 2] = HEAPU8[$0 + 24 | 0];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAPF64[$1 + 40 >> 3] = HEAPF64[$0 + 48 >> 3];
  $4 = 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAPF64[$1 + 32 >> 3] = HEAPF64[$0 + 40 >> 3];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
  $3 = HEAP32[$0 + 32 >> 2];
  $2 = HEAP32[$3 + 1016 >> 2];
  label$2 : {
   if (($2 | 0) <= 0) {
    break label$2
   }
   $5 = $2 & 3;
   $3 = HEAP32[$3 + 1024 >> 2];
   if ($2 - 1 >>> 0 >= 3) {
    $6 = $2 & -4;
    $2 = $3;
    while (1) {
     if (($0 | 0) == HEAP32[$2 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     if (($0 | 0) == HEAP32[$2 + 4 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     if (($0 | 0) == HEAP32[$2 + 8 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     if (($0 | 0) == HEAP32[$2 + 12 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     $2 = $2 + 16 | 0;
     $4 = $4 + 4 | 0;
     if (($6 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$5) {
    break label$2
   }
   $2 = $3 + ($4 << 2) | 0;
   while (1) {
    if (($0 | 0) == HEAP32[$2 >> 2]) {
     HEAP32[$1 + 48 >> 2] = 1
    }
    $2 = $2 + 4 | 0;
    $5 = $5 - 1 | 0;
    if ($5) {
     continue
    }
    break;
   };
  }
  $3 = HEAP32[$0 + 36 >> 2];
  $2 = HEAP32[$3 + 1016 >> 2];
  label$11 : {
   if (($2 | 0) <= 0) {
    break label$11
   }
   $5 = $2 & 3;
   $3 = HEAP32[$3 + 1024 >> 2];
   $4 = 0;
   if ($2 - 1 >>> 0 >= 3) {
    $6 = $2 & -4;
    $2 = $3;
    while (1) {
     if (($0 | 0) == HEAP32[$2 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     if (($0 | 0) == HEAP32[$2 + 4 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     if (($0 | 0) == HEAP32[$2 + 8 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     if (($0 | 0) == HEAP32[$2 + 12 >> 2]) {
      HEAP32[$1 + 48 >> 2] = 1
     }
     $2 = $2 + 16 | 0;
     $4 = $4 + 4 | 0;
     if (($6 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
   }
   if (!$5) {
    break label$11
   }
   $2 = $3 + ($4 << 2) | 0;
   while (1) {
    if (($0 | 0) == HEAP32[$2 >> 2]) {
     HEAP32[$1 + 48 >> 2] = 1
    }
    $2 = $2 + 4 | 0;
    $5 = $5 - 1 | 0;
    if ($5) {
     continue
    }
    break;
   };
  }
  return 3964;
 }
 
 function btTypedConstraint___btTypedConstraint_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 28240;
  return $0 | 0;
 }
 
 function btTypedConstraint__setupSolverConstraint_28btAlignedObjectArray_btSolverConstraint___2c_20int_2c_20int_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
 }
 
 function btTypedConstraint__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 72;
 }
 
 function btConeTwistConstraint__GetPointForAngle_28double_2c_20double_29_20const($0, $1, $2, $3) {
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  $5 = cos($2);
  $4 = HEAPF64[$1 + 856 >> 3];
  $2 = sin($2);
  label$1 : {
   if (!(Math_abs($5) > 2.220446049250313e-16)) {
    $7 = $5 * $5;
    break label$1;
   }
   $7 = $5 * $5;
   $6 = $2 * $2 / $7;
   $8 = $6 / ($4 * $4);
   $4 = HEAPF64[$1 + 864 >> 3];
   $4 = Math_sqrt(($6 + 1.0) / ($8 + 1.0 / ($4 * $4)));
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  $4 = $4 * .5;
  $6 = sin($4) / Math_sqrt($2 * $2 + ($7 + 0.0));
  $2 = $6 * -$2;
  $4 = cos($4);
  $8 = $4 * 0.0;
  $7 = $6 * 0.0;
  $9 = $7 * 0.0;
  $10 = $8 + $2 * $3 - $9;
  $5 = $5 * $6;
  $6 = $8 + $9 - $5 * $3;
  $9 = $2 * -0.0;
  $8 = $9 + ($5 * -0.0 - $7 * $3);
  $3 = $9 + ($4 * $3 + $5 * 0.0);
  HEAPF64[$0 + 16 >> 3] = $10 * $7 + ($4 * $6 - $8 * $2 - $3 * $5);
  HEAPF64[$0 + 8 >> 3] = $3 * $2 + ($4 * $10 - $8 * $5 - $6 * $7);
  HEAPF64[$0 >> 3] = $6 * $5 + ($4 * $3 - $8 * $7 - $10 * $2);
 }
 
 function asin($0) {
  var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0;
  wasm2js_scratch_store_f64(+$0);
  $5 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $5 & 2147483647;
  if ($2 >>> 0 >= 1072693248) {
   if (!($4 | $2 - 1072693248)) {
    return $0 * 1.5707963267948966 + 7.52316384526264e-37
   }
   return 0.0 / ($0 - $0);
  }
  label$3 : {
   if ($2 >>> 0 <= 1071644671) {
    if ($2 + -1048576 >>> 0 < 1044381696) {
     break label$3
    }
    $1 = $0 * $0;
    return $0 * ($1 * ($1 * ($1 * ($1 * ($1 * ($1 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($1 * ($1 * ($1 * ($1 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0)) + $0;
   }
   $0 = (1.0 - Math_abs($0)) * .5;
   $6 = $0 * ($0 * ($0 * ($0 * ($0 * ($0 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0 * ($0 * ($0 * ($0 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0);
   $1 = Math_sqrt($0);
   label$5 : {
    if ($2 >>> 0 >= 1072640819) {
     $0 = $1 * $6 + $1;
     $0 = 1.5707963267948966 - ($0 + $0 + -6.123233995736766e-17);
     break label$5;
    }
    wasm2js_scratch_store_f64(+$1);
    $4 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    wasm2js_scratch_store_i32(0, 0);
    wasm2js_scratch_store_i32(1, $4 | 0);
    $3 = $0;
    $0 = +wasm2js_scratch_load_f64();
    $3 = ($3 - $0 * $0) / ($1 + $0);
    $0 = .7853981633974483 - ($0 + $0) - (($1 + $1) * $6 - (6.123233995736766e-17 - ($3 + $3))) + .7853981633974483;
   }
   $0 = ($5 | 0) < 0 ? -$0 : $0;
  }
  return $0;
 }
 
 function btGeneric6DofConstraint__getAngle_28int_29_20const($0, $1) {
  return HEAPF64[(($1 << 3) + $0 | 0) + 2344 >> 3];
 }
 
 function btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28360;
  if (HEAPU8[$0 + 432 | 0]) {
   $1 = HEAP32[$0 + 340 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 340 >> 2]);
  }
  $1 = HEAP32[$0 + 332 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 332 >> 2]);
  }
  if (HEAPU8[$0 + 433 | 0]) {
   $1 = HEAP32[$0 + 336 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 336 >> 2]);
  }
  $1 = HEAP32[$0 + 476 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 480 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 476 >> 2] = 0;
  HEAP8[$0 + 480 | 0] = 1;
  $1 = $0 + 468 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 448 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 452 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 448 >> 2] = 0;
  HEAP8[$0 + 452 | 0] = 1;
  $1 = $0 + 440 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 376 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 380 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 376 >> 2] = 0;
  HEAP8[$0 + 380 | 0] = 1;
  $1 = $0 + 368 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 356 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 360 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 356 >> 2] = 0;
  HEAP8[$0 + 360 | 0] = 1;
  $1 = $0 + 348 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 324 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 328 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 324 >> 2] = 0;
  HEAP8[$0 + 328 | 0] = 1;
  $1 = $0 + 316 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCollisionWorld___btCollisionWorld_28_29($0);
  return $0 | 0;
 }
 
 function btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29($0));
 }
 
 function btDiscreteDynamicsWorld__saveKinematicState_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0;
  $3 = HEAP32[$0 + 8 >> 2];
  if (($3 | 0) > 0) {
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 16 >> 2] + $20 >> 2];
    if (!(!(HEAPU8[$2 + 472 | 0] & 2) | !$2 | (!(HEAPU8[$2 + 392 | 0] & 2) | HEAP32[$2 + 408 >> 2] == 2))) {
     $6 = __stack_pointer - 48 | 0;
     __stack_pointer = $6;
     if ($1 != 0.0) {
      $3 = HEAP32[$2 + 1008 >> 2];
      if ($3) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $2 + 8 | 0)
      }
      $8 = $2 + 696 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $10 = $2 + 688 | 0;
      $7 = 1.0 / $1;
      $11 = $2 + 120 | 0;
      $12 = $2 + 248 | 0;
      HEAPF64[$10 >> 3] = $7 * (HEAPF64[$11 >> 3] - HEAPF64[$12 >> 3]);
      $13 = $2 + 680 | 0;
      $14 = $2 + 112 | 0;
      $15 = $2 + 240 | 0;
      HEAPF64[$13 >> 3] = $7 * (HEAPF64[$14 >> 3] - HEAPF64[$15 >> 3]);
      $16 = $2 + 104 | 0;
      $17 = $2 + 232 | 0;
      HEAPF64[$2 + 672 >> 3] = $7 * (HEAPF64[$16 >> 3] - HEAPF64[$17 >> 3]);
      btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20double__29($2 + 136 | 0, $2 + 8 | 0, $6 + 16 | 0, $6 + 8 | 0);
      $9 = $2 + 728 | 0;
      HEAP32[$9 >> 2] = 0;
      HEAP32[$9 + 4 >> 2] = 0;
      $18 = $2 + 720 | 0;
      $19 = HEAPF64[$6 + 8 >> 3];
      HEAPF64[$18 >> 3] = $7 * ($19 * HEAPF64[$6 + 32 >> 3]);
      $4 = $2 + 712 | 0;
      HEAPF64[$4 >> 3] = $7 * ($19 * HEAPF64[$6 + 24 >> 3]);
      HEAPF64[$2 + 704 >> 3] = $7 * ($19 * HEAPF64[$6 + 16 >> 3]);
      $5 = HEAP32[$8 + 4 >> 2];
      $3 = $2 + 288 | 0;
      HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $5 = HEAP32[$10 + 4 >> 2];
      $3 = $2 + 280 | 0;
      HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $5 = HEAP32[$13 + 4 >> 2];
      $3 = $2 + 272 | 0;
      HEAP32[$3 >> 2] = HEAP32[$13 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $3 = HEAP32[$2 + 676 >> 2];
      HEAP32[$2 + 264 >> 2] = HEAP32[$2 + 672 >> 2];
      HEAP32[$2 + 268 >> 2] = $3;
      $3 = HEAP32[$2 + 708 >> 2];
      HEAP32[$2 + 296 >> 2] = HEAP32[$2 + 704 >> 2];
      HEAP32[$2 + 300 >> 2] = $3;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 304 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $5 = HEAP32[$18 + 4 >> 2];
      $3 = $2 + 312 | 0;
      HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $5 = HEAP32[$9 + 4 >> 2];
      $3 = $2 + 320 | 0;
      HEAP32[$3 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $3 = HEAP32[$2 + 12 >> 2];
      HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$2 + 140 >> 2] = $3;
      $4 = $2 + 16 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 144 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 24 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 152 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 32 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 160 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 - -64 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 192 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 56 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 184 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 48 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 176 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 40 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 168 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 96 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 224 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 88 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 216 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 80 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 208 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $4 = $2 + 72 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + 200 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $5 = $2 + 256 | 0;
      $3 = $2 + 128 | 0;
      $2 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $2;
      $2 = HEAP32[$14 + 4 >> 2];
      HEAP32[$15 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$15 + 4 >> 2] = $2;
      $2 = HEAP32[$16 + 4 >> 2];
      HEAP32[$17 >> 2] = HEAP32[$16 >> 2];
      HEAP32[$17 + 4 >> 2] = $2;
      $2 = HEAP32[$11 + 4 >> 2];
      HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
      HEAP32[$12 + 4 >> 2] = $2;
     }
     __stack_pointer = $6 + 48 | 0;
     $3 = HEAP32[$0 + 8 >> 2];
    }
    $20 = $20 + 4 | 0;
    $21 = $21 + 1 | 0;
    if (($21 | 0) < ($3 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btDiscreteDynamicsWorld__debugDrawWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 3615);
  btCollisionWorld__debugDrawWorld_28_29($0);
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0)) {
    break label$1
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 6144)) {
    break label$1
   }
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0) | 0;
   if (($2 | 0) <= 0) {
    break label$1
   }
   $1 = $2;
   if ($1 & 1) {
    $1 = $2 - 1 | 0;
    ((wasm2js_i32$1 = $0, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0, $1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 176 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   if (($2 | 0) == 1) {
    break label$1
   }
   $2 = $1 - 2 | 0;
   while (1) {
    $1 = $2 + 1 | 0;
    ((wasm2js_i32$2 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0, $1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 176 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    ((wasm2js_i32$1 = $0, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0, $2) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 176 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    $2 = $2 - 2 | 0;
    if ($1 >>> 0 > 1) {
     continue
    }
    break;
   };
  }
  label$4 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0)) {
    break label$4
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 16387)) {
    break label$4
   }
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0)) {
    break label$4
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) | 0) | HEAP32[$0 + 440 >> 2] <= 0) {
    break label$4
   }
   $2 = 0;
   $1 = 0;
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 448 >> 2] + $2 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$0 + 100 >> 2]);
    $2 = $2 + 4 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) < HEAP32[$0 + 440 >> 2]) {
     continue
    }
    break;
   };
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0) {
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0);
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $3 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__clearForces_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if (HEAP32[$0 + 368 >> 2] > 0) {
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 376 >> 2] + $3 >> 2];
    HEAP32[$2 + 872 >> 2] = 0;
    HEAP32[$2 + 876 >> 2] = 0;
    $1 = $2 + 928 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $2 + 920 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $2 + 912 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $2 + 904 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $2 + 896 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $2 + 888 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $2 = $2 + 880 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $3 = $3 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < HEAP32[$0 + 368 >> 2]) {
     continue
    }
    break;
   }
  }
 }
 
 function btDiscreteDynamicsWorld__applyGravity_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$0 + 368 >> 2];
  if (($2 | 0) > 0) {
   while (1) {
    label$3 : {
     label$4 : {
      $1 = HEAP32[HEAP32[$0 + 376 >> 2] + $3 >> 2];
      switch (HEAP32[$1 + 408 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (!(HEAPU8[$1 + 392 | 0] & 3)) {
      HEAPF64[$1 + 872 >> 3] = HEAPF64[$1 + 776 >> 3] * HEAPF64[$1 + 744 >> 3] + HEAPF64[$1 + 872 >> 3];
      $2 = $1 + 880 | 0;
      HEAPF64[$2 >> 3] = HEAPF64[$1 + 784 >> 3] * HEAPF64[$1 + 752 >> 3] + HEAPF64[$2 >> 3];
      $2 = $1 + 888 | 0;
      HEAPF64[$2 >> 3] = HEAPF64[$1 + 792 >> 3] * HEAPF64[$1 + 760 >> 3] + HEAPF64[$2 >> 3];
     }
     $2 = HEAP32[$0 + 368 >> 2];
    }
    $3 = $3 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($2 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btDiscreteDynamicsWorld__synchronizeMotionStates_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  label$1 : {
   if (HEAPU8[$0 + 434 | 0]) {
    $2 = HEAP32[$0 + 8 >> 2];
    if (($2 | 0) <= 0) {
     break label$1
    }
    while (1) {
     $1 = HEAP32[HEAP32[$0 + 16 >> 2] + $5 >> 2];
     if (!(!(HEAPU8[$1 + 472 | 0] & 2) | !$1 | (!HEAP32[$1 + 1008 >> 2] | HEAPU8[$1 + 392 | 0] & 3))) {
      $2 = $1 + 136 | 0;
      $7 = $1 + 264 | 0;
      $8 = $1 + 296 | 0;
      label$5 : {
       label$6 : {
        if (!HEAPU8[$0 + 460 | 0]) {
         break label$6
        }
        $3 = HEAPF64[$0 + 424 >> 3];
        if ($3 == 0.0) {
         break label$6
        }
        $3 = HEAPF64[$0 + 416 >> 3] - $3;
        break label$5;
       }
       $3 = HEAPF64[$0 + 416 >> 3] * HEAPF64[$1 + 488 >> 3];
      }
      btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btTransform__29($2, $7, $8, $3, $4);
      $1 = HEAP32[$1 + 1008 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $4);
      $2 = HEAP32[$0 + 8 >> 2];
     }
     $5 = $5 + 4 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) < ($2 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $2 = HEAP32[$0 + 368 >> 2];
   if (($2 | 0) <= 0) {
    break label$1
   }
   while (1) {
    label$8 : {
     label$9 : {
      $1 = HEAP32[HEAP32[$0 + 376 >> 2] + $6 >> 2];
      switch (HEAP32[$1 + 408 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$8;
      default:
       break label$9;
      };
     }
     if (!HEAP32[$1 + 1008 >> 2] | HEAPU8[$1 + 392 | 0] & 3) {
      break label$8
     }
     $2 = $1 + 136 | 0;
     $7 = $1 + 264 | 0;
     $8 = $1 + 296 | 0;
     label$10 : {
      label$11 : {
       if (!HEAPU8[$0 + 460 | 0]) {
        break label$11
       }
       $3 = HEAPF64[$0 + 424 >> 3];
       if ($3 == 0.0) {
        break label$11
       }
       $3 = HEAPF64[$0 + 416 >> 3] - $3;
       break label$10;
      }
      $3 = HEAPF64[$0 + 416 >> 3] * HEAPF64[$1 + 488 >> 3];
     }
     btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btTransform__29($2, $7, $8, $3, $4);
     $1 = HEAP32[$1 + 1008 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $4);
     $2 = HEAP32[$0 + 368 >> 2];
    }
    $6 = $6 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($2 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $4 + 128 | 0;
 }
 
 function btDiscreteDynamicsWorld__stepSimulation_28double_2c_20int_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($2) {
    HEAPF64[$0 + 424 >> 3] = $3;
    $1 = HEAPF64[$0 + 416 >> 3] + $1;
    HEAPF64[$0 + 416 >> 3] = $1;
    if (!($1 >= $3)) {
     break label$1
    }
    $6 = $1;
    $1 = $1 / $3;
    label$3 : {
     if (Math_abs($1) < 2147483648.0) {
      $4 = ~~$1;
      break label$3;
     }
     $4 = -2147483648;
    }
    HEAPF64[$0 + 416 >> 3] = $6 - +($4 | 0) * $3;
    break label$1;
   }
   HEAP32[$0 + 424 >> 2] = 0;
   HEAP32[$0 + 428 >> 2] = 0;
   HEAPF64[$0 + 416 >> 3] = HEAPU8[$0 + 460 | 0] ? 0.0 : $1;
   $3 = $1;
   $4 = !(Math_abs($1) < 2.220446049250313e-16);
   $2 = $4;
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0) {
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   (wasm2js_i32$0 = 33672, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 56 >> 2]]($5) >>> 4 & 1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  }
  label$6 : {
   if ($4) {
    $2 = ($2 | 0) < ($4 | 0) ? $2 : $4;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 172 >> 2]]($0, $3 * +($2 | 0));
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 180 >> 2]]($0);
    if (($2 | 0) <= 0) {
     break label$6
    }
    $5 = $2 & 1;
    if (($2 | 0) != 1) {
     $2 = $2 & -2;
     while (1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 164 >> 2]]($0, $3);
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0);
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 164 >> 2]]($0, $3);
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0);
      $2 = $2 - 2 | 0;
      if ($2) {
       continue
      }
      break;
     };
    }
    if (!$5) {
     break label$6
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 164 >> 2]]($0, $3);
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0);
    break label$6;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0);
  return $4 | 0;
 }
 
 function btDiscreteDynamicsWorld__internalSingleStepSimulation_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  CProfileSample__CProfileSample_28char_20const__29($3, 3392);
  $2 = HEAP32[$0 + 112 >> 2];
  if ($2) {
   FUNCTION_TABLE[$2 | 0]($0, $1)
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 144 >> 2]]($0, $1);
  $2 = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAPF64[$0 + 32 >> 3] = $1;
  (wasm2js_i32$0 = $0 + 60 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 168 >> 2]]($0, $1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 152 >> 2]]($0);
  HEAPF64[$0 + 144 >> 3] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 156 >> 2]]($0, $0 + 120 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 148 >> 2]]($0, $1);
  CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 3046);
  if (HEAP32[$0 + 440 >> 2] > 0) {
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 448 >> 2] + $2 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $0, $1);
    $2 = $2 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < HEAP32[$0 + 440 >> 2]) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 160 >> 2]]($0, $1);
  $2 = HEAP32[$0 + 108 >> 2];
  if ($2) {
   FUNCTION_TABLE[$2 | 0]($0, $1)
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $3 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__setGravity_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 384 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 388 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 408 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 400 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 392 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = HEAP32[$0 + 368 >> 2];
  if (($3 | 0) > 0) {
   $2 = 0;
   $4 = 0;
   while (1) {
    label$3 : {
     label$4 : {
      $5 = HEAP32[HEAP32[$0 + 376 >> 2] + $2 >> 2];
      switch (HEAP32[$5 + 408 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAP8[$5 + 1032 | 0] & 1) {
      break label$3
     }
     btRigidBody__setGravity_28btVector3_20const__29($5, $1);
     $3 = HEAP32[$0 + 368 >> 2];
    }
    $2 = $2 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btDiscreteDynamicsWorld__getGravity_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 388 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 + 384 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  $3 = $1 + 408 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 400 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 392 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btDiscreteDynamicsWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3);
 }
 
 function btDiscreteDynamicsWorld__removeCollisionObject_28btCollisionObject__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (!(!$1 | !(HEAP32[$1 + 472 >> 2] & 2))) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0, $1);
   return;
  }
  btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1);
 }
 
 function btDiscreteDynamicsWorld__removeRigidBody_28btRigidBody__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 368 >> 2];
  label$1 : {
   if (($2 | 0) <= 0) {
    break label$1
   }
   $5 = HEAP32[$0 + 376 >> 2];
   $3 = $5;
   while (1) {
    if (($1 | 0) != HEAP32[$3 >> 2]) {
     $3 = $3 + 4 | 0;
     $4 = $4 + 1 | 0;
     if (($2 | 0) != ($4 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) <= ($4 | 0)) {
    break label$1
   }
   $4 = $3;
   $3 = $2 - 1 | 0;
   $2 = $3 << 2;
   HEAP32[$4 >> 2] = HEAP32[$2 + $5 >> 2];
   HEAP32[$0 + 368 >> 2] = $3;
   HEAP32[$2 + HEAP32[$0 + 376 >> 2] >> 2] = $1;
  }
  btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1);
 }
 
 function btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if (!(HEAPU8[$1 + 392 | 0] & 3 | HEAP8[$1 + 1032 | 0] & 1)) {
   btRigidBody__setGravity_28btVector3_20const__29($1, $0 + 384 | 0)
  }
  if (HEAP32[$1 + 380 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1 + 392 | 0] & 1)) {
     $3 = HEAP32[$0 + 368 >> 2];
     label$5 : {
      if (($3 | 0) != HEAP32[$0 + 372 >> 2]) {
       break label$5
      }
      $4 = $3 ? $3 << 1 : 1;
      if (($4 | 0) <= ($3 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$4) {
        break label$6
       }
       $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
       $3 = HEAP32[$0 + 368 >> 2];
      }
      label$8 : {
       if (($3 | 0) <= 0) {
        break label$8
       }
       $5 = $3 & 3;
       if ($3 - 1 >>> 0 >= 3) {
        $9 = $3 & -4;
        while (1) {
         $6 = $2 + $7 | 0;
         HEAP32[$6 >> 2] = HEAP32[HEAP32[$0 + 376 >> 2] + $2 >> 2];
         HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$0 + 376 >> 2] + $2 | 0) + 4 >> 2];
         HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$0 + 376 >> 2] + $2 | 0) + 8 >> 2];
         HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$0 + 376 >> 2] + $2 | 0) + 12 >> 2];
         $2 = $2 + 16 | 0;
         $8 = $8 + 4 | 0;
         if (($9 | 0) != ($8 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$5) {
        break label$8
       }
       $2 = $8 << 2;
       while (1) {
        HEAP32[$2 + $7 >> 2] = HEAP32[HEAP32[$0 + 376 >> 2] + $2 >> 2];
        $2 = $2 + 4 | 0;
        $5 = $5 - 1 | 0;
        if ($5) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$0 + 376 >> 2];
      if (!(!$2 | !HEAPU8[$0 + 380 | 0])) {
       btAlignedFreeInternal_28void__29($2);
       $3 = HEAP32[$0 + 368 >> 2];
      }
      HEAP32[$0 + 376 >> 2] = $7;
      HEAP8[$0 + 380 | 0] = 1;
      HEAP32[$0 + 372 >> 2] = $4;
     }
     HEAP32[$0 + 368 >> 2] = $3 + 1;
     HEAP32[HEAP32[$0 + 376 >> 2] + ($3 << 2) >> 2] = $1;
     break label$3;
    }
    btCollisionObject__setActivationState_28int_29_20const($1, 2);
   }
   $2 = $1;
   $1 = HEAP32[$1 + 392 >> 2] & 3;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $2, $1 ? 2 : 1, $1 ? -3 : -1);
  }
 }
 
 function btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if (!(HEAPU8[$1 + 392 | 0] & 3 | HEAP8[$1 + 1032 | 0] & 1)) {
   btRigidBody__setGravity_28btVector3_20const__29($1, $0 + 384 | 0)
  }
  if (HEAP32[$1 + 380 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1 + 392 | 0] & 1)) {
     $5 = HEAP32[$0 + 368 >> 2];
     label$5 : {
      if (($5 | 0) != HEAP32[$0 + 372 >> 2]) {
       break label$5
      }
      $6 = $5 ? $5 << 1 : 1;
      if (($6 | 0) <= ($5 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$6) {
        break label$6
       }
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
       $5 = HEAP32[$0 + 368 >> 2];
      }
      label$8 : {
       if (($5 | 0) <= 0) {
        break label$8
       }
       $7 = $5 & 3;
       if ($5 - 1 >>> 0 >= 3) {
        $11 = $5 & -4;
        while (1) {
         $8 = $4 + $9 | 0;
         HEAP32[$8 >> 2] = HEAP32[HEAP32[$0 + 376 >> 2] + $4 >> 2];
         HEAP32[$8 + 4 >> 2] = HEAP32[(HEAP32[$0 + 376 >> 2] + $4 | 0) + 4 >> 2];
         HEAP32[$8 + 8 >> 2] = HEAP32[(HEAP32[$0 + 376 >> 2] + $4 | 0) + 8 >> 2];
         HEAP32[$8 + 12 >> 2] = HEAP32[(HEAP32[$0 + 376 >> 2] + $4 | 0) + 12 >> 2];
         $4 = $4 + 16 | 0;
         $10 = $10 + 4 | 0;
         if (($11 | 0) != ($10 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$7) {
        break label$8
       }
       $4 = $10 << 2;
       while (1) {
        HEAP32[$4 + $9 >> 2] = HEAP32[HEAP32[$0 + 376 >> 2] + $4 >> 2];
        $4 = $4 + 4 | 0;
        $7 = $7 - 1 | 0;
        if ($7) {
         continue
        }
        break;
       };
      }
      $4 = HEAP32[$0 + 376 >> 2];
      if (!(!$4 | !HEAPU8[$0 + 380 | 0])) {
       btAlignedFreeInternal_28void__29($4);
       $5 = HEAP32[$0 + 368 >> 2];
      }
      HEAP32[$0 + 376 >> 2] = $9;
      HEAP8[$0 + 380 | 0] = 1;
      HEAP32[$0 + 372 >> 2] = $6;
     }
     HEAP32[$0 + 368 >> 2] = $5 + 1;
     HEAP32[HEAP32[$0 + 376 >> 2] + ($5 << 2) >> 2] = $1;
     break label$3;
    }
    btCollisionObject__setActivationState_28int_29_20const($1, 2);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1, $2, $3);
  }
 }
 
 function btDiscreteDynamicsWorld__updateActivationState_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  CProfileSample__CProfileSample_28char_20const__29($6 + 8 | 0, 3513);
  if (HEAP32[$0 + 368 >> 2] > 0) {
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 376 >> 2] + $8 >> 2];
    label$3 : {
     if (!$2) {
      break label$3
     }
     label$4 : {
      label$5 : {
       label$6 : {
        $4 = HEAP32[$2 + 408 >> 2];
        switch ($4 - 2 | 0) {
        case 0:
        case 2:
         break label$5;
        default:
         break label$6;
        };
       }
       label$7 : {
        $3 = HEAPF64[$2 + 688 >> 3];
        $5 = $3 * $3;
        $3 = HEAPF64[$2 + 672 >> 3];
        $7 = $3 * $3;
        $3 = HEAPF64[$2 + 680 >> 3];
        $5 = $5 + ($7 + $3 * $3);
        $3 = HEAPF64[$2 + 992 >> 3];
        if (!($5 < $3 * $3)) {
         break label$7
        }
        $3 = HEAPF64[$2 + 720 >> 3];
        $5 = $3 * $3;
        $3 = HEAPF64[$2 + 704 >> 3];
        $7 = $3 * $3;
        $3 = HEAPF64[$2 + 712 >> 3];
        $5 = $5 + ($7 + $3 * $3);
        $3 = HEAPF64[$2 + 1e3 >> 3];
        if (!($5 < $3 * $3)) {
         break label$7
        }
        HEAPF64[$2 + 416 >> 3] = HEAPF64[$2 + 416 >> 3] + $1;
        break label$4;
       }
       HEAP32[$2 + 416 >> 2] = 0;
       HEAP32[$2 + 420 >> 2] = 0;
       btCollisionObject__setActivationState_28int_29_20const($2, 0);
       $4 = HEAP32[$2 + 408 >> 2];
      }
      if (($4 | 0) == 4) {
       break label$3
      }
     }
     label$8 : {
      if (HEAPU8[33672]) {
       break label$8
      }
      $3 = HEAPF64[3850];
      if ($3 == 0.0 | ($3 < HEAPF64[$2 + 416 >> 3] ? 0 : ($4 & -2) != 2)) {
       break label$8
      }
      if (HEAPU8[$2 + 392 | 0] & 3) {
       btCollisionObject__setActivationState_28int_29_20const($2, 2);
       break label$3;
      }
      if (($4 | 0) == 1) {
       btCollisionObject__setActivationState_28int_29_20const($2, 3);
       $4 = HEAP32[$2 + 408 >> 2];
      }
      if (($4 | 0) != 2) {
       break label$3
      }
      HEAP32[$2 + 704 >> 2] = 0;
      HEAP32[$2 + 708 >> 2] = 0;
      HEAP32[$2 + 672 >> 2] = 0;
      HEAP32[$2 + 676 >> 2] = 0;
      $4 = $2 + 712 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $4 = $2 + 720 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $4 = $2 + 728 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $4 = $2 + 680 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $4 = $2 + 688 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $4 = $2 + 696 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$2 + 536 >> 2] = HEAP32[$2 + 536 >> 2] + 2;
      break label$3;
     }
     btCollisionObject__setActivationState_28int_29_20const($2, 1);
    }
    $8 = $8 + 4 | 0;
    $9 = $9 + 1 | 0;
    if (($9 | 0) < HEAP32[$0 + 368 >> 2]) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $6 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__addConstraint_28btTypedConstraint__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $4 = HEAP32[$0 + 348 >> 2];
  label$1 : {
   if (($4 | 0) != HEAP32[$0 + 352 >> 2]) {
    break label$1
   }
   $5 = $4 ? $4 << 1 : 1;
   if (($5 | 0) <= ($4 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$5) {
     break label$2
    }
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
    $4 = HEAP32[$0 + 348 >> 2];
   }
   label$4 : {
    if (($4 | 0) <= 0) {
     break label$4
    }
    $6 = $4 & 3;
    if ($4 - 1 >>> 0 >= 3) {
     $10 = $4 & -4;
     while (1) {
      $7 = $3 + $8 | 0;
      HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 356 >> 2] + $3 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[(HEAP32[$0 + 356 >> 2] + $3 | 0) + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[(HEAP32[$0 + 356 >> 2] + $3 | 0) + 8 >> 2];
      HEAP32[$7 + 12 >> 2] = HEAP32[(HEAP32[$0 + 356 >> 2] + $3 | 0) + 12 >> 2];
      $3 = $3 + 16 | 0;
      $9 = $9 + 4 | 0;
      if (($10 | 0) != ($9 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$6) {
     break label$4
    }
    $3 = $9 << 2;
    while (1) {
     HEAP32[$3 + $8 >> 2] = HEAP32[HEAP32[$0 + 356 >> 2] + $3 >> 2];
     $3 = $3 + 4 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 356 >> 2];
   if (!(!$3 | !HEAPU8[$0 + 360 | 0])) {
    btAlignedFreeInternal_28void__29($3);
    $4 = HEAP32[$0 + 348 >> 2];
   }
   HEAP32[$0 + 356 >> 2] = $8;
   HEAP8[$0 + 360 | 0] = 1;
   HEAP32[$0 + 352 >> 2] = $5;
  }
  HEAP32[$0 + 348 >> 2] = $4 + 1;
  HEAP32[HEAP32[$0 + 356 >> 2] + ($4 << 2) >> 2] = $1;
  if ($2) {
   btRigidBody__addConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 32 >> 2], $1);
   btRigidBody__addConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 36 >> 2], $1);
  }
 }
 
 function btDiscreteDynamicsWorld__removeConstraint_28btTypedConstraint__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 348 >> 2];
  label$1 : {
   if (($2 | 0) <= 0) {
    break label$1
   }
   $5 = HEAP32[$0 + 356 >> 2];
   $3 = $5;
   while (1) {
    if (($1 | 0) != HEAP32[$3 >> 2]) {
     $3 = $3 + 4 | 0;
     $4 = $4 + 1 | 0;
     if (($2 | 0) != ($4 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) <= ($4 | 0)) {
    break label$1
   }
   $4 = $3;
   $3 = $2 - 1 | 0;
   $2 = $3 << 2;
   HEAP32[$4 >> 2] = HEAP32[$2 + $5 >> 2];
   HEAP32[$0 + 348 >> 2] = $3;
   HEAP32[$2 + HEAP32[$0 + 356 >> 2] >> 2] = $1;
  }
  btRigidBody__removeConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 32 >> 2], $1);
  btRigidBody__removeConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 36 >> 2], $1);
 }
 
 function btDiscreteDynamicsWorld__addAction_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = HEAP32[$0 + 440 >> 2];
  label$1 : {
   if (($3 | 0) != HEAP32[$0 + 444 >> 2]) {
    break label$1
   }
   $4 = $3 ? $3 << 1 : 1;
   if (($4 | 0) <= ($3 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$4) {
     break label$2
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
    $3 = HEAP32[$0 + 440 >> 2];
   }
   label$4 : {
    if (($3 | 0) <= 0) {
     break label$4
    }
    $5 = $3 & 3;
    if ($3 - 1 >>> 0 >= 3) {
     $9 = $3 & -4;
     while (1) {
      $6 = $2 + $7 | 0;
      HEAP32[$6 >> 2] = HEAP32[HEAP32[$0 + 448 >> 2] + $2 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$0 + 448 >> 2] + $2 | 0) + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$0 + 448 >> 2] + $2 | 0) + 8 >> 2];
      HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$0 + 448 >> 2] + $2 | 0) + 12 >> 2];
      $2 = $2 + 16 | 0;
      $8 = $8 + 4 | 0;
      if (($9 | 0) != ($8 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$5) {
     break label$4
    }
    $2 = $8 << 2;
    while (1) {
     HEAP32[$2 + $7 >> 2] = HEAP32[HEAP32[$0 + 448 >> 2] + $2 >> 2];
     $2 = $2 + 4 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $2 = HEAP32[$0 + 448 >> 2];
   if (!(!$2 | !HEAPU8[$0 + 452 | 0])) {
    btAlignedFreeInternal_28void__29($2);
    $3 = HEAP32[$0 + 440 >> 2];
   }
   HEAP32[$0 + 448 >> 2] = $7;
   HEAP8[$0 + 452 | 0] = 1;
   HEAP32[$0 + 444 >> 2] = $4;
  }
  HEAP32[$0 + 440 >> 2] = $3 + 1;
  HEAP32[HEAP32[$0 + 448 >> 2] + ($3 << 2) >> 2] = $1;
 }
 
 function btDiscreteDynamicsWorld__removeAction_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   $2 = HEAP32[$0 + 440 >> 2];
   if (($2 | 0) <= 0) {
    break label$1
   }
   $5 = HEAP32[$0 + 448 >> 2];
   $3 = $5;
   while (1) {
    if (($1 | 0) != HEAP32[$3 >> 2]) {
     $3 = $3 + 4 | 0;
     $4 = $4 + 1 | 0;
     if (($2 | 0) != ($4 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) <= ($4 | 0)) {
    break label$1
   }
   $4 = $3;
   $3 = $2 - 1 | 0;
   $2 = $3 << 2;
   HEAP32[$4 >> 2] = HEAP32[$2 + $5 >> 2];
   HEAP32[$0 + 440 >> 2] = $3;
   HEAP32[$2 + HEAP32[$0 + 448 >> 2] >> 2] = $1;
  }
 }
 
 function btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld__solveConstraints_28btContactSolverInfo__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
  $21 = __stack_pointer - 16 | 0;
  __stack_pointer = $21;
  CProfileSample__CProfileSample_28char_20const__29($21 + 8 | 0, 2855);
  $4 = HEAP32[$0 + 348 >> 2];
  $3 = HEAP32[$0 + 316 >> 2];
  label$1 : {
   if (($4 | 0) <= ($3 | 0)) {
    break label$1
   }
   if (($4 | 0) > HEAP32[$0 + 320 >> 2]) {
    if ($4) {
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $2 = HEAP32[$0 + 316 >> 2];
    } else {
     $2 = $3
    }
    label$5 : {
     if (($2 | 0) <= 0) {
      break label$5
     }
     $5 = $2 & 3;
     if ($2 - 1 >>> 0 >= 3) {
      $6 = $2 & -4;
      $2 = 0;
      while (1) {
       $15 = $2 + $8 | 0;
       HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 324 >> 2] + $2 >> 2];
       HEAP32[$15 + 4 >> 2] = HEAP32[(HEAP32[$0 + 324 >> 2] + $2 | 0) + 4 >> 2];
       HEAP32[$15 + 8 >> 2] = HEAP32[(HEAP32[$0 + 324 >> 2] + $2 | 0) + 8 >> 2];
       HEAP32[$15 + 12 >> 2] = HEAP32[(HEAP32[$0 + 324 >> 2] + $2 | 0) + 12 >> 2];
       $2 = $2 + 16 | 0;
       $7 = $7 + 4 | 0;
       if (($6 | 0) != ($7 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$5
     }
     $2 = $7 << 2;
     while (1) {
      HEAP32[$2 + $8 >> 2] = HEAP32[HEAP32[$0 + 324 >> 2] + $2 >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 324 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 328 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$0 + 324 >> 2] = $8;
    HEAP8[$0 + 328 | 0] = 1;
    HEAP32[$0 + 320 >> 2] = $4;
   }
   $5 = ($3 ^ -1) + $4 | 0;
   $8 = $4 - $3 & 3;
   if ($8) {
    $2 = $3 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 324 >> 2] + $2 >> 2] = 0;
     $2 = $2 + 4 | 0;
     $3 = $3 + 1 | 0;
     $8 = $8 - 1 | 0;
     if ($8) {
      continue
     }
     break;
    };
   }
   if ($5 >>> 0 < 3) {
    break label$1
   }
   $2 = $3 << 2;
   $3 = $4 - $3 | 0;
   while (1) {
    HEAP32[HEAP32[$0 + 324 >> 2] + $2 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 324 >> 2] + $2 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 324 >> 2] + $2 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 324 >> 2] + $2 | 0) + 12 >> 2] = 0;
    $2 = $2 + 16 | 0;
    $3 = $3 - 4 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 316 >> 2] = $4;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0) | 0) > 0) {
   $2 = 0;
   $3 = 0;
   while (1) {
    HEAP32[HEAP32[$0 + 324 >> 2] + $2 >> 2] = HEAP32[HEAP32[$0 + 356 >> 2] + $2 >> 2];
    $2 = $2 + 4 | 0;
    $3 = $3 + 1 | 0;
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0) | 0) > ($3 | 0)) {
     continue
    }
    break;
   };
  }
  $3 = HEAP32[$0 + 316 >> 2];
  if (($3 | 0) >= 2) {
   void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0 + 312 | 0, $21, 0, $3 - 1 | 0)
  }
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0) | 0;
  $3 = $3 ? HEAP32[$0 + 324 >> 2] : 0;
  $2 = HEAP32[$0 + 316 >> 2];
  $4 = HEAP32[$0 + 332 >> 2];
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = $1;
  $2 = HEAP32[$4 + 32 >> 2];
  label$10 : {
   if (($2 | 0) >= 0) {
    break label$10
   }
   if (HEAP32[$4 + 36 >> 2] < 0) {
    $3 = HEAP32[$4 + 40 >> 2];
    if (!(!$3 | !HEAPU8[$4 + 44 | 0])) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP8[$4 + 44 | 0] = 1;
    HEAP32[$4 + 36 >> 2] = 0;
    HEAP32[$4 + 40 >> 2] = 0;
   }
   $3 = $2;
   $5 = 0 - $2 & 3;
   if ($5) {
    $8 = $2 << 2;
    while (1) {
     HEAP32[HEAP32[$4 + 40 >> 2] + $8 >> 2] = 0;
     $8 = $8 + 4 | 0;
     $3 = $3 + 1 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   if ($2 >>> 0 > 4294967292) {
    break label$10
   }
   $8 = $3 << 2;
   while (1) {
    HEAP32[HEAP32[$4 + 40 >> 2] + $8 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 40 >> 2] + $8 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 40 >> 2] + $8 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 40 >> 2] + $8 | 0) + 12 >> 2] = 0;
    $8 = $8 + 16 | 0;
    $3 = $3 + 4 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP32[$4 + 32 >> 2] = 0;
  $2 = HEAP32[$4 + 52 >> 2];
  label$72 : {
   if (($2 | 0) >= 0) {
    break label$72
   }
   if (HEAP32[$4 + 56 >> 2] < 0) {
    $3 = HEAP32[$4 + 60 >> 2];
    if (!(!$3 | !HEAPU8[$4 - -64 | 0])) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP8[$4 + 64 | 0] = 1;
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
   }
   $3 = $2;
   $5 = 0 - $2 & 3;
   if ($5) {
    $8 = $2 << 2;
    while (1) {
     HEAP32[HEAP32[$4 + 60 >> 2] + $8 >> 2] = 0;
     $8 = $8 + 4 | 0;
     $3 = $3 + 1 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   if ($2 >>> 0 > 4294967292) {
    break label$72
   }
   $8 = $3 << 2;
   while (1) {
    HEAP32[HEAP32[$4 + 60 >> 2] + $8 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 60 >> 2] + $8 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 60 >> 2] + $8 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 60 >> 2] + $8 | 0) + 12 >> 2] = 0;
    $8 = $8 + 16 | 0;
    $3 = $3 + 4 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP32[$4 + 52 >> 2] = 0;
  $2 = HEAP32[$4 + 72 >> 2];
  label$13 : {
   if (($2 | 0) >= 0) {
    break label$13
   }
   if (HEAP32[$4 + 76 >> 2] < 0) {
    $3 = HEAP32[$4 + 80 >> 2];
    if (!(!$3 | !HEAPU8[$4 + 84 | 0])) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP8[$4 + 84 | 0] = 1;
    HEAP32[$4 + 76 >> 2] = 0;
    HEAP32[$4 + 80 >> 2] = 0;
   }
   $3 = $2;
   $5 = 0 - $2 & 3;
   if ($5) {
    $8 = $2 << 2;
    while (1) {
     HEAP32[HEAP32[$4 + 80 >> 2] + $8 >> 2] = 0;
     $8 = $8 + 4 | 0;
     $3 = $3 + 1 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   if ($2 >>> 0 > 4294967292) {
    break label$13
   }
   $8 = $3 << 2;
   while (1) {
    HEAP32[HEAP32[$4 + 80 >> 2] + $8 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 80 >> 2] + $8 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 80 >> 2] + $8 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$4 + 80 >> 2] + $8 | 0) + 12 >> 2] = 0;
    $8 = $8 + 16 | 0;
    $3 = $3 + 4 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP32[$4 + 72 >> 2] = 0;
  $3 = HEAP32[$0 + 336 >> 2];
  $2 = HEAP32[$0 + 24 >> 2];
  (((wasm2js_i32$1 = $3, wasm2js_i32$2 = HEAP32[$0 + 8 >> 2]), wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$3 >> 2] + 8 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
  $22 = HEAP32[$0 + 332 >> 2];
  $15 = 0;
  $8 = 0;
  $23 = __stack_pointer - 16 | 0;
  __stack_pointer = $23;
  $6 = HEAP32[$0 + 340 >> 2];
  $14 = HEAP32[$0 + 24 >> 2];
  $18 = __stack_pointer - 16 | 0;
  __stack_pointer = $18;
  CProfileSample__CProfileSample_28char_20const__29($18 + 8 | 0, 2806);
  $4 = HEAP32[$6 + 28 >> 2];
  label$15 : {
   if (($4 | 0) >= 0) {
    break label$15
   }
   if (HEAP32[$6 + 32 >> 2] < 0) {
    $3 = HEAP32[$6 + 36 >> 2];
    if (!(!$3 | !HEAPU8[$6 + 40 | 0])) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP8[$6 + 40 | 0] = 1;
    HEAP32[$6 + 32 >> 2] = 0;
    HEAP32[$6 + 36 >> 2] = 0;
   }
   $2 = $4;
   $5 = 0 - $2 & 3;
   if ($5) {
    $3 = $4 << 2;
    while (1) {
     HEAP32[HEAP32[$6 + 36 >> 2] + $3 >> 2] = 0;
     $3 = $3 + 4 | 0;
     $2 = $2 + 1 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   if ($4 >>> 0 > 4294967292) {
    break label$15
   }
   $3 = $2 << 2;
   while (1) {
    HEAP32[HEAP32[$6 + 36 >> 2] + $3 >> 2] = 0;
    HEAP32[(HEAP32[$6 + 36 >> 2] + $3 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$6 + 36 >> 2] + $3 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$6 + 36 >> 2] + $3 | 0) + 12 >> 2] = 0;
    $3 = $3 + 16 | 0;
    $2 = $2 + 4 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  $3 = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  $2 = 0;
  $13 = __stack_pointer - 16 | 0;
  __stack_pointer = $13;
  $11 = $6 + 4 | 0;
  $9 = HEAP32[$11 + 4 >> 2];
  label$108 : {
   if (($9 | 0) <= 0) {
    break label$108
   }
   $10 = HEAP32[$11 + 12 >> 2];
   while (1) {
    $4 = $2;
    $5 = ($2 << 3) + $10 | 0;
    $12 = HEAP32[$5 >> 2];
    if (($12 | 0) != ($2 | 0)) {
     $7 = $5;
     while (1) {
      $4 = ($12 << 3) + $10 | 0;
      HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
      $4 = HEAP32[$4 >> 2];
      $7 = ($4 << 3) + $10 | 0;
      $12 = HEAP32[$7 >> 2];
      if (($4 | 0) != ($12 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$5 >> 2] = $4;
    $2 = $2 + 1 | 0;
    if (($9 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
   if (($9 | 0) < 2) {
    break label$108
   }
   void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($11, $13 + 8 | 0, 0, $9 - 1 | 0);
  }
  __stack_pointer = $13 + 16 | 0;
  $11 = HEAP32[$6 + 8 >> 2];
  if (($11 | 0) > 0) {
   while (1) {
    $4 = $3;
    $2 = $4 + 1 | 0;
    $5 = ($2 | 0) < ($11 | 0) ? $11 : $2;
    $10 = $5 - 1 | 0;
    $12 = HEAP32[$6 + 16 >> 2];
    $20 = $4 << 3;
    $9 = $12 + $20 | 0;
    $2 = $9 + 8 | 0;
    $13 = HEAP32[$9 >> 2];
    label$9 : {
     while (1) {
      if (($3 | 0) == ($10 | 0)) {
       $3 = $5;
       break label$9;
      }
      $3 = $3 + 1 | 0;
      $7 = HEAP32[$2 >> 2];
      $2 = $2 + 8 | 0;
      if (($7 | 0) == ($13 | 0)) {
       continue
      }
      break;
     };
     $10 = $3 - 1 | 0;
    }
    label$1210 : {
     $24 = ($4 | 0) > ($10 | 0);
     if ($24) {
      break label$1210
     }
     $7 = 1;
     $16 = $10 - $4 | 0;
     $19 = $16 + 1 | 0;
     $25 = $19 & 1;
     $2 = HEAP32[$0 + 16 >> 2];
     $5 = $4;
     if (($4 | 0) != ($10 | 0)) {
      $19 = $19 & -2;
      $9 = $9 + 12 | 0;
      while (1) {
       $17 = HEAP32[(HEAP32[$9 - 8 >> 2] << 2) + $2 >> 2];
       if (HEAP32[$17 + 396 >> 2] == ($13 | 0)) {
        $17 = HEAP32[$17 + 408 >> 2];
        $7 = $7 & (($17 | 0) != 4 & ($17 | 0) != 1);
       }
       $17 = HEAP32[(HEAP32[$9 >> 2] << 2) + $2 >> 2];
       if (HEAP32[$17 + 396 >> 2] == ($13 | 0)) {
        $17 = HEAP32[$17 + 408 >> 2];
        $7 = $7 & (($17 | 0) != 4 & ($17 | 0) != 1);
       }
       $9 = $9 + 16 | 0;
       $5 = $5 + 2 | 0;
       $19 = $19 - 2 | 0;
       if ($19) {
        continue
       }
       break;
      };
     }
     label$1712 : {
      if (!$25) {
       break label$1712
      }
      $5 = HEAP32[(HEAP32[(($5 << 3) + $12 | 0) + 4 >> 2] << 2) + $2 >> 2];
      if (($13 | 0) != HEAP32[$5 + 396 >> 2]) {
       break label$1712
      }
      $5 = HEAP32[$5 + 408 >> 2];
      $7 = ($5 | 0) != 4 & ($5 | 0) != 1 & $7;
     }
     if (!($7 & 1)) {
      $9 = $20 | 4;
      while (1) {
       $2 = HEAP32[(HEAP32[$9 + $12 >> 2] << 2) + $2 >> 2];
       if (!(($13 | 0) != HEAP32[$2 + 396 >> 2] | HEAP32[$2 + 408 >> 2] != 2)) {
        btCollisionObject__setActivationState_28int_29_20const($2, 3);
        HEAP32[$2 + 416 >> 2] = 0;
        HEAP32[$2 + 420 >> 2] = 0;
       }
       if (!$16) {
        break label$1210
       }
       $9 = $9 + 8 | 0;
       $16 = $16 - 1 | 0;
       $2 = HEAP32[$0 + 16 >> 2];
       $12 = HEAP32[$6 + 16 >> 2];
       continue;
      };
     }
     if ($24) {
      break label$1210
     }
     $2 = $10 - $4 | 0;
     $9 = $20 | 4;
     while (1) {
      $4 = HEAP32[HEAP32[$0 + 16 >> 2] + (HEAP32[$9 + $12 >> 2] << 2) >> 2];
      if (HEAP32[$4 + 396 >> 2] == ($13 | 0)) {
       btCollisionObject__setActivationState_28int_29_20const($4, 2)
      }
      if (!$2) {
       break label$1210
      }
      $9 = $9 + 8 | 0;
      $2 = $2 - 1 | 0;
      $12 = HEAP32[$6 + 16 >> 2];
      continue;
     };
    }
    if (($3 | 0) < ($11 | 0)) {
     continue
    }
    break;
   }
  }
  $11 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 36 >> 2]]($14) | 0;
  if (($11 | 0) > 0) {
   $2 = 0;
   while (1) {
    $13 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 40 >> 2]]($14, $2) | 0;
    $3 = HEAP32[$13 + 1452 >> 2];
    $4 = HEAP32[$13 + 1448 >> 2];
    label$25 : {
     if (!(!!$4 & HEAP32[$4 + 408 >> 2] != 2) & (!$3 | HEAP32[$3 + 408 >> 2] == 2)) {
      break label$25
     }
     $5 = HEAP32[$4 + 392 >> 2];
     if (!(!($5 & 2) | HEAP32[$4 + 408 >> 2] == 2 | $5 & 4)) {
      btCollisionObject__activate_28bool_29_20const($3, 0)
     }
     $5 = HEAP32[$3 + 392 >> 2];
     if (!(!($5 & 2) | HEAP32[$3 + 408 >> 2] == 2 | $5 & 4)) {
      btCollisionObject__activate_28bool_29_20const($4, 0)
     }
     if (!HEAPU8[$6 + 64 | 0]) {
      break label$25
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 28 >> 2]]($14, $4, $3) | 0)) {
      break label$25
     }
     $7 = HEAP32[$6 + 28 >> 2];
     label$30 : {
      if (($7 | 0) != HEAP32[$6 + 32 >> 2]) {
       break label$30
      }
      $4 = $7 ? $7 << 1 : 1;
      if (($4 | 0) <= ($7 | 0)) {
       break label$30
      }
      label$31 : {
       if (!$4) {
        $10 = 0;
        break label$31;
       }
       $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
       $7 = HEAP32[$6 + 28 >> 2];
      }
      label$33 : {
       if (($7 | 0) <= 0) {
        break label$33
       }
       $12 = $7 & 3;
       $5 = 0;
       if ($7 - 1 >>> 0 >= 3) {
        $16 = $7 & -4;
        $3 = 0;
        while (1) {
         $9 = $3 + $10 | 0;
         HEAP32[$9 >> 2] = HEAP32[HEAP32[$6 + 36 >> 2] + $3 >> 2];
         HEAP32[$9 + 4 >> 2] = HEAP32[(HEAP32[$6 + 36 >> 2] + $3 | 0) + 4 >> 2];
         HEAP32[$9 + 8 >> 2] = HEAP32[(HEAP32[$6 + 36 >> 2] + $3 | 0) + 8 >> 2];
         HEAP32[$9 + 12 >> 2] = HEAP32[(HEAP32[$6 + 36 >> 2] + $3 | 0) + 12 >> 2];
         $3 = $3 + 16 | 0;
         $5 = $5 + 4 | 0;
         if (($16 | 0) != ($5 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$12) {
        break label$33
       }
       $3 = $5 << 2;
       while (1) {
        HEAP32[$3 + $10 >> 2] = HEAP32[HEAP32[$6 + 36 >> 2] + $3 >> 2];
        $3 = $3 + 4 | 0;
        $12 = $12 - 1 | 0;
        if ($12) {
         continue
        }
        break;
       };
      }
      $3 = HEAP32[$6 + 36 >> 2];
      if (!(!$3 | !HEAPU8[$6 + 40 | 0])) {
       btAlignedFreeInternal_28void__29($3);
       $7 = HEAP32[$6 + 28 >> 2];
      }
      HEAP32[$6 + 36 >> 2] = $10;
      HEAP8[$6 + 40 | 0] = 1;
      HEAP32[$6 + 32 >> 2] = $4;
     }
     HEAP32[$6 + 28 >> 2] = $7 + 1;
     HEAP32[HEAP32[$6 + 36 >> 2] + ($7 << 2) >> 2] = $13;
    }
    $2 = $2 + 1 | 0;
    if (($11 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $18 + 16 | 0;
  $4 = HEAP32[$6 + 8 >> 2];
  CProfileSample__CProfileSample_28char_20const__29($23 + 8 | 0, 3114);
  label$1513 : {
   if (!HEAPU8[$6 + 64 | 0]) {
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 44 >> 2]]($14) | 0;
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 36 >> 2]]($14) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 8 >> 2]]($22, HEAP32[$0 + 16 >> 2], HEAP32[$0 + 8 >> 2], $3, $2, -1);
    break label$1513;
   }
   $12 = HEAP32[$6 + 28 >> 2];
   if (($12 | 0) >= 2) {
    void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($6 + 24 | 0, $23, 0, $12 - 1 | 0)
   }
   if (($4 | 0) <= 0) {
    break label$1513
   }
   $3 = 1;
   while (1) {
    $7 = HEAP32[$6 + 16 >> 2];
    $14 = HEAP32[$7 + ($15 << 3) >> 2];
    $13 = 1;
    label$5615 : {
     if (($4 | 0) <= ($15 | 0)) {
      break label$5615
     }
     while (1) {
      $18 = HEAP32[HEAP32[$0 + 16 >> 2] + (HEAP32[(($15 << 3) + $7 | 0) + 4 >> 2] << 2) >> 2];
      $2 = HEAP32[$6 + 48 >> 2];
      label$78 : {
       if (($2 | 0) != HEAP32[$6 + 52 >> 2]) {
        break label$78
       }
       $5 = $2 ? $2 << 1 : 1;
       if (($5 | 0) <= ($2 | 0)) {
        break label$78
       }
       label$8917 : {
        if (!$5) {
         $9 = 0;
         break label$8917;
        }
        $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
        $2 = HEAP32[$6 + 48 >> 2];
       }
       label$1010 : {
        if (($2 | 0) <= 0) {
         break label$1010
        }
        $10 = $2 & 3;
        $11 = 0;
        if ($2 - 1 >>> 0 >= 3) {
         $20 = $2 & -4;
         $7 = 0;
         while (1) {
          $16 = $7 + $9 | 0;
          HEAP32[$16 >> 2] = HEAP32[HEAP32[$6 + 56 >> 2] + $7 >> 2];
          HEAP32[$16 + 4 >> 2] = HEAP32[(HEAP32[$6 + 56 >> 2] + $7 | 0) + 4 >> 2];
          HEAP32[$16 + 8 >> 2] = HEAP32[(HEAP32[$6 + 56 >> 2] + $7 | 0) + 8 >> 2];
          HEAP32[$16 + 12 >> 2] = HEAP32[(HEAP32[$6 + 56 >> 2] + $7 | 0) + 12 >> 2];
          $7 = $7 + 16 | 0;
          $11 = $11 + 4 | 0;
          if (($20 | 0) != ($11 | 0)) {
           continue
          }
          break;
         };
        }
        if (!$10) {
         break label$1010
        }
        $7 = $11 << 2;
        while (1) {
         HEAP32[$7 + $9 >> 2] = HEAP32[HEAP32[$6 + 56 >> 2] + $7 >> 2];
         $7 = $7 + 4 | 0;
         $10 = $10 - 1 | 0;
         if ($10) {
          continue
         }
         break;
        };
       }
       $7 = HEAP32[$6 + 56 >> 2];
       if (!(!$7 | !HEAPU8[$6 + 60 | 0])) {
        btAlignedFreeInternal_28void__29($7);
        $2 = HEAP32[$6 + 48 >> 2];
       }
       HEAP32[$6 + 56 >> 2] = $9;
       HEAP8[$6 + 60 | 0] = 1;
       HEAP32[$6 + 52 >> 2] = $5;
      }
      HEAP32[$6 + 48 >> 2] = $2 + 1;
      HEAP32[HEAP32[$6 + 56 >> 2] + ($2 << 2) >> 2] = $18;
      $2 = HEAP32[$18 + 408 >> 2];
      $13 = (($2 | 0) == 2 | ($2 | 0) == 5) & $13;
      $15 = $15 + 1 | 0;
      if (($4 | 0) == ($15 | 0)) {
       $15 = $4;
       break label$5615;
      }
      $7 = HEAP32[$6 + 16 >> 2];
      if (HEAP32[$7 + ($15 << 3) >> 2] == ($14 | 0)) {
       continue
      }
      break;
     };
    }
    $9 = 0;
    $5 = 0;
    label$16 : {
     if (($8 | 0) >= ($12 | 0)) {
      break label$16
     }
     $2 = HEAP32[$6 + 36 >> 2];
     $7 = $8 << 2;
     $10 = $2 + $7 | 0;
     $5 = HEAP32[$10 >> 2];
     $11 = HEAP32[HEAP32[$5 + 1448 >> 2] + 396 >> 2];
     if (($11 | 0) < 0) {
      $11 = HEAP32[HEAP32[$5 + 1452 >> 2] + 396 >> 2]
     }
     $5 = 0;
     if (($11 | 0) != ($14 | 0)) {
      break label$16
     }
     $3 = $8 + 1 | 0;
     $5 = ($3 | 0) < ($12 | 0) ? $12 : $3;
     $9 = $5 - 1 | 0;
     $7 = ($2 + $7 | 0) + 4 | 0;
     $3 = $8;
     while (1) {
      label$1918 : {
       if (($3 | 0) == ($9 | 0)) {
        $3 = $5;
        break label$1918;
       }
       $11 = HEAP32[$7 >> 2];
       $2 = HEAP32[HEAP32[$11 + 1448 >> 2] + 396 >> 2];
       if (($2 | 0) < 0) {
        $2 = HEAP32[HEAP32[$11 + 1452 >> 2] + 396 >> 2]
       }
       $3 = $3 + 1 | 0;
       $7 = $7 + 4 | 0;
       if (($2 | 0) == ($14 | 0)) {
        continue
       }
      }
      break;
     };
     $9 = $3 - $8 | 0;
     $5 = $10;
    }
    $2 = $5;
    if (!$13) {
     FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 8 >> 2]]($22, HEAP32[$6 + 56 >> 2], HEAP32[$6 + 48 >> 2], $2, $9, $14)
    }
    $5 = HEAP32[$6 + 48 >> 2];
    label$2419 : {
     if (($5 | 0) >= 0) {
      break label$2419
     }
     if (HEAP32[$6 + 52 >> 2] < 0) {
      $2 = HEAP32[$6 + 56 >> 2];
      if (!(!$2 | !HEAPU8[$6 + 60 | 0])) {
       btAlignedFreeInternal_28void__29($2)
      }
      HEAP8[$6 + 60 | 0] = 1;
      HEAP32[$6 + 52 >> 2] = 0;
      HEAP32[$6 + 56 >> 2] = 0;
     }
     $2 = $5;
     $10 = 0 - $2 & 3;
     if ($10) {
      $7 = $5 << 2;
      while (1) {
       HEAP32[HEAP32[$6 + 56 >> 2] + $7 >> 2] = 0;
       $7 = $7 + 4 | 0;
       $2 = $2 + 1 | 0;
       $10 = $10 - 1 | 0;
       if ($10) {
        continue
       }
       break;
      };
     }
     if ($5 >>> 0 > 4294967292) {
      break label$2419
     }
     $7 = $2 << 2;
     while (1) {
      HEAP32[HEAP32[$6 + 56 >> 2] + $7 >> 2] = 0;
      HEAP32[(HEAP32[$6 + 56 >> 2] + $7 | 0) + 4 >> 2] = 0;
      HEAP32[(HEAP32[$6 + 56 >> 2] + $7 | 0) + 8 >> 2] = 0;
      HEAP32[(HEAP32[$6 + 56 >> 2] + $7 | 0) + 12 >> 2] = 0;
      $7 = $7 + 16 | 0;
      $2 = $2 + 4 | 0;
      if ($2) {
       continue
      }
      break;
     };
    }
    $8 = $9 ? $3 : $8;
    HEAP32[$6 + 48 >> 2] = 0;
    if (($4 | 0) > ($15 | 0)) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $23 + 16 | 0;
  InplaceSolverIslandCallback__processConstraints_28_29(HEAP32[$0 + 332 >> 2]);
  $3 = HEAP32[$0 + 336 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1, HEAP32[$0 + 100 >> 2]);
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $21 + 16 | 0;
 }
 
 function void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  while (1) {
   $12 = $2;
   $5 = HEAP32[$0 + 12 >> 2];
   $11 = HEAP32[$5 + (($2 + $3 | 0) / 2 << 2) >> 2];
   $4 = $3;
   while (1) {
    $10 = HEAP32[HEAP32[$11 + 32 >> 2] + 396 >> 2];
    $6 = ($10 | 0) < 0;
    label$3 : {
     if (!$6) {
      $7 = $2 - 1 | 0;
      $8 = (($2 << 2) + $5 | 0) - 4 | 0;
      while (1) {
       $7 = $7 + 1 | 0;
       $8 = $8 + 4 | 0;
       $9 = HEAP32[$8 >> 2];
       $2 = HEAP32[HEAP32[$9 + 32 >> 2] + 396 >> 2];
       if (($2 | 0) < 0) {
        $2 = HEAP32[HEAP32[$9 + 36 >> 2] + 396 >> 2]
       }
       if (($2 | 0) < ($10 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     $7 = $2 - 1 | 0;
     $8 = (($2 << 2) + $5 | 0) - 4 | 0;
     $13 = HEAP32[HEAP32[$11 + 36 >> 2] + 396 >> 2];
     while (1) {
      $7 = $7 + 1 | 0;
      $8 = $8 + 4 | 0;
      $9 = HEAP32[$8 >> 2];
      $2 = HEAP32[HEAP32[$9 + 32 >> 2] + 396 >> 2];
      if (($2 | 0) < 0) {
       $2 = HEAP32[HEAP32[$9 + 36 >> 2] + 396 >> 2]
      }
      if (($2 | 0) < ($13 | 0)) {
       continue
      }
      break;
     };
    }
    label$9 : {
     if (!$6) {
      $2 = $4 + 1 | 0;
      $6 = ($4 << 2) + $5 | 0;
      while (1) {
       $5 = HEAP32[$6 >> 2];
       $4 = HEAP32[HEAP32[$5 + 32 >> 2] + 396 >> 2];
       if (($4 | 0) < 0) {
        $4 = HEAP32[HEAP32[$5 + 36 >> 2] + 396 >> 2]
       }
       $6 = $6 - 4 | 0;
       $2 = $2 - 1 | 0;
       if (($4 | 0) > ($10 | 0)) {
        continue
       }
       break;
      };
      break label$9;
     }
     $2 = $4 + 1 | 0;
     $6 = ($4 << 2) + $5 | 0;
     $10 = HEAP32[HEAP32[$11 + 36 >> 2] + 396 >> 2];
     while (1) {
      $5 = HEAP32[$6 >> 2];
      $4 = HEAP32[HEAP32[$5 + 32 >> 2] + 396 >> 2];
      if (($4 | 0) < 0) {
       $4 = HEAP32[HEAP32[$5 + 36 >> 2] + 396 >> 2]
      }
      $6 = $6 - 4 | 0;
      $2 = $2 - 1 | 0;
      if (($4 | 0) > ($10 | 0)) {
       continue
      }
      break;
     };
    }
    label$15 : {
     if (($2 | 0) < ($7 | 0)) {
      $4 = $2;
      $2 = $7;
      break label$15;
     }
     HEAP32[$8 >> 2] = $5;
     HEAP32[HEAP32[$0 + 12 >> 2] + ($2 << 2) >> 2] = $9;
     $4 = $2 - 1 | 0;
     $2 = $7 + 1 | 0;
    }
    if (($2 | 0) <= ($4 | 0)) {
     $5 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($4 | 0) > ($12 | 0)) {
    void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0, $1, $12, $4)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function InplaceSolverIslandCallback__processConstraints_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = HEAP32[$0 + 8 >> 2];
  $3 = $0 + 32 | 0;
  $1 = HEAP32[$3 >> 2];
  $5 = $1 ? HEAP32[$0 + 40 >> 2] : 0;
  $4 = $1;
  $1 = HEAP32[$0 + 52 >> 2];
  $6 = $1 ? HEAP32[$0 + 60 >> 2] : 0;
  $7 = $1;
  $1 = HEAP32[$0 + 72 >> 2];
  +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $5, $4, $6, $7, $1 ? HEAP32[$0 + 80 >> 2] : 0, $1, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
  $3 = HEAP32[$3 >> 2];
  label$1 : {
   if (($3 | 0) >= 0) {
    break label$1
   }
   if (HEAP32[$0 + 36 >> 2] < 0) {
    $2 = HEAP32[$0 + 40 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 44 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP8[$0 + 44 | 0] = 1;
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
   }
   $2 = $3;
   $4 = 0 - $2 & 3;
   if ($4) {
    $1 = $3 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 40 >> 2] + $1 >> 2] = 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 1 | 0;
     $4 = $4 - 1 | 0;
     if ($4) {
      continue
     }
     break;
    };
   }
   if ($3 >>> 0 > 4294967292) {
    break label$1
   }
   $1 = $2 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 40 >> 2] + $1 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 40 >> 2] + $1 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 40 >> 2] + $1 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 40 >> 2] + $1 | 0) + 12 >> 2] = 0;
    $1 = $1 + 16 | 0;
    $2 = $2 + 4 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 32 >> 2] = 0;
  $3 = HEAP32[$0 + 52 >> 2];
  label$7 : {
   if (($3 | 0) >= 0) {
    break label$7
   }
   if (HEAP32[$0 + 56 >> 2] < 0) {
    $2 = HEAP32[$0 + 60 >> 2];
    if (!(!$2 | !HEAPU8[$0 - -64 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP8[$0 + 64 | 0] = 1;
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
   }
   $2 = $3;
   $4 = 0 - $2 & 3;
   if ($4) {
    $1 = $3 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 60 >> 2] + $1 >> 2] = 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 1 | 0;
     $4 = $4 - 1 | 0;
     if ($4) {
      continue
     }
     break;
    };
   }
   if ($3 >>> 0 > 4294967292) {
    break label$7
   }
   $1 = $2 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 60 >> 2] + $1 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 60 >> 2] + $1 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 60 >> 2] + $1 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 60 >> 2] + $1 | 0) + 12 >> 2] = 0;
    $1 = $1 + 16 | 0;
    $2 = $2 + 4 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = 0;
  $3 = HEAP32[$0 + 72 >> 2];
  label$13 : {
   if (($3 | 0) >= 0) {
    break label$13
   }
   if (HEAP32[$0 + 76 >> 2] < 0) {
    $2 = HEAP32[$0 + 80 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 84 | 0])) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP8[$0 + 84 | 0] = 1;
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
   }
   $2 = $3;
   $4 = 0 - $2 & 3;
   if ($4) {
    $1 = $3 << 2;
    while (1) {
     HEAP32[HEAP32[$0 + 80 >> 2] + $1 >> 2] = 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 1 | 0;
     $4 = $4 - 1 | 0;
     if ($4) {
      continue
     }
     break;
    };
   }
   if ($3 >>> 0 > 4294967292) {
    break label$13
   }
   $1 = $2 << 2;
   while (1) {
    HEAP32[HEAP32[$0 + 80 >> 2] + $1 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 80 >> 2] + $1 | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 80 >> 2] + $1 | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[$0 + 80 >> 2] + $1 | 0) + 12 >> 2] = 0;
    $1 = $1 + 16 | 0;
    $2 = $2 + 4 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 72 >> 2] = 0;
 }
 
 function btDiscreteDynamicsWorld__calculateSimulationIslands_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  CProfileSample__CProfileSample_28char_20const__29($8 + 8 | 0, 3129);
  $1 = HEAP32[$0 + 340 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $0, HEAP32[$0 + 24 >> 2]);
  $7 = HEAP32[$0 + 468 >> 2];
  if (($7 | 0) > 0) {
   $9 = HEAP32[$0 + 476 >> 2];
   $10 = HEAP32[$0 + 340 >> 2];
   while (1) {
    $1 = HEAP32[$9 + ($6 << 2) >> 2];
    $2 = HEAP32[$1 + 1448 >> 2];
    label$3 : {
     if (!$2) {
      break label$3
     }
     $1 = HEAP32[$1 + 1452 >> 2];
     if (!$1 | HEAP32[$2 + 392 >> 2] & 3 | HEAPU8[$1 + 392 | 0] & 3) {
      break label$3
     }
     $1 = HEAP32[$1 + 396 >> 2];
     $3 = HEAP32[$10 + 16 >> 2];
     $4 = HEAP32[$2 + 396 >> 2];
     $5 = $3 + ($4 << 3) | 0;
     $2 = HEAP32[$5 >> 2];
     if (($2 | 0) != ($4 | 0)) {
      while (1) {
       $2 = $3 + ($2 << 3) | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       $4 = HEAP32[$2 >> 2];
       $5 = $3 + ($4 << 3) | 0;
       $2 = HEAP32[$5 >> 2];
       if (($2 | 0) != ($4 | 0)) {
        continue
       }
       break;
      }
     }
     $5 = $3 + ($1 << 3) | 0;
     $2 = HEAP32[$5 >> 2];
     if (($1 | 0) != ($2 | 0)) {
      while (1) {
       $1 = $3 + ($2 << 3) | 0;
       HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
       $1 = HEAP32[$1 >> 2];
       $5 = $3 + ($1 << 3) | 0;
       $2 = HEAP32[$5 >> 2];
       if (($1 | 0) != ($2 | 0)) {
        continue
       }
       break;
      }
     }
     if (($1 | 0) == ($4 | 0)) {
      break label$3
     }
     $2 = $3 + ($4 << 3) | 0;
     HEAP32[$2 >> 2] = $1;
     $1 = $3 + ($1 << 3) | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
    }
    $6 = $6 + 1 | 0;
    if (($7 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  $7 = HEAP32[$0 + 348 >> 2];
  if (($7 | 0) > 0) {
   $9 = HEAP32[$0 + 356 >> 2];
   $10 = HEAP32[$0 + 340 >> 2];
   $5 = 0;
   while (1) {
    $1 = HEAP32[$9 + ($5 << 2) >> 2];
    label$10 : {
     if (!HEAPU8[$1 + 24 | 0]) {
      break label$10
     }
     $2 = HEAP32[$1 + 32 >> 2];
     if (HEAPU8[$2 + 392 | 0] & 3) {
      break label$10
     }
     $1 = HEAP32[$1 + 36 >> 2];
     if (HEAPU8[$1 + 392 | 0] & 3) {
      break label$10
     }
     $1 = HEAP32[$1 + 396 >> 2];
     $3 = HEAP32[$10 + 16 >> 2];
     $4 = HEAP32[$2 + 396 >> 2];
     $2 = $3 + ($4 << 3) | 0;
     $6 = HEAP32[$2 >> 2];
     if (($6 | 0) != ($4 | 0)) {
      while (1) {
       $4 = $2;
       $2 = $3 + ($6 << 3) | 0;
       HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
       $4 = HEAP32[$2 >> 2];
       $2 = $3 + ($4 << 3) | 0;
       $6 = HEAP32[$2 >> 2];
       if (($6 | 0) != ($4 | 0)) {
        continue
       }
       break;
      }
     }
     $2 = $3 + ($1 << 3) | 0;
     $6 = HEAP32[$2 >> 2];
     if (($6 | 0) != ($1 | 0)) {
      while (1) {
       $1 = $3 + ($6 << 3) | 0;
       HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
       $1 = HEAP32[$1 >> 2];
       $2 = $3 + ($1 << 3) | 0;
       $6 = HEAP32[$2 >> 2];
       if (($6 | 0) != ($1 | 0)) {
        continue
       }
       break;
      }
     }
     if (($1 | 0) == ($4 | 0)) {
      break label$10
     }
     $2 = $3 + ($4 << 3) | 0;
     HEAP32[$2 >> 2] = $1;
     $1 = $3 + ($1 << 3) | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
    }
    $5 = $5 + 1 | 0;
    if (($7 | 0) != ($5 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 340 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $0);
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $8 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__createPredictiveContacts_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
  $39 = __stack_pointer - 16 | 0;
  __stack_pointer = $39;
  CProfileSample__CProfileSample_28char_20const__29($39, 2872);
  CProfileSample__CProfileSample_28char_20const__29($39 + 8 | 0, 3156);
  if (HEAP32[$0 + 468 >> 2] > 0) {
   while (1) {
    $4 = HEAP32[$0 + 24 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, HEAP32[HEAP32[$0 + 476 >> 2] + $17 >> 2]);
    $17 = $17 + 4 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 468 >> 2]) {
     continue
    }
    break;
   }
  }
  $17 = HEAP32[$0 + 476 >> 2];
  if (!(!$17 | !HEAPU8[$0 + 480 | 0])) {
   btAlignedFreeInternal_28void__29($17)
  }
  HEAP32[$0 + 476 >> 2] = 0;
  HEAP8[$0 + 480 | 0] = 1;
  HEAP32[$0 + 468 >> 2] = 0;
  HEAP32[$0 + 472 >> 2] = 0;
  CProfileSample___CProfileSample_28_29();
  $17 = HEAP32[$0 + 368 >> 2];
  if (($17 | 0) > 0) {
   $55 = HEAP32[$0 + 376 >> 2];
   $4 = __stack_pointer - 896 | 0;
   __stack_pointer = $4;
   if (($17 | 0) > 0) {
    $56 = $4 + 216 | 0;
    $29 = $4 + 168 | 0;
    $30 = $4 + 128 | 0;
    $6 = $4 + 584 | 0;
    $31 = $6 + 88 | 0;
    $2 = $4 + 360 | 0;
    $32 = $2 + 96 | 0;
    $22 = $2 - -64 | 0;
    $3 = $4 + 768 | 0;
    $33 = $3 - -64 | 0;
    $23 = $2 + 32 | 0;
    $34 = $3 + 32 | 0;
    $28 = $4 + 528 | 0;
    $35 = $6 + 56 | 0;
    $36 = $6 + 24 | 0;
    $24 = $3 + 96 | 0;
    while (1) {
     $6 = HEAP32[($41 << 2) + $55 >> 2];
     HEAP32[$6 + 488 >> 2] = 0;
     HEAP32[$6 + 492 >> 2] = 1072693248;
     label$3 : {
      label$4 : {
       switch (HEAP32[$6 + 408 >> 2] - 2 | 0) {
       case 0:
       case 3:
        break label$3;
       default:
        break label$4;
       };
      }
      if (HEAPU8[$6 + 392 | 0] & 3) {
       break label$3
      }
      btRigidBody__predictIntegratedTransform_28double_2c_20btTransform__29($6, $1, $4 + 768 | 0);
      if (!HEAPU8[$0 + 56 | 0]) {
       break label$3
      }
      $11 = HEAPF64[$6 + 504 >> 3];
      $11 = $11 * $11;
      if ($11 == 0.0) {
       break label$3
      }
      $14 = HEAPF64[$4 + 880 >> 3] - HEAPF64[$6 + 120 >> 3];
      $21 = $14 * $14;
      $14 = HEAPF64[$4 + 864 >> 3] - HEAPF64[$6 + 104 >> 3];
      $37 = $14 * $14;
      $14 = HEAPF64[$4 + 872 >> 3] - HEAPF64[$6 + 112 >> 3];
      if (!($11 < $21 + ($37 + $14 * $14))) {
       break label$3
      }
      CProfileSample__CProfileSample_28char_20const__29($4 + 760 | 0, 2779);
      if (HEAP32[HEAP32[$6 + 380 >> 2] + 4 >> 2] <= 19) {
       HEAP32[8489] = HEAP32[8489] + 1;
       $2 = HEAP32[$0 + 96 >> 2];
       $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
       $38 = $6 + 104 | 0;
       $2 = $38;
       $3 = HEAP32[$2 + 4 >> 2];
       HEAP32[$36 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$36 + 4 >> 2] = $3;
       $42 = $2 + 8 | 0;
       $2 = $42;
       $3 = HEAP32[$2 + 4 >> 2];
       $5 = $36 + 8 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $43 = $38 + 16 | 0;
       $2 = $43;
       $3 = HEAP32[$2 + 4 >> 2];
       $5 = $36 + 16 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $44 = $38 + 24 | 0;
       $2 = $44;
       $3 = HEAP32[$2 + 4 >> 2];
       $5 = $36 + 24 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $2 = HEAP32[$24 + 4 >> 2];
       HEAP32[$35 >> 2] = HEAP32[$24 >> 2];
       HEAP32[$35 + 4 >> 2] = $2;
       $2 = $24 + 8 | 0;
       $3 = HEAP32[$2 + 4 >> 2];
       $5 = $35 + 8 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $3 = $24 + 16 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       $7 = $35 + 16 | 0;
       HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$7 + 4 >> 2] = $5;
       $5 = $24 + 24 | 0;
       $7 = HEAP32[$5 + 4 >> 2];
       $9 = $35 + 24 | 0;
       HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$9 + 4 >> 2] = $7;
       HEAP32[$4 + 600 >> 2] = 1;
       HEAP32[$4 + 604 >> 2] = -1;
       HEAP32[$4 + 592 >> 2] = 0;
       HEAP32[$4 + 596 >> 2] = 1072693248;
       HEAP32[$4 + 736 >> 2] = 0;
       HEAP32[$4 + 752 >> 2] = $8;
       HEAP32[$4 + 756 >> 2] = HEAP32[$0 + 24 >> 2];
       HEAP32[$4 + 744 >> 2] = 0;
       HEAP32[$4 + 748 >> 2] = 0;
       HEAP32[$4 + 584 >> 2] = 28744;
       HEAP32[$4 + 740 >> 2] = $6;
       $11 = HEAPF64[$6 + 496 >> 3];
       $46 = $4 + 488 | 0;
       btConvexInternalShape__btConvexInternalShape_28_29($46);
       $8 = $28 + 32 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       $8 = $28 + 24 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       $8 = $28 + 16 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       $8 = $28 + 8 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       HEAP32[$28 >> 2] = 0;
       HEAP32[$28 + 4 >> 2] = 0;
       HEAP32[$4 + 520 >> 2] = 0;
       HEAP32[$4 + 524 >> 2] = 1072693248;
       HEAP32[$4 + 512 >> 2] = 0;
       HEAP32[$4 + 516 >> 2] = 1072693248;
       HEAP32[$4 + 504 >> 2] = 0;
       HEAP32[$4 + 508 >> 2] = 1072693248;
       HEAP32[$4 + 492 >> 2] = 8;
       HEAP32[$4 + 488 >> 2] = 8920;
       HEAP32[$4 + 576 >> 2] = 0;
       HEAP32[$4 + 580 >> 2] = 0;
       HEAPF64[$4 + 568 >> 3] = $11;
       HEAPF64[$4 + 536 >> 3] = $11;
       HEAPF64[$4 + 744 >> 3] = HEAPF64[$0 + 72 >> 3];
       $8 = HEAP32[$6 + 376 >> 2];
       HEAP32[$4 + 600 >> 2] = HEAP32[$8 + 4 >> 2];
       HEAP32[$4 + 604 >> 2] = HEAP32[$8 + 8 >> 2];
       $12 = $4 + 768 | 0;
       $9 = $12 + 24 | 0;
       $10 = HEAP32[$9 + 4 >> 2];
       $8 = $4 + 360 | 0;
       $7 = $8 + 24 | 0;
       HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
       HEAP32[$7 + 4 >> 2] = $10;
       $10 = $12 + 16 | 0;
       $13 = HEAP32[$10 + 4 >> 2];
       $9 = $8 + 16 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $13;
       $10 = $12 + 8 | 0;
       $13 = HEAP32[$10 + 4 >> 2];
       $12 = $8 + 8 | 0;
       HEAP32[$12 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$12 + 4 >> 2] = $13;
       $10 = HEAP32[$34 + 4 >> 2];
       HEAP32[$23 >> 2] = HEAP32[$34 >> 2];
       HEAP32[$23 + 4 >> 2] = $10;
       $13 = $34 + 8 | 0;
       $18 = HEAP32[$13 + 4 >> 2];
       $10 = $23 + 8 | 0;
       HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$10 + 4 >> 2] = $18;
       $18 = $34 + 16 | 0;
       $15 = HEAP32[$18 + 4 >> 2];
       $13 = $23 + 16 | 0;
       HEAP32[$13 >> 2] = HEAP32[$18 >> 2];
       HEAP32[$13 + 4 >> 2] = $15;
       $15 = $34 + 24 | 0;
       $19 = HEAP32[$15 + 4 >> 2];
       $18 = $23 + 24 | 0;
       HEAP32[$18 >> 2] = HEAP32[$15 >> 2];
       HEAP32[$18 + 4 >> 2] = $19;
       $15 = HEAP32[$33 + 4 >> 2];
       HEAP32[$22 >> 2] = HEAP32[$33 >> 2];
       HEAP32[$22 + 4 >> 2] = $15;
       $19 = $33 + 8 | 0;
       $20 = HEAP32[$19 + 4 >> 2];
       $15 = $22 + 8 | 0;
       HEAP32[$15 >> 2] = HEAP32[$19 >> 2];
       HEAP32[$15 + 4 >> 2] = $20;
       $20 = $33 + 16 | 0;
       $16 = HEAP32[$20 + 4 >> 2];
       $19 = $22 + 16 | 0;
       HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
       HEAP32[$19 + 4 >> 2] = $16;
       $16 = $33 + 24 | 0;
       $40 = HEAP32[$16 + 4 >> 2];
       $20 = $22 + 24 | 0;
       HEAP32[$20 >> 2] = HEAP32[$16 >> 2];
       HEAP32[$20 + 4 >> 2] = $40;
       $16 = HEAP32[$4 + 772 >> 2];
       HEAP32[$4 + 360 >> 2] = HEAP32[$4 + 768 >> 2];
       HEAP32[$4 + 364 >> 2] = $16;
       $16 = HEAP32[$5 + 4 >> 2];
       $40 = $32 + 24 | 0;
       HEAP32[$40 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$40 + 4 >> 2] = $16;
       $5 = HEAP32[$3 + 4 >> 2];
       $16 = $32 + 16 | 0;
       HEAP32[$16 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$16 + 4 >> 2] = $5;
       $3 = HEAP32[$2 + 4 >> 2];
       $5 = $32 + 8 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $3;
       $2 = HEAP32[$24 + 4 >> 2];
       HEAP32[$32 >> 2] = HEAP32[$24 >> 2];
       HEAP32[$32 + 4 >> 2] = $2;
       $2 = $6 + 8 | 0;
       $3 = $2 + 8 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$12 + 4 >> 2] = $5;
       $3 = $2 + 16 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$9 + 4 >> 2] = $5;
       $3 = $2 + 24 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$7 + 4 >> 2] = $5;
       $3 = HEAP32[$2 >> 2];
       $5 = HEAP32[$2 + 4 >> 2];
       $7 = $6 + 40 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       HEAP32[$23 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$23 + 4 >> 2] = $9;
       $7 = $6 + 48 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$10 + 4 >> 2] = $9;
       $7 = $6 + 56 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$13 + 4 >> 2] = $9;
       $7 = $6 - -64 | 0;
       $9 = HEAP32[$7 + 4 >> 2];
       HEAP32[$18 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$18 + 4 >> 2] = $9;
       HEAP32[$4 + 360 >> 2] = $3;
       HEAP32[$4 + 364 >> 2] = $5;
       $3 = $6 + 72 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$22 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$22 + 4 >> 2] = $5;
       $3 = $6 + 80 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$15 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$15 + 4 >> 2] = $5;
       $3 = $6 + 88 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$19 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$19 + 4 >> 2] = $5;
       $3 = $6 + 96 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$20 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$20 + 4 >> 2] = $5;
       btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($0, $46, $2, $8, $4 + 584 | 0, 0.0);
       $11 = HEAPF64[$4 + 592 >> 3];
       if ($11 < 1.0) {
        $25 = $11 * (HEAPF64[$4 + 864 >> 3] - HEAPF64[$6 + 104 >> 3]);
        $26 = $11 * (HEAPF64[$4 + 872 >> 3] - HEAPF64[$6 + 112 >> 3]);
        $27 = $11 * (HEAPF64[$4 + 880 >> 3] - HEAPF64[$6 + 120 >> 3]);
        $37 = $25 * -HEAPF64[$4 + 672 >> 3] - $26 * HEAPF64[$4 + 680 >> 3] - $27 * HEAPF64[$4 + 688 >> 3];
        $2 = HEAP32[$0 + 24 >> 2];
        $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $6, HEAP32[$4 + 736 >> 2]) | 0;
        $3 = HEAP32[$0 + 468 >> 2];
        label$7 : {
         if (($3 | 0) != HEAP32[$0 + 472 >> 2]) {
          break label$7
         }
         $7 = $3 ? $3 << 1 : 1;
         if (($7 | 0) <= ($3 | 0)) {
          break label$7
         }
         label$8 : {
          if (!$7) {
           $5 = 0;
           break label$8;
          }
          $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2);
          $3 = HEAP32[$0 + 468 >> 2];
         }
         label$10 : {
          if (($3 | 0) <= 0) {
           break label$10
          }
          $9 = $3 & 3;
          $12 = 0;
          if ($3 - 1 >>> 0 >= 3) {
           $13 = $3 & -4;
           $2 = 0;
           while (1) {
            $10 = $2 + $5 | 0;
            HEAP32[$10 >> 2] = HEAP32[HEAP32[$0 + 476 >> 2] + $2 >> 2];
            HEAP32[$10 + 4 >> 2] = HEAP32[(HEAP32[$0 + 476 >> 2] + $2 | 0) + 4 >> 2];
            HEAP32[$10 + 8 >> 2] = HEAP32[(HEAP32[$0 + 476 >> 2] + $2 | 0) + 8 >> 2];
            HEAP32[$10 + 12 >> 2] = HEAP32[(HEAP32[$0 + 476 >> 2] + $2 | 0) + 12 >> 2];
            $2 = $2 + 16 | 0;
            $12 = $12 + 4 | 0;
            if (($13 | 0) != ($12 | 0)) {
             continue
            }
            break;
           };
          }
          if (!$9) {
           break label$10
          }
          $2 = $12 << 2;
          while (1) {
           HEAP32[$2 + $5 >> 2] = HEAP32[HEAP32[$0 + 476 >> 2] + $2 >> 2];
           $2 = $2 + 4 | 0;
           $9 = $9 - 1 | 0;
           if ($9) {
            continue
           }
           break;
          };
         }
         $2 = HEAP32[$0 + 476 >> 2];
         if (!(!$2 | !HEAPU8[$0 + 480 | 0])) {
          btAlignedFreeInternal_28void__29($2);
          $3 = HEAP32[$0 + 468 >> 2];
         }
         HEAP32[$0 + 476 >> 2] = $5;
         HEAP8[$0 + 480 | 0] = 1;
         HEAP32[$0 + 472 >> 2] = $7;
        }
        HEAP32[HEAP32[$0 + 476 >> 2] + ($3 << 2) >> 2] = $8;
        HEAP32[$0 + 468 >> 2] = $3 + 1;
        $2 = HEAP32[$4 + 736 >> 2];
        $47 = HEAPF64[$2 + 40 >> 3];
        $48 = HEAPF64[$2 + 72 >> 3];
        $49 = HEAPF64[$2 + 80 >> 3];
        $50 = HEAPF64[$2 + 16 >> 3];
        $51 = HEAPF64[$2 + 48 >> 3];
        $11 = HEAPF64[$2 + 120 >> 3];
        $57 = HEAPF64[$2 + 104 >> 3];
        $14 = HEAPF64[$2 + 112 >> 3];
        $52 = HEAPF64[$2 + 88 >> 3];
        $21 = HEAPF64[$2 + 24 >> 3];
        $53 = HEAPF64[$2 + 56 >> 3];
        $54 = HEAPF64[$2 + 8 >> 3];
        $45 = HEAPF64[$6 + 120 >> 3];
        $58 = HEAPF64[$6 + 104 >> 3];
        $59 = HEAPF64[$6 + 112 >> 3];
        $2 = $4 + 24 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        $2 = $4 + 16 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        $2 = $4 + 8 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        HEAP32[$29 >> 2] = 0;
        HEAP32[$29 + 4 >> 2] = 0;
        $2 = $29 + 8 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        $2 = $29 + 16 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        $2 = $29 + 24 | 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        $2 = HEAP32[$31 + 4 >> 2];
        HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
        HEAP32[$30 + 4 >> 2] = $2;
        $2 = $31 + 8 | 0;
        $3 = HEAP32[$2 + 4 >> 2];
        $5 = $30 + 8 | 0;
        HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$5 + 4 >> 2] = $3;
        $2 = $31 + 16 | 0;
        $3 = HEAP32[$2 + 4 >> 2];
        $5 = $30 + 16 | 0;
        HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$5 + 4 >> 2] = $3;
        $2 = $31 + 24 | 0;
        $3 = HEAP32[$2 + 4 >> 2];
        $5 = $30 + 24 | 0;
        HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$5 + 4 >> 2] = $3;
        HEAP32[$4 >> 2] = 0;
        HEAP32[$4 + 4 >> 2] = 0;
        HEAP32[$4 + 56 >> 2] = 0;
        HEAP32[$4 + 60 >> 2] = 0;
        HEAPF64[$4 + 160 >> 3] = $37;
        $27 = $27 + $45;
        $25 = $25 + $58;
        $26 = $26 + $59;
        $45 = $52 * $27 + ($21 * $25 + $53 * $26);
        $37 = $21;
        $21 = -$57;
        HEAPF64[$4 + 48 >> 3] = $45 + ($37 * $21 - $53 * $14 - $52 * $11);
        HEAPF64[$4 + 40 >> 3] = $27 * $49 + ($25 * $50 + $26 * $51) + ($50 * $21 - $51 * $14 - $49 * $11);
        HEAPF64[$4 + 32 >> 3] = $27 * $48 + ($25 * $54 + $26 * $47) + ($54 * $21 - $47 * $14 - $48 * $11);
        memset($56, 0, 76);
        $2 = $8 + Math_imul(btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($8, $4), 360) | 0;
        $3 = $2 + 200 | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 0;
        HEAPF64[$2 + 176 >> 3] = Math_min(Math_max(HEAPF64[$6 + 424 >> 3] * HEAPF64[HEAP32[$4 + 736 >> 2] + 424 >> 3], -10.0), 10.0);
        $6 = HEAP32[$38 + 4 >> 2];
        $3 = $2 + 104 | 0;
        HEAP32[$3 >> 2] = HEAP32[$38 >> 2];
        HEAP32[$3 + 4 >> 2] = $6;
        $6 = HEAP32[$42 + 4 >> 2];
        $3 = $2 + 112 | 0;
        HEAP32[$3 >> 2] = HEAP32[$42 >> 2];
        HEAP32[$3 + 4 >> 2] = $6;
        $6 = HEAP32[$43 + 4 >> 2];
        $3 = $2 + 120 | 0;
        HEAP32[$3 >> 2] = HEAP32[$43 >> 2];
        HEAP32[$3 + 4 >> 2] = $6;
        $6 = HEAP32[$44 + 4 >> 2];
        $3 = $2 + 128 | 0;
        HEAP32[$3 >> 2] = HEAP32[$44 >> 2];
        HEAP32[$3 + 4 >> 2] = $6;
        $6 = $2 + 96 | 0;
        HEAP32[$6 >> 2] = 0;
        HEAP32[$6 + 4 >> 2] = 0;
        HEAPF64[$2 + 88 >> 3] = $27;
        HEAPF64[$2 + 80 >> 3] = $26;
        HEAPF64[$2 + 72 >> 3] = $25;
       }
      }
      CProfileSample___CProfileSample_28_29();
     }
     $41 = $41 + 1 | 0;
     if (($41 | 0) != ($17 | 0)) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $4 + 896 | 0;
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $39 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__integrateTransforms_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
  $38 = __stack_pointer - 16 | 0;
  __stack_pointer = $38;
  CProfileSample__CProfileSample_28char_20const__29($38 + 8 | 0, 3094);
  $4 = HEAP32[$0 + 368 >> 2];
  if (($4 | 0) > 0) {
   $43 = HEAP32[$0 + 376 >> 2];
   $2 = __stack_pointer - 544 | 0;
   __stack_pointer = $2;
   if (($4 | 0) > 0) {
    $3 = $2 + 8 | 0;
    $32 = $3 + 96 | 0;
    $14 = $3 - -64 | 0;
    $16 = $2 + 416 | 0;
    $33 = $16 - -64 | 0;
    $17 = $3 + 32 | 0;
    $34 = $16 + 32 | 0;
    $28 = $2 + 176 | 0;
    $3 = $2 + 232 | 0;
    $35 = $3 + 56 | 0;
    $36 = $3 + 24 | 0;
    $16 = $16 + 96 | 0;
    while (1) {
     $3 = HEAP32[$43 >> 2];
     HEAP32[$3 + 488 >> 2] = 0;
     HEAP32[$3 + 492 >> 2] = 1072693248;
     label$3 : {
      label$4 : {
       switch (HEAP32[$3 + 408 >> 2] - 2 | 0) {
       case 0:
       case 3:
        break label$3;
       default:
        break label$4;
       };
      }
      if (HEAPU8[$3 + 392 | 0] & 3) {
       break label$3
      }
      btRigidBody__predictIntegratedTransform_28double_2c_20btTransform__29($3, $1, $2 + 416 | 0);
      label$5 : {
       label$6 : {
        if (!HEAPU8[$0 + 56 | 0]) {
         break label$6
        }
        $9 = HEAPF64[$3 + 504 >> 3];
        $9 = $9 * $9;
        if ($9 == 0.0) {
         break label$6
        }
        $12 = HEAPF64[$2 + 528 >> 3] - HEAPF64[$3 + 120 >> 3];
        $26 = $12 * $12;
        $12 = HEAPF64[$2 + 512 >> 3] - HEAPF64[$3 + 104 >> 3];
        $15 = $12 * $12;
        $12 = HEAPF64[$2 + 520 >> 3] - HEAPF64[$3 + 112 >> 3];
        if (!($9 < $26 + ($15 + $12 * $12))) {
         break label$6
        }
        CProfileSample__CProfileSample_28char_20const__29($2 + 408 | 0, 3489);
        if (HEAP32[HEAP32[$3 + 380 >> 2] + 4 >> 2] <= 19) {
         HEAP32[8489] = HEAP32[8489] + 1;
         $7 = HEAP32[$0 + 96 >> 2];
         $10 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 36 >> 2]]($7) | 0;
         $7 = $3 + 104 | 0;
         $5 = HEAP32[$7 + 4 >> 2];
         HEAP32[$36 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$36 + 4 >> 2] = $5;
         $5 = $7 + 8 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         $8 = $36 + 8 | 0;
         HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$8 + 4 >> 2] = $6;
         $5 = $7 + 16 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         $8 = $36 + 16 | 0;
         HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$8 + 4 >> 2] = $6;
         $7 = $7 + 24 | 0;
         $5 = HEAP32[$7 + 4 >> 2];
         $6 = $36 + 24 | 0;
         HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$6 + 4 >> 2] = $5;
         $7 = HEAP32[$16 + 4 >> 2];
         HEAP32[$35 >> 2] = HEAP32[$16 >> 2];
         HEAP32[$35 + 4 >> 2] = $7;
         $7 = $16 + 8 | 0;
         $5 = HEAP32[$7 + 4 >> 2];
         $6 = $35 + 8 | 0;
         HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$6 + 4 >> 2] = $5;
         $5 = $16 + 16 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         $8 = $35 + 16 | 0;
         HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$8 + 4 >> 2] = $6;
         $6 = $16 + 24 | 0;
         $8 = HEAP32[$6 + 4 >> 2];
         $11 = $35 + 24 | 0;
         HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
         HEAP32[$11 + 4 >> 2] = $8;
         HEAP32[$2 + 248 >> 2] = 1;
         HEAP32[$2 + 252 >> 2] = -1;
         HEAP32[$2 + 240 >> 2] = 0;
         HEAP32[$2 + 244 >> 2] = 1072693248;
         HEAP32[$2 + 384 >> 2] = 0;
         HEAP32[$2 + 400 >> 2] = $10;
         HEAP32[$2 + 404 >> 2] = HEAP32[$0 + 24 >> 2];
         HEAP32[$2 + 392 >> 2] = 0;
         HEAP32[$2 + 396 >> 2] = 0;
         HEAP32[$2 + 232 >> 2] = 28744;
         HEAP32[$2 + 388 >> 2] = $3;
         $9 = HEAPF64[$3 + 496 >> 3];
         $47 = $2 + 136 | 0;
         btConvexInternalShape__btConvexInternalShape_28_29($47);
         $10 = $28 + 32 | 0;
         HEAP32[$10 >> 2] = 0;
         HEAP32[$10 + 4 >> 2] = 0;
         $10 = $28 + 24 | 0;
         HEAP32[$10 >> 2] = 0;
         HEAP32[$10 + 4 >> 2] = 0;
         $10 = $28 + 16 | 0;
         HEAP32[$10 >> 2] = 0;
         HEAP32[$10 + 4 >> 2] = 0;
         $10 = $28 + 8 | 0;
         HEAP32[$10 >> 2] = 0;
         HEAP32[$10 + 4 >> 2] = 0;
         HEAP32[$28 >> 2] = 0;
         HEAP32[$28 + 4 >> 2] = 0;
         HEAP32[$2 + 168 >> 2] = 0;
         HEAP32[$2 + 172 >> 2] = 1072693248;
         HEAP32[$2 + 160 >> 2] = 0;
         HEAP32[$2 + 164 >> 2] = 1072693248;
         HEAP32[$2 + 152 >> 2] = 0;
         HEAP32[$2 + 156 >> 2] = 1072693248;
         HEAP32[$2 + 140 >> 2] = 8;
         HEAP32[$2 + 136 >> 2] = 8920;
         HEAP32[$2 + 224 >> 2] = 0;
         HEAP32[$2 + 228 >> 2] = 0;
         HEAPF64[$2 + 216 >> 3] = $9;
         HEAPF64[$2 + 184 >> 3] = $9;
         HEAPF64[$2 + 392 >> 3] = HEAPF64[$0 + 72 >> 3];
         $10 = HEAP32[$3 + 376 >> 2];
         HEAP32[$2 + 248 >> 2] = HEAP32[$10 + 4 >> 2];
         HEAP32[$2 + 252 >> 2] = HEAP32[$10 + 8 >> 2];
         $25 = $2 + 416 | 0;
         $11 = $25 + 24 | 0;
         $13 = HEAP32[$11 + 4 >> 2];
         $10 = $2 + 8 | 0;
         $8 = $10 + 24 | 0;
         HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$8 + 4 >> 2] = $13;
         $13 = $25 + 16 | 0;
         $18 = HEAP32[$13 + 4 >> 2];
         $11 = $10 + 16 | 0;
         HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
         HEAP32[$11 + 4 >> 2] = $18;
         $13 = $25 + 8 | 0;
         $18 = HEAP32[$13 + 4 >> 2];
         $25 = $10 + 8 | 0;
         HEAP32[$25 >> 2] = HEAP32[$13 >> 2];
         HEAP32[$25 + 4 >> 2] = $18;
         $13 = HEAP32[$34 + 4 >> 2];
         HEAP32[$17 >> 2] = HEAP32[$34 >> 2];
         HEAP32[$17 + 4 >> 2] = $13;
         $18 = $34 + 8 | 0;
         $21 = HEAP32[$18 + 4 >> 2];
         $13 = $17 + 8 | 0;
         HEAP32[$13 >> 2] = HEAP32[$18 >> 2];
         HEAP32[$13 + 4 >> 2] = $21;
         $21 = $34 + 16 | 0;
         $19 = HEAP32[$21 + 4 >> 2];
         $18 = $17 + 16 | 0;
         HEAP32[$18 >> 2] = HEAP32[$21 >> 2];
         HEAP32[$18 + 4 >> 2] = $19;
         $19 = $34 + 24 | 0;
         $22 = HEAP32[$19 + 4 >> 2];
         $21 = $17 + 24 | 0;
         HEAP32[$21 >> 2] = HEAP32[$19 >> 2];
         HEAP32[$21 + 4 >> 2] = $22;
         $19 = HEAP32[$33 + 4 >> 2];
         HEAP32[$14 >> 2] = HEAP32[$33 >> 2];
         HEAP32[$14 + 4 >> 2] = $19;
         $22 = $33 + 8 | 0;
         $23 = HEAP32[$22 + 4 >> 2];
         $19 = $14 + 8 | 0;
         HEAP32[$19 >> 2] = HEAP32[$22 >> 2];
         HEAP32[$19 + 4 >> 2] = $23;
         $23 = $33 + 16 | 0;
         $20 = HEAP32[$23 + 4 >> 2];
         $22 = $14 + 16 | 0;
         HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
         HEAP32[$22 + 4 >> 2] = $20;
         $20 = $33 + 24 | 0;
         $39 = HEAP32[$20 + 4 >> 2];
         $23 = $14 + 24 | 0;
         HEAP32[$23 >> 2] = HEAP32[$20 >> 2];
         HEAP32[$23 + 4 >> 2] = $39;
         $20 = HEAP32[$2 + 420 >> 2];
         HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 416 >> 2];
         HEAP32[$2 + 12 >> 2] = $20;
         $20 = HEAP32[$6 + 4 >> 2];
         $39 = $32 + 24 | 0;
         HEAP32[$39 >> 2] = HEAP32[$6 >> 2];
         HEAP32[$39 + 4 >> 2] = $20;
         $6 = HEAP32[$5 + 4 >> 2];
         $20 = $32 + 16 | 0;
         HEAP32[$20 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$20 + 4 >> 2] = $6;
         $5 = HEAP32[$7 + 4 >> 2];
         $6 = $32 + 8 | 0;
         HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$6 + 4 >> 2] = $5;
         $7 = HEAP32[$16 + 4 >> 2];
         HEAP32[$32 >> 2] = HEAP32[$16 >> 2];
         HEAP32[$32 + 4 >> 2] = $7;
         $7 = $3 + 8 | 0;
         $5 = $7 + 8 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         HEAP32[$25 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$25 + 4 >> 2] = $6;
         $5 = $7 + 16 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$11 + 4 >> 2] = $6;
         $5 = $7 + 24 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$8 + 4 >> 2] = $6;
         $5 = HEAP32[$7 >> 2];
         $6 = HEAP32[$7 + 4 >> 2];
         $8 = $3 + 40 | 0;
         $11 = HEAP32[$8 + 4 >> 2];
         HEAP32[$17 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$17 + 4 >> 2] = $11;
         $8 = $3 + 48 | 0;
         $11 = HEAP32[$8 + 4 >> 2];
         HEAP32[$13 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$13 + 4 >> 2] = $11;
         $8 = $3 + 56 | 0;
         $11 = HEAP32[$8 + 4 >> 2];
         HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$18 + 4 >> 2] = $11;
         $8 = $3 - -64 | 0;
         $11 = HEAP32[$8 + 4 >> 2];
         HEAP32[$21 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$21 + 4 >> 2] = $11;
         HEAP32[$2 + 8 >> 2] = $5;
         HEAP32[$2 + 12 >> 2] = $6;
         $5 = $3 + 72 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$14 + 4 >> 2] = $6;
         $5 = $3 + 80 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         HEAP32[$19 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$19 + 4 >> 2] = $6;
         $5 = $3 + 88 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         HEAP32[$22 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$22 + 4 >> 2] = $6;
         $5 = $3 + 96 | 0;
         $6 = HEAP32[$5 + 4 >> 2];
         HEAP32[$23 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$23 + 4 >> 2] = $6;
         btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($0, $47, $7, $10, $2 + 232 | 0, 0.0);
         $9 = HEAPF64[$2 + 240 >> 3];
         if ($9 < 1.0) {
          break label$5
         }
        }
        CProfileSample___CProfileSample_28_29();
       }
       btRigidBody__proceedToTransform_28btTransform_20const__29($3, $2 + 416 | 0);
       break label$3;
      }
      HEAPF64[$3 + 488 >> 3] = $9;
      $7 = $2 + 416 | 0;
      btRigidBody__predictIntegratedTransform_28double_2c_20btTransform__29($3, $9 * $1, $7);
      HEAP32[$3 + 488 >> 2] = 0;
      HEAP32[$3 + 492 >> 2] = 0;
      btRigidBody__proceedToTransform_28btTransform_20const__29($3, $7);
      CProfileSample___CProfileSample_28_29();
     }
     $43 = $43 + 4 | 0;
     $4 = $4 - 1 | 0;
     if ($4) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $2 + 544 | 0;
  }
  if (HEAPU8[$0 + 435 | 0]) {
   CProfileSample__CProfileSample_28char_20const__29($38, 3245);
   $4 = HEAP32[$0 + 468 >> 2];
   if (($4 | 0) > 0) {
    while (1) {
     $14 = HEAP32[HEAP32[$0 + 476 >> 2] + ($44 << 2) >> 2];
     if (HEAP32[$14 + 1456 >> 2] > 0) {
      $4 = HEAP32[$14 + 1452 >> 2];
      $4 = HEAP32[$4 + 472 >> 2] << 30 >> 31 & $4;
      $2 = HEAP32[$14 + 1448 >> 2];
      $2 = HEAP32[$2 + 472 >> 2] << 30 >> 31 & $2;
      $3 = $14 + 232 | 0;
      $17 = 0;
      while (1) {
       $1 = HEAPF64[$2 + 432 >> 3] * HEAPF64[$4 + 432 >> 3];
       label$7 : {
        if (!($1 > 0.0)) {
         break label$7
        }
        $9 = HEAPF64[$3 >> 3];
        if ($9 == 0.0) {
         break label$7
        }
        $40 = HEAPF64[$3 - 144 >> 3];
        $48 = HEAPF64[$4 + 120 >> 3];
        $41 = HEAPF64[$3 - 152 >> 3];
        $49 = HEAPF64[$4 + 112 >> 3];
        $42 = HEAPF64[$3 - 160 >> 3];
        $50 = HEAPF64[$4 + 104 >> 3];
        $12 = $1 * ($9 * -HEAPF64[$3 - 80 >> 3]);
        $15 = $1 * ($9 * -HEAPF64[$3 - 88 >> 3]);
        $9 = $1 * ($9 * -HEAPF64[$3 - 96 >> 3]);
        $1 = HEAPF64[$2 + 736 >> 3];
        if ($1 != 0.0) {
         $29 = HEAPF64[$3 - 112 >> 3];
         $45 = HEAPF64[$2 + 120 >> 3];
         $27 = HEAPF64[$3 - 120 >> 3];
         $30 = HEAPF64[$2 + 112 >> 3];
         $31 = HEAPF64[$3 - 128 >> 3];
         $46 = HEAPF64[$2 + 104 >> 3];
         $37 = $9 * HEAPF64[$2 + 744 >> 3];
         HEAPF64[$2 + 672 >> 3] = $1 * $37 + HEAPF64[$2 + 672 >> 3];
         $24 = $15 * HEAPF64[$2 + 752 >> 3];
         HEAPF64[$2 + 680 >> 3] = $1 * $24 + HEAPF64[$2 + 680 >> 3];
         $26 = $1;
         $1 = $12 * HEAPF64[$2 + 760 >> 3];
         HEAPF64[$2 + 688 >> 3] = $26 * $1 + HEAPF64[$2 + 688 >> 3];
         $26 = HEAPF64[$2 + 1120 >> 3];
         $51 = HEAPF64[$2 + 656 >> 3];
         $52 = HEAPF64[$2 + 640 >> 3];
         $53 = HEAPF64[$2 + 648 >> 3];
         $54 = HEAPF64[$2 + 1112 >> 3];
         $55 = HEAPF64[$2 + 624 >> 3];
         $56 = HEAPF64[$2 + 608 >> 3];
         $57 = HEAPF64[$2 + 616 >> 3];
         $31 = $31 - $46;
         $30 = $27 - $30;
         $27 = $31 * $24 - $37 * $30;
         $29 = $29 - $45;
         $24 = $30 * $1 - $24 * $29;
         $1 = $29 * $37 - $1 * $31;
         HEAPF64[$2 + 704 >> 3] = (HEAPF64[$2 + 592 >> 3] * $27 + (HEAPF64[$2 + 576 >> 3] * $24 + $1 * HEAPF64[$2 + 584 >> 3])) * HEAPF64[$2 + 1104 >> 3] + HEAPF64[$2 + 704 >> 3];
         HEAPF64[$2 + 712 >> 3] = $54 * ($55 * $27 + ($56 * $24 + $1 * $57)) + HEAPF64[$2 + 712 >> 3];
         HEAPF64[$2 + 720 >> 3] = $26 * ($51 * $27 + ($52 * $24 + $1 * $53)) + HEAPF64[$2 + 720 >> 3];
        }
        $1 = HEAPF64[$4 + 736 >> 3];
        if ($1 == 0.0) {
         break label$7
        }
        $9 = HEAPF64[$4 + 744 >> 3] * -$9;
        HEAPF64[$4 + 672 >> 3] = $1 * $9 + HEAPF64[$4 + 672 >> 3];
        $15 = HEAPF64[$4 + 752 >> 3] * -$15;
        HEAPF64[$4 + 680 >> 3] = $1 * $15 + HEAPF64[$4 + 680 >> 3];
        $26 = $1;
        $1 = HEAPF64[$4 + 760 >> 3] * -$12;
        HEAPF64[$4 + 688 >> 3] = $26 * $1 + HEAPF64[$4 + 688 >> 3];
        $37 = HEAPF64[$4 + 1120 >> 3];
        $24 = HEAPF64[$4 + 656 >> 3];
        $27 = HEAPF64[$4 + 640 >> 3];
        $29 = HEAPF64[$4 + 648 >> 3];
        $45 = HEAPF64[$4 + 1112 >> 3];
        $30 = HEAPF64[$4 + 624 >> 3];
        $31 = HEAPF64[$4 + 608 >> 3];
        $46 = HEAPF64[$4 + 616 >> 3];
        $42 = $42 - $50;
        $41 = $41 - $49;
        $12 = $42 * $15 - $9 * $41;
        $40 = $40 - $48;
        $15 = $41 * $1 - $15 * $40;
        $1 = $40 * $9 - $1 * $42;
        HEAPF64[$4 + 704 >> 3] = (HEAPF64[$4 + 592 >> 3] * $12 + (HEAPF64[$4 + 576 >> 3] * $15 + $1 * HEAPF64[$4 + 584 >> 3])) * HEAPF64[$4 + 1104 >> 3] + HEAPF64[$4 + 704 >> 3];
        HEAPF64[$4 + 712 >> 3] = $45 * ($30 * $12 + ($31 * $15 + $1 * $46)) + HEAPF64[$4 + 712 >> 3];
        HEAPF64[$4 + 720 >> 3] = $37 * ($24 * $12 + ($27 * $15 + $1 * $29)) + HEAPF64[$4 + 720 >> 3];
       }
       $3 = $3 + 360 | 0;
       $17 = $17 + 1 | 0;
       if (($17 | 0) < HEAP32[$14 + 1456 >> 2]) {
        continue
       }
       break;
      };
      $4 = HEAP32[$0 + 468 >> 2];
     }
     $44 = $44 + 1 | 0;
     if (($44 | 0) < ($4 | 0)) {
      continue
     }
     break;
    }
   }
   CProfileSample___CProfileSample_28_29();
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $38 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__predictUnconstraintMotion_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0;
  $14 = __stack_pointer - 16 | 0;
  __stack_pointer = $14;
  CProfileSample__CProfileSample_28char_20const__29($14 + 8 | 0, 3283);
  $2 = HEAP32[$0 + 368 >> 2];
  if (($2 | 0) > 0) {
   while (1) {
    $3 = HEAP32[HEAP32[$0 + 376 >> 2] + $15 >> 2];
    if (!(HEAPU8[$3 + 392 | 0] & 3)) {
     $4 = HEAPF64[$3 + 672 >> 3];
     $6 = HEAPF64[$3 + 936 >> 3];
     $5 = pow(1.0 - $6, $1);
     $9 = $4 * $5;
     HEAPF64[$3 + 672 >> 3] = $9;
     $2 = $3 + 680 | 0;
     $10 = $5 * HEAPF64[$2 >> 3];
     HEAPF64[$2 >> 3] = $10;
     $2 = $3 + 688 | 0;
     $11 = $5 * HEAPF64[$2 >> 3];
     HEAPF64[$2 >> 3] = $11;
     $7 = HEAPF64[$3 + 704 >> 3];
     $5 = HEAPF64[$3 + 944 >> 3];
     $4 = pow(1.0 - $5, $1);
     $7 = $7 * $4;
     HEAPF64[$3 + 704 >> 3] = $7;
     $2 = $3 + 712 | 0;
     $12 = $4 * HEAPF64[$2 >> 3];
     HEAPF64[$2 >> 3] = $12;
     $2 = $3 + 720 | 0;
     $13 = $4 * HEAPF64[$2 >> 3];
     HEAPF64[$2 >> 3] = $13;
     __inlined_func$btRigidBody__applyDamping_28double_29 : {
      if (!HEAPU8[$3 + 952 | 0]) {
       break __inlined_func$btRigidBody__applyDamping_28double_29
      }
      if (!(!(HEAPF64[$3 + 976 >> 3] > $13 * $13 + ($7 * $7 + $12 * $12)) | !(HEAPF64[$3 + 968 >> 3] > $11 * $11 + ($9 * $9 + $10 * $10)))) {
       $4 = HEAPF64[$3 + 960 >> 3];
       $13 = $13 * $4;
       HEAPF64[$3 + 720 >> 3] = $13;
       $12 = $12 * $4;
       HEAPF64[$3 + 712 >> 3] = $12;
       $7 = $7 * $4;
       HEAPF64[$3 + 704 >> 3] = $7;
       $11 = $11 * $4;
       HEAPF64[$3 + 688 >> 3] = $11;
       $10 = $10 * $4;
       HEAPF64[$3 + 680 >> 3] = $10;
       $9 = $9 * $4;
       HEAPF64[$3 + 672 >> 3] = $9;
      }
      $4 = $6;
      $6 = Math_sqrt($11 * $11 + ($9 * $9 + $10 * $10));
      label$3 : {
       if (!($4 > $6)) {
        break label$3
       }
       if ($6 > .005) {
        $6 = 1.0 / $6;
        HEAPF64[$3 + 688 >> 3] = $11 - $11 * $6 * .005;
        HEAPF64[$3 + 680 >> 3] = $10 - $10 * $6 * .005;
        HEAPF64[$3 + 672 >> 3] = $9 - $9 * $6 * .005;
        break label$3;
       }
       $8 = $3 + 672 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       $2 = $8 + 24 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $2 = $8 + 16 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $2 = $8 + 8 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
      }
      $6 = $5;
      $5 = Math_sqrt($13 * $13 + ($7 * $7 + $12 * $12));
      if (!($6 > $5)) {
       break __inlined_func$btRigidBody__applyDamping_28double_29
      }
      if ($5 > .005) {
       $5 = 1.0 / $5;
       HEAPF64[$3 + 720 >> 3] = $13 - $13 * $5 * .005;
       HEAPF64[$3 + 712 >> 3] = $12 - $12 * $5 * .005;
       HEAPF64[$3 + 704 >> 3] = $7 - $7 * $5 * .005;
       break __inlined_func$btRigidBody__applyDamping_28double_29;
      }
      $8 = $3 + 704 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      $2 = $8 + 24 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $2 = $8 + 16 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $2 = $8 + 8 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
     }
     btRigidBody__predictIntegratedTransform_28double_2c_20btTransform__29($3, $1, $3 + 136 | 0);
     $2 = HEAP32[$0 + 368 >> 2];
    }
    $15 = $15 + 4 | 0;
    $16 = $16 + 1 | 0;
    if (($16 | 0) < ($2 | 0)) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $14 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__debugDrawConstraint_28btTypedConstraint__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
  $2 = __stack_pointer - 448 | 0;
  __stack_pointer = $2;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4) | 0;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 56 >> 2]]($3) | 0;
  $26 = HEAPF64[$1 + 48 >> 3];
  label$1 : {
   if ($26 <= 0.0) {
    break label$1
   }
   $6 = $4 & 2048;
   $10 = $3 & 4096;
   label$2 : {
    switch (HEAP32[$1 + 4 >> 2] - 3 | 0) {
    case 0:
     $4 = $2 + 320 | 0;
     $3 = $4 + 88 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 80 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     $3 = $4 + 72 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $2 + 384 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 56 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 48 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $2 + 352 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 40 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     HEAP32[$2 + 328 >> 2] = 0;
     HEAP32[$2 + 332 >> 2] = 0;
     HEAP32[$2 + 320 >> 2] = 0;
     HEAP32[$2 + 324 >> 2] = 1072693248;
     $3 = HEAP32[$1 + 32 >> 2];
     $15 = HEAPF64[$3 + 104 >> 3];
     $19 = HEAPF64[$3 + 16 >> 3];
     $17 = HEAPF64[$3 + 24 >> 3];
     $20 = HEAPF64[$3 + 120 >> 3];
     $21 = HEAPF64[$3 + 80 >> 3];
     $22 = HEAPF64[$3 + 72 >> 3];
     $23 = HEAPF64[$3 + 88 >> 3];
     $12 = HEAPF64[$3 + 112 >> 3];
     $14 = HEAPF64[$3 + 48 >> 3];
     $13 = HEAPF64[$3 + 40 >> 3];
     $24 = HEAPF64[$3 + 56 >> 3];
     $25 = HEAPF64[$3 + 8 >> 3];
     $3 = $4 + 120 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $5 = $4 + 104 | 0;
     $38 = $12;
     $12 = HEAPF64[$1 + 584 >> 3];
     $39 = $13;
     $13 = HEAPF64[$1 + 568 >> 3];
     $36 = $14;
     $14 = HEAPF64[$1 + 576 >> 3];
     HEAPF64[$5 >> 3] = $38 + ($24 * $12 + ($39 * $13 + $36 * $14));
     $8 = $4 + 112 | 0;
     HEAPF64[$8 >> 3] = $20 + ($12 * $23 + ($13 * $22 + $14 * $21));
     HEAPF64[$2 + 416 >> 3] = $15 + ($12 * $17 + ($13 * $25 + $14 * $19));
     $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 64 >> 2]]($11, $4, $26);
     $4 = HEAP32[$1 + 36 >> 2];
     $15 = HEAPF64[$4 + 104 >> 3];
     $19 = HEAPF64[$4 + 16 >> 3];
     $17 = HEAPF64[$4 + 24 >> 3];
     $20 = HEAPF64[$4 + 112 >> 3];
     $21 = HEAPF64[$4 + 56 >> 3];
     $22 = HEAPF64[$4 + 40 >> 3];
     $23 = HEAPF64[$4 + 48 >> 3];
     $12 = HEAPF64[$4 + 120 >> 3];
     $13 = HEAPF64[$4 + 88 >> 3];
     $14 = HEAPF64[$4 + 72 >> 3];
     $24 = HEAPF64[$4 + 80 >> 3];
     $25 = HEAPF64[$4 + 8 >> 3];
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $36 = $12;
     $12 = HEAPF64[$1 + 616 >> 3];
     $38 = $13 * $12;
     $13 = HEAPF64[$1 + 600 >> 3];
     $39 = $14 * $13;
     $14 = HEAPF64[$1 + 608 >> 3];
     HEAPF64[$8 >> 3] = $36 + ($38 + ($39 + $24 * $14));
     HEAPF64[$5 >> 3] = $20 + ($12 * $21 + ($13 * $22 + $14 * $23));
     HEAPF64[$2 + 416 >> 3] = $15 + ($12 * $17 + ($13 * $25 + $14 * $19));
     if (!$6) {
      break label$1
     }
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $2 + 320 | 0, $26);
     break label$1;
    case 1:
     $4 = HEAP32[$1 + 32 >> 2];
     $38 = HEAPF64[$4 + 104 >> 3];
     $12 = HEAPF64[$4 + 16 >> 3];
     $13 = HEAPF64[$4 + 24 >> 3];
     $23 = HEAPF64[$1 + 1136 >> 3];
     $24 = HEAPF64[$1 + 1072 >> 3];
     $25 = HEAPF64[$1 + 1104 >> 3];
     $39 = HEAPF64[$4 + 112 >> 3];
     $36 = HEAPF64[$4 + 120 >> 3];
     $27 = HEAPF64[$1 + 1184 >> 3];
     $28 = HEAPF64[$1 + 1168 >> 3];
     $29 = HEAPF64[$1 + 1176 >> 3];
     $14 = HEAPF64[$4 + 56 >> 3];
     $15 = HEAPF64[$4 + 40 >> 3];
     $19 = HEAPF64[$4 + 48 >> 3];
     $30 = HEAPF64[$1 + 1144 >> 3];
     $31 = HEAPF64[$1 + 1080 >> 3];
     $32 = HEAPF64[$1 + 1112 >> 3];
     $33 = HEAPF64[$1 + 1152 >> 3];
     $17 = HEAPF64[$4 + 88 >> 3];
     $34 = HEAPF64[$1 + 1088 >> 3];
     $20 = HEAPF64[$4 + 72 >> 3];
     $35 = HEAPF64[$1 + 1120 >> 3];
     $21 = HEAPF64[$4 + 80 >> 3];
     $22 = HEAPF64[$4 + 8 >> 3];
     $4 = $2 + 320 | 0;
     $3 = $4 + 120 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 88 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 56 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAPF64[$4 + 80 >> 3] = $33 * $17 + ($34 * $20 + $35 * $21);
     HEAPF64[$4 + 72 >> 3] = $30 * $17 + ($31 * $20 + $32 * $21);
     HEAPF64[$4 + 48 >> 3] = $33 * $14 + ($34 * $15 + $35 * $19);
     HEAPF64[$4 + 40 >> 3] = $30 * $14 + ($31 * $15 + $32 * $19);
     HEAPF64[$4 + 112 >> 3] = $36 + ($27 * $17 + ($28 * $20 + $21 * $29));
     HEAPF64[$4 + 104 >> 3] = $39 + ($27 * $14 + ($28 * $15 + $19 * $29));
     HEAP32[$2 + 344 >> 2] = 0;
     HEAP32[$2 + 348 >> 2] = 0;
     HEAPF64[$2 + 384 >> 3] = $23 * $17 + ($24 * $20 + $25 * $21);
     HEAPF64[$2 + 352 >> 3] = $23 * $14 + ($24 * $15 + $25 * $19);
     HEAPF64[$2 + 336 >> 3] = $33 * $13 + ($34 * $22 + $12 * $35);
     HEAPF64[$2 + 328 >> 3] = $30 * $13 + ($31 * $22 + $12 * $32);
     HEAPF64[$2 + 320 >> 3] = $23 * $13 + ($24 * $22 + $25 * $12);
     HEAPF64[$2 + 416 >> 3] = $38 + ($27 * $13 + ($28 * $22 + $12 * $29));
     label$8 : {
      if ($6) {
       $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $3 = $2 + 320 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $3, $26);
       $4 = HEAP32[$1 + 36 >> 2];
       $38 = HEAPF64[$4 + 104 >> 3];
       $39 = HEAPF64[$4 + 112 >> 3];
       $36 = HEAPF64[$4 + 120 >> 3];
       $23 = HEAPF64[$1 + 1312 >> 3];
       $24 = HEAPF64[$1 + 1296 >> 3];
       $25 = HEAPF64[$1 + 1304 >> 3];
       $12 = HEAPF64[$4 + 16 >> 3];
       $13 = HEAPF64[$4 + 24 >> 3];
       $14 = HEAPF64[$4 + 56 >> 3];
       $15 = HEAPF64[$4 + 40 >> 3];
       $19 = HEAPF64[$4 + 48 >> 3];
       $27 = HEAPF64[$1 + 1264 >> 3];
       $28 = HEAPF64[$1 + 1200 >> 3];
       $29 = HEAPF64[$1 + 1232 >> 3];
       $30 = HEAPF64[$1 + 1272 >> 3];
       $31 = HEAPF64[$1 + 1208 >> 3];
       $32 = HEAPF64[$1 + 1240 >> 3];
       $33 = HEAPF64[$1 + 1280 >> 3];
       $17 = HEAPF64[$4 + 88 >> 3];
       $34 = HEAPF64[$1 + 1216 >> 3];
       $20 = HEAPF64[$4 + 72 >> 3];
       $35 = HEAPF64[$1 + 1248 >> 3];
       $21 = HEAPF64[$4 + 80 >> 3];
       $22 = HEAPF64[$4 + 8 >> 3];
       HEAP32[$2 + 440 >> 2] = 0;
       HEAP32[$2 + 444 >> 2] = 0;
       HEAP32[$2 + 408 >> 2] = 0;
       HEAP32[$2 + 412 >> 2] = 0;
       HEAP32[$2 + 376 >> 2] = 0;
       HEAP32[$2 + 380 >> 2] = 0;
       HEAP32[$2 + 344 >> 2] = 0;
       HEAP32[$2 + 348 >> 2] = 0;
       HEAPF64[$2 + 400 >> 3] = $33 * $17 + ($34 * $20 + $35 * $21);
       HEAPF64[$2 + 392 >> 3] = $30 * $17 + ($31 * $20 + $32 * $21);
       HEAPF64[$2 + 384 >> 3] = $27 * $17 + ($28 * $20 + $29 * $21);
       HEAPF64[$2 + 368 >> 3] = $33 * $14 + ($34 * $15 + $35 * $19);
       HEAPF64[$2 + 360 >> 3] = $30 * $14 + ($31 * $15 + $32 * $19);
       HEAPF64[$2 + 352 >> 3] = $27 * $14 + ($28 * $15 + $29 * $19);
       HEAPF64[$2 + 336 >> 3] = $33 * $13 + ($34 * $22 + $12 * $35);
       HEAPF64[$2 + 432 >> 3] = $36 + ($23 * $17 + ($24 * $20 + $21 * $25));
       HEAPF64[$2 + 424 >> 3] = $39 + ($23 * $14 + ($24 * $15 + $19 * $25));
       HEAPF64[$2 + 416 >> 3] = $38 + ($23 * $13 + ($24 * $22 + $12 * $25));
       HEAPF64[$2 + 328 >> 3] = $30 * $13 + ($31 * $22 + $12 * $32);
       HEAPF64[$2 + 320 >> 3] = $27 * $13 + ($28 * $22 + $29 * $12);
       $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $3, $26);
       break label$8;
      }
      $4 = HEAP32[$1 + 36 >> 2];
      $38 = HEAPF64[$4 + 104 >> 3];
      $39 = HEAPF64[$4 + 112 >> 3];
      $36 = HEAPF64[$4 + 120 >> 3];
      $23 = HEAPF64[$1 + 1312 >> 3];
      $24 = HEAPF64[$1 + 1296 >> 3];
      $25 = HEAPF64[$1 + 1304 >> 3];
      $12 = HEAPF64[$4 + 16 >> 3];
      $13 = HEAPF64[$4 + 24 >> 3];
      $14 = HEAPF64[$4 + 56 >> 3];
      $15 = HEAPF64[$4 + 40 >> 3];
      $19 = HEAPF64[$4 + 48 >> 3];
      $27 = HEAPF64[$1 + 1264 >> 3];
      $28 = HEAPF64[$1 + 1200 >> 3];
      $29 = HEAPF64[$1 + 1232 >> 3];
      $30 = HEAPF64[$1 + 1272 >> 3];
      $31 = HEAPF64[$1 + 1208 >> 3];
      $32 = HEAPF64[$1 + 1240 >> 3];
      $33 = HEAPF64[$1 + 1280 >> 3];
      $17 = HEAPF64[$4 + 88 >> 3];
      $34 = HEAPF64[$1 + 1216 >> 3];
      $20 = HEAPF64[$4 + 72 >> 3];
      $35 = HEAPF64[$1 + 1248 >> 3];
      $21 = HEAPF64[$4 + 80 >> 3];
      $22 = HEAPF64[$4 + 8 >> 3];
      HEAP32[$2 + 440 >> 2] = 0;
      HEAP32[$2 + 444 >> 2] = 0;
      HEAP32[$2 + 408 >> 2] = 0;
      HEAP32[$2 + 412 >> 2] = 0;
      HEAP32[$2 + 376 >> 2] = 0;
      HEAP32[$2 + 380 >> 2] = 0;
      HEAP32[$2 + 344 >> 2] = 0;
      HEAP32[$2 + 348 >> 2] = 0;
      HEAPF64[$2 + 400 >> 3] = $33 * $17 + ($34 * $20 + $35 * $21);
      HEAPF64[$2 + 392 >> 3] = $30 * $17 + ($31 * $20 + $32 * $21);
      HEAPF64[$2 + 384 >> 3] = $27 * $17 + ($28 * $20 + $29 * $21);
      HEAPF64[$2 + 368 >> 3] = $33 * $14 + ($34 * $15 + $35 * $19);
      HEAPF64[$2 + 360 >> 3] = $30 * $14 + ($31 * $15 + $32 * $19);
      HEAPF64[$2 + 352 >> 3] = $27 * $14 + ($28 * $15 + $29 * $19);
      HEAPF64[$2 + 336 >> 3] = $33 * $13 + ($34 * $22 + $12 * $35);
      HEAPF64[$2 + 328 >> 3] = $30 * $13 + ($31 * $22 + $12 * $32);
      HEAPF64[$2 + 320 >> 3] = $27 * $13 + ($28 * $22 + $29 * $12);
      HEAPF64[$2 + 432 >> 3] = $36 + ($23 * $17 + ($24 * $20 + $21 * $25));
      HEAPF64[$2 + 424 >> 3] = $39 + ($23 * $14 + ($24 * $15 + $19 * $25));
      HEAPF64[$2 + 416 >> 3] = $38 + ($23 * $13 + ($24 * $22 + $12 * $25));
     }
     $9 = !$10;
     $4 = $1 + 1344 | 0;
     $12 = fmod(HEAPF64[$4 >> 3] - HEAPF64[$4 + 8 >> 3]);
     __inlined_func$btAngularLimit__getLow_28_29_20const : {
      if ($12 < -3.141592653589793) {
       $13 = $12 + 6.283185307179586;
       break __inlined_func$btAngularLimit__getLow_28_29_20const;
      }
      $13 = $12 > 3.141592653589793 ? $12 + -6.283185307179586 : $12;
     }
     $12 = fmod(HEAPF64[$4 >> 3] + HEAPF64[$4 + 8 >> 3]);
     __inlined_func$btAngularLimit__getHigh_28_29_20const : {
      if ($12 < -3.141592653589793) {
       $12 = $12 + 6.283185307179586;
       break __inlined_func$btAngularLimit__getHigh_28_29_20const;
      }
      $12 = $12 > 3.141592653589793 ? $12 + -6.283185307179586 : $12;
     }
     if ($9 | $13 == $12) {
      break label$1
     }
     $14 = HEAPF64[$1 + 1352 >> 3];
     HEAPF64[$2 + 128 >> 3] = HEAPF64[$2 + 336 >> 3];
     HEAPF64[$2 + 136 >> 3] = HEAPF64[$2 + 368 >> 3];
     HEAP32[$2 + 152 >> 2] = 0;
     HEAP32[$2 + 156 >> 2] = 0;
     HEAPF64[$2 + 144 >> 3] = HEAPF64[$2 + 400 >> 3];
     HEAP32[$2 + 312 >> 2] = 0;
     HEAP32[$2 + 316 >> 2] = 0;
     HEAPF64[$2 + 304 >> 3] = HEAPF64[$2 + 384 >> 3];
     HEAPF64[$2 + 288 >> 3] = HEAPF64[$2 + 320 >> 3];
     HEAPF64[$2 + 296 >> 3] = HEAPF64[$2 + 352 >> 3];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $1 = $2 + 280 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $2 + 272 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $2 + 264 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$2 + 256 >> 2] = 0;
     HEAP32[$2 + 260 >> 2] = 0;
     $1 = $14 > 0.0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2 + 416 | 0, $2 + 128 | 0, $2 + 288 | 0, $26, $26, $1 ? $13 : 0.0, $1 ? $12 : 6.283185307179586, $2 + 256 | 0, $1, 10.0);
     break label$1;
    case 2:
     $4 = HEAP32[$1 + 32 >> 2];
     $38 = HEAPF64[$4 + 104 >> 3];
     $12 = HEAPF64[$4 + 16 >> 3];
     $13 = HEAPF64[$4 + 24 >> 3];
     $23 = HEAPF64[$1 + 632 >> 3];
     $7 = $1 + 568 | 0;
     $24 = HEAPF64[$7 >> 3];
     $25 = HEAPF64[$1 + 600 >> 3];
     $39 = HEAPF64[$4 + 112 >> 3];
     $36 = HEAPF64[$4 + 120 >> 3];
     $27 = HEAPF64[$1 + 680 >> 3];
     $28 = HEAPF64[$1 + 664 >> 3];
     $29 = HEAPF64[$1 + 672 >> 3];
     $14 = HEAPF64[$4 + 56 >> 3];
     $15 = HEAPF64[$4 + 40 >> 3];
     $19 = HEAPF64[$4 + 48 >> 3];
     $30 = HEAPF64[$1 + 640 >> 3];
     $31 = HEAPF64[$1 + 576 >> 3];
     $32 = HEAPF64[$1 + 608 >> 3];
     $33 = HEAPF64[$1 + 648 >> 3];
     $17 = HEAPF64[$4 + 88 >> 3];
     $34 = HEAPF64[$1 + 584 >> 3];
     $20 = HEAPF64[$4 + 72 >> 3];
     $35 = HEAPF64[$1 + 616 >> 3];
     $21 = HEAPF64[$4 + 80 >> 3];
     $22 = HEAPF64[$4 + 8 >> 3];
     $4 = $2 + 320 | 0;
     $3 = $4 + 120 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 88 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $4 + 56 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAPF64[$4 + 80 >> 3] = $33 * $17 + ($34 * $20 + $35 * $21);
     HEAPF64[$4 + 72 >> 3] = $30 * $17 + ($31 * $20 + $32 * $21);
     HEAPF64[$4 + 48 >> 3] = $33 * $14 + ($34 * $15 + $35 * $19);
     HEAPF64[$4 + 40 >> 3] = $30 * $14 + ($31 * $15 + $32 * $19);
     HEAPF64[$4 + 112 >> 3] = $36 + ($27 * $17 + ($28 * $20 + $21 * $29));
     HEAPF64[$4 + 104 >> 3] = $39 + ($27 * $14 + ($28 * $15 + $19 * $29));
     HEAP32[$2 + 344 >> 2] = 0;
     HEAP32[$2 + 348 >> 2] = 0;
     HEAPF64[$2 + 384 >> 3] = $23 * $17 + ($24 * $20 + $25 * $21);
     HEAPF64[$2 + 352 >> 3] = $23 * $14 + ($24 * $15 + $25 * $19);
     HEAPF64[$2 + 336 >> 3] = $33 * $13 + ($34 * $22 + $12 * $35);
     HEAPF64[$2 + 328 >> 3] = $30 * $13 + ($31 * $22 + $12 * $32);
     HEAPF64[$2 + 320 >> 3] = $23 * $13 + ($24 * $22 + $25 * $12);
     HEAPF64[$2 + 416 >> 3] = $38 + ($27 * $13 + ($28 * $22 + $12 * $29));
     label$10 : {
      if ($6) {
       $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $3 = $2 + 320 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $3, $26);
       $4 = HEAP32[$1 + 36 >> 2];
       $38 = HEAPF64[$4 + 104 >> 3];
       $39 = HEAPF64[$4 + 112 >> 3];
       $36 = HEAPF64[$4 + 120 >> 3];
       $23 = HEAPF64[$1 + 808 >> 3];
       $24 = HEAPF64[$1 + 792 >> 3];
       $25 = HEAPF64[$1 + 800 >> 3];
       $12 = HEAPF64[$4 + 16 >> 3];
       $13 = HEAPF64[$4 + 24 >> 3];
       $14 = HEAPF64[$4 + 56 >> 3];
       $15 = HEAPF64[$4 + 40 >> 3];
       $19 = HEAPF64[$4 + 48 >> 3];
       $27 = HEAPF64[$1 + 760 >> 3];
       $28 = HEAPF64[$1 + 696 >> 3];
       $29 = HEAPF64[$1 + 728 >> 3];
       $30 = HEAPF64[$1 + 768 >> 3];
       $31 = HEAPF64[$1 + 704 >> 3];
       $32 = HEAPF64[$1 + 736 >> 3];
       $33 = HEAPF64[$1 + 776 >> 3];
       $17 = HEAPF64[$4 + 88 >> 3];
       $34 = HEAPF64[$1 + 712 >> 3];
       $20 = HEAPF64[$4 + 72 >> 3];
       $35 = HEAPF64[$1 + 744 >> 3];
       $21 = HEAPF64[$4 + 80 >> 3];
       $22 = HEAPF64[$4 + 8 >> 3];
       HEAP32[$2 + 440 >> 2] = 0;
       HEAP32[$2 + 444 >> 2] = 0;
       HEAP32[$2 + 408 >> 2] = 0;
       HEAP32[$2 + 412 >> 2] = 0;
       HEAP32[$2 + 376 >> 2] = 0;
       HEAP32[$2 + 380 >> 2] = 0;
       HEAP32[$2 + 344 >> 2] = 0;
       HEAP32[$2 + 348 >> 2] = 0;
       HEAPF64[$2 + 400 >> 3] = $33 * $17 + ($34 * $20 + $35 * $21);
       HEAPF64[$2 + 392 >> 3] = $30 * $17 + ($31 * $20 + $32 * $21);
       HEAPF64[$2 + 384 >> 3] = $27 * $17 + ($28 * $20 + $29 * $21);
       HEAPF64[$2 + 368 >> 3] = $33 * $14 + ($34 * $15 + $35 * $19);
       HEAPF64[$2 + 360 >> 3] = $30 * $14 + ($31 * $15 + $32 * $19);
       HEAPF64[$2 + 352 >> 3] = $27 * $14 + ($28 * $15 + $29 * $19);
       HEAPF64[$2 + 336 >> 3] = $33 * $13 + ($34 * $22 + $12 * $35);
       HEAPF64[$2 + 432 >> 3] = $36 + ($23 * $17 + ($24 * $20 + $21 * $25));
       HEAPF64[$2 + 424 >> 3] = $39 + ($23 * $14 + ($24 * $15 + $19 * $25));
       HEAPF64[$2 + 416 >> 3] = $38 + ($23 * $13 + ($24 * $22 + $12 * $25));
       HEAPF64[$2 + 328 >> 3] = $30 * $13 + ($31 * $22 + $12 * $32);
       HEAPF64[$2 + 320 >> 3] = $27 * $13 + ($28 * $22 + $29 * $12);
       $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $3, $26);
       break label$10;
      }
      $4 = HEAP32[$1 + 36 >> 2];
      $38 = HEAPF64[$4 + 104 >> 3];
      $39 = HEAPF64[$4 + 112 >> 3];
      $36 = HEAPF64[$4 + 120 >> 3];
      $23 = HEAPF64[$1 + 808 >> 3];
      $24 = HEAPF64[$1 + 792 >> 3];
      $25 = HEAPF64[$1 + 800 >> 3];
      $12 = HEAPF64[$4 + 16 >> 3];
      $13 = HEAPF64[$4 + 24 >> 3];
      $14 = HEAPF64[$4 + 56 >> 3];
      $15 = HEAPF64[$4 + 40 >> 3];
      $19 = HEAPF64[$4 + 48 >> 3];
      $27 = HEAPF64[$1 + 760 >> 3];
      $28 = HEAPF64[$1 + 696 >> 3];
      $29 = HEAPF64[$1 + 728 >> 3];
      $30 = HEAPF64[$1 + 768 >> 3];
      $31 = HEAPF64[$1 + 704 >> 3];
      $32 = HEAPF64[$1 + 736 >> 3];
      $33 = HEAPF64[$1 + 776 >> 3];
      $17 = HEAPF64[$4 + 88 >> 3];
      $34 = HEAPF64[$1 + 712 >> 3];
      $20 = HEAPF64[$4 + 72 >> 3];
      $35 = HEAPF64[$1 + 744 >> 3];
      $21 = HEAPF64[$4 + 80 >> 3];
      $22 = HEAPF64[$4 + 8 >> 3];
      HEAP32[$2 + 440 >> 2] = 0;
      HEAP32[$2 + 444 >> 2] = 0;
      HEAP32[$2 + 408 >> 2] = 0;
      HEAP32[$2 + 412 >> 2] = 0;
      HEAP32[$2 + 376 >> 2] = 0;
      HEAP32[$2 + 380 >> 2] = 0;
      HEAP32[$2 + 344 >> 2] = 0;
      HEAP32[$2 + 348 >> 2] = 0;
      HEAPF64[$2 + 400 >> 3] = $33 * $17 + ($34 * $20 + $35 * $21);
      HEAPF64[$2 + 392 >> 3] = $30 * $17 + ($31 * $20 + $32 * $21);
      HEAPF64[$2 + 384 >> 3] = $27 * $17 + ($28 * $20 + $29 * $21);
      HEAPF64[$2 + 368 >> 3] = $33 * $14 + ($34 * $15 + $35 * $19);
      HEAPF64[$2 + 360 >> 3] = $30 * $14 + ($31 * $15 + $32 * $19);
      HEAPF64[$2 + 352 >> 3] = $27 * $14 + ($28 * $15 + $29 * $19);
      HEAPF64[$2 + 336 >> 3] = $33 * $13 + ($34 * $22 + $12 * $35);
      HEAPF64[$2 + 328 >> 3] = $30 * $13 + ($31 * $22 + $12 * $32);
      HEAPF64[$2 + 320 >> 3] = $27 * $13 + ($28 * $22 + $29 * $12);
      HEAPF64[$2 + 432 >> 3] = $36 + ($23 * $17 + ($24 * $20 + $21 * $25));
      HEAPF64[$2 + 424 >> 3] = $39 + ($23 * $14 + ($24 * $15 + $19 * $25));
      HEAPF64[$2 + 416 >> 3] = $38 + ($23 * $13 + ($24 * $22 + $12 * $25));
     }
     if (!$10) {
      break label$1
     }
     btConeTwistConstraint__GetPointForAngle_28double_2c_20double_29_20const($2 + 288 | 0, $1, 6.0868356625, $26);
     HEAP32[$2 + 312 >> 2] = 0;
     HEAP32[$2 + 316 >> 2] = 0;
     $12 = HEAPF64[$2 + 304 >> 3];
     $13 = HEAPF64[$2 + 288 >> 3];
     $14 = HEAPF64[$2 + 296 >> 3];
     HEAPF64[$2 + 304 >> 3] = $12 * HEAPF64[$2 + 400 >> 3] + ($13 * HEAPF64[$2 + 384 >> 3] + $14 * HEAPF64[$2 + 392 >> 3]) + HEAPF64[$2 + 432 >> 3];
     HEAPF64[$2 + 296 >> 3] = $12 * HEAPF64[$2 + 368 >> 3] + ($13 * HEAPF64[$2 + 352 >> 3] + $14 * HEAPF64[$2 + 360 >> 3]) + HEAPF64[$2 + 424 >> 3];
     HEAPF64[$2 + 288 >> 3] = $12 * HEAPF64[$2 + 336 >> 3] + ($13 * HEAPF64[$2 + 320 >> 3] + $14 * HEAPF64[$2 + 328 >> 3]) + HEAPF64[$2 + 416 >> 3];
     $4 = $2 + 416 | 0;
     $12 = 0.0;
     $8 = $2 + 256 | 0;
     $3 = $8 + 24 | 0;
     $5 = $8 + 16 | 0;
     $8 = $8 + 8 | 0;
     while (1) {
      $16 = $2 + 128 | 0;
      btConeTwistConstraint__GetPointForAngle_28double_2c_20double_29_20const($16, $1, $12 * 6.2831852 * .03125, $26);
      HEAP32[$2 + 152 >> 2] = 0;
      HEAP32[$2 + 156 >> 2] = 0;
      $13 = HEAPF64[$2 + 144 >> 3];
      $14 = HEAPF64[$2 + 128 >> 3];
      $15 = HEAPF64[$2 + 136 >> 3];
      HEAPF64[$2 + 144 >> 3] = $13 * HEAPF64[$2 + 400 >> 3] + ($14 * HEAPF64[$2 + 384 >> 3] + $15 * HEAPF64[$2 + 392 >> 3]) + HEAPF64[$2 + 432 >> 3];
      HEAPF64[$2 + 136 >> 3] = $13 * HEAPF64[$2 + 368 >> 3] + ($14 * HEAPF64[$2 + 352 >> 3] + $15 * HEAPF64[$2 + 360 >> 3]) + HEAPF64[$2 + 424 >> 3];
      HEAPF64[$2 + 128 >> 3] = $13 * HEAPF64[$2 + 336 >> 3] + ($14 * HEAPF64[$2 + 320 >> 3] + $15 * HEAPF64[$2 + 328 >> 3]) + HEAPF64[$2 + 416 >> 3];
      $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAP32[$2 + 256 >> 2] = 0;
      HEAP32[$2 + 260 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 16 >> 2]]($11, $2 + 288 | 0, $16, $2 + 256 | 0);
      if (!($18 & 3)) {
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       HEAP32[$5 + 4 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       HEAP32[$2 + 256 >> 2] = 0;
       HEAP32[$2 + 260 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 16 >> 2]]($11, $4, $2 + 128 | 0, $2 + 256 | 0);
      }
      $11 = $2 + 128 | 0;
      $6 = $11 + 24 | 0;
      $10 = HEAP32[$6 + 4 >> 2];
      $16 = $2 + 288 | 0;
      $9 = $16 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $6 = $11 + 16 | 0;
      $10 = HEAP32[$6 + 4 >> 2];
      $9 = $16 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $11 = $11 + 8 | 0;
      $6 = HEAP32[$11 + 4 >> 2];
      $16 = $16 + 8 | 0;
      HEAP32[$16 >> 2] = HEAP32[$11 >> 2];
      HEAP32[$16 + 4 >> 2] = $6;
      $11 = HEAP32[$2 + 132 >> 2];
      HEAP32[$2 + 288 >> 2] = HEAP32[$2 + 128 >> 2];
      HEAP32[$2 + 292 >> 2] = $11;
      $12 = $12 + 1.0;
      $18 = $18 + 1 | 0;
      if (($18 | 0) != 32) {
       continue
      }
      break;
     };
     $12 = HEAPF64[$1 + 992 >> 3];
     $13 = HEAPF64[$1 + 872 >> 3];
     $5 = HEAP32[$1 + 36 >> 2];
     label$14 : {
      if (HEAPF64[$5 + 736 >> 3] > 0.0) {
       $3 = $2 + 128 | 0;
       btTransform__operator__28btTransform_20const__29_20const($3, $5 + 8 | 0, $1 + 696 | 0);
       break label$14;
      }
      $3 = $2 + 128 | 0;
      btTransform__operator__28btTransform_20const__29_20const($3, HEAP32[$1 + 32 >> 2] + 8 | 0, $7);
     }
     $5 = $3 + 24 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $1 = $2 + 320 | 0;
     $11 = $1 + 24 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $3 + 16 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $1 + 16 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $3 + 8 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $1 + 8 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $3 + 40 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $1 + 40 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $3 + 48 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $1 + 48 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $3 + 56 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $1 + 56 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $3 + 72 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $1 + 72 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $3 + 80 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $1 + 80 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $3 = $3 + 88 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $1 = $1 + 88 | 0;
     HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 4 >> 2] = $5;
     $1 = HEAP32[$2 + 132 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$2 + 128 >> 2];
     HEAP32[$2 + 324 >> 2] = $1;
     $1 = HEAP32[$2 + 164 >> 2];
     HEAP32[$2 + 352 >> 2] = HEAP32[$2 + 160 >> 2];
     HEAP32[$2 + 356 >> 2] = $1;
     $1 = HEAP32[$2 + 196 >> 2];
     HEAP32[$2 + 384 >> 2] = HEAP32[$2 + 192 >> 2];
     HEAP32[$2 + 388 >> 2] = $1;
     $1 = $2 + 248 | 0;
     $3 = HEAP32[$1 + 4 >> 2];
     $6 = $4 + 24 | 0;
     $5 = $6;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $1 = $2 + 240 | 0;
     $3 = HEAP32[$1 + 4 >> 2];
     $7 = $4 + 16 | 0;
     $5 = $7;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $1 = $2 + 232 | 0;
     $3 = HEAP32[$1 + 4 >> 2];
     $9 = $4 + 8 | 0;
     $5 = $9;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $1 = HEAP32[$2 + 228 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$2 + 224 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $3 = $6;
     $5 = HEAP32[$3 + 4 >> 2];
     $1 = $2 + 128 | 0;
     $8 = $1 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $7;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $1 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $9;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $1 + 8 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 128 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 132 >> 2] = $3;
     HEAPF64[$2 + 256 >> 3] = HEAPF64[$2 + 320 >> 3];
     HEAPF64[$2 + 264 >> 3] = HEAPF64[$2 + 352 >> 3];
     HEAP32[$2 + 280 >> 2] = 0;
     HEAP32[$2 + 284 >> 2] = 0;
     HEAPF64[$2 + 272 >> 3] = HEAPF64[$2 + 384 >> 3];
     HEAPF64[$2 + 96 >> 3] = HEAPF64[$2 + 328 >> 3];
     HEAPF64[$2 + 104 >> 3] = HEAPF64[$2 + 360 >> 3];
     HEAP32[$2 + 120 >> 2] = 0;
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF64[$2 + 112 >> 3] = HEAPF64[$2 + 392 >> 3];
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $0 = $2 - -64 | 0;
     $3 = $0 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $0 + 8 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 68 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 68 >> 2]]($4, $1, $2 + 256 | 0, $2 + 96 | 0, $26, $26, -$12 - $13, $13 - $12, $0, 1, 10.0);
     break label$1;
    case 3:
    case 6:
     $3 = $1 + 2112 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 320 | 0;
     $7 = $4 + 24 | 0;
     $8 = $7;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 2104 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $9 = $4 + 16 | 0;
     $8 = $9;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 2096 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $40 = $4 + 8 | 0;
     $4 = $40;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $4 = $1 + 2128 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 360 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2136 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 368 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2144 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 376 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2160 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 392 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2168 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 400 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2176 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 408 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $8 = $1 + 2088 | 0;
     $4 = $8;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 324 >> 2] = $3;
     $11 = $1 + 2120 | 0;
     $4 = $11;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 352 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 356 >> 2] = $3;
     $18 = $1 + 2152 | 0;
     $4 = $18;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 384 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 388 >> 2] = $3;
     $4 = $1 + 2208 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 440 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2200 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 432 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2192 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 424 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $16 = $1 + 2184 | 0;
     $4 = $16;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 416 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 420 >> 2] = $3;
     $4 = $2 + 416 | 0;
     $3 = $2 + 384 | 0;
     $5 = $2 + 352 | 0;
     if ($6) {
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $37 = $2 + 320 | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $37, $26);
      $6 = $1 + 2240 | 0;
      $41 = HEAP32[$6 + 4 >> 2];
      HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$7 + 4 >> 2] = $41;
      $6 = $1 + 2232 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2224 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$40 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$40 + 4 >> 2] = $7;
      $6 = $1 + 2248 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $7;
      $6 = $1 + 2256 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $5 + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2264 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $5 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2272 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $5 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2280 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
      $6 = $1 + 2288 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $3 + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2296 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $3 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2304 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $3 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2216 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$2 + 320 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$2 + 324 >> 2] = $7;
      $6 = $1 + 2336 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $4 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2328 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $4 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2320 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $4 + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2312 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$4 + 4 >> 2] = $7;
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $37, $26);
     }
     if (!$10) {
      break label$1
     }
     $6 = HEAP32[$11 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $6 = HEAP32[$18 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$3 + 4 >> 2] = $6;
     $10 = $8 + 24 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $6 = $2 + 320 | 0;
     $40 = $6 + 24 | 0;
     $9 = $40;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $7 = $8 + 16 | 0;
     $9 = HEAP32[$7 + 4 >> 2];
     $10 = $6 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $9;
     $9 = $8 + 8 | 0;
     $37 = HEAP32[$9 + 4 >> 2];
     $7 = $6 + 8 | 0;
     $6 = $7;
     HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$6 + 4 >> 2] = $37;
     $6 = $11 + 8 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $37 = $5 + 8 | 0;
     HEAP32[$37 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$37 + 4 >> 2] = $9;
     $6 = $11 + 16 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $41 = $5 + 16 | 0;
     HEAP32[$41 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$41 + 4 >> 2] = $9;
     $6 = $11 + 24 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $42 = $5 + 24 | 0;
     HEAP32[$42 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$42 + 4 >> 2] = $9;
     $6 = $18 + 8 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $43 = $3 + 8 | 0;
     HEAP32[$43 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$43 + 4 >> 2] = $9;
     $6 = $18 + 16 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $44 = $3 + 16 | 0;
     HEAP32[$44 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$44 + 4 >> 2] = $9;
     $6 = $18 + 24 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $45 = $3 + 24 | 0;
     HEAP32[$45 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$45 + 4 >> 2] = $9;
     $6 = HEAP32[$8 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$2 + 324 >> 2] = $6;
     $6 = $16 + 24 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $46 = $4 + 24 | 0;
     HEAP32[$46 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$46 + 4 >> 2] = $9;
     $6 = $16 + 16 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $47 = $4 + 16 | 0;
     HEAP32[$47 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$47 + 4 >> 2] = $9;
     $6 = $16 + 8 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $48 = $4 + 8 | 0;
     HEAP32[$48 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$48 + 4 >> 2] = $9;
     $6 = HEAP32[$16 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$4 + 4 >> 2] = $6;
     HEAPF64[$2 + 128 >> 3] = HEAPF64[$10 >> 3];
     HEAPF64[$2 + 136 >> 3] = HEAPF64[$2 + 368 >> 3];
     HEAP32[$2 + 152 >> 2] = 0;
     HEAP32[$2 + 156 >> 2] = 0;
     HEAPF64[$2 + 144 >> 3] = HEAPF64[$2 + 400 >> 3];
     HEAPF64[$2 + 288 >> 3] = HEAPF64[$2 + 320 >> 3];
     HEAPF64[$2 + 296 >> 3] = HEAPF64[$2 + 352 >> 3];
     HEAP32[$2 + 312 >> 2] = 0;
     HEAP32[$2 + 316 >> 2] = 0;
     HEAPF64[$2 + 304 >> 3] = HEAPF64[$2 + 384 >> 3];
     $12 = HEAPF64[$1 + 1824 >> 3];
     $13 = HEAPF64[$1 + 1832 >> 3];
     $14 = HEAPF64[$1 + 1952 >> 3];
     $15 = HEAPF64[$1 + 1960 >> 3];
     $49 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $9 = $2 + 256 | 0;
     $6 = $9 + 24 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $6 = $9 + 16 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $6 = $9 + 8 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$2 + 256 >> 2] = 0;
     HEAP32[$2 + 260 >> 2] = 0;
     $6 = $1 + 2312 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$49 >> 2] + 72 >> 2]]($49, $6, $2 + 128 | 0, $2 + 288 | 0, $26 * .8999999761581421, $12, $13, $14, $15, $9, 10.0, 1);
     HEAP32[$2 + 312 >> 2] = 0;
     HEAP32[$2 + 316 >> 2] = 0;
     HEAPF64[$2 + 304 >> 3] = HEAPF64[$2 + 392 >> 3];
     HEAPF64[$2 + 296 >> 3] = HEAPF64[$2 + 360 >> 3];
     HEAPF64[$2 + 288 >> 3] = HEAPF64[$7 >> 3];
     $15 = btGeneric6DofConstraint__getAngle_28int_29_20const($1, 1);
     $14 = btGeneric6DofConstraint__getAngle_28int_29_20const($1, 2);
     $9 = $1 + 2224 | 0;
     $49 = HEAP32[$9 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$7 + 4 >> 2] = $49;
     $7 = $1 + 2232 | 0;
     $9 = HEAP32[$7 + 4 >> 2];
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $9;
     $10 = $1 + 2240 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$40 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$40 + 4 >> 2] = $7;
     $10 = $1 + 2248 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$5 + 4 >> 2] = $7;
     $10 = $1 + 2256 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$37 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$37 + 4 >> 2] = $7;
     $10 = $1 + 2264 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$41 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$41 + 4 >> 2] = $7;
     $10 = $1 + 2272 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$42 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$42 + 4 >> 2] = $7;
     $10 = $1 + 2216 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$2 + 324 >> 2] = $7;
     $12 = HEAPF64[$2 + 288 >> 3];
     $13 = sin($14);
     $19 = HEAPF64[$2 + 296 >> 3];
     $17 = cos($14);
     HEAPF64[$2 + 264 >> 3] = $19 * $17 - $13 * $12;
     $14 = sin($15);
     $20 = HEAPF64[$2 + 304 >> 3];
     $15 = cos($15);
     HEAPF64[$2 + 272 >> 3] = $20 * $15 + ($12 * ($14 * $17) + $19 * ($14 * $13));
     HEAPF64[$2 + 256 >> 3] = $12 * ($15 * $17) + $19 * ($15 * $13) - $14 * $20;
     $10 = $1 + 2304 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$45 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$45 + 4 >> 2] = $7;
     $10 = $1 + 2296 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$44 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$44 + 4 >> 2] = $7;
     $10 = $1 + 2288 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$43 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$43 + 4 >> 2] = $7;
     $10 = $1 + 2280 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$3 + 4 >> 2] = $7;
     $10 = HEAP32[$6 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $10;
     $10 = $1 + 2336 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$46 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$46 + 4 >> 2] = $7;
     $10 = $1 + 2328 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$47 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$47 + 4 >> 2] = $7;
     $10 = $1 + 2320 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$48 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$48 + 4 >> 2] = $7;
     HEAP32[$2 + 120 >> 2] = 0;
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF64[$2 + 104 >> 3] = -HEAPF64[$2 + 352 >> 3];
     HEAPF64[$2 + 96 >> 3] = -HEAPF64[$2 + 320 >> 3];
     HEAPF64[$2 + 112 >> 3] = -HEAPF64[$2 + 384 >> 3];
     $12 = HEAPF64[$1 + 1696 >> 3];
     $13 = HEAPF64[$1 + 1704 >> 3];
     label$17 : {
      if ($12 > $13) {
       $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $10 = $2 - -64 | 0;
       $9 = $10 + 24 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       $9 = $10 + 16 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       $9 = $10 + 8 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       HEAP32[$2 + 64 >> 2] = 0;
       HEAP32[$2 + 68 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $6, $2 + 96 | 0, $2 + 256 | 0, $26, $26, -3.141592653589793, 3.141592653589793, $10, 0, 10.0);
       break label$17;
      }
      if (!($12 < $13)) {
       break label$17
      }
      $10 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $7 = $2 + 88 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $2 + 80 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $2 + 72 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 68 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 68 >> 2]]($10, $6, $2 + 96 | 0, $2 + 256 | 0, $26, $26, $12, $13, $2 - -64 | 0, 1, 10.0);
     }
     $6 = HEAP32[$11 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $6 = HEAP32[$18 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$3 + 4 >> 2] = $6;
     $10 = $8 + 24 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $6 = $2 + 320 | 0;
     $9 = $6 + 24 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $8 + 16 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $6 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $8 + 8 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $6 + 8 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $11 + 8 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $5 + 8 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $11 + 16 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $5 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $11 = $11 + 24 | 0;
     $10 = HEAP32[$11 + 4 >> 2];
     $5 = $5 + 24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5 + 4 >> 2] = $10;
     $5 = $18 + 8 | 0;
     $11 = HEAP32[$5 + 4 >> 2];
     $10 = $3 + 8 | 0;
     HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$10 + 4 >> 2] = $11;
     $5 = $18 + 16 | 0;
     $11 = HEAP32[$5 + 4 >> 2];
     $10 = $3 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$10 + 4 >> 2] = $11;
     $5 = $18 + 24 | 0;
     $11 = HEAP32[$5 + 4 >> 2];
     $3 = $3 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $11;
     $3 = HEAP32[$8 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$2 + 324 >> 2] = $3;
     $3 = $16 + 24 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $16 + 16 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $16 + 8 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 8 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = HEAP32[$16 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$4 + 4 >> 2] = $3;
     $3 = $1 + 1352 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 - -64 | 0;
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1344 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1336 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 8 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1328 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 64 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 68 >> 2] = $5;
     $5 = $1 + 1384 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $3 = $2 + 32 | 0;
     $11 = $3 + 24 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $1 + 1376 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $3 + 16 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $1 + 1368 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $3 + 8 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $1 = $1 + 1360 | 0;
     $5 = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 36 >> 2] = $5;
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $1 = $2 + 24 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $2 + 16 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $2 + 8 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $4, $3, $6, $2);
     break label$1;
    case 9:
     $3 = $1 + 2448 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 320 | 0;
     $7 = $4 + 24 | 0;
     $8 = $7;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 2440 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $9 = $4 + 16 | 0;
     $8 = $9;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 2432 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $40 = $4 + 8 | 0;
     $4 = $40;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $4 = $1 + 2464 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 360 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2472 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 368 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2480 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 376 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2496 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 392 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2504 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 400 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2512 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 408 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $8 = $1 + 2424 | 0;
     $4 = $8;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 324 >> 2] = $3;
     $11 = $1 + 2456 | 0;
     $4 = $11;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 352 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 356 >> 2] = $3;
     $18 = $1 + 2488 | 0;
     $4 = $18;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 384 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 388 >> 2] = $3;
     $4 = $1 + 2544 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 440 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2536 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 432 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 2528 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 424 | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $16 = $1 + 2520 | 0;
     $4 = $16;
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 416 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 420 >> 2] = $3;
     $4 = $2 + 416 | 0;
     $3 = $2 + 384 | 0;
     $5 = $2 + 352 | 0;
     if ($6) {
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $37 = $2 + 320 | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $37, $26);
      $6 = $1 + 2576 | 0;
      $41 = HEAP32[$6 + 4 >> 2];
      HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$7 + 4 >> 2] = $41;
      $6 = $1 + 2568 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2560 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$40 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$40 + 4 >> 2] = $7;
      $6 = $1 + 2584 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $7;
      $6 = $1 + 2592 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $5 + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2600 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $5 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2608 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $5 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2616 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
      $6 = $1 + 2624 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $3 + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2632 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $3 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2640 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $3 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2552 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$2 + 320 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$2 + 324 >> 2] = $7;
      $6 = $1 + 2672 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $4 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2664 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $4 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2656 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $9 = $4 + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$9 + 4 >> 2] = $7;
      $6 = $1 + 2648 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$4 + 4 >> 2] = $7;
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $37, $26);
     }
     if (!$10) {
      break label$1
     }
     $6 = HEAP32[$11 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $6 = HEAP32[$18 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$3 + 4 >> 2] = $6;
     $10 = $8 + 24 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $6 = $2 + 320 | 0;
     $40 = $6 + 24 | 0;
     $9 = $40;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $7 = $8 + 16 | 0;
     $9 = HEAP32[$7 + 4 >> 2];
     $10 = $6 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $9;
     $9 = $8 + 8 | 0;
     $37 = HEAP32[$9 + 4 >> 2];
     $7 = $6 + 8 | 0;
     $6 = $7;
     HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$6 + 4 >> 2] = $37;
     $6 = $11 + 8 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $37 = $5 + 8 | 0;
     HEAP32[$37 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$37 + 4 >> 2] = $9;
     $6 = $11 + 16 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $41 = $5 + 16 | 0;
     HEAP32[$41 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$41 + 4 >> 2] = $9;
     $6 = $11 + 24 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $42 = $5 + 24 | 0;
     HEAP32[$42 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$42 + 4 >> 2] = $9;
     $6 = $18 + 8 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $43 = $3 + 8 | 0;
     HEAP32[$43 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$43 + 4 >> 2] = $9;
     $6 = $18 + 16 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $44 = $3 + 16 | 0;
     HEAP32[$44 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$44 + 4 >> 2] = $9;
     $6 = $18 + 24 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $45 = $3 + 24 | 0;
     HEAP32[$45 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$45 + 4 >> 2] = $9;
     $6 = HEAP32[$8 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$2 + 324 >> 2] = $6;
     $6 = $16 + 24 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $46 = $4 + 24 | 0;
     HEAP32[$46 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$46 + 4 >> 2] = $9;
     $6 = $16 + 16 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $47 = $4 + 16 | 0;
     HEAP32[$47 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$47 + 4 >> 2] = $9;
     $6 = $16 + 8 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     $48 = $4 + 8 | 0;
     HEAP32[$48 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$48 + 4 >> 2] = $9;
     $6 = HEAP32[$16 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$4 + 4 >> 2] = $6;
     HEAPF64[$2 + 128 >> 3] = HEAPF64[$10 >> 3];
     HEAPF64[$2 + 136 >> 3] = HEAPF64[$2 + 368 >> 3];
     HEAP32[$2 + 152 >> 2] = 0;
     HEAP32[$2 + 156 >> 2] = 0;
     HEAPF64[$2 + 144 >> 3] = HEAPF64[$2 + 400 >> 3];
     HEAPF64[$2 + 288 >> 3] = HEAPF64[$2 + 320 >> 3];
     HEAPF64[$2 + 296 >> 3] = HEAPF64[$2 + 352 >> 3];
     HEAP32[$2 + 312 >> 2] = 0;
     HEAP32[$2 + 316 >> 2] = 0;
     HEAPF64[$2 + 304 >> 3] = HEAPF64[$2 + 384 >> 3];
     $12 = HEAPF64[$1 + 2064 >> 3];
     $13 = HEAPF64[$1 + 2072 >> 3];
     $14 = HEAPF64[$1 + 2248 >> 3];
     $15 = HEAPF64[$1 + 2240 >> 3];
     $49 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $9 = $2 + 256 | 0;
     $6 = $9 + 24 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $6 = $9 + 16 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $6 = $9 + 8 | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$2 + 256 >> 2] = 0;
     HEAP32[$2 + 260 >> 2] = 0;
     $6 = $1 + 2648 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$49 >> 2] + 72 >> 2]]($49, $6, $2 + 128 | 0, $2 + 288 | 0, $26 * .8999999761581421, $12, $13, $15, $14, $9, 10.0, 1);
     HEAP32[$2 + 312 >> 2] = 0;
     HEAP32[$2 + 316 >> 2] = 0;
     $19 = HEAPF64[$2 + 392 >> 3];
     HEAPF64[$2 + 304 >> 3] = $19;
     $12 = HEAPF64[$2 + 360 >> 3];
     HEAPF64[$2 + 296 >> 3] = $12;
     $13 = HEAPF64[$7 >> 3];
     HEAPF64[$2 + 288 >> 3] = $13;
     $15 = HEAPF64[$1 + 2696 >> 3];
     $17 = HEAPF64[$1 + 2688 >> 3];
     $9 = $1 + 2560 | 0;
     $49 = HEAP32[$9 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$7 + 4 >> 2] = $49;
     $7 = $1 + 2568 | 0;
     $9 = HEAP32[$7 + 4 >> 2];
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $9;
     $10 = $1 + 2576 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$40 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$40 + 4 >> 2] = $7;
     $10 = $1 + 2584 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$5 + 4 >> 2] = $7;
     $10 = $1 + 2592 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$37 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$37 + 4 >> 2] = $7;
     $10 = $1 + 2600 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$41 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$41 + 4 >> 2] = $7;
     $10 = $1 + 2608 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$42 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$42 + 4 >> 2] = $7;
     $10 = $1 + 2552 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$2 + 324 >> 2] = $7;
     $14 = sin($15);
     $20 = cos($15);
     HEAPF64[$2 + 264 >> 3] = $12 * $20 - $14 * $13;
     $15 = sin($17);
     $17 = cos($17);
     HEAPF64[$2 + 272 >> 3] = $19 * $17 + ($13 * ($15 * $20) + $12 * ($15 * $14));
     HEAPF64[$2 + 256 >> 3] = $13 * ($17 * $20) + $12 * ($17 * $14) - $15 * $19;
     $10 = $1 + 2640 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$45 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$45 + 4 >> 2] = $7;
     $10 = $1 + 2632 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$44 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$44 + 4 >> 2] = $7;
     $10 = $1 + 2624 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$43 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$43 + 4 >> 2] = $7;
     $10 = $1 + 2616 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$3 + 4 >> 2] = $7;
     $10 = HEAP32[$6 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $10;
     $10 = $1 + 2672 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$46 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$46 + 4 >> 2] = $7;
     $10 = $1 + 2664 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$47 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$47 + 4 >> 2] = $7;
     $10 = $1 + 2656 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     HEAP32[$48 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$48 + 4 >> 2] = $7;
     HEAP32[$2 + 120 >> 2] = 0;
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF64[$2 + 104 >> 3] = -HEAPF64[$2 + 352 >> 3];
     HEAPF64[$2 + 96 >> 3] = -HEAPF64[$2 + 320 >> 3];
     HEAPF64[$2 + 112 >> 3] = -HEAPF64[$2 + 384 >> 3];
     $12 = HEAPF64[$1 + 1888 >> 3];
     $13 = HEAPF64[$1 + 1896 >> 3];
     label$20 : {
      if ($12 > $13) {
       $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $10 = $2 - -64 | 0;
       $9 = $10 + 24 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       $9 = $10 + 16 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       $9 = $10 + 8 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       HEAP32[$2 + 64 >> 2] = 0;
       HEAP32[$2 + 68 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $6, $2 + 96 | 0, $2 + 256 | 0, $26, $26, -3.141592653589793, 3.141592653589793, $10, 0, 10.0);
       break label$20;
      }
      if (!($12 < $13)) {
       break label$20
      }
      $10 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $7 = $2 + 88 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $2 + 80 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $2 + 72 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 68 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 68 >> 2]]($10, $6, $2 + 96 | 0, $2 + 256 | 0, $26, $26, $12, $13, $2 - -64 | 0, 1, 10.0);
     }
     $6 = HEAP32[$11 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $6 = HEAP32[$18 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$3 + 4 >> 2] = $6;
     $10 = $8 + 24 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $6 = $2 + 320 | 0;
     $9 = $6 + 24 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $8 + 16 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $6 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $8 + 8 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $6 + 8 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $11 + 8 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $5 + 8 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $10 = $11 + 16 | 0;
     $7 = HEAP32[$10 + 4 >> 2];
     $9 = $5 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $11 = $11 + 24 | 0;
     $10 = HEAP32[$11 + 4 >> 2];
     $5 = $5 + 24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$5 + 4 >> 2] = $10;
     $5 = $18 + 8 | 0;
     $11 = HEAP32[$5 + 4 >> 2];
     $10 = $3 + 8 | 0;
     HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$10 + 4 >> 2] = $11;
     $5 = $18 + 16 | 0;
     $11 = HEAP32[$5 + 4 >> 2];
     $10 = $3 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$10 + 4 >> 2] = $11;
     $5 = $18 + 24 | 0;
     $11 = HEAP32[$5 + 4 >> 2];
     $3 = $3 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $11;
     $3 = HEAP32[$8 + 4 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$2 + 324 >> 2] = $3;
     $3 = $16 + 24 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $16 + 16 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $16 + 8 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 8 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = HEAP32[$16 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$4 + 4 >> 2] = $3;
     $3 = $1 + 1352 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 - -64 | 0;
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1344 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1336 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 8 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1328 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 64 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 68 >> 2] = $5;
     $5 = $1 + 1384 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $3 = $2 + 32 | 0;
     $11 = $3 + 24 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $1 + 1376 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $3 + 16 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $1 + 1368 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $3 + 8 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $1 = $1 + 1360 | 0;
     $5 = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 36 >> 2] = $5;
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $1 = $2 + 24 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $2 + 16 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $1 = $2 + 8 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $4, $3, $6, $2);
     break label$1;
    case 4:
     break label$2;
    default:
     break label$1;
    };
   }
   $3 = $1 + 1624 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $2 + 320 | 0;
   $8 = $4 + 24 | 0;
   HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$8 + 4 >> 2] = $5;
   $3 = $1 + 1616 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $11 = $4 + 16 | 0;
   HEAP32[$11 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$11 + 4 >> 2] = $5;
   $3 = $1 + 1608 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $18 = $4 + 8 | 0;
   $4 = $18;
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $4 = $1 + 1640 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 360 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1648 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 368 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1656 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 376 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1672 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 392 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1680 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 400 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1688 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 408 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = HEAP32[$1 + 1604 >> 2];
   HEAP32[$2 + 320 >> 2] = HEAP32[$1 + 1600 >> 2];
   HEAP32[$2 + 324 >> 2] = $4;
   $4 = HEAP32[$1 + 1668 >> 2];
   HEAP32[$2 + 384 >> 2] = HEAP32[$1 + 1664 >> 2];
   HEAP32[$2 + 388 >> 2] = $4;
   $4 = $1 + 1632 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   HEAP32[$2 + 352 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + 356 >> 2] = $3;
   $4 = $1 + 1720 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 440 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1712 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 432 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1704 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 424 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $4 = $1 + 1696 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   HEAP32[$2 + 416 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + 420 >> 2] = $3;
   $4 = $2 + 416 | 0;
   $3 = $2 + 384 | 0;
   $5 = $2 + 352 | 0;
   label$22 : {
    if ($6) {
     $16 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $6 = $2 + 320 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 64 >> 2]]($16, $6, $26);
     $16 = $1 + 1752 | 0;
     $7 = HEAP32[$16 + 4 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$8 + 4 >> 2] = $7;
     $8 = $1 + 1744 | 0;
     $16 = HEAP32[$8 + 4 >> 2];
     HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$11 + 4 >> 2] = $16;
     $8 = $1 + 1736 | 0;
     $11 = HEAP32[$8 + 4 >> 2];
     HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$18 + 4 >> 2] = $11;
     $8 = $1 + 1760 | 0;
     $11 = HEAP32[$8 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$5 + 4 >> 2] = $11;
     $8 = $1 + 1768 | 0;
     $11 = HEAP32[$8 + 4 >> 2];
     $18 = $5 + 8 | 0;
     HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$18 + 4 >> 2] = $11;
     $8 = $1 + 1776 | 0;
     $11 = HEAP32[$8 + 4 >> 2];
     $18 = $5 + 16 | 0;
     HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$18 + 4 >> 2] = $11;
     $8 = $1 + 1784 | 0;
     $11 = HEAP32[$8 + 4 >> 2];
     $5 = $5 + 24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$5 + 4 >> 2] = $11;
     $5 = HEAP32[$1 + 1796 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$1 + 1792 >> 2];
     HEAP32[$3 + 4 >> 2] = $5;
     $5 = $1 + 1800 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $3 + 8 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $1 + 1808 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $11 = $3 + 16 | 0;
     HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$11 + 4 >> 2] = $8;
     $5 = $1 + 1816 | 0;
     $8 = HEAP32[$5 + 4 >> 2];
     $3 = $3 + 24 | 0;
     HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$3 + 4 >> 2] = $8;
     $3 = HEAP32[$1 + 1732 >> 2];
     HEAP32[$2 + 320 >> 2] = HEAP32[$1 + 1728 >> 2];
     HEAP32[$2 + 324 >> 2] = $3;
     $3 = $1 + 1848 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1840 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 16 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1832 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     $8 = $4 + 8 | 0;
     HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$8 + 4 >> 2] = $5;
     $3 = $1 + 1824 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $6, $26);
     break label$22;
    }
    $16 = HEAP32[$1 + 1796 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 + 1792 >> 2];
    HEAP32[$3 + 4 >> 2] = $16;
    $16 = $1 + 1752 | 0;
    $6 = HEAP32[$16 + 4 >> 2];
    HEAP32[$8 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$8 + 4 >> 2] = $6;
    $8 = $1 + 1744 | 0;
    $16 = HEAP32[$8 + 4 >> 2];
    HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$11 + 4 >> 2] = $16;
    $8 = $1 + 1736 | 0;
    $11 = HEAP32[$8 + 4 >> 2];
    HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$18 + 4 >> 2] = $11;
    $8 = $1 + 1760 | 0;
    $11 = HEAP32[$8 + 4 >> 2];
    HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$5 + 4 >> 2] = $11;
    $8 = $1 + 1768 | 0;
    $11 = HEAP32[$8 + 4 >> 2];
    $18 = $5 + 8 | 0;
    HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$18 + 4 >> 2] = $11;
    $8 = $1 + 1776 | 0;
    $11 = HEAP32[$8 + 4 >> 2];
    $18 = $5 + 16 | 0;
    HEAP32[$18 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$18 + 4 >> 2] = $11;
    $8 = $1 + 1784 | 0;
    $11 = HEAP32[$8 + 4 >> 2];
    $5 = $5 + 24 | 0;
    HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$5 + 4 >> 2] = $11;
    $5 = $1 + 1800 | 0;
    $8 = HEAP32[$5 + 4 >> 2];
    $11 = $3 + 8 | 0;
    HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$11 + 4 >> 2] = $8;
    $5 = $1 + 1808 | 0;
    $8 = HEAP32[$5 + 4 >> 2];
    $11 = $3 + 16 | 0;
    HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$11 + 4 >> 2] = $8;
    $5 = $1 + 1816 | 0;
    $8 = HEAP32[$5 + 4 >> 2];
    $3 = $3 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $8;
    $3 = HEAP32[$1 + 1732 >> 2];
    HEAP32[$2 + 320 >> 2] = HEAP32[$1 + 1728 >> 2];
    HEAP32[$2 + 324 >> 2] = $3;
    $3 = $1 + 1848 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $8 = $4 + 24 | 0;
    HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$8 + 4 >> 2] = $5;
    $3 = $1 + 1840 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $8 = $4 + 16 | 0;
    HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$8 + 4 >> 2] = $5;
    $3 = $1 + 1832 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $8 = $4 + 8 | 0;
    HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$8 + 4 >> 2] = $5;
    $3 = $1 + 1824 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = $5;
   }
   if (!$10) {
    break label$1
   }
   $4 = HEAPU8[$1 + 320 | 0] ? $1 + 1600 | 0 : $1 + 1728 | 0;
   $15 = HEAPF64[$4 + 96 >> 3];
   $24 = HEAPF64[$4 + 16 >> 3];
   $19 = HEAPF64[$4 + 8 >> 3];
   $12 = HEAPF64[$4 >> 3];
   $17 = HEAPF64[$4 + 104 >> 3];
   $25 = HEAPF64[$4 + 48 >> 3];
   $20 = HEAPF64[$4 + 40 >> 3];
   $13 = HEAPF64[$4 + 32 >> 3];
   $21 = HEAPF64[$4 + 112 >> 3];
   $23 = HEAPF64[$4 + 80 >> 3];
   $22 = HEAPF64[$4 + 72 >> 3];
   $14 = HEAPF64[$4 + 64 >> 3];
   HEAP32[$2 + 152 >> 2] = 0;
   HEAP32[$2 + 156 >> 2] = 0;
   $27 = $23 * 0.0;
   $23 = HEAPF64[$1 + 328 >> 3];
   $28 = $22 * 0.0;
   HEAPF64[$2 + 144 >> 3] = $21 + ($27 + ($14 * $23 + $28));
   $25 = $25 * 0.0;
   $29 = $20 * 0.0;
   HEAPF64[$2 + 136 >> 3] = $17 + ($25 + ($23 * $13 + $29));
   $24 = $24 * 0.0;
   $36 = $23 * $12;
   $23 = $19 * 0.0;
   HEAPF64[$2 + 128 >> 3] = $15 + ($24 + ($36 + $23));
   HEAP32[$2 + 312 >> 2] = 0;
   HEAP32[$2 + 316 >> 2] = 0;
   $36 = $21;
   $21 = HEAPF64[$1 + 336 >> 3];
   HEAPF64[$2 + 304 >> 3] = $36 + ($27 + ($14 * $21 + $28));
   HEAPF64[$2 + 296 >> 3] = $17 + ($25 + ($21 * $13 + $29));
   HEAPF64[$2 + 288 >> 3] = $15 + ($24 + ($21 * $12 + $23));
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $4 = $2 + 256 | 0;
   $5 = $4 + 24 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   $5 = $4 + 16 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   $5 = $4 + 8 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$2 + 256 >> 2] = 0;
   HEAP32[$2 + 260 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $2 + 128 | 0, $2 + 288 | 0, $4);
   HEAP32[$2 + 280 >> 2] = 0;
   HEAP32[$2 + 284 >> 2] = 0;
   HEAPF64[$2 + 272 >> 3] = $14;
   HEAPF64[$2 + 264 >> 3] = $13;
   HEAPF64[$2 + 256 >> 3] = $12;
   HEAP32[$2 + 120 >> 2] = 0;
   HEAP32[$2 + 124 >> 2] = 0;
   HEAPF64[$2 + 112 >> 3] = $22;
   HEAPF64[$2 + 104 >> 3] = $20;
   HEAPF64[$2 + 96 >> 3] = $19;
   $12 = HEAPF64[$1 + 344 >> 3];
   $13 = HEAPF64[$1 + 352 >> 3];
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $0 = $2 - -64 | 0;
   $5 = $0 + 24 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   $5 = $0 + 16 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   $5 = $0 + 8 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$2 + 68 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 68 >> 2]]($3, $1 + 1824 | 0, $4, $2 + 96 | 0, $26, $26, $12, $13, $0, 1, 10.0);
  }
  __stack_pointer = $2 + 448 | 0;
 }
 
 function btTransform__operator__28btTransform_20const__29_20const($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
  $24 = HEAPF64[$1 + 104 >> 3];
  $25 = HEAPF64[$1 + 112 >> 3];
  $12 = HEAPF64[$2 + 104 >> 3];
  $13 = HEAPF64[$2 + 112 >> 3];
  $3 = HEAPF64[$1 + 40 >> 3];
  $4 = HEAPF64[$1 + 48 >> 3];
  $14 = HEAPF64[$2 + 40 >> 3];
  $15 = HEAPF64[$2 + 72 >> 3];
  $5 = HEAPF64[$1 + 72 >> 3];
  $16 = HEAPF64[$2 + 48 >> 3];
  $6 = HEAPF64[$1 + 80 >> 3];
  $17 = HEAPF64[$2 + 80 >> 3];
  $26 = HEAPF64[$1 + 96 >> 3];
  $18 = HEAPF64[$2 + 96 >> 3];
  $7 = HEAPF64[$1 + 32 >> 3];
  $19 = HEAPF64[$2 + 8 >> 3];
  $8 = HEAPF64[$1 + 64 >> 3];
  $20 = HEAPF64[$2 + 16 >> 3];
  $9 = HEAPF64[$1 + 16 >> 3];
  $21 = HEAPF64[$2 + 64 >> 3];
  $10 = HEAPF64[$1 >> 3];
  $22 = HEAPF64[$2 >> 3];
  $11 = HEAPF64[$1 + 8 >> 3];
  $23 = HEAPF64[$2 + 32 >> 3];
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF64[$0 >> 3] = $21 * $9 + ($22 * $10 + $23 * $11);
  HEAPF64[$0 + 80 >> 3] = $17 * $6 + ($20 * $8 + $16 * $5);
  HEAPF64[$0 + 72 >> 3] = $15 * $6 + ($19 * $8 + $14 * $5);
  HEAPF64[$0 + 64 >> 3] = $21 * $6 + ($22 * $8 + $23 * $5);
  HEAPF64[$0 + 48 >> 3] = $17 * $4 + ($20 * $7 + $16 * $3);
  HEAPF64[$0 + 40 >> 3] = $15 * $4 + ($19 * $7 + $14 * $3);
  HEAPF64[$0 + 32 >> 3] = $21 * $4 + ($22 * $7 + $23 * $3);
  HEAPF64[$0 + 16 >> 3] = $17 * $9 + ($20 * $10 + $11 * $16);
  HEAPF64[$0 + 8 >> 3] = $15 * $9 + ($19 * $10 + $11 * $14);
  HEAPF64[$0 + 112 >> 3] = $25 + ($13 * $6 + ($18 * $8 + $12 * $5));
  HEAPF64[$0 + 104 >> 3] = $24 + ($13 * $4 + ($18 * $7 + $12 * $3));
  HEAPF64[$0 + 96 >> 3] = $26 + ($13 * $9 + ($18 * $10 + $12 * $11));
 }
 
 function btDiscreteDynamicsWorld__setConstraintSolver_28btConstraintSolver__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (HEAPU8[$0 + 433 | 0]) {
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 336 >> 2])
  }
  HEAP32[$0 + 336 >> 2] = $1;
  HEAP8[$0 + 433 | 0] = 0;
  HEAP32[HEAP32[$0 + 332 >> 2] + 8 >> 2] = $1;
 }
 
 function btDiscreteDynamicsWorld__getConstraintSolver_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 336 >> 2];
 }
 
 function btDiscreteDynamicsWorld__getNumConstraints_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 348 >> 2];
 }
 
 function btDiscreteDynamicsWorld__getConstraint_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 + 356 >> 2] + ($1 << 2) >> 2];
 }
 
 function btDiscreteDynamicsWorld__serialize_28btSerializer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1);
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, 184, 1) | 0;
  $2 = memset(HEAP32[$4 + 8 >> 2], 0, 184);
  HEAPF64[$2 + 152 >> 3] = HEAPF64[$0 + 384 >> 3];
  HEAPF64[$2 + 160 >> 3] = HEAPF64[$0 + 392 >> 3];
  HEAPF64[$2 + 168 >> 3] = HEAPF64[$0 + 400 >> 3];
  HEAPF64[$2 + 176 >> 3] = HEAPF64[$0 + 408 >> 3];
  HEAPF64[$2 >> 3] = HEAPF64[$0 + 120 >> 3];
  HEAPF64[$2 + 8 >> 3] = HEAPF64[$0 + 128 >> 3];
  HEAPF64[$2 + 16 >> 3] = HEAPF64[$0 + 136 >> 3];
  HEAPF64[$2 + 24 >> 3] = HEAPF64[$0 + 144 >> 3];
  HEAPF64[$2 + 32 >> 3] = HEAPF64[$0 + 152 >> 3];
  HEAPF64[$2 + 40 >> 3] = HEAPF64[$0 + 168 >> 3];
  HEAPF64[$2 + 48 >> 3] = HEAPF64[$0 + 176 >> 3];
  HEAPF64[$2 + 56 >> 3] = HEAPF64[$0 + 184 >> 3];
  HEAPF64[$2 + 64 >> 3] = HEAPF64[$0 + 192 >> 3];
  $6 = HEAPF64[$0 + 200 >> 3];
  $3 = $0 + 264 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 132 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 136 >> 2] = $5;
  HEAPF64[$2 + 72 >> 3] = $6;
  HEAPF64[$2 + 80 >> 3] = HEAPF64[$0 + 232 >> 3];
  HEAPF64[$2 + 88 >> 3] = HEAPF64[$0 + 240 >> 3];
  HEAPF64[$2 + 96 >> 3] = HEAPF64[$0 + 248 >> 3];
  HEAPF64[$2 + 104 >> 3] = HEAPF64[$0 + 256 >> 3];
  HEAPF64[$2 + 112 >> 3] = HEAPF64[$0 + 280 >> 3];
  HEAPF64[$2 + 120 >> 3] = HEAPF64[$0 + 288 >> 3];
  HEAP32[$2 + 128 >> 2] = HEAP32[$0 + 160 >> 2];
  HEAP32[$2 + 140 >> 2] = HEAP32[$0 + 272 >> 2];
  $3 = HEAP32[$0 + 224 >> 2];
  HEAP32[$2 + 148 >> 2] = 0;
  HEAP32[$2 + 144 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, $4, 4045, 1145853764, $2);
  btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1);
  $2 = 0;
  $5 = 0;
  $4 = HEAP32[$0 + 8 >> 2];
  if (($4 | 0) > 0) {
   while (1) {
    $3 = HEAP32[HEAP32[$0 + 16 >> 2] + $2 >> 2];
    if (HEAPU8[$3 + 472 | 0] & 2) {
     $4 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $4), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, HEAP32[$4 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $3), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     $4 = HEAP32[$0 + 8 >> 2];
    }
    $2 = $2 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($4 | 0)) {
     continue
    }
    break;
   }
  }
  if (HEAP32[$0 + 348 >> 2] > 0) {
   $2 = 0;
   $4 = 0;
   while (1) {
    $3 = HEAP32[HEAP32[$0 + 356 >> 2] + $2 >> 2];
    $5 = ((((wasm2js_i32$5 = $1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
    (((((wasm2js_i32$1 = $1, wasm2js_i32$4 = $5), wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 40 >> 2]]($3, HEAP32[$5 + 8 >> 2], $1) | 0), wasm2js_i32$2 = 1397641027), wasm2js_i32$3 = $3), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
    $2 = $2 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < HEAP32[$0 + 348 >> 2]) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1);
 }
 
 function btDiscreteDynamicsWorld__updateVehicles_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  CProfileSample__CProfileSample_28char_20const__29($2 + 8 | 0, 3046);
  if (HEAP32[$0 + 440 >> 2] > 0) {
   while (1) {
    $4 = HEAP32[HEAP32[$0 + 448 >> 2] + $3 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $0, $1);
    $3 = $3 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < HEAP32[$0 + 440 >> 2]) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  __stack_pointer = $2 + 16 | 0;
 }
 
 function InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28628;
  $1 = HEAP32[$0 + 80 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 84 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 60 >> 2];
  if (!(!$1 | !HEAPU8[$0 - -64 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 64 | 0] = 1;
  $1 = $0 + 52 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 44 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28628;
  $1 = HEAP32[$0 + 80 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 84 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 60 >> 2];
  if (!(!$1 | !HEAPU8[$0 - -64 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 64 | 0] = 1;
  $1 = $0 + 52 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 44 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  operator_20delete_28void__29($0);
 }
 
 function InplaceSolverIslandCallback__processIsland_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($5 | 0) >= 0) {
      $12 = HEAP32[$0 + 16 >> 2];
      if (($12 | 0) > 0) {
       break label$3
      }
      break label$2;
     }
     $5 = HEAP32[$0 + 8 >> 2];
     +FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 12 >> 2]]($5, $1, $2, $3, $4, HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
     return;
    }
    $14 = HEAP32[$0 + 12 >> 2];
    while (1) {
     $7 = HEAP32[$14 >> 2];
     $8 = HEAP32[HEAP32[$7 + 32 >> 2] + 396 >> 2];
     if (($8 | 0) < 0) {
      $8 = HEAP32[HEAP32[$7 + 36 >> 2] + 396 >> 2]
     }
     if (($8 | 0) == ($5 | 0)) {
      break label$2
     }
     $14 = $14 + 4 | 0;
     $6 = $6 + 1 | 0;
     if (($12 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
    $14 = 0;
    break label$1;
   }
   if (($6 | 0) >= ($12 | 0)) {
    break label$1
   }
   $7 = $12 - $6 | 0;
   $16 = $7 & 1;
   $13 = HEAP32[$0 + 12 >> 2];
   label$7 : {
    if (($6 + 1 | 0) == ($12 | 0)) {
     break label$7
    }
    $10 = $7 & -2;
    $8 = $13 + ($6 << 2) | 0;
    while (1) {
     $7 = HEAP32[$8 >> 2];
     $9 = HEAP32[HEAP32[$7 + 32 >> 2] + 396 >> 2];
     if (($9 | 0) < 0) {
      $9 = HEAP32[HEAP32[$7 + 36 >> 2] + 396 >> 2]
     }
     $12 = (($9 | 0) == ($5 | 0)) + $15 | 0;
     $7 = HEAP32[$8 + 4 >> 2];
     $9 = HEAP32[HEAP32[$7 + 32 >> 2] + 396 >> 2];
     if (($9 | 0) < 0) {
      $9 = HEAP32[HEAP32[$7 + 36 >> 2] + 396 >> 2]
     }
     $8 = $8 + 8 | 0;
     $6 = $6 + 2 | 0;
     $15 = $12 + (($5 | 0) == ($9 | 0)) | 0;
     $10 = $10 - 2 | 0;
     if ($10) {
      continue
     }
     break;
    };
   }
   if (!$16) {
    break label$1
   }
   $7 = HEAP32[$13 + ($6 << 2) >> 2];
   $6 = HEAP32[HEAP32[$7 + 32 >> 2] + 396 >> 2];
   if (($6 | 0) < 0) {
    $6 = HEAP32[HEAP32[$7 + 36 >> 2] + 396 >> 2]
   }
   $15 = (($6 | 0) == ($5 | 0)) + $15 | 0;
  }
  $7 = HEAP32[$0 + 4 >> 2];
  if (HEAP32[$7 + 152 >> 2] >= 2) {
   if (($2 | 0) > 0) {
    $6 = HEAP32[$0 + 36 >> 2];
    $5 = HEAP32[$0 + 32 >> 2];
    while (1) {
     $16 = ($11 << 2) + $1 | 0;
     label$16 : {
      if (($5 | 0) != ($6 | 0)) {
       $7 = $5;
       break label$16;
      }
      $5 = $6 ? $6 << 1 : 1;
      if (($6 | 0) >= ($5 | 0)) {
       $7 = $6;
       break label$16;
      }
      label$19 : {
       if (!$5) {
        $9 = 0;
        break label$19;
       }
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
       $6 = HEAP32[$0 + 32 >> 2];
      }
      $7 = $6;
      label$21 : {
       if (($7 | 0) <= 0) {
        break label$21
       }
       $8 = $7 & 3;
       $10 = 0;
       if ($7 - 1 >>> 0 >= 3) {
        $12 = $7 & -4;
        $6 = 0;
        while (1) {
         $13 = $6 + $9 | 0;
         HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 40 >> 2] + $6 >> 2];
         HEAP32[$13 + 4 >> 2] = HEAP32[(HEAP32[$0 + 40 >> 2] + $6 | 0) + 4 >> 2];
         HEAP32[$13 + 8 >> 2] = HEAP32[(HEAP32[$0 + 40 >> 2] + $6 | 0) + 8 >> 2];
         HEAP32[$13 + 12 >> 2] = HEAP32[(HEAP32[$0 + 40 >> 2] + $6 | 0) + 12 >> 2];
         $6 = $6 + 16 | 0;
         $10 = $10 + 4 | 0;
         if (($12 | 0) != ($10 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$8) {
        break label$21
       }
       $6 = $10 << 2;
       while (1) {
        HEAP32[$6 + $9 >> 2] = HEAP32[HEAP32[$0 + 40 >> 2] + $6 >> 2];
        $6 = $6 + 4 | 0;
        $8 = $8 - 1 | 0;
        if ($8) {
         continue
        }
        break;
       };
      }
      $6 = HEAP32[$0 + 40 >> 2];
      if (!(!$6 | !HEAPU8[$0 + 44 | 0])) {
       btAlignedFreeInternal_28void__29($6);
       $7 = HEAP32[$0 + 32 >> 2];
      }
      HEAP32[$0 + 40 >> 2] = $9;
      HEAP8[$0 + 44 | 0] = 1;
      HEAP32[$0 + 36 >> 2] = $5;
      $6 = $5;
     }
     $5 = $7 + 1 | 0;
     HEAP32[$0 + 32 >> 2] = $5;
     HEAP32[HEAP32[$0 + 40 >> 2] + ($7 << 2) >> 2] = HEAP32[$16 >> 2];
     $11 = $11 + 1 | 0;
     if (($11 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
   }
   if (($4 | 0) > 0) {
    $6 = HEAP32[$0 + 56 >> 2];
    $5 = HEAP32[$0 + 52 >> 2];
    $11 = 0;
    while (1) {
     $12 = ($11 << 2) + $3 | 0;
     label$28 : {
      if (($5 | 0) != ($6 | 0)) {
       $7 = $5;
       break label$28;
      }
      $1 = $6 ? $6 << 1 : 1;
      if (($6 | 0) >= ($1 | 0)) {
       $7 = $6;
       break label$28;
      }
      label$31 : {
       if (!$1) {
        $9 = 0;
        break label$31;
       }
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2);
       $6 = HEAP32[$0 + 52 >> 2];
      }
      $7 = $6;
      label$33 : {
       if (($7 | 0) <= 0) {
        break label$33
       }
       $8 = $7 & 3;
       $10 = 0;
       if ($7 - 1 >>> 0 >= 3) {
        $2 = $7 & -4;
        $6 = 0;
        while (1) {
         $5 = $6 + $9 | 0;
         HEAP32[$5 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $6 >> 2];
         HEAP32[$5 + 4 >> 2] = HEAP32[(HEAP32[$0 + 60 >> 2] + $6 | 0) + 4 >> 2];
         HEAP32[$5 + 8 >> 2] = HEAP32[(HEAP32[$0 + 60 >> 2] + $6 | 0) + 8 >> 2];
         HEAP32[$5 + 12 >> 2] = HEAP32[(HEAP32[$0 + 60 >> 2] + $6 | 0) + 12 >> 2];
         $6 = $6 + 16 | 0;
         $10 = $10 + 4 | 0;
         if (($2 | 0) != ($10 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$8) {
        break label$33
       }
       $6 = $10 << 2;
       while (1) {
        HEAP32[$6 + $9 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $6 >> 2];
        $6 = $6 + 4 | 0;
        $8 = $8 - 1 | 0;
        if ($8) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$0 + 60 >> 2];
      if (!(!$2 | !HEAPU8[$0 + 64 | 0])) {
       btAlignedFreeInternal_28void__29($2);
       $7 = HEAP32[$0 + 52 >> 2];
      }
      HEAP32[$0 + 60 >> 2] = $9;
      HEAP8[$0 + 64 | 0] = 1;
      HEAP32[$0 + 56 >> 2] = $1;
      $6 = $1;
     }
     $5 = $7 + 1 | 0;
     HEAP32[$0 + 52 >> 2] = $5;
     HEAP32[HEAP32[$0 + 60 >> 2] + ($7 << 2) >> 2] = HEAP32[$12 >> 2];
     $11 = $11 + 1 | 0;
     if (($11 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
   }
   label$38 : {
    if (!$15) {
     $5 = HEAP32[$0 + 72 >> 2];
     break label$38;
    }
    $6 = HEAP32[$0 + 76 >> 2];
    $5 = HEAP32[$0 + 72 >> 2];
    $11 = 0;
    while (1) {
     $3 = ($11 << 2) + $14 | 0;
     label$41 : {
      if (($5 | 0) != ($6 | 0)) {
       $7 = $5;
       break label$41;
      }
      $1 = $6 ? $6 << 1 : 1;
      if (($6 | 0) >= ($1 | 0)) {
       $7 = $6;
       break label$41;
      }
      label$44 : {
       if (!$1) {
        $9 = 0;
        break label$44;
       }
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2);
       $6 = HEAP32[$0 + 72 >> 2];
      }
      $7 = $6;
      label$46 : {
       if (($7 | 0) <= 0) {
        break label$46
       }
       $8 = $7 & 3;
       $10 = 0;
       if ($7 - 1 >>> 0 >= 3) {
        $2 = $7 & -4;
        $6 = 0;
        while (1) {
         $4 = $6 + $9 | 0;
         HEAP32[$4 >> 2] = HEAP32[HEAP32[$0 + 80 >> 2] + $6 >> 2];
         HEAP32[$4 + 4 >> 2] = HEAP32[(HEAP32[$0 + 80 >> 2] + $6 | 0) + 4 >> 2];
         HEAP32[$4 + 8 >> 2] = HEAP32[(HEAP32[$0 + 80 >> 2] + $6 | 0) + 8 >> 2];
         HEAP32[$4 + 12 >> 2] = HEAP32[(HEAP32[$0 + 80 >> 2] + $6 | 0) + 12 >> 2];
         $6 = $6 + 16 | 0;
         $10 = $10 + 4 | 0;
         if (($2 | 0) != ($10 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$8) {
        break label$46
       }
       $6 = $10 << 2;
       while (1) {
        HEAP32[$6 + $9 >> 2] = HEAP32[HEAP32[$0 + 80 >> 2] + $6 >> 2];
        $6 = $6 + 4 | 0;
        $8 = $8 - 1 | 0;
        if ($8) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$0 + 80 >> 2];
      if (!(!$2 | !HEAPU8[$0 + 84 | 0])) {
       btAlignedFreeInternal_28void__29($2);
       $7 = HEAP32[$0 + 72 >> 2];
      }
      HEAP32[$0 + 80 >> 2] = $9;
      HEAP8[$0 + 84 | 0] = 1;
      HEAP32[$0 + 76 >> 2] = $1;
      $6 = $1;
     }
     $5 = $7 + 1 | 0;
     HEAP32[$0 + 72 >> 2] = $5;
     HEAP32[HEAP32[$0 + 80 >> 2] + ($7 << 2) >> 2] = HEAP32[$3 >> 2];
     $11 = $11 + 1 | 0;
     if (($11 | 0) != ($15 | 0)) {
      continue
     }
     break;
    };
   }
   if (HEAP32[HEAP32[$0 + 4 >> 2] + 152 >> 2] < (HEAP32[$0 + 52 >> 2] + $5 | 0)) {
    InplaceSolverIslandCallback__processConstraints_28_29($0)
   }
   return;
  }
  $5 = HEAP32[$0 + 8 >> 2];
  +FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 12 >> 2]]($5, $1, $2, $3, $4, $14, $15, $7, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
 }
 
 function btClosestNotMeConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 >> 2];
  $3 = HEAP32[$0 + 156 >> 2];
  label$1 : {
   if (!(HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 16 >> 2]) | (!(HEAP32[$0 + 20 >> 2] & HEAP32[$1 + 4 >> 2]) | ($2 | 0) == ($3 | 0))) {
    break label$1
   }
   $1 = HEAP32[$0 + 172 >> 2];
   if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, $3, $2) | 0) {
    $4 = 1;
    $1 = HEAP32[$0 + 172 >> 2];
    if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, HEAP32[$0 + 156 >> 2], $2) | 0) {
     break label$1
    }
   }
   $4 = 0;
  }
  return $4 | 0;
 }
 
 function btClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
  $5 = 1.0;
  $3 = HEAP32[$1 >> 2];
  if (!(($3 | 0) == HEAP32[$0 + 156 >> 2] | HEAPU8[$3 + 392 | 0] & 4 | -HEAPF64[$0 + 160 >> 3] <= HEAPF64[$1 + 24 >> 3] * (HEAPF64[$0 + 72 >> 3] - HEAPF64[$0 + 40 >> 3]) + (HEAPF64[$1 + 8 >> 3] * (HEAPF64[$0 + 56 >> 3] - HEAPF64[$0 + 24 >> 3]) + (HEAPF64[$0 - -64 >> 3] - HEAPF64[$0 + 32 >> 3]) * HEAPF64[$1 + 16 >> 3]))) {
   HEAP32[$0 + 152 >> 2] = $3;
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$1 + 72 >> 3];
   label$2 : {
    if ($2) {
     $2 = $1 + 8 | 0;
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$0 + 88 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 92 >> 2] = $3;
     $4 = $2 + 24 | 0;
     $6 = HEAP32[$4 + 4 >> 2];
     $3 = $0 + 112 | 0;
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$3 + 4 >> 2] = $6;
     $4 = $2 + 16 | 0;
     $6 = HEAP32[$4 + 4 >> 2];
     $3 = $0 + 104 | 0;
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$3 + 4 >> 2] = $6;
     $2 = $2 + 8 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $0 + 96 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     break label$2;
    }
    $9 = HEAPF64[$3 + 24 >> 3];
    $10 = HEAPF64[$3 + 16 >> 3];
    $11 = HEAPF64[$3 + 56 >> 3];
    $12 = HEAPF64[$3 + 40 >> 3];
    $13 = HEAPF64[$3 + 48 >> 3];
    $14 = HEAPF64[$3 + 88 >> 3];
    $15 = HEAPF64[$3 + 72 >> 3];
    $16 = HEAPF64[$3 + 80 >> 3];
    $17 = HEAPF64[$3 + 8 >> 3];
    $5 = HEAPF64[$1 + 24 >> 3];
    $7 = HEAPF64[$1 + 8 >> 3];
    $8 = HEAPF64[$1 + 16 >> 3];
    $2 = $0 + 112 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAPF64[$0 + 104 >> 3] = $14 * $5 + ($15 * $7 + $8 * $16);
    HEAPF64[$0 + 96 >> 3] = $11 * $5 + ($12 * $7 + $8 * $13);
    HEAPF64[$0 + 88 >> 3] = $9 * $5 + ($17 * $7 + $10 * $8);
   }
   $2 = HEAP32[$1 + 44 >> 2];
   HEAP32[$0 + 120 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$0 + 124 >> 2] = $2;
   $3 = $1 - -64 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 144 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = $1 + 56 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $0 + 136 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $2 = $1 + 48 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $0 = $0 + 128 | 0;
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 4 >> 2] = $3;
   $5 = HEAPF64[$1 + 72 >> 3];
  }
  return +$5;
 }
 
 function btGhostObject___btGhostObject_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28820;
  $1 = HEAP32[$0 + 588 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 592 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 588 >> 2] = 0;
  HEAP8[$0 + 592 | 0] = 1;
  $1 = $0 + 580 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCollisionObject___btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btGhostObject___btGhostObject_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28820;
  $1 = HEAP32[$0 + 588 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 592 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 588 >> 2] = 0;
  HEAP8[$0 + 592 | 0] = 1;
  $1 = $0 + 580 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCollisionObject___btCollisionObject_28_29($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $8 = HEAP32[$1 >> 2];
  $2 = HEAP32[$0 + 580 >> 2];
  label$1 : {
   label$2 : {
    if (($2 | 0) <= 0) {
     break label$2
    }
    $1 = HEAP32[$0 + 588 >> 2];
    $3 = $2;
    while (1) {
     if (($8 | 0) != HEAP32[$1 >> 2]) {
      $1 = $1 + 4 | 0;
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($3) {
     break label$1
    }
   }
   label$5 : {
    if (HEAP32[$0 + 584 >> 2] != ($2 | 0)) {
     break label$5
    }
    $4 = $2 ? $2 << 1 : 1;
    if (($4 | 0) <= ($2 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$4) {
      $3 = 0;
      break label$6;
     }
     $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $2 = HEAP32[$0 + 580 >> 2];
    }
    label$8 : {
     if (($2 | 0) <= 0) {
      break label$8
     }
     $5 = $2 & 3;
     if ($2 - 1 >>> 0 >= 3) {
      $9 = $2 & -4;
      $1 = 0;
      while (1) {
       $6 = $1 + $3 | 0;
       HEAP32[$6 >> 2] = HEAP32[HEAP32[$0 + 588 >> 2] + $1 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[(HEAP32[$0 + 588 >> 2] + $1 | 0) + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$0 + 588 >> 2] + $1 | 0) + 8 >> 2];
       HEAP32[$6 + 12 >> 2] = HEAP32[(HEAP32[$0 + 588 >> 2] + $1 | 0) + 12 >> 2];
       $1 = $1 + 16 | 0;
       $7 = $7 + 4 | 0;
       if (($9 | 0) != ($7 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$5) {
      break label$8
     }
     $1 = $7 << 2;
     while (1) {
      HEAP32[$1 + $3 >> 2] = HEAP32[HEAP32[$0 + 588 >> 2] + $1 >> 2];
      $1 = $1 + 4 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 588 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 592 | 0])) {
     btAlignedFreeInternal_28void__29($1);
     $2 = HEAP32[$0 + 580 >> 2];
    }
    HEAP32[$0 + 588 >> 2] = $3;
    HEAP8[$0 + 592 | 0] = 1;
    HEAP32[$0 + 584 >> 2] = $4;
   }
   HEAP32[$0 + 580 >> 2] = $2 + 1;
   HEAP32[HEAP32[$0 + 588 >> 2] + ($2 << 2) >> 2] = $8;
  }
 }
 
 function btGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   $2 = HEAP32[$0 + 580 >> 2];
   if (($2 | 0) <= 0) {
    break label$1
   }
   $5 = HEAP32[$1 >> 2];
   $3 = 0;
   $4 = HEAP32[$0 + 588 >> 2];
   $1 = $4;
   while (1) {
    if (($5 | 0) != HEAP32[$1 >> 2]) {
     $1 = $1 + 4 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   $3 = $0;
   $0 = $2 - 1 | 0;
   HEAP32[$3 + 580 >> 2] = $0;
   HEAP32[$1 >> 2] = HEAP32[($0 << 2) + $4 >> 2];
  }
 }
 
 function btPairCachingGhostObject__btPairCachingGhostObject_28_29($0) {
  var $1 = 0;
  btCollisionObject__btCollisionObject_28_29($0);
  HEAP32[$0 + 588 >> 2] = 0;
  HEAP8[$0 + 592 | 0] = 1;
  $1 = $0 + 580 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 472 >> 2] = 4;
  HEAP32[$0 >> 2] = 28864;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(72);
  btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($1);
  HEAP32[$0 + 596 >> 2] = $1;
  return $0;
 }
 
 function btPairCachingGhostObject___btPairCachingGhostObject_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28864;
  $1 = HEAP32[$0 + 596 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 596 >> 2]);
  HEAP32[$0 >> 2] = 28820;
  $1 = HEAP32[$0 + 588 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 592 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 588 >> 2] = 0;
  HEAP8[$0 + 592 | 0] = 1;
  $1 = $0 + 580 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCollisionObject___btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btPairCachingGhostObject___btPairCachingGhostObject_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28864;
  $1 = HEAP32[$0 + 596 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 596 >> 2]);
  HEAP32[$0 >> 2] = 28820;
  $1 = HEAP32[$0 + 588 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 592 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 588 >> 2] = 0;
  HEAP8[$0 + 592 | 0] = 1;
  $1 = $0 + 580 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  btCollisionObject___btCollisionObject_28_29($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btPairCachingGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = HEAP32[$0 + 376 >> 2];
  $9 = HEAP32[$1 >> 2];
  $4 = HEAP32[$0 + 580 >> 2];
  label$1 : {
   label$2 : {
    if (($4 | 0) <= 0) {
     break label$2
    }
    $3 = HEAP32[$0 + 588 >> 2];
    $5 = $4;
    while (1) {
     if (($9 | 0) != HEAP32[$3 >> 2]) {
      $3 = $3 + 4 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($5) {
     break label$1
    }
   }
   $10 = $2 ? $2 : $6;
   label$5 : {
    if (HEAP32[$0 + 584 >> 2] != ($4 | 0)) {
     break label$5
    }
    $7 = $4 ? $4 << 1 : 1;
    if (($7 | 0) <= ($4 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$7) {
      $5 = 0;
      break label$6;
     }
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2);
     $4 = HEAP32[$0 + 580 >> 2];
    }
    label$8 : {
     if (($4 | 0) <= 0) {
      break label$8
     }
     $2 = $4 & 3;
     $6 = 0;
     if ($4 - 1 >>> 0 >= 3) {
      $11 = $4 & -4;
      $3 = 0;
      while (1) {
       $8 = $3 + $5 | 0;
       HEAP32[$8 >> 2] = HEAP32[HEAP32[$0 + 588 >> 2] + $3 >> 2];
       HEAP32[$8 + 4 >> 2] = HEAP32[(HEAP32[$0 + 588 >> 2] + $3 | 0) + 4 >> 2];
       HEAP32[$8 + 8 >> 2] = HEAP32[(HEAP32[$0 + 588 >> 2] + $3 | 0) + 8 >> 2];
       HEAP32[$8 + 12 >> 2] = HEAP32[(HEAP32[$0 + 588 >> 2] + $3 | 0) + 12 >> 2];
       $3 = $3 + 16 | 0;
       $6 = $6 + 4 | 0;
       if (($11 | 0) != ($6 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break label$8
     }
     $3 = $6 << 2;
     while (1) {
      HEAP32[$3 + $5 >> 2] = HEAP32[HEAP32[$0 + 588 >> 2] + $3 >> 2];
      $3 = $3 + 4 | 0;
      $2 = $2 - 1 | 0;
      if ($2) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 588 >> 2];
    if (!(!$2 | !HEAPU8[$0 + 592 | 0])) {
     btAlignedFreeInternal_28void__29($2);
     $4 = HEAP32[$0 + 580 >> 2];
    }
    HEAP32[$0 + 588 >> 2] = $5;
    HEAP8[$0 + 592 | 0] = 1;
    HEAP32[$0 + 584 >> 2] = $7;
   }
   HEAP32[HEAP32[$0 + 588 >> 2] + ($4 << 2) >> 2] = $9;
   HEAP32[$0 + 580 >> 2] = $4 + 1;
   $0 = HEAP32[$0 + 596 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $10, $1) | 0;
  }
 }
 
 function btPairCachingGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   $5 = HEAP32[$0 + 580 >> 2];
   if (($5 | 0) <= 0) {
    break label$1
   }
   $7 = $3 ? $3 : HEAP32[$0 + 376 >> 2];
   $8 = HEAP32[$1 >> 2];
   $6 = HEAP32[$0 + 588 >> 2];
   $3 = $6;
   while (1) {
    if (($8 | 0) != HEAP32[$3 >> 2]) {
     $3 = $3 + 4 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($5 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($5 | 0) <= ($4 | 0)) {
    break label$1
   }
   $4 = $3;
   $3 = $5 - 1 | 0;
   HEAP32[$4 >> 2] = HEAP32[($3 << 2) + $6 >> 2];
   HEAP32[$0 + 580 >> 2] = $3;
   $0 = HEAP32[$0 + 596 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $7, $1, $2) | 0;
  }
 }
 
 function btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
  $7 = __stack_pointer - 528 | 0;
  __stack_pointer = $7;
  $8 = $2 + 8 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $14 = $7 + 400 | 0;
  $6 = $14 + 8 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 16 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 24 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 40 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 40 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 48 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 48 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 56 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 56 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 72 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 72 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 80 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 80 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $2 + 88 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 88 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $6 = HEAP32[$2 + 4 >> 2];
  HEAP32[$7 + 400 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 404 >> 2] = $6;
  $6 = HEAP32[$2 + 36 >> 2];
  HEAP32[$7 + 432 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$7 + 436 >> 2] = $6;
  $6 = HEAP32[$2 + 68 >> 2];
  HEAP32[$7 + 464 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$7 + 468 >> 2] = $6;
  $8 = $2 + 120 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $14 + 120 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $9 = $2 + 112 | 0;
  $6 = HEAP32[$9 + 4 >> 2];
  $27 = $14 + 112 | 0;
  HEAP32[$27 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$27 + 4 >> 2] = $6;
  $9 = $2 + 104 | 0;
  $6 = HEAP32[$9 + 4 >> 2];
  $28 = $14 + 104 | 0;
  HEAP32[$28 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$28 + 4 >> 2] = $6;
  $8 = $3 + 8 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $15 = $7 + 272 | 0;
  $6 = $15 + 8 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 16 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 24 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 40 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 40 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 48 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 48 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 56 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 56 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $6 = HEAP32[$2 + 100 >> 2];
  HEAP32[$7 + 496 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$7 + 500 >> 2] = $6;
  $6 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 272 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$7 + 276 >> 2] = $6;
  $6 = HEAP32[$3 + 36 >> 2];
  HEAP32[$7 + 304 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$7 + 308 >> 2] = $6;
  $8 = $3 + 88 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 88 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 80 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 80 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 72 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 72 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $8 = $3 + 120 | 0;
  $9 = HEAP32[$8 + 4 >> 2];
  $6 = $15 + 120 | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  $9 = $3 + 112 | 0;
  $6 = HEAP32[$9 + 4 >> 2];
  $22 = $15 + 112 | 0;
  HEAP32[$22 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$22 + 4 >> 2] = $6;
  $9 = $3 + 104 | 0;
  $6 = HEAP32[$9 + 4 >> 2];
  $8 = $15 + 104 | 0;
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$8 + 4 >> 2] = $6;
  $6 = HEAP32[$3 + 68 >> 2];
  HEAP32[$7 + 336 >> 2] = HEAP32[$3 + 64 >> 2];
  HEAP32[$7 + 340 >> 2] = $6;
  $6 = HEAP32[$3 + 100 >> 2];
  HEAP32[$7 + 368 >> 2] = HEAP32[$3 + 96 >> 2];
  HEAP32[$7 + 372 >> 2] = $6;
  HEAP32[$7 + 200 >> 2] = 0;
  HEAP32[$7 + 204 >> 2] = 0;
  HEAPF64[$7 + 192 >> 3] = HEAPF64[$22 >> 3] - HEAPF64[$27 >> 3];
  HEAPF64[$7 + 184 >> 3] = HEAPF64[$8 >> 3] - HEAPF64[$28 >> 3];
  HEAPF64[$7 + 176 >> 3] = HEAPF64[$7 + 368 >> 3] - HEAPF64[$7 + 496 >> 3];
  $8 = $7 + 16 | 0;
  $9 = $7 + 240 | 0;
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20double__29($14, $15, $8, $9);
  HEAP32[$7 + 168 >> 2] = 0;
  HEAP32[$7 + 172 >> 2] = 0;
  $11 = HEAPF64[$7 + 240 >> 3];
  HEAPF64[$7 + 160 >> 3] = $11 * HEAPF64[$7 + 32 >> 3];
  HEAPF64[$7 + 152 >> 3] = $11 * HEAPF64[$7 + 24 >> 3];
  HEAPF64[$7 + 144 >> 3] = $11 * HEAPF64[$7 + 16 >> 3];
  $6 = $8 + 120 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $8 + 112 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $8 + 104 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $8 + 96 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($14, $9);
  $6 = $8 + 88 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $8 + 56 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $18 = HEAPF64[$7 + 264 >> 3];
  $17 = HEAPF64[$7 + 256 >> 3];
  $20 = HEAPF64[$7 + 240 >> 3];
  $16 = HEAPF64[$7 + 248 >> 3];
  $13 = 2.0 / ($18 * $18 + ($17 * $17 + ($20 * $20 + $16 * $16)));
  $19 = $17 * $13;
  $12 = $16 * $19;
  $10 = $20 * $13;
  $11 = $18 * $10;
  HEAPF64[$8 + 72 >> 3] = $12 + $11;
  HEAPF64[$8 + 48 >> 3] = $12 - $11;
  $11 = $20 * $10;
  $10 = $16 * $13;
  $16 = $16 * $10;
  HEAPF64[$8 + 80 >> 3] = 1.0 - ($11 + $16);
  $17 = $17 * $19;
  HEAPF64[$8 + 40 >> 3] = 1.0 - ($11 + $17);
  HEAP32[$7 + 40 >> 2] = 0;
  HEAP32[$7 + 44 >> 2] = 0;
  $13 = $20 * $19;
  $12 = $18 * $10;
  HEAPF64[$7 + 80 >> 3] = $13 - $12;
  $10 = $20 * $10;
  $11 = $18 * $19;
  HEAPF64[$7 + 48 >> 3] = $10 + $11;
  HEAPF64[$7 + 32 >> 3] = $13 + $12;
  HEAPF64[$7 + 24 >> 3] = $10 - $11;
  HEAPF64[$7 + 16 >> 3] = 1.0 - ($16 + $17);
  btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20btVector3__2c_20btVector3__29_20const($1, $8, $7 + 176 | 0, $7 + 144 | 0, $9, $7 + 208 | 0);
  if (HEAP32[$0 + 580 >> 2] > 0) {
   $8 = $3 + 96 | 0;
   $9 = $2 + 96 | 0;
   $3 = 0;
   while (1) {
    $29 = HEAP32[HEAP32[$0 + 588 >> 2] + $3 >> 2];
    label$3 : {
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, HEAP32[$29 + 376 >> 2]) | 0)) {
      break label$3
     }
     $22 = HEAP32[$29 + 380 >> 2];
     $35 = $29 + 8 | 0;
     $6 = $7 + 16 | 0;
     $2 = $7 + 176 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 8 >> 2]]($22, $35, $6, $2);
     HEAP32[$7 + 40 >> 2] = 0;
     HEAP32[$7 + 44 >> 2] = 0;
     HEAP32[$7 + 200 >> 2] = 0;
     HEAP32[$7 + 204 >> 2] = 0;
     HEAPF64[$7 + 32 >> 3] = HEAPF64[$7 + 32 >> 3] + HEAPF64[$7 + 256 >> 3];
     HEAPF64[$7 + 24 >> 3] = HEAPF64[$7 + 24 >> 3] + HEAPF64[$7 + 248 >> 3];
     HEAPF64[$7 + 16 >> 3] = HEAPF64[$7 + 16 >> 3] + HEAPF64[$7 + 240 >> 3];
     HEAPF64[$7 + 176 >> 3] = HEAPF64[$7 + 176 >> 3] + HEAPF64[$7 + 208 >> 3];
     HEAPF64[$7 + 184 >> 3] = HEAPF64[$7 + 184 >> 3] + HEAPF64[$7 + 216 >> 3];
     HEAPF64[$7 + 192 >> 3] = HEAPF64[$7 + 192 >> 3] + HEAPF64[$7 + 224 >> 3];
     HEAP32[$7 + 8 >> 2] = 0;
     HEAP32[$7 + 12 >> 2] = 1072693248;
     $36 = $7 + 8 | 0;
     $30 = $7 + 144 | 0;
     $37 = 0;
     $10 = HEAPF64[$2 >> 3];
     $11 = HEAPF64[$6 >> 3];
     $19 = ($10 + $11) * .5;
     $18 = HEAPF64[$8 >> 3] - $19;
     $31 = ($10 - $11) * .5;
     $38 = $18 > $31;
     $16 = HEAPF64[$2 + 8 >> 3];
     $17 = HEAPF64[$6 + 8 >> 3];
     $13 = ($16 + $17) * .5;
     $21 = HEAPF64[$8 + 8 >> 3] - $13;
     $12 = HEAPF64[$2 + 16 >> 3];
     $10 = HEAPF64[$6 + 16 >> 3];
     $11 = ($12 + $10) * .5;
     $34 = HEAPF64[$8 + 16 >> 3] - $11;
     $20 = -$31;
     $39 = $18 < $20;
     $32 = ($16 - $17) * .5;
     $16 = -$32;
     $40 = $21 < $16;
     $41 = $21 > $32;
     $12 = ($12 - $10) * .5;
     $17 = -$12;
     $42 = $34 < $17;
     $14 = $39 | $38 << 3 | $40 << 1 | $41 << 4 | $42 << 2 | ($12 < $34) << 5;
     $24 = HEAPF64[$9 >> 3] - $19;
     $15 = $24 > $31;
     $27 = $20 > $24;
     $25 = HEAPF64[$9 + 8 >> 3] - $13;
     $28 = $25 < $16;
     $22 = $25 > $32;
     $26 = HEAPF64[$9 + 16 >> 3] - $11;
     $6 = $26 < $17;
     $2 = $15 << 3 | $27 | $28 << 1 | $22 << 4 | $6 << 2 | ($12 < $26) << 5;
     label$1 : {
      if ($14 & $2) {
       break label$1
      }
      $33 = $18 - $24;
      $11 = HEAPF64[$36 >> 3];
      label$20 : {
       label$31 : {
        if ($27) {
         $23 = 0.0;
         $13 = (-$24 - $31) / $33;
         if (!($13 >= 0.0)) {
          break label$31
         }
         $23 = 1.0;
         break label$20;
        }
        $23 = 0.0;
        if (!$39) {
         break label$31
        }
        $10 = (-$24 - $31) / $33;
        if (!($10 < $11)) {
         break label$31
        }
        $11 = $10;
       }
       $13 = 0.0;
      }
      $18 = $21 - $25;
      label$5 : {
       label$6 : {
        if ($28) {
         $21 = 0.0;
         $10 = (-$25 - $32) / $18;
         if (!($13 <= $10)) {
          break label$6
         }
         $23 = 0.0;
         $21 = 1.0;
         break label$5;
        }
        $21 = 0.0;
        if (!$40) {
         break label$6
        }
        $10 = (-$25 - $32) / $18;
        if (!($10 < $11)) {
         break label$6
        }
        $11 = $10;
       }
       $10 = $13;
      }
      $19 = $34 - $26;
      label$8 : {
       label$9 : {
        if ($6) {
         $13 = 0.0;
         $12 = (-$26 - $12) / $19;
         if (!($12 >= $10)) {
          break label$9
         }
         $21 = 0.0;
         $13 = 1.0;
         $23 = 0.0;
         break label$8;
        }
        $13 = 0.0;
        if (!$42) {
         break label$9
        }
        $12 = (-$26 - $12) / $19;
        if (!($12 < $11)) {
         break label$9
        }
        $11 = $12;
       }
       $12 = $10;
      }
      label$11 : {
       label$12 : {
        if ($15) {
         $10 = (-$20 - $24) / $33;
         if (!($12 <= $10)) {
          break label$12
         }
         $23 = -1.0;
         $13 = 0.0;
         $21 = 0.0;
         break label$11;
        }
        if (!$38) {
         break label$12
        }
        $10 = (-$20 - $24) / $33;
        if (!($10 < $11)) {
         break label$12
        }
        $11 = $10;
       }
       $10 = $12;
      }
      label$14 : {
       label$15 : {
        if ($22) {
         $12 = (-$16 - $25) / $18;
         if (!($12 >= $10)) {
          break label$15
         }
         $21 = -1.0;
         $13 = 0.0;
         $23 = 0.0;
         break label$14;
        }
        if (!$41) {
         break label$15
        }
        $12 = (-$16 - $25) / $18;
        if (!($12 < $11)) {
         break label$15
        }
        $11 = $12;
       }
       $12 = $10;
      }
      label$17 : {
       label$18 : {
        if ($2 & 32) {
         $10 = (-$17 - $26) / $19;
         if (!($12 <= $10)) {
          break label$18
         }
         $21 = 0.0;
         $13 = -1.0;
         $23 = 0.0;
         break label$17;
        }
        if (!($14 & 32)) {
         break label$18
        }
        $10 = (-$17 - $26) / $19;
        if (!($10 < $11)) {
         break label$18
        }
        $11 = $10;
       }
       $10 = $12;
      }
      if (!($10 <= $11)) {
       break label$1
      }
      HEAPF64[$36 >> 3] = $10;
      HEAP32[$30 + 24 >> 2] = 0;
      HEAP32[$30 + 28 >> 2] = 0;
      HEAPF64[$30 + 16 >> 3] = $13;
      HEAPF64[$30 + 8 >> 3] = $21;
      HEAPF64[$30 >> 3] = $23;
      $37 = 1;
     }
     if (!$37) {
      break label$3
     }
     $2 = HEAP32[$29 + 380 >> 2];
     $6 = __stack_pointer - 32 | 0;
     __stack_pointer = $6;
     HEAP32[$6 + 24 >> 2] = -1;
     HEAP32[$6 + 28 >> 2] = -1;
     HEAP32[$6 + 20 >> 2] = $35;
     HEAP32[$6 + 16 >> 2] = $29;
     HEAP32[$6 + 12 >> 2] = $2;
     HEAP32[$6 + 8 >> 2] = 0;
     btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29($1, $7 + 400 | 0, $7 + 272 | 0, $6 + 8 | 0, $4, $5);
     __stack_pointer = $6 + 32 | 0;
    }
    $3 = $3 + 4 | 0;
    $43 = $43 + 1 | 0;
    if (($43 | 0) < HEAP32[$0 + 580 >> 2]) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $7 + 528 | 0;
 }
 
 function btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0;
  $4 = __stack_pointer - 224 | 0;
  __stack_pointer = $4;
  $2 = $0 + 480 | 0;
  $10 = HEAPF64[$1 + 24 >> 3];
  label$1 : {
   label$2 : {
    if ($10 != HEAPF64[$0 + 504 >> 3]) {
     $8 = HEAPF64[$1 + 16 >> 3];
     break label$2;
    }
    $8 = HEAPF64[$1 + 16 >> 3];
    if ($8 != HEAPF64[$0 + 496 >> 3] | HEAPF64[$0 + 488 >> 3] != HEAPF64[$1 + 8 >> 3]) {
     break label$2
    }
    if (HEAPF64[$2 >> 3] == HEAPF64[$1 >> 3]) {
     break label$1
    }
   }
   $12 = $2 + 24 | 0;
   $15 = HEAP32[$12 + 4 >> 2];
   $24 = $4 + 192 | 0;
   $5 = $24 + 24 | 0;
   HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$5 + 4 >> 2] = $15;
   $12 = $2 + 16 | 0;
   $15 = HEAP32[$12 + 4 >> 2];
   $5 = $24 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$5 + 4 >> 2] = $15;
   $12 = $2 + 8 | 0;
   $15 = HEAP32[$12 + 4 >> 2];
   $5 = $24 + 8 | 0;
   HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$5 + 4 >> 2] = $15;
   $5 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 + 192 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 196 >> 2] = $5;
   $11 = HEAPF64[$1 >> 3];
   $14 = HEAPF64[$1 + 8 >> 3];
   $6 = $8 * $8 + ($11 * $11 + $14 * $14);
   if ($6 > 0.0) {
    $3 = 1.0 / Math_sqrt($6);
    $9 = $8 * $3;
    $7 = $14 * $3;
    $3 = $11 * $3;
   } else {
    $10 = 0.0
   }
   HEAPF64[$0 + 504 >> 3] = $10;
   HEAPF64[$0 + 480 >> 3] = $3;
   HEAPF64[$0 + 496 >> 3] = $9;
   HEAPF64[$0 + 488 >> 3] = $7;
   if (!HEAP32[$0 + 16 >> 2]) {
    break label$1
   }
   $1 = $4 + 160 | 0;
   $5 = $4 + 192 | 0;
   $10 = HEAPF64[$2 + 16 >> 3];
   $6 = HEAPF64[$2 >> 3];
   $9 = HEAPF64[$2 + 8 >> 3];
   $7 = $10 * $10 + ($6 * $6 + $9 * $9);
   label$10 : {
    if ($7 == 0.0) {
     break label$10
    }
    $3 = HEAPF64[$5 + 16 >> 3];
    $11 = $3 * $3;
    $3 = HEAPF64[$5 >> 3];
    $8 = $3 * $3;
    $3 = HEAPF64[$5 + 8 >> 3];
    if ($11 + ($8 + $3 * $3) == 0.0) {
     break label$10
    }
    $3 = 1.0 / Math_sqrt($7);
    HEAPF64[$2 + 16 >> 3] = $10 * $3;
    HEAPF64[$2 + 8 >> 3] = $9 * $3;
    HEAPF64[$2 >> 3] = $6 * $3;
    $9 = HEAPF64[$5 + 16 >> 3];
    $7 = HEAPF64[$5 >> 3];
    $3 = HEAPF64[$5 + 8 >> 3];
    $6 = 1.0 / Math_sqrt($9 * $9 + ($7 * $7 + $3 * $3));
    $11 = $9 * $6;
    HEAPF64[$5 + 16 >> 3] = $11;
    $14 = $3 * $6;
    HEAPF64[$5 + 8 >> 3] = $14;
    $6 = $7 * $6;
    HEAPF64[$5 >> 3] = $6;
    $16 = HEAPF64[$2 + 8 >> 3];
    $7 = -$16;
    $18 = HEAPF64[$2 + 16 >> 3];
    $9 = -$18;
    $8 = HEAPF64[$2 >> 3];
    $3 = $18 * $11 + ($8 * $6 + $16 * $14);
    label$21 : {
     if ($3 < -.9999999999999998) {
      if (Math_abs($18) > .7071067811865476) {
       $3 = 1.0 / Math_sqrt($16 * $16 + $18 * $18);
       $10 = $16 * $3;
       $6 = $3 * $9;
       $7 = 0.0;
       $3 = 0.0;
       break label$21;
      }
      $3 = 1.0 / Math_sqrt($8 * $8 + $16 * $16);
      $6 = $8 * $3;
      $7 = $3 * $7;
      $10 = 0.0;
      $3 = 0.0;
      break label$21;
     }
     $10 = $8 * $14 + $6 * $7;
     $3 = $3 + 1.0;
     $3 = Math_sqrt($3 + $3);
     $7 = 1.0 / $3;
     $10 = $10 * $7;
     $6 = ($18 * $6 - $11 * $8) * $7;
     $7 = ($16 * $11 + $14 * $9) * $7;
     $3 = $3 * .5;
    }
    HEAPF64[$1 + 24 >> 3] = $3;
    HEAPF64[$1 + 16 >> 3] = $10;
    HEAPF64[$1 + 8 >> 3] = $6;
    HEAPF64[$1 >> 3] = $7;
   }
   $13 = HEAP32[$0 + 16 >> 2];
   $1 = $13 + 32 | 0;
   $19 = HEAP32[$1 >> 2];
   $20 = HEAP32[$1 + 4 >> 2];
   $1 = $13 + 24 | 0;
   $21 = HEAP32[$1 >> 2];
   $25 = HEAP32[$1 + 4 >> 2];
   $1 = $13 + 16 | 0;
   $12 = HEAP32[$1 >> 2];
   $15 = HEAP32[$1 + 4 >> 2];
   $31 = HEAP32[$13 + 8 >> 2];
   $24 = HEAP32[$13 + 12 >> 2];
   $5 = $13 + 48 | 0;
   $2 = HEAP32[$5 + 4 >> 2];
   $17 = $4 + 32 | 0;
   $29 = $17 + 40 | 0;
   $1 = $29;
   HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $5 = $13 + 56 | 0;
   $2 = HEAP32[$5 + 4 >> 2];
   $30 = $17 + 48 | 0;
   $1 = $30;
   HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $2 = $13 - -64 | 0;
   $1 = HEAP32[$2 + 4 >> 2];
   $22 = $17 + 56 | 0;
   HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$22 + 4 >> 2] = $1;
   $26 = $4 + 40 | 0;
   HEAP32[$26 >> 2] = $12;
   HEAP32[$26 + 4 >> 2] = $15;
   $27 = $17 + 16 | 0;
   HEAP32[$27 >> 2] = $21;
   HEAP32[$27 + 4 >> 2] = $25;
   $25 = $17 + 24 | 0;
   $1 = $25;
   HEAP32[$1 >> 2] = $19;
   HEAP32[$1 + 4 >> 2] = $20;
   $1 = $13 + 40 | 0;
   $12 = HEAP32[$1 >> 2];
   $15 = HEAP32[$1 + 4 >> 2];
   $5 = $13 + 80 | 0;
   $2 = HEAP32[$5 + 4 >> 2];
   $20 = $17 + 72 | 0;
   $1 = $20;
   HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $5 = $13 + 88 | 0;
   $2 = HEAP32[$5 + 4 >> 2];
   $21 = $17 + 80 | 0;
   $1 = $21;
   HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   $2 = $13 + 96 | 0;
   $1 = HEAP32[$2 + 4 >> 2];
   $19 = $17 + 88 | 0;
   HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$19 + 4 >> 2] = $1;
   HEAP32[$4 + 32 >> 2] = $31;
   HEAP32[$4 + 36 >> 2] = $24;
   HEAP32[$4 + 64 >> 2] = $12;
   HEAP32[$4 + 68 >> 2] = $15;
   $2 = $13 + 72 | 0;
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 + 96 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 100 >> 2] = $1;
   $2 = $13 + 112 | 0;
   $1 = HEAP32[$2 + 4 >> 2];
   $12 = $17 + 104 | 0;
   HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$12 + 4 >> 2] = $1;
   $2 = $13 + 120 | 0;
   $1 = HEAP32[$2 + 4 >> 2];
   $15 = $17 + 112 | 0;
   HEAP32[$15 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$15 + 4 >> 2] = $1;
   $2 = $13 + 128 | 0;
   $1 = HEAP32[$2 + 4 >> 2];
   $5 = $17 + 120 | 0;
   HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$5 + 4 >> 2] = $1;
   $2 = $13 + 104 | 0;
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 + 128 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 132 >> 2] = $1;
   $8 = HEAPF64[$4 + 160 >> 3];
   $11 = HEAPF64[$4 + 176 >> 3];
   $14 = HEAPF64[$4 + 184 >> 3];
   $10 = HEAPF64[$4 + 168 >> 3];
   btMatrix3x3__getRotation_28btQuaternion__29_20const($17, $4);
   HEAP32[$19 >> 2] = 0;
   HEAP32[$19 + 4 >> 2] = 0;
   HEAP32[$22 >> 2] = 0;
   HEAP32[$22 + 4 >> 2] = 0;
   HEAP32[$25 >> 2] = 0;
   HEAP32[$25 + 4 >> 2] = 0;
   $6 = HEAPF64[$4 + 16 >> 3];
   $9 = HEAPF64[$4 + 8 >> 3];
   $7 = HEAPF64[$4 + 24 >> 3];
   $3 = HEAPF64[$4 >> 3];
   $28 = $8 * $6 + ($14 * $9 - $10 * $7 - $11 * $3);
   $16 = $11 * $6 + ($10 * $9 + ($14 * $7 + $8 * $3));
   $18 = $10 * $3 + ($14 * $6 - $7 * $11 - $8 * $9);
   $23 = $11 * $9 + ($14 * $3 - $7 * $8 - $10 * $6);
   $6 = 2.0 / ($16 * $16 + ($18 * $18 + ($23 * $23 + $28 * $28)));
   $8 = $18 * $6;
   $9 = $28 * $8;
   $7 = $23 * $6;
   $3 = $16 * $7;
   HEAPF64[$20 >> 3] = $9 + $3;
   HEAPF64[$30 >> 3] = $9 - $3;
   $14 = $23 * $8;
   $11 = $28 * $6;
   $10 = $16 * $11;
   HEAPF64[$27 >> 3] = $14 + $10;
   $6 = $23 * $11;
   $9 = $16 * $8;
   HEAPF64[$26 >> 3] = $6 - $9;
   $3 = $23 * $7;
   $7 = $28 * $11;
   HEAPF64[$21 >> 3] = 1.0 - ($3 + $7);
   $11 = $3;
   $3 = $18 * $8;
   HEAPF64[$29 >> 3] = 1.0 - ($11 + $3);
   $2 = HEAP32[$0 + 16 >> 2];
   HEAP32[$2 + 536 >> 2] = HEAP32[$2 + 536 >> 2] + 1;
   HEAPF64[$4 + 96 >> 3] = $14 - $10;
   HEAPF64[$4 + 64 >> 3] = $6 + $9;
   $0 = $2 + 32 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $1 = HEAP32[$27 + 4 >> 2];
   $0 = $2 + 24 | 0;
   HEAP32[$0 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$26 + 4 >> 2];
   $0 = $2 + 16 | 0;
   HEAP32[$0 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   HEAPF64[$4 + 32 >> 3] = 1.0 - ($7 + $3);
   $0 = HEAP32[$4 + 36 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$2 + 12 >> 2] = $0;
   $1 = HEAP32[$22 + 4 >> 2];
   $0 = $2 - -64 | 0;
   HEAP32[$0 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$30 + 4 >> 2];
   $0 = $2 + 56 | 0;
   HEAP32[$0 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$29 + 4 >> 2];
   $0 = $2 + 48 | 0;
   HEAP32[$0 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$4 + 68 >> 2];
   $0 = $2 + 40 | 0;
   HEAP32[$0 >> 2] = HEAP32[$4 + 64 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$19 + 4 >> 2];
   $0 = $2 + 96 | 0;
   HEAP32[$0 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$21 + 4 >> 2];
   $0 = $2 + 88 | 0;
   HEAP32[$0 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$20 + 4 >> 2];
   $0 = $2 + 80 | 0;
   HEAP32[$0 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$4 + 100 >> 2];
   $0 = $2 + 72 | 0;
   HEAP32[$0 >> 2] = HEAP32[$4 + 96 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$5 + 4 >> 2];
   $0 = $2 + 128 | 0;
   HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$15 + 4 >> 2];
   $0 = $2 + 120 | 0;
   HEAP32[$0 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$12 + 4 >> 2];
   $0 = $2 + 112 | 0;
   HEAP32[$0 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $1 = HEAP32[$4 + 132 >> 2];
   $0 = $2 + 104 | 0;
   HEAP32[$0 >> 2] = HEAP32[$4 + 128 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
  }
  __stack_pointer = $4 + 224 | 0;
 }
 
 function btKinematicCharacterController___btKinematicCharacterController_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 28976;
  $1 = HEAP32[$0 + 616 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 620 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 616 >> 2] = 0;
  HEAP8[$0 + 620 | 0] = 1;
  $1 = $0 + 608 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 596 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 600 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 596 >> 2] = 0;
  HEAP8[$0 + 600 | 0] = 1;
  $1 = $0 + 588 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 576 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 580 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 576 >> 2] = 0;
  HEAP8[$0 + 580 | 0] = 1;
  $1 = $0 + 568 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 404 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 408 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 404 >> 2] = 0;
  HEAP8[$0 + 408 | 0] = 1;
  $1 = $0 + 396 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btKinematicCharacterController___btKinematicCharacterController_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btKinematicCharacterController___btKinematicCharacterController_28_29($0));
 }
 
 function btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  $4 = HEAP32[$0 + 20 >> 2];
  $6 = $5 + 224 | 0;
  $7 = $5 + 192 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, HEAP32[$0 + 16 >> 2] + 8 | 0, $6, $7);
  $4 = HEAP32[$1 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, HEAP32[HEAP32[$0 + 16 >> 2] + 376 >> 2], $6, $7, HEAP32[$1 + 24 >> 2]);
  $4 = HEAP32[$1 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 32 >> 2]]($4, HEAP32[HEAP32[$0 + 16 >> 2] + 596 >> 2], $1 + 32 | 0, $4);
  $1 = HEAP32[$0 + 16 >> 2];
  $4 = $1 + 104 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 256 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$0 + 260 >> 2] = $6;
  $6 = $1 + 112 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $0 + 264 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $1 + 120 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $0 + 272 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $1 + 128 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $0 + 280 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $12 = $0 + 256 | 0;
  $1 = HEAP32[$1 + 596 >> 2];
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0) <= 0) {
    break label$1
   }
   $21 = $0 + 392 | 0;
   $1 = $5 + 160 | 0;
   $6 = $1 + 16 | 0;
   $7 = $1 + 8 | 0;
   $22 = $2 - 1 | 0;
   $23 = ($3 | 0) != 1;
   while (1) {
    $4 = HEAP32[$0 + 396 >> 2];
    label$4 : {
     if (($4 | 0) >= 0) {
      break label$4
     }
     if (HEAP32[$0 + 400 >> 2] < 0) {
      $1 = HEAP32[$0 + 404 >> 2];
      if (!(!$1 | !HEAPU8[$0 + 408 | 0])) {
       btAlignedFreeInternal_28void__29($1)
      }
      HEAP8[$0 + 408 | 0] = 1;
      HEAP32[$0 + 400 >> 2] = 0;
      HEAP32[$0 + 404 >> 2] = 0;
     }
     $3 = $4;
     $2 = 0 - $4 & 3;
     if ($2) {
      $1 = $4 << 2;
      while (1) {
       HEAP32[HEAP32[$0 + 404 >> 2] + $1 >> 2] = 0;
       $1 = $1 + 4 | 0;
       $3 = $3 + 1 | 0;
       $2 = $2 - 1 | 0;
       if ($2) {
        continue
       }
       break;
      };
     }
     if ($4 >>> 0 > 4294967292) {
      break label$4
     }
     $1 = $3 << 2;
     while (1) {
      HEAP32[HEAP32[$0 + 404 >> 2] + $1 >> 2] = 0;
      HEAP32[(HEAP32[$0 + 404 >> 2] + $1 | 0) + 4 >> 2] = 0;
      HEAP32[(HEAP32[$0 + 404 >> 2] + $1 | 0) + 8 >> 2] = 0;
      HEAP32[(HEAP32[$0 + 404 >> 2] + $1 | 0) + 12 >> 2] = 0;
      $1 = $1 + 16 | 0;
      $3 = $3 + 4 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 396 >> 2] = 0;
    $1 = HEAP32[HEAP32[$0 + 16 >> 2] + 596 >> 2];
    $2 = HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1) | 0) + 12 >> 2] + ($17 << 4) | 0;
    $1 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
    $3 = HEAP32[HEAP32[$2 >> 2] >> 2];
    label$10 : {
     if (!(HEAPU8[$3 + 392 | 0] & 4 ? !$3 : 1) | !(HEAPU8[$1 + 392 | 0] & 4 ? !$1 : 1)) {
      break label$10
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $3, $1) | 0)) {
      break label$10
     }
     $1 = HEAP32[$2 + 8 >> 2];
     if ($1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $21)
     }
     $11 = HEAP32[$0 + 396 >> 2];
     if (($11 | 0) <= 0) {
      break label$10
     }
     $18 = 0;
     while (1) {
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $1 = $7 + 8 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $7 + 16 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$5 + 160 >> 2] = 0;
      HEAP32[$5 + 164 >> 2] = 1072693248;
      label$15 : {
       label$16 : {
        switch ($22 | 0) {
        case 0:
         HEAP32[$6 >> 2] = 0;
         HEAP32[$6 + 4 >> 2] = 0;
         $1 = $6 + 8 | 0;
         HEAP32[$1 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         HEAP32[$5 + 168 >> 2] = 0;
         HEAP32[$5 + 172 >> 2] = 1072693248;
         HEAP32[$5 + 160 >> 2] = 0;
         HEAP32[$5 + 164 >> 2] = 0;
         break label$15;
        case 1:
         HEAP32[$7 >> 2] = 0;
         HEAP32[$7 + 4 >> 2] = 0;
         HEAP32[$5 + 160 >> 2] = 0;
         HEAP32[$5 + 164 >> 2] = 0;
         HEAP32[$5 + 176 >> 2] = 0;
         HEAP32[$5 + 180 >> 2] = 1072693248;
         break label$15;
        case 2:
         break label$16;
        default:
         break label$15;
        };
       }
       HEAP32[$6 >> 2] = 0;
       HEAP32[$6 + 4 >> 2] = 0;
       $1 = $6 + 8 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       HEAP32[$5 + 168 >> 2] = 0;
       HEAP32[$5 + 172 >> 2] = 1072693248;
      }
      if (!$23) {
       HEAP32[$5 + 184 >> 2] = 0;
       HEAP32[$5 + 188 >> 2] = 0;
       HEAP32[$5 + 176 >> 2] = 0;
       HEAP32[$5 + 180 >> 2] = 1072693248;
       HEAP32[$5 + 168 >> 2] = 0;
       HEAP32[$5 + 172 >> 2] = 1072693248;
       HEAP32[$5 + 160 >> 2] = 0;
       HEAP32[$5 + 164 >> 2] = 1072693248;
      }
      $4 = HEAP32[HEAP32[$0 + 404 >> 2] + ($18 << 2) >> 2];
      $10 = HEAP32[$4 + 1456 >> 2];
      label$20 : {
       if (($10 | 0) <= 0) {
        break label$20
       }
       $16 = HEAP32[$4 + 1448 >> 2] == HEAP32[$0 + 16 >> 2] ? -1.0 : 1.0;
       label$21 : {
        $2 = HEAP32[$0 + 560 >> 2];
        if ($2) {
         $1 = $4 + 136 | 0;
         $3 = 1;
         while (1) {
          $11 = $1 + -64 | 0;
          $8 = $11 + 24 | 0;
          $13 = HEAP32[$8 + 4 >> 2];
          $14 = $5 + 128 | 0;
          $10 = $14 + 24 | 0;
          HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
          HEAP32[$10 + 4 >> 2] = $13;
          $8 = $11 + 16 | 0;
          $13 = HEAP32[$8 + 4 >> 2];
          $10 = $14 + 16 | 0;
          HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
          HEAP32[$10 + 4 >> 2] = $13;
          $8 = $11 + 8 | 0;
          $13 = HEAP32[$8 + 4 >> 2];
          $10 = $14 + 8 | 0;
          HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
          HEAP32[$10 + 4 >> 2] = $13;
          $10 = HEAP32[$11 + 4 >> 2];
          HEAP32[$5 + 128 >> 2] = HEAP32[$11 >> 2];
          HEAP32[$5 + 132 >> 2] = $10;
          if ($2) {
           FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $5 + 128 | 0, $1, 1.0, 0, $5 + 160 | 0)
          }
          $15 = HEAPF64[$1 + 32 >> 3];
          $9 = HEAPF64[$0 + 24 >> 3];
          label$25 : {
           if (!($15 < -$9)) {
            break label$25
           }
           $9 = $15 + $9;
           if (!($9 < -1.0e-07)) {
            break label$25
           }
           $15 = HEAPF64[$1 + 16 >> 3];
           $19 = HEAPF64[$1 + 8 >> 3];
           HEAPF64[$0 + 256 >> 3] = $9 * ($16 * HEAPF64[$1 >> 3]) + HEAPF64[$0 + 256 >> 3];
           HEAPF64[$0 + 264 >> 3] = $9 * ($16 * $19) + HEAPF64[$0 + 264 >> 3];
           HEAPF64[$0 + 272 >> 3] = $9 * ($16 * $15) + HEAPF64[$0 + 272 >> 3];
           $20 = 1;
          }
          if (HEAP32[$4 + 1456 >> 2] <= ($3 | 0)) {
           break label$21
          }
          $1 = $1 + 360 | 0;
          $3 = $3 + 1 | 0;
          $2 = HEAP32[$0 + 560 >> 2];
          continue;
         };
        }
        $1 = $4 + 168 | 0;
        $15 = HEAPF64[$0 + 24 >> 3];
        $19 = -$15;
        $2 = 0;
        while (1) {
         $3 = $1 - 96 | 0;
         $8 = $3 + 24 | 0;
         $13 = HEAP32[$8 + 4 >> 2];
         $14 = $5 + 128 | 0;
         $4 = $14 + 24 | 0;
         HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$4 + 4 >> 2] = $13;
         $8 = $3 + 16 | 0;
         $13 = HEAP32[$8 + 4 >> 2];
         $4 = $14 + 16 | 0;
         HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$4 + 4 >> 2] = $13;
         $8 = $3 + 8 | 0;
         $13 = HEAP32[$8 + 4 >> 2];
         $4 = $14 + 8 | 0;
         HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
         HEAP32[$4 + 4 >> 2] = $13;
         $4 = HEAP32[$3 + 4 >> 2];
         HEAP32[$5 + 128 >> 2] = HEAP32[$3 >> 2];
         HEAP32[$5 + 132 >> 2] = $4;
         $9 = HEAPF64[$1 >> 3];
         label$27 : {
          if (!($9 < $19)) {
           break label$27
          }
          $9 = $9 + $15;
          if (!($9 < -1.0e-07)) {
           break label$27
          }
          $24 = HEAPF64[$1 - 16 >> 3];
          $25 = HEAPF64[$1 - 24 >> 3];
          HEAPF64[$0 + 256 >> 3] = $9 * ($16 * HEAPF64[$1 - 32 >> 3]) + HEAPF64[$0 + 256 >> 3];
          HEAPF64[$0 + 264 >> 3] = $9 * ($16 * $25) + HEAPF64[$0 + 264 >> 3];
          HEAPF64[$0 + 272 >> 3] = $9 * ($16 * $24) + HEAPF64[$0 + 272 >> 3];
          $20 = 1;
         }
         $1 = $1 + 360 | 0;
         $2 = $2 + 1 | 0;
         if (($10 | 0) > ($2 | 0)) {
          continue
         }
         break;
        };
        break label$20;
       }
       $11 = HEAP32[$0 + 396 >> 2];
      }
      $18 = $18 + 1 | 0;
      if (($18 | 0) < ($11 | 0)) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[HEAP32[$0 + 16 >> 2] + 596 >> 2];
    $17 = $17 + 1 | 0;
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0) > ($17 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = $12 + 8 | 0;
  $2 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $3 = $12 + 16 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $6 = HEAP32[$12 >> 2];
  $7 = HEAP32[$12 + 4 >> 2];
  $12 = $12 + 24 | 0;
  $17 = HEAP32[$12 + 4 >> 2];
  $0 = HEAP32[$0 + 16 >> 2];
  $11 = $0 + 128 | 0;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$11 + 4 >> 2] = $17;
  $12 = $0 + 120 | 0;
  HEAP32[$12 >> 2] = $4;
  HEAP32[$12 + 4 >> 2] = $3;
  $3 = $0 + 112 | 0;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $0 + 104 | 0;
  HEAP32[$1 >> 2] = $6;
  HEAP32[$1 + 4 >> 2] = $7;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  __stack_pointer = $5 + 256 | 0;
  return $20;
 }
 
 function btKinematicCharacterController__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $0 = HEAP32[$2 + 376 >> 2];
  $1 = HEAP32[$1 + 376 >> 2];
  if (!(HEAP32[$0 + 8 >> 2] & HEAP32[$1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 4 >> 2]) != 0 | 0;
 }
 
 function btKinematicCharacterController__stepForwardAndStrafe_28btCollisionWorld__2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0;
  $4 = __stack_pointer - 528 | 0;
  __stack_pointer = $4;
  $3 = $4 + 400 | 0;
  $7 = $3 + 16 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 + 24 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 + 32 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 + 48 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 + 40 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 1072693248;
  $7 = $3 + 56 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 - -64 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $3 + 72 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $5 = HEAPF64[$2 >> 3];
  $8 = HEAPF64[$2 + 8 >> 3];
  $10 = HEAPF64[$2 + 16 >> 3];
  $2 = $0 + 320 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAPF64[$0 + 312 >> 3] = $10 + HEAPF64[$0 + 272 >> 3];
  HEAPF64[$0 + 304 >> 3] = $8 + HEAPF64[$0 + 264 >> 3];
  HEAPF64[$0 + 296 >> 3] = $5 + HEAPF64[$0 + 256 >> 3];
  HEAP32[$4 + 408 >> 2] = 0;
  HEAP32[$4 + 412 >> 2] = 0;
  HEAP32[$4 + 400 >> 2] = 0;
  HEAP32[$4 + 404 >> 2] = 1072693248;
  $2 = $3 + 120 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $3 + 80 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $2 = $3 + 112 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $3 + 104 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $25 = $3 + 96 | 0;
  $2 = $25;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $3 + 88 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $4 + 272 | 0;
  $3 = $2 + 32 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 48 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 40 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $2 + 56 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 - -64 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 72 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 80 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $2 + 88 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $26 = $2 + 96 | 0;
  $3 = $26;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 104 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 112 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $2 = $2 + 120 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$4 + 272 >> 2] = 0;
  HEAP32[$4 + 276 >> 2] = 1072693248;
  HEAP32[$4 + 280 >> 2] = 0;
  HEAP32[$4 + 284 >> 2] = 0;
  $7 = $0 + 296 | 0;
  $16 = $0 + 256 | 0;
  $34 = $4 + 248 | 0;
  $23 = $4 + 88 | 0;
  $35 = 10;
  $2 = HEAP32[$0 + 20 >> 2];
  $37 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
  $36 = 1.0;
  $2 = 0;
  label$1 : {
   label$2 : {
    while (1) {
     label$3 : {
      if (!$35) {
       break label$3
      }
      $3 = HEAP32[$16 + 4 >> 2];
      HEAP32[$25 >> 2] = HEAP32[$16 >> 2];
      HEAP32[$25 + 4 >> 2] = $3;
      $3 = HEAP32[$7 + 4 >> 2];
      HEAP32[$26 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$26 + 4 >> 2] = $3;
      $15 = $16 + 24 | 0;
      $3 = $15;
      $17 = HEAP32[$3 + 4 >> 2];
      $13 = $25 + 24 | 0;
      HEAP32[$13 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$13 + 4 >> 2] = $17;
      $17 = $16 + 16 | 0;
      $3 = $17;
      $13 = HEAP32[$3 + 4 >> 2];
      $20 = $25 + 16 | 0;
      HEAP32[$20 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$20 + 4 >> 2] = $13;
      $13 = $16 + 8 | 0;
      $3 = $13;
      $20 = HEAP32[$3 + 4 >> 2];
      $21 = $25 + 8 | 0;
      HEAP32[$21 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$21 + 4 >> 2] = $20;
      $20 = $7 + 8 | 0;
      $3 = $20;
      $21 = HEAP32[$3 + 4 >> 2];
      $6 = $26 + 8 | 0;
      HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$6 + 4 >> 2] = $21;
      $21 = $7 + 16 | 0;
      $3 = $21;
      $6 = HEAP32[$3 + 4 >> 2];
      $27 = $26 + 16 | 0;
      HEAP32[$27 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$27 + 4 >> 2] = $6;
      $3 = $7 + 24 | 0;
      $6 = HEAP32[$3 + 4 >> 2];
      $27 = $26 + 24 | 0;
      HEAP32[$27 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$27 + 4 >> 2] = $6;
      $18 = HEAPF64[$0 + 256 >> 3];
      $30 = HEAPF64[$0 + 296 >> 3];
      $31 = HEAPF64[$0 + 264 >> 3];
      $32 = HEAPF64[$0 + 304 >> 3];
      $33 = HEAPF64[$0 + 272 >> 3];
      $39 = HEAPF64[$0 + 312 >> 3];
      $8 = HEAPF64[$0 + 352 >> 3];
      $14 = HEAPF64[$0 + 344 >> 3];
      $5 = HEAPF64[$0 + 328 >> 3];
      $10 = HEAPF64[$0 + 336 >> 3];
      HEAP32[$4 + 488 >> 2] = 0;
      HEAP32[$4 + 492 >> 2] = 0;
      HEAP32[$4 + 456 >> 2] = 0;
      HEAP32[$4 + 460 >> 2] = 0;
      HEAP32[$4 + 424 >> 2] = 0;
      HEAP32[$4 + 428 >> 2] = 0;
      HEAP32[$4 + 360 >> 2] = 0;
      HEAP32[$4 + 364 >> 2] = 0;
      HEAP32[$4 + 328 >> 2] = 0;
      HEAP32[$4 + 332 >> 2] = 0;
      HEAP32[$4 + 296 >> 2] = 0;
      HEAP32[$4 + 300 >> 2] = 0;
      $11 = 2.0 / ($8 * $8 + ($14 * $14 + ($5 * $5 + $10 * $10)));
      $9 = $14 * $11;
      $12 = $10 * $9;
      $24 = $5 * $11;
      $19 = $8 * $24;
      HEAPF64[$4 + 472 >> 3] = $12 + $19;
      $28 = $5 * $9;
      $11 = $10 * $11;
      $29 = $8 * $11;
      HEAPF64[$4 + 464 >> 3] = $28 - $29;
      HEAPF64[$4 + 448 >> 3] = $12 - $19;
      $12 = $5 * $11;
      $8 = $8 * $9;
      HEAPF64[$4 + 432 >> 3] = $12 + $8;
      HEAPF64[$4 + 416 >> 3] = $28 + $29;
      HEAPF64[$4 + 408 >> 3] = $12 - $8;
      $5 = $5 * $24;
      $8 = $10 * $11;
      HEAPF64[$4 + 480 >> 3] = 1.0 - ($5 + $8);
      $19 = $5;
      $5 = $14 * $9;
      HEAPF64[$4 + 440 >> 3] = 1.0 - ($19 + $5);
      HEAPF64[$4 + 400 >> 3] = 1.0 - ($8 + $5);
      $8 = HEAPF64[$0 + 384 >> 3];
      $14 = HEAPF64[$0 + 376 >> 3];
      $5 = HEAPF64[$0 + 360 >> 3];
      $10 = HEAPF64[$0 + 368 >> 3];
      $9 = 2.0 / ($8 * $8 + ($14 * $14 + ($5 * $5 + $10 * $10)));
      $12 = $10 * $9;
      $24 = $5 * $12;
      $11 = $14 * $9;
      $19 = $8 * $11;
      HEAPF64[$4 + 280 >> 3] = $24 - $19;
      $28 = $5 * $11;
      $29 = $8 * $12;
      HEAPF64[$4 + 288 >> 3] = $28 + $29;
      HEAPF64[$4 + 304 >> 3] = $24 + $19;
      $24 = $10 * $11;
      $19 = $8;
      $8 = $5 * $9;
      $9 = $19 * $8;
      HEAPF64[$4 + 320 >> 3] = $24 - $9;
      HEAPF64[$4 + 336 >> 3] = $28 - $29;
      HEAPF64[$4 + 344 >> 3] = $24 + $9;
      $10 = $10 * $12;
      $14 = $14 * $11;
      HEAPF64[$4 + 272 >> 3] = 1.0 - ($10 + $14);
      $5 = $5 * $8;
      HEAPF64[$4 + 312 >> 3] = 1.0 - ($5 + $14);
      HEAPF64[$4 + 352 >> 3] = 1.0 - ($5 + $10);
      $6 = $23 + 56 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $23 + 48 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $23 + 40 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $23 + 32 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $23 + 24 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $23 + 16 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      $6 = $23 + 8 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$23 >> 2] = 0;
      HEAP32[$23 + 4 >> 2] = 0;
      HEAP32[$34 >> 2] = 0;
      HEAP32[$34 + 4 >> 2] = 0;
      $6 = $34 + 8 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAPF64[$4 + 240 >> 3] = $33 - $39;
      HEAPF64[$4 + 232 >> 3] = $31 - $32;
      HEAPF64[$4 + 224 >> 3] = $18 - $30;
      HEAP32[$4 + 216 >> 2] = 0;
      HEAP32[$4 + 72 >> 2] = 0;
      HEAP32[$4 + 76 >> 2] = 1072693248;
      HEAP32[$4 + 220 >> 2] = $0;
      HEAP32[$4 + 64 >> 2] = 29180;
      HEAP8[$4 + 264 | 0] = 1;
      $6 = HEAP32[HEAP32[$0 + 16 >> 2] + 376 >> 2];
      HEAP32[$4 + 80 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$4 + 84 >> 2] = HEAP32[$6 + 8 >> 2];
      $6 = HEAP32[$0 + 20 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 44 >> 2]]($6, $37 + HEAPF64[$0 + 120 >> 3]);
      label$5 : {
       if (!(HEAPF64[$4 + 400 >> 3] != HEAPF64[$4 + 272 >> 3] | HEAPF64[$4 + 432 >> 3] != HEAPF64[$4 + 304 >> 3] | (HEAPF64[$4 + 464 >> 3] != HEAPF64[$4 + 336 >> 3] | HEAPF64[$4 + 408 >> 3] != HEAPF64[$4 + 280 >> 3]) | (HEAPF64[$4 + 440 >> 3] != HEAPF64[$4 + 312 >> 3] | HEAPF64[$4 + 472 >> 3] != HEAPF64[$4 + 344 >> 3] | (HEAPF64[$4 + 416 >> 3] != HEAPF64[$4 + 288 >> 3] | HEAPF64[$4 + 448 >> 3] != HEAPF64[$4 + 320 >> 3])) | (HEAPF64[$4 + 480 >> 3] != HEAPF64[$4 + 352 >> 3] | HEAPF64[$4 + 520 >> 3] != HEAPF64[$4 + 392 >> 3] | (HEAPF64[$4 + 512 >> 3] != HEAPF64[$4 + 384 >> 3] | HEAPF64[$4 + 504 >> 3] != HEAPF64[$4 + 376 >> 3]))) & HEAPF64[$4 + 496 >> 3] == HEAPF64[$4 + 368 >> 3]) {
        break label$5
       }
       if (HEAPU8[$0 + 466 | 0]) {
        btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $4 + 400 | 0, $4 + 272 | 0, $4 - -64 | 0, HEAPF64[$1 + 72 >> 3]);
        break label$5;
       }
       btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($1, HEAP32[$0 + 20 >> 2], $4 + 400 | 0, $4 + 272 | 0, $4 - -64 | 0, HEAPF64[$1 + 72 >> 3]);
      }
      $6 = HEAP32[$0 + 20 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 44 >> 2]]($6, $37);
      label$8 : {
       label$9 : {
        label$10 : {
         $30 = HEAPF64[$4 + 72 >> 3];
         if (!($30 < 1.0)) {
          break label$10
         }
         $6 = HEAP32[$0 + 16 >> 2];
         if (HEAPU8[$6 + 392 | 0] & 4) {
          break label$10
         }
         if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $6, HEAP32[$4 + 216 >> 2]) | 0)) {
          break label$10
         }
         HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] | 2;
         $31 = HEAPF64[$0 + 272 >> 3];
         $5 = HEAPF64[$0 + 312 >> 3] - $31;
         $32 = HEAPF64[$0 + 256 >> 3];
         $8 = HEAPF64[$0 + 296 >> 3] - $32;
         $33 = HEAPF64[$0 + 264 >> 3];
         $10 = HEAPF64[$0 + 304 >> 3] - $33;
         $9 = $5 * $5 + ($8 * $8 + $10 * $10);
         $14 = Math_sqrt($9);
         if ($14 > 2.220446049250313e-16) {
          $6 = HEAP32[$15 + 4 >> 2];
          HEAP32[$3 >> 2] = HEAP32[$15 >> 2];
          HEAP32[$3 + 4 >> 2] = $6;
          $3 = HEAP32[$17 + 4 >> 2];
          HEAP32[$21 >> 2] = HEAP32[$17 >> 2];
          HEAP32[$21 + 4 >> 2] = $3;
          $3 = HEAP32[$13 + 4 >> 2];
          HEAP32[$20 >> 2] = HEAP32[$13 >> 2];
          HEAP32[$20 + 4 >> 2] = $3;
          $3 = HEAP32[$16 + 4 >> 2];
          HEAP32[$7 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$7 + 4 >> 2] = $3;
          $9 = 1.0 / $14;
          $11 = $5 * $9;
          $5 = HEAPF64[$4 + 168 >> 3];
          $12 = $8 * $9;
          $8 = HEAPF64[$4 + 152 >> 3];
          $18 = $10 * $9;
          $10 = HEAPF64[$4 + 160 >> 3];
          $9 = $11 * $5 + ($12 * $8 + $18 * $10);
          $9 = $9 + $9;
          $11 = $11 - $5 * $9;
          $12 = $12 - $8 * $9;
          $18 = $18 - $10 * $9;
          $9 = 1.0 / Math_sqrt($11 * $11 + ($12 * $12 + $18 * $18));
          $11 = $11 * $9;
          $12 = $12 * $9;
          $18 = $18 * $9;
          $9 = $11 * $5 + ($12 * $8 + $10 * $18);
          $5 = HEAPF64[$0 + 312 >> 3] + $14 * ($11 - $5 * $9);
          HEAPF64[$0 + 312 >> 3] = $5;
          $10 = HEAPF64[$0 + 304 >> 3] + $14 * ($18 - $10 * $9);
          HEAPF64[$0 + 304 >> 3] = $10;
          $8 = HEAPF64[$0 + 296 >> 3] + $14 * ($12 - $8 * $9);
          HEAPF64[$0 + 296 >> 3] = $8;
          $5 = $5 - $31;
          $8 = $8 - $32;
          $10 = $10 - $33;
          $9 = $5 * $5 + ($8 * $8 + $10 * $10);
         }
         if (!($9 > 2.220446049250313e-16)) {
          break label$3
         }
         $19 = $5;
         $5 = 1.0 / Math_sqrt($9);
         if ($19 * $5 * HEAPF64[$0 + 176 >> 3] + ($8 * $5 * HEAPF64[$0 + 160 >> 3] + $10 * $5 * HEAPF64[$0 + 168 >> 3]) <= 0.0) {
          $0 = HEAP32[$16 + 4 >> 2];
          HEAP32[$7 >> 2] = HEAP32[$16 >> 2];
          HEAP32[$7 + 4 >> 2] = $0;
          $0 = $16 + 24 | 0;
          $1 = HEAP32[$0 + 4 >> 2];
          $3 = $7 + 24 | 0;
          HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
          HEAP32[$3 + 4 >> 2] = $1;
          $0 = $16 + 16 | 0;
          $1 = HEAP32[$0 + 4 >> 2];
          $3 = $7 + 16 | 0;
          HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
          HEAP32[$3 + 4 >> 2] = $1;
          $0 = $16 + 8 | 0;
          $1 = HEAP32[$0 + 4 >> 2];
          $3 = $7 + 8 | 0;
          HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
          HEAP32[$3 + 4 >> 2] = $1;
          break label$3;
         }
         $15 = HEAP32[$4 + 216 >> 2];
         if (!(HEAPU8[$15 + 472 | 0] & 2) | !$15 | HEAPU8[$15 + 392 | 0] & 7) {
          break label$8
         }
         $3 = $2;
         if (($22 | 0) == ($3 | 0)) {
          break label$9
         }
         while (1) {
          if (($15 | 0) == HEAP32[$3 >> 2]) {
           break label$8
          }
          $3 = $3 + 4 | 0;
          if (($3 | 0) != ($22 | 0)) {
           continue
          }
          break;
         };
         break label$9;
        }
        $6 = HEAP32[$7 + 4 >> 2];
        HEAP32[$16 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$16 + 4 >> 2] = $6;
        $6 = HEAP32[$3 + 4 >> 2];
        HEAP32[$15 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$15 + 4 >> 2] = $6;
        $3 = HEAP32[$21 + 4 >> 2];
        HEAP32[$17 >> 2] = HEAP32[$21 >> 2];
        HEAP32[$17 + 4 >> 2] = $3;
        $3 = HEAP32[$20 + 4 >> 2];
        HEAP32[$13 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$13 + 4 >> 2] = $3;
        break label$8;
       }
       label$14 : {
        if (($22 | 0) != ($38 | 0)) {
         HEAP32[$22 >> 2] = $15;
         break label$14;
        }
        $17 = $38 - $2 | 0;
        $22 = $17 >> 2;
        $3 = $22 + 1 | 0;
        if ($3 >>> 0 >= 1073741824) {
         break label$2
        }
        $13 = $17 >> 1;
        $13 = $17 >>> 0 < 2147483644 ? ($3 >>> 0 > $13 >>> 0 ? $3 : $13) : 1073741823;
        if ($13) {
         if ($13 >>> 0 >= 1073741824) {
          break label$1
         }
         $3 = operator_20new_28unsigned_20long_29($13 << 2);
        } else {
         $3 = 0
        }
        $22 = $3 + ($22 << 2) | 0;
        HEAP32[$22 >> 2] = $15;
        if (($17 | 0) > 0) {
         memcpy($3, $2, $17)
        }
        $38 = ($13 << 2) + $3 | 0;
        if ($2) {
         operator_20delete_28void__29($2)
        }
        $2 = $3;
       }
       HEAP32[$4 + 56 >> 2] = 0;
       HEAP32[$4 + 60 >> 2] = 0;
       HEAPF64[$4 + 48 >> 3] = HEAPF64[$4 + 200 >> 3] - HEAPF64[$15 + 120 >> 3];
       HEAPF64[$4 + 40 >> 3] = HEAPF64[$4 + 192 >> 3] - HEAPF64[$15 + 112 >> 3];
       HEAPF64[$4 + 32 >> 3] = HEAPF64[$4 + 184 >> 3] - HEAPF64[$15 + 104 >> 3];
       HEAP32[$4 + 24 >> 2] = 0;
       HEAP32[$4 + 28 >> 2] = 0;
       $5 = -HEAPF64[$0 + 552 >> 3];
       HEAPF64[$4 + 16 >> 3] = HEAPF64[$4 + 168 >> 3] * $5;
       HEAPF64[$4 + 8 >> 3] = HEAPF64[$4 + 160 >> 3] * $5;
       HEAPF64[$4 >> 3] = HEAPF64[$4 + 152 >> 3] * $5;
       btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($15, $4, $4 + 32 | 0);
       $22 = $22 + 4 | 0;
      }
      $35 = $35 - 1 | 0;
      $36 = $36 - $30;
      if ($36 > .01) {
       continue
      }
     }
     break;
    };
    if ($2) {
     operator_20delete_28void__29($2)
    }
    __stack_pointer = $4 + 528 | 0;
    return;
   }
   abort();
  }
  abort();
 }
 
 function btKinematicCharacterController__setWalkDirection_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0;
  HEAP8[$0 + 467 | 0] = 1;
  $2 = $1 + 8 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $5 = $0 + 136 | 0;
  HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 132 >> 2] = $2;
  $3 = $1 + 16 | 0;
  $6 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 144 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $1 = $1 + 24 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 152 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $7 = HEAPF64[$2 >> 3];
  $8 = HEAPF64[$0 + 128 >> 3];
  $9 = HEAPF64[$5 >> 3];
  $10 = Math_sqrt($7 * $7 + ($8 * $8 + $9 * $9));
  if ($10 > 2.220446049250313e-16) {
   $4 = 1.0 / $10;
   $11 = $7 * $4;
   $12 = $9 * $4;
   $13 = HEAPF64[$3 >> 3];
   $4 = $8 * $4;
  }
  HEAPF64[$0 + 160 >> 3] = $4;
  HEAPF64[$0 + 184 >> 3] = $13;
  HEAPF64[$0 + 176 >> 3] = $11;
  HEAPF64[$0 + 168 >> 3] = $12;
 }
 
 function btKinematicCharacterController__setVelocityForTimeInterval_28btVector3_20const__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0;
  HEAP8[$0 + 467 | 0] = 0;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $6 = $0 + 136 | 0;
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 4 >> 2] = $4;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 132 >> 2] = $3;
  $4 = $1 + 16 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 144 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $1 = $1 + 24 | 0;
  $7 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 152 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $8 = HEAPF64[$3 >> 3];
  $9 = HEAPF64[$0 + 128 >> 3];
  $10 = HEAPF64[$6 >> 3];
  $11 = Math_sqrt($8 * $8 + ($9 * $9 + $10 * $10));
  if ($11 > 2.220446049250313e-16) {
   $5 = 1.0 / $11;
   $12 = $8 * $5;
   $13 = $10 * $5;
   $14 = HEAPF64[$4 >> 3];
   $5 = $9 * $5;
  }
  HEAPF64[$0 + 160 >> 3] = $5;
  HEAPF64[$0 + 184 >> 3] = $14;
  HEAPF64[$0 + 176 >> 3] = $12;
  HEAPF64[$0 + 168 >> 3] = $13;
  HEAPF64[$0 + 472 >> 3] = HEAPF64[$0 + 472 >> 3] + $2;
 }
 
 function btKinematicCharacterController__setAngularVelocity_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 192 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 196 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 216 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 208 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 200 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btKinematicCharacterController__getAngularVelocity_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 192 | 0;
 }
 
 function btKinematicCharacterController__setLinearVelocity_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0;
  $2 = $1 + 8 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 136 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 132 >> 2] = $2;
  $5 = $1 + 16 | 0;
  $11 = HEAP32[$5 + 4 >> 2];
  $2 = $0 + 144 | 0;
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$2 + 4 >> 2] = $11;
  $11 = $1 + 24 | 0;
  $15 = HEAP32[$11 + 4 >> 2];
  $5 = $0 + 152 | 0;
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$5 + 4 >> 2] = $15;
  $4 = HEAPF64[$2 >> 3];
  $12 = HEAPF64[$0 + 128 >> 3];
  $8 = HEAPF64[$3 >> 3];
  $13 = $4 * $4 + ($12 * $12 + $8 * $8);
  label$1 : {
   if ($13 > 0.0) {
    $6 = HEAPF64[$1 + 16 >> 3];
    $10 = HEAPF64[$1 >> 3];
    $9 = HEAPF64[$1 + 8 >> 3];
    $7 = 1.0 / Math_sqrt($6 * $6 + ($10 * $10 + $9 * $9));
    $16 = $6 * $7;
    $6 = HEAPF64[$0 + 496 >> 3];
    $17 = $10 * $7;
    $10 = HEAPF64[$0 + 480 >> 3];
    $14 = HEAPF64[$0 + 488 >> 3];
    $7 = $16 * $6 + ($17 * $10 + $14 * ($9 * $7));
    if ($7 == 0.0) {
     break label$1
    }
    $9 = $4;
    $4 = Math_sqrt($13) * sin(1.5707963267948966 - acos(Math_min(Math_max($7, -1.0), 1.0)));
    $6 = $6 * $4;
    HEAPF64[$0 + 144 >> 3] = $9 - $6;
    $9 = $8;
    $8 = $14 * $4;
    HEAPF64[$0 + 136 >> 3] = $9 - $8;
    $4 = $10 * $4;
    HEAPF64[$0 + 128 >> 3] = $12 - $4;
    $4 = Math_sqrt($6 * $6 + ($4 * $4 + $8 * $8));
    HEAPF64[$0 + 32 >> 3] = $7 < 0.0 ? -$4 : $4;
    if (!($7 > 0.0)) {
     break label$1
    }
    HEAP8[$0 + 465 | 0] = 1;
    $1 = HEAP32[$0 + 16 >> 2];
    $3 = $1 + 104 | 0;
    $2 = HEAP32[$3 + 4 >> 2];
    HEAP32[$0 + 224 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$0 + 228 >> 2] = $2;
    $2 = $1 + 112 | 0;
    $5 = HEAP32[$2 + 4 >> 2];
    $3 = $0 + 232 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $5;
    $2 = $1 + 120 | 0;
    $5 = HEAP32[$2 + 4 >> 2];
    $3 = $0 + 240 | 0;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $5;
    $1 = $1 + 128 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    $0 = $0 + 248 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $3;
    return;
   }
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
  }
 }
 
 function btKinematicCharacterController__getLinearVelocity_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  $2 = HEAPF64[$1 + 32 >> 3];
  HEAPF64[$0 >> 3] = HEAPF64[$1 + 480 >> 3] * $2 + HEAPF64[$1 + 128 >> 3];
  HEAPF64[$0 + 16 >> 3] = $2 * HEAPF64[$1 + 496 >> 3] + HEAPF64[$1 + 144 >> 3];
  HEAPF64[$0 + 8 >> 3] = $2 * HEAPF64[$1 + 488 >> 3] + HEAPF64[$1 + 136 >> 3];
 }
 
 function btKinematicCharacterController__reset_28btCollisionWorld__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  $2 = $0 + 40 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 136 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 144 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 152 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 472 >> 2] = 0;
  HEAP32[$0 + 476 >> 2] = 0;
  HEAP16[$0 + 464 >> 1] = 0;
  $0 = HEAP32[HEAP32[$0 + 16 >> 2] + 596 >> 2];
  if (HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 4 >> 2] > 0) {
   while (1) {
    ((((wasm2js_i32$1 = $0, wasm2js_i32$2 = HEAP32[HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 12 >> 2] >> 2]), wasm2js_i32$3 = HEAP32[HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 12 >> 2] + 4 >> 2]), wasm2js_i32$4 = HEAP32[$1 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0;
    if (HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 4 >> 2] > 0) {
     continue
    }
    break;
   }
  }
 }
 
 function btKinematicCharacterController__warp_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $5 = __stack_pointer + -64 | 0;
  $3 = $5 + 40 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $2 = $5 + 32 | 0;
  $3 = $2 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $6 = $2 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $4 = $1 + 24 | 0;
  $2 = HEAP32[$4 >> 2];
  $8 = HEAP32[$4 + 4 >> 2];
  $4 = $1 + 16 | 0;
  $7 = HEAP32[$4 >> 2];
  $9 = HEAP32[$4 + 4 >> 2];
  $4 = $1 + 8 | 0;
  $10 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $11 = HEAP32[$1 >> 2];
  $12 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$0 + 16 >> 2];
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 1072693248;
  $1 = $5 + 8 | 0;
  HEAP32[$1 >> 2] = $10;
  HEAP32[$1 + 4 >> 2] = $4;
  $4 = $5 + 16 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $9;
  $7 = $5 + 24 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $8;
  $2 = $0 + 48 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $2 = $0 + 40 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 32 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 24 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 16 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 56 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 - -64 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $2 = $0 + 96 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 88 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  HEAP32[$5 + 32 >> 2] = 0;
  HEAP32[$5 + 36 >> 2] = 0;
  HEAP32[$5 >> 2] = $11;
  HEAP32[$5 + 4 >> 2] = $12;
  $8 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 72 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $8;
  $2 = HEAP32[$6 + 4 >> 2];
  $3 = $0 + 80 | 0;
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $6 = HEAP32[$7 + 4 >> 2];
  $3 = $0 + 128 | 0;
  HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 120 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $6 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 112 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $6;
  $1 = HEAP32[$5 + 4 >> 2];
  $0 = $0 + 104 | 0;
  HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function btKinematicCharacterController__preStep_28btCollisionWorld__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $3 = HEAP32[$0 + 16 >> 2];
  $5 = $3 + 104 | 0;
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$0 + 256 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$0 + 260 >> 2] = $4;
  $4 = $3 + 112 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $2 = $0 + 264 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $2 = $3 + 120 | 0;
  $7 = HEAP32[$2 + 4 >> 2];
  $6 = $0 + 272 | 0;
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  $6 = $3 + 128 | 0;
  $8 = HEAP32[$6 + 4 >> 2];
  $7 = $0 + 280 | 0;
  HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$7 + 4 >> 2] = $8;
  $7 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $8 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $10 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $11 = HEAP32[$6 + 4 >> 2];
  $9 = $0 + 320 | 0;
  HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$9 + 4 >> 2] = $11;
  $6 = $0 + 312 | 0;
  HEAP32[$6 >> 2] = $10;
  HEAP32[$6 + 4 >> 2] = $2;
  $2 = $0 + 304 | 0;
  HEAP32[$2 >> 2] = $8;
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$0 + 296 >> 2] = $7;
  HEAP32[$0 + 300 >> 2] = $5;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($3 + 8 | 0, $1);
  $5 = $1 + 24 | 0;
  $4 = HEAP32[$5 + 4 >> 2];
  $3 = $0 + 352 | 0;
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $4 = $1 + 16 | 0;
  $2 = HEAP32[$4 + 4 >> 2];
  $5 = $0 + 344 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $2;
  $2 = $1 + 8 | 0;
  $6 = HEAP32[$2 + 4 >> 2];
  $4 = $0 + 336 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 328 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 332 >> 2] = $2;
  $6 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 384 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  $2 = HEAP32[$5 + 4 >> 2];
  $3 = $0 + 376 | 0;
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 368 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $3 = HEAP32[$0 + 332 >> 2];
  HEAP32[$0 + 360 >> 2] = HEAP32[$0 + 328 >> 2];
  HEAP32[$0 + 364 >> 2] = $3;
  __stack_pointer = $1 + 32 | 0;
 }
 
 function btKinematicCharacterController__playerStep_28btCollisionWorld__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $17 = __stack_pointer - 160 | 0;
  __stack_pointer = $17;
  HEAP32[$0 + 548 >> 2] = 0;
  $3 = HEAP32[$0 + 576 >> 2];
  if (!(!$3 | !HEAPU8[$0 + 580 | 0])) {
   btAlignedFreeInternal_28void__29($3)
  }
  HEAP32[$0 + 576 >> 2] = 0;
  HEAP8[$0 + 580 | 0] = 1;
  $3 = $0 + 568 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = HEAP32[$0 + 596 >> 2];
  if (!(!$3 | !HEAPU8[$0 + 600 | 0])) {
   btAlignedFreeInternal_28void__29($3)
  }
  HEAP32[$0 + 596 >> 2] = 0;
  HEAP8[$0 + 600 | 0] = 1;
  $3 = $0 + 588 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = HEAP32[$0 + 616 >> 2];
  if (!(!$3 | !HEAPU8[$0 + 620 | 0])) {
   btAlignedFreeInternal_28void__29($3)
  }
  HEAP32[$0 + 616 >> 2] = 0;
  HEAP8[$0 + 620 | 0] = 1;
  $3 = $0 + 608 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $7 = HEAPF64[$0 + 208 >> 3];
  $10 = HEAPF64[$0 + 192 >> 3];
  $15 = HEAPF64[$0 + 200 >> 3];
  $22 = $7 * $7 + ($10 * $10 + $15 * $15);
  if ($22 > 0.0) {
   $22 = pow(1.0 - HEAPF64[$0 + 456 >> 3], $2);
   $7 = $7 * $22;
   HEAPF64[$0 + 208 >> 3] = $7;
   $15 = $15 * $22;
   HEAPF64[$0 + 200 >> 3] = $15;
   $10 = $10 * $22;
   HEAPF64[$0 + 192 >> 3] = $10;
   $22 = $7 * $7 + ($10 * $10 + $15 * $15);
  }
  if ($22 > 0.0) {
   $3 = HEAP32[$0 + 16 >> 2];
   $4 = $3 + 32 | 0;
   $5 = HEAP32[$4 >> 2];
   $28 = HEAP32[$4 + 4 >> 2];
   $4 = $3 + 24 | 0;
   $26 = HEAP32[$4 >> 2];
   $18 = HEAP32[$4 + 4 >> 2];
   $4 = $3 + 16 | 0;
   $9 = HEAP32[$4 >> 2];
   $19 = HEAP32[$4 + 4 >> 2];
   $11 = HEAP32[$3 + 8 >> 2];
   $23 = HEAP32[$3 + 12 >> 2];
   $6 = $3 + 48 | 0;
   $8 = HEAP32[$6 + 4 >> 2];
   $4 = $17 + 32 | 0;
   $16 = $4 + 40 | 0;
   HEAP32[$16 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$16 + 4 >> 2] = $8;
   $6 = $3 + 56 | 0;
   $8 = HEAP32[$6 + 4 >> 2];
   $14 = $4 + 48 | 0;
   HEAP32[$14 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$14 + 4 >> 2] = $8;
   $8 = $3 - -64 | 0;
   $13 = HEAP32[$8 + 4 >> 2];
   $6 = $4 + 56 | 0;
   HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$6 + 4 >> 2] = $13;
   $8 = $4 + 8 | 0;
   HEAP32[$8 >> 2] = $9;
   HEAP32[$8 + 4 >> 2] = $19;
   $9 = $4 + 16 | 0;
   HEAP32[$9 >> 2] = $26;
   HEAP32[$9 + 4 >> 2] = $18;
   $13 = $4 + 24 | 0;
   HEAP32[$13 >> 2] = $5;
   HEAP32[$13 + 4 >> 2] = $28;
   $5 = $3 + 40 | 0;
   $18 = HEAP32[$5 >> 2];
   $19 = HEAP32[$5 + 4 >> 2];
   $5 = $3 + 80 | 0;
   $26 = HEAP32[$5 + 4 >> 2];
   $28 = $4 + 72 | 0;
   HEAP32[$28 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$28 + 4 >> 2] = $26;
   $5 = $3 + 88 | 0;
   $21 = HEAP32[$5 + 4 >> 2];
   $26 = $4 + 80 | 0;
   HEAP32[$26 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$26 + 4 >> 2] = $21;
   $21 = $3 + 96 | 0;
   $31 = HEAP32[$21 + 4 >> 2];
   $5 = $4 + 88 | 0;
   HEAP32[$5 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$5 + 4 >> 2] = $31;
   HEAP32[$17 + 32 >> 2] = $11;
   HEAP32[$17 + 36 >> 2] = $23;
   HEAP32[$17 + 64 >> 2] = $18;
   HEAP32[$17 + 68 >> 2] = $19;
   $18 = $3 + 72 | 0;
   $19 = HEAP32[$18 + 4 >> 2];
   HEAP32[$17 + 96 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$17 + 100 >> 2] = $19;
   $19 = $3 + 112 | 0;
   $11 = HEAP32[$19 + 4 >> 2];
   $18 = $4 + 104 | 0;
   HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$18 + 4 >> 2] = $11;
   $11 = $3 + 120 | 0;
   $23 = HEAP32[$11 + 4 >> 2];
   $19 = $4 + 112 | 0;
   HEAP32[$19 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$19 + 4 >> 2] = $23;
   $23 = $3 + 128 | 0;
   $21 = HEAP32[$23 + 4 >> 2];
   $11 = $4 + 120 | 0;
   HEAP32[$11 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$11 + 4 >> 2] = $21;
   $3 = $3 + 104 | 0;
   $23 = HEAP32[$3 + 4 >> 2];
   HEAP32[$17 + 128 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$17 + 132 >> 2] = $23;
   btMatrix3x3__getRotation_28btQuaternion__29_20const($4, $17);
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$13 >> 2] = 0;
   HEAP32[$13 + 4 >> 2] = 0;
   $12 = Math_sqrt($22);
   $29 = $12 * $2 * .5;
   $20 = sin($29);
   $22 = HEAPF64[$17 + 24 >> 3];
   $27 = $7;
   $7 = 1.0 / $12;
   $12 = $27 * $7;
   $24 = $10 * $7;
   $7 = $15 * $7;
   $15 = $20 / Math_sqrt($12 * $12 + ($24 * $24 + $7 * $7));
   $10 = $12 * $15;
   $12 = HEAPF64[$17 >> 3];
   $20 = HEAPF64[$17 + 8 >> 3];
   $29 = cos($29);
   $30 = $7 * $15;
   $24 = $24 * $15;
   $32 = HEAPF64[$17 + 16 >> 3];
   $7 = $10 * $12 + ($20 * $29 + $22 * $30) - $24 * $32;
   $15 = $29 * $22 - $12 * $24 - $30 * $20 - $10 * $32;
   $25 = $24 * $20 + ($29 * $32 + $10 * $22) - $30 * $12;
   $10 = $30 * $32 + ($29 * $12 + $24 * $22) - $10 * $20;
   $22 = 2.0 / ($15 * $15 + ($25 * $25 + ($10 * $10 + $7 * $7)));
   $12 = $25 * $22;
   $20 = $7 * $12;
   $29 = $10 * $22;
   $30 = $15 * $29;
   HEAPF64[$28 >> 3] = $20 + $30;
   HEAPF64[$14 >> 3] = $20 - $30;
   $20 = $10 * $12;
   $22 = $7 * $22;
   $30 = $15 * $22;
   HEAPF64[$9 >> 3] = $20 + $30;
   $24 = $10 * $22;
   $15 = $15 * $12;
   HEAPF64[$8 >> 3] = $24 - $15;
   $10 = $10 * $29;
   $7 = $7 * $22;
   HEAPF64[$26 >> 3] = 1.0 - ($10 + $7);
   $27 = $10;
   $10 = $25 * $12;
   HEAPF64[$16 >> 3] = 1.0 - ($27 + $10);
   $3 = HEAP32[$0 + 16 >> 2];
   HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 536 >> 2] + 1;
   HEAPF64[$17 + 96 >> 3] = $20 - $30;
   HEAPF64[$17 + 64 >> 3] = $24 + $15;
   $4 = $3 + 32 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = HEAP32[$9 + 4 >> 2];
   $13 = $3 + 24 | 0;
   HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$13 + 4 >> 2] = $4;
   $4 = HEAP32[$8 + 4 >> 2];
   $9 = $3 + 16 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$9 + 4 >> 2] = $4;
   HEAPF64[$17 + 32 >> 3] = 1.0 - ($7 + $10);
   $4 = HEAP32[$17 + 36 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$17 + 32 >> 2];
   HEAP32[$3 + 12 >> 2] = $4;
   $4 = HEAP32[$6 + 4 >> 2];
   $8 = $3 - -64 | 0;
   HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$8 + 4 >> 2] = $4;
   $4 = HEAP32[$14 + 4 >> 2];
   $6 = $3 + 56 | 0;
   HEAP32[$6 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$16 + 4 >> 2];
   $6 = $3 + 48 | 0;
   HEAP32[$6 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$17 + 68 >> 2];
   $6 = $3 + 40 | 0;
   HEAP32[$6 >> 2] = HEAP32[$17 + 64 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$5 + 4 >> 2];
   $6 = $3 + 96 | 0;
   HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$26 + 4 >> 2];
   $6 = $3 + 88 | 0;
   HEAP32[$6 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$28 + 4 >> 2];
   $6 = $3 + 80 | 0;
   HEAP32[$6 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$17 + 100 >> 2];
   $6 = $3 + 72 | 0;
   HEAP32[$6 >> 2] = HEAP32[$17 + 96 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$11 + 4 >> 2];
   $6 = $3 + 128 | 0;
   HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$19 + 4 >> 2];
   $6 = $3 + 120 | 0;
   HEAP32[$6 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$18 + 4 >> 2];
   $6 = $3 + 112 | 0;
   HEAP32[$6 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$17 + 132 >> 2];
   $3 = $3 + 104 | 0;
   HEAP32[$3 >> 2] = HEAP32[$17 + 128 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $3 = HEAP32[$0 + 16 >> 2];
   $4 = $3 + 128 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $0 + 280 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $6 = $3 + 120 | 0;
   $5 = HEAP32[$6 + 4 >> 2];
   $8 = $0 + 272 | 0;
   HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$8 + 4 >> 2] = $5;
   $5 = $3 + 112 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $9 = $0 + 264 | 0;
   HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$9 + 4 >> 2] = $8;
   $8 = $3 + 104 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   HEAP32[$0 + 256 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$0 + 260 >> 2] = $9;
   $9 = HEAP32[$8 >> 2];
   $8 = HEAP32[$8 + 4 >> 2];
   $16 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $14 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $28 = HEAP32[$4 + 4 >> 2];
   $26 = $0 + 320 | 0;
   HEAP32[$26 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$26 + 4 >> 2] = $28;
   $4 = $0 + 312 | 0;
   HEAP32[$4 >> 2] = $14;
   HEAP32[$4 + 4 >> 2] = $6;
   $4 = $0 + 304 | 0;
   HEAP32[$4 >> 2] = $16;
   HEAP32[$4 + 4 >> 2] = $5;
   HEAP32[$0 + 296 >> 2] = $9;
   HEAP32[$0 + 300 >> 2] = $8;
   btMatrix3x3__getRotation_28btQuaternion__29_20const($3 + 8 | 0, $17);
   $4 = $17 + 24 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $3 = $0 + 352 | 0;
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 + 4 >> 2] = $6;
   $6 = $17 + 16 | 0;
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = $0 + 344 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $5 = $17 + 8 | 0;
   $8 = HEAP32[$5 + 4 >> 2];
   $6 = $0 + 336 | 0;
   HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$6 + 4 >> 2] = $8;
   $5 = HEAP32[$17 + 4 >> 2];
   HEAP32[$0 + 328 >> 2] = HEAP32[$17 >> 2];
   HEAP32[$0 + 332 >> 2] = $5;
   $5 = HEAP32[$3 + 4 >> 2];
   $8 = $0 + 384 | 0;
   HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$8 + 4 >> 2] = $5;
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $0 + 376 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $3 = HEAP32[$6 + 4 >> 2];
   $4 = $0 + 368 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $3 = HEAP32[$0 + 332 >> 2];
   HEAP32[$0 + 360 >> 2] = HEAP32[$0 + 328 >> 2];
   HEAP32[$0 + 364 >> 2] = $3;
  }
  label$6 : {
   if (!HEAPU8[$0 + 467 | 0] & HEAPF64[$0 + 472 >> 3] <= 0.0) {
    break label$6
   }
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0) | 0), HEAP8[wasm2js_i32$0 + 464 | 0] = wasm2js_i32$1;
   $10 = HEAPF64[$0 + 136 >> 3];
   $15 = HEAPF64[$0 + 128 >> 3];
   $22 = HEAPF64[$0 + 144 >> 3];
   $7 = pow(1.0 - HEAPF64[$0 + 448 >> 3], $2);
   if ($22 * $22 + ($15 * $15 + $10 * $10) > 0.0) {
    HEAPF64[$0 + 144 >> 3] = $22 * $7;
    HEAPF64[$0 + 136 >> 3] = $10 * $7;
    HEAPF64[$0 + 128 >> 3] = $15 * $7;
   }
   $7 = HEAPF64[$0 + 32 >> 3] * $7 - HEAPF64[$0 + 96 >> 3] * $2;
   HEAPF64[$0 + 32 >> 3] = $7;
   label$9 : {
    if (!($7 > 0.0)) {
     break label$9
    }
    $10 = HEAPF64[$0 + 56 >> 3];
    if (!($10 < $7)) {
     break label$9
    }
    HEAPF64[$0 + 32 >> 3] = $10;
    $7 = $10;
   }
   label$10 : {
    if (!($7 < 0.0)) {
     break label$10
    }
    $10 = Math_abs(HEAPF64[$0 + 48 >> 3]);
    if (!($10 < Math_abs($7))) {
     break label$10
    }
    $7 = -$10;
    HEAPF64[$0 + 32 >> 3] = $7;
   }
   HEAPF64[$0 + 40 >> 3] = $7 * $2;
   $3 = HEAP32[$0 + 16 >> 2];
   $4 = $3 + 16 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $17 + 40 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 + 24 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $9 = $17 + 32 | 0;
   $5 = $9 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 + 32 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $9 + 24 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 + 48 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $9 + 40 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 + 56 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $9 + 48 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 - -64 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $9 + 56 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 + 80 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $9 + 72 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 + 88 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $9 + 80 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $3 + 96 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $9 + 88 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = HEAP32[$3 + 12 >> 2];
   HEAP32[$17 + 32 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$17 + 36 >> 2] = $4;
   $4 = $3 + 40 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   HEAP32[$17 + 64 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$17 + 68 >> 2] = $6;
   $3 = $3 + 72 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$17 + 96 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$17 + 100 >> 2] = $4;
   $3 = __stack_pointer - 464 | 0;
   __stack_pointer = $3;
   $7 = HEAPF64[$0 + 112 >> 3];
   $10 = HEAPF64[$0 + 32 >> 3];
   $5 = $0 + 264 | 0;
   $6 = HEAP32[$5 + 4 >> 2];
   $4 = $3 + 336 | 0;
   $8 = $4 + 104 | 0;
   HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$8 + 4 >> 2] = $6;
   $8 = $0 + 272 | 0;
   $6 = HEAP32[$8 + 4 >> 2];
   $16 = $4 + 112 | 0;
   HEAP32[$16 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$16 + 4 >> 2] = $6;
   $6 = $0 + 280 | 0;
   $16 = HEAP32[$6 + 4 >> 2];
   $14 = $4 + 120 | 0;
   HEAP32[$14 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$14 + 4 >> 2] = $16;
   $16 = HEAP32[$0 + 260 >> 2];
   HEAP32[$3 + 432 >> 2] = HEAP32[$0 + 256 >> 2];
   HEAP32[$3 + 436 >> 2] = $16;
   $15 = HEAPF64[$0 + 520 >> 3];
   $12 = HEAPF64[$5 >> 3];
   $29 = HEAPF64[$0 + 488 >> 3];
   $20 = HEAPF64[$0 + 512 >> 3];
   $24 = HEAPF64[$0 + 256 >> 3];
   $30 = HEAPF64[$0 + 480 >> 3];
   $16 = $0 + 312 | 0;
   $22 = $10 < 0.0 ? $7 : 0.0;
   $32 = HEAPF64[$0 + 496 >> 3];
   $7 = HEAPF64[$0 + 40 >> 3];
   $7 = $7 > 0.0 ? $7 : 0.0;
   HEAPF64[$16 >> 3] = $22 * $32 + HEAPF64[$8 >> 3] + $7 * HEAPF64[$0 + 528 >> 3];
   $14 = $0 + 304 | 0;
   HEAPF64[$14 >> 3] = $12 + $22 * $29 + $7 * $15;
   HEAPF64[$0 + 296 >> 3] = $24 + $22 * $30 + $20 * $7;
   $28 = $0 + 320 | 0;
   HEAP32[$28 >> 2] = 0;
   HEAP32[$28 + 4 >> 2] = 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $3 + 208 | 0;
   $28 = $6 + 120 | 0;
   HEAP32[$28 >> 2] = 0;
   HEAP32[$28 + 4 >> 2] = 0;
   $28 = HEAP32[$16 + 4 >> 2];
   $16 = HEAP32[$16 >> 2];
   HEAP32[$8 >> 2] = $16;
   HEAP32[$8 + 4 >> 2] = $28;
   $8 = HEAP32[$14 + 4 >> 2];
   $14 = HEAP32[$14 >> 2];
   HEAP32[$5 >> 2] = $14;
   HEAP32[$5 + 4 >> 2] = $8;
   $5 = HEAP32[$0 + 300 >> 2];
   $26 = HEAP32[$0 + 296 >> 2];
   HEAP32[$0 + 256 >> 2] = $26;
   HEAP32[$0 + 260 >> 2] = $5;
   $18 = $6 + 104 | 0;
   HEAP32[$18 >> 2] = $14;
   HEAP32[$18 + 4 >> 2] = $8;
   $8 = $6 + 112 | 0;
   HEAP32[$8 >> 2] = $16;
   HEAP32[$8 + 4 >> 2] = $28;
   HEAP32[$3 + 304 >> 2] = $26;
   HEAP32[$3 + 308 >> 2] = $5;
   $10 = HEAPF64[$0 + 352 >> 3];
   $12 = HEAPF64[$0 + 344 >> 3];
   $15 = HEAPF64[$0 + 336 >> 3];
   $7 = HEAPF64[$0 + 328 >> 3];
   $5 = $4 + 88 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   $5 = $4 + 56 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   $24 = 2.0 / ($10 * $10 + ($12 * $12 + ($7 * $7 + $15 * $15)));
   $20 = $12 * $24;
   $25 = $15 * $20;
   $27 = $7 * $24;
   $34 = $10 * $27;
   HEAPF64[$4 + 72 >> 3] = $25 + $34;
   HEAPF64[$4 + 48 >> 3] = $25 - $34;
   $25 = $7 * $27;
   $27 = $15;
   $15 = $15 * $24;
   $24 = $27 * $15;
   HEAPF64[$4 + 80 >> 3] = 1.0 - ($25 + $24);
   $12 = $12 * $20;
   HEAPF64[$4 + 40 >> 3] = 1.0 - ($25 + $12);
   HEAP32[$3 + 360 >> 2] = 0;
   HEAP32[$3 + 364 >> 2] = 0;
   $25 = $7 * $20;
   $27 = $10 * $15;
   HEAPF64[$3 + 400 >> 3] = $25 - $27;
   $7 = $7 * $15;
   $10 = $10 * $20;
   HEAPF64[$3 + 368 >> 3] = $7 + $10;
   HEAPF64[$3 + 352 >> 3] = $25 + $27;
   HEAPF64[$3 + 344 >> 3] = $7 - $10;
   HEAPF64[$3 + 336 >> 3] = 1.0 - ($24 + $12);
   $10 = HEAPF64[$0 + 384 >> 3];
   $12 = HEAPF64[$0 + 376 >> 3];
   $15 = HEAPF64[$0 + 368 >> 3];
   $7 = HEAPF64[$0 + 360 >> 3];
   $4 = $6 + 88 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $6 + 56 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $24 = 2.0 / ($10 * $10 + ($12 * $12 + ($7 * $7 + $15 * $15)));
   $20 = $12 * $24;
   $25 = $15 * $20;
   $27 = $7 * $24;
   $34 = $10 * $27;
   HEAPF64[$6 + 72 >> 3] = $25 + $34;
   HEAPF64[$6 + 48 >> 3] = $25 - $34;
   $25 = $7 * $27;
   $27 = $15;
   $15 = $15 * $24;
   $24 = $27 * $15;
   HEAPF64[$6 + 80 >> 3] = 1.0 - ($25 + $24);
   $12 = $12 * $20;
   HEAPF64[$6 + 40 >> 3] = 1.0 - ($25 + $12);
   HEAP32[$3 + 232 >> 2] = 0;
   HEAP32[$3 + 236 >> 2] = 0;
   $25 = $7 * $20;
   $27 = $10 * $15;
   HEAPF64[$3 + 272 >> 3] = $25 - $27;
   $7 = $7 * $15;
   $10 = $10 * $20;
   HEAPF64[$3 + 240 >> 3] = $7 + $10;
   HEAPF64[$3 + 224 >> 3] = $25 + $27;
   HEAPF64[$3 + 216 >> 3] = $7 - $10;
   HEAPF64[$3 + 208 >> 3] = 1.0 - ($24 + $12);
   $4 = $3 + 80 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $3 + 72 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $3 - -64 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $3 + 56 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $3 + 48 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $3 + 40 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $3 + 32 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $3 + 184 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAPF64[$3 + 176 >> 3] = -$32;
   HEAPF64[$3 + 168 >> 3] = -$29;
   HEAP32[$3 + 152 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = 1072693248;
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 28 >> 2] = 0;
   HEAPF64[$3 + 160 >> 3] = -$30;
   HEAP32[$3 + 156 >> 2] = $0;
   HEAP32[$3 >> 2] = 29180;
   HEAP8[$3 + 200 | 0] = 0;
   HEAPF64[$3 + 192 >> 3] = HEAPF64[$0 + 88 >> 3];
   $4 = HEAP32[$0 + 16 >> 2];
   $6 = HEAP32[$4 + 376 >> 2];
   $5 = HEAP32[$6 + 8 >> 2];
   HEAP32[$3 + 16 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$3 + 20 >> 2] = $5;
   label$1 : {
    if (HEAPU8[$0 + 466 | 0]) {
     btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($4, HEAP32[$0 + 20 >> 2], $3 + 336 | 0, $3 + 208 | 0, $3, HEAPF64[$1 + 72 >> 3]);
     break label$1;
    }
    btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($1, HEAP32[$0 + 20 >> 2], $3 + 336 | 0, $3 + 208 | 0, $3, HEAPF64[$1 + 72 >> 3]);
   }
   $8 = $0 + 296 | 0;
   $6 = $0 + 256 | 0;
   label$3 : {
    label$4 : {
     if (!(HEAPF64[$3 + 8 >> 3] < 1.0)) {
      break label$4
     }
     $4 = HEAP32[$0 + 16 >> 2];
     if (HEAPU8[$4 + 392 | 0] & 4) {
      break label$4
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $4, HEAP32[$3 + 152 >> 2]) | 0)) {
      break label$4
     }
     label$5 : {
      if (!(HEAPF64[$3 + 104 >> 3] * HEAPF64[$0 + 496 >> 3] + (HEAPF64[$3 + 88 >> 3] * HEAPF64[$0 + 480 >> 3] + HEAPF64[$3 + 96 >> 3] * HEAPF64[$0 + 488 >> 3]) > 0.0)) {
       break label$5
      }
      $7 = HEAPF64[$3 + 8 >> 3];
      HEAPF64[$0 + 288 >> 3] = $22 * $7;
      if (HEAPU8[$0 + 544 | 0]) {
       $10 = 1.0 - $7;
       HEAPF64[$0 + 256 >> 3] = $10 * HEAPF64[$0 + 256 >> 3] + $7 * HEAPF64[$0 + 296 >> 3];
       HEAPF64[$0 + 264 >> 3] = $10 * HEAPF64[$0 + 264 >> 3] + $7 * HEAPF64[$0 + 304 >> 3];
       HEAPF64[$0 + 272 >> 3] = $10 * HEAPF64[$0 + 272 >> 3] + $7 * HEAPF64[$0 + 312 >> 3];
       break label$5;
      }
      $4 = HEAP32[$8 + 4 >> 2];
      HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$6 + 4 >> 2] = $4;
      $4 = $8 + 24 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $16 = $6 + 24 | 0;
      HEAP32[$16 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$16 + 4 >> 2] = $5;
      $4 = $8 + 16 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $16 = $6 + 16 | 0;
      HEAP32[$16 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$16 + 4 >> 2] = $5;
      $4 = $8 + 8 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $16 = $6 + 8 | 0;
      HEAP32[$16 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$16 + 4 >> 2] = $5;
     }
     $16 = $6 + 24 | 0;
     $4 = HEAP32[$16 + 4 >> 2];
     $5 = HEAP32[$0 + 16 >> 2];
     $26 = $5 + 128 | 0;
     $14 = $26;
     HEAP32[$14 >> 2] = HEAP32[$16 >> 2];
     HEAP32[$14 + 4 >> 2] = $4;
     $14 = $6 + 16 | 0;
     $4 = HEAP32[$14 + 4 >> 2];
     $18 = $5 + 120 | 0;
     HEAP32[$18 >> 2] = HEAP32[$14 >> 2];
     HEAP32[$18 + 4 >> 2] = $4;
     $28 = $6 + 8 | 0;
     $4 = HEAP32[$28 + 4 >> 2];
     $19 = $5 + 112 | 0;
     HEAP32[$19 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$19 + 4 >> 2] = $4;
     $4 = HEAP32[$6 + 4 >> 2];
     $11 = $5 + 104 | 0;
     HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$11 + 4 >> 2] = $4;
     $4 = HEAP32[$0 + 16 >> 2];
     HEAP32[$4 + 536 >> 2] = HEAP32[$4 + 536 >> 2] + 1;
     $13 = $5 + 32 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 32 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 24 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 24 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 16 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 16 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = HEAP32[$5 + 12 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 + 12 >> 2] = $13;
     $13 = $5 - -64 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 - -64 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 56 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 56 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 48 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 48 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 40 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 40 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 72 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 72 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 80 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 80 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $13 = $5 + 88 | 0;
     $23 = HEAP32[$13 + 4 >> 2];
     $21 = $4 + 88 | 0;
     HEAP32[$21 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$21 + 4 >> 2] = $23;
     $5 = $5 + 96 | 0;
     $13 = HEAP32[$5 + 4 >> 2];
     $23 = $4 + 96 | 0;
     HEAP32[$23 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$23 + 4 >> 2] = $13;
     $5 = HEAP32[$11 + 4 >> 2];
     $13 = $4 + 104 | 0;
     HEAP32[$13 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$13 + 4 >> 2] = $5;
     $5 = HEAP32[$19 + 4 >> 2];
     $11 = $4 + 112 | 0;
     HEAP32[$11 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$11 + 4 >> 2] = $5;
     $5 = HEAP32[$18 + 4 >> 2];
     $19 = $4 + 120 | 0;
     HEAP32[$19 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$19 + 4 >> 2] = $5;
     $5 = HEAP32[$26 + 4 >> 2];
     $4 = $4 + 128 | 0;
     HEAP32[$4 >> 2] = HEAP32[$26 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     HEAP8[$0 + 412 | 0] = 0;
     label$7 : {
      if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 0, 1)) {
       break label$7
      }
      HEAP8[$0 + 412 | 0] = 1;
      if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 1, 1)) {
       break label$7
      }
      HEAP8[$0 + 412 | 0] = 1;
      if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 2, 1)) {
       break label$7
      }
      HEAP8[$0 + 412 | 0] = 1;
      if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 3, 1)) {
       break label$7
      }
      HEAP8[$0 + 412 | 0] = 1;
      if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 4, 1)) {
       break label$7
      }
      HEAP8[$0 + 412 | 0] = 1;
     }
     $4 = HEAP32[$0 + 16 >> 2];
     $5 = $4 + 104 | 0;
     $26 = HEAP32[$5 + 4 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$8 + 4 >> 2] = $26;
     $26 = $4 + 112 | 0;
     $18 = HEAP32[$26 + 4 >> 2];
     $19 = $8 + 8 | 0;
     HEAP32[$19 >> 2] = HEAP32[$26 >> 2];
     HEAP32[$19 + 4 >> 2] = $18;
     $18 = $4 + 120 | 0;
     $19 = HEAP32[$18 + 4 >> 2];
     $11 = $8 + 16 | 0;
     HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$11 + 4 >> 2] = $19;
     $4 = $4 + 128 | 0;
     $19 = HEAP32[$4 + 4 >> 2];
     $8 = $8 + 24 | 0;
     HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$8 + 4 >> 2] = $19;
     $8 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     $19 = HEAP32[$26 >> 2];
     $26 = HEAP32[$26 + 4 >> 2];
     $11 = HEAP32[$18 >> 2];
     $18 = HEAP32[$18 + 4 >> 2];
     $13 = HEAP32[$4 + 4 >> 2];
     HEAP32[$16 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$16 + 4 >> 2] = $13;
     HEAP32[$14 >> 2] = $11;
     HEAP32[$14 + 4 >> 2] = $18;
     HEAP32[$28 >> 2] = $19;
     HEAP32[$28 + 4 >> 2] = $26;
     HEAP32[$6 >> 2] = $8;
     HEAP32[$6 + 4 >> 2] = $5;
     if (HEAPF64[$0 + 40 >> 3] > 0.0) {
      $4 = $0 + 32 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $4 = $4 + 8 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAPF64[$0 + 288 >> 3] = HEAPF64[$0 + 112 >> 3];
     }
     HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] | 4;
     break label$3;
    }
    HEAPF64[$0 + 288 >> 3] = $22;
    $4 = HEAP32[$8 + 4 >> 2];
    HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$6 + 4 >> 2] = $4;
    $4 = $8 + 8 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $16 = $6 + 8 | 0;
    HEAP32[$16 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$16 + 4 >> 2] = $5;
    $4 = $8 + 16 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $16 = $6 + 16 | 0;
    HEAP32[$16 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$16 + 4 >> 2] = $5;
    $4 = $8 + 24 | 0;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $6 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
   }
   __stack_pointer = $3 + 464 | 0;
   $14 = $0 + 256 | 0;
   $16 = $9 + 96 | 0;
   $28 = $9 - -64 | 0;
   $26 = $9 + 32 | 0;
   label$11 : {
    if (HEAPU8[$0 + 467 | 0]) {
     btKinematicCharacterController__stepForwardAndStrafe_28btCollisionWorld__2c_20btVector3_20const__29($0, $1, $0 + 128 | 0);
     break label$11;
    }
    $7 = HEAPF64[$0 + 472 >> 3];
    HEAPF64[$0 + 472 >> 3] = $7 - $2;
    HEAP32[$17 + 24 >> 2] = 0;
    HEAP32[$17 + 28 >> 2] = 0;
    $7 = $2 < $7 ? $2 : $7;
    HEAPF64[$17 + 16 >> 3] = $7 * HEAPF64[$0 + 144 >> 3];
    HEAPF64[$17 + 8 >> 3] = $7 * HEAPF64[$0 + 136 >> 3];
    HEAPF64[$17 >> 3] = $7 * HEAPF64[$0 + 128 >> 3];
    btKinematicCharacterController__stepForwardAndStrafe_28btCollisionWorld__2c_20btVector3_20const__29($0, $1, $17);
   }
   $18 = 0;
   $5 = __stack_pointer - 832 | 0;
   __stack_pointer = $5;
   $3 = $0 + 320 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $6 = $5 + 440 | 0;
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $3 = $0 + 312 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $6 = $5 + 432 | 0;
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $3 = $0 + 304 | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   $6 = $5 + 424 | 0;
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $3 = HEAP32[$0 + 300 >> 2];
   HEAP32[$5 + 416 >> 2] = HEAP32[$0 + 296 >> 2];
   HEAP32[$5 + 420 >> 2] = $3;
   $7 = HEAPF64[$0 + 32 >> 3];
   label$12 : {
    if ($7 > 0.0) {
     break label$12
    }
    $7 = ($7 < 0.0 ? -$7 : 0.0) * $2;
    label$2 : {
     if (!($7 > 0.0)) {
      break label$2
     }
     $10 = HEAPF64[$0 + 48 >> 3];
     if (!($10 < $7)) {
      break label$2
     }
     $7 = HEAPU8[$0 + 464 | 0] ? $10 : HEAPU8[$0 + 465 | 0] ? $7 : $10;
    }
    $21 = $0 + 32 | 0;
    $8 = $0 + 296 | 0;
    $7 = $7 + HEAPF64[$0 + 288 >> 3];
    $10 = HEAPF64[$0 + 480 >> 3] * $7;
    HEAPF64[$0 + 296 >> 3] = HEAPF64[$0 + 296 >> 3] - $10;
    $3 = $0 + 304 | 0;
    $4 = $0 + 488 | 0;
    $15 = $7 * HEAPF64[$4 >> 3];
    HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] - $15;
    $3 = $0 + 312 | 0;
    $6 = $0 + 496 | 0;
    $22 = $7 * HEAPF64[$6 >> 3];
    HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] - $22;
    $3 = $5 + 208 | 0;
    $9 = $3 + 32 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    $9 = $3 + 40 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    $9 = $3 + 48 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    $9 = $3 + 56 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    $9 = $3 - -64 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    $9 = $3 + 72 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    $9 = $3 + 80 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    $19 = $0 + 504 | 0;
    $9 = $19;
    $11 = HEAP32[$9 + 4 >> 2];
    $13 = $3 + 184 | 0;
    HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$13 + 4 >> 2] = $11;
    $9 = HEAP32[$6 + 4 >> 2];
    $11 = $3 + 176 | 0;
    HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$11 + 4 >> 2] = $9;
    $9 = HEAP32[$4 + 4 >> 2];
    $11 = $3 + 168 | 0;
    HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$11 + 4 >> 2] = $9;
    HEAP32[$5 + 360 >> 2] = 0;
    HEAP32[$5 + 216 >> 2] = 0;
    HEAP32[$5 + 220 >> 2] = 1072693248;
    HEAP32[$5 + 232 >> 2] = 0;
    HEAP32[$5 + 236 >> 2] = 0;
    HEAP32[$5 + 364 >> 2] = $0;
    HEAP32[$5 + 208 >> 2] = 29180;
    $9 = HEAP32[$0 + 484 >> 2];
    HEAP32[$5 + 368 >> 2] = HEAP32[$0 + 480 >> 2];
    HEAP32[$5 + 372 >> 2] = $9;
    $7 = HEAPF64[$0 + 88 >> 3];
    HEAP8[$5 + 408 | 0] = 0;
    HEAPF64[$5 + 400 >> 3] = $7;
    $9 = HEAP32[HEAP32[$0 + 16 >> 2] + 376 >> 2];
    HEAP32[$5 + 224 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$5 + 228 >> 2] = HEAP32[$9 + 8 >> 2];
    $11 = $5 + 32 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $11 = $5 + 40 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $11 = $5 + 48 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $11 = $5 + 56 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $11 = $5 - -64 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $11 = $5 + 72 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $11 = $5 + 80 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $11 = HEAP32[$19 + 4 >> 2];
    $13 = $5 + 184 | 0;
    HEAP32[$13 >> 2] = HEAP32[$19 >> 2];
    HEAP32[$13 + 4 >> 2] = $11;
    $19 = HEAP32[$6 + 4 >> 2];
    $11 = $5 + 176 | 0;
    HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$11 + 4 >> 2] = $19;
    $6 = HEAP32[$4 + 4 >> 2];
    $19 = $5 + 168 | 0;
    HEAP32[$19 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$19 + 4 >> 2] = $6;
    HEAP32[$5 + 152 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    HEAP32[$5 + 12 >> 2] = 1072693248;
    HEAP32[$5 + 24 >> 2] = 0;
    HEAP32[$5 + 28 >> 2] = 0;
    HEAP32[$5 + 156 >> 2] = $0;
    HEAP32[$5 >> 2] = 29180;
    $4 = HEAP32[$0 + 484 >> 2];
    HEAP32[$5 + 160 >> 2] = HEAP32[$0 + 480 >> 2];
    HEAP32[$5 + 164 >> 2] = $4;
    HEAP8[$5 + 200 | 0] = 0;
    HEAPF64[$5 + 192 >> 3] = $7;
    $4 = HEAP32[$9 + 8 >> 2];
    HEAP32[$5 + 16 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$5 + 20 >> 2] = $4;
    $9 = $0 + 256 | 0;
    $19 = $5 + 672 | 0;
    $11 = $5 + 800 | 0;
    $4 = $5 + 448 | 0;
    $13 = $4 + 48 | 0;
    $23 = $4 + 8 | 0;
    $4 = $5 + 152 | 0;
    $6 = $3 + 152 | 0;
    while (1) {
     HEAP32[$23 >> 2] = 0;
     HEAP32[$23 + 4 >> 2] = 0;
     HEAP32[$13 >> 2] = 0;
     HEAP32[$13 + 4 >> 2] = 0;
     $3 = $23 + 8 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $23 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $23 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $13 + 8 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $13 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $13 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = HEAP32[$9 + 4 >> 2];
     HEAP32[$11 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$11 + 4 >> 2] = $3;
     $3 = $9 + 8 | 0;
     $31 = HEAP32[$3 + 4 >> 2];
     $33 = $11 + 8 | 0;
     HEAP32[$33 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$33 + 4 >> 2] = $31;
     $3 = $9 + 16 | 0;
     $31 = HEAP32[$3 + 4 >> 2];
     $33 = $11 + 16 | 0;
     HEAP32[$33 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$33 + 4 >> 2] = $31;
     $3 = $9 + 24 | 0;
     $31 = HEAP32[$3 + 4 >> 2];
     $33 = $11 + 24 | 0;
     HEAP32[$33 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$33 + 4 >> 2] = $31;
     HEAP32[$5 + 448 >> 2] = 0;
     HEAP32[$5 + 452 >> 2] = 1072693248;
     HEAP32[$5 + 488 >> 2] = 0;
     HEAP32[$5 + 492 >> 2] = 1072693248;
     HEAP32[$5 + 536 >> 2] = 0;
     HEAP32[$5 + 540 >> 2] = 0;
     HEAP32[$5 + 528 >> 2] = 0;
     HEAP32[$5 + 532 >> 2] = 1072693248;
     $33 = $8 + 24 | 0;
     $3 = $33;
     $31 = HEAP32[$3 + 4 >> 2];
     $36 = $19 + 24 | 0;
     HEAP32[$36 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$36 + 4 >> 2] = $31;
     $36 = $8 + 16 | 0;
     $3 = $36;
     $31 = HEAP32[$3 + 4 >> 2];
     $37 = $19 + 16 | 0;
     HEAP32[$37 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$37 + 4 >> 2] = $31;
     $37 = $8 + 8 | 0;
     $3 = $37;
     $31 = HEAP32[$3 + 4 >> 2];
     $35 = $19 + 8 | 0;
     HEAP32[$35 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$35 + 4 >> 2] = $31;
     $3 = HEAP32[$8 + 4 >> 2];
     HEAP32[$19 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$19 + 4 >> 2] = $3;
     HEAP32[$5 + 792 >> 2] = 0;
     HEAP32[$5 + 796 >> 2] = 0;
     HEAP32[$5 + 760 >> 2] = 0;
     HEAP32[$5 + 764 >> 2] = 0;
     HEAP32[$5 + 728 >> 2] = 0;
     HEAP32[$5 + 732 >> 2] = 0;
     $12 = HEAPF64[$0 + 352 >> 3];
     $29 = HEAPF64[$0 + 344 >> 3];
     $7 = HEAPF64[$0 + 328 >> 3];
     $20 = HEAPF64[$0 + 336 >> 3];
     $30 = 2.0 / ($12 * $12 + ($29 * $29 + ($7 * $7 + $20 * $20)));
     $32 = $20 * $30;
     $25 = $7 * $32;
     $24 = $29 * $30;
     $27 = $12 * $24;
     HEAPF64[$5 + 712 >> 3] = $25 - $27;
     $34 = $7 * $24;
     $38 = $12 * $32;
     HEAPF64[$5 + 720 >> 3] = $34 + $38;
     HEAPF64[$5 + 736 >> 3] = $25 + $27;
     $25 = $20 * $24;
     $27 = $12;
     $12 = $7 * $30;
     $30 = $27 * $12;
     HEAPF64[$5 + 752 >> 3] = $25 - $30;
     HEAPF64[$5 + 768 >> 3] = $34 - $38;
     HEAPF64[$5 + 776 >> 3] = $25 + $30;
     $20 = $20 * $32;
     $29 = $29 * $24;
     HEAPF64[$5 + 704 >> 3] = 1.0 - ($20 + $29);
     $7 = $7 * $12;
     HEAPF64[$5 + 744 >> 3] = 1.0 - ($7 + $29);
     HEAPF64[$5 + 784 >> 3] = 1.0 - ($7 + $20);
     HEAP32[$5 + 600 >> 2] = 0;
     HEAP32[$5 + 604 >> 2] = 0;
     HEAP32[$5 + 632 >> 2] = 0;
     HEAP32[$5 + 636 >> 2] = 0;
     HEAP32[$5 + 664 >> 2] = 0;
     HEAP32[$5 + 668 >> 2] = 0;
     $12 = HEAPF64[$0 + 384 >> 3];
     $29 = HEAPF64[$0 + 376 >> 3];
     $7 = HEAPF64[$0 + 360 >> 3];
     $20 = HEAPF64[$0 + 368 >> 3];
     $30 = 2.0 / ($12 * $12 + ($29 * $29 + ($7 * $7 + $20 * $20)));
     $32 = $20 * $30;
     $25 = $7 * $32;
     $24 = $29 * $30;
     $27 = $12 * $24;
     HEAPF64[$5 + 608 >> 3] = $25 + $27;
     HEAPF64[$5 + 584 >> 3] = $25 - $27;
     $25 = $7 * $24;
     $27 = $12 * $32;
     HEAPF64[$5 + 640 >> 3] = $25 - $27;
     HEAPF64[$5 + 592 >> 3] = $25 + $27;
     $25 = $20 * $24;
     $27 = $12;
     $12 = $7 * $30;
     $30 = $27 * $12;
     HEAPF64[$5 + 648 >> 3] = $25 + $30;
     HEAPF64[$5 + 624 >> 3] = $25 - $30;
     $20 = $20 * $32;
     $29 = $29 * $24;
     HEAPF64[$5 + 576 >> 3] = 1.0 - ($20 + $29);
     $7 = $7 * $12;
     HEAPF64[$5 + 656 >> 3] = 1.0 - ($7 + $20);
     HEAPF64[$5 + 616 >> 3] = 1.0 - ($7 + $29);
     $7 = HEAPF64[$0 + 296 >> 3];
     $12 = HEAPF64[$0 + 304 >> 3];
     $20 = HEAPF64[$0 + 312 >> 3];
     HEAP32[$5 + 568 >> 2] = 0;
     HEAP32[$5 + 572 >> 2] = 0;
     HEAPF64[$5 + 560 >> 3] = $20 - $22;
     HEAPF64[$5 + 552 >> 3] = $12 - $15;
     HEAPF64[$5 + 544 >> 3] = $7 - $10;
     label$44 : {
      if (HEAPU8[$0 + 466 | 0]) {
       btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $5 + 704 | 0, $5 + 576 | 0, $5 + 208 | 0, HEAPF64[$1 + 72 >> 3]);
       if (HEAPF64[$5 + 216 >> 3] < 1.0) {
        break label$44
       }
       $3 = HEAP32[$0 + 16 >> 2];
       if (HEAPU8[$3 + 392 | 0] & 4) {
        break label$44
       }
       btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($3, HEAP32[$0 + 20 >> 2], $5 + 704 | 0, $5 + 448 | 0, $5, HEAPF64[$1 + 72 >> 3]);
       break label$44;
      }
      btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($1, HEAP32[$0 + 20 >> 2], $5 + 704 | 0, $5 + 576 | 0, $5 + 208 | 0, HEAPF64[$1 + 72 >> 3]);
      if (HEAPU8[HEAP32[$0 + 16 >> 2] + 392 | 0] & 4 | HEAPF64[$5 + 216 >> 3] < 1.0) {
       break label$44
      }
      btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($1, HEAP32[$0 + 20 >> 2], $5 + 704 | 0, $5 + 448 | 0, $5, HEAPF64[$1 + 72 >> 3]);
     }
     $7 = HEAPF64[$0 + 32 >> 3];
     $7 = ($7 < 0.0 ? -$7 : 0.0) * $2;
     label$65 : {
      label$76 : {
       if (HEAPU8[$0 + 546 | 0]) {
        $31 = 0;
        if (!(HEAPF64[$5 + 216 >> 3] < 1.0 | HEAPF64[$5 + 8 >> 3] < 1.0)) {
         break label$65
        }
        $3 = $6;
        $35 = HEAP32[$0 + 16 >> 2];
        if (!(HEAPU8[$35 + 392 | 0] & 4)) {
         break label$76
        }
        break label$65;
       }
       $31 = 0;
       if (!(HEAPF64[$5 + 8 >> 3] < 1.0)) {
        break label$65
       }
       $3 = $4;
       $35 = HEAP32[$0 + 16 >> 2];
       if (HEAPU8[$35 + 392 | 0] & 4) {
        break label$65
       }
      }
      $31 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $35, HEAP32[$3 >> 2]) | 0;
     }
     label$107 : {
      label$118 : {
       $12 = HEAPF64[$0 + 32 >> 3] < 0.0 ? HEAPF64[$0 + 112 >> 3] : 0.0;
       if (!(($7 > 0.0 ^ -1 | $7 < $12 ^ -1 | $31 ^ -1 | $18) & 1)) {
        if (HEAPU8[$0 + 464 | 0] | !HEAPU8[$0 + 465 | 0]) {
         break label$118
        }
        $18 = 0;
       }
       $3 = HEAP32[$0 + 16 >> 2];
       label$13 : {
        if (!(!(HEAPF64[$5 + 216 >> 3] < 1.0) | HEAPU8[$3 + 392 | 0] & 4)) {
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $3, HEAP32[$5 + 360 >> 2]) | $18) & 1) {
          break label$13
         }
         break label$107;
        }
        if (!$18) {
         break label$107
        }
       }
       label$15 : {
        label$16 : {
         if (HEAPU8[$0 + 546 | 0]) {
          if (HEAPU8[$0 + 545 | 0]) {
           $7 = HEAPF64[$5 + 216 >> 3];
           $2 = 1.0 - $7;
           HEAPF64[$0 + 256 >> 3] = $2 * HEAPF64[$0 + 256 >> 3] + $7 * HEAPF64[$0 + 296 >> 3];
           $3 = $0 + 264 | 0;
           HEAPF64[$3 >> 3] = $2 * HEAPF64[$3 >> 3] + $7 * HEAPF64[$0 + 304 >> 3];
           break label$16;
          }
          $3 = $0 + 264 | 0;
          $12 = HEAPF64[$3 >> 3];
          $7 = ($12 - HEAPF64[$5 + 336 >> 3]) * .5;
          $2 = 1.0 - $7;
          HEAPF64[$0 + 256 >> 3] = $2 * HEAPF64[$0 + 256 >> 3] + HEAPF64[$0 + 296 >> 3] * $7;
          HEAPF64[$3 >> 3] = $2 * $12 + $7 * HEAPF64[$0 + 304 >> 3];
          break label$16;
         }
         if (!(Math_abs(HEAPF64[$5 + 312 >> 3] * $22 + (HEAPF64[$5 + 296 >> 3] * $10 + $15 * HEAPF64[$5 + 304 >> 3])) > .1)) {
          break label$15
         }
         $7 = HEAPF64[$5 + 216 >> 3];
         $2 = 1.0 - $7;
         HEAPF64[$0 + 256 >> 3] = $2 * HEAPF64[$0 + 256 >> 3] + $7 * HEAPF64[$0 + 296 >> 3];
         $3 = $0 + 264 | 0;
         HEAPF64[$3 >> 3] = $2 * HEAPF64[$3 >> 3] + $7 * HEAPF64[$0 + 304 >> 3];
        }
        $3 = $0 + 272 | 0;
        HEAPF64[$3 >> 3] = $2 * HEAPF64[$3 >> 3] + $7 * HEAPF64[$0 + 312 >> 3];
       }
       if (Math_abs(HEAPF64[$5 + 312 >> 3] * $22 + (HEAPF64[$5 + 296 >> 3] * $10 + $15 * HEAPF64[$5 + 304 >> 3])) > .1) {
        HEAP8[$0 + 545 | 0] = 0;
        HEAP8[$0 + 465 | 0] = 0;
        HEAP32[$21 >> 2] = 0;
        HEAP32[$21 + 4 >> 2] = 0;
        $3 = $21 + 8 | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 0;
        HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] | 1;
        break label$12;
       }
       $3 = HEAP32[$8 + 4 >> 2];
       HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$9 + 4 >> 2] = $3;
       $3 = $8 + 24 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $6 = $9 + 24 | 0;
       HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$6 + 4 >> 2] = $4;
       $3 = $8 + 16 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $6 = $9 + 16 | 0;
       HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$6 + 4 >> 2] = $4;
       $3 = $8 + 8 | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       $6 = $9 + 8 | 0;
       HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$6 + 4 >> 2] = $4;
       break label$12;
      }
      $3 = HEAP32[$5 + 420 >> 2];
      HEAP32[$8 >> 2] = HEAP32[$5 + 416 >> 2];
      HEAP32[$8 + 4 >> 2] = $3;
      $3 = $5 + 416 | 0;
      $18 = $3 + 24 | 0;
      $31 = HEAP32[$18 + 4 >> 2];
      HEAP32[$33 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$33 + 4 >> 2] = $31;
      $18 = $3 + 16 | 0;
      $31 = HEAP32[$18 + 4 >> 2];
      HEAP32[$36 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$36 + 4 >> 2] = $31;
      $3 = $3 + 8 | 0;
      $18 = HEAP32[$3 + 4 >> 2];
      HEAP32[$37 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$37 + 4 >> 2] = $18;
      $7 = $12 + HEAPF64[$0 + 288 >> 3];
      $10 = HEAPF64[$0 + 480 >> 3] * $7;
      HEAPF64[$0 + 296 >> 3] = HEAPF64[$0 + 296 >> 3] - $10;
      $15 = $7 * HEAPF64[$0 + 488 >> 3];
      HEAPF64[$0 + 304 >> 3] = HEAPF64[$0 + 304 >> 3] - $15;
      $22 = $7 * HEAPF64[$0 + 496 >> 3];
      HEAPF64[$0 + 312 >> 3] = HEAPF64[$0 + 312 >> 3] - $22;
      $18 = 1;
      continue;
     }
     break;
    };
    HEAP8[$0 + 545 | 0] = 1;
    label$20 : {
     if (!HEAPU8[$0 + 546 | 0]) {
      break label$20
     }
     $7 = HEAPF64[$0 + 48 >> 3];
     $12 = HEAPF64[$0 + 32 >> 3];
     if (!($7 < ($12 < 0.0 ? -$12 : 0.0) * $2) | !(HEAPU8[$0 + 465 | 0] ? HEAPU8[$0 + 464 | 0] : 1)) {
      break label$20
     }
     $2 = $7 + HEAPF64[$0 + 288 >> 3];
     HEAPF64[$0 + 312 >> 3] = $22 + HEAPF64[$0 + 312 >> 3] - $2 * HEAPF64[$0 + 496 >> 3];
     HEAPF64[$0 + 304 >> 3] = $15 + HEAPF64[$0 + 304 >> 3] - $2 * HEAPF64[$0 + 488 >> 3];
     HEAPF64[$0 + 296 >> 3] = $10 + HEAPF64[$0 + 296 >> 3] - HEAPF64[$0 + 480 >> 3] * $2;
    }
    $3 = HEAP32[$8 + 4 >> 2];
    HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$9 + 4 >> 2] = $3;
    $3 = $8 + 24 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $6 = $9 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $4;
    $3 = $8 + 16 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $6 = $9 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $4;
    $3 = $8 + 8 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $6 = $9 + 8 | 0;
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = $4;
   }
   __stack_pointer = $5 + 832 | 0;
   $3 = $14 + 24 | 0;
   $6 = HEAP32[$3 + 4 >> 2];
   $4 = $16 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   $3 = $14 + 16 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $6 = $16 + 16 | 0;
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$6 + 4 >> 2] = $5;
   $3 = $14 + 8 | 0;
   $8 = HEAP32[$3 + 4 >> 2];
   $5 = $16 + 8 | 0;
   HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $3 = HEAP32[$14 + 4 >> 2];
   HEAP32[$16 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$16 + 4 >> 2] = $3;
   $8 = HEAP32[$17 + 36 >> 2];
   $3 = HEAP32[$0 + 16 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$17 + 32 >> 2];
   HEAP32[$3 + 12 >> 2] = $8;
   $8 = $17 + 32 | 0;
   $9 = $8 + 24 | 0;
   $14 = HEAP32[$9 + 4 >> 2];
   $18 = $3 + 32 | 0;
   HEAP32[$18 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$18 + 4 >> 2] = $14;
   $9 = $8 + 16 | 0;
   $14 = HEAP32[$9 + 4 >> 2];
   $18 = $3 + 24 | 0;
   HEAP32[$18 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$18 + 4 >> 2] = $14;
   $8 = $8 + 8 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $14 = $3 + 16 | 0;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $9;
   HEAP32[$3 + 536 >> 2] = HEAP32[$3 + 536 >> 2] + 1;
   $8 = $26 + 24 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $14 = $3 - -64 | 0;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $9;
   $8 = $26 + 16 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $14 = $3 + 56 | 0;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $9;
   $8 = $26 + 8 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $14 = $3 + 48 | 0;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $9;
   $8 = HEAP32[$26 + 4 >> 2];
   $9 = $3 + 40 | 0;
   HEAP32[$9 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$9 + 4 >> 2] = $8;
   $8 = $28 + 24 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $14 = $3 + 96 | 0;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $9;
   $8 = $28 + 16 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $14 = $3 + 88 | 0;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $9;
   $8 = $28 + 8 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $14 = $3 + 80 | 0;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $9;
   $8 = HEAP32[$28 + 4 >> 2];
   $9 = $3 + 72 | 0;
   HEAP32[$9 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$9 + 4 >> 2] = $8;
   $8 = HEAP32[$4 + 4 >> 2];
   $9 = $3 + 128 | 0;
   HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$9 + 4 >> 2] = $8;
   $4 = HEAP32[$6 + 4 >> 2];
   $8 = $3 + 120 | 0;
   HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$8 + 4 >> 2] = $4;
   $4 = HEAP32[$5 + 4 >> 2];
   $6 = $3 + 112 | 0;
   HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $4 = HEAP32[$16 + 4 >> 2];
   $3 = $3 + 104 | 0;
   HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   HEAP8[$0 + 412 | 0] = 0;
   label$139 : {
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 0, 0)) {
     break label$139
    }
    HEAP8[$0 + 412 | 0] = 1;
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 1, 0)) {
     break label$139
    }
    HEAP8[$0 + 412 | 0] = 1;
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 2, 0)) {
     break label$139
    }
    HEAP8[$0 + 412 | 0] = 1;
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 3, 0)) {
     break label$139
    }
    HEAP8[$0 + 412 | 0] = 1;
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__2c_20int_2c_20int_29($0, $1, 4, 0)) {
     break label$139
    }
    HEAP8[$0 + 412 | 0] = 1;
   }
   $8 = HEAP32[$0 + 568 >> 2];
   if (($8 | 0) <= 0) {
    break label$6
   }
   $3 = $8 - 2 | 0;
   $4 = 4;
   $6 = 0;
   while (1) {
    label$1510 : {
     $1 = $6;
     $6 = $6 + 1 | 0;
     if (($8 | 0) <= ($6 | 0)) {
      break label$1510
     }
     $9 = HEAP32[$0 + 576 >> 2];
     $16 = HEAP32[$9 + ($1 << 2) >> 2];
     $5 = $4;
     $1 = $3;
     while (1) {
      $9 = $5 + $9 | 0;
      if (HEAP32[$9 >> 2] == ($16 | 0)) {
       HEAP32[$9 >> 2] = 0
      }
      if (!$1) {
       break label$1510
      }
      $5 = $5 + 4 | 0;
      $1 = $1 - 1 | 0;
      $9 = HEAP32[$0 + 576 >> 2];
      continue;
     };
    }
    $4 = $4 + 4 | 0;
    $3 = $3 - 1 | 0;
    if (($6 | 0) != ($8 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $17 + 160 | 0;
 }
 
 function btKinematicCharacterController__canJump_28_29_20const($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0) | 0;
 }
 
 function btKinematicCharacterController__jump_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0;
  $2 = HEAPF64[$1 + 16 >> 3];
  $4 = $2 * $2;
  $2 = HEAPF64[$1 >> 3];
  $5 = $2 * $2;
  $2 = HEAPF64[$1 + 8 >> 3];
  $2 = $4 + ($5 + $2 * $2);
  $2 = $2 == 0.0 ? HEAPF64[$0 + 64 >> 3] : Math_sqrt($2);
  HEAPF64[$0 + 56 >> 3] = $2;
  HEAPF64[$0 + 32 >> 3] = $2;
  HEAP8[$0 + 465 | 0] = 1;
  $3 = $0 + 536 | 0;
  $2 = HEAPF64[$1 + 16 >> 3];
  $4 = HEAPF64[$1 >> 3];
  $5 = HEAPF64[$1 + 8 >> 3];
  $7 = $2 * $2 + ($4 * $4 + $5 * $5);
  label$1 : {
   if ($7 == 0.0) {
    $2 = HEAPF64[$0 + 496 >> 3];
    $5 = HEAPF64[$0 + 488 >> 3];
    $4 = HEAPF64[$0 + 480 >> 3];
    $1 = $0 + 504 | 0;
    break label$1;
   }
   $7 = 1.0 / Math_sqrt($7);
   $2 = $2 * $7;
   $5 = $5 * $7;
   $4 = $4 * $7;
   $1 = $1 + 24 | 0;
  }
  HEAPF64[$3 >> 3] = HEAPF64[$1 >> 3];
  HEAPF64[$0 + 528 >> 3] = $2;
  HEAPF64[$0 + 520 >> 3] = $5;
  HEAPF64[$0 + 512 >> 3] = $4;
  $1 = HEAP32[$0 + 16 >> 2];
  $3 = $1 + 104 | 0;
  $6 = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 224 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 228 >> 2] = $6;
  $6 = $1 + 112 | 0;
  $8 = HEAP32[$6 + 4 >> 2];
  $3 = $0 + 232 | 0;
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $6 = $1 + 120 | 0;
  $8 = HEAP32[$6 + 4 >> 2];
  $3 = $0 + 240 | 0;
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $1 = $1 + 128 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 248 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
 }
 
 function btKinematicCharacterController__onGround_28_29_20const($0) {
  $0 = $0 | 0;
  return Math_abs(HEAPF64[$0 + 32 >> 3]) < 2.220446049250313e-16 & Math_abs(HEAPF64[$0 + 40 >> 3]) < 2.220446049250313e-16;
 }
 
 function btKinematicCharacterController__setUpInterpolate_28bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 544 | 0] = $1;
 }
 
 function btKinematicCharacterController__updateAction_28btCollisionWorld__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1) | 0), HEAP32[wasm2js_i32$0 + 560 >> 2] = wasm2js_i32$1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2);
 }
 
 function btKinematicClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
  $19 = 1.0;
  $4 = HEAP32[$1 >> 2];
  $10 = HEAP32[$0 + 156 >> 2];
  label$1 : {
   if (($4 | 0) == HEAP32[$10 + 16 >> 2]) {
    break label$1
   }
   if (HEAPU8[$0 + 200 | 0]) {
    $4 = $10 + 564 | 0;
    $10 = HEAP32[$4 + 4 >> 2];
    label$10 : {
     if (($10 | 0) != HEAP32[$4 + 8 >> 2]) {
      break label$10
     }
     $9 = $10 ? $10 << 1 : 1;
     if (($9 | 0) <= ($10 | 0)) {
      break label$10
     }
     if ($9) {
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2);
      $10 = HEAP32[$4 + 4 >> 2];
     }
     label$4 : {
      if (($10 | 0) <= 0) {
       break label$4
      }
      $5 = $10 & 3;
      if ($10 - 1 >>> 0 >= 3) {
       $20 = $10 & -4;
       while (1) {
        $14 = $3 + $6 | 0;
        HEAP32[$14 >> 2] = HEAP32[HEAP32[$4 + 12 >> 2] + $3 >> 2];
        HEAP32[$14 + 4 >> 2] = HEAP32[(HEAP32[$4 + 12 >> 2] + $3 | 0) + 4 >> 2];
        HEAP32[$14 + 8 >> 2] = HEAP32[(HEAP32[$4 + 12 >> 2] + $3 | 0) + 8 >> 2];
        HEAP32[$14 + 12 >> 2] = HEAP32[(HEAP32[$4 + 12 >> 2] + $3 | 0) + 12 >> 2];
        $3 = $3 + 16 | 0;
        $7 = $7 + 4 | 0;
        if (($20 | 0) != ($7 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$5) {
       break label$4
      }
      $3 = $7 << 2;
      while (1) {
       HEAP32[$3 + $6 >> 2] = HEAP32[HEAP32[$4 + 12 >> 2] + $3 >> 2];
       $3 = $3 + 4 | 0;
       $5 = $5 - 1 | 0;
       if ($5) {
        continue
       }
       break;
      };
     }
     $3 = HEAP32[$4 + 12 >> 2];
     if (!(!$3 | !HEAPU8[$4 + 16 | 0])) {
      btAlignedFreeInternal_28void__29($3);
      $10 = HEAP32[$4 + 4 >> 2];
     }
     HEAP32[$4 + 12 >> 2] = $6;
     HEAP8[$4 + 16 | 0] = 1;
     HEAP32[$4 + 8 >> 2] = $9;
    }
    HEAP32[$4 + 4 >> 2] = $10 + 1;
    HEAP32[HEAP32[$4 + 12 >> 2] + ($10 << 2) >> 2] = HEAP32[$1 >> 2];
    label$9 : {
     if ($2) {
      $16 = HEAPF64[$1 + 24 >> 3];
      $17 = HEAPF64[$1 + 16 >> 3];
      $13 = HEAPF64[$1 + 8 >> 3];
      $15 = HEAPF64[$1 + 32 >> 3];
      break label$9;
     }
     $3 = HEAP32[$1 >> 2];
     $13 = HEAPF64[$1 + 24 >> 3];
     $15 = HEAPF64[$1 + 8 >> 3];
     $18 = HEAPF64[$1 + 16 >> 3];
     $16 = HEAPF64[$3 + 88 >> 3] * $13 + (HEAPF64[$3 + 72 >> 3] * $15 + $18 * HEAPF64[$3 + 80 >> 3]);
     $17 = HEAPF64[$3 + 56 >> 3] * $13 + (HEAPF64[$3 + 40 >> 3] * $15 + $18 * HEAPF64[$3 + 48 >> 3]);
     $13 = HEAPF64[$3 + 24 >> 3] * $13 + (HEAPF64[$3 + 8 >> 3] * $15 + HEAPF64[$3 + 16 >> 3] * $18);
     $15 = 0.0;
    }
    $3 = HEAP32[$4 + 24 >> 2];
    label$11 : {
     if (($3 | 0) != HEAP32[$4 + 28 >> 2]) {
      break label$11
     }
     $14 = $3 ? $3 << 1 : 1;
     if (($14 | 0) <= ($3 | 0)) {
      break label$11
     }
     label$12 : {
      if (!$14) {
       $10 = 0;
       break label$12;
      }
      $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 5);
      $3 = HEAP32[$4 + 24 >> 2];
     }
     label$14 : {
      if (($3 | 0) <= 0) {
       break label$14
      }
      $6 = 0;
      if (($3 | 0) != 1) {
       $20 = $3 & -2;
       $7 = 0;
       while (1) {
        $5 = HEAP32[$4 + 32 >> 2] + $7 | 0;
        $8 = HEAP32[$5 + 4 >> 2];
        $9 = $7 + $10 | 0;
        HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$9 + 4 >> 2] = $8;
        $8 = $5 + 24 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 24 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $8 = $5 + 16 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 16 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $5 = $5 + 8 | 0;
        $8 = HEAP32[$5 + 4 >> 2];
        $12 = $9 + 8 | 0;
        HEAP32[$12 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$12 + 4 >> 2] = $8;
        $5 = HEAP32[$4 + 32 >> 2] + $7 | 0;
        $8 = $5 + 40 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 40 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $8 = $5 + 48 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 48 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $8 = $5 + 56 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 56 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $5 = $5 + 32 | 0;
        $8 = HEAP32[$5 + 4 >> 2];
        $9 = $9 + 32 | 0;
        HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$9 + 4 >> 2] = $8;
        $7 = $7 - -64 | 0;
        $6 = $6 + 2 | 0;
        if (($20 | 0) != ($6 | 0)) {
         continue
        }
        break;
       };
      }
      if (!($3 & 1)) {
       break label$14
      }
      $6 = $6 << 5;
      $3 = $6 + $10 | 0;
      $6 = $6 + HEAP32[$4 + 32 >> 2] | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
      $7 = $6 + 24 | 0;
      $9 = HEAP32[$7 + 4 >> 2];
      $5 = $3 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $9;
      $7 = $6 + 16 | 0;
      $9 = HEAP32[$7 + 4 >> 2];
      $5 = $3 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $9;
      $6 = $6 + 8 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $3 = $3 + 8 | 0;
      HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
     }
     $3 = HEAP32[$4 + 32 >> 2];
     if (!(!$3 | !HEAPU8[$4 + 36 | 0])) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$4 + 32 >> 2] = $10;
     HEAP8[$4 + 36 | 0] = 1;
     HEAP32[$4 + 28 >> 2] = $14;
     $3 = HEAP32[$4 + 24 >> 2];
    }
    $3 = HEAP32[$4 + 32 >> 2] + ($3 << 5) | 0;
    HEAPF64[$3 + 24 >> 3] = $15;
    HEAPF64[$3 + 16 >> 3] = $16;
    HEAPF64[$3 + 8 >> 3] = $17;
    HEAPF64[$3 >> 3] = $13;
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
    $3 = HEAP32[$4 + 44 >> 2];
    label$18 : {
     if (($3 | 0) != HEAP32[$4 + 48 >> 2]) {
      break label$18
     }
     $14 = $3 ? $3 << 1 : 1;
     if (($14 | 0) <= ($3 | 0)) {
      break label$18
     }
     label$19 : {
      if (!$14) {
       $10 = 0;
       break label$19;
      }
      $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 5);
      $3 = HEAP32[$4 + 44 >> 2];
     }
     label$21 : {
      if (($3 | 0) <= 0) {
       break label$21
      }
      $6 = 0;
      if (($3 | 0) != 1) {
       $20 = $3 & -2;
       $7 = 0;
       while (1) {
        $5 = HEAP32[$4 + 52 >> 2] + $7 | 0;
        $8 = HEAP32[$5 + 4 >> 2];
        $9 = $7 + $10 | 0;
        HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$9 + 4 >> 2] = $8;
        $8 = $5 + 24 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 24 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $8 = $5 + 16 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 16 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $5 = $5 + 8 | 0;
        $8 = HEAP32[$5 + 4 >> 2];
        $12 = $9 + 8 | 0;
        HEAP32[$12 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$12 + 4 >> 2] = $8;
        $5 = HEAP32[$4 + 52 >> 2] + $7 | 0;
        $8 = $5 + 40 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 40 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $8 = $5 + 48 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 48 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $8 = $5 + 56 | 0;
        $12 = HEAP32[$8 + 4 >> 2];
        $11 = $9 + 56 | 0;
        HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$11 + 4 >> 2] = $12;
        $5 = $5 + 32 | 0;
        $8 = HEAP32[$5 + 4 >> 2];
        $9 = $9 + 32 | 0;
        HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$9 + 4 >> 2] = $8;
        $7 = $7 - -64 | 0;
        $6 = $6 + 2 | 0;
        if (($20 | 0) != ($6 | 0)) {
         continue
        }
        break;
       };
      }
      if (!($3 & 1)) {
       break label$21
      }
      $6 = $6 << 5;
      $3 = $6 + $10 | 0;
      $6 = $6 + HEAP32[$4 + 52 >> 2] | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
      $7 = $6 + 24 | 0;
      $9 = HEAP32[$7 + 4 >> 2];
      $5 = $3 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $9;
      $7 = $6 + 16 | 0;
      $9 = HEAP32[$7 + 4 >> 2];
      $5 = $3 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $9;
      $6 = $6 + 8 | 0;
      $7 = HEAP32[$6 + 4 >> 2];
      $3 = $3 + 8 | 0;
      HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
     }
     $3 = HEAP32[$4 + 52 >> 2];
     if (!(!$3 | !HEAPU8[$4 + 56 | 0])) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$4 + 52 >> 2] = $10;
     HEAP8[$4 + 56 | 0] = 1;
     HEAP32[$4 + 48 >> 2] = $14;
     $3 = HEAP32[$4 + 44 >> 2];
    }
    $10 = HEAP32[$1 + 44 >> 2];
    $3 = HEAP32[$4 + 52 >> 2] + ($3 << 5) | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 + 40 >> 2];
    HEAP32[$3 + 4 >> 2] = $10;
    $10 = $1 - -64 | 0;
    $6 = HEAP32[$10 + 4 >> 2];
    $7 = $3 + 24 | 0;
    HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $10 = $1 + 56 | 0;
    $6 = HEAP32[$10 + 4 >> 2];
    $7 = $3 + 16 | 0;
    HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $10 = $1 + 48 | 0;
    $6 = HEAP32[$10 + 4 >> 2];
    $3 = $3 + 8 | 0;
    HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
    $4 = HEAP32[$1 >> 2];
   }
   if (HEAPU8[$4 + 392 | 0] & 4) {
    break label$1
   }
   label$3 : {
    if ($2) {
     $16 = HEAPF64[$1 + 24 >> 3];
     $17 = HEAPF64[$1 + 16 >> 3];
     $13 = HEAPF64[$1 + 8 >> 3];
     break label$3;
    }
    $13 = HEAPF64[$1 + 24 >> 3];
    $15 = HEAPF64[$1 + 8 >> 3];
    $18 = HEAPF64[$1 + 16 >> 3];
    $16 = HEAPF64[$4 + 88 >> 3] * $13 + (HEAPF64[$4 + 72 >> 3] * $15 + $18 * HEAPF64[$4 + 80 >> 3]);
    $17 = HEAPF64[$4 + 56 >> 3] * $13 + (HEAPF64[$4 + 40 >> 3] * $15 + $18 * HEAPF64[$4 + 48 >> 3]);
    $13 = HEAPF64[$4 + 24 >> 3] * $13 + (HEAPF64[$4 + 8 >> 3] * $15 + HEAPF64[$4 + 16 >> 3] * $18);
   }
   if (HEAPF64[$0 + 192 >> 3] > HEAPF64[$0 + 176 >> 3] * $16 + (HEAPF64[$0 + 160 >> 3] * $13 + $17 * HEAPF64[$0 + 168 >> 3])) {
    break label$1
   }
   HEAP32[$0 + 152 >> 2] = $4;
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$1 + 72 >> 3];
   label$5 : {
    if ($2) {
     $2 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 + 88 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$0 + 92 >> 2] = $2;
     $2 = $1 + 32 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $0 + 112 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     $2 = $1 + 24 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $0 + 104 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     $2 = $1 + 16 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $0 + 96 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     break label$5;
    }
    $13 = HEAPF64[$4 + 16 >> 3];
    $15 = HEAPF64[$4 + 24 >> 3];
    $18 = HEAPF64[$4 + 40 >> 3];
    $21 = HEAPF64[$4 + 48 >> 3];
    $22 = HEAPF64[$4 + 56 >> 3];
    $23 = HEAPF64[$4 + 72 >> 3];
    $24 = HEAPF64[$4 + 80 >> 3];
    $19 = HEAPF64[$1 + 16 >> 3];
    $25 = HEAPF64[$4 + 88 >> 3];
    $16 = HEAPF64[$1 + 24 >> 3];
    $26 = HEAPF64[$4 + 8 >> 3];
    $17 = HEAPF64[$1 + 8 >> 3];
    $2 = $0 + 112 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAPF64[$0 + 104 >> 3] = $25 * $16 + ($23 * $17 + $19 * $24);
    HEAPF64[$0 + 96 >> 3] = $22 * $16 + ($18 * $17 + $19 * $21);
    HEAPF64[$0 + 88 >> 3] = $15 * $16 + ($26 * $17 + $13 * $19);
   }
   $2 = HEAP32[$1 + 44 >> 2];
   HEAP32[$0 + 120 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$0 + 124 >> 2] = $2;
   $2 = $1 - -64 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 144 | 0;
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $1 + 56 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 136 | 0;
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $1 + 48 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $0 = $0 + 128 | 0;
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 4 >> 2] = $4;
   $19 = HEAPF64[$1 + 72 >> 3];
  }
  return +$19;
 }
 
 function btGeneric6DofSpring2Constraint__btGeneric6DofSpring2Constraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20RotateOrder_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = -1610612736;
  HEAP32[$0 + 52 >> 2] = 1068079513;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = $2;
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 + 28 >> 2] = -1;
  HEAP16[$0 + 24 >> 1] = 1;
  HEAP32[$0 + 16 >> 2] = -1;
  HEAP32[$0 + 20 >> 2] = 2146435071;
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 >> 2] = 28240;
  HEAP32[$0 + 4 >> 2] = 12;
  HEAP32[$0 >> 2] = 29264;
  $1 = $3 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 88 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 16 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 80 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 72 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 68 >> 2] = $1;
  $1 = $3 + 56 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 120 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 48 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 112 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 40 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 104 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 36 >> 2];
  $2 = $0 + 96 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = HEAP32[$3 + 68 >> 2];
  $2 = $0 + 128 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 64 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $3 + 72 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 136 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 80 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 144 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 88 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 152 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 100 >> 2];
  $2 = $0 + 160 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 + 96 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $3 + 104 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 168 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 112 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 176 | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $2;
  $1 = $3 + 120 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 184 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 192 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$0 + 196 >> 2] = $1;
  $1 = $4 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 200 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 16 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 208 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 216 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 36 >> 2];
  $2 = $0 + 224 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $4 + 40 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 232 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 48 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 240 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 56 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 248 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 68 >> 2];
  $2 = $0 + 256 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 + 64 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $4 + 72 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 264 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 88 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 280 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 80 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 272 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$4 + 100 >> 2];
  $2 = $0 + 288 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 + 96 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = $4 + 104 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 296 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 120 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 312 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $4 + 112 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 304 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  memset($0 + 1328 | 0, 0, 96);
  $1 = $0 + 1448 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1440 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $0 + 1432 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $0 + 1424 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $0 + 1456 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1464 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1472 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1480 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1568 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1504 | 0;
  HEAP32[$1 >> 2] = -1073741824;
  HEAP32[$1 + 4 >> 2] = 1072483532;
  $1 = $0 + 1496 | 0;
  HEAP32[$1 >> 2] = -1073741824;
  HEAP32[$1 + 4 >> 2] = 1072483532;
  $1 = $0 + 1488 | 0;
  HEAP32[$1 >> 2] = -1073741824;
  HEAP32[$1 + 4 >> 2] = 1072483532;
  $1 = $0 + 1576 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1584 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1600 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1608 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1616 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP16[$0 + 1632 >> 1] = 0;
  HEAP8[$0 + 1634 | 0] = 0;
  $1 = $0 + 1656 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1648 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1640 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 1674 | 0] = 0;
  HEAP16[$0 + 1672 >> 1] = 0;
  $1 = $0 + 1680 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1688 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1696 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1712 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1720 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1728 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1744 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1752 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1760 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1552 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1544 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1536 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1528 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1520 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1512 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 1560 | 0] = 0;
  memset($0 + 1776 | 0, 0, 108);
  $1 = $0 + 2024 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2016 | 0] = 0;
  $1 = $0 + 2008 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2e3 | 0] = 0;
  $1 = $0 + 1992 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 1984 | 0] = 0;
  $1 = $0 + 1976 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 1968 | 0] = 0;
  $1 = $0 + 1960 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1069128089;
  $1 = $0 + 1952 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 1944 | 0] = 0;
  $1 = $0 + 1936 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1928 | 0;
  HEAP32[$1 >> 2] = -1073741824;
  HEAP32[$1 + 4 >> 2] = 1072483532;
  $1 = $0 + 1920 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1912 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $0 + 1904 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 1896 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1074790400;
  HEAP32[$0 + 1888 >> 2] = 0;
  HEAP32[$0 + 1892 >> 2] = 1072693248;
  $1 = $0 + 2032 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2040 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2048 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 2056 >> 2] = 0;
  HEAP8[$0 + 2192 | 0] = 0;
  $1 = $0 + 2184 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2176 | 0] = 0;
  $1 = $0 + 2168 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2160 | 0] = 0;
  $1 = $0 + 2152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2144 | 0] = 0;
  $1 = $0 + 2136 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1069128089;
  $1 = $0 + 2128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2120 | 0] = 0;
  $1 = $0 + 2112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2104 | 0;
  HEAP32[$1 >> 2] = -1073741824;
  HEAP32[$1 + 4 >> 2] = 1072483532;
  $1 = $0 + 2096 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2088 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $0 + 2080 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2072 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1074790400;
  $1 = $0 + 2064 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  HEAP32[$0 + 2232 >> 2] = 0;
  $1 = $0 + 2224 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2216 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2208 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2200 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2368 | 0] = 0;
  $1 = $0 + 2360 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2352 | 0] = 0;
  $1 = $0 + 2344 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2336 | 0] = 0;
  $1 = $0 + 2328 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2320 | 0] = 0;
  $1 = $0 + 2312 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1069128089;
  $1 = $0 + 2304 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 2296 | 0] = 0;
  $1 = $0 + 2288 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2280 | 0;
  HEAP32[$1 >> 2] = -1073741824;
  HEAP32[$1 + 4 >> 2] = 1072483532;
  $1 = $0 + 2272 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2264 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $0 + 2256 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2248 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1074790400;
  $1 = $0 + 2240 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  HEAP32[$0 + 2408 >> 2] = 0;
  $1 = $0 + 2400 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2392 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2384 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2376 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 2416 >> 2] = $5;
  HEAP32[$0 + 2860 >> 2] = 0;
  btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[$0 + 32 >> 2] + 8 | 0, HEAP32[$0 + 36 >> 2] + 8 | 0);
  return $0;
 }
 
 function btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $6 = HEAPF64[$1 + 104 >> 3];
  $4 = HEAPF64[$1 + 112 >> 3];
  $12 = HEAPF64[$0 + 160 >> 3];
  $13 = HEAPF64[$0 + 168 >> 3];
  $11 = HEAPF64[$0 + 176 >> 3];
  $19 = HEAPF64[$1 + 40 >> 3];
  $22 = HEAPF64[$1 + 48 >> 3];
  $14 = HEAPF64[$0 + 96 >> 3];
  $15 = HEAPF64[$0 + 128 >> 3];
  $16 = HEAPF64[$0 + 72 >> 3];
  $17 = HEAPF64[$0 + 104 >> 3];
  $10 = HEAPF64[$0 + 136 >> 3];
  $5 = HEAPF64[$0 + 80 >> 3];
  $23 = HEAPF64[$1 + 72 >> 3];
  $8 = HEAPF64[$0 + 112 >> 3];
  $24 = HEAPF64[$1 + 80 >> 3];
  $9 = HEAPF64[$0 + 144 >> 3];
  $3 = HEAPF64[$1 + 96 >> 3];
  $25 = HEAPF64[$1 + 16 >> 3];
  $21 = HEAPF64[$1 >> 3];
  $20 = HEAPF64[$1 + 8 >> 3];
  $26 = HEAPF64[$1 + 32 >> 3];
  $7 = HEAPF64[$0 + 64 >> 3];
  $18 = HEAPF64[$1 + 64 >> 3];
  $1 = $0 + 2544 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2512 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2480 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2448 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $28 = $0 + 2504 | 0;
  HEAPF64[$28 >> 3] = $9 * $24 + ($5 * $18 + $8 * $23);
  $31 = $0 + 2496 | 0;
  HEAPF64[$31 >> 3] = $10 * $24 + ($16 * $18 + $17 * $23);
  $32 = $0 + 2488 | 0;
  HEAPF64[$32 >> 3] = $15 * $24 + ($7 * $18 + $14 * $23);
  $33 = $0 + 2472 | 0;
  HEAPF64[$33 >> 3] = $9 * $22 + ($5 * $26 + $8 * $19);
  $34 = $0 + 2464 | 0;
  HEAPF64[$34 >> 3] = $10 * $22 + ($16 * $26 + $17 * $19);
  $35 = $0 + 2456 | 0;
  HEAPF64[$35 >> 3] = $15 * $22 + ($7 * $26 + $14 * $19);
  $36 = $0 + 2440 | 0;
  HEAPF64[$36 >> 3] = $9 * $25 + ($5 * $21 + $20 * $8);
  $37 = $0 + 2432 | 0;
  HEAPF64[$37 >> 3] = $10 * $25 + ($16 * $21 + $20 * $17);
  HEAPF64[$0 + 2424 >> 3] = $15 * $25 + ($7 * $21 + $14 * $20);
  $38 = $0 + 2536 | 0;
  HEAPF64[$38 >> 3] = $4 + ($11 * $24 + ($12 * $18 + $23 * $13));
  $39 = $0 + 2528 | 0;
  HEAPF64[$39 >> 3] = $6 + ($11 * $22 + ($12 * $26 + $19 * $13));
  $40 = $0 + 2520 | 0;
  HEAPF64[$40 >> 3] = $3 + ($11 * $25 + ($12 * $21 + $20 * $13));
  $6 = HEAPF64[$2 + 104 >> 3];
  $4 = HEAPF64[$2 + 112 >> 3];
  $12 = HEAPF64[$0 + 288 >> 3];
  $13 = HEAPF64[$0 + 296 >> 3];
  $11 = HEAPF64[$0 + 304 >> 3];
  $19 = HEAPF64[$2 + 40 >> 3];
  $22 = HEAPF64[$2 + 48 >> 3];
  $14 = HEAPF64[$0 + 224 >> 3];
  $15 = HEAPF64[$0 + 256 >> 3];
  $16 = HEAPF64[$0 + 200 >> 3];
  $17 = HEAPF64[$0 + 232 >> 3];
  $10 = HEAPF64[$0 + 264 >> 3];
  $5 = HEAPF64[$0 + 208 >> 3];
  $8 = HEAPF64[$0 + 240 >> 3];
  $23 = HEAPF64[$2 + 72 >> 3];
  $9 = HEAPF64[$0 + 272 >> 3];
  $24 = HEAPF64[$2 + 80 >> 3];
  $3 = HEAPF64[$2 + 96 >> 3];
  $25 = HEAPF64[$2 + 16 >> 3];
  $21 = HEAPF64[$2 >> 3];
  $20 = HEAPF64[$2 + 8 >> 3];
  $26 = HEAPF64[$2 + 32 >> 3];
  $7 = HEAPF64[$0 + 192 >> 3];
  $18 = HEAPF64[$2 + 64 >> 3];
  $1 = $0 + 2672 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2640 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2608 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 2576 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF64[$0 + 2632 >> 3] = $9 * $24 + ($5 * $18 + $8 * $23);
  HEAPF64[$0 + 2624 >> 3] = $10 * $24 + ($16 * $18 + $17 * $23);
  HEAPF64[$0 + 2616 >> 3] = $15 * $24 + ($7 * $18 + $14 * $23);
  HEAPF64[$0 + 2600 >> 3] = $9 * $22 + ($5 * $26 + $8 * $19);
  HEAPF64[$0 + 2592 >> 3] = $10 * $22 + ($16 * $26 + $17 * $19);
  HEAPF64[$0 + 2584 >> 3] = $15 * $22 + ($7 * $26 + $14 * $19);
  HEAPF64[$0 + 2568 >> 3] = $9 * $25 + ($5 * $21 + $20 * $8);
  HEAPF64[$0 + 2560 >> 3] = $10 * $25 + ($16 * $21 + $20 * $17);
  HEAPF64[$0 + 2552 >> 3] = $15 * $25 + ($7 * $21 + $14 * $20);
  $41 = $0 + 2664 | 0;
  HEAPF64[$41 >> 3] = $4 + ($11 * $24 + ($12 * $18 + $23 * $13));
  $42 = $0 + 2656 | 0;
  HEAPF64[$42 >> 3] = $6 + ($11 * $22 + ($12 * $26 + $19 * $13));
  $2 = $0 + 2648 | 0;
  HEAPF64[$2 >> 3] = $3 + ($11 * $25 + ($12 * $21 + $20 * $13));
  $1 = $0 + 2832 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $12 = HEAPF64[$36 >> 3];
  $14 = HEAPF64[$35 >> 3];
  $15 = HEAPF64[$31 >> 3];
  $8 = HEAPF64[$32 >> 3];
  $16 = HEAPF64[$34 >> 3];
  $6 = $14 * $15 - $8 * $16;
  $13 = HEAPF64[$0 + 2424 >> 3];
  $17 = HEAPF64[$28 >> 3];
  $10 = HEAPF64[$33 >> 3];
  $4 = $16 * $17 - $15 * $10;
  $11 = HEAPF64[$37 >> 3];
  $3 = $10 * $8 - $17 * $14;
  $18 = 1.0 / ($12 * $6 + ($13 * $4 + $11 * $3));
  $9 = HEAPF64[$41 >> 3] - HEAPF64[$38 >> 3];
  $7 = HEAPF64[$2 >> 3] - HEAPF64[$40 >> 3];
  $5 = $6 * $18 * $7;
  $6 = HEAPF64[$42 >> 3] - HEAPF64[$39 >> 3];
  $5 = ($13 * $16 - $14 * $11) * $18 * $9 + ($5 + $6 * (($11 * $8 - $15 * $13) * $18));
  HEAPF64[$0 + 2824 >> 3] = $5;
  $8 = ($12 * $14 - $10 * $13) * $18 * $9 + ($3 * $18 * $7 + $6 * (($13 * $17 - $8 * $12) * $18));
  HEAPF64[$0 + 2816 >> 3] = $8;
  $6 = ($11 * $10 - $16 * $12) * $18 * $9 + ($4 * $18 * $7 + $6 * (($12 * $15 - $17 * $11) * $18));
  HEAPF64[$0 + 2808 >> 3] = $6;
  HEAPF64[$0 + 1840 >> 3] = $6;
  $4 = HEAPF64[$0 + 1328 >> 3];
  $3 = HEAPF64[$0 + 1360 >> 3];
  label$1 : {
   if ($4 > $3) {
    $1 = $0 + 1776 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = 0;
    break label$1;
   }
   HEAPF64[$0 + 1776 >> 3] = $6 - $4;
   $1 = 3;
   if ($3 == $4) {
    break label$1
   }
   HEAPF64[$0 + 1808 >> 3] = $6 - $3;
   $1 = 4;
  }
  HEAPF64[$0 + 1848 >> 3] = $8;
  HEAP32[$0 + 1872 >> 2] = $1;
  $4 = HEAPF64[$0 + 1336 >> 3];
  $3 = HEAPF64[$0 + 1368 >> 3];
  label$3 : {
   if (!($4 > $3)) {
    HEAPF64[$0 + 1784 >> 3] = $8 - $4;
    $1 = 3;
    if ($3 == $4) {
     break label$3
    }
    HEAPF64[$0 + 1816 >> 3] = $8 - $3;
    $1 = 4;
    break label$3;
   }
   $1 = $0 + 1784 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $1 = 0;
  }
  HEAPF64[$0 + 1856 >> 3] = $5;
  HEAP32[$0 + 1876 >> 2] = $1;
  $2 = $0 + 1880 | 0;
  $4 = HEAPF64[$0 + 1344 >> 3];
  $3 = HEAPF64[$0 + 1376 >> 3];
  label$5 : {
   if (!($4 > $3)) {
    HEAPF64[$0 + 1792 >> 3] = $5 - $4;
    $1 = 3;
    if ($3 == $4) {
     break label$5
    }
    HEAPF64[$0 + 1824 >> 3] = $5 - $3;
    $1 = 4;
    break label$5;
   }
   $1 = $0 + 1792 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $1 = 0;
  }
  HEAP32[$2 >> 2] = $1;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  $26 = HEAPF64[$0 + 2616 >> 3];
  $18 = HEAPF64[$0 + 2584 >> 3];
  $12 = HEAPF64[$0 + 2624 >> 3];
  $13 = HEAPF64[$0 + 2560 >> 3];
  $11 = HEAPF64[$0 + 2592 >> 3];
  $14 = HEAPF64[$0 + 2632 >> 3];
  $15 = HEAPF64[$0 + 2568 >> 3];
  $16 = HEAPF64[$0 + 2600 >> 3];
  $29 = HEAPF64[$0 + 2440 >> 3];
  $22 = HEAPF64[$0 + 2464 >> 3];
  $23 = HEAPF64[$0 + 2496 >> 3];
  $30 = HEAPF64[$0 + 2432 >> 3];
  $20 = HEAPF64[$0 + 2488 >> 3];
  $24 = HEAPF64[$0 + 2472 >> 3];
  $7 = HEAPF64[$0 + 2456 >> 3];
  $25 = HEAPF64[$0 + 2504 >> 3];
  $17 = HEAPF64[$0 + 2552 >> 3];
  $19 = HEAPF64[$0 + 2424 >> 3];
  $1 = $2 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $2 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $6 = $7 * $23 - $20 * $22;
  $4 = $22 * $25 - $23 * $24;
  $3 = $24 * $20 - $25 * $7;
  $27 = 1.0 / ($29 * $6 + ($19 * $4 + $30 * $3));
  $10 = ($19 * $22 - $7 * $30) * $27;
  $5 = $6 * $27;
  $9 = ($30 * $20 - $23 * $19) * $27;
  $21 = $14 * $10 + ($15 * $5 + $16 * $9);
  HEAPF64[$2 + 80 >> 3] = $21;
  $8 = $12 * $10 + ($13 * $5 + $9 * $11);
  HEAPF64[$2 + 72 >> 3] = $8;
  $7 = ($29 * $7 - $24 * $19) * $27;
  $6 = $3 * $27;
  $3 = ($19 * $25 - $20 * $29) * $27;
  $19 = $14 * $7 + ($15 * $6 + $16 * $3);
  HEAPF64[$2 + 48 >> 3] = $19;
  $20 = $12 * $7 + ($13 * $6 + $3 * $11);
  HEAPF64[$2 + 40 >> 3] = $20;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $10 = $26 * $10 + ($17 * $5 + $18 * $9);
  HEAPF64[$2 + 64 >> 3] = $10;
  $9 = $26 * $7 + ($17 * $6 + $18 * $3);
  HEAPF64[$2 + 32 >> 3] = $9;
  $7 = ($30 * $24 - $22 * $29) * $27;
  $6 = $4 * $27;
  $4 = ($29 * $23 - $25 * $30) * $27;
  $3 = $14 * $7 + ($15 * $6 + $16 * $4);
  HEAPF64[$2 + 16 >> 3] = $3;
  $5 = $12 * $7 + ($13 * $6 + $4 * $11);
  HEAPF64[$2 + 8 >> 3] = $5;
  $4 = $26 * $7 + ($17 * $6 + $18 * $4);
  HEAPF64[$2 >> 3] = $4;
  label$10 : {
   label$2 : {
    label$31 : {
     label$4 : {
      label$52 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $1 = HEAP32[$0 + 2416 >> 2];
          switch ($1 | 0) {
          case 5:
           break label$31;
          case 4:
           break label$4;
          case 3:
           break label$52;
          case 2:
           break label$6;
          case 1:
           break label$7;
          case 0:
           break label$8;
          default:
           break label$10;
          };
         }
         $28 = $0 + 2696 | 0;
         label$9 : {
          label$103 : {
           if ($10 < 1.0) {
            if ($10 > -1.0) {
             (wasm2js_i32$0 = $0, wasm2js_f64$0 = atan2(-$8, $21)), HEAPF64[wasm2js_i32$0 + 2680 >> 3] = wasm2js_f64$0;
             (wasm2js_i32$0 = $0 + 2688 | 0, wasm2js_f64$0 = asin(Math_min(Math_max($10, -1.0), 1.0))), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
             $5 = atan2(-$9, $4);
             break label$9;
            }
            $1 = $0 + 2688 | 0;
            HEAP32[$1 >> 2] = 1413754136;
            HEAP32[$1 + 4 >> 2] = -1074191877;
            (wasm2js_i32$0 = $0, wasm2js_f64$0 = -atan2($5, $20)), HEAPF64[wasm2js_i32$0 + 2680 >> 3] = wasm2js_f64$0;
            break label$103;
           }
           $1 = $0 + 2688 | 0;
           HEAP32[$1 >> 2] = 1413754136;
           HEAP32[$1 + 4 >> 2] = 1073291771;
           (wasm2js_i32$0 = $0, wasm2js_f64$0 = atan2($5, $20)), HEAPF64[wasm2js_i32$0 + 2680 >> 3] = wasm2js_f64$0;
          }
          $5 = 0.0;
         }
         HEAPF64[$28 >> 3] = $5;
         break label$2;
        }
        $1 = $0 + 2680 | 0;
        $3 = HEAPF64[$2 + 32 >> 3];
        __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerXZY_28btMatrix3x3_20const__2c_20btVector3__29 : {
         if ($3 < 1.0) {
          if ($3 > -1.0) {
           (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(HEAPF64[$2 + 48 >> 3], HEAPF64[$2 + 40 >> 3])), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
           (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(HEAPF64[$2 + 64 >> 3], HEAPF64[$2 >> 3])), HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
           (wasm2js_i32$0 = $1, wasm2js_f64$0 = asin(Math_min(Math_max(-HEAPF64[$2 + 32 >> 3], -1.0), 1.0))), HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
           break __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerXZY_28btMatrix3x3_20const__2c_20btVector3__29;
          }
          $4 = HEAPF64[$2 + 80 >> 3];
          $3 = HEAPF64[$2 + 16 >> 3];
          HEAP32[$1 + 8 >> 2] = 0;
          HEAP32[$1 + 12 >> 2] = 0;
          (wasm2js_i32$0 = $1, wasm2js_f64$0 = -atan2(-$3, $4)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
          HEAPF64[$1 + 16 >> 3] = 1.5707963267948966;
          break __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerXZY_28btMatrix3x3_20const__2c_20btVector3__29;
         }
         $4 = HEAPF64[$2 + 80 >> 3];
         $3 = HEAPF64[$2 + 16 >> 3];
         HEAP32[$1 + 8 >> 2] = 0;
         HEAP32[$1 + 12 >> 2] = 0;
         (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(-$3, $4)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
         HEAPF64[$1 + 16 >> 3] = -1.5707963267948966;
        }
        break label$2;
       }
       $1 = $0 + 2680 | 0;
       $3 = HEAPF64[$2 + 72 >> 3];
       __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerYXZ_28btMatrix3x3_20const__2c_20btVector3__29 : {
        label$11 : {
         if ($3 < 1.0) {
          if ($3 > -1.0) {
           (wasm2js_i32$0 = $1, wasm2js_f64$0 = asin(Math_min(Math_max(-$3, -1.0), 1.0))), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
           (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(HEAPF64[$2 + 64 >> 3], HEAPF64[$2 + 80 >> 3])), HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
           (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(HEAPF64[$2 + 8 >> 3], HEAPF64[$2 + 40 >> 3])), HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
           break __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerYXZ_28btMatrix3x3_20const__2c_20btVector3__29;
          }
          HEAP32[$1 >> 2] = 1413754136;
          HEAP32[$1 + 4 >> 2] = 1073291771;
          (wasm2js_i32$0 = $1, wasm2js_f64$0 = -atan2(-HEAPF64[$2 + 32 >> 3], HEAPF64[$2 >> 3])), HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
          break label$11;
         }
         HEAP32[$1 >> 2] = 1413754136;
         HEAP32[$1 + 4 >> 2] = -1074191877;
         (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(-HEAPF64[$2 + 32 >> 3], HEAPF64[$2 >> 3])), HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
        }
        HEAPF64[$1 + 16 >> 3] = 0;
       }
       break label$2;
      }
      $1 = $0 + 2696 | 0;
      label$13 : {
       if ($5 < 1.0) {
        if ($5 > -1.0) {
         (wasm2js_i32$0 = $0, wasm2js_f64$0 = atan2(-$8, $20)), HEAPF64[wasm2js_i32$0 + 2680 >> 3] = wasm2js_f64$0;
         (wasm2js_i32$0 = $0 + 2688 | 0, wasm2js_f64$0 = atan2(-$3, $4)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
         $5 = asin(Math_min(Math_max($5, -1.0), 1.0));
         break label$13;
        }
        HEAP32[$0 + 2680 >> 2] = 0;
        HEAP32[$0 + 2684 >> 2] = 0;
        (wasm2js_i32$0 = $0 + 2688 | 0, wasm2js_f64$0 = -atan2($19, $21)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
        $5 = -1.5707963267948966;
        break label$13;
       }
       HEAP32[$0 + 2680 >> 2] = 0;
       HEAP32[$0 + 2684 >> 2] = 0;
       (wasm2js_i32$0 = $0 + 2688 | 0, wasm2js_f64$0 = atan2($19, $21)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
       $5 = 1.5707963267948966;
      }
      HEAPF64[$1 >> 3] = $5;
      break label$2;
     }
     $28 = $0 + 2696 | 0;
     label$16 : {
      if ($19 < 1.0) {
       if ($19 > -1.0) {
        (wasm2js_i32$0 = $0, wasm2js_f64$0 = asin(Math_min(Math_max($19, -1.0), 1.0))), HEAPF64[wasm2js_i32$0 + 2680 >> 3] = wasm2js_f64$0;
        (wasm2js_i32$0 = $0 + 2688 | 0, wasm2js_f64$0 = atan2(-$3, $21)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
        $5 = atan2(-$9, $20);
        break label$16;
       }
       HEAP32[$0 + 2680 >> 2] = 1413754136;
       HEAP32[$0 + 2684 >> 2] = -1074191877;
       $1 = $0 + 2688 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       $5 = -atan2($10, $4);
       break label$16;
      }
      HEAP32[$0 + 2680 >> 2] = 1413754136;
      HEAP32[$0 + 2684 >> 2] = 1073291771;
      $1 = $0 + 2688 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $5 = atan2($10, $4);
     }
     HEAPF64[$28 >> 3] = $5;
     break label$2;
    }
    $1 = $0 + 2680 | 0;
    $3 = HEAPF64[$2 + 16 >> 3];
    __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerZYX_28btMatrix3x3_20const__2c_20btVector3__29 : {
     if ($3 < 1.0) {
      if ($3 > -1.0) {
       (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(HEAPF64[$2 + 48 >> 3], HEAPF64[$2 + 80 >> 3])), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
       (wasm2js_i32$0 = $1, wasm2js_f64$0 = asin(Math_min(Math_max(-HEAPF64[$2 + 16 >> 3], -1.0), 1.0))), HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
       (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(HEAPF64[$2 + 8 >> 3], HEAPF64[$2 >> 3])), HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
       break __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerZYX_28btMatrix3x3_20const__2c_20btVector3__29;
      }
      HEAP32[$1 + 8 >> 2] = 1413754136;
      HEAP32[$1 + 12 >> 2] = 1073291771;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      (wasm2js_i32$0 = $1, wasm2js_f64$0 = -atan2(HEAPF64[$2 + 32 >> 3], HEAPF64[$2 + 64 >> 3])), HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
      break __inlined_func$btGeneric6DofSpring2Constraint__matrixToEulerZYX_28btMatrix3x3_20const__2c_20btVector3__29;
     }
     HEAP32[$1 + 8 >> 2] = 1413754136;
     HEAP32[$1 + 12 >> 2] = -1074191877;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     (wasm2js_i32$0 = $1, wasm2js_f64$0 = atan2(-HEAPF64[$2 + 32 >> 3], -HEAPF64[$2 + 64 >> 3])), HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
    }
   }
   $1 = HEAP32[$0 + 2416 >> 2];
  }
  label$19 : {
   label$20 : {
    label$21 : {
     switch ($1 | 0) {
     default:
      $16 = HEAPF64[$0 + 2792 >> 3];
      $12 = HEAPF64[$0 + 2784 >> 3];
      $13 = HEAPF64[$0 + 2776 >> 3];
      $17 = HEAPF64[$0 + 2760 >> 3];
      $11 = HEAPF64[$0 + 2752 >> 3];
      $10 = HEAPF64[$0 + 2744 >> 3];
      $14 = HEAPF64[$0 + 2728 >> 3];
      $15 = HEAPF64[$0 + 2720 >> 3];
      $5 = HEAPF64[$0 + 2712 >> 3];
      break label$19;
     case 0:
      $1 = $0 + 2768 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2800 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2736 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $8 = HEAPF64[$0 + 2552 >> 3];
      $9 = HEAPF64[$0 + 2504 >> 3];
      $7 = HEAPF64[$0 + 2616 >> 3];
      $6 = HEAPF64[$0 + 2440 >> 3];
      $11 = $8 * $9 - $7 * $6;
      $4 = HEAPF64[$0 + 2472 >> 3];
      $3 = HEAPF64[$0 + 2584 >> 3];
      $10 = $4 * $7 - $3 * $9;
      $16 = $8 * $11 - $10 * $3;
      $17 = $6 * $3 - $8 * $4;
      $12 = $7 * $10 - $17 * $8;
      $13 = $3 * $17 - $11 * $7;
      $14 = $10 * $4 - $6 * $11;
      $15 = $17 * $6 - $9 * $10;
      $5 = $11 * $9 - $4 * $17;
      break label$19;
     case 1:
      $1 = $0 + 2800 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2768 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2736 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $8 = HEAPF64[$0 + 2584 >> 3];
      $9 = HEAPF64[$0 + 2496 >> 3];
      $7 = HEAPF64[$0 + 2464 >> 3];
      $6 = HEAPF64[$0 + 2616 >> 3];
      $13 = $8 * $9 - $7 * $6;
      $4 = HEAPF64[$0 + 2432 >> 3];
      $3 = HEAPF64[$0 + 2552 >> 3];
      $12 = $6 * $4 - $9 * $3;
      $17 = $13 * $8 - $3 * $12;
      $16 = $3 * $7 - $4 * $8;
      $11 = $16 * $3 - $6 * $13;
      $10 = $12 * $6 - $8 * $16;
      $14 = $4 * $12 - $13 * $7;
      $15 = $9 * $13 - $16 * $4;
      $5 = $7 * $16 - $12 * $9;
      break label$19;
     case 2:
      $1 = $0 + 2800 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2768 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2736 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $8 = HEAPF64[$0 + 2560 >> 3];
      $9 = HEAPF64[$0 + 2472 >> 3];
      $7 = HEAPF64[$0 + 2440 >> 3];
      $6 = HEAPF64[$0 + 2592 >> 3];
      $14 = $8 * $9 - $7 * $6;
      HEAPF64[$0 + 2728 >> 3] = $14;
      $4 = HEAPF64[$0 + 2624 >> 3];
      $3 = HEAPF64[$0 + 2504 >> 3];
      $15 = $7 * $4 - $8 * $3;
      HEAPF64[$0 + 2720 >> 3] = $15;
      $5 = $6 * $3 - $9 * $4;
      HEAPF64[$0 + 2712 >> 3] = $5;
      $11 = $3 * $5 - $14 * $7;
      HEAPF64[$0 + 2752 >> 3] = $11;
      $10 = $9 * $14 - $15 * $3;
      HEAPF64[$0 + 2744 >> 3] = $10;
      $16 = $5 * $6 - $8 * $15;
      $12 = $14 * $8 - $4 * $5;
      $13 = $15 * $4 - $6 * $14;
      $17 = $7 * $15 - $5 * $9;
      break label$19;
     case 3:
      $1 = $0 + 2800 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2768 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2736 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $8 = HEAPF64[$0 + 2424 >> 3];
      $9 = HEAPF64[$0 + 2592 >> 3];
      $7 = HEAPF64[$0 + 2560 >> 3];
      $6 = HEAPF64[$0 + 2456 >> 3];
      $16 = $8 * $9 - $7 * $6;
      HEAPF64[$0 + 2792 >> 3] = $16;
      $4 = HEAPF64[$0 + 2488 >> 3];
      $3 = HEAPF64[$0 + 2624 >> 3];
      $12 = $7 * $4 - $8 * $3;
      HEAPF64[$0 + 2784 >> 3] = $12;
      $13 = $6 * $3 - $9 * $4;
      HEAPF64[$0 + 2776 >> 3] = $13;
      $17 = $13 * $6 - $8 * $12;
      HEAPF64[$0 + 2760 >> 3] = $17;
      $11 = $16 * $8 - $4 * $13;
      HEAPF64[$0 + 2752 >> 3] = $11;
      $10 = $12 * $4 - $6 * $16;
      HEAPF64[$0 + 2744 >> 3] = $10;
      $14 = $7 * $12 - $13 * $9;
      HEAPF64[$0 + 2728 >> 3] = $14;
      $15 = $3 * $13 - $16 * $7;
      HEAPF64[$0 + 2720 >> 3] = $15;
      $5 = $9 * $16 - $12 * $3;
      break label$20;
     case 4:
      $1 = $0 + 2800 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2768 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $1 = $0 + 2736 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      $8 = HEAPF64[$0 + 2432 >> 3];
      $9 = HEAPF64[$0 + 2600 >> 3];
      $7 = HEAPF64[$0 + 2568 >> 3];
      $6 = HEAPF64[$0 + 2464 >> 3];
      $14 = $8 * $9 - $7 * $6;
      HEAPF64[$0 + 2728 >> 3] = $14;
      $4 = HEAPF64[$0 + 2496 >> 3];
      $3 = HEAPF64[$0 + 2632 >> 3];
      $15 = $7 * $4 - $8 * $3;
      HEAPF64[$0 + 2720 >> 3] = $15;
      $5 = $6 * $3 - $9 * $4;
      HEAPF64[$0 + 2712 >> 3] = $5;
      $16 = $5 * $6 - $8 * $15;
      HEAPF64[$0 + 2792 >> 3] = $16;
      $12 = $14 * $8 - $4 * $5;
      HEAPF64[$0 + 2784 >> 3] = $12;
      $13 = $15 * $4 - $6 * $14;
      HEAPF64[$0 + 2776 >> 3] = $13;
      $17 = $7 * $15 - $5 * $9;
      HEAPF64[$0 + 2760 >> 3] = $17;
      $11 = $3 * $5 - $14 * $7;
      HEAPF64[$0 + 2752 >> 3] = $11;
      $10 = $9 * $14 - $15 * $3;
      HEAPF64[$0 + 2744 >> 3] = $10;
      break label$19;
     case 5:
      break label$21;
     };
    }
    $1 = $0 + 2768 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $0 + 2800 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $0 + 2736 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $8 = HEAPF64[$0 + 2568 >> 3];
    $9 = HEAPF64[$0 + 2456 >> 3];
    $7 = HEAPF64[$0 + 2424 >> 3];
    $6 = HEAPF64[$0 + 2600 >> 3];
    $17 = $8 * $9 - $7 * $6;
    HEAPF64[$0 + 2760 >> 3] = $17;
    $4 = HEAPF64[$0 + 2632 >> 3];
    $3 = HEAPF64[$0 + 2488 >> 3];
    $11 = $7 * $4 - $8 * $3;
    HEAPF64[$0 + 2752 >> 3] = $11;
    $10 = $6 * $3 - $9 * $4;
    HEAPF64[$0 + 2744 >> 3] = $10;
    $16 = $7 * $11 - $10 * $9;
    HEAPF64[$0 + 2792 >> 3] = $16;
    $12 = $3 * $10 - $17 * $7;
    HEAPF64[$0 + 2784 >> 3] = $12;
    $13 = $9 * $17 - $11 * $3;
    HEAPF64[$0 + 2776 >> 3] = $13;
    $14 = $10 * $6 - $8 * $11;
    HEAPF64[$0 + 2728 >> 3] = $14;
    $15 = $17 * $8 - $4 * $10;
    HEAPF64[$0 + 2720 >> 3] = $15;
    $5 = $11 * $4 - $6 * $17;
   }
   HEAPF64[$0 + 2712 >> 3] = $5;
  }
  $3 = 1.0 / Math_sqrt($16 * $16 + ($13 * $13 + $12 * $12));
  HEAPF64[$0 + 2792 >> 3] = $16 * $3;
  HEAPF64[$0 + 2784 >> 3] = $12 * $3;
  HEAPF64[$0 + 2776 >> 3] = $13 * $3;
  $3 = 1.0 / Math_sqrt($17 * $17 + ($10 * $10 + $11 * $11));
  HEAPF64[$0 + 2760 >> 3] = $17 * $3;
  HEAPF64[$0 + 2752 >> 3] = $11 * $3;
  HEAPF64[$0 + 2744 >> 3] = $10 * $3;
  $3 = 1.0 / Math_sqrt($14 * $14 + ($5 * $5 + $15 * $15));
  HEAPF64[$0 + 2728 >> 3] = $14 * $3;
  HEAPF64[$0 + 2720 >> 3] = $15 * $3;
  HEAPF64[$0 + 2712 >> 3] = $5 * $3;
  __stack_pointer = $2 + 96 | 0;
  $3 = HEAPF64[HEAP32[$0 + 32 >> 2] + 736 >> 3];
  $4 = HEAPF64[HEAP32[$0 + 36 >> 2] + 736 >> 3];
  HEAP8[$0 + 2856 | 0] = $3 < 2.220446049250313e-16 | $4 < 2.220446049250313e-16;
  $3 = $3 + $4;
  $3 = $3 > 0.0 ? $4 / $3 : .5;
  HEAPF64[$0 + 2840 >> 3] = $3;
  HEAPF64[$0 + 2848 >> 3] = 1.0 - $3;
 }
 
 function btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, $1) {
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0;
  $3 = HEAPF64[(($1 << 3) + $0 | 0) + 2680 >> 3];
  $6 = Math_imul($1, 176) + $0 | 0;
  $4 = HEAPF64[$6 + 1888 >> 3];
  $5 = HEAPF64[$6 + 1896 >> 3];
  label$1 : {
   if ($4 >= $5) {
    break label$1
   }
   if ($3 < $4) {
    $2 = fmod($4 - $3);
    label$3 : {
     if ($2 < -3.141592653589793) {
      $2 = $2 + 6.283185307179586;
      break label$3;
     }
     if (!($2 > 3.141592653589793)) {
      break label$3
     }
     $2 = $2 + -6.283185307179586;
    }
    $7 = Math_abs($2);
    $2 = fmod($5 - $3);
    label$5 : {
     if ($2 < -3.141592653589793) {
      $2 = $2 + 6.283185307179586;
      break label$5;
     }
     if (!($2 > 3.141592653589793)) {
      break label$5
     }
     $2 = $2 + -6.283185307179586;
    }
    $3 = $7 < Math_abs($2) ? $3 : $3 + 6.283185307179586;
    break label$1;
   }
   if (!($3 > $5)) {
    break label$1
   }
   $2 = fmod($3 - $5);
   label$7 : {
    if ($2 < -3.141592653589793) {
     $2 = $2 + 6.283185307179586;
     break label$7;
    }
    if (!($2 > 3.141592653589793)) {
     break label$7
    }
    $2 = $2 + -6.283185307179586;
   }
   $7 = Math_abs($2);
   $2 = fmod($3 - $4);
   label$9 : {
    if ($2 < -3.141592653589793) {
     $2 = $2 + 6.283185307179586;
     break label$9;
    }
    if (!($2 > 3.141592653589793)) {
     break label$9
    }
    $2 = $2 + -6.283185307179586;
   }
   $3 = $7 > Math_abs($2) ? $3 + -6.283185307179586 : $3;
  }
  HEAPF64[$6 + 2048 >> 3] = $3;
  if ($4 > $5) {
   $0 = Math_imul($1, 176) + $0 | 0;
   $1 = $0 + 2032 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$0 + 2056 >> 2] = 0;
   return;
  }
  $0 = Math_imul($1, 176) + $0 | 0;
  HEAPF64[$0 + 2032 >> 3] = $3 - $4;
  if ($4 == $5) {
   HEAP32[$0 + 2056 >> 2] = 3;
   return;
  }
  HEAP32[$0 + 2056 >> 2] = 4;
  HEAPF64[$0 + 2040 >> 3] = $3 - $5;
 }
 
 function btGeneric6DofSpring2Constraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[$0 + 32 >> 2] + 8 | 0, HEAP32[$0 + 36 >> 2] + 8 | 0);
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $3 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[$0 + 1872 >> 2];
     switch ($2 | 0) {
     case 0:
      break label$1;
     case 4:
      break label$2;
     default:
      break label$3;
     };
    }
    $3 = 1;
   }
   HEAP32[$1 >> 2] = $3;
   $2 = $3;
  }
  if (HEAPU8[$0 + 1552 | 0]) {
   $2 = $2 + 1 | 0;
   HEAP32[$1 >> 2] = $2;
  }
  if (HEAPU8[$0 + 1558 | 0]) {
   $2 = $2 + 1 | 0;
   HEAP32[$1 >> 2] = $2;
  }
  $3 = 2;
  label$6 : {
   switch (HEAP32[$0 + 1876 >> 2]) {
   default:
    $3 = 1;
   case 4:
    $2 = $2 + $3 | 0;
    HEAP32[$1 >> 2] = $2;
    break;
   case 0:
    break label$6;
   };
  }
  if (HEAPU8[$0 + 1553 | 0]) {
   $2 = $2 + 1 | 0;
   HEAP32[$1 >> 2] = $2;
  }
  if (HEAPU8[$0 + 1559 | 0]) {
   $2 = $2 + 1 | 0;
   HEAP32[$1 >> 2] = $2;
  }
  $3 = 2;
  label$11 : {
   switch (HEAP32[$0 + 1880 >> 2]) {
   default:
    $3 = 1;
   case 4:
    $2 = $2 + $3 | 0;
    HEAP32[$1 >> 2] = $2;
    break;
   case 0:
    break label$11;
   };
  }
  if (HEAPU8[$0 + 1554 | 0]) {
   $2 = $2 + 1 | 0;
   HEAP32[$1 >> 2] = $2;
  }
  if (HEAPU8[$0 + 1560 | 0]) {
   HEAP32[$1 >> 2] = $2 + 1
  }
  btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, 0);
  $2 = 2;
  label$16 : {
   switch (HEAP32[$0 + 2056 >> 2]) {
   default:
    $2 = 1;
   case 4:
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $2;
    break;
   case 0:
    break label$16;
   };
  }
  if (HEAPU8[$0 + 1944 | 0]) {
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1
  }
  if (HEAPU8[$0 + 1984 | 0]) {
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1
  }
  btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, 1);
  $2 = 2;
  label$21 : {
   switch (HEAP32[$0 + 2232 >> 2]) {
   default:
    $2 = 1;
   case 4:
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $2;
    break;
   case 0:
    break label$21;
   };
  }
  if (HEAPU8[$0 + 2120 | 0]) {
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1
  }
  if (HEAPU8[$0 + 2160 | 0]) {
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1
  }
  $2 = 2;
  btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, 2);
  label$26 : {
   switch (HEAP32[$0 + 2408 >> 2]) {
   default:
    $2 = 1;
   case 4:
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $2;
    break;
   case 0:
    break label$26;
   };
  }
  if (HEAPU8[$0 + 2296 | 0]) {
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1
  }
  if (HEAPU8[$0 + 2336 | 0]) {
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1
  }
 }
 
 function btGeneric6DofSpring2Constraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  $6 = $1;
  $11 = HEAP32[$0 + 32 >> 2];
  $14 = $11 + 8 | 0;
  $1 = HEAP32[$0 + 36 >> 2];
  $15 = $1 + 8 | 0;
  $16 = $11 + 672 | 0;
  $17 = $1 + 672 | 0;
  $18 = $11 + 704 | 0;
  $11 = $1 + 704 | 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $1 = HEAP32[$0 + 2416 >> 2] - 1 | 0;
  label$1 : {
   if ($1 >>> 0 > 4) {
    $9 = 1;
    $7 = 2;
    break label$1;
   }
   $1 = $1 << 2;
   $10 = HEAP32[$1 + 29396 >> 2];
   $9 = HEAP32[$1 + 29376 >> 2];
   $7 = HEAP32[$1 + 29356 >> 2];
  }
  $1 = Math_imul($10, 176) + $0 | 0;
  $12 = $1;
  if (HEAPU8[$1 + 1984 | 0] ? 1 : HEAP32[$1 + 2056 >> 2] | HEAPU8[$1 + 1944 | 0]) {
   $5 = ($10 << 5) + $0 | 0;
   $4 = $5 + 2736 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 24 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $4 = $5 + 2728 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $4 = $5 + 2720 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $3 = $5 + 2712 | 0;
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $1;
   $1 = HEAP32[$0 + 2860 >> 2] >> ($10 << 2) + 12;
   if (!($1 & 1)) {
    HEAPF64[(Math_imul($10, 176) + $0 | 0) + 1920 >> 3] = HEAPF64[HEAP32[$6 + 40 >> 2] >> 3]
   }
   if (!($1 & 2)) {
    HEAPF64[(Math_imul($10, 176) + $0 | 0) + 1912 >> 3] = HEAPF64[$6 + 8 >> 3]
   }
   if (!($1 & 4)) {
    HEAPF64[(Math_imul($10, 176) + $0 | 0) + 1936 >> 3] = HEAPF64[HEAP32[$6 + 40 >> 2] >> 3]
   }
   if (!($1 & 8)) {
    HEAPF64[(Math_imul($10, 176) + $0 | 0) + 1928 >> 3] = HEAPF64[$6 + 8 >> 3]
   }
   $8 = btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $12 + 1888 | 0, $14, $15, $16, $17, $18, $11, $6, 0, $2, 1, 0);
  }
  $1 = Math_imul($9, 176) + $0 | 0;
  $12 = $1;
  if (HEAPU8[$1 + 1984 | 0] ? 1 : HEAP32[$1 + 2056 >> 2] | HEAPU8[$1 + 1944 | 0]) {
   $5 = ($9 << 5) + $0 | 0;
   $4 = $5 + 2736 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 24 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $4 = $5 + 2728 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $4 = $5 + 2720 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $3 = $5 + 2712 | 0;
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $1;
   $1 = HEAP32[$0 + 2860 >> 2] >> ($9 << 2) + 12;
   if (!($1 & 1)) {
    HEAPF64[(Math_imul($9, 176) + $0 | 0) + 1920 >> 3] = HEAPF64[HEAP32[$6 + 40 >> 2] >> 3]
   }
   if (!($1 & 2)) {
    HEAPF64[(Math_imul($9, 176) + $0 | 0) + 1912 >> 3] = HEAPF64[$6 + 8 >> 3]
   }
   if (!($1 & 4)) {
    HEAPF64[(Math_imul($9, 176) + $0 | 0) + 1936 >> 3] = HEAPF64[HEAP32[$6 + 40 >> 2] >> 3]
   }
   if (!($1 & 8)) {
    HEAPF64[(Math_imul($9, 176) + $0 | 0) + 1928 >> 3] = HEAPF64[$6 + 8 >> 3]
   }
   $8 = btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $12 + 1888 | 0, $14, $15, $16, $17, $18, $11, $6, $8, $2, 1, 0) + $8 | 0;
  }
  $1 = Math_imul($7, 176) + $0 | 0;
  $12 = $1;
  if (HEAPU8[$1 + 1984 | 0] ? 1 : HEAP32[$1 + 2056 >> 2] | HEAPU8[$1 + 1944 | 0]) {
   $5 = ($7 << 5) + $0 | 0;
   $4 = $5 + 2736 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 24 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $4 = $5 + 2728 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $4 = $5 + 2720 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $1 = $2 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $3 = $5 + 2712 | 0;
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $1;
   $1 = HEAP32[$0 + 2860 >> 2] >> ($7 << 2) + 12;
   if (!($1 & 1)) {
    HEAPF64[(Math_imul($7, 176) + $0 | 0) + 1920 >> 3] = HEAPF64[HEAP32[$6 + 40 >> 2] >> 3]
   }
   if (!($1 & 2)) {
    HEAPF64[(Math_imul($7, 176) + $0 | 0) + 1912 >> 3] = HEAPF64[$6 + 8 >> 3]
   }
   if (!($1 & 4)) {
    HEAPF64[(Math_imul($7, 176) + $0 | 0) + 1936 >> 3] = HEAPF64[HEAP32[$6 + 40 >> 2] >> 3]
   }
   if (!($1 & 8)) {
    HEAPF64[(Math_imul($7, 176) + $0 | 0) + 1928 >> 3] = HEAPF64[$6 + 8 >> 3]
   }
   $8 = btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $12 + 1888 | 0, $14, $15, $16, $17, $18, $11, $6, $8, $2, 1, 0) + $8 | 0;
  }
  __stack_pointer = $2 + 32 | 0;
  $9 = $8;
  $8 = 0;
  $7 = 0;
  $2 = __stack_pointer - 208 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 80 >> 2] = 0;
  HEAP32[$2 + 84 >> 2] = 0;
  HEAP32[$2 + 72 >> 2] = -1073741824;
  HEAP32[$2 + 76 >> 2] = 1072483532;
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 68 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = -1610612736;
  HEAP32[$2 + 60 >> 2] = 1070176665;
  $12 = $6 + 8 | 0;
  $10 = 1872;
  while (1) {
   $5 = $0 + $8 | 0;
   $3 = HEAPU8[$5 + 1552 | 0];
   $4 = HEAP32[$0 + $10 >> 2];
   label$2 : {
    label$3 : {
     if ($4) {
      break label$3
     }
     $1 = $3;
     $3 = 1;
     if ($1) {
      break label$3
     }
     $3 = 0;
     if (!HEAPU8[$5 + 1558 | 0]) {
      break label$2
     }
    }
    HEAP32[$2 + 200 >> 2] = $4;
    HEAP8[$2 + 88 | 0] = $3;
    $3 = $0 + $7 | 0;
    HEAPF64[$2 + 48 >> 3] = HEAPF64[$3 + 1392 >> 3];
    HEAPF64[$2 + 192 >> 3] = HEAPF64[$3 + 1840 >> 3];
    HEAPF64[$2 + 176 >> 3] = HEAPF64[$3 + 1776 >> 3];
    HEAPF64[$2 + 184 >> 3] = HEAPF64[$3 + 1808 >> 3];
    HEAP8[$2 + 112 | 0] = HEAPU8[$5 + 1555 | 0];
    HEAPF64[$2 + 120 >> 3] = HEAPF64[$3 + 1568 >> 3];
    HEAP8[$2 + 128 | 0] = HEAPU8[$5 + 1558 | 0];
    HEAPF64[$2 + 136 >> 3] = HEAPF64[$3 + 1600 >> 3];
    HEAP8[$2 + 144 | 0] = HEAPU8[$5 + 1632 | 0];
    HEAPF64[$2 + 152 >> 3] = HEAPF64[$3 + 1640 >> 3];
    HEAP8[$2 + 160 | 0] = HEAPU8[$5 + 1672 | 0];
    HEAPF64[$2 + 168 >> 3] = HEAPF64[$3 + 1680 >> 3];
    HEAPF64[$2 + 40 >> 3] = HEAPF64[$3 + 1360 >> 3];
    HEAPF64[$2 + 32 >> 3] = HEAPF64[$3 + 1328 >> 3];
    HEAPF64[$2 + 104 >> 3] = HEAPF64[$3 + 1744 >> 3];
    HEAPF64[$2 + 96 >> 3] = HEAPF64[$3 + 1712 >> 3];
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 28 >> 2] = 0;
    HEAPF64[$2 >> 3] = HEAPF64[$3 + 2424 >> 3];
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$3 + 2456 >> 3];
    HEAPF64[$2 + 16 >> 3] = HEAPF64[$3 + 2488 >> 3];
    $1 = HEAP32[$0 + 2860 >> 2] >> $10 - 1872;
    HEAPF64[$2 + 64 >> 3] = HEAPF64[($1 & 1 ? $3 + 1456 | 0 : HEAP32[$6 + 40 >> 2]) >> 3];
    HEAPF64[$2 + 56 >> 3] = HEAPF64[($1 & 2 ? $3 + 1424 | 0 : $12) >> 3];
    HEAPF64[$2 + 80 >> 3] = HEAPF64[($1 & 4 ? $3 + 1520 | 0 : HEAP32[$6 + 40 >> 2]) >> 3];
    HEAPF64[$2 + 72 >> 3] = HEAPF64[($1 & 8 ? $3 + 1488 | 0 : $12) >> 3];
    $4 = 1;
    $1 = (($8 + 2 & 255) >>> 0) % 3 | 0;
    $3 = 1;
    label$8 : {
     label$9 : {
      label$101 : {
       label$11 : {
        $5 = Math_imul((($8 + 1 & 255) >>> 0) % 3 | 0, 176) + $0 | 0;
        switch (HEAP32[$5 + 2056 >> 2] - 1 | 0) {
        case 3:
         break label$101;
        case 2:
         break label$11;
        case 0:
        case 1:
         break label$8;
        default:
         break label$9;
        };
       }
       $13 = HEAPF64[$5 + 2032 >> 3];
       $3 = $13 < -.001 | $13 > .001;
       break label$8;
      }
      if (HEAPF64[$5 + 2032 >> 3] < -.001) {
       break label$8
      }
      $3 = HEAPF64[$5 + 2040 >> 3] > .001;
      break label$8;
     }
     $3 = 0;
    }
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        $1 = Math_imul($1, 176) + $0 | 0;
        switch (HEAP32[$1 + 2056 >> 2] - 1 | 0) {
        case 0:
        case 1:
         break label$13;
        case 3:
         break label$14;
        case 2:
         break label$15;
        default:
         break label$12;
        };
       }
       $13 = HEAPF64[$1 + 2032 >> 3];
       if ($13 < -.001 | $13 > .001) {
        break label$13
       }
       break label$12;
      }
      if (HEAPF64[$1 + 2032 >> 3] < -.001) {
       break label$13
      }
      if (!(HEAPF64[$1 + 2040 >> 3] > .001)) {
       break label$12
      }
     }
     $4 = 0;
    }
    $9 = btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $2 + 32 | 0, $14, $15, $16, $17, $18, $11, $6, $9, $2, 0, $3 ? $4 : 1) + $9 | 0;
   }
   $10 = $10 + 4 | 0;
   $8 = $8 + 1 | 0;
   $7 = $7 + 8 | 0;
   if (($7 | 0) != 24) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 208 | 0;
 }
 
 function btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
  var $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
  $9 = Math_imul(HEAP32[$8 + 32 >> 2], $9);
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$1 + 168 >> 2] - 3 | 0) {
     case 1:
      label$5 : {
       if ($11) {
        $13 = HEAPF64[$10 + 16 >> 3];
        $17 = HEAPF64[$10 >> 3];
        $18 = HEAPF64[$10 + 8 >> 3];
        $21 = HEAPF64[$6 + 16 >> 3] * $13 + (HEAPF64[$6 >> 3] * $17 + HEAPF64[$6 + 8 >> 3] * $18);
        $14 = -1.0;
        $19 = $11;
        $16 = $7;
        break label$5;
       }
       $13 = HEAPF64[$10 + 16 >> 3];
       $17 = HEAPF64[$10 >> 3];
       $18 = HEAPF64[$10 + 8 >> 3];
       $21 = HEAPF64[$4 + 16 >> 3] * $13 + (HEAPF64[$4 >> 3] * $17 + HEAPF64[$4 + 8 >> 3] * $18);
       $14 = 1.0;
       $16 = $5;
      }
      $15 = HEAPF64[$16 + 16 >> 3];
      $23 = HEAPF64[$16 >> 3];
      $22 = HEAPF64[$16 + 8 >> 3];
      btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $2, $3, $8, $9, $10, $19, $12);
      $16 = HEAP32[$8 + 36 >> 2] + ($9 << 3) | 0;
      $20 = $14 * (HEAPF64[$8 >> 3] * HEAPF64[$1 + 24 >> 3] * HEAPF64[$1 + 144 >> 3]);
      HEAPF64[$16 >> 3] = $20;
      $18 = $21 - ($15 * $13 + ($23 * $17 + $18 * $22));
      $13 = $20 - $18 * HEAPF64[$1 + 24 >> 3];
      label$7 : {
       label$8 : {
        if ($11) {
         $17 = 0.0;
         $15 = 1797693134862315708145274.0e284;
         if (!($13 > 0.0)) {
          break label$7
         }
         $13 = $18 * -HEAPF64[$1 + 16 >> 3];
         if ($20 < $13) {
          break label$8
         }
         break label$7;
        }
        $15 = 0.0;
        $17 = -1797693134862315708145274.0e284;
        if (!($13 < 0.0)) {
         break label$7
        }
        $13 = $18 * -HEAPF64[$1 + 16 >> 3];
        if (!($20 > $13)) {
         break label$7
        }
       }
       HEAPF64[$16 >> 3] = $13;
      }
      $16 = $9 << 3;
      HEAPF64[$16 + HEAP32[$8 + 44 >> 2] >> 3] = $17;
      HEAPF64[$16 + HEAP32[$8 + 48 >> 2] >> 3] = $15;
      HEAPF64[$16 + HEAP32[$8 + 40 >> 2] >> 3] = HEAPF64[$1 + 32 >> 3];
      $9 = HEAP32[$8 + 32 >> 2] + $9 | 0;
      btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $2, $3, $8, $9, $10, $11, $12);
      $16 = HEAP32[$8 + 36 >> 2] + ($9 << 3) | 0;
      $14 = $14 * (HEAPF64[$8 >> 3] * HEAPF64[$1 + 24 >> 3] * HEAPF64[$1 + 152 >> 3]);
      HEAPF64[$16 >> 3] = $14;
      $13 = $14 - $18 * HEAPF64[$1 + 24 >> 3];
      label$10 : {
       label$11 : {
        if ($11) {
         $15 = 0.0;
         $17 = -1797693134862315708145274.0e284;
         if (!($13 < 0.0)) {
          break label$10
         }
         $13 = $18 * -HEAPF64[$1 + 16 >> 3];
         if ($14 > $13) {
          break label$11
         }
         break label$10;
        }
        $17 = 0.0;
        $15 = 1797693134862315708145274.0e284;
        if (!($13 > 0.0)) {
         break label$10
        }
        $13 = $18 * -HEAPF64[$1 + 16 >> 3];
        if (!($14 < $13)) {
         break label$10
        }
       }
       HEAPF64[$16 >> 3] = $13;
      }
      $19 = $1 + 32 | 0;
      $16 = $9 << 3;
      HEAPF64[$16 + HEAP32[$8 + 44 >> 2] >> 3] = $17;
      HEAPF64[$16 + HEAP32[$8 + 48 >> 2] >> 3] = $15;
      $16 = 2;
      break label$2;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $2, $3, $8, $9, $10, $11, $12);
    $19 = $9 << 3;
    HEAPF64[$19 + HEAP32[$8 + 36 >> 2] >> 3] = HEAPF64[$8 >> 3] * HEAPF64[$1 + 24 >> 3] * HEAPF64[$1 + 144 >> 3] * +(($11 ? -1 : 1) | 0);
    $16 = $19 + HEAP32[$8 + 44 >> 2] | 0;
    HEAP32[$16 >> 2] = -1;
    HEAP32[$16 + 4 >> 2] = -1048577;
    $19 = $19 + HEAP32[$8 + 48 >> 2] | 0;
    HEAP32[$19 >> 2] = -1;
    HEAP32[$19 + 4 >> 2] = 2146435071;
    $19 = $1 + 32 | 0;
    $16 = 1;
   }
   HEAPF64[HEAP32[$8 + 40 >> 2] + ($9 << 3) >> 3] = HEAPF64[$19 >> 3];
   $9 = HEAP32[$8 + 32 >> 2] + $9 | 0;
  }
  label$13 : {
   if (!HEAPU8[$1 + 56 | 0]) {
    break label$13
   }
   if (!HEAPU8[$1 + 80 | 0]) {
    btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $2, $3, $8, $9, $10, $11, $12);
    $13 = HEAPF64[$1 + 64 >> 3];
    $13 = btTypedConstraint__getMotorFactor_28double_2c_20double_2c_20double_2c_20double_2c_20double_29(HEAPF64[$1 + 160 >> 3], HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], $11 ? $13 : -$13, HEAPF64[$8 >> 3] * HEAPF64[$1 + 40 >> 3]);
    $19 = $9 << 3;
    HEAPF64[$19 + HEAP32[$8 + 36 >> 2] >> 3] = $13 * HEAPF64[$1 + 64 >> 3];
    HEAPF64[$19 + HEAP32[$8 + 44 >> 2] >> 3] = -HEAPF64[$1 + 72 >> 3];
    HEAPF64[$19 + HEAP32[$8 + 48 >> 2] >> 3] = HEAPF64[$1 + 72 >> 3];
    HEAPF64[$19 + HEAP32[$8 + 40 >> 2] >> 3] = HEAPF64[$1 + 48 >> 3];
    $16 = $16 + 1 | 0;
    $9 = HEAP32[$8 + 32 >> 2] + $9 | 0;
    if (!HEAPU8[$1 + 56 | 0] | !HEAPU8[$1 + 80 | 0]) {
     break label$13
    }
   }
   $14 = HEAPF64[$1 + 88 >> 3];
   $13 = HEAPF64[$1 + 160 >> 3] - $14;
   label$15 : {
    if (!$11) {
     break label$15
    }
    $19 = $13 > 3.141592653589793;
    $14 = $19 ? $14 + 6.283185307179586 : $14;
    $13 = $19 ? $13 + -6.283185307179586 : $13;
    if (!($13 < -3.141592653589793)) {
     break label$15
    }
    $14 = $14 + -6.283185307179586;
    $13 = $13 + 6.283185307179586;
   }
   btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $2, $3, $8, $9, $10, $11, $12);
   $15 = 0.0;
   $17 = HEAPF64[$1 + 64 >> 3];
   $18 = $13 < 0.0 ? -$17 : $17;
   if ($13 != 0.0) {
    $21 = -$18;
    $20 = HEAPF64[$1 + 160 >> 3];
    $17 = HEAPF64[$1 >> 3];
    $15 = HEAPF64[$1 + 8 >> 3];
    label$17 : {
     if ($17 > $15) {
      $15 = $13 < 0.0 ? $14 : 1797693134862315708145274.0e284;
      $13 = $13 > 0.0 ? $14 : -1797693134862315708145274.0e284;
      break label$17;
     }
     $15 = $13 < 0.0 ? ($15 > $14 ? $14 : $15) : $15;
     $13 = $13 > 0.0 ? ($14 > $17 ? $14 : $17) : $17;
    }
    $15 = btTypedConstraint__getMotorFactor_28double_2c_20double_2c_20double_2c_20double_2c_20double_29($20, $13, $15, $21, HEAPF64[$8 >> 3] * HEAPF64[$1 + 40 >> 3]);
   }
   $19 = $9 << 3;
   HEAPF64[$19 + HEAP32[$8 + 36 >> 2] >> 3] = $18 * $15 * +(($11 ? -1 : 1) | 0);
   HEAPF64[$19 + HEAP32[$8 + 44 >> 2] >> 3] = -HEAPF64[$1 + 72 >> 3];
   HEAPF64[$19 + HEAP32[$8 + 48 >> 2] >> 3] = HEAPF64[$1 + 72 >> 3];
   HEAPF64[$19 + HEAP32[$8 + 40 >> 2] >> 3] = HEAPF64[$1 + 48 >> 3];
   $16 = $16 + 1 | 0;
   $9 = HEAP32[$8 + 32 >> 2] + $9 | 0;
  }
  if (HEAPU8[$1 + 96 | 0]) {
   $13 = HEAPF64[$1 + 136 >> 3];
   $14 = HEAPF64[$1 + 160 >> 3];
   btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $2, $3, $8, $9, $10, $11, $12);
   $15 = HEAPF64[$8 >> 3];
   $22 = $14 - $13;
   $20 = HEAPF64[$1 + 120 >> 3];
   label$20 : {
    if ($11) {
     $17 = HEAPF64[$10 + 16 >> 3];
     $18 = HEAPF64[$10 >> 3];
     $21 = HEAPF64[$10 + 8 >> 3];
     $13 = HEAPF64[$6 + 16 >> 3] * $17 + (HEAPF64[$6 >> 3] * $18 + HEAPF64[$6 + 8 >> 3] * $21);
     break label$20;
    }
    $7 = $5;
    $17 = HEAPF64[$10 + 16 >> 3];
    $18 = HEAPF64[$10 >> 3];
    $21 = HEAPF64[$10 + 8 >> 3];
    $13 = HEAPF64[$4 + 16 >> 3] * $17 + (HEAPF64[$4 >> 3] * $18 + HEAPF64[$4 + 8 >> 3] * $21);
   }
   $17 = $13 - (HEAPF64[$7 + 16 >> 3] * $17 + (HEAPF64[$7 >> 3] * $18 + $21 * HEAPF64[$7 + 8 >> 3]));
   $13 = 1.0 / $15;
   $15 = HEAPF64[$1 + 104 >> 3];
   $14 = 1.0 / HEAPF64[HEAP32[$0 + 36 >> 2] + 736 >> 3];
   $18 = 1.0 / HEAPF64[HEAP32[$0 + 32 >> 2] + 736 >> 3];
   $14 = $14 < $18 ? $14 : $18;
   if (!(!HEAPU8[$1 + 112 | 0] | !($13 * Math_sqrt($15 / $14) > .25))) {
    $15 = 1.0 / $13 / $13 * .0625 * $14
   }
   $0 = $9 << 3;
   $18 = $13 * ($22 * $15);
   $15 = +(($11 ? -1 : 1) | 0);
   $13 = $13 * ($17 * -(HEAPU8[$1 + 128 | 0] ? ($14 < $20 * $13 ? $14 / $13 : $20) : $20) * $15);
   $14 = $18 + $13;
   HEAPF64[$0 + HEAP32[$8 + 36 >> 2] >> 3] = $14 * $15 + $17;
   $1 = $13 > $14;
   $15 = $1 ? $13 : $14;
   $13 = $1 ? $14 : $13;
   label$23 : {
    if (!$11) {
     HEAPF64[$0 + HEAP32[$8 + 44 >> 2] >> 3] = Math_min($13, 0.0);
     break label$23;
    }
    HEAPF64[$0 + HEAP32[$8 + 44 >> 2] >> 3] = Math_min(-$15, 0.0);
    $15 = -$13;
   }
   $0 = $9 << 3;
   HEAPF64[$0 + HEAP32[$8 + 48 >> 2] >> 3] = Math_max($15, 0.0);
   $0 = $0 + HEAP32[$8 + 40 >> 2] | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $16 = $16 + 1 | 0;
  }
  return $16;
 }
 
 function btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0;
  $17 = $4 << 3;
  $11 = HEAP32[($6 ? 20 : 16) + $3 >> 2];
  HEAPF64[$17 + $11 >> 3] = HEAPF64[$5 >> 3];
  $18 = $4 + 1 | 0;
  $19 = $18 << 3;
  HEAPF64[$11 + $19 >> 3] = HEAPF64[$5 + 8 >> 3];
  $20 = $4 + 2 | 0;
  $21 = $20 << 3;
  HEAPF64[$11 + $21 >> 3] = HEAPF64[$5 + 16 >> 3];
  $11 = HEAP32[($6 ? 28 : 24) + $3 >> 2];
  HEAPF64[$11 + $17 >> 3] = -HEAPF64[$5 >> 3];
  HEAPF64[$11 + $19 >> 3] = -HEAPF64[$5 + 8 >> 3];
  HEAPF64[$11 + $21 >> 3] = -HEAPF64[$5 + 16 >> 3];
  if (!$6) {
   $12 = HEAPF64[$0 + 2656 >> 3] - HEAPF64[$2 + 104 >> 3];
   $9 = HEAPF64[$5 + 16 >> 3];
   $10 = HEAPF64[$5 + 8 >> 3];
   $13 = HEAPF64[$0 + 2664 >> 3] - HEAPF64[$2 + 112 >> 3];
   $15 = $12 * $9 - $10 * $13;
   $22 = HEAPF64[$0 + 2528 >> 3] - HEAPF64[$1 + 104 >> 3];
   $23 = HEAPF64[$0 + 2536 >> 3] - HEAPF64[$1 + 112 >> 3];
   $16 = $22 * $9 - $10 * $23;
   $14 = HEAPF64[$0 + 2648 >> 3] - HEAPF64[$2 + 96 >> 3];
   $8 = HEAPF64[$5 >> 3];
   $12 = $14 * $10 - $8 * $12;
   $13 = $13 * $8 - $9 * $14;
   $14 = HEAPF64[$0 + 2520 >> 3] - HEAPF64[$1 + 96 >> 3];
   $10 = $14 * $10 - $8 * $22;
   $9 = $23 * $8 - $9 * $14;
   if (!(!HEAPU8[$0 + 2856 | 0] | $7)) {
    $8 = HEAPF64[$0 + 2848 >> 3];
    $12 = $12 * $8;
    $13 = $13 * $8;
    $15 = $15 * $8;
    $8 = HEAPF64[$0 + 2840 >> 3];
    $10 = $10 * $8;
    $16 = $16 * $8;
    $9 = $9 * $8;
   }
   $1 = $4 << 3;
   $0 = $1 + HEAP32[$3 + 20 >> 2] | 0;
   HEAPF64[$0 + 16 >> 3] = $10;
   HEAPF64[$0 + 8 >> 3] = $9;
   HEAPF64[$0 >> 3] = $16;
   $0 = HEAP32[$3 + 28 >> 2];
   HEAPF64[$0 + ($20 << 3) >> 3] = -$12;
   HEAPF64[$0 + ($18 << 3) >> 3] = -$13;
   HEAPF64[$0 + $1 >> 3] = -$15;
  }
 }
 
 function btGeneric6DofSpring2Constraint__setParam_28int_2c_20double_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($3 >>> 0 <= 2) {
      label$5 : {
       switch ($1 - 1 | 0) {
       case 1:
        $1 = (($3 << 3) + $0 | 0) + 1424 | 0;
        $4 = 2;
        break label$2;
       case 3:
        $1 = (($3 << 3) + $0 | 0) + 1456 | 0;
        $4 = 1;
        break label$2;
       case 0:
        $1 = (($3 << 3) + $0 | 0) + 1488 | 0;
        $4 = 8;
        break label$2;
       case 2:
        break label$5;
       default:
        break label$1;
       };
      }
      $1 = (($3 << 3) + $0 | 0) + 1520 | 0;
      break label$3;
     }
     $4 = $3 - 3 | 0;
     if ($4 >>> 0 > 2) {
      break label$1
     }
     label$9 : {
      switch ($1 - 1 | 0) {
      case 1:
       $1 = (Math_imul($4, 176) + $0 | 0) + 1912 | 0;
       $4 = 2;
       break label$2;
      case 3:
       $1 = (Math_imul($4, 176) + $0 | 0) + 1920 | 0;
       $4 = 1;
       break label$2;
      case 0:
       $1 = (Math_imul($4, 176) + $0 | 0) + 1928 | 0;
       $4 = 8;
       break label$2;
      case 2:
       break label$9;
      default:
       break label$1;
      };
     }
     $1 = (Math_imul($4, 176) + $0 | 0) + 1936 | 0;
    }
    $4 = 4;
   }
   HEAPF64[$1 >> 3] = $2;
   HEAP32[$0 + 2860 >> 2] = HEAP32[$0 + 2860 >> 2] | $4 << ($3 << 2);
  }
 }
 
 function btGeneric6DofSpring2Constraint__getParam_28int_2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 <= 2) {
     label$4 : {
      switch ($1 - 1 | 0) {
      case 1:
       $0 = (($2 << 3) + $0 | 0) + 1424 | 0;
       break label$2;
      case 3:
       $0 = (($2 << 3) + $0 | 0) + 1456 | 0;
       break label$2;
      case 0:
       $0 = (($2 << 3) + $0 | 0) + 1488 | 0;
       break label$2;
      case 2:
       break label$4;
      default:
       break label$1;
      };
     }
     $0 = (($2 << 3) + $0 | 0) + 1520 | 0;
     break label$2;
    }
    $2 = $2 - 3 | 0;
    if ($2 >>> 0 > 2) {
     break label$1
    }
    label$8 : {
     switch ($1 - 1 | 0) {
     case 1:
      $0 = (Math_imul($2, 176) + $0 | 0) + 1912 | 0;
      break label$2;
     case 3:
      $0 = (Math_imul($2, 176) + $0 | 0) + 1920 | 0;
      break label$2;
     case 0:
      $0 = (Math_imul($2, 176) + $0 | 0) + 1928 | 0;
      break label$2;
     case 2:
      break label$8;
     default:
      break label$1;
     };
    }
    $0 = (Math_imul($2, 176) + $0 | 0) + 1936 | 0;
   }
   $3 = HEAPF64[$0 >> 3];
  }
  return +$3;
 }
 
 function btGeneric6DofSpring2Constraint___btGeneric6DofSpring2Constraint_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 28240;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btGeneric6DofSpring2Constraint__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 1208;
 }
 
 function btGeneric6DofSpring2Constraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0;
  btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAPF64[$1 + 72 >> 3] = HEAPF64[$0 + 64 >> 3];
  HEAPF64[$1 + 80 >> 3] = HEAPF64[$0 + 72 >> 3];
  HEAPF64[$1 + 88 >> 3] = HEAPF64[$0 + 80 >> 3];
  HEAPF64[$1 + 96 >> 3] = HEAPF64[$0 + 88 >> 3];
  HEAPF64[$1 + 104 >> 3] = HEAPF64[$0 + 96 >> 3];
  HEAPF64[$1 + 112 >> 3] = HEAPF64[$0 + 104 >> 3];
  HEAPF64[$1 + 120 >> 3] = HEAPF64[$0 + 112 >> 3];
  HEAPF64[$1 + 128 >> 3] = HEAPF64[$0 + 120 >> 3];
  HEAPF64[$1 + 136 >> 3] = HEAPF64[$0 + 128 >> 3];
  HEAPF64[$1 + 144 >> 3] = HEAPF64[$0 + 136 >> 3];
  HEAPF64[$1 + 152 >> 3] = HEAPF64[$0 + 144 >> 3];
  HEAPF64[$1 + 160 >> 3] = HEAPF64[$0 + 152 >> 3];
  HEAPF64[$1 + 168 >> 3] = HEAPF64[$0 + 160 >> 3];
  HEAPF64[$1 + 176 >> 3] = HEAPF64[$0 + 168 >> 3];
  HEAPF64[$1 + 184 >> 3] = HEAPF64[$0 + 176 >> 3];
  HEAPF64[$1 + 192 >> 3] = HEAPF64[$0 + 184 >> 3];
  HEAPF64[$1 + 200 >> 3] = HEAPF64[$0 + 192 >> 3];
  HEAPF64[$1 + 208 >> 3] = HEAPF64[$0 + 200 >> 3];
  HEAPF64[$1 + 216 >> 3] = HEAPF64[$0 + 208 >> 3];
  HEAPF64[$1 + 224 >> 3] = HEAPF64[$0 + 216 >> 3];
  HEAPF64[$1 + 232 >> 3] = HEAPF64[$0 + 224 >> 3];
  HEAPF64[$1 + 240 >> 3] = HEAPF64[$0 + 232 >> 3];
  HEAPF64[$1 + 248 >> 3] = HEAPF64[$0 + 240 >> 3];
  HEAPF64[$1 + 256 >> 3] = HEAPF64[$0 + 248 >> 3];
  HEAPF64[$1 + 264 >> 3] = HEAPF64[$0 + 256 >> 3];
  HEAPF64[$1 + 272 >> 3] = HEAPF64[$0 + 264 >> 3];
  HEAPF64[$1 + 280 >> 3] = HEAPF64[$0 + 272 >> 3];
  HEAPF64[$1 + 288 >> 3] = HEAPF64[$0 + 280 >> 3];
  HEAPF64[$1 + 296 >> 3] = HEAPF64[$0 + 288 >> 3];
  HEAPF64[$1 + 304 >> 3] = HEAPF64[$0 + 296 >> 3];
  HEAPF64[$1 + 312 >> 3] = HEAPF64[$0 + 304 >> 3];
  HEAPF64[$1 + 320 >> 3] = HEAPF64[$0 + 312 >> 3];
  HEAPF64[$1 + 800 >> 3] = HEAPF64[$0 + 1888 >> 3];
  HEAPF64[$1 + 768 >> 3] = HEAPF64[$0 + 1896 >> 3];
  HEAPF64[$1 + 832 >> 3] = HEAPF64[$0 + 1904 >> 3];
  HEAPF64[$1 + 864 >> 3] = HEAPF64[$0 + 1912 >> 3];
  HEAPF64[$1 + 896 >> 3] = HEAPF64[$0 + 1920 >> 3];
  HEAPF64[$1 + 928 >> 3] = HEAPF64[$0 + 1928 >> 3];
  HEAPF64[$1 + 960 >> 3] = HEAPF64[$0 + 1936 >> 3];
  HEAPF64[$1 + 992 >> 3] = HEAPF64[$0 + 1952 >> 3];
  HEAPF64[$1 + 1024 >> 3] = HEAPF64[$0 + 1960 >> 3];
  HEAPF64[$1 + 1056 >> 3] = HEAPF64[$0 + 1976 >> 3];
  HEAPF64[$1 + 1088 >> 3] = HEAPF64[$0 + 1992 >> 3];
  HEAPF64[$1 + 1120 >> 3] = HEAPF64[$0 + 2008 >> 3];
  HEAPF64[$1 + 1152 >> 3] = HEAPF64[$0 + 2024 >> 3];
  HEAPF64[$1 + 808 >> 3] = HEAPF64[$0 + 2064 >> 3];
  HEAPF64[$1 + 776 >> 3] = HEAPF64[$0 + 2072 >> 3];
  HEAPF64[$1 + 840 >> 3] = HEAPF64[$0 + 2080 >> 3];
  HEAPF64[$1 + 872 >> 3] = HEAPF64[$0 + 2088 >> 3];
  HEAPF64[$1 + 904 >> 3] = HEAPF64[$0 + 2096 >> 3];
  HEAPF64[$1 + 936 >> 3] = HEAPF64[$0 + 2104 >> 3];
  HEAPF64[$1 + 968 >> 3] = HEAPF64[$0 + 2112 >> 3];
  HEAPF64[$1 + 1e3 >> 3] = HEAPF64[$0 + 2128 >> 3];
  HEAPF64[$1 + 1032 >> 3] = HEAPF64[$0 + 2136 >> 3];
  HEAPF64[$1 + 1064 >> 3] = HEAPF64[$0 + 2152 >> 3];
  HEAPF64[$1 + 1096 >> 3] = HEAPF64[$0 + 2168 >> 3];
  HEAPF64[$1 + 1128 >> 3] = HEAPF64[$0 + 2184 >> 3];
  HEAPF64[$1 + 1160 >> 3] = HEAPF64[$0 + 2200 >> 3];
  HEAPF64[$1 + 816 >> 3] = HEAPF64[$0 + 2240 >> 3];
  HEAPF64[$1 + 784 >> 3] = HEAPF64[$0 + 2248 >> 3];
  HEAPF64[$1 + 848 >> 3] = HEAPF64[$0 + 2256 >> 3];
  HEAPF64[$1 + 880 >> 3] = HEAPF64[$0 + 2264 >> 3];
  HEAPF64[$1 + 912 >> 3] = HEAPF64[$0 + 2272 >> 3];
  HEAPF64[$1 + 944 >> 3] = HEAPF64[$0 + 2280 >> 3];
  HEAPF64[$1 + 976 >> 3] = HEAPF64[$0 + 2288 >> 3];
  HEAPF64[$1 + 1008 >> 3] = HEAPF64[$0 + 2304 >> 3];
  HEAPF64[$1 + 1040 >> 3] = HEAPF64[$0 + 2312 >> 3];
  HEAPF64[$1 + 1072 >> 3] = HEAPF64[$0 + 2328 >> 3];
  HEAPF64[$1 + 1104 >> 3] = HEAPF64[$0 + 2344 >> 3];
  HEAPF64[$1 + 1136 >> 3] = HEAPF64[$0 + 2360 >> 3];
  $3 = HEAPF64[$0 + 2376 >> 3];
  HEAP32[$1 + 824 >> 2] = 0;
  HEAP32[$1 + 828 >> 2] = 0;
  HEAPF64[$1 + 1168 >> 3] = $3;
  HEAP32[$1 + 1176 >> 2] = 0;
  HEAP32[$1 + 1180 >> 2] = 0;
  HEAP32[$1 + 1144 >> 2] = 0;
  HEAP32[$1 + 1148 >> 2] = 0;
  HEAP32[$1 + 1112 >> 2] = 0;
  HEAP32[$1 + 1116 >> 2] = 0;
  HEAP32[$1 + 1080 >> 2] = 0;
  HEAP32[$1 + 1084 >> 2] = 0;
  HEAP32[$1 + 1048 >> 2] = 0;
  HEAP32[$1 + 1052 >> 2] = 0;
  HEAP32[$1 + 1016 >> 2] = 0;
  HEAP32[$1 + 1020 >> 2] = 0;
  HEAP32[$1 + 984 >> 2] = 0;
  HEAP32[$1 + 988 >> 2] = 0;
  HEAP32[$1 + 952 >> 2] = 0;
  HEAP32[$1 + 956 >> 2] = 0;
  HEAP32[$1 + 920 >> 2] = 0;
  HEAP32[$1 + 924 >> 2] = 0;
  HEAP32[$1 + 888 >> 2] = 0;
  HEAP32[$1 + 892 >> 2] = 0;
  HEAP32[$1 + 856 >> 2] = 0;
  HEAP32[$1 + 860 >> 2] = 0;
  HEAP32[$1 + 792 >> 2] = 0;
  HEAP32[$1 + 796 >> 2] = 0;
  HEAP8[$1 + 1184 | 0] = HEAPU8[$0 + 1944 | 0];
  HEAP8[$1 + 1188 | 0] = HEAPU8[$0 + 1968 | 0];
  HEAP8[$1 + 1192 | 0] = HEAPU8[$0 + 1984 | 0];
  HEAP8[$1 + 1196 | 0] = HEAPU8[$0 + 2e3 | 0];
  HEAP8[$1 + 1200 | 0] = HEAPU8[$0 + 2016 | 0];
  HEAP8[$1 + 1185 | 0] = HEAPU8[$0 + 2120 | 0];
  HEAP8[$1 + 1189 | 0] = HEAPU8[$0 + 2144 | 0];
  HEAP8[$1 + 1193 | 0] = HEAPU8[$0 + 2160 | 0];
  HEAP8[$1 + 1197 | 0] = HEAPU8[$0 + 2176 | 0];
  HEAP8[$1 + 1201 | 0] = HEAPU8[$0 + 2192 | 0];
  HEAP8[$1 + 1186 | 0] = HEAPU8[$0 + 2296 | 0];
  HEAP8[$1 + 1190 | 0] = HEAPU8[$0 + 2320 | 0];
  HEAP8[$1 + 1194 | 0] = HEAPU8[$0 + 2336 | 0];
  HEAP8[$1 + 1198 | 0] = HEAPU8[$0 + 2352 | 0];
  $2 = HEAPU8[$0 + 2368 | 0];
  HEAP8[$1 + 1203 | 0] = 0;
  HEAP8[$1 + 1199 | 0] = 0;
  HEAP8[$1 + 1195 | 0] = 0;
  HEAP8[$1 + 1191 | 0] = 0;
  HEAP8[$1 + 1187 | 0] = 0;
  HEAP8[$1 + 1202 | 0] = $2;
  HEAPF64[$1 + 360 >> 3] = HEAPF64[$0 + 1328 >> 3];
  HEAPF64[$1 + 368 >> 3] = HEAPF64[$0 + 1336 >> 3];
  HEAPF64[$1 + 376 >> 3] = HEAPF64[$0 + 1344 >> 3];
  HEAPF64[$1 + 384 >> 3] = HEAPF64[$0 + 1352 >> 3];
  HEAPF64[$1 + 328 >> 3] = HEAPF64[$0 + 1360 >> 3];
  HEAPF64[$1 + 336 >> 3] = HEAPF64[$0 + 1368 >> 3];
  HEAPF64[$1 + 344 >> 3] = HEAPF64[$0 + 1376 >> 3];
  HEAPF64[$1 + 352 >> 3] = HEAPF64[$0 + 1384 >> 3];
  HEAPF64[$1 + 392 >> 3] = HEAPF64[$0 + 1392 >> 3];
  HEAPF64[$1 + 400 >> 3] = HEAPF64[$0 + 1400 >> 3];
  HEAPF64[$1 + 408 >> 3] = HEAPF64[$0 + 1408 >> 3];
  HEAPF64[$1 + 416 >> 3] = HEAPF64[$0 + 1416 >> 3];
  HEAPF64[$1 + 424 >> 3] = HEAPF64[$0 + 1424 >> 3];
  HEAPF64[$1 + 432 >> 3] = HEAPF64[$0 + 1432 >> 3];
  HEAPF64[$1 + 440 >> 3] = HEAPF64[$0 + 1440 >> 3];
  HEAPF64[$1 + 448 >> 3] = HEAPF64[$0 + 1448 >> 3];
  HEAPF64[$1 + 456 >> 3] = HEAPF64[$0 + 1456 >> 3];
  HEAPF64[$1 + 464 >> 3] = HEAPF64[$0 + 1464 >> 3];
  HEAPF64[$1 + 472 >> 3] = HEAPF64[$0 + 1472 >> 3];
  HEAPF64[$1 + 480 >> 3] = HEAPF64[$0 + 1480 >> 3];
  HEAPF64[$1 + 488 >> 3] = HEAPF64[$0 + 1488 >> 3];
  HEAPF64[$1 + 496 >> 3] = HEAPF64[$0 + 1496 >> 3];
  HEAPF64[$1 + 504 >> 3] = HEAPF64[$0 + 1504 >> 3];
  HEAPF64[$1 + 512 >> 3] = HEAPF64[$0 + 1512 >> 3];
  HEAPF64[$1 + 520 >> 3] = HEAPF64[$0 + 1520 >> 3];
  HEAPF64[$1 + 528 >> 3] = HEAPF64[$0 + 1528 >> 3];
  HEAPF64[$1 + 536 >> 3] = HEAPF64[$0 + 1536 >> 3];
  HEAPF64[$1 + 544 >> 3] = HEAPF64[$0 + 1544 >> 3];
  HEAPF64[$1 + 552 >> 3] = HEAPF64[$0 + 1712 >> 3];
  HEAPF64[$1 + 560 >> 3] = HEAPF64[$0 + 1720 >> 3];
  HEAPF64[$1 + 568 >> 3] = HEAPF64[$0 + 1728 >> 3];
  HEAPF64[$1 + 576 >> 3] = HEAPF64[$0 + 1736 >> 3];
  HEAPF64[$1 + 584 >> 3] = HEAPF64[$0 + 1744 >> 3];
  HEAPF64[$1 + 592 >> 3] = HEAPF64[$0 + 1752 >> 3];
  HEAPF64[$1 + 600 >> 3] = HEAPF64[$0 + 1760 >> 3];
  HEAPF64[$1 + 608 >> 3] = HEAPF64[$0 + 1768 >> 3];
  HEAPF64[$1 + 616 >> 3] = HEAPF64[$0 + 1568 >> 3];
  HEAPF64[$1 + 624 >> 3] = HEAPF64[$0 + 1576 >> 3];
  HEAPF64[$1 + 632 >> 3] = HEAPF64[$0 + 1584 >> 3];
  HEAPF64[$1 + 640 >> 3] = HEAPF64[$0 + 1592 >> 3];
  HEAPF64[$1 + 648 >> 3] = HEAPF64[$0 + 1600 >> 3];
  HEAPF64[$1 + 656 >> 3] = HEAPF64[$0 + 1608 >> 3];
  HEAPF64[$1 + 664 >> 3] = HEAPF64[$0 + 1616 >> 3];
  HEAPF64[$1 + 672 >> 3] = HEAPF64[$0 + 1624 >> 3];
  HEAPF64[$1 + 680 >> 3] = HEAPF64[$0 + 1640 >> 3];
  HEAPF64[$1 + 688 >> 3] = HEAPF64[$0 + 1648 >> 3];
  HEAPF64[$1 + 696 >> 3] = HEAPF64[$0 + 1656 >> 3];
  HEAPF64[$1 + 704 >> 3] = HEAPF64[$0 + 1664 >> 3];
  HEAPF64[$1 + 712 >> 3] = HEAPF64[$0 + 1680 >> 3];
  HEAPF64[$1 + 720 >> 3] = HEAPF64[$0 + 1688 >> 3];
  HEAPF64[$1 + 728 >> 3] = HEAPF64[$0 + 1696 >> 3];
  HEAPF64[$1 + 736 >> 3] = HEAPF64[$0 + 1704 >> 3];
  HEAP8[$1 + 744 | 0] = HEAPU8[$0 + 1552 | 0];
  HEAP8[$1 + 748 | 0] = HEAPU8[$0 + 1555 | 0];
  HEAP8[$1 + 752 | 0] = HEAPU8[$0 + 1558 | 0];
  HEAP8[$1 + 756 | 0] = HEAPU8[$0 + 1632 | 0];
  HEAP8[$1 + 760 | 0] = HEAPU8[$0 + 1672 | 0];
  HEAP8[$1 + 745 | 0] = HEAPU8[$0 + 1553 | 0];
  HEAP8[$1 + 749 | 0] = HEAPU8[$0 + 1556 | 0];
  HEAP8[$1 + 753 | 0] = HEAPU8[$0 + 1559 | 0];
  HEAP8[$1 + 757 | 0] = HEAPU8[$0 + 1633 | 0];
  HEAP8[$1 + 761 | 0] = HEAPU8[$0 + 1673 | 0];
  HEAP8[$1 + 746 | 0] = HEAPU8[$0 + 1554 | 0];
  HEAP8[$1 + 750 | 0] = HEAPU8[$0 + 1557 | 0];
  HEAP8[$1 + 754 | 0] = HEAPU8[$0 + 1560 | 0];
  HEAP8[$1 + 758 | 0] = HEAPU8[$0 + 1634 | 0];
  $2 = HEAPU8[$0 + 1674 | 0];
  HEAP8[$1 + 763 | 0] = 0;
  HEAP8[$1 + 759 | 0] = 0;
  HEAP8[$1 + 755 | 0] = 0;
  HEAP8[$1 + 751 | 0] = 0;
  HEAP8[$1 + 747 | 0] = 0;
  HEAP8[$1 + 762 | 0] = $2;
  $0 = HEAP32[$0 + 2416 >> 2];
  HEAP32[$1 + 764 >> 2] = 0;
  HEAP32[$1 + 1204 >> 2] = $0;
  return 4322;
 }
 
 function __cxx_global_array_dtor($0) {
  $0 = $0 | 0;
  HEAP32[8490] = 25784;
  $0 = HEAP32[8746];
  if (!(!$0 | !HEAPU8[34988])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP8[34988] = 1;
  HEAP32[8744] = 0;
  HEAP32[8745] = 0;
  HEAP32[8746] = 0;
  btCollisionObject___btCollisionObject_28_29(33960);
 }
 
 function btRaycastVehicle___btRaycastVehicle_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 29508;
  $1 = HEAP32[$0 + 148 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 152 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP8[$0 + 152 | 0] = 1;
  $1 = $0 + 140 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 76 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 80 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $1 = $0 + 68 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 56 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 60 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 20 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btRaycastVehicle___btRaycastVehicle_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btRaycastVehicle___btRaycastVehicle_28_29($0));
 }
 
 function btRaycastVehicle__updateWheelTransform_28int_2c_20bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0;
  $3 = __stack_pointer - 128 | 0;
  __stack_pointer = $3;
  $1 = HEAP32[$0 + 148 >> 2] + Math_imul($1, 552) | 0;
  HEAP8[$1 + 168 | 0] = 0;
  $0 = HEAP32[$0 + 120 >> 2];
  $11 = $0 + 16 | 0;
  $13 = HEAP32[$11 + 4 >> 2];
  $2 = $3 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$2 + 4 >> 2] = $13;
  $11 = $0 + 24 | 0;
  $13 = HEAP32[$11 + 4 >> 2];
  $2 = $3 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$2 + 4 >> 2] = $13;
  $11 = $0 + 32 | 0;
  $13 = HEAP32[$11 + 4 >> 2];
  $2 = $3 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$2 + 4 >> 2] = $13;
  $19 = HEAP32[$0 + 8 >> 2];
  $17 = HEAP32[$0 + 12 >> 2];
  $11 = $0 - -64 | 0;
  $13 = HEAP32[$11 + 4 >> 2];
  $2 = $3 + 56 | 0;
  HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$2 + 4 >> 2] = $13;
  $13 = $0 + 56 | 0;
  $2 = HEAP32[$13 + 4 >> 2];
  $11 = $3 + 48 | 0;
  HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$11 + 4 >> 2] = $2;
  $2 = $0 + 48 | 0;
  $26 = HEAP32[$2 + 4 >> 2];
  $13 = $3 + 40 | 0;
  HEAP32[$13 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$13 + 4 >> 2] = $26;
  $2 = $0 + 40 | 0;
  $20 = HEAP32[$2 >> 2];
  $38 = HEAP32[$2 + 4 >> 2];
  $2 = $0 + 96 | 0;
  $26 = HEAP32[$2 + 4 >> 2];
  $29 = $3 + 88 | 0;
  HEAP32[$29 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$29 + 4 >> 2] = $26;
  $26 = $0 + 88 | 0;
  $29 = HEAP32[$26 + 4 >> 2];
  $2 = $3 + 80 | 0;
  HEAP32[$2 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$2 + 4 >> 2] = $29;
  $29 = $0 + 80 | 0;
  $53 = HEAP32[$29 + 4 >> 2];
  $26 = $3 + 72 | 0;
  HEAP32[$26 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$26 + 4 >> 2] = $53;
  HEAP32[$3 >> 2] = $19;
  HEAP32[$3 + 4 >> 2] = $17;
  HEAP32[$3 + 32 >> 2] = $20;
  HEAP32[$3 + 36 >> 2] = $38;
  $19 = $0 + 72 | 0;
  $17 = HEAP32[$19 + 4 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$3 + 68 >> 2] = $17;
  $19 = $0 + 128 | 0;
  $17 = HEAP32[$19 + 4 >> 2];
  $20 = $3 + 120 | 0;
  HEAP32[$20 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$20 + 4 >> 2] = $17;
  $17 = $0 + 120 | 0;
  $20 = HEAP32[$17 + 4 >> 2];
  $19 = $3 + 112 | 0;
  HEAP32[$19 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$19 + 4 >> 2] = $20;
  $20 = $0 + 112 | 0;
  $38 = HEAP32[$20 + 4 >> 2];
  $17 = $3 + 104 | 0;
  HEAP32[$17 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$17 + 4 >> 2] = $38;
  $0 = $0 + 104 | 0;
  $20 = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 96 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 100 >> 2] = $20;
  $0 = $1 + 96 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $20 = $1 + 88 | 0;
  $14 = HEAPF64[$1 + 320 >> 3];
  $9 = HEAPF64[$2 >> 3];
  $10 = HEAPF64[$1 + 304 >> 3];
  $16 = HEAPF64[$3 + 64 >> 3];
  $7 = HEAPF64[$1 + 312 >> 3];
  $21 = HEAPF64[$26 >> 3];
  HEAPF64[$20 >> 3] = $14 * $9 + ($10 * $16 + $7 * $21) + HEAPF64[$19 >> 3];
  $2 = $1 + 80 | 0;
  $5 = HEAPF64[$11 >> 3];
  $12 = HEAPF64[$3 + 32 >> 3];
  $8 = HEAPF64[$13 >> 3];
  HEAPF64[$2 >> 3] = $14 * $5 + ($10 * $12 + $7 * $8) + HEAPF64[$17 >> 3];
  $4 = $14;
  $14 = HEAPF64[$3 + 16 >> 3];
  $25 = $10;
  $10 = HEAPF64[$3 >> 3];
  $18 = $7;
  $7 = HEAPF64[$3 + 8 >> 3];
  HEAPF64[$1 + 72 >> 3] = $4 * $14 + ($25 * $10 + $18 * $7) + HEAPF64[$3 + 96 >> 3];
  $0 = $1 + 128 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1 + 160 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $13 = $1 + 120 | 0;
  $6 = HEAPF64[$1 + 352 >> 3];
  $15 = HEAPF64[$1 + 336 >> 3];
  $4 = HEAPF64[$1 + 344 >> 3];
  HEAPF64[$13 >> 3] = $9 * $6 + ($16 * $15 + $21 * $4);
  $11 = $1 + 112 | 0;
  HEAPF64[$11 >> 3] = $5 * $6 + ($12 * $15 + $4 * $8);
  HEAPF64[$1 + 104 >> 3] = $14 * $6 + ($10 * $15 + $7 * $4);
  $17 = $1 + 152 | 0;
  $4 = $9;
  $9 = HEAPF64[$1 + 384 >> 3];
  $25 = $16;
  $16 = HEAPF64[$1 + 368 >> 3];
  $18 = $21;
  $21 = HEAPF64[$1 + 376 >> 3];
  HEAPF64[$17 >> 3] = $4 * $9 + ($25 * $16 + $18 * $21);
  $19 = $1 + 144 | 0;
  HEAPF64[$19 >> 3] = $5 * $9 + ($12 * $16 + $8 * $21);
  HEAPF64[$1 + 136 >> 3] = $14 * $9 + ($10 * $16 + $7 * $21);
  __stack_pointer = $3 + 128 | 0;
  $0 = $1 + 264 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1 + 232 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1 + 200 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAPF64[$11 >> 3];
  $21 = HEAPF64[$1 + 104 >> 3];
  $9 = HEAPF64[$13 >> 3];
  $10 = HEAPF64[$1 + 456 >> 3] * .5;
  $4 = sin($10);
  $5 = cos($10);
  $10 = HEAPF64[$19 >> 3];
  $16 = HEAPF64[$1 + 136 >> 3];
  $7 = $21 * $10 - $14 * $16;
  $25 = $7;
  $18 = $7 * $7;
  $7 = HEAPF64[$17 >> 3];
  $30 = $14 * $7 - $10 * $9;
  $31 = $9 * $16 - $7 * $21;
  $32 = 1.0 / Math_sqrt($18 + ($30 * $30 + $31 * $31));
  $39 = $25 * $32;
  $6 = HEAPF64[$1 + 464 >> 3] * -.5;
  $8 = sin($6) / Math_sqrt($7 * $7 + ($16 * $16 + $10 * $10));
  $12 = $16 * $8;
  $6 = cos($6);
  $27 = $7 * $8;
  $15 = $10 * $8;
  $23 = 2.0 / ($6 * $6 + ($27 * $27 + ($12 * $12 + $15 * $15)));
  $33 = $12 * $23;
  $43 = $12 * $33;
  $22 = $15 * $23;
  $25 = $15 * $22;
  $40 = 1.0 - ($43 + $25);
  $4 = $4 / Math_sqrt($9 * $9 + ($21 * $21 + $14 * $14));
  $37 = -$21;
  $8 = $4 * $37;
  $28 = $4 * -$9;
  $4 = $4 * -$14;
  $24 = 2.0 / ($5 * $5 + ($28 * $28 + ($8 * $8 + $4 * $4)));
  $34 = $8 * $24;
  $44 = $8 * $34;
  $35 = $4 * $24;
  $45 = $4 * $35;
  $36 = 1.0 - ($44 + $45);
  $23 = $27 * $23;
  $18 = $12 * $23;
  $46 = $6 * $22;
  $41 = $18 + $46;
  $24 = $28 * $24;
  $47 = $8 * $24;
  $48 = $5 * $35;
  $42 = $47 - $48;
  $49 = $4 * $24;
  $50 = $5 * $34;
  $4 = $49 + $50;
  $51 = $15 * $23;
  $52 = $6 * $33;
  $15 = $51 - $52;
  $33 = $40 * $36 + ($41 * $42 + $4 * $15);
  $30 = $30 * $32;
  $34 = $18 - $46;
  $18 = $25;
  $25 = $27 * $23;
  $27 = 1.0 - ($18 + $25);
  $22 = $12 * $22;
  $18 = $6 * $23;
  $12 = $22 + $18;
  $6 = $34 * $36 + ($27 * $42 + $4 * $12);
  $23 = $31 * $32;
  $31 = $51 + $52;
  $32 = $22 - $18;
  $18 = $4;
  $4 = 1.0 - ($43 + $25);
  $22 = $31 * $36 + ($32 * $42 + $18 * $4);
  HEAPF64[$1 + 256 >> 3] = $39 * $33 + ($30 * $6 + $23 * $22);
  HEAPF64[$1 + 248 >> 3] = $37 * $6 - $22 * $14 - $9 * $33;
  HEAPF64[$1 + 240 >> 3] = $7 * $33 + ($16 * $6 + $10 * $22);
  $6 = $49 - $50;
  $22 = $8 * $35;
  $35 = $5 * $24;
  $5 = $22 + $35;
  $36 = $28 * $24;
  $8 = 1.0 - ($44 + $36);
  $28 = $40 * $6 + ($41 * $5 + $15 * $8);
  $24 = $34 * $6 + ($27 * $5 + $12 * $8);
  $5 = $31 * $6 + ($32 * $5 + $8 * $4);
  HEAPF64[$1 + 224 >> 3] = $39 * $28 + ($30 * $24 + $23 * $5);
  HEAPF64[$1 + 216 >> 3] = $37 * $24 - $5 * $14 - $9 * $28;
  HEAPF64[$1 + 208 >> 3] = $7 * $28 + ($16 * $24 + $10 * $5);
  $5 = $47 + $48;
  $8 = 1.0 - ($45 + $36);
  $6 = $22 - $35;
  $15 = $40 * $5 + ($41 * $8 + $6 * $15);
  $12 = $34 * $5 + ($27 * $8 + $6 * $12);
  $5 = $31 * $5 + ($32 * $8 + $6 * $4);
  HEAPF64[$1 + 192 >> 3] = $39 * $15 + ($30 * $12 + $23 * $5);
  HEAPF64[$1 + 184 >> 3] = $37 * $12 - $5 * $14 - $9 * $15;
  HEAPF64[$1 + 176 >> 3] = $7 * $15 + ($16 * $12 + $10 * $5);
  $0 = $1 + 296 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $7 = $9;
  $9 = HEAPF64[$1 + 64 >> 3];
  HEAPF64[$1 + 288 >> 3] = $7 * $9 + HEAPF64[$20 >> 3];
  HEAPF64[$1 + 280 >> 3] = $14 * $9 + HEAPF64[$2 >> 3];
  HEAPF64[$1 + 272 >> 3] = HEAPF64[$1 + 72 >> 3] + $21 * $9;
 }
 
 function btRaycastVehicle__updateVehicle_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
  $18 = __stack_pointer + -64 | 0;
  __stack_pointer = $18;
  $13 = HEAP32[$0 + 140 >> 2];
  if (($13 | 0) > 0) {
   while (1) {
    btRaycastVehicle__updateWheelTransform_28int_2c_20bool_29($0, $9);
    $13 = HEAP32[$0 + 140 >> 2];
    $9 = $9 + 1 | 0;
    if (($13 | 0) > ($9 | 0)) {
     continue
    }
    break;
   }
  }
  $3 = HEAP32[$0 + 120 >> 2];
  $9 = $3 + 688 | 0;
  $5 = HEAPF64[$9 >> 3];
  $8 = $5 * $5;
  $5 = HEAPF64[$3 + 672 >> 3];
  $10 = $5 * $5;
  $6 = $3 + 680 | 0;
  $5 = HEAPF64[$6 >> 3];
  $5 = Math_sqrt($8 + ($10 + $5 * $5)) * 3.6;
  HEAPF64[$0 + 112 >> 3] = $5;
  $2 = $3 + (HEAP32[$0 + 132 >> 2] << 3) | 0;
  if (HEAPF64[$2 + 72 >> 3] * HEAPF64[$9 >> 3] + (HEAPF64[$2 + 8 >> 3] * HEAPF64[$3 + 672 >> 3] + HEAPF64[$2 + 40 >> 3] * HEAPF64[$6 >> 3]) < 0.0) {
   HEAPF64[$0 + 112 >> 3] = -$5
  }
  label$4 : {
   if (($13 | 0) <= 0) {
    break label$4
   }
   $9 = 0;
   $13 = 0;
   while (1) {
    $6 = __stack_pointer - 112 | 0;
    __stack_pointer = $6;
    $3 = HEAP32[$0 + 148 >> 2] + $9 | 0;
    HEAP8[$3 + 168 | 0] = 0;
    $2 = HEAP32[$0 + 120 >> 2];
    $26 = HEAPF64[$2 + 104 >> 3];
    $5 = HEAPF64[$2 + 16 >> 3];
    $8 = HEAPF64[$2 + 24 >> 3];
    $27 = HEAPF64[$2 + 112 >> 3];
    $10 = HEAPF64[$2 + 40 >> 3];
    $14 = HEAPF64[$2 + 48 >> 3];
    $15 = HEAPF64[$2 + 56 >> 3];
    $12 = HEAPF64[$2 + 120 >> 3];
    $20 = HEAPF64[$2 + 72 >> 3];
    $21 = HEAPF64[$2 + 80 >> 3];
    $24 = HEAPF64[$2 + 88 >> 3];
    $25 = HEAPF64[$2 + 8 >> 3];
    $2 = $3 + 96 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $2 = $3 + 88 | 0;
    $23 = $12;
    $12 = HEAPF64[$3 + 320 >> 3];
    $16 = HEAPF64[$3 + 304 >> 3];
    $19 = HEAPF64[$3 + 312 >> 3];
    HEAPF64[$2 >> 3] = $23 + ($24 * $12 + ($20 * $16 + $21 * $19));
    $17 = $3 + 80 | 0;
    HEAPF64[$17 >> 3] = $27 + ($12 * $15 + ($16 * $10 + $14 * $19));
    HEAPF64[$3 + 72 >> 3] = $26 + ($12 * $8 + ($16 * $25 + $5 * $19));
    $4 = $3 + 128 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $3 + 120 | 0;
    $12 = HEAPF64[$3 + 352 >> 3];
    $16 = HEAPF64[$3 + 336 >> 3];
    $19 = HEAPF64[$3 + 344 >> 3];
    HEAPF64[$4 >> 3] = $24 * $12 + ($20 * $16 + $21 * $19);
    $7 = $3 + 112 | 0;
    HEAPF64[$7 >> 3] = $15 * $12 + ($10 * $16 + $14 * $19);
    HEAPF64[$3 + 104 >> 3] = $8 * $12 + ($25 * $16 + $5 * $19);
    $12 = HEAPF64[$3 + 376 >> 3];
    $16 = HEAPF64[$3 + 384 >> 3];
    $19 = HEAPF64[$3 + 368 >> 3];
    $11 = $3 + 160 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    HEAPF64[$3 + 152 >> 3] = $24 * $16 + ($20 * $19 + $21 * $12);
    HEAPF64[$3 + 144 >> 3] = $15 * $16 + ($10 * $19 + $14 * $12);
    HEAPF64[$3 + 136 >> 3] = $8 * $16 + ($25 * $19 + $5 * $12);
    $5 = HEAPF64[$3 + 400 >> 3];
    $11 = $3 + 56 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    $5 = $5 + HEAPF64[$3 + 416 >> 3];
    HEAPF64[$3 + 48 >> 3] = $5 * HEAPF64[$4 >> 3] + HEAPF64[$2 >> 3];
    HEAPF64[$3 + 40 >> 3] = $5 * HEAPF64[$7 >> 3] + HEAPF64[$17 >> 3];
    HEAPF64[$3 + 32 >> 3] = HEAPF64[$3 + 104 >> 3] * $5 + HEAPF64[$3 + 72 >> 3];
    HEAP32[$6 + 72 >> 2] = 0;
    HEAP32[$6 + 76 >> 2] = -1074790400;
    $2 = HEAP32[$0 + 92 >> 2];
    $17 = $3 + 32 | 0;
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $3 + 72 | 0, $17, $6 + 8 | 0) | 0;
    HEAP32[$3 + 172 >> 2] = 0;
    label$1 : {
     if ($2) {
      $2 = HEAP32[$6 + 44 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$6 + 40 >> 2];
      HEAP32[$3 + 4 >> 2] = $2;
      HEAP8[$3 + 168 | 0] = 1;
      $2 = $6 + 8 | 0;
      $4 = $2 + 40 | 0;
      $7 = HEAP32[$4 + 4 >> 2];
      $11 = $3 + 8 | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = $7;
      $4 = $2 + 48 | 0;
      $7 = HEAP32[$4 + 4 >> 2];
      $11 = $3 + 16 | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = $7;
      $2 = $2 + 56 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      $7 = $3 + 24 | 0;
      HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$7 + 4 >> 2] = $4;
      $5 = $5 * HEAPF64[$6 + 72 >> 3];
      if (!HEAPU8[35200]) {
       $2 = $6 + 104 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $2 = $6 + 96 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $4 = $6 + 80 | 0;
       $2 = $4 + 8 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$6 + 80 >> 2] = 0;
       HEAP32[$6 + 84 >> 2] = 0;
       $2 = __stack_pointer - 288 | 0;
       __stack_pointer = $2;
       btCollisionObject__btCollisionObject_28_29(33960);
       HEAP8[34988] = 1;
       HEAP32[8490] = 25784;
       HEAP32[8746] = 0;
       HEAP32[8744] = 0;
       HEAP32[8745] = 0;
       $7 = $2 + 192 | 0;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       $7 = $2 + 216 | 0;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       $7 = $2 + 224 | 0;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       $7 = $4 + 8 | 0;
       $11 = HEAP32[$7 + 4 >> 2];
       $22 = $2 + 160 | 0;
       HEAP32[$22 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$22 + 4 >> 2] = $11;
       $7 = $4 + 16 | 0;
       $11 = HEAP32[$7 + 4 >> 2];
       $22 = $2 + 168 | 0;
       HEAP32[$22 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$22 + 4 >> 2] = $11;
       $7 = $4 + 24 | 0;
       $11 = HEAP32[$7 + 4 >> 2];
       $22 = $2 + 176 | 0;
       HEAP32[$22 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$22 + 4 >> 2] = $11;
       HEAP32[$2 + 144 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       HEAPF64[$2 >> 3] = 0;
       HEAP32[$2 + 184 >> 2] = 0;
       HEAP32[$2 + 188 >> 2] = 0;
       HEAP32[$2 + 208 >> 2] = 0;
       HEAP32[$2 + 212 >> 2] = 0;
       HEAP32[$2 + 200 >> 2] = 0;
       HEAP32[$2 + 204 >> 2] = 1071644672;
       HEAP8[$2 + 248 | 0] = 0;
       HEAP32[$2 + 280 >> 2] = 1202590843;
       HEAP32[$2 + 284 >> 2] = 1065646817;
       HEAP32[$2 + 272 >> 2] = 1202590843;
       HEAP32[$2 + 276 >> 2] = 1065646817;
       HEAP32[$2 + 264 >> 2] = 1202590843;
       HEAP32[$2 + 268 >> 2] = 1065646817;
       HEAP32[$2 + 256 >> 2] = 1202590843;
       HEAP32[$2 + 260 >> 2] = 1064598241;
       HEAP32[$2 + 240 >> 2] = 0;
       HEAP32[$2 + 244 >> 2] = 1072693248;
       HEAP32[$2 + 232 >> 2] = -1717986918;
       HEAP32[$2 + 236 >> 2] = 1072273817;
       $7 = HEAP32[$4 + 4 >> 2];
       HEAP32[$2 + 152 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$2 + 156 >> 2] = $7;
       $4 = $2 + 24 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 32 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 40 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 48 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 56 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 1072693248;
       $4 = $2 - -64 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 72 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 80 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 88 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 96 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 1072693248;
       $4 = $2 + 104 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 112 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 120 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 128 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $2 + 136 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 20 >> 2] = 1072693248;
       btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29(33960, $2);
       __stack_pointer = $2 + 288 | 0;
       $2 = HEAP32[8422];
       if (!$2) {
        HEAP32[8422] = 33696;
        $2 = 33696;
       }
       $4 = HEAP32[8423];
       __inlined_func$__cxa_atexit : {
        if (($4 | 0) == 32) {
         $4 = __wasm_i64_mul(260, 0, 1, 0);
         $2 = dlmalloc($4);
         if (!(!$2 | !(HEAPU8[$2 - 4 | 0] & 3))) {
          memset($2, 0, $4)
         }
         if (!$2) {
          break __inlined_func$__cxa_atexit
         }
         HEAP32[$2 >> 2] = HEAP32[8422];
         HEAP32[8422] = $2;
         $4 = 0;
        }
        HEAP32[8423] = $4 + 1;
        $2 = ($4 << 2) + $2 | 0;
        HEAP32[$2 + 132 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 739;
       }
       HEAP8[35200] = 1;
      }
      $2 = $6 + 104 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $2 = $6 + 96 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $2 = $6 + 80 | 0;
      $4 = $2 + 8 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$6 + 80 >> 2] = 0;
      HEAP32[$6 + 84 >> 2] = 0;
      btRigidBody__setMassProps_28double_2c_20btVector3_20const__29(33960, 0.0, $2);
      HEAP32[$3 + 172 >> 2] = 33960;
      HEAPF64[$3 + 64 >> 3] = $5 - HEAPF64[$3 + 416 >> 3];
      $8 = HEAPF64[$3 + 408 >> 3] * .01;
      $5 = HEAPF64[$3 + 400 >> 3] - $8;
      $10 = HEAPF64[$3 + 64 >> 3];
      $2 = $5 > $10;
      $5 = $2 ? $5 : $10;
      $8 = HEAPF64[$3 + 400 >> 3] + $8;
      if ($2 | $5 > $8) {
       HEAPF64[$3 + 64 >> 3] = $5 > $8 ? $8 : $5
      }
      $2 = HEAP32[$6 + 12 >> 2];
      HEAP32[$17 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$17 + 4 >> 2] = $2;
      $2 = $6 + 8 | 0;
      $4 = $2 + 24 | 0;
      $7 = HEAP32[$4 + 4 >> 2];
      $11 = $17 + 24 | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = $7;
      $4 = $2 + 16 | 0;
      $7 = HEAP32[$4 + 4 >> 2];
      $11 = $17 + 16 | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = $7;
      $2 = $2 + 8 | 0;
      $4 = HEAP32[$2 + 4 >> 2];
      $17 = $17 + 8 | 0;
      HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$17 + 4 >> 2] = $4;
      $8 = HEAPF64[$3 + 16 >> 3];
      $10 = HEAPF64[$3 >> 3];
      $14 = HEAPF64[$3 + 8 >> 3];
      $5 = $8 * HEAPF64[$3 + 120 >> 3] + ($10 * HEAPF64[$3 + 104 >> 3] + $14 * HEAPF64[$3 + 112 >> 3]);
      if ($5 >= -.1) {
       HEAP32[$3 + 528 >> 2] = 0;
       HEAP32[$3 + 532 >> 2] = 0;
       $5 = 10.0;
       break label$1;
      }
      $5 = -1.0 / $5;
      $12 = $8;
      $2 = HEAP32[$0 + 120 >> 2];
      $8 = HEAPF64[$2 + 704 >> 3];
      $15 = HEAPF64[$3 + 40 >> 3] - HEAPF64[$2 + 112 >> 3];
      $20 = HEAPF64[$3 + 32 >> 3] - HEAPF64[$2 + 104 >> 3];
      $21 = HEAPF64[$2 + 712 >> 3];
      $16 = $12 * ($8 * $15 - $20 * $21 + HEAPF64[$2 + 688 >> 3]);
      $12 = $10;
      $10 = HEAPF64[$3 + 48 >> 3] - HEAPF64[$2 + 120 >> 3];
      $23 = $15;
      $15 = HEAPF64[$2 + 720 >> 3];
      HEAPF64[$3 + 528 >> 3] = $5 * ($16 + ($12 * ($21 * $10 - $23 * $15 + HEAPF64[$2 + 672 >> 3]) + $14 * ($15 * $20 - $10 * $8 + HEAPF64[$2 + 680 >> 3])));
      break label$1;
     }
     $5 = HEAPF64[$3 + 400 >> 3];
     HEAP32[$3 + 528 >> 2] = 0;
     HEAP32[$3 + 532 >> 2] = 0;
     HEAPF64[$3 + 64 >> 3] = $5;
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 28 >> 2] = 0;
     HEAPF64[$3 + 16 >> 3] = -HEAPF64[$3 + 120 >> 3];
     HEAPF64[$3 + 8 >> 3] = -HEAPF64[$3 + 112 >> 3];
     HEAPF64[$3 >> 3] = -HEAPF64[$3 + 104 >> 3];
     $5 = 1.0;
    }
    HEAPF64[$3 + 520 >> 3] = $5;
    __stack_pointer = $6 + 112 | 0;
    $9 = $9 + 552 | 0;
    $13 = $13 + 1 | 0;
    $3 = HEAP32[$0 + 140 >> 2];
    if (($13 | 0) < ($3 | 0)) {
     continue
    }
    break;
   };
   if (($3 | 0) <= 0) {
    break label$4
   }
   $8 = 1.0 / HEAPF64[HEAP32[$0 + 120 >> 2] + 736 >> 3];
   $3 = 0;
   $13 = 536;
   while (1) {
    $5 = 0.0;
    $2 = HEAP32[$0 + 148 >> 2] + $13 | 0;
    if (HEAPU8[$2 - 368 | 0]) {
     $5 = HEAPF64[$2 - 8 >> 3];
     $5 = Math_max($8 * (HEAPF64[$2 - 112 >> 3] * (HEAPF64[($2 - 536 | 0) + 400 >> 3] - HEAPF64[$2 - 472 >> 3]) * HEAPF64[$2 - 16 >> 3] - HEAPF64[$2 + ($5 < 0.0 ? -104 : -96) >> 3] * $5), 0.0);
    }
    HEAPF64[$2 >> 3] = $5;
    $13 = $13 + 552 | 0;
    $3 = $3 + 1 | 0;
    $2 = HEAP32[$0 + 140 >> 2];
    if (($3 | 0) < ($2 | 0)) {
     continue
    }
    break;
   };
   if (($2 | 0) <= 0) {
    break label$4
   }
   $6 = 0;
   $3 = 536;
   while (1) {
    $2 = HEAP32[$0 + 148 >> 2] + $3 | 0;
    $5 = HEAPF64[$2 >> 3];
    $8 = HEAPF64[$2 - 48 >> 3];
    $10 = HEAPF64[$2 - 536 >> 3];
    $14 = HEAPF64[$2 - 528 >> 3];
    $15 = HEAPF64[$2 - 520 >> 3];
    HEAP32[$18 + 56 >> 2] = 0;
    HEAP32[$18 + 60 >> 2] = 0;
    $5 = $5 > $8 ? $8 : $5;
    HEAPF64[$18 + 48 >> 3] = $15 * $5 * $1;
    HEAPF64[$18 + 40 >> 3] = $5 * $14 * $1;
    HEAPF64[$18 + 32 >> 3] = $10 * $5 * $1;
    HEAP32[$18 + 24 >> 2] = 0;
    HEAP32[$18 + 28 >> 2] = 0;
    $9 = HEAP32[$0 + 120 >> 2];
    HEAPF64[$18 + 16 >> 3] = HEAPF64[$2 - 488 >> 3] - HEAPF64[$9 + 120 >> 3];
    HEAPF64[$18 + 8 >> 3] = HEAPF64[$2 - 496 >> 3] - HEAPF64[$9 + 112 >> 3];
    HEAPF64[$18 >> 3] = HEAPF64[$2 - 504 >> 3] - HEAPF64[$9 + 104 >> 3];
    btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($9, $18 + 32 | 0, $18);
    $3 = $3 + 552 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 140 >> 2]) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  $6 = HEAP32[$0 + 140 >> 2];
  if (($6 | 0) > 0) {
   $17 = HEAP32[$0 + 148 >> 2];
   $9 = $17 + 472 | 0;
   $13 = HEAP32[$0 + 16 >> 2];
   $0 = HEAP32[$0 + 120 >> 2];
   $3 = 0;
   while (1) {
    label$11 : {
     if (HEAPU8[$9 - 304 | 0]) {
      $2 = $9 - 8 | 0;
      $5 = HEAPF64[$2 >> 3];
      $10 = HEAPF64[$13 + 16 >> 3];
      $14 = HEAPF64[$9 - 456 >> 3];
      $15 = HEAPF64[$13 >> 3];
      $20 = HEAPF64[$9 - 472 >> 3];
      $21 = HEAPF64[$13 + 8 >> 3];
      $24 = HEAPF64[$9 - 464 >> 3];
      $8 = $10 * $14 + ($15 * $20 + $21 * $24);
      $23 = $10 - $14 * $8;
      $10 = HEAPF64[$0 + 704 >> 3];
      $14 = HEAPF64[$9 - 392 >> 3] - HEAPF64[$0 + 112 >> 3];
      $25 = HEAPF64[$9 - 400 >> 3] - HEAPF64[$0 + 104 >> 3];
      $12 = HEAPF64[$0 + 712 >> 3];
      $16 = $23 * ($10 * $14 - $25 * $12 + HEAPF64[$0 + 688 >> 3]);
      $19 = $15 - $20 * $8;
      $15 = HEAPF64[$9 - 384 >> 3] - HEAPF64[$0 + 120 >> 3];
      $23 = $14;
      $14 = HEAPF64[$0 + 720 >> 3];
      $8 = ($16 + ($19 * ($12 * $15 - $23 * $14 + HEAPF64[$0 + 672 >> 3]) + ($14 * $25 - $15 * $10 + HEAPF64[$0 + 680 >> 3]) * ($21 - $24 * $8))) * $1 / HEAPF64[$9 - 56 >> 3];
      $10 = $8;
      break label$11;
     }
     $2 = (Math_imul($3, 552) + $17 | 0) + 464 | 0;
     $8 = HEAPF64[$9 - 8 >> 3];
     $5 = HEAPF64[$9 >> 3];
     $10 = $5;
    }
    HEAPF64[$9 >> 3] = $10 * .99;
    HEAPF64[$2 >> 3] = $5 + $8;
    $13 = $13 + 32 | 0;
    $9 = $9 + 552 | 0;
    $3 = $3 + 1 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $18 - -64 | 0;
 }
 
 function btRaycastVehicle__updateFriction_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
  $11 = __stack_pointer - 192 | 0;
  __stack_pointer = $11;
  $3 = HEAP32[$0 + 140 >> 2];
  label$1 : {
   if (!$3) {
    break label$1
   }
   if (!(($3 | 0) <= HEAP32[$0 + 8 >> 2] | ($3 | 0) <= HEAP32[$0 + 12 >> 2])) {
    $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 5);
    $4 = HEAP32[$0 + 8 >> 2];
    label$3 : {
     if (($4 | 0) <= 0) {
      break label$3
     }
     if (($4 | 0) != 1) {
      $19 = $4 & -2;
      while (1) {
       $2 = HEAP32[$0 + 16 >> 2] + $6 | 0;
       $10 = HEAP32[$2 + 4 >> 2];
       $7 = $6 + $13 | 0;
       HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$7 + 4 >> 2] = $10;
       $10 = $2 + 24 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 24 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $10 = $2 + 16 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 16 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $2 = $2 + 8 | 0;
       $10 = HEAP32[$2 + 4 >> 2];
       $12 = $7 + 8 | 0;
       HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$12 + 4 >> 2] = $10;
       $2 = HEAP32[$0 + 16 >> 2] + $6 | 0;
       $10 = $2 + 40 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 40 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $10 = $2 + 48 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 48 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $10 = $2 + 56 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 56 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $2 = $2 + 32 | 0;
       $10 = HEAP32[$2 + 4 >> 2];
       $7 = $7 + 32 | 0;
       HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$7 + 4 >> 2] = $10;
       $6 = $6 - -64 | 0;
       $5 = $5 + 2 | 0;
       if (($19 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
     }
     if (!($4 & 1)) {
      break label$3
     }
     $2 = $5 << 5;
     $7 = $2 + $13 | 0;
     $2 = $2 + HEAP32[$0 + 16 >> 2] | 0;
     $6 = HEAP32[$2 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$7 + 4 >> 2] = $6;
     $6 = $2 + 24 | 0;
     $5 = HEAP32[$6 + 4 >> 2];
     $4 = $7 + 24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $6 = $2 + 16 | 0;
     $5 = HEAP32[$6 + 4 >> 2];
     $4 = $7 + 16 | 0;
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $2 = $2 + 8 | 0;
     $6 = HEAP32[$2 + 4 >> 2];
     $7 = $7 + 8 | 0;
     HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$7 + 4 >> 2] = $6;
    }
    $7 = HEAP32[$0 + 16 >> 2];
    if (!(!$7 | !HEAPU8[$0 + 20 | 0])) {
     btAlignedFreeInternal_28void__29($7)
    }
    HEAP32[$0 + 16 >> 2] = $13;
    HEAP8[$0 + 20 | 0] = 1;
    HEAP32[$0 + 12 >> 2] = $3;
   }
   HEAP32[$0 + 8 >> 2] = $3;
   if (!(($3 | 0) <= HEAP32[$0 + 28 >> 2] | ($3 | 0) <= HEAP32[$0 + 32 >> 2])) {
    $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 5);
    $4 = HEAP32[$0 + 28 >> 2];
    label$8 : {
     if (($4 | 0) <= 0) {
      break label$8
     }
     $5 = 0;
     if (($4 | 0) != 1) {
      $19 = $4 & -2;
      $6 = 0;
      while (1) {
       $2 = HEAP32[$0 + 36 >> 2] + $6 | 0;
       $10 = HEAP32[$2 + 4 >> 2];
       $7 = $6 + $13 | 0;
       HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$7 + 4 >> 2] = $10;
       $10 = $2 + 24 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 24 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $10 = $2 + 16 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 16 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $2 = $2 + 8 | 0;
       $10 = HEAP32[$2 + 4 >> 2];
       $12 = $7 + 8 | 0;
       HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$12 + 4 >> 2] = $10;
       $2 = HEAP32[$0 + 36 >> 2] + $6 | 0;
       $10 = $2 + 40 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 40 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $10 = $2 + 48 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 48 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $10 = $2 + 56 | 0;
       $12 = HEAP32[$10 + 4 >> 2];
       $9 = $7 + 56 | 0;
       HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$9 + 4 >> 2] = $12;
       $2 = $2 + 32 | 0;
       $10 = HEAP32[$2 + 4 >> 2];
       $7 = $7 + 32 | 0;
       HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$7 + 4 >> 2] = $10;
       $6 = $6 - -64 | 0;
       $5 = $5 + 2 | 0;
       if (($19 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
     }
     if (!($4 & 1)) {
      break label$8
     }
     $2 = $5 << 5;
     $7 = $2 + $13 | 0;
     $2 = $2 + HEAP32[$0 + 36 >> 2] | 0;
     $6 = HEAP32[$2 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$7 + 4 >> 2] = $6;
     $6 = $2 + 24 | 0;
     $5 = HEAP32[$6 + 4 >> 2];
     $4 = $7 + 24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $6 = $2 + 16 | 0;
     $5 = HEAP32[$6 + 4 >> 2];
     $4 = $7 + 16 | 0;
     HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $2 = $2 + 8 | 0;
     $6 = HEAP32[$2 + 4 >> 2];
     $7 = $7 + 8 | 0;
     HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$7 + 4 >> 2] = $6;
    }
    $7 = HEAP32[$0 + 36 >> 2];
    if (!(!$7 | !HEAPU8[$0 + 40 | 0])) {
     btAlignedFreeInternal_28void__29($7)
    }
    HEAP32[$0 + 36 >> 2] = $13;
    HEAP8[$0 + 40 | 0] = 1;
    HEAP32[$0 + 32 >> 2] = $3;
   }
   HEAP32[$0 + 28 >> 2] = $3;
   $12 = HEAP32[$0 + 48 >> 2];
   if (($3 | 0) > ($12 | 0)) {
    label$13 : {
     if (HEAP32[$0 + 52 >> 2] >= ($3 | 0)) {
      $13 = $3 << 3;
      $4 = HEAP32[$0 + 56 >> 2];
      break label$13;
     }
     $13 = $3 << 3;
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13);
     $19 = HEAP32[$0 + 56 >> 2];
     label$15 : {
      $2 = HEAP32[$0 + 48 >> 2];
      if (($2 | 0) > 0) {
       $5 = $2 & 3;
       $7 = 0;
       if ($2 - 1 >>> 0 >= 3) {
        $9 = $2 & -4;
        $2 = 0;
        while (1) {
         $6 = $2 + $4 | 0;
         $10 = $2 + $19 | 0;
         HEAPF64[$6 >> 3] = HEAPF64[$10 >> 3];
         HEAPF64[$6 + 8 >> 3] = HEAPF64[$10 + 8 >> 3];
         HEAPF64[$6 + 16 >> 3] = HEAPF64[$10 + 16 >> 3];
         HEAPF64[$6 + 24 >> 3] = HEAPF64[$10 + 24 >> 3];
         $2 = $2 + 32 | 0;
         $7 = $7 + 4 | 0;
         if (($9 | 0) != ($7 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$5) {
        break label$15
       }
       $7 = $7 << 3;
       $2 = $7 + $4 | 0;
       $6 = $7 + $19 | 0;
       while (1) {
        HEAPF64[$2 >> 3] = HEAPF64[$6 >> 3];
        $2 = $2 + 8 | 0;
        $6 = $6 + 8 | 0;
        $5 = $5 - 1 | 0;
        if ($5) {
         continue
        }
        break;
       };
       break label$15;
      }
      if ($19) {
       break label$15
      }
      HEAP32[$0 + 56 >> 2] = $4;
      HEAP32[$0 + 52 >> 2] = $3;
      HEAP8[$0 + 60 | 0] = 1;
      break label$13;
     }
     if (HEAPU8[$0 + 60 | 0]) {
      btAlignedFreeInternal_28void__29($19)
     }
     HEAP32[$0 + 56 >> 2] = $4;
     HEAP8[$0 + 60 | 0] = 1;
     HEAP32[$0 + 52 >> 2] = $3;
    }
    $7 = $12 << 3;
    memset($7 + $4 | 0, 0, $13 - $7 | 0);
   }
   HEAP32[$0 + 48 >> 2] = $3;
   $12 = HEAP32[$0 + 68 >> 2];
   if (($3 | 0) > ($12 | 0)) {
    label$22 : {
     if (HEAP32[$0 + 72 >> 2] >= ($3 | 0)) {
      $13 = $3 << 3;
      $4 = HEAP32[$0 + 76 >> 2];
      break label$22;
     }
     $13 = $3 << 3;
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13);
     $19 = HEAP32[$0 + 76 >> 2];
     label$24 : {
      $2 = HEAP32[$0 + 68 >> 2];
      if (($2 | 0) > 0) {
       $5 = $2 & 3;
       $7 = 0;
       if ($2 - 1 >>> 0 >= 3) {
        $9 = $2 & -4;
        $2 = 0;
        while (1) {
         $6 = $2 + $4 | 0;
         $10 = $2 + $19 | 0;
         HEAPF64[$6 >> 3] = HEAPF64[$10 >> 3];
         HEAPF64[$6 + 8 >> 3] = HEAPF64[$10 + 8 >> 3];
         HEAPF64[$6 + 16 >> 3] = HEAPF64[$10 + 16 >> 3];
         HEAPF64[$6 + 24 >> 3] = HEAPF64[$10 + 24 >> 3];
         $2 = $2 + 32 | 0;
         $7 = $7 + 4 | 0;
         if (($9 | 0) != ($7 | 0)) {
          continue
         }
         break;
        };
       }
       if (!$5) {
        break label$24
       }
       $7 = $7 << 3;
       $2 = $7 + $4 | 0;
       $6 = $7 + $19 | 0;
       while (1) {
        HEAPF64[$2 >> 3] = HEAPF64[$6 >> 3];
        $2 = $2 + 8 | 0;
        $6 = $6 + 8 | 0;
        $5 = $5 - 1 | 0;
        if ($5) {
         continue
        }
        break;
       };
       break label$24;
      }
      if ($19) {
       break label$24
      }
      HEAP32[$0 + 76 >> 2] = $4;
      HEAP32[$0 + 72 >> 2] = $3;
      HEAP8[$0 + 80 | 0] = 1;
      break label$22;
     }
     if (HEAPU8[$0 + 80 | 0]) {
      btAlignedFreeInternal_28void__29($19)
     }
     HEAP32[$0 + 76 >> 2] = $4;
     HEAP8[$0 + 80 | 0] = 1;
     HEAP32[$0 + 72 >> 2] = $3;
    }
    $7 = $12 << 3;
    memset($7 + $4 | 0, 0, $13 - $7 | 0);
   }
   HEAP32[$0 + 68 >> 2] = $3;
   $4 = HEAP32[$0 + 140 >> 2];
   if (($4 | 0) <= 0) {
    break label$1
   }
   $7 = $4 & 3;
   $6 = HEAP32[$0 + 56 >> 2];
   $19 = HEAP32[$0 + 76 >> 2];
   $5 = 0;
   if ($4 - 1 >>> 0 >= 3) {
    $10 = $4 & -4;
    $2 = 0;
    while (1) {
     $3 = $2 + $19 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $13 = $2 + $6 | 0;
     HEAP32[$13 >> 2] = 0;
     HEAP32[$13 + 4 >> 2] = 0;
     $12 = $3 + 8 | 0;
     HEAP32[$12 >> 2] = 0;
     HEAP32[$12 + 4 >> 2] = 0;
     $12 = $13 + 8 | 0;
     HEAP32[$12 >> 2] = 0;
     HEAP32[$12 + 4 >> 2] = 0;
     $12 = $3 + 16 | 0;
     HEAP32[$12 >> 2] = 0;
     HEAP32[$12 + 4 >> 2] = 0;
     $12 = $13 + 16 | 0;
     HEAP32[$12 >> 2] = 0;
     HEAP32[$12 + 4 >> 2] = 0;
     $3 = $3 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $13 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $2 = $2 + 32 | 0;
     $5 = $5 + 4 | 0;
     if (($10 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if ($7) {
    $3 = $5 << 3;
    $2 = $3 + $19 | 0;
    $13 = $3 + $6 | 0;
    while (1) {
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$13 >> 2] = 0;
     HEAP32[$13 + 4 >> 2] = 0;
     $2 = $2 + 8 | 0;
     $13 = $13 + 8 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   if (($4 | 0) <= 0) {
    break label$1
   }
   $3 = $11 + 96 | 0;
   $19 = $3 - -64 | 0;
   $10 = $3 + 32 | 0;
   $7 = 172;
   $6 = 0;
   $13 = 0;
   $12 = 0;
   while (1) {
    $2 = HEAP32[$0 + 148 >> 2] + $7 | 0;
    $3 = HEAP32[$2 >> 2];
    if ($3) {
     $4 = $2 + 28 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $5 = $11 + 96 | 0;
     $18 = $5 + 24 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 20 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $5 + 16 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 12 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $5 + 8 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 36 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$10 + 4 >> 2] = $9;
     $4 = $2 + 44 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $10 + 8 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 52 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $10 + 16 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 60 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $10 + 24 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 92 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $19 + 24 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 84 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $19 + 16 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 76 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $18 = $19 + 8 | 0;
     HEAP32[$18 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$18 + 4 >> 2] = $9;
     $4 = $2 + 68 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     HEAP32[$19 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$19 + 4 >> 2] = $9;
     $4 = $2 + 4 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     HEAP32[$11 + 96 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$11 + 100 >> 2] = $9;
     $9 = HEAP32[$0 + 124 >> 2];
     $4 = HEAP32[$0 + 36 >> 2] + $13 | 0;
     $18 = $4 + 24 | 0;
     HEAP32[$18 >> 2] = 0;
     HEAP32[$18 + 4 >> 2] = 0;
     $5 = ($9 << 3) + $5 | 0;
     HEAPF64[$4 >> 3] = HEAPF64[$5 >> 3];
     HEAPF64[$4 + 16 >> 3] = HEAPF64[$5 - -64 >> 3];
     HEAPF64[$4 + 8 >> 3] = HEAPF64[$5 + 32 >> 3];
     $5 = HEAP32[$0 + 36 >> 2] + $13 | 0;
     $4 = $5 + 16 | 0;
     $15 = HEAPF64[$4 >> 3];
     $9 = $2 - 156 | 0;
     $14 = HEAPF64[$9 >> 3];
     $17 = HEAPF64[$5 >> 3];
     $18 = $2 - 172 | 0;
     $16 = HEAPF64[$18 >> 3];
     $26 = $5 + 8 | 0;
     $20 = HEAPF64[$26 >> 3];
     $23 = $2 - 164 | 0;
     $22 = HEAPF64[$23 >> 3];
     $8 = $15 * $14 + ($17 * $16 + $20 * $22);
     $15 = $15 - $14 * $8;
     $14 = $17 - $16 * $8;
     $17 = $20 - $22 * $8;
     $8 = 1.0 / Math_sqrt($15 * $15 + ($14 * $14 + $17 * $17));
     $15 = $15 * $8;
     HEAPF64[$4 >> 3] = $15;
     $17 = $17 * $8;
     HEAPF64[$26 >> 3] = $17;
     $8 = $14 * $8;
     HEAPF64[$5 >> 3] = $8;
     $14 = HEAPF64[$9 >> 3];
     $16 = HEAPF64[$18 >> 3];
     $20 = HEAPF64[$23 >> 3];
     $5 = HEAP32[$0 + 16 >> 2] + $13 | 0;
     $4 = $5 + 24 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAPF64[$5 + 16 >> 3] = $16 * $17 - $8 * $20;
     HEAPF64[$5 + 8 >> 3] = $14 * $8 - $15 * $16;
     HEAPF64[$5 >> 3] = $20 * $15 - $17 * $14;
     $5 = HEAP32[$0 + 16 >> 2] + $13 | 0;
     $4 = $5 + 16 | 0;
     $8 = HEAPF64[$4 >> 3];
     $9 = $4;
     $16 = $8;
     $14 = $8 * $8;
     $8 = HEAPF64[$5 >> 3];
     $4 = $5 + 8 | 0;
     $15 = HEAPF64[$4 >> 3];
     $14 = 1.0 / Math_sqrt($14 + ($8 * $8 + $15 * $15));
     HEAPF64[$9 >> 3] = $16 * $14;
     HEAPF64[$4 >> 3] = $15 * $14;
     HEAPF64[$5 >> 3] = $8 * $14;
     $5 = HEAP32[$0 + 120 >> 2];
     $2 = $2 - 140 | 0;
     $9 = HEAP32[$0 + 76 >> 2] + $6 | 0;
     $4 = HEAP32[$0 + 36 >> 2] + $13 | 0;
     $8 = HEAPF64[$4 + 16 >> 3];
     $15 = HEAPF64[$4 >> 3];
     $14 = HEAPF64[$4 + 8 >> 3];
     if ($8 * $8 + ($15 * $15 + $14 * $14) > 1.1) {
      $8 = 0.0
     } else {
      $17 = HEAPF64[$2 >> 3] - HEAPF64[$5 + 104 >> 3];
      $16 = HEAPF64[$2 + 8 >> 3] - HEAPF64[$5 + 112 >> 3];
      $25 = $17 * $14 - $15 * $16;
      $20 = HEAPF64[$2 + 16 >> 3] - HEAPF64[$5 + 120 >> 3];
      $29 = $16 * $8 - $14 * $20;
      $27 = $20 * $15 - $8 * $17;
      $31 = HEAPF64[$5 + 88 >> 3] * $25 + (HEAPF64[$5 + 24 >> 3] * $29 + $27 * HEAPF64[$5 + 56 >> 3]);
      $22 = HEAPF64[$2 + 8 >> 3] - HEAPF64[$3 + 112 >> 3];
      $21 = HEAPF64[$2 >> 3] - HEAPF64[$3 + 104 >> 3];
      $28 = $15 * $22 - $21 * $14;
      $24 = HEAPF64[$2 + 16 >> 3] - HEAPF64[$3 + 120 >> 3];
      $34 = $14 * $24 - $22 * $8;
      $37 = $8 * $21 - $24 * $15;
      $38 = HEAPF64[$3 + 88 >> 3] * $28 + (HEAPF64[$3 + 24 >> 3] * $34 + $37 * HEAPF64[$3 + 56 >> 3]);
      $30 = $8;
      $8 = HEAPF64[$5 + 704 >> 3];
      $35 = HEAPF64[$5 + 712 >> 3];
      $39 = HEAPF64[$3 + 704 >> 3];
      $40 = HEAPF64[$3 + 712 >> 3];
      $42 = $30 * ($8 * $16 - $17 * $35 + HEAPF64[$5 + 688 >> 3] - ($39 * $22 - $21 * $40 + HEAPF64[$3 + 688 >> 3]));
      $30 = $15;
      $15 = HEAPF64[$5 + 720 >> 3];
      $35 = $35 * $20 - $16 * $15 + HEAPF64[$5 + 672 >> 3];
      $16 = HEAPF64[$3 + 720 >> 3];
      $15 = ($42 + ($30 * ($35 - ($40 * $24 - $22 * $16 + HEAPF64[$3 + 672 >> 3])) + $14 * ($15 * $17 - $20 * $8 + HEAPF64[$5 + 680 >> 3] - ($16 * $21 - $24 * $39 + HEAPF64[$3 + 680 >> 3])))) * -.2;
      $8 = HEAPF64[$5 + 72 >> 3] * $25 + (HEAPF64[$5 + 8 >> 3] * $29 + $27 * HEAPF64[$5 + 40 >> 3]);
      $16 = $8 * HEAPF64[$5 + 840 >> 3] * $8;
      $8 = HEAPF64[$5 + 80 >> 3] * $25 + (HEAPF64[$5 + 16 >> 3] * $29 + $27 * HEAPF64[$5 + 48 >> 3]);
      $16 = HEAPF64[$3 + 736 >> 3] + (HEAPF64[$5 + 736 >> 3] + ($31 * HEAPF64[$5 + 856 >> 3] * $31 + ($16 + $8 * ($8 * HEAPF64[$5 + 848 >> 3]))));
      $8 = HEAPF64[$3 + 72 >> 3] * $28 + (HEAPF64[$3 + 8 >> 3] * $34 + $37 * HEAPF64[$3 + 40 >> 3]);
      $14 = $8 * HEAPF64[$3 + 840 >> 3] * $8;
      $8 = HEAPF64[$3 + 80 >> 3] * $28 + (HEAPF64[$3 + 16 >> 3] * $34 + $37 * HEAPF64[$3 + 48 >> 3]);
      $8 = $15 * (1.0 / ($16 + ($38 * HEAPF64[$3 + 856 >> 3] * $38 + ($14 + $8 * ($8 * HEAPF64[$3 + 848 >> 3])))));
     }
     HEAPF64[$9 >> 3] = $8;
     $3 = HEAP32[$0 + 76 >> 2] + $6 | 0;
     HEAPF64[$3 >> 3] = HEAPF64[3851] * HEAPF64[$3 >> 3];
     $4 = HEAP32[$0 + 140 >> 2];
    }
    $7 = $7 + 552 | 0;
    $6 = $6 + 8 | 0;
    $13 = $13 + 32 | 0;
    $12 = $12 + 1 | 0;
    if (($4 | 0) > ($12 | 0)) {
     continue
    }
    break;
   };
   if (($4 | 0) <= 0) {
    break label$1
   }
   $5 = HEAP32[$0 + 148 >> 2];
   $13 = 0;
   $2 = 544;
   $7 = 0;
   $12 = 0;
   $4 = 0;
   while (1) {
    label$37 : {
     label$38 : {
      label$39 : {
       $10 = $2 + $5 | 0;
       $3 = HEAP32[$10 - 372 >> 2];
       if ($3) {
        $8 = HEAPF64[$10 - 48 >> 3];
        if ($8 == 0.0) {
         break label$39
        }
        $8 = $8 * $1;
        break label$38;
       }
       $3 = HEAP32[$0 + 56 >> 2] + $13 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       $3 = $2 + $5 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 1072693248;
       break label$37;
      }
      $6 = HEAP32[$0 + 120 >> 2];
      $19 = HEAP32[$0 + 16 >> 2] + $7 | 0;
      $8 = HEAPF64[$10 - 40 >> 3];
      $8 = $8 == 0.0 ? 0.0 : $8;
      $5 = $11 + 96 | 0;
      HEAP32[$5 + 4 >> 2] = $3;
      HEAP32[$5 >> 2] = $6;
      $9 = $10 - 512 | 0;
      $18 = $9 + 24 | 0;
      $26 = HEAP32[$18 + 4 >> 2];
      $23 = $5 + 32 | 0;
      HEAP32[$23 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$23 + 4 >> 2] = $26;
      $18 = $9 + 16 | 0;
      $26 = HEAP32[$18 + 4 >> 2];
      $23 = $5 + 24 | 0;
      HEAP32[$23 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$23 + 4 >> 2] = $26;
      $26 = $9 + 8 | 0;
      $23 = HEAP32[$26 + 4 >> 2];
      $33 = $5 + 16 | 0;
      HEAP32[$33 >> 2] = HEAP32[$26 >> 2];
      HEAP32[$33 + 4 >> 2] = $23;
      $23 = HEAP32[$9 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$5 + 12 >> 2] = $23;
      $23 = $19 + 8 | 0;
      $43 = HEAP32[$23 >> 2];
      $44 = HEAP32[$23 + 4 >> 2];
      $33 = $19 + 16 | 0;
      $36 = HEAP32[$33 >> 2];
      $45 = HEAP32[$33 + 4 >> 2];
      $32 = $19 + 24 | 0;
      $46 = HEAP32[$32 >> 2];
      $32 = HEAP32[$32 + 4 >> 2];
      $47 = HEAP32[$19 >> 2];
      $48 = HEAP32[$19 + 4 >> 2];
      HEAPF64[$5 + 80 >> 3] = $8;
      $41 = $5 - -64 | 0;
      HEAP32[$41 >> 2] = $46;
      HEAP32[$41 + 4 >> 2] = $32;
      $32 = $5 + 56 | 0;
      HEAP32[$32 >> 2] = $36;
      HEAP32[$32 + 4 >> 2] = $45;
      $36 = $5 + 48 | 0;
      HEAP32[$36 >> 2] = $43;
      HEAP32[$36 + 4 >> 2] = $44;
      HEAP32[$5 + 40 >> 2] = $47;
      HEAP32[$5 + 44 >> 2] = $48;
      $29 = HEAPF64[$9 >> 3];
      $17 = $29 - HEAPF64[$6 + 104 >> 3];
      $8 = HEAPF64[$23 >> 3];
      $15 = HEAPF64[$19 >> 3];
      $27 = HEAPF64[$26 >> 3];
      $16 = $27 - HEAPF64[$6 + 112 >> 3];
      $22 = $17 * $8 - $15 * $16;
      $14 = HEAPF64[$33 >> 3];
      $31 = HEAPF64[$18 >> 3];
      $20 = $31 - HEAPF64[$6 + 120 >> 3];
      $21 = $16 * $14 - $8 * $20;
      $24 = $20 * $15 - $14 * $17;
      $25 = HEAPF64[$6 + 640 >> 3] * $22 + (HEAPF64[$6 + 576 >> 3] * $21 + $24 * HEAPF64[$6 + 608 >> 3]);
      $28 = HEAPF64[$6 + 648 >> 3] * $22 + (HEAPF64[$6 + 584 >> 3] * $21 + $24 * HEAPF64[$6 + 616 >> 3]);
      $34 = $14 * ($25 * $16 - $17 * $28);
      $30 = $16;
      $16 = HEAPF64[$6 + 656 >> 3] * $22 + (HEAPF64[$6 + 592 >> 3] * $21 + $24 * HEAPF64[$6 + 624 >> 3]);
      $28 = HEAPF64[$6 + 736 >> 3] + ($34 + ($15 * ($28 * $20 - $30 * $16) + $8 * ($16 * $17 - $20 * $25)));
      $30 = $14;
      $17 = $29 - HEAPF64[$3 + 104 >> 3];
      $16 = $27 - HEAPF64[$3 + 112 >> 3];
      $22 = $17 * $8 - $15 * $16;
      $20 = $31 - HEAPF64[$3 + 120 >> 3];
      $21 = $16 * $14 - $8 * $20;
      $14 = $20 * $15 - $14 * $17;
      $24 = HEAPF64[$3 + 640 >> 3] * $22 + (HEAPF64[$3 + 576 >> 3] * $21 + $14 * HEAPF64[$3 + 608 >> 3]);
      $25 = HEAPF64[$3 + 648 >> 3] * $22 + (HEAPF64[$3 + 584 >> 3] * $21 + $14 * HEAPF64[$3 + 616 >> 3]);
      $27 = $15;
      $15 = HEAPF64[$3 + 656 >> 3] * $22 + (HEAPF64[$3 + 592 >> 3] * $21 + $14 * HEAPF64[$3 + 624 >> 3]);
      HEAPF64[$5 + 72 >> 3] = 1.0 / ($28 + (HEAPF64[$3 + 736 >> 3] + ($30 * ($24 * $16 - $17 * $25) + ($27 * ($25 * $20 - $16 * $15) + $8 * ($15 * $17 - $20 * $24)))));
      $5 = HEAP32[$0 + 148 >> 2];
      $8 = HEAPF64[$11 + 176 >> 3];
      $15 = -$8;
      $3 = HEAP32[$11 + 96 >> 2];
      $14 = HEAPF64[$3 + 704 >> 3];
      $17 = HEAPF64[$11 + 112 >> 3];
      $16 = $17 - HEAPF64[$3 + 112 >> 3];
      $20 = HEAPF64[$11 + 104 >> 3];
      $22 = $20 - HEAPF64[$3 + 104 >> 3];
      $21 = HEAPF64[$3 + 712 >> 3];
      $6 = HEAP32[$11 + 100 >> 2];
      $24 = HEAPF64[$6 + 704 >> 3];
      $17 = $17 - HEAPF64[$6 + 112 >> 3];
      $20 = $20 - HEAPF64[$6 + 104 >> 3];
      $25 = HEAPF64[$6 + 712 >> 3];
      $31 = HEAPF64[$11 + 152 >> 3] * ($14 * $16 - $22 * $21 + HEAPF64[$3 + 688 >> 3] - ($24 * $17 - $20 * $25 + HEAPF64[$6 + 688 >> 3]));
      $30 = $21;
      $21 = HEAPF64[$11 + 120 >> 3];
      $29 = $21 - HEAPF64[$3 + 120 >> 3];
      $27 = $16;
      $16 = HEAPF64[$3 + 720 >> 3];
      $21 = $21 - HEAPF64[$6 + 120 >> 3];
      $28 = $17;
      $17 = HEAPF64[$6 + 720 >> 3];
      $14 = HEAPF64[$11 + 168 >> 3] * -($31 + (HEAPF64[$11 + 136 >> 3] * ($30 * $29 - $27 * $16 + HEAPF64[$3 + 672 >> 3] - ($25 * $21 - $28 * $17 + HEAPF64[$6 + 672 >> 3])) + ($16 * $22 - $29 * $14 + HEAPF64[$3 + 680 >> 3] - ($17 * $20 - $21 * $24 + HEAPF64[$6 + 680 >> 3])) * HEAPF64[$11 + 144 >> 3]));
      $8 = $8 < $14 ? $8 : $14;
      $8 = $8 < $15 ? $15 : $8;
     }
     $6 = HEAP32[$0 + 56 >> 2] + $13 | 0;
     $3 = $6;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $2 + $5 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 1072693248;
     $15 = HEAPF64[$10 - 96 >> 3];
     $14 = HEAPF64[$10 - 8 >> 3];
     HEAPF64[$6 >> 3] = $8;
     $8 = $8 * .5;
     $16 = $8 * $8;
     $8 = HEAPF64[HEAP32[$0 + 76 >> 2] + $13 >> 3];
     $17 = $16 + $8 * $8;
     $8 = $15 * ($14 * $1);
     if (!($17 > $8 * $8)) {
      break label$37
     }
     HEAPF64[$3 >> 3] = $8 / Math_sqrt($17) * HEAPF64[$3 >> 3];
     $12 = 1;
    }
    $2 = $2 + 552 | 0;
    $13 = $13 + 8 | 0;
    $7 = $7 + 32 | 0;
    $4 = $4 + 1 | 0;
    $3 = HEAP32[$0 + 140 >> 2];
    if (($4 | 0) < ($3 | 0)) {
     continue
    }
    break;
   };
   if ($12 & ($3 | 0) > 0) {
    $13 = HEAP32[$0 + 148 >> 2] + 544 | 0;
    $6 = HEAP32[$0 + 56 >> 2];
    $2 = HEAP32[$0 + 76 >> 2];
    $7 = $3;
    while (1) {
     label$43 : {
      if (HEAPF64[$2 >> 3] == 0.0) {
       break label$43
      }
      $1 = HEAPF64[$13 >> 3];
      if (!($1 < 1.0)) {
       break label$43
      }
      HEAPF64[$6 >> 3] = $1 * HEAPF64[$6 >> 3];
      HEAPF64[$2 >> 3] = HEAPF64[$13 >> 3] * HEAPF64[$2 >> 3];
     }
     $13 = $13 + 552 | 0;
     $6 = $6 + 8 | 0;
     $2 = $2 + 8 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   if (($3 | 0) <= 0) {
    break label$1
   }
   $13 = 480;
   $2 = 0;
   $5 = 0;
   $7 = 0;
   while (1) {
    $3 = HEAP32[$0 + 148 >> 2];
    HEAP32[$11 + 120 >> 2] = 0;
    HEAP32[$11 + 124 >> 2] = 0;
    $6 = $3 + $13 | 0;
    $19 = $6 - 432 | 0;
    $3 = HEAP32[$0 + 120 >> 2];
    HEAPF64[$11 + 112 >> 3] = HEAPF64[$19 >> 3] - HEAPF64[$3 + 120 >> 3];
    $10 = $6 - 440 | 0;
    HEAPF64[$11 + 104 >> 3] = HEAPF64[$10 >> 3] - HEAPF64[$3 + 112 >> 3];
    $12 = $6 - 448 | 0;
    HEAPF64[$11 + 96 >> 3] = HEAPF64[$12 >> 3] - HEAPF64[$3 + 104 >> 3];
    $1 = HEAPF64[HEAP32[$0 + 56 >> 2] + $2 >> 3];
    if ($1 != 0.0) {
     HEAP32[$11 + 88 >> 2] = 0;
     HEAP32[$11 + 92 >> 2] = 0;
     $4 = HEAP32[$0 + 16 >> 2] + $5 | 0;
     HEAPF64[$11 + 64 >> 3] = HEAPF64[$4 >> 3] * $1;
     HEAPF64[$11 + 80 >> 3] = $1 * HEAPF64[$4 + 16 >> 3];
     HEAPF64[$11 + 72 >> 3] = $1 * HEAPF64[$4 + 8 >> 3];
     btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($3, $11 - -64 | 0, $11 + 96 | 0);
    }
    $9 = HEAP32[$0 + 76 >> 2] + $2 | 0;
    if (HEAPF64[$9 >> 3] != 0.0) {
     $3 = HEAP32[(HEAP32[$0 + 148 >> 2] + $13 | 0) - 308 >> 2];
     HEAP32[$11 + 88 >> 2] = 0;
     HEAP32[$11 + 92 >> 2] = 0;
     HEAPF64[$11 + 80 >> 3] = HEAPF64[$19 >> 3] - HEAPF64[$3 + 120 >> 3];
     HEAPF64[$11 + 72 >> 3] = HEAPF64[$10 >> 3] - HEAPF64[$3 + 112 >> 3];
     HEAPF64[$11 + 64 >> 3] = HEAPF64[$12 >> 3] - HEAPF64[$3 + 104 >> 3];
     HEAP32[$11 + 56 >> 2] = 0;
     HEAP32[$11 + 60 >> 2] = 0;
     $4 = HEAP32[$0 + 36 >> 2] + $5 | 0;
     $1 = HEAPF64[$9 >> 3];
     HEAPF64[$11 + 32 >> 3] = HEAPF64[$4 >> 3] * $1;
     HEAPF64[$11 + 48 >> 3] = $1 * HEAPF64[$4 + 16 >> 3];
     HEAPF64[$11 + 40 >> 3] = $1 * HEAPF64[$4 + 8 >> 3];
     $19 = HEAP32[$0 + 120 >> 2];
     $4 = $19 + (HEAP32[$0 + 128 >> 2] << 3) | 0;
     $8 = HEAPF64[$4 + 72 >> 3];
     $15 = HEAPF64[$11 + 112 >> 3];
     $14 = HEAPF64[$4 + 8 >> 3];
     $17 = HEAPF64[$11 + 96 >> 3];
     $16 = HEAPF64[$4 + 40 >> 3];
     $20 = HEAPF64[$11 + 104 >> 3];
     $1 = ($8 * $15 + ($14 * $17 + $16 * $20)) * (1.0 - HEAPF64[$6 >> 3]);
     HEAPF64[$11 + 112 >> 3] = $15 - $8 * $1;
     HEAPF64[$11 + 104 >> 3] = $20 - $16 * $1;
     HEAPF64[$11 + 96 >> 3] = $17 - $14 * $1;
     btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($19, $11 + 32 | 0, $11 + 96 | 0);
     HEAP32[$11 + 24 >> 2] = 0;
     HEAP32[$11 + 28 >> 2] = 0;
     HEAPF64[$11 + 16 >> 3] = -HEAPF64[$11 + 48 >> 3];
     HEAPF64[$11 + 8 >> 3] = -HEAPF64[$11 + 40 >> 3];
     HEAPF64[$11 >> 3] = -HEAPF64[$11 + 32 >> 3];
     btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($3, $11, $11 - -64 | 0);
    }
    $2 = $2 + 8 | 0;
    $13 = $13 + 552 | 0;
    $5 = $5 + 32 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < HEAP32[$0 + 140 >> 2]) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $11 + 192 | 0;
 }
 
 function btRaycastVehicle__debugDraw_28btIDebugDraw__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  if (HEAP32[$0 + 140 >> 2] > 0) {
   $15 = $4 + 16 | 0;
   $13 = $4 + 8 | 0;
   $2 = $4 - -64 | 0;
   $10 = $2 - -64 | 0;
   $11 = $2 + 32 | 0;
   $16 = 272;
   $17 = 8;
   while (1) {
    $20 = HEAP32[$0 + 16 >> 2];
    $2 = HEAP32[$0 + 148 >> 2] + $16 | 0;
    $9 = $2 + 24 | 0;
    $8 = HEAP32[$9 + 4 >> 2];
    $12 = $4 + 160 | 0;
    $7 = $12 + 24 | 0;
    HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$7 + 4 >> 2] = $8;
    $8 = $2 + 16 | 0;
    $3 = HEAP32[$8 + 4 >> 2];
    $9 = $12 + 16 | 0;
    $7 = $9;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$7 + 4 >> 2] = $3;
    $3 = $2 + 8 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    $8 = $12 + 8 | 0;
    $7 = $8;
    HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$7 + 4 >> 2] = $5;
    $7 = HEAP32[$2 + 4 >> 2];
    HEAP32[$4 + 160 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 164 >> 2] = $7;
    $7 = $2 - 96 | 0;
    $5 = $7 + 24 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $14 = $4 - -64 | 0;
    $3 = $14 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    $5 = $7 + 16 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $3 = $14 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    $5 = $7 + 8 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $3 = $14 + 8 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    $3 = $2 + -64 | 0;
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$11 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$11 + 4 >> 2] = $5;
    $6 = $3 + 8 | 0;
    $18 = HEAP32[$6 + 4 >> 2];
    $5 = $11 + 8 | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = $18;
    $6 = $3 + 16 | 0;
    $18 = HEAP32[$6 + 4 >> 2];
    $5 = $11 + 16 | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = $18;
    $3 = $3 + 24 | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    $5 = $11 + 24 | 0;
    HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$5 + 4 >> 2] = $6;
    $2 = $2 - 32 | 0;
    $5 = $2 + 24 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $3 = $10 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    $5 = $2 + 16 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $3 = $10 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    $5 = $2 + 8 | 0;
    $6 = HEAP32[$5 + 4 >> 2];
    $3 = $10 + 8 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$10 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$10 + 4 >> 2] = $3;
    $2 = HEAP32[$7 + 4 >> 2];
    HEAP32[$4 + 64 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 68 >> 2] = $2;
    $2 = (HEAP32[$0 + 124 >> 2] << 3) + $14 | 0;
    $21 = HEAPF64[$2 >> 3];
    $22 = HEAPF64[$2 + 32 >> 3];
    $23 = HEAPF64[$2 - -64 >> 3];
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    $2 = $17 + $20 | 0;
    HEAPF64[$4 + 48 >> 3] = HEAPF64[$9 >> 3] + HEAPF64[$2 + 8 >> 3];
    HEAPF64[$4 + 40 >> 3] = HEAPF64[$8 >> 3] + HEAPF64[$2 >> 3];
    HEAPF64[$4 + 32 >> 3] = HEAPF64[$4 + 160 >> 3] + HEAPF64[$2 - 8 >> 3];
    $2 = $13 + 8 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $2 = $13 + 16 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$13 >> 2] = 0;
    HEAP32[$13 + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 1072693248;
    $3 = $4 + 32 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $12, $3, $4);
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    HEAPF64[$4 + 48 >> 3] = $23 + HEAPF64[$9 >> 3];
    HEAPF64[$4 + 40 >> 3] = $22 + HEAPF64[$8 >> 3];
    HEAPF64[$4 + 32 >> 3] = $21 + HEAPF64[$4 + 160 >> 3];
    HEAP32[$15 >> 2] = 0;
    HEAP32[$15 + 4 >> 2] = 0;
    $2 = $15 + 8 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = 1072693248;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $12, $3, $4);
    $17 = $17 + 32 | 0;
    $16 = $16 + 552 | 0;
    $19 = $19 + 1 | 0;
    if (($19 | 0) < HEAP32[$0 + 140 >> 2]) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $4 + 192 | 0;
 }
 
 function btDefaultVehicleRaycaster__castRay_28btVector3_20const__2c_20btVector3_20const__2c_20btVehicleRaycaster__btVehicleRaycasterResult__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0;
  $5 = __stack_pointer - 160 | 0;
  __stack_pointer = $5;
  $6 = $1 + 8 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 40 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $1 + 16 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 48 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $1 + 24 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 56 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $2 + 24 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 88 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $2 + 16 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 80 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $2 + 8 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 72 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  HEAP32[$5 + 24 >> 2] = -1;
  HEAP32[$5 + 28 >> 2] = 0;
  HEAP32[$5 + 16 >> 2] = 0;
  HEAP32[$5 + 20 >> 2] = 1;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = 1072693248;
  HEAP32[$5 >> 2] = 29868;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$5 + 32 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 36 >> 2] = $4;
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 64 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 68 >> 2] = $4;
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $5);
  $2 = 0;
  $0 = HEAP32[$5 + 16 >> 2];
  if (!(!$0 | !(HEAPU8[$0 + 472 | 0] & 2) | HEAPU8[$0 + 392 | 0] & 4)) {
   $2 = $5 + 104 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $1 = $3 + 40 | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   $2 = HEAP32[$5 + 100 >> 2];
   HEAP32[$3 + 32 >> 2] = HEAP32[$5 + 96 >> 2];
   HEAP32[$3 + 36 >> 2] = $2;
   $4 = $5 + 112 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $2 = $3 + 48 | 0;
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + 4 >> 2] = $6;
   $4 = HEAP32[$5 + 132 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$5 + 128 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $6 = $5 + 152 | 0;
   $7 = HEAP32[$6 + 4 >> 2];
   $4 = $3 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   $6 = $5 + 144 | 0;
   $7 = HEAP32[$6 + 4 >> 2];
   $4 = $3 + 16 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   $6 = $5 + 136 | 0;
   $7 = HEAP32[$6 + 4 >> 2];
   $4 = $3 + 8 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   $6 = $5 + 120 | 0;
   $7 = HEAP32[$6 + 4 >> 2];
   $4 = $3 + 56 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   $8 = HEAPF64[$2 >> 3];
   $9 = HEAPF64[$3 + 32 >> 3];
   $10 = HEAPF64[$1 >> 3];
   $11 = 1.0 / Math_sqrt($8 * $8 + ($9 * $9 + $10 * $10));
   HEAPF64[$1 >> 3] = $10 * $11;
   HEAPF64[$2 >> 3] = $8 * $11;
   HEAPF64[$3 + 32 >> 3] = $9 * $11;
   HEAPF64[$3 + 64 >> 3] = HEAPF64[$5 + 8 >> 3];
   $2 = $0;
  }
  __stack_pointer = $5 + 160 | 0;
  return $2 | 0;
 }
 
 function btRaycastVehicle__updateAction_28btCollisionWorld__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2);
 }
 
 function btRaycastVehicle__setCoordinateSystem_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  HEAP32[$0 + 132 >> 2] = $3;
  HEAP32[$0 + 128 >> 2] = $2;
  HEAP32[$0 + 124 >> 2] = $1;
 }
 
 function btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 29668;
  return $0 | 0;
 }
 
 function btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29_1($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 29668;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btHeightfieldTerrainShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
  $10 = HEAPF64[$1 + 112 >> 3];
  $13 = HEAPF64[$1 + 72 >> 3];
  $14 = HEAPF64[$1 + 80 >> 3];
  $11 = HEAPF64[$1 + 104 >> 3];
  $7 = HEAPF64[$1 + 40 >> 3];
  $5 = HEAPF64[$0 + 192 >> 3];
  $8 = HEAPF64[$0 + 32 >> 3];
  $15 = HEAPF64[$0 - -64 >> 3];
  $6 = HEAPF64[$1 + 48 >> 3];
  $4 = HEAPF64[$0 + 200 >> 3];
  $9 = HEAPF64[$0 + 40 >> 3];
  $16 = HEAPF64[$0 + 72 >> 3];
  $17 = HEAPF64[$1 + 64 >> 3];
  $12 = HEAPF64[$1 + 96 >> 3];
  $18 = HEAPF64[$1 >> 3];
  $19 = HEAPF64[$1 + 8 >> 3];
  $20 = HEAPF64[$1 + 16 >> 3];
  $21 = HEAPF64[$1 + 32 >> 3];
  $22 = HEAPF64[$0 + 184 >> 3];
  $23 = HEAPF64[$0 + 24 >> 3];
  $24 = HEAPF64[$0 + 56 >> 3];
  $25 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $26 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  $27 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $4 = $4 * ($16 - $9) * .5;
  $9 = $4 * Math_abs($6);
  $6 = $22 * ($24 - $23) * .5;
  $5 = $5 * ($15 - $8) * .5;
  $7 = $26 + ($9 + ($6 * Math_abs($21) + $5 * Math_abs($7)));
  HEAPF64[$2 + 8 >> 3] = $11 - $7;
  $8 = $25 + ($4 * Math_abs($20) + ($6 * Math_abs($18) + $5 * Math_abs($19)));
  HEAPF64[$2 >> 3] = $12 - $8;
  $4 = $27 + ($4 * Math_abs($14) + ($6 * Math_abs($17) + $5 * Math_abs($13)));
  HEAPF64[$2 + 16 >> 3] = $10 - $4;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $10 + $4;
  HEAPF64[$3 + 8 >> 3] = $11 + $7;
  HEAPF64[$3 >> 3] = $12 + $8;
 }
 
 function btHeightfieldTerrainShape__getRawHeightFieldValue_28int_2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0;
  label$1 : {
   switch (HEAP32[$0 + 172 >> 2]) {
   case 0:
    return +HEAPF64[HEAP32[$0 + 168 >> 2] + (Math_imul(HEAP32[$0 + 120 >> 2], $2) + $1 << 3) >> 3];
   case 5:
    return +(HEAPF64[$0 + 160 >> 3] * +HEAPU8[HEAP32[$0 + 168 >> 2] + (Math_imul(HEAP32[$0 + 120 >> 2], $2) + $1 | 0) | 0]);
   case 3:
    $3 = HEAPF64[$0 + 160 >> 3] * +HEAP16[HEAP32[$0 + 168 >> 2] + (Math_imul(HEAP32[$0 + 120 >> 2], $2) + $1 << 1) >> 1];
    break;
   default:
    break label$1;
   };
  }
  return +$3;
 }
 
 function btHeightfieldTerrainShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  $5 = HEAPF64[$0 + 72 >> 3];
  $6 = HEAPF64[$0 + 40 >> 3];
  $7 = 1.0 / HEAPF64[$0 + 200 >> 3];
  $9 = HEAPF64[$0 + 104 >> 3];
  $8 = $7 * HEAPF64[$3 + 16 >> 3] + $9;
  $8 = $6 > $8 ? $6 : $8;
  $8 = $5 < $8 ? $5 : $8;
  $8 = $8 + ($8 < 0.0 ? -.5 : .5);
  label$1 : {
   if (Math_abs($8) < 2147483648.0) {
    $12 = ~~$8;
    break label$1;
   }
   $12 = -2147483648;
  }
  $12 = $12 + 1 | 0;
  $7 = $7 * HEAPF64[$2 + 16 >> 3] + $9;
  $6 = $6 > $7 ? $6 : $7;
  $5 = $5 < $6 ? $5 : $6;
  $5 = $5 + ($5 < 0.0 ? -.5 : .5);
  label$3 : {
   if (Math_abs($5) < 2147483648.0) {
    $10 = ~~$5;
    break label$3;
   }
   $10 = -2147483648;
  }
  $21 = $10 - 1 | 0;
  $5 = HEAPF64[$0 - -64 >> 3];
  $6 = HEAPF64[$0 + 32 >> 3];
  $7 = 1.0 / HEAPF64[$0 + 192 >> 3];
  $9 = HEAPF64[$0 + 96 >> 3];
  $8 = $7 * HEAPF64[$3 + 8 >> 3] + $9;
  $8 = $6 > $8 ? $6 : $8;
  $8 = $5 < $8 ? $5 : $8;
  $8 = $8 + ($8 < 0.0 ? -.5 : .5);
  label$5 : {
   if (Math_abs($8) < 2147483648.0) {
    $10 = ~~$8;
    break label$5;
   }
   $10 = -2147483648;
  }
  $22 = $10 + 1 | 0;
  $7 = $7 * HEAPF64[$2 + 8 >> 3] + $9;
  $6 = $6 > $7 ? $6 : $7;
  $5 = $5 < $6 ? $5 : $6;
  $5 = $5 + ($5 < 0.0 ? -.5 : .5);
  label$7 : {
   if (Math_abs($5) < 2147483648.0) {
    $10 = ~~$5;
    break label$7;
   }
   $10 = -2147483648;
  }
  $23 = $10 - 1 | 0;
  $5 = HEAPF64[$0 + 56 >> 3];
  $6 = HEAPF64[$0 + 24 >> 3];
  $7 = 1.0 / HEAPF64[$0 + 184 >> 3];
  $9 = HEAPF64[$0 + 88 >> 3];
  $8 = $7 * HEAPF64[$3 >> 3] + $9;
  $8 = $6 > $8 ? $6 : $8;
  $8 = $5 < $8 ? $5 : $8;
  $8 = $8 + ($8 < 0.0 ? -.5 : .5);
  label$9 : {
   if (Math_abs($8) < 2147483648.0) {
    $3 = ~~$8;
    break label$9;
   }
   $3 = -2147483648;
  }
  $3 = $3 + 1 | 0;
  $7 = $7 * HEAPF64[$2 >> 3] + $9;
  $6 = $6 > $7 ? $6 : $7;
  $5 = $5 < $6 ? $5 : $6;
  $5 = $5 + ($5 < 0.0 ? -.5 : .5);
  label$11 : {
   if (Math_abs($5) < 2147483648.0) {
    $2 = ~~$5;
    break label$11;
   }
   $2 = -2147483648;
  }
  $2 = $2 - 1 | 0;
  $10 = HEAP32[$0 + 124 >> 2] - 1 | 0;
  $13 = HEAP32[$0 + 120 >> 2] - 1 | 0;
  label$13 : {
   label$14 : {
    switch (HEAP32[$0 + 180 >> 2]) {
    case 0:
     $10 = ($12 | 0) < ($10 | 0) ? $12 : $10;
     $11 = ($21 | 0) > 0 ? $21 : 0;
     $13 = ($13 | 0) > ($22 | 0) ? $22 : $13;
     $24 = ($23 | 0) > 0 ? $23 : 0;
     break label$13;
    case 1:
     $10 = ($12 | 0) < ($10 | 0) ? $12 : $10;
     $11 = ($21 | 0) > 0 ? $21 : 0;
     $13 = ($3 | 0) < ($13 | 0) ? $3 : $13;
     $24 = ($2 | 0) > 0 ? $2 : 0;
     break label$13;
    case 2:
     break label$14;
    default:
     break label$13;
    };
   }
   $10 = ($10 | 0) > ($22 | 0) ? $22 : $10;
   $11 = ($23 | 0) > 0 ? $23 : 0;
   $13 = ($3 | 0) < ($13 | 0) ? $3 : $13;
   $24 = ($2 | 0) > 0 ? $2 : 0;
  }
  $21 = HEAP32[7897];
  HEAP32[7897] = 750;
  if (!(($13 | 0) <= ($24 | 0) | ($11 | 0) >= ($10 | 0))) {
   while (1) {
    $22 = $11 & 1;
    $12 = $11 + 1 | 0;
    $9 = +($12 | 0);
    $8 = +($11 | 0);
    $2 = $24;
    while (1) {
     label$20 : {
      label$21 : {
       label$22 : {
        if (HEAPU8[$0 + 176 | 0] | !($2 + $11 & 1 ? 1 : !HEAPU8[$0 + 177 | 0])) {
         break label$22
        }
        if (!($22 ? 1 : !HEAPU8[$0 + 178 | 0])) {
         break label$22
        }
        $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $11);
        label$25 : {
         label$26 : {
          switch (HEAP32[$0 + 180 >> 2]) {
          case 2:
           HEAP32[$4 + 24 >> 2] = 0;
           HEAP32[$4 + 28 >> 2] = 0;
           $6 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $5 - HEAPF64[$0 + 104 >> 3];
           break label$25;
          case 1:
           HEAP32[$4 + 24 >> 2] = 0;
           HEAP32[$4 + 28 >> 2] = 0;
           $6 = $5 - HEAPF64[$0 + 96 >> 3];
           $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$25;
          case 0:
           HEAP32[$4 + 24 >> 2] = 0;
           HEAP32[$4 + 28 >> 2] = 0;
           $7 = $5 - HEAPF64[$0 + 88 >> 3];
           $6 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$25;
          default:
           break label$26;
          };
         }
         $6 = HEAPF64[$4 + 8 >> 3];
         $7 = HEAPF64[$4 >> 3];
         $5 = HEAPF64[$4 + 16 >> 3];
        }
        HEAPF64[$4 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
        HEAPF64[$4 + 8 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
        HEAPF64[$4 + 16 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
        $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $12);
        label$30 : {
         label$31 : {
          switch (HEAP32[$0 + 180 >> 2]) {
          case 2:
           HEAP32[$4 + 56 >> 2] = 0;
           HEAP32[$4 + 60 >> 2] = 0;
           $6 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
           $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $5 - HEAPF64[$0 + 104 >> 3];
           break label$30;
          case 1:
           HEAP32[$4 + 56 >> 2] = 0;
           HEAP32[$4 + 60 >> 2] = 0;
           $6 = $5 - HEAPF64[$0 + 96 >> 3];
           $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$30;
          case 0:
           HEAP32[$4 + 56 >> 2] = 0;
           HEAP32[$4 + 60 >> 2] = 0;
           $7 = $5 - HEAPF64[$0 + 88 >> 3];
           $6 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$30;
          default:
           break label$31;
          };
         }
         $6 = HEAPF64[$4 + 40 >> 3];
         $7 = HEAPF64[$4 + 32 >> 3];
         $5 = HEAPF64[$4 + 48 >> 3];
        }
        HEAPF64[$4 + 32 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
        HEAPF64[$4 + 40 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
        HEAPF64[$4 + 48 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
        $3 = $2 + 1 | 0;
        $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $11);
        label$35 : {
         label$36 : {
          switch (HEAP32[$0 + 180 >> 2]) {
          case 2:
           HEAP32[$4 + 88 >> 2] = 0;
           HEAP32[$4 + 92 >> 2] = 0;
           $6 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $5 - HEAPF64[$0 + 104 >> 3];
           break label$35;
          case 1:
           HEAP32[$4 + 88 >> 2] = 0;
           HEAP32[$4 + 92 >> 2] = 0;
           $6 = $5 - HEAPF64[$0 + 96 >> 3];
           $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$35;
          case 0:
           HEAP32[$4 + 88 >> 2] = 0;
           HEAP32[$4 + 92 >> 2] = 0;
           $7 = $5 - HEAPF64[$0 + 88 >> 3];
           $6 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$35;
          default:
           break label$36;
          };
         }
         $6 = HEAPF64[$4 + 72 >> 3];
         $7 = HEAPF64[$4 + 64 >> 3];
         $5 = HEAPF64[$4 + 80 >> 3];
        }
        HEAPF64[$4 + 64 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
        HEAPF64[$4 + 72 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
        HEAPF64[$4 + 80 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
        HEAP8[35201] = 0;
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $11);
        if (HEAPU8[35201]) {
         HEAP32[$4 + 88 >> 2] = 0;
         HEAP32[$4 + 92 >> 2] = 0;
         HEAP32[$4 + 56 >> 2] = 0;
         HEAP32[$4 + 60 >> 2] = 0;
         HEAP32[$4 + 24 >> 2] = 0;
         HEAP32[$4 + 28 >> 2] = 0;
         $6 = HEAPF64[$4 + 80 >> 3];
         $14 = HEAPF64[$4 + 16 >> 3];
         $15 = HEAPF64[$4 + 48 >> 3];
         $5 = ($6 + ($14 + $15)) * .3333333333333333;
         HEAPF64[$4 + 80 >> 3] = $6 + ($6 - $5);
         $7 = HEAPF64[$4 + 72 >> 3];
         $16 = HEAPF64[$4 + 8 >> 3];
         $17 = HEAPF64[$4 + 40 >> 3];
         $6 = ($7 + ($16 + $17)) * .3333333333333333;
         HEAPF64[$4 + 72 >> 3] = $7 + ($7 - $6);
         $18 = HEAPF64[$4 + 64 >> 3];
         $19 = HEAPF64[$4 >> 3];
         $20 = HEAPF64[$4 + 32 >> 3];
         $7 = ($18 + ($19 + $20)) * .3333333333333333;
         HEAPF64[$4 + 64 >> 3] = $18 + ($18 - $7);
         HEAPF64[$4 + 48 >> 3] = $15 + ($15 - $5);
         HEAPF64[$4 + 40 >> 3] = $17 + ($17 - $6);
         HEAPF64[$4 + 32 >> 3] = $20 + ($20 - $7);
         HEAPF64[$4 + 16 >> 3] = $14 + ($14 - $5);
         HEAPF64[$4 + 8 >> 3] = $16 + ($16 - $6);
         HEAPF64[$4 >> 3] = $19 + ($19 - $7);
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $11);
        }
        $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $11);
        label$41 : {
         label$42 : {
          switch (HEAP32[$0 + 180 >> 2]) {
          case 2:
           HEAP32[$4 + 24 >> 2] = 0;
           HEAP32[$4 + 28 >> 2] = 0;
           $6 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $5 - HEAPF64[$0 + 104 >> 3];
           break label$41;
          case 1:
           HEAP32[$4 + 24 >> 2] = 0;
           HEAP32[$4 + 28 >> 2] = 0;
           $6 = $5 - HEAPF64[$0 + 96 >> 3];
           $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$41;
          case 0:
           HEAP32[$4 + 24 >> 2] = 0;
           HEAP32[$4 + 28 >> 2] = 0;
           $7 = $5 - HEAPF64[$0 + 88 >> 3];
           $6 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$41;
          default:
           break label$42;
          };
         }
         $6 = HEAPF64[$4 + 8 >> 3];
         $7 = HEAPF64[$4 >> 3];
         $5 = HEAPF64[$4 + 16 >> 3];
        }
        HEAPF64[$4 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
        HEAPF64[$4 + 8 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
        HEAPF64[$4 + 16 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
        $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $12);
        label$46 : {
         label$47 : {
          switch (HEAP32[$0 + 180 >> 2]) {
          case 2:
           HEAP32[$4 + 88 >> 2] = 0;
           HEAP32[$4 + 92 >> 2] = 0;
           $6 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
           $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $5 - HEAPF64[$0 + 104 >> 3];
           break label$46;
          case 1:
           HEAP32[$4 + 88 >> 2] = 0;
           HEAP32[$4 + 92 >> 2] = 0;
           $6 = $5 - HEAPF64[$0 + 96 >> 3];
           $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$46;
          case 0:
           HEAP32[$4 + 88 >> 2] = 0;
           HEAP32[$4 + 92 >> 2] = 0;
           $7 = $5 - HEAPF64[$0 + 88 >> 3];
           $6 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
           $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
           break label$46;
          default:
           break label$47;
          };
         }
         $6 = HEAPF64[$4 + 72 >> 3];
         $7 = HEAPF64[$4 + 64 >> 3];
         $5 = HEAPF64[$4 + 80 >> 3];
        }
        HEAPF64[$4 + 64 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
        HEAPF64[$4 + 72 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
        HEAPF64[$4 + 80 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
        HEAP8[35201] = 0;
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $11);
        if (!HEAPU8[35201]) {
         break label$20
        }
        HEAP32[$4 + 88 >> 2] = 0;
        HEAP32[$4 + 92 >> 2] = 0;
        HEAP32[$4 + 56 >> 2] = 0;
        HEAP32[$4 + 60 >> 2] = 0;
        HEAP32[$4 + 24 >> 2] = 0;
        HEAP32[$4 + 28 >> 2] = 0;
        $6 = HEAPF64[$4 + 80 >> 3];
        $14 = HEAPF64[$4 + 16 >> 3];
        $15 = HEAPF64[$4 + 48 >> 3];
        $5 = ($6 + ($14 + $15)) * .3333333333333333;
        HEAPF64[$4 + 80 >> 3] = $6 + ($6 - $5);
        $7 = HEAPF64[$4 + 72 >> 3];
        $16 = HEAPF64[$4 + 8 >> 3];
        $17 = HEAPF64[$4 + 40 >> 3];
        $6 = ($7 + ($16 + $17)) * .3333333333333333;
        HEAPF64[$4 + 72 >> 3] = $7 + ($7 - $6);
        $18 = HEAPF64[$4 + 64 >> 3];
        $19 = HEAPF64[$4 >> 3];
        $20 = HEAPF64[$4 + 32 >> 3];
        $7 = ($18 + ($19 + $20)) * .3333333333333333;
        HEAPF64[$4 + 64 >> 3] = $18 + ($18 - $7);
        HEAPF64[$4 + 48 >> 3] = $15 + ($15 - $5);
        HEAPF64[$4 + 40 >> 3] = $17 + ($17 - $6);
        HEAPF64[$4 + 32 >> 3] = $20 + ($20 - $7);
        HEAPF64[$4 + 16 >> 3] = $14 + ($14 - $5);
        HEAPF64[$4 + 8 >> 3] = $16 + ($16 - $6);
        HEAPF64[$4 >> 3] = $19 + ($19 - $7);
        break label$21;
       }
       $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $11);
       label$51 : {
        label$52 : {
         switch (HEAP32[$0 + 180 >> 2]) {
         case 2:
          HEAP32[$4 + 24 >> 2] = 0;
          HEAP32[$4 + 28 >> 2] = 0;
          $6 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
          $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $5 - HEAPF64[$0 + 104 >> 3];
          break label$51;
         case 1:
          HEAP32[$4 + 24 >> 2] = 0;
          HEAP32[$4 + 28 >> 2] = 0;
          $6 = $5 - HEAPF64[$0 + 96 >> 3];
          $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$51;
         case 0:
          HEAP32[$4 + 24 >> 2] = 0;
          HEAP32[$4 + 28 >> 2] = 0;
          $7 = $5 - HEAPF64[$0 + 88 >> 3];
          $6 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$51;
         default:
          break label$52;
         };
        }
        $6 = HEAPF64[$4 + 8 >> 3];
        $7 = HEAPF64[$4 >> 3];
        $5 = HEAPF64[$4 + 16 >> 3];
       }
       HEAPF64[$4 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
       HEAPF64[$4 + 8 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
       HEAPF64[$4 + 16 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
       $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $12);
       label$56 : {
        label$57 : {
         switch (HEAP32[$0 + 180 >> 2]) {
         case 2:
          HEAP32[$4 + 56 >> 2] = 0;
          HEAP32[$4 + 60 >> 2] = 0;
          $6 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $5 - HEAPF64[$0 + 104 >> 3];
          break label$56;
         case 1:
          HEAP32[$4 + 56 >> 2] = 0;
          HEAP32[$4 + 60 >> 2] = 0;
          $6 = $5 - HEAPF64[$0 + 96 >> 3];
          $7 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$56;
         case 0:
          HEAP32[$4 + 56 >> 2] = 0;
          HEAP32[$4 + 60 >> 2] = 0;
          $7 = $5 - HEAPF64[$0 + 88 >> 3];
          $6 = +($2 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$56;
         default:
          break label$57;
         };
        }
        $6 = HEAPF64[$4 + 40 >> 3];
        $7 = HEAPF64[$4 + 32 >> 3];
        $5 = HEAPF64[$4 + 48 >> 3];
       }
       HEAPF64[$4 + 32 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
       HEAPF64[$4 + 40 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
       HEAPF64[$4 + 48 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
       $3 = $2 + 1 | 0;
       $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $12);
       label$61 : {
        label$62 : {
         switch (HEAP32[$0 + 180 >> 2]) {
         case 2:
          HEAP32[$4 + 88 >> 2] = 0;
          HEAP32[$4 + 92 >> 2] = 0;
          $6 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $5 - HEAPF64[$0 + 104 >> 3];
          break label$61;
         case 1:
          HEAP32[$4 + 88 >> 2] = 0;
          HEAP32[$4 + 92 >> 2] = 0;
          $6 = $5 - HEAPF64[$0 + 96 >> 3];
          $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$61;
         case 0:
          HEAP32[$4 + 88 >> 2] = 0;
          HEAP32[$4 + 92 >> 2] = 0;
          $7 = $5 - HEAPF64[$0 + 88 >> 3];
          $6 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$61;
         default:
          break label$62;
         };
        }
        $6 = HEAPF64[$4 + 72 >> 3];
        $7 = HEAPF64[$4 + 64 >> 3];
        $5 = HEAPF64[$4 + 80 >> 3];
       }
       HEAPF64[$4 + 64 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
       HEAPF64[$4 + 72 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
       HEAPF64[$4 + 80 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
       HEAP8[35201] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $11);
       $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $12);
       label$66 : {
        label$67 : {
         switch (HEAP32[$0 + 180 >> 2]) {
         case 2:
          HEAP32[$4 + 56 >> 2] = 0;
          HEAP32[$4 + 60 >> 2] = 0;
          $6 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $5 - HEAPF64[$0 + 104 >> 3];
          break label$66;
         case 1:
          HEAP32[$4 + 56 >> 2] = 0;
          HEAP32[$4 + 60 >> 2] = 0;
          $6 = $5 - HEAPF64[$0 + 96 >> 3];
          $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$66;
         case 0:
          HEAP32[$4 + 56 >> 2] = 0;
          HEAP32[$4 + 60 >> 2] = 0;
          $7 = $5 - HEAPF64[$0 + 88 >> 3];
          $6 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $9 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$66;
         default:
          break label$67;
         };
        }
        $6 = HEAPF64[$4 + 40 >> 3];
        $7 = HEAPF64[$4 + 32 >> 3];
        $5 = HEAPF64[$4 + 48 >> 3];
       }
       HEAPF64[$4 + 32 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
       HEAPF64[$4 + 40 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
       HEAPF64[$4 + 48 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
       $5 = +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $11);
       label$71 : {
        label$72 : {
         switch (HEAP32[$0 + 180 >> 2]) {
         case 2:
          HEAP32[$4 + 88 >> 2] = 0;
          HEAP32[$4 + 92 >> 2] = 0;
          $6 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
          $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $5 - HEAPF64[$0 + 104 >> 3];
          break label$71;
         case 1:
          HEAP32[$4 + 88 >> 2] = 0;
          HEAP32[$4 + 92 >> 2] = 0;
          $6 = $5 - HEAPF64[$0 + 96 >> 3];
          $7 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$71;
         case 0:
          HEAP32[$4 + 88 >> 2] = 0;
          HEAP32[$4 + 92 >> 2] = 0;
          $7 = $5 - HEAPF64[$0 + 88 >> 3];
          $6 = +($3 | 0) - HEAPF64[$0 + 144 >> 3] * .5;
          $5 = $8 - HEAPF64[$0 + 152 >> 3] * .5;
          break label$71;
         default:
          break label$72;
         };
        }
        $6 = HEAPF64[$4 + 72 >> 3];
        $7 = HEAPF64[$4 + 64 >> 3];
        $5 = HEAPF64[$4 + 80 >> 3];
       }
       HEAP8[35201] = 0;
       HEAPF64[$4 + 64 >> 3] = $7 * HEAPF64[$0 + 184 >> 3];
       HEAPF64[$4 + 72 >> 3] = $6 * HEAPF64[$0 + 192 >> 3];
       HEAPF64[$4 + 80 >> 3] = $5 * HEAPF64[$0 + 200 >> 3];
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $11);
     }
     $2 = $3;
     if (($13 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
    $11 = $12;
    if (($10 | 0) != ($11 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[7897] = $21;
  __stack_pointer = $4 + 96 | 0;
 }
 
 function btAdjustInternalEdgeContactsCallback_28btManifoldPoint__2c_20btCollisionObjectWrapper_20const__2c_20int_2c_20int_2c_20btCollisionObjectWrapper_20const__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0;
  $1 = HEAP32[$4 + 4 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  if (($2 | 0) == 1) {
   $7 = HEAPF64[$1 + 104 >> 3];
   $9 = HEAPF64[$1 + 136 >> 3] - $7;
   $8 = HEAPF64[$1 + 112 >> 3];
   $10 = HEAPF64[$1 + 176 >> 3] - $8;
   $11 = HEAPF64[$1 + 168 >> 3] - $7;
   $8 = HEAPF64[$1 + 144 >> 3] - $8;
   $7 = $9 * $10 - $11 * $8;
   $12 = $7;
   $13 = $7 * $7;
   $14 = $8;
   $7 = HEAPF64[$1 + 120 >> 3];
   $8 = HEAPF64[$1 + 184 >> 3] - $7;
   $15 = $10;
   $10 = HEAPF64[$1 + 152 >> 3] - $7;
   $7 = $14 * $8 - $15 * $10;
   $9 = $10 * $11 - $8 * $9;
   $8 = 1.0 / Math_sqrt($13 + ($7 * $7 + $9 * $9));
   $10 = $12 * $8;
   $9 = $9 * $8;
   $1 = $9 < 0.0;
   $7 = $7 * $8;
   HEAP8[35201] = ($1 ? -$10 : $10) * HEAPF64[$0 + 144 >> 3] + (($1 ? -$7 : $7) * HEAPF64[$0 + 128 >> 3] + HEAPF64[$0 + 136 >> 3] * ($1 ? -$9 : $9)) < 1.0e-05;
  }
  return ($2 | 0) == 1 | 0;
 }
 
 function btHeightfieldTerrainShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 184 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 188 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 208 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 200 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 192 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btHeightfieldTerrainShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 184 | 0;
 }
 
 function btHeightfieldTerrainShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 4293;
 }
 
 function btGImpactCollisionAlgorithm_RegisterAlgorithm($0) {
  $0 = $0 | 0;
  if (!HEAPU8[31604]) {
   HEAP32[7899] = 7672;
   HEAP8[31604] = 1;
   HEAP8[31600] = 0;
  }
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 0);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 1);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 2);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 3);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 4);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 5);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 6);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 7);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 8);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 9);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 10);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 11);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 12);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 13);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 14);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 15);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 16);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 17);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 18);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 19);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 20);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 21);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 22);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 23);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 24);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 26);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 27);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 28);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 29);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 30);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 31);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 32);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 33);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 34);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 35);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 0, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 1, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 2, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 3, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 4, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 5, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 6, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 7, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 8, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 9, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 10, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 11, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 12, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 13, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 14, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 15, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 16, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 17, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 18, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 19, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 20, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 21, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 22, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 23, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 24, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 26, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 27, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 28, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 29, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 30, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 31, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 32, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 33, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 34, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 35, 25);
 }
 
 function btVector3_create($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32);
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAPF64[$3 + 16 >> 3] = $2;
  HEAPF64[$3 + 8 >> 3] = $1;
  HEAPF64[$3 >> 3] = $0;
  return $3 | 0;
 }
 
 function btVector3_setValue($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF64[$0 + 16 >> 3] = $3;
  HEAPF64[$0 + 8 >> 3] = $2;
  HEAPF64[$0 >> 3] = $1;
 }
 
 function btVector3_x($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 >> 3];
 }
 
 function btVector3_y($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function btQuaternion_create($0, $1, $2, $3) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0;
  $4 = operator_20new_28unsigned_20long_29(32);
  HEAPF64[$4 + 24 >> 3] = $3;
  HEAPF64[$4 + 16 >> 3] = $2;
  HEAPF64[$4 + 8 >> 3] = $1;
  HEAPF64[$4 >> 3] = $0;
  return $4 | 0;
 }
 
 function btQuaternion_delete($0) {
  $0 = $0 | 0;
  if ($0) {
   operator_20delete_28void__29($0)
  }
 }
 
 function btQuaternion_setValue($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  HEAPF64[$0 + 24 >> 3] = $4;
  HEAPF64[$0 + 16 >> 3] = $3;
  HEAPF64[$0 + 8 >> 3] = $2;
  HEAPF64[$0 >> 3] = $1;
 }
 
 function btQuaternion_w($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 24 >> 3];
 }
 
 function btTransform_create() {
  return operator_20new_28unsigned_20long_29(128) | 0;
 }
 
 function btTransform_setOrigin($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 96 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 100 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 120 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 104 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btTransform_setRotation($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0;
  $3 = HEAPF64[$1 + 24 >> 3];
  $7 = HEAPF64[$1 + 16 >> 3];
  $2 = HEAPF64[$1 >> 3];
  $5 = HEAPF64[$1 + 8 >> 3];
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  $4 = 2.0 / ($3 * $3 + ($7 * $7 + ($2 * $2 + $5 * $5)));
  $8 = $7 * $4;
  $6 = $5 * $8;
  $10 = $2 * $4;
  $11 = $3 * $10;
  HEAPF64[$0 + 72 >> 3] = $6 + $11;
  $12 = $2 * $8;
  $4 = $5 * $4;
  $9 = $3 * $4;
  HEAPF64[$0 + 64 >> 3] = $12 - $9;
  HEAPF64[$0 + 48 >> 3] = $6 - $11;
  $6 = $2 * $4;
  $3 = $3 * $8;
  HEAPF64[$0 + 32 >> 3] = $6 + $3;
  HEAPF64[$0 + 16 >> 3] = $12 + $9;
  HEAPF64[$0 + 8 >> 3] = $6 - $3;
  $2 = $2 * $10;
  $3 = $5 * $4;
  HEAPF64[$0 + 80 >> 3] = 1.0 - ($2 + $3);
  $9 = $2;
  $2 = $7 * $8;
  HEAPF64[$0 + 40 >> 3] = 1.0 - ($9 + $2);
  HEAPF64[$0 >> 3] = 1.0 - ($3 + $2);
 }
 
 function btTransform_getRotation($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $1);
  $0 = $1 + 24 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[8816] = HEAP32[$0 >> 2];
  HEAP32[8817] = $2;
  $0 = $1 + 16 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[8814] = HEAP32[$0 >> 2];
  HEAP32[8815] = $2;
  $0 = $1 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[8812] = HEAP32[$0 >> 2];
  HEAP32[8813] = $2;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[8810] = HEAP32[$1 >> 2];
  HEAP32[8811] = $0;
  __stack_pointer = $1 + 32 | 0;
  return 35240;
 }
 
 function btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $1) {
  var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $6 = __stack_pointer - 32 | 0;
  $2 = HEAPF64[$0 >> 3];
  $7 = HEAPF64[$0 + 40 >> 3];
  $8 = HEAPF64[$0 + 80 >> 3];
  $3 = $2 + $7 + $8;
  label$1 : {
   if ($3 > 0.0) {
    $3 = Math_sqrt($3 + 1.0);
    $2 = .5 / $3;
    $7 = $2 * (HEAPF64[$0 + 32 >> 3] - HEAPF64[$0 + 8 >> 3]);
    $8 = $2 * (HEAPF64[$0 + 16 >> 3] - HEAPF64[$0 + 64 >> 3]);
    $3 = $3 * .5;
    $2 = $2 * (HEAPF64[$0 + 72 >> 3] - HEAPF64[$0 + 48 >> 3]);
    break label$1;
   }
   $4 = $2 < $7 ? ($7 < $8 ? 2 : 1) : ($2 < $8) << 1;
   $9 = $4 << 3;
   $10 = ($4 << 5) + $0 | 0;
   $5 = ($4 + 1 >>> 0) % 3 | 0;
   $11 = ($5 << 5) + $0 | 0;
   $5 = $5 << 3;
   $12 = $0;
   $0 = ($4 + 2 >>> 0) % 3 | 0;
   $4 = $12 + ($0 << 5) | 0;
   $0 = $0 << 3;
   $2 = Math_sqrt(HEAPF64[$10 + $9 >> 3] - HEAPF64[$11 + $5 >> 3] - HEAPF64[$4 + $0 >> 3] + 1.0);
   HEAPF64[$9 + $6 >> 3] = $2 * .5;
   $2 = .5 / $2;
   HEAPF64[$6 + $5 >> 3] = $2 * (HEAPF64[$9 + $11 >> 3] + HEAPF64[$5 + $10 >> 3]);
   HEAPF64[$0 + $6 >> 3] = $2 * (HEAPF64[$4 + $9 >> 3] + HEAPF64[$0 + $10 >> 3]);
   $3 = (HEAPF64[$4 + $5 >> 3] - HEAPF64[$0 + $11 >> 3]) * $2;
   $7 = HEAPF64[$6 + 16 >> 3];
   $8 = HEAPF64[$6 + 8 >> 3];
   $2 = HEAPF64[$6 >> 3];
  }
  HEAPF64[$1 + 24 >> 3] = $3;
  HEAPF64[$1 + 16 >> 3] = $7;
  HEAPF64[$1 + 8 >> 3] = $8;
  HEAPF64[$1 >> 3] = $2;
 }
 
 function btTransform_setIdentity($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 80 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 96 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 104 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 120 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btTransform_equal($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 56 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 56 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 48 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 40 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 40 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 36 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 36 >> 2] = $2;
  $2 = HEAP32[$1 + 68 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$0 + 68 >> 2] = $2;
  $3 = $1 + 72 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 72 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 80 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 80 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 88 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 88 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 104 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 104 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 112 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 120 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 120 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 100 >> 2];
  HEAP32[$0 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$0 + 100 >> 2] = $2;
 }
 
 function btMatrix3x3_getRow($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return ($1 << 5) + $0 | 0;
 }
 
 function btMotionState_destroy($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0)
  }
 }
 
 function layaMotionState_create() {
  var $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(8);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 29788;
  return $0 | 0;
 }
 
 function layaMotionState_set_rigidBodyID($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function btCollisionObject_create() {
  var $0 = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(576);
  btCollisionObject__btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btCollisionObject_setContactProcessingThreshold($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 368 >> 3] = $1;
 }
 
 function btCollisionObject_setActivationState($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btCollisionObject__setActivationState_28int_29_20const($0, $1);
 }
 
 function btCollisionObject_forceActivationState($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 408 >> 2] = $1;
 }
 
 function btCollisionObject_activate($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btCollisionObject__activate_28bool_29_20const($0, $1);
 }
 
 function btCollisionObject_isActive($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 408 >> 2];
  return ($0 | 0) != 2 & ($0 | 0) != 5;
 }
 
 function btCollisionObject_setRestitution($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 432 >> 3] = $1;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
 }
 
 function btCollisionObject_setFriction($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 424 >> 3] = $1;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
 }
 
 function btCollisionObject_setRollingFriction($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 440 >> 3] = $1;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
 }
 
 function btCollisionObject_getCollisionFlags($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 392 >> 2];
 }
 
 function btCollisionObject_setCollisionFlags($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 392 >> 2] = $1;
 }
 
 function btCollisionObject_getWorldTransform($0) {
  $0 = $0 | 0;
  return $0 + 8 | 0;
 }
 
 function btCollisionObject_setWorldTransform($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 32 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 16 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 12 >> 2] = $2;
  $3 = $1 + 56 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 - -64 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 48 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 56 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 40 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = HEAP32[$1 + 36 >> 2];
  $2 = $0 + 40 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = HEAP32[$1 + 68 >> 2];
  $2 = $0 + 72 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 72 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 80 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 80 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 88 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 88 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 96 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 120 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 128 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 112 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 120 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 104 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 100 >> 2];
  $0 = $0 + 104 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btCollisionObject_setInterpolationWorldTransform($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 160 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 152 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 144 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 140 >> 2] = $2;
  $3 = $1 + 56 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 192 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 48 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 184 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 40 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 176 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = HEAP32[$1 + 36 >> 2];
  $2 = $0 + 168 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = HEAP32[$1 + 68 >> 2];
  $2 = $0 + 200 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $1 + 72 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 208 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 80 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 216 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 88 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 224 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 120 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 256 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 112 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 248 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 104 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 240 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 100 >> 2];
  $0 = $0 + 232 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btCollisionObject_setCollisionShape($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1);
 }
 
 function btCollisionObject_getCcdMotionThreshold($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 504 >> 3];
 }
 
 function btCollisionObject_setCcdMotionThreshold($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 504 >> 3] = $1;
 }
 
 function btCollisionObject_getCcdSweptSphereRadius($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 496 >> 3];
 }
 
 function btCollisionObject_setCcdSweptSphereRadius($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 496 >> 3] = $1;
 }
 
 function btCollisionObject_getUserIndex($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 484 >> 2];
 }
 
 function btCollisionObject_setUserIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 484 >> 2] = $1;
 }
 
 function btCollisionObject_getActivationState($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 408 >> 2];
 }
 
 function btCollisionObject_setInterpolationAngularVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 296 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 300 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 304 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 312 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 320 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btCollisionObject_setInterpolationLinearVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 264 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 268 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 272 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 280 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 288 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btCollisionObject_getNumOverlappingObjects($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 580 >> 2];
 }
 
 function btCollisionObject_getOverlappingObject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 + 588 >> 2] + ($1 << 2) >> 2];
 }
 
 function RayResultCallback_set_m_flags($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 28 >> 2] = $1;
 }
 
 function RayResultCallback_hasHit($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 16 >> 2] != 0 | 0;
 }
 
 function RayResultCallback_set_m_collisionFilterGroup($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 20 >> 2] = $1;
 }
 
 function RayResultCallback_set_m_closestHitFraction($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 8 >> 3] = $1;
 }
 
 function RayResultCallback_set_m_collisionObject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 16 >> 2] = $1;
 }
 
 function ClosestRayResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = operator_20new_28unsigned_20long_29(160);
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 1;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 1072693248;
  HEAP32[$2 >> 2] = 29868;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 36 >> 2] = $3;
  $4 = $0 + 8 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 40 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $4 = $0 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 48 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $0 = $0 + 24 | 0;
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 56 | 0;
  HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 68 >> 2] = $0;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $0 = $2 + 72 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $0 = $2 + 80 | 0;
  HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $1 = $1 + 24 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $0 = $2 + 88 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  return $2 | 0;
 }
 
 function ClosestRayResultCallback_get_m_rayFromWorld($0) {
  $0 = $0 | 0;
  return $0 + 32 | 0;
 }
 
 function ClosestRayResultCallback_set_m_rayFromWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 36 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 56 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 40 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function ClosestRayResultCallback_get_m_rayToWorld($0) {
  $0 = $0 | 0;
  return $0 - -64 | 0;
 }
 
 function ClosestRayResultCallback_set_m_rayToWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 68 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 88 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 80 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 72 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function tBtCollisionObjectArray_size($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function tBtCollisionObjectArray_at($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 + 12 >> 2] + ($1 << 2) >> 2];
 }
 
 function tVector3Array_at($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[$0 + 12 >> 2] + ($1 << 5) | 0;
 }
 
 function tScalarArray_at($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return +HEAPF64[HEAP32[$0 + 12 >> 2] + ($1 << 3) >> 3];
 }
 
 function AllHitsRayResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = operator_20new_28unsigned_20long_29(184);
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 1;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 1072693248;
  HEAP32[$2 >> 2] = 3e4;
  $3 = $2 + 36 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP8[$2 + 48 | 0] = 1;
  HEAP32[$2 + 44 >> 2] = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 60 >> 2] = $3;
  $4 = $0 + 8 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $3 = $2 - -64 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $4 = $0 + 16 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 72 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $0 = $0 + 24 | 0;
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 80 | 0;
  HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $0 = $1 + 24 | 0;
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $4 = $1 + 16 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $6 = $1 + 8 | 0;
  $8 = HEAP32[$6 >> 2];
  $6 = HEAP32[$6 + 4 >> 2];
  $9 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $5 = $2 + 124 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $2 + 144 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$2 + 132 >> 2] = 0;
  HEAP32[$2 + 152 >> 2] = 0;
  HEAP32[$2 + 172 >> 2] = 0;
  $5 = $2 + 164 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $2 + 96 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  $6 = $2 + 104 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $4;
  HEAP8[$2 + 176 | 0] = 1;
  HEAP8[$2 + 156 | 0] = 1;
  HEAP8[$2 + 136 | 0] = 1;
  $4 = $2 + 112 | 0;
  HEAP32[$4 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = $0;
  HEAP32[$2 + 88 >> 2] = $9;
  HEAP32[$2 + 92 >> 2] = $1;
  return $2 | 0;
 }
 
 function AllHitsRayResultCallback_get_m_rayFromWorld($0) {
  $0 = $0 | 0;
  return $0 + 56 | 0;
 }
 
 function AllHitsRayResultCallback_set_m_rayFromWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 60 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 80 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 72 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 - -64 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function AllHitsRayResultCallback_get_m_rayToWorld($0) {
  $0 = $0 | 0;
  return $0 + 88 | 0;
 }
 
 function AllHitsRayResultCallback_set_m_rayToWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 88 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 92 >> 2] = $2;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 104 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 96 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function AllHitsRayResultCallback_get_m_hitPointWorld($0) {
  $0 = $0 | 0;
  return $0 + 140 | 0;
 }
 
 function AllHitsRayResultCallback_get_m_hitFractions($0) {
  $0 = $0 | 0;
  return $0 + 160 | 0;
 }
 
 function btManifoldPoint_getDistance($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 160 >> 3];
 }
 
 function ConvexResultCallback_hasHit($0) {
  $0 = $0 | 0;
  return HEAPF64[$0 + 8 >> 3] < 1.0 | 0;
 }
 
 function ClosestConvexResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = operator_20new_28unsigned_20long_29(160);
  HEAP32[$3 + 16 >> 2] = 1;
  HEAP32[$3 + 20 >> 2] = -1;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 1072693248;
  HEAP32[$3 >> 2] = 30084;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 28 >> 2] = $2;
  $4 = $0 + 8 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $2 = $3 + 32 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $4 = $0 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $2 = $3 + 40 | 0;
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $0 = $0 + 24 | 0;
  $4 = HEAP32[$0 + 4 >> 2];
  $2 = $3 + 48 | 0;
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$3 + 56 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 60 >> 2] = $0;
  $2 = $1 + 8 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $0 = $3 - -64 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $2 = $1 + 16 | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $0 = $3 + 72 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $3 + 80 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$3 + 152 >> 2] = 0;
  return $3 | 0;
 }
 
 function ClosestConvexResultCallback_get_m_hitCollisionObject($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 152 >> 2];
 }
 
 function ClosestConvexResultCallback_set_m_hitCollisionObject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 152 >> 2] = $1;
 }
 
 function AllConvexResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = operator_20new_28unsigned_20long_29(176);
  HEAP32[$2 + 16 >> 2] = 1;
  HEAP32[$2 + 20 >> 2] = -1;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 1072693248;
  HEAP32[$2 >> 2] = 30224;
  $3 = $2 + 28 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP8[$2 + 40 | 0] = 1;
  HEAP32[$2 + 36 >> 2] = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 52 >> 2] = $3;
  $4 = $0 + 8 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 56 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $4 = $0 + 16 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $3 = $2 - -64 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $7;
  $0 = $0 + 24 | 0;
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 72 | 0;
  HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $0 = $1 + 24 | 0;
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $4 = $1 + 16 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $6 = $1 + 8 | 0;
  $8 = HEAP32[$6 >> 2];
  $6 = HEAP32[$6 + 4 >> 2];
  $9 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 124 >> 2] = 0;
  $5 = $2 + 156 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$2 + 164 >> 2] = 0;
  HEAP32[$2 + 144 >> 2] = 0;
  $5 = $2 + 136 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $2 + 116 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $2 + 88 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  $6 = $2 + 96 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $4;
  HEAP8[$2 + 148 | 0] = 1;
  HEAP8[$2 + 168 | 0] = 1;
  HEAP8[$2 + 128 | 0] = 1;
  $4 = $2 + 104 | 0;
  HEAP32[$4 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = $0;
  HEAP32[$2 + 80 >> 2] = $9;
  HEAP32[$2 + 84 >> 2] = $1;
  return $2 | 0;
 }
 
 function AllConvexResultCallback_get_m_hitNormalWorld($0) {
  $0 = $0 | 0;
  return $0 + 112 | 0;
 }
 
 function AllConvexResultCallback_get_m_hitPointWorld($0) {
  $0 = $0 | 0;
  return $0 + 132 | 0;
 }
 
 function AllConvexResultCallback_get_m_hitFractions($0) {
  $0 = $0 | 0;
  return $0 + 152 | 0;
 }
 
 function AllConvexResultCallback_get_m_collisionObjects($0) {
  $0 = $0 | 0;
  return $0 + 24 | 0;
 }
 
 function btCollisionShape_getLocalScaling($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 }
 
 function btCollisionShape_setLocalScaling($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $4 = $1 + 24 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $4 = $1 + 16 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $4 = $1 + 8 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  if (HEAPF64[$2 >> 3] == 0.0) {
   HEAP32[$2 >> 2] = -755914244;
   HEAP32[$2 + 4 >> 2] = 1062232653;
  }
  if (HEAPF64[$2 + 8 >> 3] == 0.0) {
   HEAP32[$2 + 8 >> 2] = -755914244;
   HEAP32[$2 + 12 >> 2] = 1062232653;
  }
  if (HEAPF64[$2 + 16 >> 3] == 0.0) {
   HEAP32[$2 + 16 >> 2] = -755914244;
   HEAP32[$2 + 20 >> 2] = 1062232653;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2);
  __stack_pointer = $2 + 32 | 0;
 }
 
 function btCollisionShape_calculateLocalInertia($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2);
 }
 
 function btBoxShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(104);
  btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($1);
  $2 = HEAPF64[$0 >> 3];
  $5 = HEAPF64[$0 + 8 >> 3];
  $3 = HEAPF64[$0 + 16 >> 3];
  $4 = $1 + 72 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $6 = $3 * HEAPF64[$1 + 32 >> 3];
  $3 = HEAPF64[$1 + 80 >> 3];
  HEAPF64[$1 - -64 >> 3] = $6 - $3;
  HEAPF64[$1 + 56 >> 3] = $5 * HEAPF64[$1 + 24 >> 3] - $3;
  HEAPF64[$1 + 48 >> 3] = $2 * HEAPF64[$1 + 16 >> 3] - $3;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = 7856;
  $2 = HEAPF64[$0 >> 3];
  $5 = HEAPF64[$0 + 8 >> 3];
  $4 = $2 < $5;
  $2 = HEAPF64[((HEAPF64[$0 + 16 >> 3] > ($4 ? $2 : $5) ? !$4 : 2) << 3) + $0 >> 3] * .10000000149011612;
  if ($3 > $2) {
   btBoxShape__setMargin_28double_29($1, $2)
  }
  return $1 | 0;
 }
 
 function btCapsuleShape_create($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(104);
  btConvexInternalShape__btConvexInternalShape_28_29($2);
  HEAPF64[$2 + 80 >> 3] = $0;
  HEAP32[$2 >> 2] = 8116;
  HEAP32[$2 + 96 >> 2] = 1;
  HEAP32[$2 + 4 >> 2] = 10;
  $3 = $2 + 72 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAPF64[$2 - -64 >> 3] = $0;
  HEAPF64[$2 + 56 >> 3] = $1 * .5;
  HEAPF64[$2 + 48 >> 3] = $0;
  return $2 | 0;
 }
 
 function btCapsuleShapeX_create($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(104);
  btConvexInternalShape__btConvexInternalShape_28_29($2);
  HEAP32[$2 + 96 >> 2] = 0;
  HEAPF64[$2 + 80 >> 3] = $0;
  HEAP32[$2 >> 2] = 8216;
  HEAP32[$2 + 4 >> 2] = 10;
  $3 = $2 + 72 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAPF64[$2 - -64 >> 3] = $0;
  HEAPF64[$2 + 56 >> 3] = $0;
  HEAPF64[$2 + 48 >> 3] = $1 * .5;
  return $2 | 0;
 }
 
 function btCapsuleShapeZ_create($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(104);
  btConvexInternalShape__btConvexInternalShape_28_29($2);
  HEAP32[$2 + 96 >> 2] = 2;
  HEAPF64[$2 + 80 >> 3] = $0;
  HEAP32[$2 >> 2] = 8316;
  HEAP32[$2 + 4 >> 2] = 10;
  $3 = $2 + 72 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAPF64[$2 - -64 >> 3] = $1 * .5;
  HEAPF64[$2 + 56 >> 3] = $0;
  HEAPF64[$2 + 48 >> 3] = $0;
  return $2 | 0;
 }
 
 function btCylinderShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(104);
  btConvexInternalShape__btConvexInternalShape_28_29($1);
  $2 = HEAPF64[$0 >> 3];
  $5 = HEAPF64[$0 + 8 >> 3];
  $3 = HEAPF64[$0 + 16 >> 3];
  $4 = $1 + 72 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $6 = $3 * HEAPF64[$1 + 32 >> 3];
  $3 = HEAPF64[$1 + 80 >> 3];
  HEAPF64[$1 - -64 >> 3] = $6 - $3;
  HEAPF64[$1 + 56 >> 3] = $5 * HEAPF64[$1 + 24 >> 3] - $3;
  HEAPF64[$1 + 48 >> 3] = $2 * HEAPF64[$1 + 16 >> 3] - $3;
  HEAP32[$1 + 96 >> 2] = 1;
  HEAP32[$1 >> 2] = 8512;
  $2 = HEAPF64[$0 >> 3];
  $5 = HEAPF64[$0 + 8 >> 3];
  $4 = $2 < $5;
  $2 = HEAPF64[((HEAPF64[$0 + 16 >> 3] > ($4 ? $2 : $5) ? !$4 : 2) << 3) + $0 >> 3] * .10000000149011612;
  if ($3 > $2) {
   btBoxShape__setMargin_28double_29($1, $2)
  }
  HEAP32[$1 + 4 >> 2] = 13;
  return $1 | 0;
 }
 
 function btCylinderShapeX_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(104);
  $7 = btConvexInternalShape__btConvexInternalShape_28_29($1);
  $3 = HEAPF64[$0 >> 3];
  $6 = HEAPF64[$0 + 8 >> 3];
  $2 = HEAPF64[$0 + 16 >> 3];
  $5 = $1 + 72 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $4 = $2 * HEAPF64[$1 + 32 >> 3];
  $2 = HEAPF64[$1 + 80 >> 3];
  $8 = $4 - $2;
  HEAPF64[$1 - -64 >> 3] = $8;
  $6 = $6 * HEAPF64[$1 + 24 >> 3] - $2;
  HEAPF64[$1 + 56 >> 3] = $6;
  $9 = $3 * HEAPF64[$1 + 16 >> 3] - $2;
  HEAPF64[$1 + 48 >> 3] = $9;
  HEAP32[$1 + 96 >> 2] = 1;
  HEAP32[$1 >> 2] = 8512;
  $3 = HEAPF64[$0 >> 3];
  $4 = HEAPF64[$0 + 8 >> 3];
  $5 = $3 < $4;
  $3 = HEAPF64[((HEAPF64[$0 + 16 >> 3] > ($5 ? $3 : $4) ? !$5 : 2) << 3) + $0 >> 3] * .10000000149011612;
  if ($2 > $3) {
   HEAPF64[$1 + 80 >> 3] = $3;
   $4 = HEAPF64[$7 + 80 >> 3];
   $10 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($7);
   HEAP32[$1 + 72 >> 2] = 0;
   HEAP32[$1 + 76 >> 2] = 0;
   HEAPF64[$1 + 56 >> 3] = $2 + $6 - $4;
   HEAPF64[$1 + 48 >> 3] = $2 + $9 - $3;
   HEAPF64[$1 + 64 >> 3] = $2 + $8 - $10;
  }
  HEAP32[$1 + 96 >> 2] = 0;
  HEAP32[$1 >> 2] = 8616;
  HEAP32[$1 + 4 >> 2] = 13;
  return $1 | 0;
 }
 
 function btCylinderShapeZ_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(104);
  $7 = btConvexInternalShape__btConvexInternalShape_28_29($1);
  $3 = HEAPF64[$0 >> 3];
  $6 = HEAPF64[$0 + 8 >> 3];
  $2 = HEAPF64[$0 + 16 >> 3];
  $5 = $1 + 72 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $4 = $2 * HEAPF64[$1 + 32 >> 3];
  $2 = HEAPF64[$1 + 80 >> 3];
  $8 = $4 - $2;
  HEAPF64[$1 - -64 >> 3] = $8;
  $6 = $6 * HEAPF64[$1 + 24 >> 3] - $2;
  HEAPF64[$1 + 56 >> 3] = $6;
  $9 = $3 * HEAPF64[$1 + 16 >> 3] - $2;
  HEAPF64[$1 + 48 >> 3] = $9;
  HEAP32[$1 + 96 >> 2] = 1;
  HEAP32[$1 >> 2] = 8512;
  $3 = HEAPF64[$0 >> 3];
  $4 = HEAPF64[$0 + 8 >> 3];
  $5 = $3 < $4;
  $3 = HEAPF64[((HEAPF64[$0 + 16 >> 3] > ($5 ? $3 : $4) ? !$5 : 2) << 3) + $0 >> 3] * .10000000149011612;
  if ($2 > $3) {
   HEAPF64[$1 + 80 >> 3] = $3;
   $4 = HEAPF64[$7 + 80 >> 3];
   $10 = +FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($7);
   HEAP32[$1 + 72 >> 2] = 0;
   HEAP32[$1 + 76 >> 2] = 0;
   HEAPF64[$1 + 56 >> 3] = $2 + $6 - $4;
   HEAPF64[$1 + 48 >> 3] = $2 + $9 - $3;
   HEAPF64[$1 + 64 >> 3] = $2 + $8 - $10;
  }
  HEAP32[$1 + 96 >> 2] = 2;
  HEAP32[$1 >> 2] = 8720;
  HEAP32[$1 + 4 >> 2] = 13;
  return $1 | 0;
 }
 
 function btSphereShape_create($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(96);
  btConvexInternalShape__btConvexInternalShape_28_29($1);
  HEAP32[$1 + 40 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 1072693248;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 1072693248;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 1072693248;
  HEAP32[$1 + 4 >> 2] = 8;
  HEAP32[$1 >> 2] = 8920;
  HEAPF64[$1 + 48 >> 3] = $0;
  $2 = $1 + 56 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $1 - -64 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $1 + 72 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 88 >> 2] = 0;
  HEAP32[$1 + 92 >> 2] = 0;
  HEAPF64[$1 + 80 >> 3] = $0;
  return $1 | 0;
 }
 
 function btSphereShpae_setUnscaledRadius($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 80 >> 3] = $1;
  HEAPF64[$0 + 48 >> 3] = $1;
 }
 
 function btConeShape_create($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(136);
  btConvexInternalShape__btConvexInternalShape_28_29($2);
  HEAPF64[$2 + 112 >> 3] = $1;
  HEAPF64[$2 + 104 >> 3] = $0;
  HEAP32[$2 >> 2] = 9048;
  HEAP32[$2 + 128 >> 2] = 2;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP32[$2 + 124 >> 2] = 1;
  HEAP32[$2 + 4 >> 2] = 11;
  HEAPF64[$2 - -64 >> 3] = $0;
  HEAPF64[$2 + 56 >> 3] = $1;
  HEAPF64[$2 + 48 >> 3] = $0;
  HEAPF64[$2 + 96 >> 3] = $0 / Math_sqrt($0 * $0 + $1 * $1);
  return $2 | 0;
 }
 
 function btConeShapeX_create($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(136);
  btConvexInternalShape__btConvexInternalShape_28_29($2);
  HEAPF64[$2 + 112 >> 3] = $1;
  HEAPF64[$2 + 104 >> 3] = $0;
  HEAP32[$2 + 4 >> 2] = 11;
  HEAP32[$2 + 128 >> 2] = 2;
  HEAP32[$2 + 120 >> 2] = 1;
  HEAP32[$2 + 124 >> 2] = 0;
  HEAP32[$2 >> 2] = 9248;
  HEAPF64[$2 + 56 >> 3] = $0;
  HEAPF64[$2 - -64 >> 3] = $0;
  HEAPF64[$2 + 48 >> 3] = $1;
  HEAPF64[$2 + 96 >> 3] = $0 / Math_sqrt($0 * $0 + $1 * $1);
  return $2 | 0;
 }
 
 function btConeShapeZ_create($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(136);
  btConvexInternalShape__btConvexInternalShape_28_29($2);
  HEAPF64[$2 + 112 >> 3] = $1;
  HEAPF64[$2 + 104 >> 3] = $0;
  HEAP32[$2 + 4 >> 2] = 11;
  HEAP32[$2 + 128 >> 2] = 1;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP32[$2 + 124 >> 2] = 2;
  HEAP32[$2 >> 2] = 9148;
  HEAPF64[$2 - -64 >> 3] = $1;
  HEAPF64[$2 + 48 >> 3] = $0;
  HEAPF64[$2 + 56 >> 3] = $0;
  HEAPF64[$2 + 96 >> 3] = $0 / Math_sqrt($0 * $0 + $1 * $1);
  return $2 | 0;
 }
 
 function btStaticPlaneShape_create($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(160);
  btConcaveShape__btConcaveShape_28_29($2);
  HEAP32[$2 >> 2] = 9540;
  $3 = HEAPF64[$0 + 16 >> 3];
  $4 = HEAPF64[$0 >> 3];
  $5 = HEAPF64[$0 + 8 >> 3];
  $6 = HEAPF64[$0 + 24 >> 3];
  $0 = $2 + 152 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $2 + 144 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  $0 = $2 + 136 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  HEAP32[$2 + 128 >> 2] = 0;
  HEAP32[$2 + 132 >> 2] = 1072693248;
  HEAPF64[$2 + 120 >> 3] = $1;
  HEAPF64[$2 + 112 >> 3] = $6;
  HEAP32[$2 + 4 >> 2] = 28;
  $1 = 1.0 / Math_sqrt($3 * $3 + ($4 * $4 + $5 * $5));
  HEAPF64[$2 + 104 >> 3] = $3 * $1;
  HEAPF64[$2 + 96 >> 3] = $5 * $1;
  HEAPF64[$2 + 88 >> 3] = $4 * $1;
  return $2 | 0;
 }
 
 function btGImpactShapeInterface_updateBound($0) {
  $0 = $0 | 0;
  if (HEAPU8[$0 + 88 | 0]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
   HEAP8[$0 + 88 | 0] = 0;
  }
 }
 
 function btGImpactMeshShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(280);
  btConcaveShape__btConcaveShape_28_29($2);
  HEAP32[$2 + 144 >> 2] = 0;
  HEAP8[$2 + 148 | 0] = 1;
  HEAP32[$2 + 136 >> 2] = 0;
  HEAP32[$2 + 140 >> 2] = 0;
  HEAP32[$2 + 248 >> 2] = 0;
  HEAP32[$2 + 128 >> 2] = 0;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP32[$2 + 124 >> 2] = 0;
  HEAP32[$2 + 112 >> 2] = 0;
  HEAP32[$2 + 116 >> 2] = 1072693248;
  HEAP32[$2 + 104 >> 2] = 0;
  HEAP32[$2 + 108 >> 2] = 1072693248;
  HEAP32[$2 + 96 >> 2] = 0;
  HEAP32[$2 + 100 >> 2] = 1072693248;
  HEAP8[$2 + 88 | 0] = 1;
  HEAP32[$2 + 72 >> 2] = -1;
  HEAP32[$2 + 76 >> 2] = -1048577;
  HEAP32[$2 + 64 >> 2] = -1;
  HEAP32[$2 + 68 >> 2] = -1048577;
  HEAP32[$2 + 56 >> 2] = -1;
  HEAP32[$2 + 60 >> 2] = -1048577;
  HEAP32[$2 + 40 >> 2] = -1;
  HEAP32[$2 + 44 >> 2] = 2146435071;
  HEAP32[$2 + 32 >> 2] = -1;
  HEAP32[$2 + 36 >> 2] = 2146435071;
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 28 >> 2] = 2146435071;
  HEAP32[$2 + 4 >> 2] = 25;
  HEAP8[$2 + 276 | 0] = 1;
  HEAP32[$2 >> 2] = 9888;
  HEAP32[$2 + 264 >> 2] = 0;
  HEAP32[$2 + 268 >> 2] = 0;
  HEAP32[$2 + 272 >> 2] = 0;
  HEAP32[$2 + 256 >> 2] = $0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) > 0) {
   while (1) {
    $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(352);
    $3 = $10;
    btConcaveShape__btConcaveShape_28_29($3);
    HEAP32[$3 + 144 >> 2] = 0;
    HEAP8[$3 + 148 | 0] = 1;
    $1 = $3 + 136 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$3 + 128 >> 2] = 0;
    $1 = $3 + 120 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $3 + 112 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 1072693248;
    $1 = $3 + 104 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 1072693248;
    HEAP32[$3 + 96 >> 2] = 0;
    HEAP32[$3 + 100 >> 2] = 1072693248;
    HEAP8[$3 + 88 | 0] = 1;
    $1 = $3 + 72 | 0;
    HEAP32[$1 >> 2] = -1;
    HEAP32[$1 + 4 >> 2] = -1048577;
    $1 = $3 - -64 | 0;
    HEAP32[$1 >> 2] = -1;
    HEAP32[$1 + 4 >> 2] = -1048577;
    $1 = $3 + 56 | 0;
    HEAP32[$1 >> 2] = -1;
    HEAP32[$1 + 4 >> 2] = -1048577;
    $1 = $3 + 40 | 0;
    HEAP32[$1 >> 2] = -1;
    HEAP32[$1 + 4 >> 2] = 2146435071;
    $1 = $3 + 32 | 0;
    HEAP32[$1 >> 2] = -1;
    HEAP32[$1 + 4 >> 2] = 2146435071;
    HEAP32[$3 + 24 >> 2] = -1;
    HEAP32[$3 + 28 >> 2] = 2146435071;
    HEAP32[$3 + 4 >> 2] = 25;
    HEAP32[$3 + 324 >> 2] = 0;
    $1 = $3 + 316 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $3 + 304 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $3 + 296 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 1072693248;
    $1 = $3 + 288 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 1072693248;
    $1 = $3 + 280 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 1072693248;
    $1 = $3 + 264 | 0;
    HEAP32[$1 >> 2] = 1073741824;
    HEAP32[$1 + 4 >> 2] = 1065646817;
    HEAP32[$3 + 256 >> 2] = 10236;
    HEAP32[$3 >> 2] = 9652;
    $1 = $3 + 340 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $3 + 332 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$3 + 312 >> 2] = $9;
    HEAP32[$3 + 272 >> 2] = $0;
    HEAP32[$3 + 248 >> 2] = $3 + 256;
    $1 = HEAP32[$2 + 264 >> 2];
    label$3 : {
     if (($1 | 0) != HEAP32[$2 + 268 >> 2]) {
      break label$3
     }
     $4 = $1 ? $1 << 1 : 1;
     if (($4 | 0) <= ($1 | 0)) {
      break label$3
     }
     label$4 : {
      if (!$4) {
       $5 = 0;
       break label$4;
      }
      $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
      $1 = HEAP32[$2 + 264 >> 2];
     }
     label$6 : {
      if (($1 | 0) <= 0) {
       break label$6
      }
      $6 = $1 & 3;
      $7 = 0;
      if ($1 - 1 >>> 0 >= 3) {
       $11 = $1 & -4;
       $3 = 0;
       while (1) {
        $8 = $3 + $5 | 0;
        HEAP32[$8 >> 2] = HEAP32[HEAP32[$2 + 272 >> 2] + $3 >> 2];
        HEAP32[$8 + 4 >> 2] = HEAP32[(HEAP32[$2 + 272 >> 2] + $3 | 0) + 4 >> 2];
        HEAP32[$8 + 8 >> 2] = HEAP32[(HEAP32[$2 + 272 >> 2] + $3 | 0) + 8 >> 2];
        HEAP32[$8 + 12 >> 2] = HEAP32[(HEAP32[$2 + 272 >> 2] + $3 | 0) + 12 >> 2];
        $3 = $3 + 16 | 0;
        $7 = $7 + 4 | 0;
        if (($11 | 0) != ($7 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$6) {
       break label$6
      }
      $3 = $7 << 2;
      while (1) {
       HEAP32[$3 + $5 >> 2] = HEAP32[HEAP32[$2 + 272 >> 2] + $3 >> 2];
       $3 = $3 + 4 | 0;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue
       }
       break;
      };
     }
     $3 = HEAP32[$2 + 272 >> 2];
     if (!(!$3 | !HEAPU8[$2 + 276 | 0])) {
      btAlignedFreeInternal_28void__29($3);
      $1 = HEAP32[$2 + 264 >> 2];
     }
     HEAP32[$2 + 272 >> 2] = $5;
     HEAP8[$2 + 276 | 0] = 1;
     HEAP32[$2 + 268 >> 2] = $4;
    }
    HEAP32[$2 + 264 >> 2] = $1 + 1;
    HEAP32[HEAP32[$2 + 272 >> 2] + ($1 << 2) >> 2] = $10;
    $9 = $9 + 1 | 0;
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) > ($9 | 0)) {
     continue
    }
    break;
   }
  }
  return $2 | 0;
 }
 
 function btBvhTriangleMeshShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(120);
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  btConcaveShape__btConcaveShape_28_29($1);
  HEAP32[$1 >> 2] = 10368;
  HEAP32[$1 + 88 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = 21;
  label$1 : {
   if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1 + 24 | 0, $1 + 56 | 0);
    break label$1;
   }
   $0 = $2 - -64 | 0;
   $10 = $0 + 24 | 0;
   $4 = $10;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $0 + 16 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $8 = $0 + 8 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$2 + 68 >> 2] = 1072693248;
   $9 = $2 + 32 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($9, $1, $0);
   HEAPF64[$1 + 56 >> 3] = HEAPF64[$2 + 32 >> 3] + HEAPF64[$1 + 16 >> 3];
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$2 + 68 >> 2] = -1074790400;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($2, $1, $0);
   $11 = $2 + 24 | 0;
   $5 = $11;
   $3 = HEAP32[$5 + 4 >> 2];
   $12 = $9 + 24 | 0;
   $6 = $12;
   HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$6 + 4 >> 2] = $3;
   $13 = $2 + 16 | 0;
   $3 = $13;
   $6 = HEAP32[$3 + 4 >> 2];
   $5 = $9 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $6 = $2 + 8 | 0;
   $7 = HEAP32[$6 + 4 >> 2];
   $3 = $9 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$3 + 4 >> 2] = $7;
   $7 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 + 36 >> 2] = $7;
   HEAPF64[$1 + 24 >> 3] = HEAPF64[$2 + 32 >> 3] - HEAPF64[$1 + 16 >> 3];
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 1072693248;
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$2 + 68 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($9, $1, $0);
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = -1074790400;
   HEAPF64[$1 - -64 >> 3] = HEAPF64[$3 >> 3] + HEAPF64[$1 + 16 >> 3];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($2, $1, $0);
   $7 = HEAP32[$11 + 4 >> 2];
   HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$12 + 4 >> 2] = $7;
   $7 = HEAP32[$13 + 4 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $7 = HEAP32[$6 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$3 + 4 >> 2] = $7;
   $7 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 + 36 >> 2] = $7;
   HEAPF64[$1 + 32 >> 3] = HEAPF64[$3 >> 3] - HEAPF64[$1 + 16 >> 3];
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 1072693248;
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$2 + 68 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($9, $1, $0);
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = -1074790400;
   HEAPF64[$1 + 72 >> 3] = HEAPF64[$5 >> 3] + HEAPF64[$1 + 16 >> 3];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($2, $1, $0);
   $0 = HEAP32[$11 + 4 >> 2];
   HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$12 + 4 >> 2] = $0;
   $0 = HEAP32[$13 + 4 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$5 + 4 >> 2] = $0;
   $0 = HEAP32[$6 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 + 36 >> 2] = $0;
   HEAPF64[$1 + 40 >> 3] = HEAPF64[$5 >> 3] - HEAPF64[$1 + 16 >> 3];
  }
  __stack_pointer = $2 + 96 | 0;
  HEAP8[$1 + 101 | 0] = 0;
  HEAP8[$1 + 100 | 0] = 1;
  HEAP32[$1 + 92 >> 2] = 0;
  HEAP32[$1 + 96 >> 2] = 0;
  HEAP32[$1 >> 2] = 11072;
  HEAP32[$1 + 4 >> 2] = 21;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(224);
  $2 = btOptimizedBvh__btOptimizedBvh_28_29($0);
  HEAP32[$1 + 92 >> 2] = $0;
  btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29($2, HEAP32[$1 + 88 >> 2], HEAPU8[$1 + 100 | 0], $1 + 24 | 0, $1 + 56 | 0);
  HEAP8[$1 + 101 | 0] = 1;
  return $1 | 0;
 }
 
 function btCompoundShape_create() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(152);
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = -1;
  HEAP32[$3 >> 2] = 14552;
  HEAP32[$3 + 120 >> 2] = 0;
  HEAP32[$3 + 124 >> 2] = 1072693248;
  HEAP32[$3 + 112 >> 2] = 0;
  HEAP32[$3 + 116 >> 2] = 0;
  HEAP32[$3 + 104 >> 2] = 0;
  HEAP32[$3 + 108 >> 2] = 1;
  HEAP32[$3 + 72 >> 2] = 966823146;
  HEAP32[$3 + 76 >> 2] = -970375591;
  HEAP32[$3 + 40 >> 2] = 966823146;
  HEAP32[$3 + 44 >> 2] = 1177108057;
  HEAP8[$3 + 32 | 0] = 1;
  HEAP32[$3 + 28 >> 2] = 0;
  $0 = $3 + 144 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $3 + 136 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  $0 = $3 + 128 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  $0 = $3 + 96 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $3 + 88 | 0;
  HEAP32[$0 >> 2] = 966823146;
  HEAP32[$0 + 4 >> 2] = -970375591;
  $0 = $3 + 80 | 0;
  HEAP32[$0 >> 2] = 966823146;
  HEAP32[$0 + 4 >> 2] = -970375591;
  $0 = $3 - -64 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $3 + 56 | 0;
  HEAP32[$0 >> 2] = 966823146;
  HEAP32[$0 + 4 >> 2] = 1177108057;
  $0 = $3 + 48 | 0;
  HEAP32[$0 >> 2] = 966823146;
  HEAP32[$0 + 4 >> 2] = 1177108057;
  $0 = $3 + 20 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 31;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(40);
  btDbvt__btDbvt_28_29($0);
  HEAP32[$3 + 104 >> 2] = $0;
  if (HEAP32[$3 + 24 >> 2] < 0) {
   $8 = HEAP32[$3 + 20 >> 2];
   if (($8 | 0) > 0) {
    $0 = 128;
    while (1) {
     $7 = HEAP32[$3 + 28 >> 2] + $0 | 0;
     $2 = $7 - 128 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $4 = $0 - 128 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $1 = $2 + 24 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $1 = $2 + 16 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 16 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $2 = $2 + 8 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $4 = $4 + 8 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $2 = $7 - 96 | 0;
     $1 = $2 + 24 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $4 = $0 - 96 | 0;
     $5 = $4 + 24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $1 = $2 + 16 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 16 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $1 = $2 + 8 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 8 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $1 = HEAP32[$2 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $2 = $7 + -64 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $4 = $0 + -64 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $1 = $2 + 8 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 8 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $1 = $2 + 16 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 16 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $2 = $2 + 24 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $4 = $4 + 24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $2 = $7 - 32 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $4 = $0 - 32 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $1 = $2 + 8 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 8 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $1 = $2 + 16 | 0;
     $6 = HEAP32[$1 + 4 >> 2];
     $5 = $4 + 16 | 0;
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $6;
     $2 = $2 + 24 | 0;
     $1 = HEAP32[$2 + 4 >> 2];
     $4 = $4 + 24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 4 >> 2] = $1;
     $2 = HEAP32[$7 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$0 + 4 >> 2] = $2;
     $2 = $7 + 8 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     $1 = $0 + 8 | 0;
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = $4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$7 + 16 >> 2];
     $0 = $0 + 152 | 0;
     $8 = $8 - 1 | 0;
     if ($8) {
      continue
     }
     break;
    };
   }
   $0 = HEAP32[$3 + 28 >> 2];
   if (!(!$0 | !HEAPU8[$3 + 32 | 0])) {
    btAlignedFreeInternal_28void__29($0)
   }
   HEAP32[$3 + 28 >> 2] = 0;
   HEAP8[$3 + 32 | 0] = 1;
   HEAP32[$3 + 24 >> 2] = 0;
  }
  return $3 | 0;
 }
 
 function btCompoundShape_addChildShape($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  $8 = __stack_pointer - 288 | 0;
  __stack_pointer = $8;
  HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + 1;
  $3 = $1 + 8 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $6 = $8 + 136 | 0;
  $4 = $6 + 8 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 16 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 24 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 40 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 40 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 48 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 48 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 56 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 56 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 72 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 72 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 80 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 80 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 88 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 88 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  HEAP32[$8 + 280 >> 2] = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$8 + 136 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$8 + 140 >> 2] = $3;
  $3 = HEAP32[$1 + 36 >> 2];
  HEAP32[$8 + 168 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$8 + 172 >> 2] = $3;
  $3 = HEAP32[$1 + 68 >> 2];
  HEAP32[$8 + 200 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$8 + 204 >> 2] = $3;
  $3 = $1 + 120 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 120 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 112 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $4 = $6 + 112 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = $1 + 104 | 0;
  $5 = HEAP32[$3 + 4 >> 2];
  $6 = $6 + 104 | 0;
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  HEAP32[$8 + 264 >> 2] = $2;
  $6 = HEAP32[$1 + 100 >> 2];
  HEAP32[$8 + 232 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$8 + 236 >> 2] = $6;
  HEAP32[$8 + 268 >> 2] = HEAP32[$2 + 4 >> 2];
  (wasm2js_i32$0 = $8, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2)), HEAPF64[wasm2js_i32$0 + 272 >> 3] = wasm2js_f64$0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $1, $8 + 104 | 0, $8 + 72 | 0);
  $11 = HEAPF64[$8 + 104 >> 3];
  if ($11 < HEAPF64[$0 + 40 >> 3]) {
   HEAPF64[$0 + 40 >> 3] = $11
  }
  $11 = HEAPF64[$8 + 72 >> 3];
  if ($11 > HEAPF64[$0 + 72 >> 3]) {
   HEAPF64[$0 + 72 >> 3] = $11
  }
  $11 = HEAPF64[$8 + 112 >> 3];
  if ($11 < HEAPF64[$0 + 48 >> 3]) {
   HEAPF64[$0 + 48 >> 3] = $11
  }
  $11 = HEAPF64[$8 + 80 >> 3];
  if ($11 > HEAPF64[$0 + 80 >> 3]) {
   HEAPF64[$0 + 80 >> 3] = $11
  }
  $11 = HEAPF64[$8 + 120 >> 3];
  if ($11 < HEAPF64[$0 + 56 >> 3]) {
   HEAPF64[$0 + 56 >> 3] = $11
  }
  $11 = HEAPF64[$8 + 88 >> 3];
  if ($11 > HEAPF64[$0 + 88 >> 3]) {
   HEAPF64[$0 + 88 >> 3] = $11
  }
  $6 = HEAP32[$0 + 104 >> 2];
  if ($6) {
   $2 = $8 + 104 | 0;
   $3 = $2 + 24 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $1 = $8 + 8 | 0;
   $4 = $1 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $2 + 16 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $1 + 16 | 0;
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $2 = $2 + 8 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $5 = $1 + 8 | 0;
   HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $2 = $8 + 72 | 0;
   $3 = $2 + 8 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $8 + 48 | 0;
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $2 + 16 | 0;
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $8 + 56 | 0;
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $2 = $2 + 24 | 0;
   $3 = HEAP32[$2 + 4 >> 2];
   $5 = $8 - -64 | 0;
   HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   $2 = HEAP32[$8 + 108 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$8 + 104 >> 2];
   HEAP32[$8 + 12 >> 2] = $2;
   $2 = HEAP32[$8 + 76 >> 2];
   HEAP32[$8 + 40 >> 2] = HEAP32[$8 + 72 >> 2];
   HEAP32[$8 + 44 >> 2] = $2;
   (wasm2js_i32$0 = $8, wasm2js_i32$1 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($6, $1, HEAP32[$0 + 20 >> 2])), HEAP32[wasm2js_i32$0 + 280 >> 2] = wasm2js_i32$1;
  }
  $1 = $8 + 136 | 0;
  $2 = $0 + 16 | 0;
  $0 = HEAP32[$2 + 4 >> 2];
  label$1 : {
   if (($0 | 0) != HEAP32[$2 + 8 >> 2]) {
    break label$1
   }
   $13 = $0 ? $0 << 1 : 1;
   if (($13 | 0) <= ($0 | 0)) {
    break label$1
   }
   if ($13) {
    $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($13, 152));
    $0 = HEAP32[$2 + 4 >> 2];
   }
   if (($0 | 0) > 0) {
    $5 = 128;
    while (1) {
     $6 = HEAP32[$2 + 12 >> 2] + $5 | 0;
     $4 = $6 - 128 | 0;
     $7 = HEAP32[$4 + 4 >> 2];
     $3 = $5 + $14 | 0;
     $9 = $3 - 128 | 0;
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $7 = $4 + 24 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 24 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $7 = $4 + 16 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $4 = $4 + 8 | 0;
     $7 = HEAP32[$4 + 4 >> 2];
     $9 = $9 + 8 | 0;
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $4 = $6 - 96 | 0;
     $7 = $4 + 24 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $9 = $3 - 96 | 0;
     $10 = $9 + 24 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $7 = $4 + 16 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $7 = $4 + 8 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 8 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $7 = HEAP32[$4 + 4 >> 2];
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $4 = $6 + -64 | 0;
     $7 = HEAP32[$4 + 4 >> 2];
     $9 = $3 + -64 | 0;
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $7 = $4 + 8 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 8 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $7 = $4 + 16 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $4 = $4 + 24 | 0;
     $7 = HEAP32[$4 + 4 >> 2];
     $9 = $9 + 24 | 0;
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $4 = $6 - 32 | 0;
     $7 = HEAP32[$4 + 4 >> 2];
     $9 = $3 - 32 | 0;
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $7 = $4 + 8 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 8 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $7 = $4 + 16 | 0;
     $12 = HEAP32[$7 + 4 >> 2];
     $10 = $9 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$10 + 4 >> 2] = $12;
     $4 = $4 + 24 | 0;
     $7 = HEAP32[$4 + 4 >> 2];
     $9 = $9 + 24 | 0;
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $7;
     $4 = HEAP32[$6 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     $4 = $6 + 8 | 0;
     $9 = HEAP32[$4 + 4 >> 2];
     $7 = $3 + 8 | 0;
     HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$7 + 4 >> 2] = $9;
     HEAP32[$3 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
     $5 = $5 + 152 | 0;
     $0 = $0 - 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   $0 = HEAP32[$2 + 12 >> 2];
   if (!(!$0 | !HEAPU8[$2 + 16 | 0])) {
    btAlignedFreeInternal_28void__29($0)
   }
   HEAP32[$2 + 12 >> 2] = $14;
   HEAP8[$2 + 16 | 0] = 1;
   HEAP32[$2 + 8 >> 2] = $13;
   $0 = HEAP32[$2 + 4 >> 2];
  }
  $6 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$2 + 12 >> 2] + Math_imul($0, 152) | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $6;
  $6 = $1 + 24 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 16 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 8 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 56 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 56 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 48 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 48 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 40 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 40 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = HEAP32[$1 + 36 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 36 >> 2] = $6;
  $6 = HEAP32[$1 + 68 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$0 + 68 >> 2] = $6;
  $6 = $1 + 72 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 72 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 80 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 80 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 88 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 88 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = HEAP32[$1 + 100 >> 2];
  HEAP32[$0 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$0 + 100 >> 2] = $6;
  $6 = $1 + 104 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 104 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 112 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 112 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = $1 + 120 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 120 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  $6 = HEAP32[$1 + 132 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$1 + 128 >> 2];
  HEAP32[$0 + 132 >> 2] = $6;
  $6 = $1 + 136 | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 136 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $3;
  HEAP32[$0 + 144 >> 2] = HEAP32[$1 + 144 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
  __stack_pointer = $8 + 288 | 0;
 }
 
 function btCompoundShape_removeChildShapeByIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btCompoundShape__removeChildShapeByIndex_28int_29($0, $1);
 }
 
 function btCompoundShape_getChildShape($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($1, 152) | 0) + 128 >> 2];
 }
 
 function btCompoundShape_updateChildTransform($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = __stack_pointer - 128 | 0;
  __stack_pointer = $7;
  $4 = HEAP32[$2 + 4 >> 2];
  $8 = Math_imul($1, 152);
  $1 = $8 + HEAP32[$0 + 28 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  $4 = $2 + 24 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 16 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 8 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 56 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 56 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 48 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 48 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 40 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 40 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = HEAP32[$2 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$1 + 36 >> 2] = $4;
  $4 = $2 + 88 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 88 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 80 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 80 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 72 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 72 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = HEAP32[$2 + 68 >> 2];
  HEAP32[$1 + 64 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$1 + 68 >> 2] = $4;
  $4 = HEAP32[$2 + 100 >> 2];
  HEAP32[$1 + 96 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$1 + 100 >> 2] = $4;
  $4 = $2 + 104 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 104 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 112 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 112 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 120 | 0;
  $6 = HEAP32[$4 + 4 >> 2];
  $1 = $1 + 120 | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$1 + 4 >> 2] = $6;
  if (HEAP32[$0 + 104 >> 2]) {
   $4 = HEAP32[(HEAP32[$0 + 28 >> 2] + $8 | 0) + 128 >> 2];
   $5 = $2;
   $1 = $7 + 96 | 0;
   $2 = $7 - -64 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $5, $1, $2);
   $4 = $1 + 24 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $7 + 24 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $1 + 16 | 0;
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $7 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$5 + 4 >> 2] = $6;
   $1 = $1 + 8 | 0;
   $4 = HEAP32[$1 + 4 >> 2];
   $6 = $7 + 8 | 0;
   HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $1 = $2 + 8 | 0;
   $4 = HEAP32[$1 + 4 >> 2];
   $6 = $7 + 40 | 0;
   HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $1 = $2 + 16 | 0;
   $4 = HEAP32[$1 + 4 >> 2];
   $6 = $7 + 48 | 0;
   HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 4 >> 2] = $4;
   $1 = $2 + 24 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   $4 = $7 + 56 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $2;
   $1 = HEAP32[$7 + 68 >> 2];
   HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 64 >> 2];
   HEAP32[$7 + 36 >> 2] = $1;
   $1 = HEAP32[$7 + 100 >> 2];
   HEAP32[$7 >> 2] = HEAP32[$7 + 96 >> 2];
   HEAP32[$7 + 4 >> 2] = $1;
   btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29(HEAP32[$0 + 104 >> 2], HEAP32[(HEAP32[$0 + 28 >> 2] + $8 | 0) + 144 >> 2], $7);
  }
  if ($3) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0)
  }
  __stack_pointer = $7 + 128 | 0;
 }
 
 function btConcaveShape_setMargin($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1);
 }
 
 function btConcaveShape_getMargin($0) {
  $0 = $0 | 0;
  return +FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0);
 }
 
 function btTriangleMesh_create() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(232);
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 1072693248;
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 >> 2] = 14812;
  HEAP8[$1 + 56 | 0] = 1;
  $0 = $1 + 32 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  $0 = $1 + 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  HEAP32[$1 + 52 >> 2] = 0;
  $0 = $1 + 44 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP8[$1 + 152 | 0] = 1;
  HEAP32[$1 + 148 >> 2] = 0;
  HEAP8[$1 + 172 | 0] = 1;
  $2 = $1 + 140 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP8[$1 + 192 | 0] = 1;
  $2 = $1 + 160 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP8[$1 + 212 | 0] = 1;
  $2 = $1 + 180 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 224 >> 2] = 0;
  HEAP32[$1 + 228 >> 2] = 0;
  HEAP8[$1 + 216 | 0] = 1;
  $2 = $1 + 200 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 208 >> 2] = 0;
  HEAP8[$1 + 217 | 0] = 1;
  $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32);
  $8 = HEAP32[$0 >> 2];
  label$1 : {
   if (($8 | 0) <= 0) {
    break label$1
   }
   if (($8 | 0) != 1) {
    $10 = $8 & -2;
    $2 = 0;
    while (1) {
     $4 = HEAP32[$1 + 52 >> 2] + $2 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $0 = $2 + $9 | 0;
     HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$0 + 4 >> 2] = $5;
     $5 = $4 + 24 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     $6 = $0 + 24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $7;
     $5 = $4 + 16 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     $6 = $0 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $7;
     $4 = $4 + 8 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $7 = $0 + 8 | 0;
     HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$7 + 4 >> 2] = $5;
     $4 = HEAP32[$1 + 52 >> 2] + $2 | 0;
     $5 = $4 + 40 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     $6 = $0 + 40 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $7;
     $5 = $4 + 48 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     $6 = $0 + 48 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $7;
     $5 = $4 + 56 | 0;
     $7 = HEAP32[$5 + 4 >> 2];
     $6 = $0 + 56 | 0;
     HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$6 + 4 >> 2] = $7;
     $4 = $4 + 32 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     $0 = $0 + 32 | 0;
     HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$0 + 4 >> 2] = $5;
     $2 = $2 - -64 | 0;
     $3 = $3 + 2 | 0;
     if (($10 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   if (!($8 & 1)) {
    break label$1
   }
   $3 = $3 << 5;
   $0 = $3 + $9 | 0;
   $3 = $3 + HEAP32[$1 + 52 >> 2] | 0;
   $2 = HEAP32[$3 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   $2 = $3 + 24 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $8 = $0 + 24 | 0;
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$8 + 4 >> 2] = $4;
   $2 = $3 + 16 | 0;
   $4 = HEAP32[$2 + 4 >> 2];
   $8 = $0 + 16 | 0;
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$8 + 4 >> 2] = $4;
   $3 = $3 + 8 | 0;
   $2 = HEAP32[$3 + 4 >> 2];
   $0 = $0 + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
  }
  $0 = HEAP32[$1 + 52 >> 2];
  if (!(!$0 | !HEAPU8[$1 + 56 | 0])) {
   btAlignedFreeInternal_28void__29($0)
  }
  HEAP32[$1 + 52 >> 2] = $9;
  HEAP8[$1 + 56 | 0] = 1;
  HEAP32[$1 + 48 >> 2] = 1;
  $0 = (HEAP32[$1 + 44 >> 2] << 5) + $9 | 0;
  HEAP32[$0 + 24 >> 2] = 2;
  HEAP32[$0 + 28 >> 2] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 32;
  HEAP32[$0 + 8 >> 2] = 12;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + 1;
  $3 = HEAPU8[$1 + 216 | 0];
  $2 = HEAP32[($3 ? $1 + 180 | 0 : $1 + 200 | 0) >> 2];
  $0 = HEAP32[$1 + 52 >> 2];
  HEAP32[$0 + 24 >> 2] = $3 ? 2 : 3;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = $3 ? 12 : 6;
  HEAP32[$0 >> 2] = ($2 | 0) / 3;
  label$5 : {
   if (HEAPU8[$1 + 217 | 0]) {
    $3 = 32;
    $2 = HEAP32[$1 + 140 >> 2];
    break label$5;
   }
   $3 = 24;
   $2 = HEAP32[$1 + 160 >> 2] / 3 | 0;
  }
  HEAP32[$0 + 20 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $2;
  return $1 | 0;
 }
 
 function btTriangleMesh_addTriangle($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = HEAP32[$0 + 52 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
  btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $1, $4));
  btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $2, $4));
  btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $3, $4));
 }
 
 function btDefaultCollisionConfiguration_create() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  $3 = operator_20new_28unsigned_20long_29(88);
  HEAP32[$9 + 24 >> 2] = 0;
  HEAP32[$9 + 28 >> 2] = 1;
  HEAP32[$9 + 16 >> 2] = 4096;
  HEAP32[$9 + 20 >> 2] = 4096;
  HEAP32[$9 + 8 >> 2] = 0;
  HEAP32[$9 + 12 >> 2] = 0;
  HEAP32[$3 >> 2] = 17712;
  $8 = $9 + 8 | 0;
  $0 = HEAP32[$8 + 20 >> 2];
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4);
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$1 >> 2] = ($0 ? 14928 : 15136) + 8;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(20);
  $1 = HEAP32[$3 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 3;
  HEAP32[$0 >> 2] = 15560;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$3 + 28 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 17828;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 32 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 17912;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 36 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 18004;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 40 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 18084;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 44 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 18172;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 48 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 18256;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 52 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 18324;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 56 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 18408;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 72 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$3 + 76 >> 2] = $0;
  HEAP32[$0 >> 2] = 18408;
  HEAP8[$0 + 4 | 0] = 1;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 >> 2] = 18492;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 68 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16);
  HEAP32[$0 + 8 >> 2] = 1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 18568;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$3 + 84 >> 2] = $0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16);
  HEAP32[$0 + 8 >> 2] = 1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 18568;
  HEAP32[$3 + 80 >> 2] = $0;
  HEAP8[$0 + 4 | 0] = 1;
  $12 = HEAP32[$8 + 16 >> 2];
  $0 = HEAP32[$8 >> 2];
  label$1 : {
   if ($0) {
    HEAP32[$3 + 8 >> 2] = $0;
    HEAP8[$3 + 12 | 0] = 0;
    break label$1;
   }
   HEAP8[$3 + 12 | 0] = 1;
   $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
   HEAP32[$5 + 20 >> 2] = 0;
   HEAP32[$5 >> 2] = 1496;
   $0 = HEAP32[$8 + 8 >> 2];
   HEAP32[$5 + 4 >> 2] = $0;
   $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($0, 1496));
   HEAP32[$5 + 12 >> 2] = $0;
   HEAP32[$5 + 16 >> 2] = $0;
   $11 = HEAP32[$5 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = $11;
   $6 = $11 - 1 | 0;
   label$3 : {
    if (!$6) {
     break label$3
    }
    $1 = HEAP32[$5 >> 2];
    $7 = $6 & 7;
    if ($7) {
     while (1) {
      $4 = $0;
      $0 = $0 + $1 | 0;
      HEAP32[$4 >> 2] = $0;
      $6 = $6 - 1 | 0;
      $7 = $7 - 1 | 0;
      if ($7) {
       continue
      }
      break;
     }
    }
    if ($11 - 2 >>> 0 < 7) {
     break label$3
    }
    $11 = $1 << 3;
    $13 = Math_imul($1, 7);
    $14 = Math_imul($1, 6);
    $15 = Math_imul($1, 5);
    $16 = $1 << 2;
    $4 = Math_imul($1, 3);
    $17 = $1 << 1;
    while (1) {
     $7 = $0 + $1 | 0;
     HEAP32[$0 >> 2] = $7;
     $2 = $0 + $17 | 0;
     HEAP32[$7 >> 2] = $2;
     $10 = $2;
     $2 = $0 + $4 | 0;
     HEAP32[$10 >> 2] = $2;
     $10 = $2;
     $2 = $0 + $16 | 0;
     HEAP32[$10 >> 2] = $2;
     $10 = $2;
     $2 = $0 + $15 | 0;
     HEAP32[$10 >> 2] = $2;
     $10 = $2;
     $2 = $0 + $14 | 0;
     HEAP32[$10 >> 2] = $2;
     $10 = $2;
     $2 = $0 + $13 | 0;
     HEAP32[$10 >> 2] = $2;
     HEAP32[$2 >> 2] = $0 + $11;
     $0 = $1 + ($1 + ($1 + ($1 + ($1 + ($1 + ($1 + $7 | 0) | 0) | 0) | 0) | 0) | 0) | 0;
     $6 = $6 - 8 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = $5;
  }
  $0 = HEAP32[$8 + 4 >> 2];
  __inlined_func$btDefaultCollisionConfiguration__btDefaultCollisionConfiguration_28btDefaultCollisionConstructionInfo_20const__29 : {
   if ($0) {
    HEAP32[$3 + 16 >> 2] = $0;
    HEAP8[$3 + 20 | 0] = 0;
    break __inlined_func$btDefaultCollisionConfiguration__btDefaultCollisionConfiguration_28btDefaultCollisionConstructionInfo_20const__29;
   }
   HEAP8[$3 + 20 | 0] = 1;
   $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
   HEAP32[$5 + 20 >> 2] = 0;
   $0 = ($12 | 0) > 72 ? $12 : 72;
   $0 = ($0 >>> 0 > 128 ? $0 : 128) + 16 & -16;
   HEAP32[$5 >> 2] = $0;
   $1 = HEAP32[$8 + 12 >> 2];
   HEAP32[$5 + 4 >> 2] = $1;
   $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($0, $1));
   HEAP32[$5 + 12 >> 2] = $0;
   HEAP32[$5 + 16 >> 2] = $0;
   $8 = HEAP32[$5 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = $8;
   $6 = $8 - 1 | 0;
   label$8 : {
    if (!$6) {
     break label$8
    }
    $1 = HEAP32[$5 >> 2];
    $7 = $6 & 7;
    if ($7) {
     while (1) {
      $4 = $0;
      $0 = $0 + $1 | 0;
      HEAP32[$4 >> 2] = $0;
      $6 = $6 - 1 | 0;
      $7 = $7 - 1 | 0;
      if ($7) {
       continue
      }
      break;
     }
    }
    if ($8 - 2 >>> 0 < 7) {
     break label$8
    }
    $7 = $1 << 3;
    $12 = Math_imul($1, 7);
    $11 = Math_imul($1, 6);
    $13 = Math_imul($1, 5);
    $14 = $1 << 2;
    $15 = Math_imul($1, 3);
    $16 = $1 << 1;
    while (1) {
     $8 = $0 + $1 | 0;
     HEAP32[$0 >> 2] = $8;
     $4 = $0 + $16 | 0;
     HEAP32[$8 >> 2] = $4;
     $2 = $4;
     $4 = $0 + $15 | 0;
     HEAP32[$2 >> 2] = $4;
     $2 = $4;
     $4 = $0 + $14 | 0;
     HEAP32[$2 >> 2] = $4;
     $2 = $4;
     $4 = $0 + $13 | 0;
     HEAP32[$2 >> 2] = $4;
     $2 = $4;
     $4 = $0 + $11 | 0;
     HEAP32[$2 >> 2] = $4;
     $2 = $4;
     $4 = $0 + $12 | 0;
     HEAP32[$2 >> 2] = $4;
     HEAP32[$4 >> 2] = $0 + $7;
     $0 = $1 + ($1 + ($1 + ($1 + ($1 + ($1 + ($1 + $8 | 0) | 0) | 0) | 0) | 0) | 0) | 0;
     $6 = $6 - 8 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 >> 2] = 0;
   HEAP32[$3 + 16 >> 2] = $5;
  }
  __stack_pointer = $9 + 32 | 0;
  return $3 | 0;
 }
 
 function btPersistentManifold_getBody0($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 1448 >> 2];
 }
 
 function btPersistentManifold_getBody1($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 1452 >> 2];
 }
 
 function btPersistentManifold_getNumContacts($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 1456 >> 2];
 }
 
 function btPersistentManifold_getContactPoint($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (Math_imul($1, 360) + $0 | 0) + 8 | 0;
 }
 
 function btDispatcher_getNumManifolds($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 
 function btDispatcher_getManifoldByIndexInternal($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1) | 0;
 }
 
 function btCollisionDispatcher_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = operator_20new_28unsigned_20long_29(10456);
  HEAP32[$1 >> 2] = 6744;
  HEAP32[$1 + 32 >> 2] = 6604;
  HEAP32[$1 + 4 >> 2] = 2;
  HEAP32[$1 + 10452 >> 2] = $0;
  HEAP32[$1 + 72 >> 2] = 80;
  HEAP8[$1 + 24 | 0] = 1;
  HEAP32[$1 + 20 >> 2] = 0;
  $2 = $1 - -64 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $1 + 12 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 + 76 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 + 80 >> 2] = wasm2js_i32$1;
  $2 = $1 + 5268 | 0;
  while (1) {
   $0 = $2;
   $3 = 0;
   while (1) {
    $4 = HEAP32[$1 + 10452 >> 2];
    (wasm2js_i32$0 = $0 - 5184 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5, $3) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4 = HEAP32[$1 + 10452 >> 2];
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, $5, $3) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $0 = $0 + 4 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 36) {
     continue
    }
    break;
   };
   $2 = $2 + 144 | 0;
   $5 = $5 + 1 | 0;
   if (($5 | 0) != 36) {
    continue
   }
   break;
  };
  return $1 | 0;
 }
 
 function btOverlappingPairCache_setInternalGhostPairCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $1);
 }
 
 function btDbvtBroadphase_create() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $0 = operator_20new_28unsigned_20long_29(192);
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$0 >> 2] = 19112;
  btDbvt__btDbvt_28_29($0 + 4 | 0);
  btDbvt__btDbvt_28_29($0 + 44 | 0);
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP8[$0 + 184 | 0] = 1;
  $1 = $0 + 172 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 165 | 0] = 0;
  HEAP8[$0 + 166 | 0] = 1;
  HEAP8[$0 + 164 | 0] = 1;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 124 >> 2] = 10;
  HEAP32[$0 + 128 >> 2] = 1;
  HEAP32[$0 + 116 >> 2] = 1;
  HEAP32[$0 + 120 >> 2] = 0;
  $1 = $0 + 144 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(72);
  btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($1);
  $3 = HEAP32[$0 + 172 >> 2];
  HEAP32[$0 + 160 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = $1;
  HEAP32[$0 + 152 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = 0;
  $1 = $0 + 84 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP8[$4 + 24 | 0] = 1;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  label$2 : {
   if (($3 | 0) >= 2) {
    $2 = $3 - 1 | 0;
    $3 = 36;
    while (1) {
     $1 = HEAP32[$0 + 180 >> 2] + $3 | 0;
     $6 = $1 - 4 | 0;
     $5 = HEAP32[$6 >> 2];
     if (!(!$5 | !HEAPU8[$1 | 0])) {
      btAlignedFreeInternal_28void__29($5)
     }
     HEAP32[$6 >> 2] = 0;
     HEAP8[$1 | 0] = 1;
     $1 = $1 - 12 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     $3 = $3 + 20 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    };
    break label$2;
   }
   if (($3 | 0) == 1) {
    break label$2
   }
   if (HEAP32[$0 + 176 >> 2] <= 0) {
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(20);
    $2 = HEAP32[$0 + 172 >> 2];
    label$7 : {
     if (($2 | 0) <= 0) {
      break label$7
     }
     $1 = 0;
     while (1) {
      btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29($1 + $6 | 0, HEAP32[$0 + 180 >> 2] + $1 | 0);
      $1 = $1 + 20 | 0;
      $2 = $2 - 1 | 0;
      if ($2) {
       continue
      }
      break;
     };
     $2 = HEAP32[$0 + 172 >> 2];
     if (($2 | 0) <= 0) {
      break label$7
     }
     $1 = 8;
     while (1) {
      $5 = HEAP32[$0 + 180 >> 2] + $1 | 0;
      $7 = $5 + 8 | 0;
      $8 = $5 + 4 | 0;
      $9 = HEAP32[$8 >> 2];
      if (!(!$9 | !HEAPU8[$7 | 0])) {
       btAlignedFreeInternal_28void__29($9)
      }
      HEAP32[$8 >> 2] = 0;
      HEAP8[$7 | 0] = 1;
      $5 = $5 - 4 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $1 = $1 + 20 | 0;
      $2 = $2 - 1 | 0;
      if ($2) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 180 >> 2];
    if (!(!$1 | !HEAPU8[$0 + 184 | 0])) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP32[$0 + 180 >> 2] = $6;
    HEAP8[$0 + 184 | 0] = 1;
    HEAP32[$0 + 176 >> 2] = 1;
   }
   $1 = Math_imul($3, 20);
   $3 = $3 - 1 | 0;
   while (1) {
    btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29(HEAP32[$0 + 180 >> 2] + $1 | 0, $4 + 8 | 0);
    $1 = $1 + 20 | 0;
    $2 = $3;
    $3 = $3 + 1 | 0;
    if ($2 >>> 0 <= $3 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 172 >> 2] = 1;
  $1 = HEAP32[$4 + 20 >> 2];
  if (!(!$1 | !HEAPU8[$4 + 24 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  __stack_pointer = $4 + 32 | 0;
  return $0 | 0;
 }
 
 function btRigidBodyConstructionInfo_create($0, $1, $2, $3) {
  $0 = +$0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = operator_20new_28unsigned_20long_29(288);
  HEAP32[$4 + 144 >> 2] = $2;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAPF64[$4 >> 3] = $0;
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 152 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 156 >> 2] = $1;
  $2 = $3 + 8 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $1 = $4 + 160 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $5;
  $2 = $3 + 16 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $1 = $4 + 168 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $5;
  $2 = $3 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $1 = $4 + 176 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$4 + 184 >> 2] = 0;
  HEAP32[$4 + 188 >> 2] = 0;
  $1 = $4 + 192 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$4 + 208 >> 2] = 0;
  HEAP32[$4 + 212 >> 2] = 0;
  HEAP32[$4 + 200 >> 2] = 0;
  HEAP32[$4 + 204 >> 2] = 1071644672;
  $1 = $4 + 216 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 224 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$4 + 280 >> 2] = 1202590843;
  HEAP32[$4 + 284 >> 2] = 1065646817;
  HEAP32[$4 + 272 >> 2] = 1202590843;
  HEAP32[$4 + 276 >> 2] = 1065646817;
  HEAP32[$4 + 264 >> 2] = 1202590843;
  HEAP32[$4 + 268 >> 2] = 1065646817;
  HEAP32[$4 + 256 >> 2] = 1202590843;
  HEAP32[$4 + 260 >> 2] = 1064598241;
  HEAP8[$4 + 248 | 0] = 0;
  HEAP32[$4 + 240 >> 2] = 0;
  HEAP32[$4 + 244 >> 2] = 1072693248;
  HEAP32[$4 + 232 >> 2] = -1717986918;
  HEAP32[$4 + 236 >> 2] = 1072273817;
  $1 = $4 + 24 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 1072693248;
  $1 = $4 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $4 - -64 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 80 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 96 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $4 + 104 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $4 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $4 | 0;
 }
 
 function btRigidBody_create($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(1240);
  btCollisionObject__btCollisionObject_28_29($1);
  HEAP8[$1 + 1028 | 0] = 1;
  HEAP32[$1 >> 2] = 25784;
  HEAP32[$1 + 1024 >> 2] = 0;
  $2 = $1 + 1016 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($1, $0);
  return $1 | 0;
 }
 
 function btRigidBody_setCenterOfMassPos($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  $6 = $0 + 32 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 24 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $0 + 24 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 16 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $0 + 16 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 8 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $5 = $0 + 40 | 0;
  $6 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $7 = $0 + 72 | 0;
  $15 = HEAP32[$7 >> 2];
  $7 = HEAP32[$7 + 4 >> 2];
  $14 = $0 - -64 | 0;
  $16 = HEAP32[$14 >> 2];
  $14 = HEAP32[$14 + 4 >> 2];
  $8 = $0 + 56 | 0;
  $17 = HEAP32[$8 >> 2];
  $8 = HEAP32[$8 + 4 >> 2];
  $9 = $0 + 48 | 0;
  $18 = HEAP32[$9 >> 2];
  $9 = HEAP32[$9 + 4 >> 2];
  $10 = $0 + 96 | 0;
  $19 = HEAP32[$10 >> 2];
  $10 = HEAP32[$10 + 4 >> 2];
  $11 = $0 + 88 | 0;
  $20 = HEAP32[$11 >> 2];
  $11 = HEAP32[$11 + 4 >> 2];
  $12 = $0 + 80 | 0;
  $21 = HEAP32[$12 >> 2];
  $12 = HEAP32[$12 + 4 >> 2];
  $22 = HEAP32[$0 + 8 >> 2];
  $23 = HEAP32[$0 + 12 >> 2];
  $13 = $4 + 120 | 0;
  HEAP32[$13 >> 2] = 0;
  HEAP32[$13 + 4 >> 2] = 0;
  HEAPF64[$4 + 112 >> 3] = $3;
  HEAPF64[$4 + 104 >> 3] = $2;
  $13 = $4 + 72 | 0;
  HEAP32[$13 >> 2] = $21;
  HEAP32[$13 + 4 >> 2] = $12;
  $12 = $4 + 80 | 0;
  HEAP32[$12 >> 2] = $20;
  HEAP32[$12 + 4 >> 2] = $11;
  $11 = $4 + 88 | 0;
  HEAP32[$11 >> 2] = $19;
  HEAP32[$11 + 4 >> 2] = $10;
  $10 = $4 + 40 | 0;
  HEAP32[$10 >> 2] = $18;
  HEAP32[$10 + 4 >> 2] = $9;
  $9 = $4 + 48 | 0;
  HEAP32[$9 >> 2] = $17;
  HEAP32[$9 + 4 >> 2] = $8;
  $8 = $4 + 56 | 0;
  HEAP32[$8 >> 2] = $16;
  HEAP32[$8 + 4 >> 2] = $14;
  HEAP32[$4 >> 2] = $22;
  HEAP32[$4 + 4 >> 2] = $23;
  HEAPF64[$4 + 96 >> 3] = $1;
  HEAP32[$4 + 64 >> 2] = $15;
  HEAP32[$4 + 68 >> 2] = $7;
  HEAP32[$4 + 32 >> 2] = $6;
  HEAP32[$4 + 36 >> 2] = $5;
  btRigidBody__setCenterOfMassTransform_28btTransform_20const__29($0, $4);
  __stack_pointer = $4 + 128 | 0;
 }
 
 function btRigidBody_setCenterOfMassOrientation($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  $6 = $5 + 88 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $5 + 56 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $7 = $0 + 128 | 0;
  $10 = HEAP32[$7 + 4 >> 2];
  $6 = $5 + 120 | 0;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$6 + 4 >> 2] = $10;
  $7 = $0 + 120 | 0;
  $10 = HEAP32[$7 + 4 >> 2];
  $6 = $5 + 112 | 0;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$6 + 4 >> 2] = $10;
  $7 = $0 + 112 | 0;
  $10 = HEAP32[$7 + 4 >> 2];
  $6 = $5 + 104 | 0;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$6 + 4 >> 2] = $10;
  $9 = 2.0 / ($4 * $4 + ($3 * $3 + ($1 * $1 + $2 * $2)));
  $12 = $9 * $3;
  $8 = $12 * $2;
  $11 = $9 * $1;
  $13 = $11 * $4;
  HEAPF64[$5 + 72 >> 3] = $8 + $13;
  HEAPF64[$5 + 48 >> 3] = $8 - $13;
  $8 = $11 * $1;
  $9 = $9 * $2;
  $2 = $9 * $2;
  HEAPF64[$5 + 80 >> 3] = 1.0 - ($8 + $2);
  $3 = $12 * $3;
  HEAPF64[$5 + 40 >> 3] = 1.0 - ($8 + $3);
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $6 = $0 + 104 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  HEAP32[$5 + 96 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 100 >> 2] = $7;
  $8 = $12 * $1;
  $11 = $9 * $4;
  HEAPF64[$5 + 64 >> 3] = $8 - $11;
  $1 = $9 * $1;
  $4 = $12 * $4;
  HEAPF64[$5 + 32 >> 3] = $1 + $4;
  HEAPF64[$5 + 16 >> 3] = $8 + $11;
  HEAPF64[$5 + 8 >> 3] = $1 - $4;
  HEAPF64[$5 >> 3] = 1.0 - ($2 + $3);
  btRigidBody__setCenterOfMassTransform_28btTransform_20const__29($0, $5);
  __stack_pointer = $5 + 128 | 0;
 }
 
 function btRigidBody_setSleepingThresholds($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  HEAPF64[$0 + 1e3 >> 3] = $2;
  HEAPF64[$0 + 992 >> 3] = $1;
 }
 
 function btRigidBody_getLinearSleepingThreshold($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 992 >> 3];
 }
 
 function btRigidBody_getAngularSleepingThreshold($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 1e3 >> 3];
 }
 
 function btRigidBody_setDamping($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  HEAPF64[$0 + 944 >> 3] = $2 < 0.0 ? 0.0 : Math_min($2, 1.0);
  HEAPF64[$0 + 936 >> 3] = $1 < 0.0 ? 0.0 : Math_min($1, 1.0);
 }
 
 function btRigidBody_setMassProps($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  btRigidBody__setMassProps_28double_2c_20btVector3_20const__29($0, $1, $2);
 }
 
 function btRigidBody_setLinearFactor($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 744 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 748 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $2 = HEAP32[$3 + 4 >> 2];
  $4 = $0 + 760 | 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $2;
  $2 = $1 + 8 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 752 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  $1 = $1 + 24 | 0;
  $5 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 768 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $5;
  $1 = $0 + 1160 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $6 = HEAPF64[$0 + 736 >> 3];
  HEAPF64[$0 + 1136 >> 3] = HEAPF64[$0 + 744 >> 3] * $6;
  HEAPF64[$0 + 1152 >> 3] = $6 * HEAPF64[$4 >> 3];
  HEAPF64[$0 + 1144 >> 3] = $6 * HEAPF64[$3 >> 3];
 }
 
 function btRigidBody_applyTorque($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0.0;
  $2 = HEAPF64[$1 + 16 >> 3];
  $3 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$0 + 904 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 1104 >> 3] + HEAPF64[$0 + 904 >> 3];
  $1 = $0 + 912 | 0;
  HEAPF64[$1 >> 3] = $3 * HEAPF64[$0 + 1112 >> 3] + HEAPF64[$1 >> 3];
  $1 = $0 + 920 | 0;
  HEAPF64[$1 >> 3] = $2 * HEAPF64[$0 + 1120 >> 3] + HEAPF64[$1 >> 3];
 }
 
 function btRigidBody_applyForce($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0;
  $7 = HEAPF64[$1 + 16 >> 3];
  $3 = HEAPF64[$1 + 8 >> 3];
  $4 = HEAPF64[$0 + 744 >> 3];
  HEAPF64[$0 + 872 >> 3] = HEAPF64[$1 >> 3] * $4 + HEAPF64[$0 + 872 >> 3];
  $5 = $0 + 880 | 0;
  $8 = $3;
  $3 = HEAPF64[$0 + 752 >> 3];
  HEAPF64[$5 >> 3] = $8 * $3 + HEAPF64[$5 >> 3];
  $5 = $0 + 888 | 0;
  $6 = HEAPF64[$0 + 760 >> 3];
  HEAPF64[$5 >> 3] = $7 * $6 + HEAPF64[$5 >> 3];
  $11 = HEAPF64[$1 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $9 = HEAPF64[$2 + 8 >> 3];
  $6 = $6 * HEAPF64[$1 + 16 >> 3];
  $3 = $3 * HEAPF64[$1 + 8 >> 3];
  $10 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$0 + 904 >> 3] = ($9 * $6 - $3 * $10) * HEAPF64[$0 + 1104 >> 3] + HEAPF64[$0 + 904 >> 3];
  $8 = HEAPF64[$0 + 1120 >> 3];
  $1 = $0 + 912 | 0;
  $4 = $4 * $11;
  HEAPF64[$1 >> 3] = ($10 * $4 - $6 * $7) * HEAPF64[$0 + 1112 >> 3] + HEAPF64[$1 >> 3];
  $0 = $0 + 920 | 0;
  HEAPF64[$0 >> 3] = $8 * ($7 * $3 - $4 * $9) + HEAPF64[$0 >> 3];
 }
 
 function btRigidBody_applyCentralForce($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0.0;
  $2 = HEAPF64[$1 + 16 >> 3];
  $3 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$0 + 872 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 744 >> 3] + HEAPF64[$0 + 872 >> 3];
  $1 = $0 + 880 | 0;
  HEAPF64[$1 >> 3] = $3 * HEAPF64[$0 + 752 >> 3] + HEAPF64[$1 >> 3];
  $1 = $0 + 888 | 0;
  HEAPF64[$1 >> 3] = $2 * HEAPF64[$0 + 760 >> 3] + HEAPF64[$1 >> 3];
 }
 
 function btRigidBody_applyTorqueImpulse($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0;
  $2 = HEAPF64[$1 + 16 >> 3];
  $3 = HEAPF64[$1 >> 3];
  $4 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$0 + 704 >> 3] = (HEAPF64[$0 + 592 >> 3] * $2 + (HEAPF64[$0 + 576 >> 3] * $3 + HEAPF64[$0 + 584 >> 3] * $4)) * HEAPF64[$0 + 1104 >> 3] + HEAPF64[$0 + 704 >> 3];
  $1 = $0 + 712 | 0;
  HEAPF64[$1 >> 3] = ($2 * HEAPF64[$0 + 624 >> 3] + ($3 * HEAPF64[$0 + 608 >> 3] + $4 * HEAPF64[$0 + 616 >> 3])) * HEAPF64[$0 + 1112 >> 3] + HEAPF64[$1 >> 3];
  $1 = $0 + 720 | 0;
  HEAPF64[$1 >> 3] = ($2 * HEAPF64[$0 + 656 >> 3] + ($3 * HEAPF64[$0 + 640 >> 3] + $4 * HEAPF64[$0 + 648 >> 3])) * HEAPF64[$0 + 1120 >> 3] + HEAPF64[$1 >> 3];
 }
 
 function btRigidBody_applyImpulse($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2);
 }
 
 function btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
  $6 = HEAPF64[$0 + 736 >> 3];
  if ($6 != 0.0) {
   $4 = HEAPF64[$1 + 16 >> 3];
   $3 = HEAPF64[$1 + 8 >> 3];
   $7 = HEAPF64[$0 + 744 >> 3];
   HEAPF64[$0 + 672 >> 3] = $6 * (HEAPF64[$1 >> 3] * $7) + HEAPF64[$0 + 672 >> 3];
   $8 = $0 + 680 | 0;
   $5 = $3;
   $3 = HEAPF64[$0 + 752 >> 3];
   HEAPF64[$8 >> 3] = $6 * ($5 * $3) + HEAPF64[$8 >> 3];
   $8 = $0 + 688 | 0;
   $5 = $4;
   $4 = HEAPF64[$0 + 760 >> 3];
   HEAPF64[$8 >> 3] = $6 * ($5 * $4) + HEAPF64[$8 >> 3];
   $10 = HEAPF64[$0 + 1120 >> 3];
   $11 = HEAPF64[$0 + 656 >> 3];
   $12 = HEAPF64[$0 + 640 >> 3];
   $13 = HEAPF64[$0 + 648 >> 3];
   $14 = HEAPF64[$0 + 1112 >> 3];
   $15 = HEAPF64[$0 + 624 >> 3];
   $16 = HEAPF64[$0 + 608 >> 3];
   $17 = HEAPF64[$0 + 616 >> 3];
   $9 = HEAPF64[$2 >> 3];
   $3 = $3 * HEAPF64[$1 + 8 >> 3];
   $7 = $7 * HEAPF64[$1 >> 3];
   $5 = HEAPF64[$2 + 8 >> 3];
   $6 = $9 * $3 - $7 * $5;
   $18 = $5;
   $5 = $4 * HEAPF64[$1 + 16 >> 3];
   $4 = $3;
   $3 = HEAPF64[$2 + 16 >> 3];
   $4 = $18 * $5 - $4 * $3;
   $3 = $3 * $7 - $5 * $9;
   HEAPF64[$0 + 704 >> 3] = (HEAPF64[$0 + 592 >> 3] * $6 + (HEAPF64[$0 + 576 >> 3] * $4 + HEAPF64[$0 + 584 >> 3] * $3)) * HEAPF64[$0 + 1104 >> 3] + HEAPF64[$0 + 704 >> 3];
   $1 = $0 + 712 | 0;
   HEAPF64[$1 >> 3] = $14 * ($15 * $6 + ($16 * $4 + $3 * $17)) + HEAPF64[$1 >> 3];
   $0 = $0 + 720 | 0;
   HEAPF64[$0 >> 3] = $10 * ($11 * $6 + ($12 * $4 + $3 * $13)) + HEAPF64[$0 >> 3];
  }
 }
 
 function btRigidBody_applyCentralImpulse($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0;
  $3 = HEAPF64[$1 + 16 >> 3];
  $4 = HEAPF64[$1 + 8 >> 3];
  $2 = HEAPF64[$0 + 736 >> 3];
  HEAPF64[$0 + 672 >> 3] = HEAPF64[$1 >> 3] * HEAPF64[$0 + 744 >> 3] * $2 + HEAPF64[$0 + 672 >> 3];
  $1 = $0 + 680 | 0;
  HEAPF64[$1 >> 3] = $2 * ($4 * HEAPF64[$0 + 752 >> 3]) + HEAPF64[$1 >> 3];
  $1 = $0 + 688 | 0;
  HEAPF64[$1 >> 3] = $2 * ($3 * HEAPF64[$0 + 760 >> 3]) + HEAPF64[$1 >> 3];
 }
 
 function btRigidBody_updateInertiaTensor($0) {
  $0 = $0 | 0;
  var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0;
  $2 = $0 + 664 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 632 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 600 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = HEAPF64[$0 + 88 >> 3];
  $8 = HEAPF64[$0 + 856 >> 3];
  $4 = $3 * $8;
  $5 = HEAPF64[$0 + 72 >> 3];
  $9 = HEAPF64[$0 + 840 >> 3];
  $6 = $5 * $9;
  $7 = HEAPF64[$0 + 80 >> 3];
  $16 = HEAPF64[$0 + 848 >> 3];
  $1 = $7 * $16;
  HEAPF64[$0 + 656 >> 3] = $3 * $4 + ($5 * $6 + $7 * $1);
  $12 = HEAPF64[$0 + 56 >> 3];
  $13 = HEAPF64[$0 + 40 >> 3];
  $14 = HEAPF64[$0 + 48 >> 3];
  HEAPF64[$0 + 648 >> 3] = $12 * $4 + ($13 * $6 + $14 * $1);
  $15 = HEAPF64[$0 + 24 >> 3];
  $10 = $15 * $4;
  $4 = HEAPF64[$0 + 8 >> 3];
  $11 = $4 * $6;
  $6 = HEAPF64[$0 + 16 >> 3];
  HEAPF64[$0 + 640 >> 3] = $10 + ($11 + $6 * $1);
  $1 = $8 * $12;
  $10 = $9 * $13;
  $11 = $16 * $14;
  HEAPF64[$0 + 624 >> 3] = $3 * $1 + ($5 * $10 + $7 * $11);
  HEAPF64[$0 + 616 >> 3] = $12 * $1 + ($13 * $10 + $14 * $11);
  HEAPF64[$0 + 608 >> 3] = $15 * $1 + ($4 * $10 + $6 * $11);
  $1 = $3;
  $3 = $15 * $8;
  $8 = $5;
  $5 = $4 * $9;
  $9 = $7;
  $7 = $6 * $16;
  HEAPF64[$0 + 592 >> 3] = $1 * $3 + ($8 * $5 + $9 * $7);
  HEAPF64[$0 + 584 >> 3] = $12 * $3 + ($13 * $5 + $7 * $14);
  HEAPF64[$0 + 576 >> 3] = $15 * $3 + ($4 * $5 + $6 * $7);
 }
 
 function btRigidBody_getLinearVelocity($0) {
  $0 = $0 | 0;
  return $0 + 672 | 0;
 }
 
 function btRigidBody_getAngularVelocity($0) {
  $0 = $0 | 0;
  return $0 + 704 | 0;
 }
 
 function btRigidBody_setLinearVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 672 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 676 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 680 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 688 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 696 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btRigidBody_setAngularVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 704 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 708 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 712 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 720 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 728 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btRigidBody_setAngularFactor($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 1104 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 1108 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 1112 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 1120 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = $0 + 1128 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function btRigidBody_getGravity($0) {
  $0 = $0 | 0;
  return $0 + 808 | 0;
 }
 
 function btRigidBody_setGravity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btRigidBody__setGravity_28btVector3_20const__29($0, $1);
 }
 
 function btRigidBody_getTotalForce($0) {
  $0 = $0 | 0;
  return $0 + 872 | 0;
 }
 
 function btRigidBody_getTotalTorque($0) {
  $0 = $0 | 0;
  return $0 + 904 | 0;
 }
 
 function btRigidBody_getFlags($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 1032 >> 2];
 }
 
 function btRigidBody_setFlags($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 1032 >> 2] = $1;
 }
 
 function btRigidBody_clearForces($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 + 872 >> 2] = 0;
  HEAP32[$0 + 876 >> 2] = 0;
  $1 = $0 + 928 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 920 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 912 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 904 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 896 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 888 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 880 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btRigidBody_getMotionState($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 1008 >> 2];
 }
 
 function btSequentialImpulseConstraintSolver_create() {
  var $0 = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(248);
  btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($0);
  return $0 | 0;
 }
 
 function btCollisionWorld_get_m_useContinuous($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 24 | 0];
 }
 
 function btCollisionWorld_set_m_useContinuous($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 24 | 0] = $1;
 }
 
 function btCollisionWorld_set_UserInfo($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 116 >> 2] = $1;
 }
 
 function btCollisionWorld_get_UserInfo($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 116 >> 2];
 }
 
 function btCollisionWorld_rayTest($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $3);
 }
 
 function btCollisionWorld_addCollisionObject($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1, $2, $3);
 }
 
 function btCollisionWorld_removeCollisionObject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1);
 }
 
 function btCollisionWorld_convexSweepTest($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($0, $1, $2, $3, $4, +$5);
 }
 
 function btDynamicsWorld_enableDebugDrawer($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (!$1) {
    $1 = 0;
    break label$1;
   }
   $1 = HEAP32[8801];
   if ($1) {
    break label$1
   }
   $1 = operator_20new_28unsigned_20long_29(8);
   HEAP32[$1 + 4 >> 2] = 47105;
   HEAP32[$1 >> 2] = 30308;
   HEAP32[8801] = $1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld_create($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(488);
  HEAP32[$3 >> 2] = 26184;
  HEAP8[$3 + 104 | 0] = 1;
  HEAP32[$3 + 100 >> 2] = 0;
  HEAP32[$3 + 96 >> 2] = $1;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP8[$3 + 20 | 0] = 1;
  HEAP32[$3 + 16 >> 2] = 0;
  $1 = $3 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$3 + 80 | 0] = 0;
  $1 = $3 + 72 | 0;
  HEAP32[$1 >> 2] = 1202590843;
  HEAP32[$1 + 4 >> 2] = 1067743969;
  HEAP8[$3 + 66 | 0] = 1;
  HEAP16[$3 - -64 >> 1] = 256;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAP8[$3 + 56 | 0] = 1;
  $1 = $3 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $3 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1;
  $1 = $3 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 168 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1077149696;
  $1 = $3 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 144 | 0;
  HEAP32[$1 >> 2] = 536870912;
  HEAP32[$1 + 4 >> 2] = 1066471697;
  $1 = $3 + 136 | 0;
  HEAP32[$1 >> 2] = 858993459;
  HEAP32[$1 + 4 >> 2] = 1070805811;
  $1 = $3 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  HEAP32[$3 + 120 >> 2] = 858993459;
  HEAP32[$3 + 124 >> 2] = 1071854387;
  HEAP32[$3 + 116 >> 2] = 0;
  HEAP32[$3 + 108 >> 2] = 0;
  HEAP32[$3 + 112 >> 2] = 0;
  $1 = $3 + 216 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 208 | 0;
  HEAP32[$1 >> 2] = -1717986918;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $3 + 200 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 192 | 0;
  HEAP32[$1 >> 2] = -1717986918;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $3 + 184 | 0;
  HEAP32[$1 >> 2] = -1717986918;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  HEAP32[$3 + 160 >> 2] = 10;
  $1 = $3 + 304 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1070176665;
  $1 = $3 + 296 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 288 | 0;
  HEAP32[$1 >> 2] = 1073741824;
  HEAP32[$1 + 4 >> 2] = 1177108057;
  $1 = $3 + 280 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1079574528;
  HEAP32[$3 + 272 >> 2] = 128;
  $1 = $3 + 264 | 0;
  HEAP32[$1 >> 2] = 260;
  HEAP32[$1 + 4 >> 2] = 2;
  $1 = $3 + 256 | 0;
  HEAP32[$1 >> 2] = 858993459;
  HEAP32[$1 + 4 >> 2] = 1072378675;
  $1 = $3 + 248 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 240 | 0;
  HEAP32[$1 >> 2] = -1610612736;
  HEAP32[$1 + 4 >> 2] = 1069128089;
  $1 = $3 + 232 | 0;
  HEAP32[$1 >> 2] = 1073741824;
  HEAP32[$1 + 4 >> 2] = -1079739679;
  HEAP32[$3 + 224 >> 2] = 1;
  $1 = $3 + 176 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  HEAP8[$3 + 328 | 0] = 1;
  HEAP32[$3 >> 2] = 28360;
  HEAP32[$3 + 332 >> 2] = 0;
  HEAP32[$3 + 324 >> 2] = 0;
  HEAP32[$3 + 336 >> 2] = $2;
  $1 = $3 + 316 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$3 + 360 | 0] = 1;
  HEAP32[$3 + 356 >> 2] = 0;
  $1 = $3 + 348 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$3 + 380 | 0] = 1;
  HEAP16[$3 + 434 >> 1] = 0;
  HEAP32[$3 + 376 >> 2] = 0;
  $1 = $3 + 392 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1071382528;
  HEAP32[$3 + 384 >> 2] = 0;
  HEAP32[$3 + 388 >> 2] = 0;
  $1 = $3 + 368 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 400 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 408 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 416 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $3 + 424 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$3 + 480 | 0] = 1;
  HEAP32[$3 + 448 >> 2] = 0;
  HEAP8[$3 + 452 | 0] = 1;
  HEAP8[$3 + 460 | 0] = 1;
  $1 = $3 + 440 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$3 + 456 >> 2] = 0;
  HEAP32[$3 + 476 >> 2] = 0;
  $1 = $3 + 468 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$3 + 484 >> 2] = 0;
  if ($2) {
   $1 = 0
  } else {
   $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(248);
   btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($1);
   HEAP32[$3 + 336 >> 2] = $1;
   $1 = 1;
  }
  HEAP8[$3 + 433 | 0] = $1;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(68);
  HEAP32[$1 >> 2] = 28180;
  $2 = $1 + 4 | 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP8[$2 + 16 | 0] = 1;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP8[$1 + 40 | 0] = 1;
  HEAP8[$1 + 60 | 0] = 1;
  $2 = $1 + 28 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP8[$1 + 64 | 0] = 1;
  $2 = $1 + 48 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP8[$3 + 432 | 0] = 1;
  HEAP32[$3 + 340 >> 2] = $1;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(88);
  HEAP32[$1 + 72 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP8[$1 + 44 | 0] = 1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = 28628;
  HEAP32[$1 + 40 >> 2] = 0;
  HEAP8[$1 + 64 | 0] = 1;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = 0;
  HEAP8[$1 + 84 | 0] = 1;
  HEAP32[$1 + 52 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 336 >> 2];
  HEAP32[$3 + 332 >> 2] = $1;
  return $3 | 0;
 }
 
 function btDiscreteDynamicsWorld_setGravity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld_getGravity($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($1, $0);
  $0 = $1 + 24 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[8808] = HEAP32[$0 >> 2];
  HEAP32[8809] = $2;
  $0 = $1 + 16 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[8806] = HEAP32[$0 >> 2];
  HEAP32[8807] = $2;
  $0 = $1 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[8804] = HEAP32[$0 >> 2];
  HEAP32[8805] = $2;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[8802] = HEAP32[$1 >> 2];
  HEAP32[8803] = $0;
  __stack_pointer = $1 + 32 | 0;
  return 35208;
 }
 
 function btDiscreteDynamicsWorld_addRigidBody($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $1, $2, $3);
 }
 
 function btDiscreteDynamicsWorld_removeRigidBody($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld_stepSimulation($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $1, $2, $3) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0);
 }
 
 function btDiscreteDynamicsWorld_SphereQuery($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 704 | 0;
  __stack_pointer = $6;
  $7 = $6 + 608 | 0;
  btConvexInternalShape__btConvexInternalShape_28_29($7);
  $5 = $6 + 648 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $6 + 640 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 1072693248;
  $5 = $6 + 632 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 1072693248;
  $5 = $6 + 664 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $6 + 672 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $6 + 680 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$6 + 624 >> 2] = 0;
  HEAP32[$6 + 628 >> 2] = 1072693248;
  HEAPF64[$6 + 656 >> 3] = $4;
  HEAP32[$6 + 696 >> 2] = 0;
  HEAP32[$6 + 700 >> 2] = 0;
  HEAPF64[$6 + 688 >> 3] = $4;
  HEAP32[$6 + 612 >> 2] = 8;
  HEAP32[$6 + 608 >> 2] = 8920;
  $5 = btPairCachingGhostObject__btPairCachingGhostObject_28_29($6 + 8 | 0);
  $8 = $5 + 128 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAPF64[$5 + 120 >> 3] = $3;
  HEAPF64[$5 + 112 >> 3] = $2;
  HEAPF64[$5 + 104 >> 3] = $1;
  HEAP32[$5 + 536 >> 2] = HEAP32[$5 + 536 >> 2] + 2;
  HEAP32[$5 + 388 >> 2] = $7;
  HEAP32[$5 + 380 >> 2] = $7;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $5, 2, -3);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $5);
  btPairCachingGhostObject___btPairCachingGhostObject_28_29($5);
  __stack_pointer = $6 + 704 | 0;
 }
 
 function btDiscreteDynamicsWorld_clearForces($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0);
 }
 
 function btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 435 | 0] = $1;
 }
 
 function btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 435 | 0];
 }
 
 function btKinematicCharacterController_create($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(624);
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$4 >> 2] = 28976;
  HEAP32[$4 + 552 >> 2] = 0;
  HEAP32[$4 + 556 >> 2] = 1072693248;
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 + 480 >> 2] = 0;
  HEAP32[$4 + 484 >> 2] = 0;
  HEAP8[$4 + 408 | 0] = 1;
  HEAP32[$4 + 404 >> 2] = 0;
  HEAP8[$4 + 580 | 0] = 1;
  $0 = $4 + 396 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 576 >> 2] = 0;
  HEAP8[$4 + 600 | 0] = 1;
  $0 = $4 + 568 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 596 >> 2] = 0;
  HEAP8[$4 + 620 | 0] = 1;
  $0 = $4 + 588 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 616 >> 2] = 0;
  $0 = $4 + 608 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 488 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 496 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  $0 = $4 + 520 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 512 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 504 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 536 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 528 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  HEAP32[$4 + 120 >> 2] = 1202590843;
  HEAP32[$4 + 124 >> 2] = 1066695393;
  HEAP32[$4 + 128 >> 2] = 0;
  HEAP32[$4 + 132 >> 2] = 0;
  $0 = $4 + 136 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 144 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 152 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 192 >> 2] = 0;
  HEAP32[$4 + 196 >> 2] = 0;
  $0 = $4 + 200 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 208 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 216 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP16[$4 + 466 >> 1] = 257;
  HEAP32[$4 + 104 >> 2] = 0;
  HEAP32[$4 + 108 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 472 >> 2] = 0;
  HEAP32[$4 + 476 >> 2] = 0;
  $0 = $4 + 40 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 32 >> 2] = 0;
  HEAP32[$4 + 36 >> 2] = 0;
  HEAP32[$4 + 96 >> 2] = 1717986919;
  HEAP32[$4 + 100 >> 2] = 1077765734;
  HEAP16[$4 + 464 >> 1] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 68 >> 2] = 1076101120;
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 1076101120;
  HEAP32[$4 + 48 >> 2] = 0;
  HEAP32[$4 + 52 >> 2] = 1078689792;
  HEAP8[$4 + 545 | 0] = 0;
  HEAP8[$4 + 546 | 0] = 0;
  HEAP32[$4 + 288 >> 2] = 0;
  HEAP32[$4 + 292 >> 2] = 0;
  HEAP32[$4 + 24 >> 2] = 1202590843;
  HEAP32[$4 + 28 >> 2] = 1067743969;
  $0 = $4 + 456 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 448 >> 2] = 0;
  HEAP32[$4 + 452 >> 2] = 0;
  HEAP8[$4 + 544 | 0] = 1;
  $5 = HEAPF64[$3 + 16 >> 3];
  $7 = HEAPF64[$3 >> 3];
  $8 = HEAPF64[$3 + 8 >> 3];
  $9 = $5 * $5 + ($7 * $7 + $8 * $8);
  label$1 : {
   if ($9 > 0.0) {
    $10 = $5;
    $5 = 1.0 / Math_sqrt($9);
    $9 = $10 * $5 * -29.400000000000002;
    $7 = $7 * $5 * -29.400000000000002;
    $5 = $8 * $5 * -29.400000000000002;
    $8 = $9 * $9 + ($7 * $7 + $5 * $5);
    if ($8 > 0.0) {
     HEAP32[$6 + 24 >> 2] = 0;
     HEAP32[$6 + 28 >> 2] = 0;
     HEAPF64[$6 + 16 >> 3] = -$9;
     HEAPF64[$6 + 8 >> 3] = -$5;
     HEAPF64[$6 >> 3] = -$7;
     btKinematicCharacterController__setUpVector_28btVector3_20const__29($4, $6);
    }
    HEAPF64[$4 + 96 >> 3] = Math_sqrt($8);
    break label$1;
   }
   btKinematicCharacterController__setUpVector_28btVector3_20const__29($4, $3);
  }
  HEAP32[$4 + 88 >> 2] = 1719614413;
  HEAP32[$4 + 92 >> 2] = 1072079006;
  HEAP32[$4 + 80 >> 2] = 1413754136;
  HEAP32[$4 + 84 >> 2] = 1072243195;
  HEAPF64[$4 + 112 >> 3] = $2;
  __stack_pointer = $6 + 32 | 0;
  return $4 | 0;
 }
 
 function btKinematicCharacterController_setWalkDirection($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 }
 
 function btKinematicCharacterController_setFallSpeed($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 48 >> 3] = $1;
 }
 
 function btKinematicCharacterController_setJumpSpeed($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 64 >> 3] = $1;
  HEAPF64[$0 + 56 >> 3] = $1;
 }
 
 function btKinematicCharacterController_setJumpAxis($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  HEAPF64[$0 + 512 >> 3] = $1;
  HEAPF64[$0 + 528 >> 3] = $3;
  HEAPF64[$0 + 520 >> 3] = $2;
 }
 
 function btKinematicCharacterController_setPushForce($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 552 >> 3] = $1;
 }
 
 function btKinematicCharacterController_getPushForce($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 552 >> 3];
 }
 
 function btKinematicCharacterController_setMaxSlope($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  HEAPF64[$0 + 80 >> 3] = $1;
  (wasm2js_i32$0 = $0, wasm2js_f64$0 = cos($1)), HEAPF64[wasm2js_i32$0 + 88 >> 3] = wasm2js_f64$0;
 }
 
 function btKinematicCharacterController_setGravity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $2 = HEAPF64[$1 + 16 >> 3];
  $4 = HEAPF64[$1 >> 3];
  $6 = HEAPF64[$1 + 8 >> 3];
  $5 = $2 * $2 + ($4 * $4 + $6 * $6);
  if ($5 > 0.0) {
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 28 >> 2] = 0;
   HEAPF64[$3 + 16 >> 3] = -$2;
   HEAPF64[$3 + 8 >> 3] = -$6;
   HEAPF64[$3 >> 3] = -$4;
   btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $3);
   $2 = HEAPF64[$1 + 16 >> 3];
   $5 = $2 * $2;
   $2 = HEAPF64[$1 >> 3];
   $4 = $2 * $2;
   $2 = HEAPF64[$1 + 8 >> 3];
   $5 = $5 + ($4 + $2 * $2);
  }
  HEAPF64[$0 + 96 >> 3] = Math_sqrt($5);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function btKinematicCharacterController_setUp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    $2 = HEAPF64[$1 + 16 >> 3];
    $4 = HEAPF64[$1 >> 3];
    $5 = HEAPF64[$1 + 8 >> 3];
    $6 = $2 * $2 + ($4 * $4 + $5 * $5);
    if (!($6 > 0.0)) {
     break label$2
    }
    $7 = HEAPF64[$0 + 96 >> 3];
    if (!($7 > 0.0)) {
     break label$2
    }
    $8 = $2;
    $2 = 1.0 / Math_sqrt($6);
    $6 = -$7;
    $7 = $8 * $2 * $6;
    $4 = $4 * $2 * $6;
    $2 = $5 * $2 * $6;
    $5 = $7 * $7 + ($4 * $4 + $2 * $2);
    if ($5 > 0.0) {
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 28 >> 2] = 0;
     HEAPF64[$3 + 16 >> 3] = -$7;
     HEAPF64[$3 + 8 >> 3] = -$2;
     HEAPF64[$3 >> 3] = -$4;
     btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $3);
    }
    HEAPF64[$0 + 96 >> 3] = Math_sqrt($5);
    break label$1;
   }
   btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $1);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function btKinematicCharacterController_setStepHeight($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  btCompoundShape__setMargin_28double_29($0, $1);
 }
 
 function btKinematicCharacterController_getHitFlag($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 548 >> 2];
 }
 
 function btKinematicCharacterController_getVerticalVelocity($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function btKinematicCharacterController_setCurrentPosition($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  HEAPF64[$0 + 256 >> 3] = $1;
  $4 = $0 + 280 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $5 = $0 + 272 | 0;
  HEAPF64[$5 >> 3] = $3;
  $6 = $0 + 264 | 0;
  HEAPF64[$6 >> 3] = $2;
  $8 = HEAP32[$6 >> 2];
  $6 = HEAP32[$6 + 4 >> 2];
  $9 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $10 = HEAP32[$0 + 256 >> 2];
  $11 = HEAP32[$0 + 260 >> 2];
  $12 = HEAP32[$4 + 4 >> 2];
  $0 = HEAP32[$0 + 16 >> 2];
  $7 = $0 + 128 | 0;
  HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$7 + 4 >> 2] = $12;
  $4 = $0 + 120 | 0;
  HEAP32[$4 >> 2] = $9;
  HEAP32[$4 + 4 >> 2] = $5;
  $4 = $0 + 112 | 0;
  HEAP32[$4 >> 2] = $8;
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = $0 + 104 | 0;
  HEAP32[$4 >> 2] = $10;
  HEAP32[$4 + 4 >> 2] = $11;
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 536 >> 2] + 1;
 }
 
 function btKinematicCharacterController_getCurrentOrientation($0) {
  $0 = $0 | 0;
  return $0 + 328 | 0;
 }
 
 function btKinematicCharacterController_setUseGhostSweepTest($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 466 | 0] = $1;
 }
 
 function btKinematicCharacterController_AllHitInfo_get_m_collisionObjects($0) {
  $0 = $0 | 0;
  return $0 + 564 | 0;
 }
 
 function btPairCachingGhostObject_create() {
  var $0 = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(600);
  btPairCachingGhostObject__btPairCachingGhostObject_28_29($0);
  return $0 | 0;
 }
 
 function btGhostPairCallback_create() {
  var $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(4);
  HEAP32[$0 >> 2] = 30476;
  return $0 | 0;
 }
 
 function btCollisionWorld_addConstraint($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $1, $2);
 }
 
 function btCollisionWorld_removeConstraint($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $1);
 }
 
 function btJointFeedback_create() {
  return memset(btAlignedAllocInternal_28unsigned_20long_2c_20int_29(128), 0, 128) | 0;
 }
 
 function btJointFeedback_destroy($0) {
  $0 = $0 | 0;
  if ($0) {
   btAlignedFreeInternal_28void__29($0)
  }
 }
 
 function btTypedConstraint_setJointFeedback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 56 >> 2] = $1;
 }
 
 function btFixedConstraint_create($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(2864);
  btGeneric6DofSpring2Constraint__btGeneric6DofSpring2Constraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20RotateOrder_29($4, $0, $2, $1, $3, 0);
  HEAP32[$4 + 1328 >> 2] = 0;
  HEAP32[$4 + 1332 >> 2] = 0;
  HEAP32[$4 >> 2] = 29424;
  $0 = $4 + 1336 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 1344 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 1352 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 1360 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 1368 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 1376 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 1384 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$4 + 1888 >> 2] = 0;
  HEAP32[$4 + 1892 >> 2] = 0;
  $0 = $4 + 1896 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 2064 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 2072 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 2240 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $4 + 2248 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $4 | 0;
 }
 
 function btGeneric6DofSpring2Constraint_create($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(2864);
  $0 = btGeneric6DofSpring2Constraint__btGeneric6DofSpring2Constraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20RotateOrder_29($5, $0, $2, $1, $3, $4);
  HEAP32[$5 + 28 >> 2] = 80;
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 2, .8, 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 4, 0.0, 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 2, .8, 1);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 4, 0.0, 1);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 2, .8, 2);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 4, 0.0, 2);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 2, .8, 3);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 4, 0.0, 3);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 2, .8, 4);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 4, 0.0, 4);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 2, .8, 5);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($0, 4, 0.0, 5);
  return $5 | 0;
 }
 
 function btGeneric6DofSpring2Constraint_setAxis($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
  $7 = HEAP32[$0 + 32 >> 2];
  $15 = HEAPF64[$7 + 40 >> 3];
  $16 = HEAPF64[$7 + 72 >> 3];
  $17 = HEAPF64[$7 + 80 >> 3];
  $18 = HEAPF64[$7 + 16 >> 3];
  $19 = HEAPF64[$7 + 48 >> 3];
  $3 = HEAPF64[$7 + 120 >> 3];
  $8 = HEAPF64[$7 + 88 >> 3];
  $9 = HEAPF64[$7 + 24 >> 3];
  $5 = HEAPF64[$7 + 104 >> 3];
  $10 = HEAPF64[$7 + 112 >> 3];
  $11 = HEAPF64[$7 + 56 >> 3];
  $12 = HEAPF64[$2 + 16 >> 3];
  $13 = HEAPF64[$2 >> 3];
  $14 = HEAPF64[$2 + 8 >> 3];
  $4 = HEAPF64[$1 + 16 >> 3];
  $6 = HEAPF64[$1 >> 3];
  $20 = HEAPF64[$1 + 8 >> 3];
  $21 = HEAPF64[$7 + 8 >> 3];
  $1 = $0 + 184 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = -$5;
  HEAPF64[$0 + 176 >> 3] = $8 * 0.0 + ($9 * 0.0 + $11 * 0.0) + ($9 * $5 - $11 * $10 - $8 * $3);
  HEAPF64[$0 + 168 >> 3] = $17 * 0.0 + ($18 * 0.0 + $19 * 0.0) + ($18 * $5 - $19 * $10 - $17 * $3);
  HEAPF64[$0 + 160 >> 3] = $16 * 0.0 + ($21 * 0.0 + $15 * 0.0) + ($21 * $5 - $15 * $10 - $16 * $3);
  $5 = $4;
  $4 = 1.0 / Math_sqrt($4 * $4 + ($6 * $6 + $20 * $20));
  $3 = $5 * $4;
  $10 = $6 * $4;
  $4 = $20 * $4;
  HEAPF64[$0 + 144 >> 3] = $8 * $3 + ($9 * $10 + $11 * $4);
  $6 = 1.0 / Math_sqrt($12 * $12 + ($13 * $13 + $14 * $14));
  $12 = $12 * $6;
  $13 = $13 * $6;
  $14 = $14 * $6;
  HEAPF64[$0 + 136 >> 3] = $8 * $12 + ($9 * $13 + $11 * $14);
  HEAPF64[$0 + 112 >> 3] = $3 * $17 + ($10 * $18 + $4 * $19);
  HEAPF64[$0 + 104 >> 3] = $12 * $17 + ($13 * $18 + $14 * $19);
  HEAPF64[$0 + 80 >> 3] = $3 * $16 + ($10 * $21 + $4 * $15);
  HEAPF64[$0 + 72 >> 3] = $12 * $16 + ($13 * $21 + $15 * $14);
  $5 = $8;
  $8 = $13 * $4 - $10 * $14;
  $6 = $9;
  $9 = $14 * $3 - $4 * $12;
  $20 = $11;
  $11 = $12 * $10 - $3 * $13;
  HEAPF64[$0 + 128 >> 3] = $5 * $8 + ($6 * $9 + $20 * $11);
  HEAPF64[$0 + 96 >> 3] = $8 * $17 + ($9 * $18 + $19 * $11);
  HEAPF64[$0 + 64 >> 3] = $8 * $16 + ($9 * $21 + $15 * $11);
  $1 = HEAP32[$0 + 36 >> 2];
  $22 = HEAPF64[$1 + 120 >> 3];
  $24 = HEAPF64[$1 + 104 >> 3];
  $23 = HEAPF64[$1 + 112 >> 3];
  $15 = HEAPF64[$1 + 40 >> 3];
  $16 = HEAPF64[$1 + 72 >> 3];
  $17 = HEAPF64[$1 + 80 >> 3];
  $18 = HEAPF64[$1 + 16 >> 3];
  $19 = HEAPF64[$1 + 48 >> 3];
  $21 = HEAPF64[$1 + 88 >> 3];
  $6 = HEAPF64[$1 + 24 >> 3];
  $20 = HEAPF64[$1 + 56 >> 3];
  $5 = HEAPF64[$1 + 8 >> 3];
  $2 = $0 + 312 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 280 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 248 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 216 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAPF64[$0 + 272 >> 3] = $3 * $21 + ($10 * $6 + $4 * $20);
  HEAPF64[$0 + 264 >> 3] = $12 * $21 + ($13 * $6 + $14 * $20);
  HEAPF64[$0 + 256 >> 3] = $8 * $21 + ($9 * $6 + $11 * $20);
  HEAPF64[$0 + 240 >> 3] = $3 * $17 + ($10 * $18 + $4 * $19);
  HEAPF64[$0 + 232 >> 3] = $12 * $17 + ($13 * $18 + $14 * $19);
  HEAPF64[$0 + 224 >> 3] = $8 * $17 + ($9 * $18 + $11 * $19);
  HEAPF64[$0 + 208 >> 3] = $3 * $16 + ($10 * $5 + $4 * $15);
  HEAPF64[$0 + 200 >> 3] = $12 * $16 + ($13 * $5 + $14 * $15);
  HEAPF64[$0 + 192 >> 3] = $8 * $16 + ($9 * $5 + $11 * $15);
  $3 = -$24;
  HEAPF64[$0 + 304 >> 3] = $21 * 0.0 + ($6 * 0.0 + $20 * 0.0) + ($6 * $3 - $20 * $23 - $21 * $22);
  HEAPF64[$0 + 296 >> 3] = $17 * 0.0 + ($18 * 0.0 + $19 * 0.0) + ($18 * $3 - $19 * $23 - $17 * $22);
  HEAPF64[$0 + 288 >> 3] = $16 * 0.0 + ($5 * 0.0 + $15 * 0.0) + ($5 * $3 - $15 * $23 - $16 * $22);
  btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, $7 + 8 | 0, $1 + 8 | 0);
 }
 
 function btGeneric6DofSpring2Constraint_setLimit($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  if (($1 | 0) <= 2) {
   $0 = ($1 << 3) + $0 | 0;
   HEAPF64[$0 + 1360 >> 3] = $3;
   HEAPF64[$0 + 1328 >> 3] = $2;
   return;
  }
  $2 = fmod($2);
  label$2 : {
   if ($2 < -3.141592653589793) {
    $2 = $2 + 6.283185307179586;
    break label$2;
   }
   if (!($2 > 3.141592653589793)) {
    break label$2
   }
   $2 = $2 + -6.283185307179586;
  }
  $3 = fmod($3);
  label$4 : {
   if ($3 < -3.141592653589793) {
    $3 = $3 + 6.283185307179586;
    break label$4;
   }
   if (!($3 > 3.141592653589793)) {
    break label$4
   }
   $3 = $3 + -6.283185307179586;
  }
  $0 = Math_imul($1, 176) + $0 | 0;
  HEAPF64[$0 + 1368 >> 3] = $3;
  HEAPF64[$0 + 1360 >> 3] = $2;
 }
 
 function btGeneric6DofSpring2Constraint_enableSpring($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  __inlined_func$btGeneric6DofSpring2Constraint__enableSpring_28int_2c_20bool_29 : {
   if (($1 | 0) <= 2) {
    HEAP8[($0 + $1 | 0) + 1558 | 0] = $2;
    break __inlined_func$btGeneric6DofSpring2Constraint__enableSpring_28int_2c_20bool_29;
   }
   HEAP8[(Math_imul($1, 176) + $0 | 0) + 1456 | 0] = $2;
  }
 }
 
 function btGeneric6DofSpring2Constraint_setBounce($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  HEAPF64[(($1 | 0) < 3 ? (($1 << 3) + $0 | 0) + 1392 | 0 : (Math_imul($1, 176) + $0 | 0) + 1376 | 0) >> 3] = $2;
 }
 
 function btGeneric6DofSpring2Constraint_setStiffness($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  __inlined_func$btGeneric6DofSpring2Constraint__setStiffness_28int_2c_20double_2c_20bool_29 : {
   if (($1 | 0) <= 2) {
    $0 = $0 + 1328 | 0;
    HEAP8[($0 + $1 | 0) + 304 | 0] = $3;
    HEAPF64[($0 + ($1 << 3) | 0) + 272 >> 3] = $2;
    break __inlined_func$btGeneric6DofSpring2Constraint__setStiffness_28int_2c_20double_2c_20bool_29;
   }
   $0 = Math_imul($1, 176) + $0 | 0;
   HEAP8[$0 + 1472 | 0] = $3;
   HEAPF64[$0 + 1464 >> 3] = $2;
  }
 }
 
 function btGeneric6DofSpring2Constraint_setDamping($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  __inlined_func$btGeneric6DofSpring2Constraint__setDamping_28int_2c_20double_2c_20bool_29 : {
   if (($1 | 0) <= 2) {
    $0 = $0 + 1328 | 0;
    HEAP8[($0 + $1 | 0) + 344 | 0] = $3;
    HEAPF64[($0 + ($1 << 3) | 0) + 312 >> 3] = $2;
    break __inlined_func$btGeneric6DofSpring2Constraint__setDamping_28int_2c_20double_2c_20bool_29;
   }
   $0 = Math_imul($1, 176) + $0 | 0;
   HEAP8[$0 + 1488 | 0] = $3;
   HEAPF64[$0 + 1480 >> 3] = $2;
  }
 }
 
 function btGeneric6DofSpring2Constraint_setEquilibriumPoint($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  HEAPF64[(($1 | 0) < 3 ? (($1 << 3) + $0 | 0) + 1680 | 0 : (Math_imul($1, 176) + $0 | 0) + 1496 | 0) >> 3] = $2;
 }
 
 function btGeneric6DofSpring2Constraint_enableMotor($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  __inlined_func$btGeneric6DofSpring2Constraint__enableMotor_28int_2c_20bool_29 : {
   if (($1 | 0) <= 2) {
    HEAP8[($0 + $1 | 0) + 1552 | 0] = $2;
    break __inlined_func$btGeneric6DofSpring2Constraint__enableMotor_28int_2c_20bool_29;
   }
   HEAP8[(Math_imul($1, 176) + $0 | 0) + 1416 | 0] = $2;
  }
 }
 
 function btGeneric6DofSpring2Constraint_setServo($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  __inlined_func$btGeneric6DofSpring2Constraint__setServo_28int_2c_20bool_29 : {
   if (($1 | 0) <= 2) {
    HEAP8[($0 + $1 | 0) + 1555 | 0] = $2;
    break __inlined_func$btGeneric6DofSpring2Constraint__setServo_28int_2c_20bool_29;
   }
   HEAP8[(Math_imul($1, 176) + $0 | 0) + 1440 | 0] = $2;
  }
 }
 
 function btGeneric6DofSpring2Constraint_setTargetVelocity($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  HEAPF64[(($1 | 0) < 3 ? (($1 << 3) + $0 | 0) + 1712 | 0 : (Math_imul($1, 176) + $0 | 0) + 1424 | 0) >> 3] = $2;
 }
 
 function btGeneric6DofSpring2Constraint_setServoTarget($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0.0;
  __inlined_func$btGeneric6DofSpring2Constraint__setServoTarget_28int_2c_20double_29 : {
   if (($1 | 0) <= 2) {
    HEAPF64[(($1 << 3) + $0 | 0) + 1568 >> 3] = $2;
    break __inlined_func$btGeneric6DofSpring2Constraint__setServoTarget_28int_2c_20double_29;
   }
   $0 = (Math_imul($1, 176) + $0 | 0) + 1448 | 0;
   $2 = $2 + 3.141592653589793;
   $2 = Math_floor($2 / 6.283185307179586) * -6.283185307179586 + $2;
   $3 = 0.0;
   label$2 : {
    if ($2 >= 6.283185307179586) {
     break label$2
    }
    $3 = $2;
    if (!($2 < 0.0)) {
     break label$2
    }
    $2 = $2 + 6.283185307179586;
    $3 = $2 == 6.283185307179586 ? 0.0 : $2;
   }
   HEAPF64[$0 >> 3] = $3 + -3.141592653589793;
  }
 }
 
 function btGeneric6DofSpring2Constraint_setMaxMotorForce($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  HEAPF64[(($1 | 0) < 3 ? (($1 << 3) + $0 | 0) + 1744 | 0 : (Math_imul($1, 176) + $0 | 0) + 1432 | 0) >> 3] = $2;
 }
 
 function btGeneric6DofSpring2Constraint_setFrames($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 68 >> 2] = $3;
  $3 = $1 + 24 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 88 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 16 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 80 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 72 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 56 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 120 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 48 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 112 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 40 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 104 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = HEAP32[$1 + 36 >> 2];
  $4 = $0 + 96 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = HEAP32[$1 + 68 >> 2];
  $4 = $0 + 128 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = $1 + 72 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 136 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 80 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 144 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 88 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 152 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = HEAP32[$1 + 100 >> 2];
  $4 = $0 + 160 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = $1 + 104 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 168 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $3 = $1 + 112 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = $0 + 176 | 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = $4;
  $1 = $1 + 120 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 184 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 192 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 196 >> 2] = $1;
  $1 = $2 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 200 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 16 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 208 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 24 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 216 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = HEAP32[$2 + 36 >> 2];
  $3 = $0 + 224 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $2 + 40 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 232 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 48 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 240 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 56 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 248 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = HEAP32[$2 + 68 >> 2];
  $3 = $0 + 256 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $2 + 72 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 264 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 88 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 280 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 80 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 272 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = HEAP32[$2 + 100 >> 2];
  $3 = $0 + 288 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $2 + 104 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 296 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 120 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 312 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $2 + 112 | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 304 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[$0 + 32 >> 2] + 8 | 0, HEAP32[$0 + 36 >> 2] + 8 | 0);
 }
 
 function btGeneric6DofSpring2Constraint_setRotationOrder($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 2416 >> 2] = $1;
 }
 
 function btRaycastVehicle_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 44 >> 2] = 1085763584;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 1076166656;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 1082081280;
  HEAP32[$3 + 16 >> 2] = -1030792151;
  HEAP32[$3 + 20 >> 2] = 1072441589;
  HEAP32[$3 + 8 >> 2] = 687194767;
  HEAP32[$3 + 12 >> 2] = 1072336732;
  HEAP32[$3 >> 2] = -1202590843;
  HEAP32[$3 + 4 >> 2] = 1075283230;
  $2 = operator_20new_28unsigned_20long_29(8);
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 >> 2] = 29544;
  $0 = operator_20new_28unsigned_20long_29(160);
  HEAP32[$0 >> 2] = 29508;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = $2;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $2 = $0 + 8 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $2 = $0 + 28 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $2 = $0 + 48 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 152 | 0] = 1;
  $2 = $0 + 68 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  $2 = $0 + 140 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 2;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 1;
  HEAP32[$0 + 120 >> 2] = $1;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  $1 = $0 + 112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  __stack_pointer = $3 + 48 | 0;
  return $0 | 0;
 }
 
 function btRaycastVehicle_addWheel($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  $7 = +$7;
  $8 = +$8;
  $9 = +$9;
  $10 = +$10;
  $11 = +$11;
  $12 = +$12;
  $13 = +$13;
  $14 = +$14;
  $15 = +$15;
  $16 = +$16;
  $17 = +$17;
  $18 = $18 | 0;
  var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
  $26 = __stack_pointer - 144 | 0;
  __stack_pointer = $26;
  HEAP32[$26 + 136 >> 2] = 0;
  HEAP32[$26 + 140 >> 2] = 0;
  HEAPF64[$26 + 128 >> 3] = $3;
  HEAPF64[$26 + 120 >> 3] = $2;
  HEAPF64[$26 + 112 >> 3] = $1;
  HEAP32[$26 + 104 >> 2] = 0;
  HEAP32[$26 + 108 >> 2] = 0;
  HEAPF64[$26 + 96 >> 3] = $6;
  HEAPF64[$26 + 88 >> 3] = $5;
  HEAPF64[$26 + 80 >> 3] = $4;
  HEAP32[$26 + 72 >> 2] = 0;
  HEAP32[$26 + 76 >> 2] = 0;
  HEAPF64[$26 + 64 >> 3] = $9;
  HEAPF64[$26 + 56 >> 3] = $8;
  HEAPF64[$26 + 48 >> 3] = $7;
  HEAPF64[$26 + 32 >> 3] = $15;
  HEAPF64[$26 + 16 >> 3] = $14;
  HEAPF64[$26 + 8 >> 3] = $13;
  HEAPF64[$26 >> 3] = $12;
  HEAPF64[$26 + 40 >> 3] = $17;
  HEAPF64[$26 + 24 >> 3] = $16;
  $25 = __stack_pointer - 560 | 0;
  __stack_pointer = $25;
  $1 = HEAPF64[$26 + 40 >> 3];
  $2 = HEAPF64[$26 + 32 >> 3];
  $3 = HEAPF64[$26 + 24 >> 3];
  $4 = HEAPF64[$26 >> 3];
  $5 = HEAPF64[$26 + 8 >> 3];
  $6 = HEAPF64[$26 + 16 >> 3];
  $19 = $26 + 112 | 0;
  $24 = $19 + 8 | 0;
  $20 = HEAP32[$24 + 4 >> 2];
  $21 = $25 + 320 | 0;
  HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$21 + 4 >> 2] = $20;
  $24 = $19 + 16 | 0;
  $20 = HEAP32[$24 + 4 >> 2];
  $21 = $25 + 328 | 0;
  HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$21 + 4 >> 2] = $20;
  $24 = $19 + 24 | 0;
  $20 = HEAP32[$24 + 4 >> 2];
  $21 = $25 + 336 | 0;
  HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$21 + 4 >> 2] = $20;
  $24 = $26 + 80 | 0;
  $20 = $24 + 8 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $25 + 352 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $24 + 16 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $25 + 360 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $24 + 24 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $25 + 368 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  HEAPF64[$25 + 448 >> 3] = $6;
  HEAPF64[$25 + 440 >> 3] = $5;
  HEAPF64[$25 + 432 >> 3] = $4;
  HEAPF64[$25 + 424 >> 3] = $11;
  HEAPF64[$25 + 416 >> 3] = $3;
  HEAPF64[$25 + 408 >> 3] = $10;
  $20 = HEAP32[$19 + 4 >> 2];
  HEAP32[$25 + 312 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$25 + 316 >> 2] = $20;
  $19 = HEAP32[$24 + 4 >> 2];
  HEAP32[$25 + 344 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$25 + 348 >> 2] = $19;
  $19 = $25 + 480 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $19 = $25 + 472 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $19 = $25 + 512 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $19 = $26 + 48 | 0;
  $24 = $19 + 24 | 0;
  $20 = HEAP32[$24 + 4 >> 2];
  $21 = $25 + 400 | 0;
  HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$21 + 4 >> 2] = $20;
  $24 = $19 + 16 | 0;
  $20 = HEAP32[$24 + 4 >> 2];
  $21 = $25 + 392 | 0;
  HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$21 + 4 >> 2] = $20;
  $24 = $19 + 8 | 0;
  $20 = HEAP32[$24 + 4 >> 2];
  $21 = $25 + 384 | 0;
  HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$21 + 4 >> 2] = $20;
  HEAPF64[$25 + 456 >> 3] = $2;
  HEAP32[$25 + 464 >> 2] = 0;
  HEAP32[$25 + 468 >> 2] = 0;
  HEAP32[$25 + 504 >> 2] = 0;
  HEAP32[$25 + 508 >> 2] = 0;
  HEAP32[$25 + 488 >> 2] = -1717986918;
  HEAP32[$25 + 492 >> 2] = 1069128089;
  HEAP8[$25 + 520 | 0] = $18;
  HEAPF64[$25 + 496 >> 3] = $1;
  $18 = HEAP32[$19 + 4 >> 2];
  HEAP32[$25 + 376 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$25 + 380 >> 2] = $18;
  $18 = $25 + 8 | 0;
  $24 = $0 + 136 | 0;
  $19 = HEAP32[$24 + 4 >> 2];
  label$1 : {
   if (($19 | 0) != HEAP32[$24 + 8 >> 2]) {
    break label$1
   }
   $31 = $19 ? $19 << 1 : 1;
   if (($31 | 0) <= ($19 | 0)) {
    break label$1
   }
   if ($31) {
    $32 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($31, 552));
    $19 = HEAP32[$24 + 4 >> 2];
   }
   if (($19 | 0) > 0) {
    $22 = 304;
    while (1) {
     $20 = $22 + $32 | 0;
     $21 = HEAP32[$24 + 12 >> 2] + $22 | 0;
     memcpy($20 - 304 | 0, $21 - 304 | 0, 176);
     $28 = $21 - 128 | 0;
     $23 = $28 + 24 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $29 = $20 - 128 | 0;
     $27 = $29 + 24 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = $28 + 16 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 16 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = $28 + 8 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 8 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = HEAP32[$28 + 4 >> 2];
     HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$29 + 4 >> 2] = $23;
     $28 = $21 - 96 | 0;
     $23 = $28 + 24 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $29 = $20 - 96 | 0;
     $27 = $29 + 24 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = $28 + 16 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 16 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = $28 + 8 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 8 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = HEAP32[$28 + 4 >> 2];
     HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$29 + 4 >> 2] = $23;
     $28 = $21 + -64 | 0;
     $23 = $28 + 24 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $29 = $20 + -64 | 0;
     $27 = $29 + 24 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = $28 + 16 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 16 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = $28 + 8 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 8 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = HEAP32[$28 + 4 >> 2];
     HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$29 + 4 >> 2] = $23;
     $28 = $21 - 32 | 0;
     $23 = HEAP32[$28 + 4 >> 2];
     $29 = $20 - 32 | 0;
     HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$29 + 4 >> 2] = $23;
     $23 = $28 + 8 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 8 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $23 = $28 + 16 | 0;
     $30 = HEAP32[$23 + 4 >> 2];
     $27 = $29 + 16 | 0;
     HEAP32[$27 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$27 + 4 >> 2] = $30;
     $28 = $28 + 24 | 0;
     $23 = HEAP32[$28 + 4 >> 2];
     $29 = $29 + 24 | 0;
     HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$29 + 4 >> 2] = $23;
     memcpy($20, $21, 248);
     $22 = $22 + 552 | 0;
     $19 = $19 - 1 | 0;
     if ($19) {
      continue
     }
     break;
    };
   }
   $19 = HEAP32[$24 + 12 >> 2];
   if (!(!$19 | !HEAPU8[$24 + 16 | 0])) {
    btAlignedFreeInternal_28void__29($19)
   }
   HEAP32[$24 + 12 >> 2] = $32;
   HEAP8[$24 + 16 | 0] = 1;
   HEAP32[$24 + 8 >> 2] = $31;
   $19 = HEAP32[$24 + 4 >> 2];
  }
  $19 = memcpy(HEAP32[$24 + 12 >> 2] + Math_imul($19, 552) | 0, $18, 176);
  $20 = $19 + 200 | 0;
  $21 = $18 + 200 | 0;
  $22 = HEAP32[$21 + 4 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$20 + 4 >> 2] = $22;
  $20 = $18 + 192 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 192 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 184 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 184 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = HEAP32[$18 + 180 >> 2];
  HEAP32[$19 + 176 >> 2] = HEAP32[$18 + 176 >> 2];
  HEAP32[$19 + 180 >> 2] = $20;
  $20 = $18 + 232 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 232 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 224 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 224 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 216 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 216 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 208 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 208 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 240 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 240 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 248 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 248 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 256 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 256 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 264 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 264 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 288 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 288 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 280 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 280 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 272 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 272 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  $20 = $18 + 296 | 0;
  $21 = HEAP32[$20 + 4 >> 2];
  $22 = $19 + 296 | 0;
  HEAP32[$22 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$22 + 4 >> 2] = $21;
  memcpy($19 + 304 | 0, $18 + 304 | 0, 248);
  HEAP32[$24 + 4 >> 2] = HEAP32[$24 + 4 >> 2] + 1;
  $24 = $0 + 140 | 0;
  $18 = HEAP32[$0 + 148 >> 2] + Math_imul(HEAP32[$24 >> 2], 552) | 0;
  HEAP8[$18 - 384 | 0] = 0;
  $19 = HEAP32[$0 + 120 >> 2];
  $13 = HEAPF64[$19 + 104 >> 3];
  $1 = HEAPF64[$19 + 24 >> 3];
  $2 = HEAPF64[$19 + 16 >> 3];
  $14 = HEAPF64[$19 + 112 >> 3];
  $3 = HEAPF64[$19 + 56 >> 3];
  $4 = HEAPF64[$19 + 40 >> 3];
  $5 = HEAPF64[$19 + 48 >> 3];
  $10 = HEAPF64[$19 + 120 >> 3];
  $6 = HEAPF64[$19 + 88 >> 3];
  $7 = HEAPF64[$19 + 72 >> 3];
  $8 = HEAPF64[$19 + 80 >> 3];
  $9 = HEAPF64[$19 + 8 >> 3];
  $19 = $18 - 456 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $15 = $10;
  $10 = HEAPF64[$18 - 232 >> 3];
  $11 = HEAPF64[$18 - 248 >> 3];
  $12 = HEAPF64[$18 - 240 >> 3];
  HEAPF64[$18 - 464 >> 3] = $15 + ($6 * $10 + ($7 * $11 + $8 * $12));
  HEAPF64[$18 - 472 >> 3] = $14 + ($10 * $3 + ($11 * $4 + $5 * $12));
  HEAPF64[$18 - 480 >> 3] = $13 + ($10 * $1 + ($11 * $9 + $2 * $12));
  $19 = $18 - 424 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $10 = HEAPF64[$18 - 200 >> 3];
  $11 = HEAPF64[$18 - 216 >> 3];
  $12 = HEAPF64[$18 - 208 >> 3];
  HEAPF64[$18 - 432 >> 3] = $6 * $10 + ($7 * $11 + $8 * $12);
  HEAPF64[$18 - 440 >> 3] = $3 * $10 + ($4 * $11 + $5 * $12);
  HEAPF64[$18 - 448 >> 3] = $1 * $10 + ($9 * $11 + $2 * $12);
  $10 = HEAPF64[$18 - 168 >> 3];
  $11 = HEAPF64[$18 - 184 >> 3];
  $12 = HEAPF64[$18 - 176 >> 3];
  $19 = $18 - 392 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  HEAPF64[$18 - 400 >> 3] = $6 * $10 + ($7 * $11 + $8 * $12);
  HEAPF64[$18 - 408 >> 3] = $3 * $10 + ($4 * $11 + $5 * $12);
  HEAPF64[$18 - 416 >> 3] = $1 * $10 + ($9 * $11 + $2 * $12);
  btRaycastVehicle__updateWheelTransform_28int_2c_20bool_29($0, HEAP32[$24 >> 2] - 1 | 0);
  __stack_pointer = $25 + 560 | 0;
  $0 = $18 - 552 | 0;
  __stack_pointer = $26 + 144 | 0;
  return $0 | 0;
 }
 
 function btRaycastVehicle_getNumWheels($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 140 >> 2];
 }
 
 function btRaycastVehicle_getWheelInfo($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[$0 + 148 >> 2] + Math_imul($1, 552) | 0;
 }
 
 function btWheelInfo_getEengineForce($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +HEAPF64[$0 + 496 >> 3];
 }
 
 function btWheelInfo_setSteeringValue($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 456 >> 3] = $1;
 }
 
 function btWheelInfo_getSteeringValue($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 456 >> 3];
 }
 
 function btWheelInfo_getWorldTransform($0) {
  $0 = $0 | 0;
  return $0 + 176 | 0;
 }
 
 function btWheelInfo_getRrotation($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 464 >> 3];
 }
 
 function btWheelInfo_getDeltaRotation($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 472 >> 3];
 }
 
 function btHeightfieldTerrainShape_create($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0.0;
  $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(216);
  btConcaveShape__btConcaveShape_28_29($7);
  HEAP32[$7 >> 2] = 29668;
  HEAP32[$7 + 184 >> 2] = 0;
  HEAP32[$7 + 188 >> 2] = 1072693248;
  HEAP32[$7 + 180 >> 2] = 1;
  HEAP8[$7 + 177 | 0] = 0;
  HEAP8[$7 + 178 | 0] = 0;
  HEAP8[$7 + 176 | 0] = 0;
  HEAP32[$7 + 172 >> 2] = $6;
  HEAP32[$7 + 168 >> 2] = $2;
  HEAPF64[$7 + 160 >> 3] = $3;
  HEAPF64[$7 + 136 >> 3] = $5;
  HEAPF64[$7 + 128 >> 3] = $4;
  HEAP32[$7 + 124 >> 2] = $1;
  HEAP32[$7 + 120 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = 24;
  $2 = $7 + 208 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $7 + 200 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $2 = $7 + 192 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1072693248;
  $3 = +($1 - 1 | 0);
  HEAPF64[$7 + 152 >> 3] = $3;
  $8 = +($0 - 1 | 0);
  HEAPF64[$7 + 144 >> 3] = $8;
  HEAP32[$7 + 24 >> 2] = 0;
  HEAP32[$7 + 28 >> 2] = 0;
  HEAPF64[$7 + 56 >> 3] = $8;
  $0 = $7 + 40 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$7 + 32 >> 3] = $4;
  $0 = $7 + 48 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $7 + 80 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$7 + 72 >> 3] = $3;
  HEAPF64[$7 - -64 >> 3] = $5;
  $0 = $7 + 112 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$7 + 104 >> 3] = ($3 + 0.0) * .5;
  HEAPF64[$7 + 96 >> 3] = ($4 + $5) * .5;
  HEAPF64[$7 + 88 >> 3] = ($8 + 0.0) * .5;
  return $7 | 0;
 }
 
 function solveSphereHit($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
  $11 = __stack_pointer - 480 | 0;
  __stack_pointer = $11;
  $12 = $11 + 352 | 0;
  $10 = $12 + 16 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 24 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 32 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 48 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 40 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 1072693248;
  $10 = $12 + 56 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 - -64 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 72 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 88 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 80 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 1072693248;
  $12 = $11 + 224 | 0;
  $10 = $12 + 16 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 24 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 32 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$11 + 360 >> 2] = 0;
  HEAP32[$11 + 364 >> 2] = 0;
  HEAP32[$11 + 352 >> 2] = 0;
  HEAP32[$11 + 356 >> 2] = 1072693248;
  HEAP32[$11 + 232 >> 2] = 0;
  HEAP32[$11 + 236 >> 2] = 0;
  HEAP32[$11 + 224 >> 2] = 0;
  HEAP32[$11 + 228 >> 2] = 1072693248;
  $10 = $12 + 48 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 40 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 1072693248;
  $10 = $12 + 56 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 - -64 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 72 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $12 + 80 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 1072693248;
  $10 = $12 + 88 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $14 = $5 - $2;
  $15 = $4 - $1;
  $16 = $3 - $0;
  $10 = -11;
  while (1) {
   $12 = $10;
   $10 = $10 + 1 | 0;
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$11 + 472 >> 2] = 0;
    HEAP32[$11 + 476 >> 2] = 0;
    HEAPF64[$11 + 464 >> 3] = $2;
    HEAPF64[$11 + 456 >> 3] = $1;
    HEAPF64[$11 + 448 >> 3] = $0;
    HEAP32[$11 + 344 >> 2] = 0;
    HEAP32[$11 + 348 >> 2] = 0;
    HEAPF64[$11 + 336 >> 3] = $5;
    HEAPF64[$11 + 328 >> 3] = $4;
    HEAPF64[$11 + 320 >> 3] = $3;
    HEAP8[$11 + 40 | 0] = 1;
    HEAP32[$11 + 8 >> 2] = 0;
    HEAP32[$11 + 12 >> 2] = 1072693248;
    HEAP32[$11 + 36 >> 2] = 0;
    HEAP8[$11 + 128 | 0] = 1;
    HEAP32[$11 + 28 >> 2] = 0;
    HEAP32[$11 + 32 >> 2] = 0;
    HEAP32[$11 + 124 >> 2] = 0;
    HEAP8[$11 + 148 | 0] = 1;
    HEAP32[$11 + 116 >> 2] = 0;
    HEAP32[$11 + 120 >> 2] = 0;
    $17 = HEAPF64[$6 + 16 >> 3];
    $18 = HEAPF64[$6 + 48 >> 3];
    HEAP32[$11 + 104 >> 2] = 0;
    HEAP32[$11 + 108 >> 2] = 0;
    HEAPF64[$11 + 96 >> 3] = $5;
    HEAPF64[$11 + 88 >> 3] = $4;
    HEAPF64[$11 + 80 >> 3] = $3;
    HEAP32[$11 + 72 >> 2] = 0;
    HEAP32[$11 + 76 >> 2] = 0;
    HEAPF64[$11 + 64 >> 3] = $2;
    HEAPF64[$11 + 56 >> 3] = $1;
    HEAPF64[$11 + 48 >> 3] = $0;
    HEAP32[$11 + 136 >> 2] = 0;
    HEAP32[$11 + 140 >> 2] = 0;
    HEAP8[$11 + 168 | 0] = 1;
    HEAP32[$11 + 144 >> 2] = 0;
    HEAP32[$11 + 164 >> 2] = 0;
    HEAP32[$11 + 156 >> 2] = 0;
    HEAP32[$11 + 160 >> 2] = 0;
    HEAPF64[$11 + 208 >> 3] = $18 * $17;
    HEAP32[$11 >> 2] = 30576;
    HEAP32[$11 + 216 >> 2] = 0;
    HEAP32[$11 + 220 >> 2] = 1072693248;
    HEAP32[$11 + 200 >> 2] = 0;
    HEAP32[$11 + 204 >> 2] = 0;
    HEAPF64[$11 + 192 >> 3] = $14;
    HEAPF64[$11 + 184 >> 3] = $15;
    HEAPF64[$11 + 176 >> 3] = $16;
    HEAP32[$11 + 20 >> 2] = $8;
    HEAP32[$11 + 16 >> 2] = $7;
    label$3 : {
     label$4 : {
      if (HEAPF64[$11 + 352 >> 3] != HEAPF64[$11 + 224 >> 3] | HEAPF64[$11 + 384 >> 3] != HEAPF64[$11 + 256 >> 3] | (HEAPF64[$11 + 416 >> 3] != HEAPF64[$11 + 288 >> 3] | HEAPF64[$11 + 360 >> 3] != HEAPF64[$11 + 232 >> 3])) {
       break label$4
      }
      if (HEAPF64[$11 + 392 >> 3] != HEAPF64[$11 + 264 >> 3] | HEAPF64[$11 + 424 >> 3] != HEAPF64[$11 + 296 >> 3] | (HEAPF64[$11 + 368 >> 3] != HEAPF64[$11 + 240 >> 3] | HEAPF64[$11 + 400 >> 3] != HEAPF64[$11 + 272 >> 3])) {
       break label$4
      }
      if ($0 != $3 | $1 != $4 | ($2 != $5 | HEAPF64[$11 + 432 >> 3] != HEAPF64[$11 + 304 >> 3])) {
       break label$4
      }
      HEAP32[$11 >> 2] = 30224;
      $12 = 0;
      break label$3;
     }
     btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29_20const($9, $6, $11 + 352 | 0, $11 + 224 | 0, $11, HEAPF64[$9 + 72 >> 3]);
     HEAP32[$11 >> 2] = 30224;
     $12 = HEAPF64[$11 + 8 >> 3] < 1.0;
     $13 = HEAP32[$11 + 164 >> 2];
     if (!$13 | !HEAPU8[$11 + 168 | 0]) {
      break label$3
     }
     btAlignedFreeInternal_28void__29($13);
    }
    HEAP32[$11 + 164 >> 2] = 0;
    HEAP8[$11 + 168 | 0] = 1;
    HEAP32[$11 + 156 >> 2] = 0;
    HEAP32[$11 + 160 >> 2] = 0;
    $13 = HEAP32[$11 + 144 >> 2];
    if (!(!$13 | !HEAPU8[$11 + 148 | 0])) {
     btAlignedFreeInternal_28void__29($13)
    }
    HEAP32[$11 + 144 >> 2] = 0;
    HEAP8[$11 + 148 | 0] = 1;
    HEAP32[$11 + 136 >> 2] = 0;
    HEAP32[$11 + 140 >> 2] = 0;
    $13 = HEAP32[$11 + 124 >> 2];
    if (!(!$13 | !HEAPU8[$11 + 128 | 0])) {
     btAlignedFreeInternal_28void__29($13)
    }
    HEAP32[$11 + 124 >> 2] = 0;
    HEAP8[$11 + 128 | 0] = 1;
    HEAP32[$11 + 116 >> 2] = 0;
    HEAP32[$11 + 120 >> 2] = 0;
    $13 = HEAP32[$11 + 36 >> 2];
    if (!(!$13 | !HEAPU8[$11 + 40 | 0])) {
     btAlignedFreeInternal_28void__29($13)
    }
    if ($12) {
     continue
    }
   }
   break;
  };
  __stack_pointer = $11 + 480 | 0;
  return 1;
 }
 
 function LayaMotionState__getWorldTransform_28btTransform__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  layaMotionStateGetWorldTransform(HEAP32[$0 + 4 >> 2], $1 | 0);
 }
 
 function LayaMotionState__setWorldTransform_28btTransform_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  layaMotionStateSetWorldTransform(HEAP32[$0 + 4 >> 2], $1 | 0);
 }
 
 function btCollisionWorld__RayResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (!(HEAP32[$0 + 24 >> 2] & HEAP32[$1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 20 >> 2]) != 0 | 0;
 }
 
 function btCollisionWorld__ClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0;
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$1 + 40 >> 3];
  $3 = HEAP32[$1 >> 2];
  HEAP32[$0 + 16 >> 2] = $3;
  label$1 : {
   if ($2) {
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 96 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 100 >> 2] = $2;
    $3 = $1 + 32 | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 120 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $3 = $1 + 24 | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 112 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $3 = $1 + 16 | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 104 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    break label$1;
   }
   $8 = HEAPF64[$3 + 16 >> 3];
   $9 = HEAPF64[$3 + 24 >> 3];
   $10 = HEAPF64[$3 + 40 >> 3];
   $11 = HEAPF64[$3 + 48 >> 3];
   $12 = HEAPF64[$3 + 56 >> 3];
   $13 = HEAPF64[$3 + 72 >> 3];
   $14 = HEAPF64[$3 + 80 >> 3];
   $4 = HEAPF64[$1 + 16 >> 3];
   $15 = HEAPF64[$3 + 88 >> 3];
   $5 = HEAPF64[$1 + 24 >> 3];
   $16 = HEAPF64[$3 + 8 >> 3];
   $7 = HEAPF64[$1 + 8 >> 3];
   $2 = $0 + 120 | 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAPF64[$0 + 112 >> 3] = $15 * $5 + ($13 * $7 + $4 * $14);
   HEAPF64[$0 + 104 >> 3] = $12 * $5 + ($10 * $7 + $4 * $11);
   HEAPF64[$0 + 96 >> 3] = $9 * $5 + ($16 * $7 + $8 * $4);
  }
  $4 = HEAPF64[$1 + 40 >> 3];
  $5 = 1.0 - $4;
  HEAPF64[$0 + 128 >> 3] = $5 * HEAPF64[$0 + 32 >> 3] + $4 * HEAPF64[$0 + 64 >> 3];
  HEAPF64[$0 + 136 >> 3] = $5 * HEAPF64[$0 + 40 >> 3] + $4 * HEAPF64[$0 + 72 >> 3];
  HEAPF64[$0 + 144 >> 3] = $5 * HEAPF64[$0 + 48 >> 3] + $4 * HEAPF64[$0 + 80 >> 3];
  return +HEAPF64[$1 + 40 >> 3];
 }
 
 function btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 3e4;
  $1 = HEAP32[$0 + 172 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 176 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP8[$0 + 176 | 0] = 1;
  $1 = $0 + 164 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 152 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 156 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 152 >> 2] = 0;
  HEAP8[$0 + 156 | 0] = 1;
  $1 = $0 + 144 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 132 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 136 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP8[$0 + 136 | 0] = 1;
  $1 = $0 + 124 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 44 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 48 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 1;
  $1 = $0 + 36 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 3e4;
  $1 = HEAP32[$0 + 172 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 176 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP8[$0 + 176 | 0] = 1;
  $1 = $0 + 164 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 152 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 156 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 152 >> 2] = 0;
  HEAP8[$0 + 156 | 0] = 1;
  $1 = $0 + 144 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 132 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 136 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP8[$0 + 136 | 0] = 1;
  $1 = $0 + 124 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 44 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 48 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  operator_20delete_28void__29($0);
 }
 
 function btCollisionWorld__AllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
  HEAP32[$0 + 16 >> 2] = HEAP32[$1 >> 2];
  $7 = HEAP32[$0 + 36 >> 2];
  label$1 : {
   if (($7 | 0) != HEAP32[$0 + 40 >> 2]) {
    break label$1
   }
   $4 = $7 ? $7 << 1 : 1;
   if (($4 | 0) <= ($7 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$4) {
     break label$2
    }
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
    $7 = HEAP32[$0 + 36 >> 2];
   }
   label$4 : {
    if (($7 | 0) <= 0) {
     break label$4
    }
    $9 = $7 & 3;
    if ($7 - 1 >>> 0 >= 3) {
     $5 = $7 & -4;
     while (1) {
      $12 = $3 + $6 | 0;
      HEAP32[$12 >> 2] = HEAP32[HEAP32[$0 + 44 >> 2] + $3 >> 2];
      HEAP32[$12 + 4 >> 2] = HEAP32[(HEAP32[$0 + 44 >> 2] + $3 | 0) + 4 >> 2];
      HEAP32[$12 + 8 >> 2] = HEAP32[(HEAP32[$0 + 44 >> 2] + $3 | 0) + 8 >> 2];
      HEAP32[$12 + 12 >> 2] = HEAP32[(HEAP32[$0 + 44 >> 2] + $3 | 0) + 12 >> 2];
      $3 = $3 + 16 | 0;
      $11 = $11 + 4 | 0;
      if (($5 | 0) != ($11 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$9) {
     break label$4
    }
    $3 = $11 << 2;
    while (1) {
     HEAP32[$3 + $6 >> 2] = HEAP32[HEAP32[$0 + 44 >> 2] + $3 >> 2];
     $3 = $3 + 4 | 0;
     $9 = $9 - 1 | 0;
     if ($9) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 44 >> 2];
   if (!(!$3 | !HEAPU8[$0 + 48 | 0])) {
    btAlignedFreeInternal_28void__29($3);
    $7 = HEAP32[$0 + 36 >> 2];
   }
   HEAP32[$0 + 44 >> 2] = $6;
   HEAP8[$0 + 48 | 0] = 1;
   HEAP32[$0 + 40 >> 2] = $4;
  }
  HEAP32[$0 + 36 >> 2] = $7 + 1;
  HEAP32[HEAP32[$0 + 44 >> 2] + ($7 << 2) >> 2] = HEAP32[$1 >> 2];
  label$9 : {
   if ($2) {
    $15 = HEAPF64[$1 + 24 >> 3];
    $16 = HEAPF64[$1 + 16 >> 3];
    $14 = HEAPF64[$1 + 8 >> 3];
    $13 = HEAPF64[$1 + 32 >> 3];
    break label$9;
   }
   $2 = HEAP32[$0 + 16 >> 2];
   $13 = HEAPF64[$1 + 24 >> 3];
   $14 = HEAPF64[$1 + 8 >> 3];
   $17 = HEAPF64[$1 + 16 >> 3];
   $15 = HEAPF64[$2 + 88 >> 3] * $13 + (HEAPF64[$2 + 72 >> 3] * $14 + $17 * HEAPF64[$2 + 80 >> 3]);
   $16 = HEAPF64[$2 + 56 >> 3] * $13 + (HEAPF64[$2 + 40 >> 3] * $14 + $17 * HEAPF64[$2 + 48 >> 3]);
   $14 = HEAPF64[$2 + 24 >> 3] * $13 + (HEAPF64[$2 + 8 >> 3] * $14 + HEAPF64[$2 + 16 >> 3] * $17);
   $13 = 0.0;
  }
  $3 = HEAP32[$0 + 124 >> 2];
  label$11 : {
   if (($3 | 0) != HEAP32[$0 + 128 >> 2]) {
    break label$11
   }
   $11 = $3 ? $3 << 1 : 1;
   if (($11 | 0) <= ($3 | 0)) {
    break label$11
   }
   label$12 : {
    if (!$11) {
     $7 = 0;
     break label$12;
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 5);
    $3 = HEAP32[$0 + 124 >> 2];
   }
   label$14 : {
    if (($3 | 0) <= 0) {
     break label$14
    }
    $9 = $3 & 1;
    $6 = 0;
    if (($3 | 0) != 1) {
     $12 = $3 & -2;
     $2 = 0;
     while (1) {
      $4 = HEAP32[$0 + 132 >> 2] + $2 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + $7 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $8 = $4 + 24 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $8 = $4 + 16 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $4 = $4 + 8 | 0;
      $8 = HEAP32[$4 + 4 >> 2];
      $5 = $3 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $8;
      $4 = HEAP32[$0 + 132 >> 2] + $2 | 0;
      $8 = $4 + 40 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $8 = $4 + 48 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $8 = $4 + 56 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 56 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $4 = $4 + 32 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $3 + 32 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $2 = $2 - -64 | 0;
      $6 = $6 + 2 | 0;
      if (($12 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$9) {
     break label$14
    }
    $3 = $6 << 5;
    $2 = $3 + $7 | 0;
    $3 = $3 + HEAP32[$0 + 132 >> 2] | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $4 = $3 + 24 | 0;
    $9 = HEAP32[$4 + 4 >> 2];
    $6 = $2 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $9;
    $4 = $3 + 16 | 0;
    $9 = HEAP32[$4 + 4 >> 2];
    $6 = $2 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $9;
    $3 = $3 + 8 | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
   }
   $2 = HEAP32[$0 + 132 >> 2];
   if (!(!$2 | !HEAPU8[$0 + 136 | 0])) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 132 >> 2] = $7;
   HEAP8[$0 + 136 | 0] = 1;
   HEAP32[$0 + 128 >> 2] = $11;
   $3 = HEAP32[$0 + 124 >> 2];
  }
  $2 = HEAP32[$0 + 132 >> 2] + ($3 << 5) | 0;
  HEAPF64[$2 + 24 >> 3] = $13;
  HEAPF64[$2 + 16 >> 3] = $15;
  HEAPF64[$2 + 8 >> 3] = $16;
  HEAPF64[$2 >> 3] = $14;
  HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 124 >> 2] + 1;
  $13 = HEAPF64[$1 + 40 >> 3];
  $15 = 1.0 - $13;
  $16 = $15 * HEAPF64[$0 + 72 >> 3] + $13 * HEAPF64[$0 + 104 >> 3];
  $14 = $15 * HEAPF64[$0 - -64 >> 3] + $13 * HEAPF64[$0 + 96 >> 3];
  $13 = $15 * HEAPF64[$0 + 56 >> 3] + $13 * HEAPF64[$0 + 88 >> 3];
  $3 = HEAP32[$0 + 144 >> 2];
  label$18 : {
   if (($3 | 0) != HEAP32[$0 + 148 >> 2]) {
    break label$18
   }
   $11 = $3 ? $3 << 1 : 1;
   if (($11 | 0) <= ($3 | 0)) {
    break label$18
   }
   label$19 : {
    if (!$11) {
     $7 = 0;
     break label$19;
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 5);
    $3 = HEAP32[$0 + 144 >> 2];
   }
   label$21 : {
    if (($3 | 0) <= 0) {
     break label$21
    }
    $9 = $3 & 1;
    $6 = 0;
    if (($3 | 0) != 1) {
     $12 = $3 & -2;
     $2 = 0;
     while (1) {
      $4 = HEAP32[$0 + 152 >> 2] + $2 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $2 + $7 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $8 = $4 + 24 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $8 = $4 + 16 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $4 = $4 + 8 | 0;
      $8 = HEAP32[$4 + 4 >> 2];
      $5 = $3 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$5 + 4 >> 2] = $8;
      $4 = HEAP32[$0 + 152 >> 2] + $2 | 0;
      $8 = $4 + 40 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $8 = $4 + 48 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $8 = $4 + 56 | 0;
      $10 = HEAP32[$8 + 4 >> 2];
      $5 = $3 + 56 | 0;
      HEAP32[$5 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $4 = $4 + 32 | 0;
      $5 = HEAP32[$4 + 4 >> 2];
      $3 = $3 + 32 | 0;
      HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $2 = $2 - -64 | 0;
      $6 = $6 + 2 | 0;
      if (($12 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$9) {
     break label$21
    }
    $3 = $6 << 5;
    $2 = $3 + $7 | 0;
    $3 = $3 + HEAP32[$0 + 152 >> 2] | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $4 = $3 + 24 | 0;
    $9 = HEAP32[$4 + 4 >> 2];
    $6 = $2 + 24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $9;
    $4 = $3 + 16 | 0;
    $9 = HEAP32[$4 + 4 >> 2];
    $6 = $2 + 16 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $9;
    $3 = $3 + 8 | 0;
    $6 = HEAP32[$3 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
   }
   $2 = HEAP32[$0 + 152 >> 2];
   if (!(!$2 | !HEAPU8[$0 + 156 | 0])) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 152 >> 2] = $7;
   HEAP8[$0 + 156 | 0] = 1;
   HEAP32[$0 + 148 >> 2] = $11;
   $3 = HEAP32[$0 + 144 >> 2];
  }
  $2 = HEAP32[$0 + 152 >> 2] + ($3 << 5) | 0;
  HEAPF64[$2 + 16 >> 3] = $16;
  HEAPF64[$2 + 8 >> 3] = $14;
  HEAPF64[$2 >> 3] = $13;
  HEAP32[$0 + 144 >> 2] = HEAP32[$0 + 144 >> 2] + 1;
  $7 = HEAP32[$0 + 164 >> 2];
  label$25 : {
   if (($7 | 0) != HEAP32[$0 + 168 >> 2]) {
    break label$25
   }
   $12 = $7 ? $7 << 1 : 1;
   if (($12 | 0) <= ($7 | 0)) {
    break label$25
   }
   label$26 : {
    if (!$12) {
     $4 = 0;
     break label$26;
    }
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 3);
    $7 = HEAP32[$0 + 164 >> 2];
   }
   $9 = HEAP32[$0 + 172 >> 2];
   label$28 : {
    label$29 : {
     if (($7 | 0) > 0) {
      $6 = $7 & 3;
      $11 = 0;
      if ($7 - 1 >>> 0 >= 3) {
       $8 = $7 & -4;
       $3 = 0;
       while (1) {
        $2 = $3 + $4 | 0;
        $5 = $3 + $9 | 0;
        HEAPF64[$2 >> 3] = HEAPF64[$5 >> 3];
        HEAPF64[$2 + 8 >> 3] = HEAPF64[$5 + 8 >> 3];
        HEAPF64[$2 + 16 >> 3] = HEAPF64[$5 + 16 >> 3];
        HEAPF64[$2 + 24 >> 3] = HEAPF64[$5 + 24 >> 3];
        $3 = $3 + 32 | 0;
        $11 = $11 + 4 | 0;
        if (($8 | 0) != ($11 | 0)) {
         continue
        }
        break;
       };
      }
      if ($6) {
       $2 = $11 << 3;
       $3 = $2 + $4 | 0;
       $2 = $2 + $9 | 0;
       while (1) {
        HEAPF64[$3 >> 3] = HEAPF64[$2 >> 3];
        $3 = $3 + 8 | 0;
        $2 = $2 + 8 | 0;
        $6 = $6 - 1 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      if (HEAPU8[$0 + 176 | 0]) {
       break label$29
      }
      break label$28;
     }
     if (!$9 | !HEAPU8[$0 + 176 | 0]) {
      break label$28
     }
    }
    btAlignedFreeInternal_28void__29($9);
    $7 = HEAP32[$0 + 164 >> 2];
   }
   HEAP32[$0 + 172 >> 2] = $4;
   HEAP32[$0 + 168 >> 2] = $12;
   HEAP8[$0 + 176 | 0] = 1;
  }
  HEAPF64[HEAP32[$0 + 172 >> 2] + ($7 << 3) >> 3] = HEAPF64[$1 + 40 >> 3];
  HEAP32[$0 + 164 >> 2] = $7 + 1;
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function btCollisionWorld__ConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (!(HEAP32[$0 + 20 >> 2] & HEAP32[$1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 16 >> 2]) != 0 | 0;
 }
 
 function btCollisionWorld__ClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0;
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$1 + 72 >> 3];
  $3 = HEAP32[$1 >> 2];
  HEAP32[$0 + 152 >> 2] = $3;
  label$1 : {
   if ($2) {
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 88 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 92 >> 2] = $2;
    $3 = $1 + 32 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 112 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $1 + 24 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 104 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $3 = $1 + 16 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $0 + 96 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    break label$1;
   }
   $8 = HEAPF64[$3 + 16 >> 3];
   $9 = HEAPF64[$3 + 24 >> 3];
   $10 = HEAPF64[$3 + 40 >> 3];
   $11 = HEAPF64[$3 + 48 >> 3];
   $12 = HEAPF64[$3 + 56 >> 3];
   $13 = HEAPF64[$3 + 72 >> 3];
   $14 = HEAPF64[$3 + 80 >> 3];
   $5 = HEAPF64[$1 + 16 >> 3];
   $15 = HEAPF64[$3 + 88 >> 3];
   $6 = HEAPF64[$1 + 24 >> 3];
   $16 = HEAPF64[$3 + 8 >> 3];
   $7 = HEAPF64[$1 + 8 >> 3];
   $2 = $0 + 112 | 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAPF64[$0 + 104 >> 3] = $15 * $6 + ($13 * $7 + $5 * $14);
   HEAPF64[$0 + 96 >> 3] = $12 * $6 + ($10 * $7 + $5 * $11);
   HEAPF64[$0 + 88 >> 3] = $9 * $6 + ($16 * $7 + $8 * $5);
  }
  $2 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 + 120 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$0 + 124 >> 2] = $2;
  $3 = $1 - -64 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 144 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $3 = $1 + 56 | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 136 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = $1 + 48 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $0 = $0 + 128 | 0;
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  return +HEAPF64[$1 + 72 >> 3];
 }
 
 function btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 30224;
  $1 = HEAP32[$0 + 164 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 168 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP8[$0 + 168 | 0] = 1;
  $1 = $0 + 156 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 144 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 148 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP8[$0 + 148 | 0] = 1;
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 124 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 128 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP8[$0 + 128 | 0] = 1;
  $1 = $0 + 116 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 30224;
  $1 = HEAP32[$0 + 164 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 168 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP8[$0 + 168 | 0] = 1;
  $1 = $0 + 156 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 144 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 148 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP8[$0 + 148 | 0] = 1;
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 124 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 128 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP8[$0 + 128 | 0] = 1;
  $1 = $0 + 116 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 40 | 0])) {
   btAlignedFreeInternal_28void__29($1)
  }
  operator_20delete_28void__29($0);
 }
 
 function btCollisionWorld__AllConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
  $6 = HEAP32[$0 + 28 >> 2];
  label$1 : {
   if (($6 | 0) != HEAP32[$0 + 32 >> 2]) {
    break label$1
   }
   $8 = $6 ? $6 << 1 : 1;
   if (($8 | 0) <= ($6 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$8) {
     break label$2
    }
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2);
    $6 = HEAP32[$0 + 28 >> 2];
   }
   label$4 : {
    if (($6 | 0) <= 0) {
     break label$4
    }
    $7 = $6 & 3;
    if ($6 - 1 >>> 0 >= 3) {
     $9 = $6 & -4;
     while (1) {
      $12 = $3 + $4 | 0;
      HEAP32[$12 >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + $3 >> 2];
      HEAP32[$12 + 4 >> 2] = HEAP32[(HEAP32[$0 + 36 >> 2] + $3 | 0) + 4 >> 2];
      HEAP32[$12 + 8 >> 2] = HEAP32[(HEAP32[$0 + 36 >> 2] + $3 | 0) + 8 >> 2];
      HEAP32[$12 + 12 >> 2] = HEAP32[(HEAP32[$0 + 36 >> 2] + $3 | 0) + 12 >> 2];
      $3 = $3 + 16 | 0;
      $11 = $11 + 4 | 0;
      if (($9 | 0) != ($11 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$7) {
     break label$4
    }
    $3 = $11 << 2;
    while (1) {
     HEAP32[$3 + $4 >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + $3 >> 2];
     $3 = $3 + 4 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 36 >> 2];
   if (!(!$3 | !HEAPU8[$0 + 40 | 0])) {
    btAlignedFreeInternal_28void__29($3);
    $6 = HEAP32[$0 + 28 >> 2];
   }
   HEAP32[$0 + 36 >> 2] = $4;
   HEAP8[$0 + 40 | 0] = 1;
   HEAP32[$0 + 32 >> 2] = $8;
  }
  HEAP32[$0 + 28 >> 2] = $6 + 1;
  HEAP32[HEAP32[$0 + 36 >> 2] + ($6 << 2) >> 2] = HEAP32[$1 >> 2];
  label$9 : {
   if ($2) {
    $17 = HEAPF64[$1 + 24 >> 3];
    $18 = HEAPF64[$1 + 16 >> 3];
    $14 = HEAPF64[$1 + 8 >> 3];
    $15 = HEAPF64[$1 + 32 >> 3];
    break label$9;
   }
   $2 = HEAP32[$1 >> 2];
   $15 = HEAPF64[$1 + 24 >> 3];
   $14 = HEAPF64[$1 + 8 >> 3];
   $16 = HEAPF64[$1 + 16 >> 3];
   $17 = HEAPF64[$2 + 88 >> 3] * $15 + (HEAPF64[$2 + 72 >> 3] * $14 + $16 * HEAPF64[$2 + 80 >> 3]);
   $18 = HEAPF64[$2 + 56 >> 3] * $15 + (HEAPF64[$2 + 40 >> 3] * $14 + $16 * HEAPF64[$2 + 48 >> 3]);
   $14 = HEAPF64[$2 + 24 >> 3] * $15 + (HEAPF64[$2 + 8 >> 3] * $14 + HEAPF64[$2 + 16 >> 3] * $16);
   $15 = 0.0;
  }
  $3 = HEAP32[$0 + 116 >> 2];
  label$11 : {
   if (($3 | 0) != HEAP32[$0 + 120 >> 2]) {
    break label$11
   }
   $11 = $3 ? $3 << 1 : 1;
   if (($11 | 0) <= ($3 | 0)) {
    break label$11
   }
   label$12 : {
    if (!$11) {
     $6 = 0;
     break label$12;
    }
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 5);
    $3 = HEAP32[$0 + 116 >> 2];
   }
   label$14 : {
    if (($3 | 0) <= 0) {
     break label$14
    }
    $7 = $3 & 1;
    $4 = 0;
    if (($3 | 0) != 1) {
     $12 = $3 & -2;
     $2 = 0;
     while (1) {
      $8 = HEAP32[$0 + 124 >> 2] + $2 | 0;
      $9 = HEAP32[$8 + 4 >> 2];
      $3 = $2 + $6 | 0;
      HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$3 + 4 >> 2] = $9;
      $5 = $8 + 24 | 0;
      $10 = HEAP32[$5 + 4 >> 2];
      $9 = $3 + 24 | 0;
      HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $5 = $8 + 16 | 0;
      $10 = HEAP32[$5 + 4 >> 2];
      $9 = $3 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $8 = $8 + 8 | 0;
      $5 = HEAP32[$8 + 4 >> 2];
      $9 = $3 + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$9 + 4 >> 2] = $5;
      $8 = HEAP32[$0 + 124 >> 2] + $2 | 0;
      $5 = $8 + 40 | 0;
      $10 = HEAP32[$5 + 4 >> 2];
      $9 = $3 + 40 | 0;
      HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $5 = $8 + 48 | 0;
      $10 = HEAP32[$5 + 4 >> 2];
      $9 = $3 + 48 | 0;
      HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $5 = $8 + 56 | 0;
      $10 = HEAP32[$5 + 4 >> 2];
      $9 = $3 + 56 | 0;
      HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $8 = $8 + 32 | 0;
      $9 = HEAP32[$8 + 4 >> 2];
      $3 = $3 + 32 | 0;
      HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$3 + 4 >> 2] = $9;
      $2 = $2 - -64 | 0;
      $4 = $4 + 2 | 0;
      if (($12 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$7) {
     break label$14
    }
    $3 = $4 << 5;
    $2 = $3 + $6 | 0;
    $3 = $3 + HEAP32[$0 + 124 >> 2] | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $8 = $3 + 24 | 0;
    $7 = HEAP32[$8 + 4 >> 2];
    $4 = $2 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    $8 = $3 + 16 | 0;
    $7 = HEAP32[$8 + 4 >> 2];
    $4 = $2 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$4 + 4 >> 2] = $7;
    $3 = $3 + 8 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
   }
   $2 = HEAP32[$0 + 124 >> 2];
   if (!(!$2 | !HEAPU8[$0 + 128 | 0])) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 124 >> 2] = $6;
   HEAP8[$0 + 128 | 0] = 1;
   HEAP32[$0 + 120 >> 2] = $11;
   $3 = HEAP32[$0 + 116 >> 2];
  }
  $2 = HEAP32[$0 + 124 >> 2] + ($3 << 5) | 0;
  HEAPF64[$2 + 24 >> 3] = $15;
  HEAPF64[$2 + 16 >> 3] = $17;
  HEAPF64[$2 + 8 >> 3] = $18;
  HEAPF64[$2 >> 3] = $14;
  HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + 1;
  $6 = $1 + 40 | 0;
  $3 = HEAP32[$0 + 136 >> 2];
  label$18 : {
   if (($3 | 0) != HEAP32[$0 + 140 >> 2]) {
    break label$18
   }
   $8 = $3 ? $3 << 1 : 1;
   if (($8 | 0) <= ($3 | 0)) {
    break label$18
   }
   label$19 : {
    if (!$8) {
     $11 = 0;
     break label$19;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 5);
    $3 = HEAP32[$0 + 136 >> 2];
   }
   label$21 : {
    if (($3 | 0) <= 0) {
     break label$21
    }
    $12 = $3 & 1;
    $4 = 0;
    if (($3 | 0) != 1) {
     $9 = $3 & -2;
     $2 = 0;
     while (1) {
      $7 = HEAP32[$0 + 144 >> 2] + $2 | 0;
      $5 = HEAP32[$7 + 4 >> 2];
      $3 = $2 + $11 | 0;
      HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $10 = $7 + 24 | 0;
      $13 = HEAP32[$10 + 4 >> 2];
      $5 = $3 + 24 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $13;
      $10 = $7 + 16 | 0;
      $13 = HEAP32[$10 + 4 >> 2];
      $5 = $3 + 16 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $13;
      $7 = $7 + 8 | 0;
      $10 = HEAP32[$7 + 4 >> 2];
      $5 = $3 + 8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $7 = HEAP32[$0 + 144 >> 2] + $2 | 0;
      $10 = $7 + 40 | 0;
      $13 = HEAP32[$10 + 4 >> 2];
      $5 = $3 + 40 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $13;
      $10 = $7 + 48 | 0;
      $13 = HEAP32[$10 + 4 >> 2];
      $5 = $3 + 48 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $13;
      $10 = $7 + 56 | 0;
      $13 = HEAP32[$10 + 4 >> 2];
      $5 = $3 + 56 | 0;
      HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$5 + 4 >> 2] = $13;
      $7 = $7 + 32 | 0;
      $5 = HEAP32[$7 + 4 >> 2];
      $3 = $3 + 32 | 0;
      HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$3 + 4 >> 2] = $5;
      $2 = $2 - -64 | 0;
      $4 = $4 + 2 | 0;
      if (($9 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$12) {
     break label$21
    }
    $3 = $4 << 5;
    $2 = $3 + $11 | 0;
    $3 = $3 + HEAP32[$0 + 144 >> 2] | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    $7 = $3 + 24 | 0;
    $12 = HEAP32[$7 + 4 >> 2];
    $4 = $2 + 24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $12;
    $7 = $3 + 16 | 0;
    $12 = HEAP32[$7 + 4 >> 2];
    $4 = $2 + 16 | 0;
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$4 + 4 >> 2] = $12;
    $3 = $3 + 8 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
   }
   $2 = HEAP32[$0 + 144 >> 2];
   if (!(!$2 | !HEAPU8[$0 + 148 | 0])) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 144 >> 2] = $11;
   HEAP8[$0 + 148 | 0] = 1;
   HEAP32[$0 + 140 >> 2] = $8;
   $3 = HEAP32[$0 + 136 >> 2];
  }
  $2 = HEAP32[$0 + 144 >> 2] + ($3 << 5) | 0;
  $3 = HEAP32[$6 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $4 = $6 + 24 | 0;
  $11 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $11;
  $4 = $6 + 16 | 0;
  $11 = HEAP32[$4 + 4 >> 2];
  $3 = $2 + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $11;
  $3 = $6 + 8 | 0;
  $6 = HEAP32[$3 + 4 >> 2];
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  HEAP32[$0 + 136 >> 2] = HEAP32[$0 + 136 >> 2] + 1;
  $6 = HEAP32[$0 + 156 >> 2];
  label$25 : {
   if (($6 | 0) != HEAP32[$0 + 160 >> 2]) {
    break label$25
   }
   $12 = $6 ? $6 << 1 : 1;
   if (($12 | 0) <= ($6 | 0)) {
    break label$25
   }
   label$26 : {
    if (!$12) {
     $8 = 0;
     break label$26;
    }
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 3);
    $6 = HEAP32[$0 + 156 >> 2];
   }
   $7 = HEAP32[$0 + 164 >> 2];
   label$28 : {
    label$29 : {
     if (($6 | 0) > 0) {
      $4 = $6 & 3;
      $11 = 0;
      if ($6 - 1 >>> 0 >= 3) {
       $5 = $6 & -4;
       $3 = 0;
       while (1) {
        $2 = $3 + $8 | 0;
        $9 = $3 + $7 | 0;
        HEAPF64[$2 >> 3] = HEAPF64[$9 >> 3];
        HEAPF64[$2 + 8 >> 3] = HEAPF64[$9 + 8 >> 3];
        HEAPF64[$2 + 16 >> 3] = HEAPF64[$9 + 16 >> 3];
        HEAPF64[$2 + 24 >> 3] = HEAPF64[$9 + 24 >> 3];
        $3 = $3 + 32 | 0;
        $11 = $11 + 4 | 0;
        if (($5 | 0) != ($11 | 0)) {
         continue
        }
        break;
       };
      }
      if ($4) {
       $2 = $11 << 3;
       $3 = $2 + $8 | 0;
       $2 = $2 + $7 | 0;
       while (1) {
        HEAPF64[$3 >> 3] = HEAPF64[$2 >> 3];
        $3 = $3 + 8 | 0;
        $2 = $2 + 8 | 0;
        $4 = $4 - 1 | 0;
        if ($4) {
         continue
        }
        break;
       };
      }
      if (HEAPU8[$0 + 168 | 0]) {
       break label$29
      }
      break label$28;
     }
     if (!$7 | !HEAPU8[$0 + 168 | 0]) {
      break label$28
     }
    }
    btAlignedFreeInternal_28void__29($7);
    $6 = HEAP32[$0 + 156 >> 2];
   }
   HEAP32[$0 + 164 >> 2] = $8;
   HEAP32[$0 + 160 >> 2] = $12;
   HEAP8[$0 + 168 | 0] = 1;
  }
  HEAPF64[HEAP32[$0 + 164 >> 2] + ($6 << 3) >> 3] = HEAPF64[$1 + 72 >> 3];
  HEAP32[$0 + 156 >> 2] = $6 + 1;
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function btIDebugDraw__getDefaultColors_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 1072693248;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 1072693248;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = 1072693248;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 1072693248;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 104 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 80 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 144 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 168 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
  HEAP32[$0 + 164 >> 2] = 1072693248;
  $1 = $0 + 176 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 184 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 192 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 1072693248;
  $1 = $0 + 200 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1072693248;
  $1 = $0 + 208 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = $0 + 216 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function LayaDebugDraw__drawLine_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0.0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $4 = HEAPF64[$3 >> 3] * 255.0;
  label$1 : {
   if (Math_abs($4) < 2147483648.0) {
    $0 = ~~$4;
    break label$1;
   }
   $0 = -2147483648;
  }
  $0 = $0 << 16;
  $4 = HEAPF64[$3 + 8 >> 3] * 255.0;
  label$3 : {
   if (Math_abs($4) < 2147483648.0) {
    $5 = ~~$4;
    break label$3;
   }
   $5 = -2147483648;
  }
  $0 = $0 + ($5 << 8) | 0;
  $6 = Math_fround(HEAPF64[$1 >> 3]);
  $7 = Math_fround(HEAPF64[$1 + 8 >> 3]);
  $8 = Math_fround(HEAPF64[$1 + 16 >> 3]);
  $9 = Math_fround(HEAPF64[$2 >> 3]);
  $10 = Math_fround(HEAPF64[$2 + 8 >> 3]);
  $11 = Math_fround(HEAPF64[$2 + 16 >> 3]);
  $4 = HEAPF64[$3 + 16 >> 3] * 255.0;
  label$5 : {
   if (Math_abs($4) < 2147483648.0) {
    $1 = ~~$4;
    break label$5;
   }
   $1 = -2147483648;
  }
  layaDrawline(Math_fround($6), Math_fround($7), Math_fround($8), Math_fround($9), Math_fround($10), Math_fround($11), $1 + $0 | 0);
 }
 
 function btIDebugDraw__drawLine_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3);
 }
 
 function btIDebugDraw__drawSphere_28double_2c_20btTransform_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  $6 = $2 + 120 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 120 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $2 + 112 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 112 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $6 = $2 + 104 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $5 = $4 + 104 | 0;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $5 = HEAP32[$2 + 100 >> 2];
  HEAP32[$4 + 96 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$4 + 100 >> 2] = $5;
  HEAP32[$4 + 88 >> 2] = 0;
  HEAP32[$4 + 92 >> 2] = 0;
  HEAPF64[$4 + 64 >> 3] = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$4 + 72 >> 3] = HEAPF64[$2 + 40 >> 3];
  HEAPF64[$4 + 80 >> 3] = HEAPF64[$2 + 72 >> 3];
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 32 >> 3] = HEAPF64[$2 >> 3];
  HEAPF64[$4 + 40 >> 3] = HEAPF64[$2 + 32 >> 3];
  HEAPF64[$4 + 48 >> 3] = HEAPF64[$2 + 64 >> 3];
  $2 = $4 + 96 | 0;
  $5 = $4 - -64 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $2, $5, $4 + 32 | 0, $1, -1.5707963267948966, 1.5707963267948966, -1.5707963267948966, 1.5707963267948966, $3, 30.0, 0);
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = -HEAPF64[$4 + 48 >> 3];
  HEAPF64[$4 + 8 >> 3] = -HEAPF64[$4 + 40 >> 3];
  HEAPF64[$4 >> 3] = -HEAPF64[$4 + 32 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $2, $5, $4, $1, -1.5707963267948966, 1.5707963267948966, -1.5707963267948966, 1.5707963267948966, $3, 30.0, 0);
  __stack_pointer = $4 + 128 | 0;
 }
 
 function btIDebugDraw__drawSphere_28btVector3_20const__2c_20double_2c_20btVector3_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  $4 = $5 + 16 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 24 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 32 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 48 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 40 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 1072693248;
  $4 = $5 + 56 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 - -64 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 72 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 88 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 80 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 1072693248;
  $6 = $1 + 24 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 120 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $1 + 16 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 112 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  $6 = $1 + 8 | 0;
  $7 = HEAP32[$6 + 4 >> 2];
  $4 = $5 + 104 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 + 4 >> 2] = $7;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 1072693248;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$5 + 96 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 100 >> 2] = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2, $5, $3);
  __stack_pointer = $5 + 128 | 0;
 }
 
 function btIDebugDraw__drawTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = +$8;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $3, $7, $8);
 }
 
 function btIDebugDraw__drawTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $4);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2, $3, $4);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $3, $1, $4);
 }
 
 function LayaDebugDraw__drawContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20int_2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 48 >> 3] = HEAPF64[$1 + 16 >> 3] + 0.0;
  HEAPF64[$4 + 40 >> 3] = HEAPF64[$1 + 8 >> 3] + 0.0;
  HEAPF64[$4 + 32 >> 3] = HEAPF64[$1 >> 3] + .1;
  $6 = $4 + 16 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $4 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 1072693248;
  $6 = $4 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $6, $4);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 48 >> 3] = HEAPF64[$1 + 16 >> 3] + HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 40 >> 3] = HEAPF64[$1 + 8 >> 3] + HEAPF64[$2 + 8 >> 3];
  HEAPF64[$4 + 32 >> 3] = HEAPF64[$1 >> 3] + HEAPF64[$2 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $6, $5);
  __stack_pointer = $4 - -64 | 0;
 }
 
 function btIDebugDraw__drawAabb_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  $6 = HEAPF64[$2 + 16 >> 3];
  $5 = HEAPF64[$1 + 16 >> 3];
  $11 = ($6 + $5) * .5;
  $7 = HEAPF64[$2 + 8 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $12 = ($7 + $8) * .5;
  $10 = HEAPF64[$2 >> 3];
  $9 = HEAPF64[$1 >> 3];
  $13 = ($10 + $9) * .5;
  $15 = ($6 - $5) * .5;
  $16 = ($7 - $8) * .5;
  $10 = ($10 - $9) * .5;
  $2 = 0;
  $6 = 1.0;
  $5 = 1.0;
  $7 = 1.0;
  while (1) {
   label$1 : {
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    $9 = $15 * $6;
    $6 = $11 + $9;
    HEAPF64[$4 + 48 >> 3] = $6;
    HEAPF64[$4 + 16 >> 3] = $6;
    $14 = $16 * $5;
    $8 = $12 + $14;
    HEAPF64[$4 + 40 >> 3] = $8;
    $5 = $10 * $7;
    HEAPF64[$4 + 32 >> 3] = $13 + $5;
    HEAPF64[$4 + 8 >> 3] = $8;
    $5 = $13 - $5;
    HEAPF64[$4 >> 3] = $5;
    $1 = $4 + 32 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $4, $3);
    HEAPF64[$4 + 48 >> 3] = $6;
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    HEAPF64[$4 + 16 >> 3] = $6;
    HEAPF64[$4 + 40 >> 3] = $8;
    HEAPF64[$4 + 32 >> 3] = $5;
    $7 = $12 - $14;
    HEAPF64[$4 + 8 >> 3] = $7;
    HEAPF64[$4 >> 3] = $5;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $4, $3);
    HEAPF64[$4 + 48 >> 3] = $6;
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    HEAPF64[$4 + 16 >> 3] = $11 - $9;
    HEAPF64[$4 + 40 >> 3] = $7;
    HEAPF64[$4 + 32 >> 3] = $5;
    HEAPF64[$4 + 8 >> 3] = $7;
    HEAPF64[$4 >> 3] = $5;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $4, $3);
    HEAP32[$4 + 88 >> 2] = 0;
    HEAP32[$4 + 92 >> 2] = 0;
    HEAP32[$4 + 80 >> 2] = 0;
    HEAP32[$4 + 84 >> 2] = -1074790400;
    HEAP32[$4 + 72 >> 2] = 0;
    HEAP32[$4 + 76 >> 2] = -1074790400;
    HEAP32[$4 + 64 >> 2] = 0;
    HEAP32[$4 + 68 >> 2] = -1074790400;
    label$3 : {
     if ($2 >>> 0 <= 2) {
      $1 = ($4 - -64 | 0) + ($2 << 3) | 0;
      HEAPF64[$1 >> 3] = -HEAPF64[$1 >> 3];
      $2 = $2 + 1 | 0;
      break label$3;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) == 4) {
      break label$1
     }
    }
    $6 = HEAPF64[$4 + 80 >> 3];
    $5 = HEAPF64[$4 + 72 >> 3];
    $7 = HEAPF64[$4 + 64 >> 3];
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 96 | 0;
 }
 
 function btIDebugDraw__drawTransform_28btTransform_20const__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  $5 = $1 + 120 | 0;
  $4 = HEAP32[$5 + 4 >> 2];
  $6 = $3 + 88 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $4;
  $5 = $1 + 112 | 0;
  $4 = HEAP32[$5 + 4 >> 2];
  $6 = $3 + 80 | 0;
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $4;
  $4 = $1 + 104 | 0;
  $7 = HEAP32[$4 + 4 >> 2];
  $5 = $3 + 72 | 0;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $4 = HEAP32[$1 + 100 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$3 + 68 >> 2] = $4;
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  $4 = $1 + 80 | 0;
  $7 = $1 + 72 | 0;
  HEAPF64[$3 + 48 >> 3] = HEAPF64[$4 >> 3] * 0.0 + (HEAPF64[$1 + 64 >> 3] * $2 + HEAPF64[$7 >> 3] * 0.0) + HEAPF64[$6 >> 3];
  $8 = $1 + 48 | 0;
  $9 = $1 + 40 | 0;
  HEAPF64[$3 + 40 >> 3] = HEAPF64[$8 >> 3] * 0.0 + (HEAPF64[$1 + 32 >> 3] * $2 + HEAPF64[$9 >> 3] * 0.0) + HEAPF64[$5 >> 3];
  HEAPF64[$3 + 32 >> 3] = HEAPF64[$1 + 16 >> 3] * 0.0 + (HEAPF64[$1 >> 3] * $2 + HEAPF64[$1 + 8 >> 3] * 0.0) + HEAPF64[$3 + 64 >> 3];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 858993459;
  HEAP32[$3 + 20 >> 2] = 1070805811;
  HEAP32[$3 + 8 >> 2] = 858993459;
  HEAP32[$3 + 12 >> 2] = 1070805811;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $10 = $3 - -64 | 0;
  $11 = $3 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $10, $11, $3);
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAPF64[$3 + 48 >> 3] = HEAPF64[$4 >> 3] * 0.0 + (HEAPF64[$1 + 64 >> 3] * 0.0 + HEAPF64[$7 >> 3] * $2) + HEAPF64[$6 >> 3];
  HEAPF64[$3 + 40 >> 3] = HEAPF64[$8 >> 3] * 0.0 + (HEAPF64[$1 + 32 >> 3] * 0.0 + HEAPF64[$9 >> 3] * $2) + HEAPF64[$5 >> 3];
  HEAPF64[$3 + 32 >> 3] = HEAPF64[$1 + 16 >> 3] * 0.0 + (HEAPF64[$1 >> 3] * 0.0 + HEAPF64[$1 + 8 >> 3] * $2) + HEAPF64[$3 + 64 >> 3];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 858993459;
  HEAP32[$3 + 20 >> 2] = 1070805811;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 1072693248;
  HEAP32[$3 >> 2] = 858993459;
  HEAP32[$3 + 4 >> 2] = 1070805811;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $10, $11, $3);
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAPF64[$3 + 48 >> 3] = HEAPF64[$4 >> 3] * $2 + (HEAPF64[$1 + 64 >> 3] * 0.0 + HEAPF64[$7 >> 3] * 0.0) + HEAPF64[$6 >> 3];
  HEAPF64[$3 + 40 >> 3] = HEAPF64[$8 >> 3] * $2 + (HEAPF64[$1 + 32 >> 3] * 0.0 + HEAPF64[$9 >> 3] * 0.0) + HEAPF64[$5 >> 3];
  HEAPF64[$3 + 32 >> 3] = HEAPF64[$1 + 16 >> 3] * $2 + (HEAPF64[$1 >> 3] * 0.0 + HEAPF64[$1 + 8 >> 3] * 0.0) + HEAPF64[$3 + 64 >> 3];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 1072693248;
  HEAP32[$3 + 8 >> 2] = 858993459;
  HEAP32[$3 + 12 >> 2] = 1070805811;
  HEAP32[$3 >> 2] = 858993459;
  HEAP32[$3 + 4 >> 2] = 1070805811;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $10, $11, $3);
  __stack_pointer = $3 + 96 | 0;
 }
 
 function btIDebugDraw__drawArc_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20double_2c_20double_2c_20double_2c_20btVector3_20const__2c_20bool_2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  $7 = +$7;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = +$10;
  var $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0;
  $11 = __stack_pointer + -64 | 0;
  __stack_pointer = $11;
  $18 = HEAPF64[$2 + 16 >> 3];
  $13 = HEAPF64[$3 + 16 >> 3];
  $15 = HEAPF64[$2 >> 3];
  $14 = HEAPF64[$3 + 8 >> 3];
  $16 = HEAPF64[$3 >> 3];
  $25 = HEAPF64[$2 + 8 >> 3];
  HEAP32[$11 + 56 >> 2] = 0;
  HEAP32[$11 + 60 >> 2] = 0;
  $21 = sin($6);
  $26 = ($15 * $14 - $16 * $25) * $5;
  $22 = cos($6);
  HEAPF64[$11 + 48 >> 3] = $21 * $26 + ($22 * ($13 * $4) + HEAPF64[$1 + 16 >> 3]);
  $15 = ($18 * $16 - $13 * $15) * $5;
  HEAPF64[$11 + 40 >> 3] = $22 * ($14 * $4) + HEAPF64[$1 + 8 >> 3] + $21 * $15;
  $13 = ($25 * $13 - $14 * $18) * $5;
  HEAPF64[$11 + 32 >> 3] = $21 * $13 + ($22 * ($16 * $4) + HEAPF64[$1 >> 3]);
  $14 = $7 - $6;
  $5 = Math_abs($14 / ($10 * .017453292519943295));
  label$1 : {
   if (Math_abs($5) < 2147483648.0) {
    $2 = ~~$5;
    break label$1;
   }
   $2 = -2147483648;
  }
  $23 = $2 ? $2 : 1;
  if ($9) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $11 + 32 | 0, $8)
  }
  if (($23 | 0) > 0) {
   $10 = +($23 | 0);
   $2 = 0;
   while (1) {
    $12 = $11 + 24 | 0;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$12 + 4 >> 2] = 0;
    $16 = HEAPF64[$3 + 16 >> 3];
    $2 = $2 + 1 | 0;
    $7 = $14 * +($2 | 0) / $10 + $6;
    $5 = cos($7);
    $18 = HEAPF64[$1 + 16 >> 3];
    $17 = $11 + 16 | 0;
    $7 = sin($7);
    HEAPF64[$17 >> 3] = $26 * $7 + ($18 + $5 * ($16 * $4));
    $24 = $11 + 8 | 0;
    HEAPF64[$24 >> 3] = $15 * $7 + ($5 * (HEAPF64[$3 + 8 >> 3] * $4) + HEAPF64[$1 + 8 >> 3]);
    HEAPF64[$11 >> 3] = $13 * $7 + ($5 * (HEAPF64[$3 >> 3] * $4) + HEAPF64[$1 >> 3]);
    $19 = $11 + 32 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $19, $11, $8);
    $27 = HEAP32[$12 + 4 >> 2];
    $20 = $19 + 24 | 0;
    HEAP32[$20 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$20 + 4 >> 2] = $27;
    $20 = HEAP32[$17 + 4 >> 2];
    $12 = $19 + 16 | 0;
    HEAP32[$12 >> 2] = HEAP32[$17 >> 2];
    HEAP32[$12 + 4 >> 2] = $20;
    $17 = HEAP32[$24 + 4 >> 2];
    $12 = $19 + 8 | 0;
    HEAP32[$12 >> 2] = HEAP32[$24 >> 2];
    HEAP32[$12 + 4 >> 2] = $17;
    $12 = HEAP32[$11 + 4 >> 2];
    HEAP32[$11 + 32 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$11 + 36 >> 2] = $12;
    if (($2 | 0) != ($23 | 0)) {
     continue
    }
    break;
   };
  }
  if ($9) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $11 + 32 | 0, $8)
  }
  __stack_pointer = $11 - -64 | 0;
 }
 
 function btIDebugDraw__drawSpherePatch_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20btVector3_20const__2c_20double_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  $7 = +$7;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
  $12 = __stack_pointer - 4832 | 0;
  __stack_pointer = $12;
  HEAP32[$12 + 88 >> 2] = 0;
  HEAP32[$12 + 92 >> 2] = 0;
  $24 = HEAPF64[$2 + 16 >> 3];
  $22 = $24 * $4;
  $29 = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$12 + 80 >> 3] = $22 + $29;
  $25 = HEAPF64[$2 + 8 >> 3];
  $15 = $25 * $4;
  $30 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$12 + 72 >> 3] = $15 + $30;
  $26 = HEAPF64[$2 >> 3];
  $18 = $26 * $4;
  $31 = HEAPF64[$1 >> 3];
  HEAPF64[$12 + 64 >> 3] = $18 + $31;
  HEAP32[$12 + 56 >> 2] = 0;
  HEAP32[$12 + 60 >> 2] = 0;
  HEAPF64[$12 + 48 >> 3] = $29 - $22;
  HEAPF64[$12 + 40 >> 3] = $30 - $15;
  HEAPF64[$12 + 32 >> 3] = $31 - $18;
  $18 = $10 * .017453292519943295;
  $15 = $18 + -1.5707963267948966;
  $35 = $5 <= -1.5707963267948966;
  $10 = $35 ? $15 : $5;
  $5 = 1.5707963267948966 - $18;
  $34 = $6 >= 1.5707963267948966;
  $22 = $34 ? $5 : $6;
  if ($22 < $10) {
   $34 = 1;
   $35 = 1;
   $22 = $5;
   $10 = $15;
  }
  $6 = HEAPF64[$3 >> 3];
  $15 = HEAPF64[$3 + 8 >> 3];
  $5 = HEAPF64[$3 + 16 >> 3];
  $13 = $7 > $8;
  $36 = $13 ? $18 + -3.141592653589793 : $7;
  $19 = ($13 ? 3.141592653589793 : $8) - $36;
  $21 = $19 / $18;
  label$2 : {
   if (Math_abs($21) < 2147483648.0) {
    $23 = ~~$21;
    break label$2;
   }
   $23 = -2147483648;
  }
  $21 = $6 * $25;
  $37 = $26 * $15;
  $38 = $5 * $26;
  $39 = $24 * $6;
  $27 = $15 * $24;
  $32 = $25 * $5;
  $40 = ($23 | 0) > 1 ? $23 : 1;
  $42 = $19 / +($40 | 0);
  $19 = $42 * 0.0 + $36;
  $43 = $13 | $8 - $7 >= 6.283185307179586;
  $14 = $11 ^ 1;
  $7 = $22 - $10;
  $8 = $7 / $18;
  label$4 : {
   if (Math_abs($8) < 2147483648.0) {
    $13 = ~~$8;
    break label$4;
   }
   $13 = -2147483648;
  }
  $8 = $37 - $21;
  $22 = $39 - $38;
  $18 = $32 - $27;
  $44 = $40 - 1 | 0;
  $49 = $14 | $43;
  $45 = ($13 | 0) > 1 ? $13 : 1;
  $37 = $7 / +($45 | 0);
  $13 = $12 + 2464 | 0;
  $14 = $12 + 96 | 0;
  $38 = cos($19);
  $39 = sin($19);
  while (1) {
   HEAP32[$14 + 24 >> 2] = 0;
   HEAP32[$14 + 28 >> 2] = 0;
   $27 = +($28 | 0) * $37 + $10;
   $7 = cos($27) * $4;
   $19 = $7 * $39;
   $21 = $7 * $38;
   $32 = $8 * $19 + ($21 * $5 + $29);
   $5 = sin($27) * $4;
   HEAPF64[$14 + 16 >> 3] = $32 + $5 * $24;
   HEAPF64[$14 + 8 >> 3] = $22 * $19 + ($21 * $15 + $30) + $5 * $25;
   HEAPF64[$14 >> 3] = $18 * $19 + ($21 * $6 + $31) + $5 * $26;
   $16 = !$28;
   $41 = ($28 | 0) == ($45 | 0);
   $46 = $41 & $35;
   if ($34 | $28) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $28 ? $13 : $12 + 32 | 0, $14, $9)
   }
   $47 = $16 | $41;
   $17 = $14 + 24 | 0;
   $20 = HEAP32[$17 + 4 >> 2];
   $16 = $12 + 24 | 0;
   HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
   HEAP32[$16 + 4 >> 2] = $20;
   $17 = $14 + 16 | 0;
   $20 = HEAP32[$17 + 4 >> 2];
   $16 = $12 + 16 | 0;
   HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
   HEAP32[$16 + 4 >> 2] = $20;
   $17 = $14 + 8 | 0;
   $20 = HEAP32[$17 + 4 >> 2];
   $16 = $12 + 8 | 0;
   HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
   HEAP32[$16 + 4 >> 2] = $20;
   $16 = HEAP32[$14 + 4 >> 2];
   HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$12 + 4 >> 2] = $16;
   if ($46) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $12 - -64 | 0, $14, $9)
   }
   if (!($47 ^ 1 | $49)) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $14, $9)
   }
   $16 = $13;
   $50 = $13 + 32 | 0;
   $23 = 0;
   $17 = 0;
   while (1) {
    $24 = HEAPF64[$2 >> 3];
    $25 = HEAPF64[$1 >> 3];
    $26 = HEAPF64[$3 >> 3];
    $29 = HEAPF64[$2 + 8 >> 3];
    $30 = HEAPF64[$1 + 8 >> 3];
    $31 = HEAPF64[$3 + 8 >> 3];
    $19 = HEAPF64[$2 + 16 >> 3];
    $15 = HEAPF64[$1 + 16 >> 3];
    $21 = HEAPF64[$3 + 16 >> 3];
    $13 = $14 + $23 | 0;
    $20 = $13 + 56 | 0;
    HEAP32[$20 >> 2] = 0;
    HEAP32[$20 + 4 >> 2] = 0;
    $20 = $17;
    $17 = $17 + 1 | 0;
    $27 = +($17 | 0) * $42 + $36;
    $6 = $7 * sin($27);
    $32 = $15;
    $15 = $7 * cos($27);
    HEAPF64[$13 + 48 >> 3] = $8 * $6 + ($32 + $21 * $15) + $5 * $19;
    HEAPF64[$13 + 40 >> 3] = $22 * $6 + ($30 + $15 * $31) + $5 * $29;
    $33 = $13 + 32 | 0;
    HEAPF64[$33 >> 3] = $18 * $6 + ($25 + $15 * $26) + $5 * $24;
    label$11 : {
     label$12 : {
      if ($28) {
       $48 = $23 + $50 | 0;
       break label$12;
      }
      $48 = $12 + 32 | 0;
      if (!$34) {
       break label$11
      }
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $48, $33, $9);
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $13, $33, $9);
    if ($46) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $12 - -64 | 0, $33, $9)
    }
    label$15 : {
     if (!$11) {
      break label$15
     }
     label$16 : {
      if ($43) {
       $13 = $12;
       if (($20 | 0) == ($44 | 0)) {
        break label$16
       }
       break label$15;
      }
      $13 = $1;
      if (!(($20 | 0) == ($44 | 0) & $47)) {
       break label$15
      }
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $13, $33, $9);
    }
    $23 = $23 + 32 | 0;
    if (($17 | 0) != ($40 | 0)) {
     continue
    }
    break;
   };
   if (!$41) {
    $28 = $28 + 1 | 0;
    $24 = HEAPF64[$2 + 16 >> 3];
    $25 = HEAPF64[$2 + 8 >> 3];
    $26 = HEAPF64[$2 >> 3];
    $29 = HEAPF64[$1 + 16 >> 3];
    $30 = HEAPF64[$1 + 8 >> 3];
    $31 = HEAPF64[$1 >> 3];
    $5 = HEAPF64[$3 + 16 >> 3];
    $15 = HEAPF64[$3 + 8 >> 3];
    $6 = HEAPF64[$3 >> 3];
    $13 = $14;
    $14 = $16;
    continue;
   }
   break;
  };
  __stack_pointer = $12 + 4832 | 0;
 }
 
 function btIDebugDraw__drawBox_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 32 >> 3] = HEAPF64[$1 >> 3];
  $5 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $5;
  $6 = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 + 8 >> 3] = $5;
  HEAPF64[$4 >> 3] = HEAPF64[$2 >> 3];
  $7 = $4 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$2 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  HEAPF64[$4 + 40 >> 3] = HEAPF64[$1 + 8 >> 3];
  $6 = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  HEAPF64[$4 + 8 >> 3] = HEAPF64[$2 + 8 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 32 >> 3] = HEAPF64[$2 >> 3];
  $5 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $5;
  $6 = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 + 8 >> 3] = $5;
  HEAPF64[$4 >> 3] = HEAPF64[$1 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$1 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  HEAPF64[$4 + 40 >> 3] = HEAPF64[$2 + 8 >> 3];
  $6 = HEAPF64[$1 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  HEAPF64[$4 + 8 >> 3] = HEAPF64[$1 + 8 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$1 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  $6 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $6;
  HEAPF64[$4 + 48 >> 3] = HEAPF64[$1 + 16 >> 3];
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 8 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$2 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  $6 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $6;
  HEAPF64[$4 + 48 >> 3] = HEAPF64[$1 + 16 >> 3];
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 8 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$2 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  $6 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $6;
  HEAPF64[$4 + 48 >> 3] = HEAPF64[$1 + 16 >> 3];
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 8 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$1 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  $6 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $6;
  HEAPF64[$4 + 48 >> 3] = HEAPF64[$1 + 16 >> 3];
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 8 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 32 >> 3] = HEAPF64[$1 >> 3];
  $5 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $5;
  $6 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 + 8 >> 3] = $5;
  HEAPF64[$4 >> 3] = HEAPF64[$2 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$2 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  HEAPF64[$4 + 40 >> 3] = HEAPF64[$1 + 8 >> 3];
  $6 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  HEAPF64[$4 + 8 >> 3] = HEAPF64[$2 + 8 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF64[$4 + 32 >> 3] = HEAPF64[$2 >> 3];
  $5 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$4 + 40 >> 3] = $5;
  $6 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 + 8 >> 3] = $5;
  HEAPF64[$4 >> 3] = HEAPF64[$1 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  $5 = HEAPF64[$1 >> 3];
  HEAPF64[$4 + 32 >> 3] = $5;
  HEAPF64[$4 + 40 >> 3] = HEAPF64[$2 + 8 >> 3];
  $6 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$4 + 48 >> 3] = $6;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF64[$4 + 16 >> 3] = $6;
  HEAPF64[$4 >> 3] = $5;
  HEAPF64[$4 + 8 >> 3] = HEAPF64[$1 + 8 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7, $4, $3);
  __stack_pointer = $4 - -64 | 0;
 }
 
 function btIDebugDraw__drawBox_28btVector3_20const__2c_20btVector3_20const__2c_20btTransform_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $16 = $6 * HEAPF64[$3 + 16 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $17 = HEAPF64[$3 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $18 = $8 * HEAPF64[$3 + 8 >> 3];
  $9 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $16 + ($7 * $17 + $18) + $9;
  $19 = $3 + 80 | 0;
  $13 = $6 * HEAPF64[$19 >> 3];
  $10 = HEAPF64[$3 + 64 >> 3];
  $20 = $3 + 72 | 0;
  $14 = $8 * HEAPF64[$20 >> 3];
  $21 = $3 + 112 | 0;
  $12 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $13 + ($7 * $10 + $14) + $12;
  $22 = $3 + 48 | 0;
  $15 = $6 * HEAPF64[$22 >> 3];
  $6 = HEAPF64[$3 + 32 >> 3];
  $11 = $7 * $6;
  $23 = $3 + 40 | 0;
  $7 = $8 * HEAPF64[$23 >> 3];
  $24 = $3 + 104 | 0;
  $8 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $15 + ($11 + $7) + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $12;
  $12 = HEAPF64[$2 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($13 + ($10 * $12 + $14));
  HEAPF64[$5 + 8 >> 3] = $8 + ($15 + ($12 * $6 + $7));
  HEAPF64[$5 >> 3] = $9 + ($16 + ($12 * $17 + $18));
  $25 = $5 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $16 = $6 * HEAPF64[$19 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $17 = $7 * HEAPF64[$3 + 64 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $18 = HEAPF64[$20 >> 3];
  $9 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $16 + ($17 + $8 * $18) + $9;
  $13 = $6 * HEAPF64[$22 >> 3];
  $10 = $7 * HEAPF64[$3 + 32 >> 3];
  $14 = HEAPF64[$23 >> 3];
  $12 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $13 + ($10 + $8 * $14) + $12;
  $15 = $6 * HEAPF64[$3 + 16 >> 3];
  $6 = $7 * HEAPF64[$3 >> 3];
  $7 = HEAPF64[$3 + 8 >> 3];
  $11 = $15 + ($6 + $8 * $7);
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $9;
  $9 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($16 + ($17 + $18 * $9));
  HEAPF64[$5 + 8 >> 3] = $12 + ($13 + ($10 + $14 * $9));
  HEAPF64[$5 >> 3] = $8 + ($15 + ($6 + $7 * $9));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $16 = $6 * HEAPF64[$19 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $17 = HEAPF64[$3 + 64 >> 3];
  $8 = HEAPF64[$2 + 8 >> 3];
  $18 = $8 * HEAPF64[$20 >> 3];
  $9 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $16 + ($7 * $17 + $18) + $9;
  $13 = $6 * HEAPF64[$22 >> 3];
  $10 = HEAPF64[$3 + 32 >> 3];
  $14 = $8 * HEAPF64[$23 >> 3];
  $12 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $13 + ($7 * $10 + $14) + $12;
  $15 = $6 * HEAPF64[$3 + 16 >> 3];
  $6 = HEAPF64[$3 >> 3];
  $11 = $7 * $6;
  $7 = $8 * HEAPF64[$3 + 8 >> 3];
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $15 + ($11 + $7) + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $9;
  $9 = HEAPF64[$1 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($16 + ($17 * $9 + $18));
  HEAPF64[$5 + 8 >> 3] = $12 + ($13 + ($9 * $10 + $14));
  HEAPF64[$5 >> 3] = $8 + ($15 + ($9 * $6 + $7));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $16 = $6 * HEAPF64[$19 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $17 = $7 * HEAPF64[$3 + 64 >> 3];
  $8 = HEAPF64[$2 + 8 >> 3];
  $18 = HEAPF64[$20 >> 3];
  $9 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $16 + ($17 + $8 * $18) + $9;
  $13 = $6 * HEAPF64[$22 >> 3];
  $10 = $7 * HEAPF64[$3 + 32 >> 3];
  $14 = HEAPF64[$23 >> 3];
  $12 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $13 + ($10 + $8 * $14) + $12;
  $15 = $6 * HEAPF64[$3 + 16 >> 3];
  $6 = $7 * HEAPF64[$3 >> 3];
  $7 = HEAPF64[$3 + 8 >> 3];
  $11 = $15 + ($6 + $8 * $7);
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $9;
  $9 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($16 + ($17 + $18 * $9));
  HEAPF64[$5 + 8 >> 3] = $12 + ($13 + ($10 + $14 * $9));
  HEAPF64[$5 >> 3] = $8 + ($15 + ($6 + $7 * $9));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $9 = HEAPF64[$19 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $13 = $7 * HEAPF64[$3 + 64 >> 3] + $8 * HEAPF64[$20 >> 3];
  $10 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $6 * $9 + $13 + $10;
  $14 = HEAPF64[$22 >> 3];
  $12 = $7 * HEAPF64[$3 + 32 >> 3] + $8 * HEAPF64[$23 >> 3];
  $15 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $6 * $14 + $12 + $15;
  $11 = $6;
  $6 = HEAPF64[$3 + 16 >> 3];
  $7 = $7 * HEAPF64[$3 >> 3] + $8 * HEAPF64[$3 + 8 >> 3];
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 * $6 + $7 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $10;
  $10 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($9 * $10 + $13);
  HEAPF64[$5 + 8 >> 3] = $15 + ($10 * $14 + $12);
  HEAPF64[$5 >> 3] = $8 + ($10 * $6 + $7);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $9 = HEAPF64[$19 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $13 = $7 * HEAPF64[$3 + 64 >> 3] + $8 * HEAPF64[$20 >> 3];
  $10 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $6 * $9 + $13 + $10;
  $14 = HEAPF64[$22 >> 3];
  $12 = $7 * HEAPF64[$3 + 32 >> 3] + $8 * HEAPF64[$23 >> 3];
  $15 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $6 * $14 + $12 + $15;
  $11 = $6;
  $6 = HEAPF64[$3 + 16 >> 3];
  $7 = $7 * HEAPF64[$3 >> 3] + $8 * HEAPF64[$3 + 8 >> 3];
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 * $6 + $7 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $10;
  $10 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($9 * $10 + $13);
  HEAPF64[$5 + 8 >> 3] = $15 + ($10 * $14 + $12);
  HEAPF64[$5 >> 3] = $8 + ($10 * $6 + $7);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $9 = HEAPF64[$19 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $8 = HEAPF64[$2 + 8 >> 3];
  $13 = $7 * HEAPF64[$3 + 64 >> 3] + $8 * HEAPF64[$20 >> 3];
  $10 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $6 * $9 + $13 + $10;
  $14 = HEAPF64[$22 >> 3];
  $12 = $7 * HEAPF64[$3 + 32 >> 3] + $8 * HEAPF64[$23 >> 3];
  $15 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $6 * $14 + $12 + $15;
  $11 = $6;
  $6 = HEAPF64[$3 + 16 >> 3];
  $7 = $7 * HEAPF64[$3 >> 3] + $8 * HEAPF64[$3 + 8 >> 3];
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 * $6 + $7 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $10;
  $10 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($9 * $10 + $13);
  HEAPF64[$5 + 8 >> 3] = $15 + ($10 * $14 + $12);
  HEAPF64[$5 >> 3] = $8 + ($10 * $6 + $7);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$1 + 16 >> 3];
  $9 = HEAPF64[$19 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $8 = HEAPF64[$2 + 8 >> 3];
  $13 = $7 * HEAPF64[$3 + 64 >> 3] + $8 * HEAPF64[$20 >> 3];
  $10 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $6 * $9 + $13 + $10;
  $14 = HEAPF64[$22 >> 3];
  $12 = $7 * HEAPF64[$3 + 32 >> 3] + $8 * HEAPF64[$23 >> 3];
  $15 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $6 * $14 + $12 + $15;
  $11 = $6;
  $6 = HEAPF64[$3 + 16 >> 3];
  $7 = $7 * HEAPF64[$3 >> 3] + $8 * HEAPF64[$3 + 8 >> 3];
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 * $6 + $7 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $10;
  $10 = HEAPF64[$2 + 16 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($9 * $10 + $13);
  HEAPF64[$5 + 8 >> 3] = $15 + ($10 * $14 + $12);
  HEAPF64[$5 >> 3] = $8 + ($10 * $6 + $7);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$2 + 16 >> 3];
  $16 = $6 * HEAPF64[$19 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $17 = HEAPF64[$3 + 64 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $18 = $8 * HEAPF64[$20 >> 3];
  $9 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $16 + ($7 * $17 + $18) + $9;
  $13 = $6 * HEAPF64[$22 >> 3];
  $10 = HEAPF64[$3 + 32 >> 3];
  $14 = $8 * HEAPF64[$23 >> 3];
  $12 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $13 + ($7 * $10 + $14) + $12;
  $15 = $6 * HEAPF64[$3 + 16 >> 3];
  $6 = HEAPF64[$3 >> 3];
  $11 = $7 * $6;
  $7 = $8 * HEAPF64[$3 + 8 >> 3];
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $15 + ($11 + $7) + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $9;
  $9 = HEAPF64[$2 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($16 + ($17 * $9 + $18));
  HEAPF64[$5 + 8 >> 3] = $12 + ($13 + ($9 * $10 + $14));
  HEAPF64[$5 >> 3] = $8 + ($15 + ($9 * $6 + $7));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$2 + 16 >> 3];
  $16 = $6 * HEAPF64[$19 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $17 = $7 * HEAPF64[$3 + 64 >> 3];
  $8 = HEAPF64[$1 + 8 >> 3];
  $18 = HEAPF64[$20 >> 3];
  $9 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $16 + ($17 + $8 * $18) + $9;
  $13 = $6 * HEAPF64[$22 >> 3];
  $10 = $7 * HEAPF64[$3 + 32 >> 3];
  $14 = HEAPF64[$23 >> 3];
  $12 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $13 + ($10 + $8 * $14) + $12;
  $15 = $6 * HEAPF64[$3 + 16 >> 3];
  $6 = $7 * HEAPF64[$3 >> 3];
  $7 = HEAPF64[$3 + 8 >> 3];
  $11 = $15 + ($6 + $8 * $7);
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $9;
  $9 = HEAPF64[$2 + 8 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($16 + ($17 + $18 * $9));
  HEAPF64[$5 + 8 >> 3] = $12 + ($13 + ($10 + $14 * $9));
  HEAPF64[$5 >> 3] = $8 + ($15 + ($6 + $7 * $9));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$2 + 16 >> 3];
  $16 = $6 * HEAPF64[$19 >> 3];
  $7 = HEAPF64[$2 >> 3];
  $17 = HEAPF64[$3 + 64 >> 3];
  $8 = HEAPF64[$2 + 8 >> 3];
  $18 = $8 * HEAPF64[$20 >> 3];
  $9 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $16 + ($7 * $17 + $18) + $9;
  $13 = $6 * HEAPF64[$22 >> 3];
  $10 = HEAPF64[$3 + 32 >> 3];
  $14 = $8 * HEAPF64[$23 >> 3];
  $12 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $13 + ($7 * $10 + $14) + $12;
  $15 = $6 * HEAPF64[$3 + 16 >> 3];
  $6 = HEAPF64[$3 >> 3];
  $11 = $7 * $6;
  $7 = $8 * HEAPF64[$3 + 8 >> 3];
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $15 + ($11 + $7) + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $9;
  $9 = HEAPF64[$1 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($16 + ($17 * $9 + $18));
  HEAPF64[$5 + 8 >> 3] = $12 + ($13 + ($9 * $10 + $14));
  HEAPF64[$5 >> 3] = $8 + ($15 + ($9 * $6 + $7));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $6 = HEAPF64[$2 + 16 >> 3];
  $16 = $6 * HEAPF64[$19 >> 3];
  $7 = HEAPF64[$1 >> 3];
  $17 = $7 * HEAPF64[$3 + 64 >> 3];
  $8 = HEAPF64[$2 + 8 >> 3];
  $18 = HEAPF64[$20 >> 3];
  $9 = HEAPF64[$21 >> 3];
  HEAPF64[$5 + 48 >> 3] = $16 + ($17 + $8 * $18) + $9;
  $13 = $6 * HEAPF64[$22 >> 3];
  $10 = $7 * HEAPF64[$3 + 32 >> 3];
  $14 = HEAPF64[$23 >> 3];
  $12 = HEAPF64[$24 >> 3];
  HEAPF64[$5 + 40 >> 3] = $13 + ($10 + $8 * $14) + $12;
  $15 = $6 * HEAPF64[$3 + 16 >> 3];
  $6 = $7 * HEAPF64[$3 >> 3];
  $7 = HEAPF64[$3 + 8 >> 3];
  $11 = $15 + ($6 + $8 * $7);
  $8 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $11 + $8;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $11 = $9;
  $9 = HEAPF64[$1 + 8 >> 3];
  HEAPF64[$5 + 16 >> 3] = $11 + ($16 + ($17 + $18 * $9));
  HEAPF64[$5 + 8 >> 3] = $12 + ($13 + ($10 + $14 * $9));
  HEAPF64[$5 >> 3] = $8 + ($15 + ($6 + $7 * $9));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $25, $5, $4);
  __stack_pointer = $5 - -64 | 0;
 }
 
 function btIDebugDraw__drawCapsule_28double_2c_20double_2c_20int_2c_20btTransform_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
  $7 = __stack_pointer - 288 | 0;
  __stack_pointer = $7;
  $14 = $7 + 256 | 0;
  $6 = $14 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $22 = $14 + 16 | 0;
  $6 = $22;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $13 = $14 + 8 | 0;
  $6 = $13;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$7 + 256 >> 2] = 0;
  HEAP32[$7 + 260 >> 2] = 0;
  $23 = $3 << 3;
  HEAPF64[$23 + $14 >> 3] = -$2;
  $15 = $7 + 224 | 0;
  $6 = $15 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $53 = $15 + 16 | 0;
  $6 = $53;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $54 = $15 + 8 | 0;
  $6 = $54;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$7 + 224 >> 2] = 0;
  HEAP32[$7 + 228 >> 2] = 0;
  HEAPF64[$15 + $23 >> 3] = $2;
  $32 = $4 + 24 | 0;
  $8 = $32;
  $6 = HEAP32[$8 + 4 >> 2];
  $12 = $7 + 96 | 0;
  $33 = $12 + 24 | 0;
  $9 = $33;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $24 = $4 + 16 | 0;
  $8 = $24;
  $6 = HEAP32[$8 + 4 >> 2];
  $34 = $12 + 16 | 0;
  $9 = $34;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $25 = $4 + 8 | 0;
  $8 = $25;
  $6 = HEAP32[$8 + 4 >> 2];
  $35 = $12 + 8 | 0;
  $9 = $35;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $26 = $4 + 40 | 0;
  $8 = $26;
  $6 = HEAP32[$8 + 4 >> 2];
  $36 = $12 + 40 | 0;
  $9 = $36;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $27 = $4 + 48 | 0;
  $8 = $27;
  $6 = HEAP32[$8 + 4 >> 2];
  $37 = $12 + 48 | 0;
  $9 = $37;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $38 = $4 + 56 | 0;
  $8 = $38;
  $6 = HEAP32[$8 + 4 >> 2];
  $39 = $12 + 56 | 0;
  $9 = $39;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $28 = $4 + 72 | 0;
  $8 = $28;
  $6 = HEAP32[$8 + 4 >> 2];
  $40 = $12 + 72 | 0;
  $9 = $40;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $29 = $4 + 80 | 0;
  $8 = $29;
  $6 = HEAP32[$8 + 4 >> 2];
  $41 = $12 + 80 | 0;
  $9 = $41;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $42 = $4 + 88 | 0;
  $8 = $42;
  $6 = HEAP32[$8 + 4 >> 2];
  $43 = $12 + 88 | 0;
  $9 = $43;
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$9 + 4 >> 2] = $6;
  $6 = HEAP32[$4 + 4 >> 2];
  HEAP32[$7 + 96 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$7 + 100 >> 2] = $6;
  $6 = HEAP32[$4 + 36 >> 2];
  HEAP32[$7 + 128 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$7 + 132 >> 2] = $6;
  $6 = HEAP32[$4 + 68 >> 2];
  HEAP32[$7 + 160 >> 2] = HEAP32[$4 + 64 >> 2];
  HEAP32[$7 + 164 >> 2] = $6;
  $16 = $12 + 104 | 0;
  $11 = HEAPF64[$22 >> 3];
  $10 = HEAPF64[$7 + 256 >> 3];
  $2 = HEAPF64[$13 >> 3];
  $44 = $4 + 104 | 0;
  HEAPF64[$16 >> 3] = $11 * HEAPF64[$27 >> 3] + ($10 * HEAPF64[$4 + 32 >> 3] + $2 * HEAPF64[$26 >> 3]) + HEAPF64[$44 >> 3];
  $17 = $12 + 112 | 0;
  $45 = $4 + 112 | 0;
  HEAPF64[$17 >> 3] = $11 * HEAPF64[$29 >> 3] + ($10 * HEAPF64[$4 + 64 >> 3] + $2 * HEAPF64[$28 >> 3]) + HEAPF64[$45 >> 3];
  $46 = $7 + 216 | 0;
  $6 = $46;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAPF64[$7 + 192 >> 3] = $11 * HEAPF64[$24 >> 3] + ($10 * HEAPF64[$4 >> 3] + $2 * HEAPF64[$25 >> 3]) + HEAPF64[$4 + 96 >> 3];
  $30 = $7 - -64 | 0;
  $47 = $30 + 24 | 0;
  $6 = $47;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = HEAP32[$17 + 4 >> 2];
  $48 = $30 + 16 | 0;
  $8 = $48;
  HEAP32[$8 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$8 + 4 >> 2] = $6;
  $6 = HEAP32[$16 + 4 >> 2];
  $49 = $30 + 8 | 0;
  $8 = $49;
  HEAP32[$8 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$8 + 4 >> 2] = $6;
  $6 = HEAP32[$7 + 196 >> 2];
  HEAP32[$7 + 64 >> 2] = HEAP32[$7 + 192 >> 2];
  HEAP32[$7 + 68 >> 2] = $6;
  HEAP32[$7 + 56 >> 2] = 0;
  HEAP32[$7 + 60 >> 2] = 0;
  $31 = ($3 + 1 | 0) % 3 << 3;
  $55 = $31 + $12 | 0;
  HEAPF64[$7 + 32 >> 3] = HEAPF64[$55 >> 3];
  $8 = $7 + 128 | 0;
  $56 = $31 + $8 | 0;
  HEAPF64[$7 + 40 >> 3] = HEAPF64[$56 >> 3];
  $6 = $7 + 160 | 0;
  $22 = $6 + $31 | 0;
  HEAPF64[$7 + 48 >> 3] = HEAPF64[$22 >> 3];
  HEAP32[$7 + 24 >> 2] = 0;
  HEAP32[$7 + 28 >> 2] = 0;
  $13 = $12 + $23 | 0;
  HEAPF64[$7 >> 3] = -HEAPF64[$13 >> 3];
  $9 = $6 + $23 | 0;
  HEAPF64[$7 + 16 >> 3] = -HEAPF64[$9 >> 3];
  $8 = $8 + $23 | 0;
  HEAPF64[$7 + 8 >> 3] = -HEAPF64[$8 >> 3];
  $12 = $7 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $30, $12, $7, $1, -1.5707963267948966, 1.5707963267948966, -1.5707963267948966, 1.5707963267948966, $5, 30.0, 0);
  $6 = HEAP32[$32 + 4 >> 2];
  HEAP32[$33 >> 2] = HEAP32[$32 >> 2];
  HEAP32[$33 + 4 >> 2] = $6;
  $6 = HEAP32[$24 + 4 >> 2];
  HEAP32[$34 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$34 + 4 >> 2] = $6;
  $6 = HEAP32[$25 + 4 >> 2];
  HEAP32[$35 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$35 + 4 >> 2] = $6;
  $6 = HEAP32[$26 + 4 >> 2];
  HEAP32[$36 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$36 + 4 >> 2] = $6;
  $6 = HEAP32[$27 + 4 >> 2];
  HEAP32[$37 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$37 + 4 >> 2] = $6;
  $6 = HEAP32[$38 + 4 >> 2];
  HEAP32[$39 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$39 + 4 >> 2] = $6;
  $6 = HEAP32[$28 + 4 >> 2];
  HEAP32[$40 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$40 + 4 >> 2] = $6;
  $6 = HEAP32[$29 + 4 >> 2];
  HEAP32[$41 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$41 + 4 >> 2] = $6;
  $6 = HEAP32[$42 + 4 >> 2];
  HEAP32[$43 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$43 + 4 >> 2] = $6;
  $6 = HEAP32[$4 + 4 >> 2];
  HEAP32[$7 + 96 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$7 + 100 >> 2] = $6;
  $6 = HEAP32[$4 + 36 >> 2];
  HEAP32[$7 + 128 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$7 + 132 >> 2] = $6;
  $6 = HEAP32[$4 + 68 >> 2];
  HEAP32[$7 + 160 >> 2] = HEAP32[$4 + 64 >> 2];
  HEAP32[$7 + 164 >> 2] = $6;
  $11 = HEAPF64[$53 >> 3];
  $10 = HEAPF64[$7 + 224 >> 3];
  $2 = HEAPF64[$54 >> 3];
  HEAPF64[$16 >> 3] = $11 * HEAPF64[$27 >> 3] + ($10 * HEAPF64[$4 + 32 >> 3] + $2 * HEAPF64[$26 >> 3]) + HEAPF64[$44 >> 3];
  HEAPF64[$17 >> 3] = $11 * HEAPF64[$29 >> 3] + ($10 * HEAPF64[$4 + 64 >> 3] + $2 * HEAPF64[$28 >> 3]) + HEAPF64[$45 >> 3];
  HEAP32[$46 >> 2] = 0;
  HEAP32[$46 + 4 >> 2] = 0;
  HEAPF64[$7 + 192 >> 3] = $11 * HEAPF64[$24 >> 3] + ($10 * HEAPF64[$4 >> 3] + $2 * HEAPF64[$25 >> 3]) + HEAPF64[$4 + 96 >> 3];
  HEAP32[$47 >> 2] = 0;
  HEAP32[$47 + 4 >> 2] = 0;
  $6 = HEAP32[$17 + 4 >> 2];
  HEAP32[$48 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$48 + 4 >> 2] = $6;
  $6 = HEAP32[$16 + 4 >> 2];
  HEAP32[$49 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$49 + 4 >> 2] = $6;
  $6 = HEAP32[$7 + 196 >> 2];
  HEAP32[$7 + 64 >> 2] = HEAP32[$7 + 192 >> 2];
  HEAP32[$7 + 68 >> 2] = $6;
  HEAP32[$7 + 56 >> 2] = 0;
  HEAP32[$7 + 60 >> 2] = 0;
  HEAPF64[$7 + 32 >> 3] = HEAPF64[$55 >> 3];
  HEAPF64[$7 + 40 >> 3] = HEAPF64[$56 >> 3];
  HEAPF64[$7 + 48 >> 3] = HEAPF64[$22 >> 3];
  HEAPF64[$7 >> 3] = HEAPF64[$13 >> 3];
  HEAP32[$7 + 24 >> 2] = 0;
  HEAP32[$7 + 28 >> 2] = 0;
  HEAPF64[$7 + 8 >> 3] = HEAPF64[$8 >> 3];
  HEAPF64[$7 + 16 >> 3] = HEAPF64[$9 >> 3];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $30, $12, $7, $1, -1.5707963267948966, 1.5707963267948966, -1.5707963267948966, 1.5707963267948966, $5, 30.0, 0);
  $3 = ($3 + 2 | 0) % 3 << 3;
  $9 = $3 + $15 | 0;
  $8 = $3 + $14 | 0;
  $6 = $15 + $31 | 0;
  $3 = $14 + $31 | 0;
  $57 = HEAPF64[$45 >> 3];
  $58 = HEAPF64[$44 >> 3];
  $59 = HEAPF64[$4 + 96 >> 3];
  $2 = 0.0;
  $13 = -30;
  while (1) {
   $11 = $2 * .017453292519943295;
   $10 = sin($11) * $1;
   HEAPF64[$3 >> 3] = $10;
   HEAPF64[$6 >> 3] = $10;
   $10 = cos($11) * $1;
   HEAPF64[$8 >> 3] = $10;
   HEAPF64[$9 >> 3] = $10;
   HEAP32[$7 + 120 >> 2] = 0;
   HEAP32[$7 + 124 >> 2] = 0;
   $18 = HEAPF64[$4 + 80 >> 3];
   $19 = HEAPF64[$7 + 272 >> 3];
   $20 = HEAPF64[$4 + 64 >> 3];
   $11 = HEAPF64[$7 + 256 >> 3];
   $10 = HEAPF64[$7 + 264 >> 3];
   $21 = HEAPF64[$4 + 72 >> 3];
   HEAPF64[$7 + 112 >> 3] = $57 + ($18 * $19 + ($20 * $11 + $10 * $21));
   $60 = HEAPF64[$4 + 48 >> 3];
   $61 = HEAPF64[$4 + 32 >> 3];
   $62 = HEAPF64[$4 + 40 >> 3];
   HEAPF64[$7 + 104 >> 3] = $58 + ($19 * $60 + ($11 * $61 + $10 * $62));
   $50 = $19;
   $19 = HEAPF64[$4 + 16 >> 3];
   $51 = $11;
   $11 = HEAPF64[$4 >> 3];
   $52 = $10;
   $10 = HEAPF64[$4 + 8 >> 3];
   HEAPF64[$7 + 96 >> 3] = $59 + ($50 * $19 + ($51 * $11 + $52 * $10));
   HEAP32[$7 + 88 >> 2] = 0;
   HEAP32[$7 + 92 >> 2] = 0;
   $50 = $18;
   $18 = HEAPF64[$7 + 240 >> 3];
   $51 = $20;
   $20 = HEAPF64[$7 + 224 >> 3];
   $52 = $21;
   $21 = HEAPF64[$7 + 232 >> 3];
   HEAPF64[$7 + 80 >> 3] = $57 + ($50 * $18 + ($51 * $20 + $52 * $21));
   HEAPF64[$7 + 72 >> 3] = $58 + ($60 * $18 + ($61 * $20 + $62 * $21));
   HEAPF64[$7 + 64 >> 3] = $59 + ($19 * $18 + ($11 * $20 + $10 * $21));
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $7 + 96 | 0, $7 - -64 | 0, $5);
   $2 = $2 + 30.0;
   $13 = $13 + 30 | 0;
   if ($13 >>> 0 < 330) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 288 | 0;
 }
 
 function btIDebugDraw__drawCylinder_28double_2c_20double_2c_20int_2c_20btTransform_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0;
  $6 = __stack_pointer - 256 | 0;
  __stack_pointer = $6;
  $23 = HEAPF64[$4 + 112 >> 3];
  $24 = HEAPF64[$4 + 104 >> 3];
  $27 = HEAPF64[$4 + 96 >> 3];
  $8 = $6 + 224 | 0;
  $7 = $8 + 24 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $8 + 16 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $8 + 8 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$6 + 224 >> 2] = 0;
  HEAP32[$6 + 228 >> 2] = 0;
  $7 = $3 << 3;
  HEAPF64[$7 + $8 >> 3] = $2;
  $11 = $6 + 192 | 0;
  $8 = $11 + 24 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $11 + 16 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $11 + 8 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$6 + 192 >> 2] = 0;
  HEAP32[$6 + 196 >> 2] = 0;
  HEAPF64[$7 + $11 >> 3] = -$2;
  $11 = $6 + 160 | 0;
  $8 = $11 + 24 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $11 + 16 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $11 + 8 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$6 + 160 >> 2] = 0;
  HEAP32[$6 + 164 >> 2] = 0;
  HEAPF64[$7 + $11 >> 3] = $2;
  $7 = ($3 + 2 | 0) % 3 << 3;
  $8 = $7 + $11 | 0;
  $16 = $7 + ($6 + 192 | 0) | 0;
  $25 = $11;
  $11 = ($3 + 1 | 0) % 3 | 0;
  $7 = $11 << 3;
  $25 = $25 + $7 | 0;
  $32 = $7 + ($6 + 192 | 0) | 0;
  $2 = 0.0;
  $7 = -30;
  while (1) {
   $9 = $2 * .017453292519943295;
   $10 = sin($9) * $1;
   HEAPF64[$32 >> 3] = $10;
   HEAPF64[$25 >> 3] = $10;
   $9 = cos($9) * $1;
   HEAPF64[$16 >> 3] = $9;
   HEAPF64[$8 >> 3] = $9;
   HEAP32[$6 + 152 >> 2] = 0;
   HEAP32[$6 + 156 >> 2] = 0;
   $21 = HEAPF64[$4 + 80 >> 3];
   $9 = HEAPF64[$6 + 208 >> 3];
   $22 = HEAPF64[$4 + 64 >> 3];
   $10 = HEAPF64[$6 + 192 >> 3];
   $12 = HEAPF64[$6 + 200 >> 3];
   $13 = HEAPF64[$4 + 72 >> 3];
   HEAPF64[$6 + 144 >> 3] = $23 + ($21 * $9 + ($22 * $10 + $12 * $13));
   $14 = HEAPF64[$4 + 48 >> 3];
   $15 = HEAPF64[$4 + 32 >> 3];
   $17 = HEAPF64[$4 + 40 >> 3];
   HEAPF64[$6 + 136 >> 3] = $24 + ($9 * $14 + ($10 * $15 + $12 * $17));
   $18 = HEAPF64[$4 + 16 >> 3];
   $19 = HEAPF64[$4 >> 3];
   $20 = HEAPF64[$4 + 8 >> 3];
   HEAPF64[$6 + 128 >> 3] = $27 + ($9 * $18 + ($10 * $19 + $12 * $20));
   HEAP32[$6 + 120 >> 2] = 0;
   HEAP32[$6 + 124 >> 2] = 0;
   $9 = HEAPF64[$6 + 176 >> 3];
   $10 = HEAPF64[$6 + 160 >> 3];
   $12 = HEAPF64[$6 + 168 >> 3];
   HEAPF64[$6 + 112 >> 3] = $23 + ($21 * $9 + ($22 * $10 + $13 * $12));
   HEAPF64[$6 + 104 >> 3] = $24 + ($14 * $9 + ($15 * $10 + $17 * $12));
   HEAPF64[$6 + 96 >> 3] = $27 + ($18 * $9 + ($19 * $10 + $20 * $12));
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $6 + 128 | 0, $6 + 96 | 0, $5);
   $2 = $2 + 30.0;
   $7 = $7 + 30 | 0;
   if ($7 >>> 0 < 330) {
    continue
   }
   break;
  };
  $16 = $6 + 128 | 0;
  $7 = $16 + 24 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $16 + 16 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $8 = $16 + 8 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$6 + 128 >> 2] = 0;
  HEAP32[$6 + 132 >> 2] = 0;
  $3 = ($3 << 3) + $16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $25 = $6 + 96 | 0;
  $3 = $25 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $25 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $16 = $25 + 8 | 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = 0;
  HEAP32[$6 + 96 >> 2] = 0;
  HEAP32[$6 + 100 >> 2] = 0;
  $11 = ($11 << 3) + $25 | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 1072693248;
  HEAP32[$6 + 88 >> 2] = 0;
  HEAP32[$6 + 92 >> 2] = 0;
  $13 = HEAPF64[$4 + 80 >> 3];
  $2 = HEAPF64[$6 + 240 >> 3];
  $14 = HEAPF64[$4 + 64 >> 3];
  $9 = HEAPF64[$6 + 224 >> 3];
  $10 = HEAPF64[$6 + 232 >> 3];
  $15 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$6 + 80 >> 3] = $23 - ($13 * $2 + ($14 * $9 + $10 * $15));
  $17 = HEAPF64[$4 + 48 >> 3];
  $18 = HEAPF64[$4 + 32 >> 3];
  $19 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$6 + 72 >> 3] = $24 - ($2 * $17 + ($9 * $18 + $10 * $19));
  $20 = HEAPF64[$4 + 16 >> 3];
  $28 = HEAPF64[$4 >> 3];
  $29 = HEAPF64[$4 + 8 >> 3];
  HEAPF64[$6 + 64 >> 3] = $27 - ($2 * $20 + ($9 * $28 + $10 * $29));
  HEAP32[$6 + 56 >> 2] = 0;
  HEAP32[$6 + 60 >> 2] = 0;
  $12 = HEAPF64[$7 >> 3];
  $21 = HEAPF64[$6 + 128 >> 3];
  $22 = HEAPF64[$8 >> 3];
  HEAPF64[$6 + 48 >> 3] = $13 * $12 + ($14 * $21 + $15 * $22);
  HEAPF64[$6 + 40 >> 3] = $17 * $12 + ($18 * $21 + $19 * $22);
  HEAPF64[$6 + 32 >> 3] = $20 * $12 + ($28 * $21 + $29 * $22);
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  $26 = $13;
  $13 = HEAPF64[$3 >> 3];
  $30 = $14;
  $14 = HEAPF64[$6 + 96 >> 3];
  $31 = $15;
  $15 = HEAPF64[$16 >> 3];
  HEAPF64[$6 + 16 >> 3] = $26 * $13 + ($30 * $14 + $31 * $15);
  HEAPF64[$6 + 8 >> 3] = $17 * $13 + ($18 * $14 + $19 * $15);
  HEAPF64[$6 >> 3] = $20 * $13 + ($28 * $14 + $29 * $15);
  $3 = $6 - -64 | 0;
  $7 = $6 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $7, $6, $1, $1, 0.0, 6.283185307179586, $5, 0, 10.0);
  HEAP32[$6 + 88 >> 2] = 0;
  HEAP32[$6 + 92 >> 2] = 0;
  $26 = $23;
  $23 = HEAPF64[$4 + 80 >> 3];
  $17 = HEAPF64[$4 + 64 >> 3];
  $18 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$6 + 80 >> 3] = $26 + ($2 * $23 + ($9 * $17 + $10 * $18));
  $26 = $24;
  $24 = HEAPF64[$4 + 48 >> 3];
  $19 = HEAPF64[$4 + 32 >> 3];
  $20 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$6 + 72 >> 3] = $26 + ($2 * $24 + ($9 * $19 + $10 * $20));
  $26 = $2;
  $2 = HEAPF64[$4 + 16 >> 3];
  $30 = $9;
  $9 = HEAPF64[$4 >> 3];
  $31 = $10;
  $10 = HEAPF64[$4 + 8 >> 3];
  HEAPF64[$6 + 64 >> 3] = $27 + ($26 * $2 + ($30 * $9 + $31 * $10));
  HEAP32[$6 + 56 >> 2] = 0;
  HEAP32[$6 + 60 >> 2] = 0;
  HEAPF64[$6 + 48 >> 3] = $23 * $12 + ($17 * $21 + $22 * $18);
  HEAPF64[$6 + 40 >> 3] = $24 * $12 + ($19 * $21 + $22 * $20);
  HEAPF64[$6 + 32 >> 3] = $2 * $12 + ($9 * $21 + $22 * $10);
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  HEAPF64[$6 + 16 >> 3] = $23 * $13 + ($17 * $14 + $15 * $18);
  HEAPF64[$6 + 8 >> 3] = $24 * $13 + ($19 * $14 + $15 * $20);
  HEAPF64[$6 >> 3] = $2 * $13 + ($9 * $14 + $15 * $10);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $7, $6, $1, $1, 0.0, 6.283185307179586, $5, 0, 10.0);
  __stack_pointer = $6 + 256 | 0;
 }
 
 function btIDebugDraw__drawCone_28double_2c_20double_2c_20int_2c_20btTransform_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $6 = __stack_pointer - 288 | 0;
  __stack_pointer = $6;
  $15 = HEAPF64[$4 + 112 >> 3];
  $20 = HEAPF64[$4 + 104 >> 3];
  $21 = HEAPF64[$4 + 96 >> 3];
  $16 = $6 + 256 | 0;
  $19 = $16 + 24 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $19 = $16 + 16 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $30 = $16 + 8 | 0;
  HEAP32[$30 >> 2] = 0;
  HEAP32[$30 + 4 >> 2] = 0;
  HEAP32[$6 + 256 >> 2] = 0;
  HEAP32[$6 + 260 >> 2] = 0;
  $27 = $3 << 3;
  $2 = $2 * .5;
  HEAPF64[$27 + $16 >> 3] = $2;
  $12 = $6 + 224 | 0;
  $16 = $12 + 24 | 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = 0;
  $16 = $12 + 16 | 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = 0;
  $16 = $12 + 8 | 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = 0;
  HEAP32[$6 + 224 >> 2] = 0;
  HEAP32[$6 + 228 >> 2] = 0;
  $16 = ($3 + 1 | 0) % 3 | 0;
  $34 = $16 << 3;
  HEAPF64[$34 + $12 >> 3] = $1;
  $14 = $6 + 192 | 0;
  $12 = $14 + 24 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  $12 = $14 + 16 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  $12 = $14 + 8 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  HEAP32[$6 + 192 >> 2] = 0;
  HEAP32[$6 + 196 >> 2] = 0;
  $12 = ($3 + 2 | 0) % 3 << 3;
  HEAPF64[$14 + $12 >> 3] = $1;
  $14 = $6 + 160 | 0;
  $28 = $14 + 24 | 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$28 + 4 >> 2] = 0;
  $28 = $14 + 16 | 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$28 + 4 >> 2] = 0;
  $28 = $14 + 8 | 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$28 + 4 >> 2] = 0;
  HEAP32[$6 + 160 >> 2] = 0;
  HEAP32[$6 + 164 >> 2] = 0;
  HEAPF64[$14 + $27 >> 3] = -$2;
  $27 = $12 + $14 | 0;
  $34 = $14 + $34 | 0;
  $2 = HEAPF64[$19 >> 3];
  $7 = HEAPF64[$30 >> 3];
  $19 = -30;
  $8 = HEAPF64[$6 + 256 >> 3];
  while (1) {
   $10 = $9 * .017453292519943295;
   (wasm2js_i32$0 = $34, wasm2js_f64$0 = sin($10) * $1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $27, wasm2js_f64$0 = cos($10) * $1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
   HEAP32[$6 + 152 >> 2] = 0;
   HEAP32[$6 + 156 >> 2] = 0;
   $10 = HEAPF64[$4 + 80 >> 3];
   $11 = HEAPF64[$4 + 64 >> 3];
   $13 = HEAPF64[$4 + 72 >> 3];
   HEAPF64[$6 + 144 >> 3] = $15 + ($10 * $2 + ($11 * $8 + $7 * $13));
   $17 = HEAPF64[$4 + 48 >> 3];
   $18 = HEAPF64[$4 + 32 >> 3];
   $22 = HEAPF64[$4 + 40 >> 3];
   HEAPF64[$6 + 136 >> 3] = $20 + ($17 * $2 + ($18 * $8 + $7 * $22));
   $23 = HEAPF64[$4 + 16 >> 3];
   $24 = HEAPF64[$4 >> 3];
   $29 = HEAPF64[$4 + 8 >> 3];
   HEAPF64[$6 + 128 >> 3] = $21 + ($23 * $2 + ($24 * $8 + $29 * $7));
   HEAP32[$6 + 120 >> 2] = 0;
   HEAP32[$6 + 124 >> 2] = 0;
   $25 = $10;
   $10 = HEAPF64[$6 + 176 >> 3];
   $26 = $11;
   $11 = HEAPF64[$6 + 160 >> 3];
   $31 = $13;
   $13 = HEAPF64[$6 + 168 >> 3];
   HEAPF64[$6 + 112 >> 3] = $15 + ($25 * $10 + ($26 * $11 + $31 * $13));
   HEAPF64[$6 + 104 >> 3] = $20 + ($17 * $10 + ($18 * $11 + $22 * $13));
   HEAPF64[$6 + 96 >> 3] = $21 + ($23 * $10 + ($24 * $11 + $29 * $13));
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $6 + 128 | 0, $6 + 96 | 0, $5);
   $9 = $9 + 30.0;
   $19 = $19 + 30 | 0;
   if ($19 >>> 0 < 330) {
    continue
   }
   break;
  };
  HEAP32[$6 + 152 >> 2] = 0;
  HEAP32[$6 + 156 >> 2] = 0;
  $9 = HEAPF64[$4 + 80 >> 3];
  $10 = HEAPF64[$4 + 64 >> 3];
  $11 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$6 + 144 >> 3] = $15 + ($9 * $2 + ($10 * $8 + $7 * $11));
  $13 = HEAPF64[$4 + 48 >> 3];
  $17 = HEAPF64[$4 + 32 >> 3];
  $18 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$6 + 136 >> 3] = $20 + ($13 * $2 + ($17 * $8 + $7 * $18));
  $22 = HEAPF64[$4 + 16 >> 3];
  $23 = HEAPF64[$4 >> 3];
  $24 = HEAPF64[$4 + 8 >> 3];
  HEAPF64[$6 + 128 >> 3] = $21 + ($22 * $2 + ($23 * $8 + $24 * $7));
  HEAP32[$6 + 120 >> 2] = 0;
  HEAP32[$6 + 124 >> 2] = 0;
  $25 = $9;
  $29 = HEAPF64[$6 + 240 >> 3];
  $9 = $29 - $2;
  $26 = $10;
  $32 = HEAPF64[$6 + 224 >> 3];
  $10 = $32 - $8;
  $31 = $11;
  $33 = HEAPF64[$6 + 232 >> 3];
  $11 = $33 - $7;
  HEAPF64[$6 + 112 >> 3] = $15 + ($25 * $9 + ($26 * $10 + $31 * $11));
  HEAPF64[$6 + 104 >> 3] = $20 + ($13 * $9 + ($17 * $10 + $18 * $11));
  HEAPF64[$6 + 96 >> 3] = $21 + ($22 * $9 + ($23 * $10 + $24 * $11));
  $12 = $6 + 128 | 0;
  $14 = $6 + 96 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $12, $14, $5);
  HEAP32[$6 + 152 >> 2] = 0;
  HEAP32[$6 + 156 >> 2] = 0;
  $9 = HEAPF64[$4 + 80 >> 3];
  $10 = HEAPF64[$4 + 64 >> 3];
  $11 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$6 + 144 >> 3] = $15 + ($9 * $2 + ($10 * $8 + $7 * $11));
  $13 = HEAPF64[$4 + 48 >> 3];
  $17 = HEAPF64[$4 + 32 >> 3];
  $18 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$6 + 136 >> 3] = $20 + ($13 * $2 + ($17 * $8 + $7 * $18));
  $22 = HEAPF64[$4 + 16 >> 3];
  $23 = HEAPF64[$4 >> 3];
  $24 = HEAPF64[$4 + 8 >> 3];
  HEAPF64[$6 + 128 >> 3] = $21 + ($22 * $2 + ($23 * $8 + $24 * $7));
  HEAP32[$6 + 120 >> 2] = 0;
  HEAP32[$6 + 124 >> 2] = 0;
  $2 = -$2 - $29;
  $8 = -$8 - $32;
  $7 = -$7 - $33;
  HEAPF64[$6 + 112 >> 3] = $15 + ($9 * $2 + ($10 * $8 + $11 * $7));
  HEAPF64[$6 + 104 >> 3] = $20 + ($13 * $2 + ($17 * $8 + $7 * $18));
  HEAPF64[$6 + 96 >> 3] = $21 + ($22 * $2 + ($23 * $8 + $24 * $7));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $12, $14, $5);
  HEAP32[$6 + 152 >> 2] = 0;
  HEAP32[$6 + 156 >> 2] = 0;
  $9 = HEAPF64[$4 + 80 >> 3];
  $2 = HEAPF64[$6 + 272 >> 3];
  $10 = HEAPF64[$4 + 64 >> 3];
  $7 = HEAPF64[$6 + 256 >> 3];
  $8 = HEAPF64[$6 + 264 >> 3];
  $11 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$6 + 144 >> 3] = $15 + ($9 * $2 + ($10 * $7 + $8 * $11));
  $13 = HEAPF64[$4 + 48 >> 3];
  $17 = HEAPF64[$4 + 32 >> 3];
  $18 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$6 + 136 >> 3] = $20 + ($2 * $13 + ($7 * $17 + $8 * $18));
  $22 = HEAPF64[$4 + 16 >> 3];
  $23 = HEAPF64[$4 >> 3];
  $24 = HEAPF64[$4 + 8 >> 3];
  HEAPF64[$6 + 128 >> 3] = $21 + ($2 * $22 + ($7 * $23 + $8 * $24));
  HEAP32[$6 + 120 >> 2] = 0;
  HEAP32[$6 + 124 >> 2] = 0;
  $25 = $9;
  $29 = HEAPF64[$6 + 208 >> 3];
  $9 = $29 - $2;
  $26 = $10;
  $32 = HEAPF64[$6 + 192 >> 3];
  $10 = $32 - $7;
  $31 = $11;
  $33 = HEAPF64[$6 + 200 >> 3];
  $11 = $33 - $8;
  HEAPF64[$6 + 112 >> 3] = $15 + ($25 * $9 + ($26 * $10 + $31 * $11));
  HEAPF64[$6 + 104 >> 3] = $20 + ($13 * $9 + ($17 * $10 + $18 * $11));
  HEAPF64[$6 + 96 >> 3] = $21 + ($22 * $9 + ($23 * $10 + $24 * $11));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $12, $14, $5);
  HEAP32[$6 + 152 >> 2] = 0;
  HEAP32[$6 + 156 >> 2] = 0;
  $9 = HEAPF64[$4 + 80 >> 3];
  $10 = HEAPF64[$4 + 64 >> 3];
  $11 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$6 + 144 >> 3] = $15 + ($2 * $9 + ($7 * $10 + $8 * $11));
  $13 = HEAPF64[$4 + 48 >> 3];
  $17 = HEAPF64[$4 + 32 >> 3];
  $18 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$6 + 136 >> 3] = $20 + ($2 * $13 + ($7 * $17 + $8 * $18));
  $22 = HEAPF64[$4 + 16 >> 3];
  $23 = HEAPF64[$4 >> 3];
  $24 = HEAPF64[$4 + 8 >> 3];
  HEAPF64[$6 + 128 >> 3] = $21 + ($2 * $22 + ($7 * $23 + $8 * $24));
  HEAP32[$6 + 120 >> 2] = 0;
  HEAP32[$6 + 124 >> 2] = 0;
  $2 = -$2 - $29;
  $7 = -$7 - $32;
  $8 = -$8 - $33;
  HEAPF64[$6 + 112 >> 3] = $15 + ($9 * $2 + ($10 * $7 + $11 * $8));
  HEAPF64[$6 + 104 >> 3] = $20 + ($13 * $2 + ($17 * $7 + $8 * $18));
  HEAPF64[$6 + 96 >> 3] = $21 + ($22 * $2 + ($23 * $7 + $24 * $8));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $12, $14, $5);
  $19 = $12 + 24 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $19 = $12 + 16 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$19 + 4 >> 2] = 0;
  $30 = $12 + 8 | 0;
  HEAP32[$30 >> 2] = 0;
  HEAP32[$30 + 4 >> 2] = 0;
  HEAP32[$6 + 128 >> 2] = 0;
  HEAP32[$6 + 132 >> 2] = 0;
  $3 = ($3 << 3) + $12 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1072693248;
  $3 = $14 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $14 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $27 = $14 + 8 | 0;
  HEAP32[$27 >> 2] = 0;
  HEAP32[$27 + 4 >> 2] = 0;
  HEAP32[$6 + 96 >> 2] = 0;
  HEAP32[$6 + 100 >> 2] = 0;
  $16 = ($16 << 3) + $14 | 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = 1072693248;
  HEAP32[$6 + 88 >> 2] = 0;
  HEAP32[$6 + 92 >> 2] = 0;
  $11 = $15;
  $2 = HEAPF64[$4 + 80 >> 3];
  $15 = HEAPF64[$6 + 272 >> 3];
  $7 = HEAPF64[$4 + 64 >> 3];
  $8 = HEAPF64[$6 + 256 >> 3];
  $9 = HEAPF64[$6 + 264 >> 3];
  $10 = HEAPF64[$4 + 72 >> 3];
  HEAPF64[$6 + 80 >> 3] = $11 - ($2 * $15 + ($7 * $8 + $9 * $10));
  $25 = $20;
  $20 = HEAPF64[$4 + 48 >> 3];
  $11 = HEAPF64[$4 + 32 >> 3];
  $13 = HEAPF64[$4 + 40 >> 3];
  HEAPF64[$6 + 72 >> 3] = $25 - ($15 * $20 + ($8 * $11 + $9 * $13));
  $25 = $21;
  $26 = $15;
  $15 = HEAPF64[$4 + 16 >> 3];
  $21 = HEAPF64[$4 >> 3];
  $31 = $8 * $21;
  $8 = HEAPF64[$4 + 8 >> 3];
  HEAPF64[$6 + 64 >> 3] = $25 - ($26 * $15 + ($31 + $9 * $8));
  HEAP32[$6 + 56 >> 2] = 0;
  HEAP32[$6 + 60 >> 2] = 0;
  $9 = HEAPF64[$19 >> 3];
  $17 = HEAPF64[$6 + 128 >> 3];
  $18 = HEAPF64[$30 >> 3];
  HEAPF64[$6 + 48 >> 3] = $2 * $9 + ($7 * $17 + $10 * $18);
  HEAPF64[$6 + 40 >> 3] = $20 * $9 + ($11 * $17 + $13 * $18);
  HEAPF64[$6 + 32 >> 3] = $15 * $9 + ($21 * $17 + $8 * $18);
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  $25 = $2;
  $2 = HEAPF64[$3 >> 3];
  $26 = $7;
  $7 = HEAPF64[$6 + 96 >> 3];
  $9 = HEAPF64[$27 >> 3];
  HEAPF64[$6 + 16 >> 3] = $25 * $2 + ($26 * $7 + $10 * $9);
  HEAPF64[$6 + 8 >> 3] = $20 * $2 + ($11 * $7 + $13 * $9);
  HEAPF64[$6 >> 3] = $15 * $2 + ($21 * $7 + $8 * $9);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $6 - -64 | 0, $6 + 32 | 0, $6, $1, $1, 0.0, 6.283185307179586, $5, 0, 10.0);
  __stack_pointer = $6 + 288 | 0;
 }
 
 function btIDebugDraw__drawPlane_28btVector3_20const__2c_20double_2c_20btTransform_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  $9 = HEAPF64[$1 + 16 >> 3];
  $23 = $9 * $2;
  $8 = HEAPF64[$1 + 8 >> 3];
  $24 = $8 * $2;
  $7 = HEAPF64[$1 >> 3];
  $25 = $7 * $2;
  label$1 : {
   if (Math_abs($9) > .7071067811865476) {
    $2 = $8 * $8 + $9 * $9;
    $6 = 1.0 / Math_sqrt($2);
    $26 = $2 * $6;
    $2 = $8 * $6;
    $16 = $2 * 100.0;
    $8 = $6 * -$9;
    $13 = $7 * $8;
    $27 = $2 * -$7;
    break label$1;
   }
   $2 = $7 * $7 + $8 * $8;
   $6 = 1.0 / Math_sqrt($2);
   $13 = $2 * $6;
   $2 = $6 * -$8;
   $17 = $2 * 100.0;
   $8 = $7 * $6;
   $26 = $8 * -$9;
   $27 = $9 * $2;
  }
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $7 = $23 + $16;
  $28 = $3 + 80 | 0;
  $14 = HEAPF64[$28 >> 3];
  $6 = $25 + $17;
  $10 = HEAPF64[$3 + 64 >> 3];
  $18 = $8 * 100.0;
  $2 = $24 + $18;
  $29 = $3 + 72 | 0;
  $19 = HEAPF64[$29 >> 3];
  $30 = $3 + 112 | 0;
  $11 = HEAPF64[$30 >> 3];
  HEAPF64[$5 + 48 >> 3] = $7 * $14 + ($6 * $10 + $2 * $19) + $11;
  $31 = $3 + 48 | 0;
  $20 = HEAPF64[$31 >> 3];
  $21 = HEAPF64[$3 + 32 >> 3];
  $32 = $3 + 40 | 0;
  $22 = HEAPF64[$32 >> 3];
  $1 = $3 + 104 | 0;
  $9 = HEAPF64[$1 >> 3];
  HEAPF64[$5 + 40 >> 3] = $7 * $20 + ($6 * $21 + $2 * $22) + $9;
  $8 = HEAPF64[$3 + 16 >> 3];
  $12 = $7 * $8;
  $7 = HEAPF64[$3 >> 3];
  $15 = $6 * $7;
  $6 = HEAPF64[$3 + 8 >> 3];
  $12 = $12 + ($15 + $2 * $6);
  $2 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $12 + $2;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $12 = $11;
  $15 = $14;
  $14 = $23 - $16;
  $16 = $10;
  $10 = $25 - $17;
  $11 = $24 - $18;
  HEAPF64[$5 + 16 >> 3] = $12 + ($15 * $14 + ($16 * $10 + $19 * $11));
  HEAPF64[$5 + 8 >> 3] = $9 + ($14 * $20 + ($10 * $21 + $11 * $22));
  HEAPF64[$5 >> 3] = $2 + ($14 * $8 + ($10 * $7 + $11 * $6));
  $33 = $5 + 32 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $33, $5, $4);
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  $17 = $13 * 100.0;
  $7 = $23 + $17;
  $13 = HEAPF64[$28 >> 3];
  $14 = $26 * 100.0;
  $6 = $25 + $14;
  $10 = HEAPF64[$3 + 64 >> 3];
  $18 = $27 * 100.0;
  $2 = $24 + $18;
  $19 = HEAPF64[$29 >> 3];
  $11 = HEAPF64[$30 >> 3];
  HEAPF64[$5 + 48 >> 3] = $7 * $13 + ($6 * $10 + $2 * $19) + $11;
  $20 = HEAPF64[$31 >> 3];
  $21 = HEAPF64[$3 + 32 >> 3];
  $22 = HEAPF64[$32 >> 3];
  $9 = HEAPF64[$1 >> 3];
  HEAPF64[$5 + 40 >> 3] = $7 * $20 + ($6 * $21 + $2 * $22) + $9;
  $8 = HEAPF64[$3 + 16 >> 3];
  $12 = $7 * $8;
  $7 = HEAPF64[$3 >> 3];
  $15 = $6 * $7;
  $6 = HEAPF64[$3 + 8 >> 3];
  $12 = $12 + ($15 + $2 * $6);
  $2 = HEAPF64[$3 + 96 >> 3];
  HEAPF64[$5 + 32 >> 3] = $12 + $2;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  $12 = $11;
  $15 = $13;
  $13 = $23 - $17;
  $16 = $10;
  $10 = $25 - $14;
  $11 = $24 - $18;
  HEAPF64[$5 + 16 >> 3] = $12 + ($15 * $13 + ($16 * $10 + $19 * $11));
  HEAPF64[$5 + 8 >> 3] = $9 + ($13 * $20 + ($10 * $21 + $11 * $22));
  HEAPF64[$5 >> 3] = $2 + ($13 * $8 + ($10 * $7 + $11 * $6));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $33, $5, $4);
  __stack_pointer = $5 - -64 | 0;
 }
 
 function LayaDebugDraw__clearLines_28_29($0) {
  $0 = $0 | 0;
  layaClearLine();
 }
 
 function btGhostPairCallback__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = HEAP32[$2 >> 2];
  $0 = HEAP32[$0 + 472 >> 2] == 4 ? $0 : 0;
  $3 = HEAP32[$1 >> 2];
  if (!(HEAP32[$3 + 472 >> 2] != 4 | !$3)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, $2, $1)
  }
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2)
  }
  return 0;
 }
 
 function btGhostPairCallback__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $0 = HEAP32[$2 >> 2];
  $0 = HEAP32[$0 + 472 >> 2] == 4 ? $0 : 0;
  $4 = HEAP32[$1 >> 2];
  if (!(HEAP32[$4 + 472 >> 2] != 4 | !$4)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 32 >> 2]]($4, $2, $3, $1)
  }
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $3, $2)
  }
  return 0;
 }
 
 function btSphereSweepResult__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0;
  $3 = 1.0;
  if (!(HEAPU8[HEAP32[$1 >> 2] + 392 | 0] & 4)) {
   $3 = HEAPF64[$1 + 72 >> 3];
   if ($3 < HEAPF64[$0 + 216 >> 3]) {
    HEAPF64[$0 + 216 >> 3] = $3
   }
   $3 = btCollisionWorld__AllConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2);
  }
  return +$3;
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $2 >>> 16 | 0;
  $5 = $0 >>> 16 | 0;
  $9 = Math_imul($4, $5);
  $6 = $2 & 65535;
  $7 = $0 & 65535;
  $8 = Math_imul($6, $7);
  $5 = ($8 >>> 16 | 0) + Math_imul($5, $6) | 0;
  $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) + ($5 >>> 16) + ($4 >>> 16) | 0;
  return $8 & 65535 | $4 << 16;
 }
 
 function __wasm_i64_udiv($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $3 = $0;
  __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E : {
   label$1 : {
    label$2 : {
     label$3 : {
      label$4 : {
       label$5 : {
        label$6 : {
         label$7 : {
          label$9 : {
           label$11 : {
            if ($1) {
             if (!$2) {
              break label$11
             }
             break label$9;
            }
            $0 = ($3 >>> 0) / ($2 >>> 0) | 0;
            i64toi32_i32$HIGH_BITS = 0;
            break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
           }
           if (!$3) {
            break label$7
           }
           break label$6;
          }
          if (!($2 - 1 & $2)) {
           break label$5
          }
          $6 = (Math_clz32($2) + 33 | 0) - Math_clz32($1) | 0;
          $4 = 0 - $6 | 0;
          break label$3;
         }
         $0 = ($1 >>> 0) / 0 | 0;
         i64toi32_i32$HIGH_BITS = 0;
         break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
        }
        $0 = 32 - Math_clz32($1) | 0;
        if ($0 >>> 0 < 31) {
         break label$4
        }
        break label$2;
       }
       if (($2 | 0) == 1) {
        break label$1
       }
       $0 = $2 ? 31 - Math_clz32($2 - 1 ^ $2) | 0 : 32;
       $2 = $0 & 31;
       if (($0 & 63) >>> 0 >= 32) {
        $0 = 0;
        $1 = $1 >>> $2 | 0;
       } else {
        $0 = $1 >>> $2 | 0;
        $1 = ((1 << $2) - 1 & $1) << 32 - $2 | $3 >>> $2;
       }
       i64toi32_i32$HIGH_BITS = $0;
       $0 = $1;
       break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
      }
      $6 = $0 + 1 | 0;
      $4 = 63 - $0 | 0;
     }
     $0 = $6 & 63;
     $5 = $0 & 31;
     if ($0 >>> 0 >= 32) {
      $0 = 0;
      $7 = $1 >>> $5 | 0;
     } else {
      $0 = $1 >>> $5 | 0;
      $7 = ((1 << $5) - 1 & $1) << 32 - $5 | $3 >>> $5;
     }
     $5 = $0;
     $0 = $4 & 63;
     $4 = $0 & 31;
     if ($0 >>> 0 >= 32) {
      $0 = $3 << $4;
      $3 = 0;
     } else {
      $0 = (1 << $4) - 1 & $3 >>> 32 - $4 | $1 << $4;
      $3 = $3 << $4;
     }
     $1 = $0;
     if ($6) {
      $4 = $2 - 1 | 0;
      $11 = ($4 | 0) != -1 ? 0 : -1;
      while (1) {
       $0 = $7 << 1 | $1 >>> 31;
       $5 = $5 << 1 | $7 >>> 31;
       $8 = $11 - ($5 + ($0 >>> 0 > $4 >>> 0) | 0) >> 31;
       $9 = $2 & $8;
       $7 = $0 - $9 | 0;
       $5 = $5 - ($0 >>> 0 < $9 >>> 0) | 0;
       $1 = $1 << 1 | $3 >>> 31;
       $3 = $10 | $3 << 1;
       $10 = $8 & 1;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue
       }
       break;
      };
     }
     i64toi32_i32$HIGH_BITS = $1 << 1 | $3 >>> 31;
     $0 = $10 | $3 << 1;
     break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
    }
    $3 = 0;
    $1 = 0;
   }
   i64toi32_i32$HIGH_BITS = $1;
   $0 = $3;
  }
  return $0;
 }
 
 function __wasm_rotl_i32($0) {
  var $1 = 0;
  $1 = $0 & 31;
  $0 = 0 - $0 & 31;
  return (-1 >>> $1 & -2) << $1 | (-1 << $0 & -2) >>> $0;
 }
 
 function __wasm_rotl_i64($0, $1) {
  i64toi32_i32$HIGH_BITS = $0;
  return $1;
 }
 
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = [null, __stdio_close, __stdio_write, __stdio_seek, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____class_type_info_____class_type_info_28_29_1, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29_1, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29_1, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, __cxa_pure_virtual, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btAlignedAllocDefault_28unsigned_20long_2c_20int_29, btAlignedFreeDefault_28void__29, btAllocDefault_28unsigned_20long_29, btFreeDefault_28void__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btCollisionShape__getBoundingSphere_28btVector3__2c_20double__29_20const, btCollisionShape__getAngularMotionDisc_28_29_20const, btCollisionShape__getContactBreakingThreshold_28double_29_20const, btCollisionShape__getAnisotropicRollingFrictionDirection_28_29_20const, btCollisionShape__calculateSerializeBufferSize_28_29_20const, btCollisionShape__serialize_28void__2c_20btSerializer__29_20const, btCollisionShape__serializeSingleShape_28btSerializer__29_20const, btConvexShape__project_28btTransform_20const__2c_20btVector3_20const__2c_20double__2c_20double__2c_20btVector3__2c_20btVector3__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btConvexInternalShape__setLocalScaling_28btVector3_20const__29, btConvexInternalShape__getLocalScaling_28_29_20const, btConvexInternalShape__setMargin_28double_29, btConvexInternalShape__getMargin_28_29_20const, btConvexInternalShape__calculateSerializeBufferSize_28_29_20const, btConvexInternalShape__serialize_28void__2c_20btSerializer__29_20const, btConvexInternalShape__localGetSupportingVertex_28btVector3_20const__29_20const, btConvexInternalShape__getAabbSlow_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexPolyhedron___btConvexPolyhedron_28_29, btConvexPolyhedron___btConvexPolyhedron_28_29_1, btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btPolyhedralConvexShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btPolyhedralConvexShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btPolyhedralConvexShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btPolyhedralConvexShape__initializePolyhedralFeatures_28int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btPolyhedralConvexAabbCachingShape__setLocalScaling_28btVector3_20const__29, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btBU_Simplex1to4__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getName_28_29_20const, btBU_Simplex1to4__getNumVertices_28_29_20const, btBU_Simplex1to4__getNumEdges_28_29_20const, btBU_Simplex1to4__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getVertex_28int_2c_20btVector3__29_20const, btBU_Simplex1to4__getNumPlanes_28_29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btBU_Simplex1to4__isInside_28btVector3_20const__2c_20double_29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btManifoldResult__setShapeIdentifiersA_28int_2c_20int_29, btManifoldResult__setShapeIdentifiersB_28int_2c_20int_29, btManifoldResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29, btCollisionDispatcher__defaultNearCallback_28btBroadphasePair__2c_20btCollisionDispatcher__2c_20btDispatcherInfo_20const__29, btCollisionDispatcher___btCollisionDispatcher_28_29, btCollisionDispatcher___btCollisionDispatcher_28_29_1, btCollisionDispatcher__findAlgorithm_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btPersistentManifold__2c_20ebtDispatcherQueryType_29, btCollisionDispatcher__getNewManifold_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btCollisionDispatcher__releaseManifold_28btPersistentManifold__29, btCollisionDispatcher__clearManifold_28btPersistentManifold__29, btCollisionDispatcher__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btCollisionDispatcher__needsResponse_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btCollisionDispatcher__dispatchAllCollisionPairs_28btOverlappingPairCache__2c_20btDispatcherInfo_20const__2c_20btDispatcher__29, btCollisionDispatcher__getNumManifolds_28_29_20const, btCollisionDispatcher__getManifoldByIndexInternal_28int_29, btCollisionDispatcher__getInternalManifoldPointer_28_29, btCollisionDispatcher__getInternalManifoldPool_28_29, btCollisionDispatcher__getInternalManifoldPool_28_29, btCollisionDispatcher__allocateCollisionAlgorithm_28int_29, btCollisionDispatcher__freeCollisionAlgorithm_28void__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btCollisionPairCallback__processOverlap_28btBroadphasePair__29, btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29, btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29_1, btGImpactCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btTriangleShapeEx__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btTriangleShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btTriangleShape__getName_28_29_20const, btTriangleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btTriangleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const, btTriangleShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btTriangleShape__getNumVertices_28_29_20const, btTriangleShape__getNumVertices_28_29_20const, btTriangleShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const, btTriangleShape__getVertex_28int_2c_20btVector3__29_20const, btTriangleShape__getNumPlanes_28_29_20const, btTriangleShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btTriangleShape__isInside_28btVector3_20const__2c_20double_29_20const, btTriangleShape__getPlaneEquation_28int_2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4___btBU_Simplex1to4_28_29, GIM_ShapeRetriever__ChildShapeRetriever__getChildShape_28int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, GIM_ShapeRetriever__TriangleShapeRetriever__getChildShape_28int_29, btManifoldResult___btManifoldResult_28_29, GIM_ShapeRetriever__TetraShapeRetriever__getChildShape_28int_29, btManifoldResult___btManifoldResult_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGImpactTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGImpactCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btCollisionObject___btCollisionObject_28_29, btCollisionObject___btCollisionObject_28_29_1, btCollisionObject__setCollisionShape_28btCollisionShape__29, btCollisionObject__checkCollideWithOverride_28btCollisionObject_20const__29_20const, btCollisionObject__calculateSerializeBufferSize_28_29_20const, btCollisionObject__serialize_28void__2c_20btSerializer__29_20const, btCollisionObject__serializeSingleObject_28btSerializer__29_20const, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBoxShape__setLocalScaling_28btVector3_20const__29, btBoxShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btBoxShape__getName_28_29_20const, btBoxShape__setMargin_28double_29, btBoxShape__localGetSupportingVertex_28btVector3_20const__29_20const, btBoxShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btBoxShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btBoxShape__getNumPreferredPenetrationDirections_28_29_20const, btBoxShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btBoxShape__getNumVertices_28_29_20const, btCollisionShape__calculateSerializeBufferSize_28_29_20const, btBoxShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const, btBoxShape__getVertex_28int_2c_20btVector3__29_20const, btBoxShape__getNumPreferredPenetrationDirections_28_29_20const, btBoxShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btBoxShape__isInside_28btVector3_20const__2c_20double_29_20const, btBoxShape__getPlaneEquation_28btVector4__2c_20int_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCapsuleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btCapsuleShape__setLocalScaling_28btVector3_20const__29, btCapsuleShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btCapsuleShape__getName_28_29_20const, btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const, btCapsuleShape__setMargin_28double_29, btCapsuleShape__calculateSerializeBufferSize_28_29_20const, btCapsuleShape__serialize_28void__2c_20btSerializer__29_20const, btCapsuleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCapsuleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCapsuleShapeX__getName_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCapsuleShapeZ__getName_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBoxShape__setLocalScaling_28btVector3_20const__29, btCylinderShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btCylinderShape__getName_28_29_20const, btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const, btBoxShape__setMargin_28double_29, btCapsuleShape__calculateSerializeBufferSize_28_29_20const, btCylinderShape__serialize_28void__2c_20btSerializer__29_20const, btConvexInternalShape__localGetSupportingVertex_28btVector3_20const__29_20const, btCylinderShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCylinderShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCylinderShape__getRadius_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCylinderShapeX__getName_28_29_20const, btCylinderShapeX__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCylinderShapeX__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCylinderShapeX__getRadius_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCylinderShapeZ__getName_28_29_20const, btCylinderShapeZ__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCylinderShapeZ__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCylinderShape__getRadius_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btSphereShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btSphereShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btSphereShape__getName_28_29_20const, btConvexInternalShape__setMargin_28double_29, btSphereShape__getMargin_28_29_20const, btSphereShape__localGetSupportingVertex_28btVector3_20const__29_20const, btSphereShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btSphereShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCapsuleShape___btCapsuleShape_28_29, btConeShape__setLocalScaling_28btVector3_20const__29, btConeShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btConeShape__getName_28_29_20const, btConeShape__getAnisotropicRollingFrictionDirection_28_29_20const, btCapsuleShape__calculateSerializeBufferSize_28_29_20const, btConeShape__serialize_28void__2c_20btSerializer__29_20const, btConeShape__localGetSupportingVertex_28btVector3_20const__29_20const, btConeShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btConeShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCapsuleShape___btCapsuleShape_28_29, btConeShapeZ__getName_28_29_20const, btConeShapeZ__getAnisotropicRollingFrictionDirection_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btConeShapeX__getName_28_29_20const, btConeShapeX__getAnisotropicRollingFrictionDirection_28_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btConcaveShape__setMargin_28double_29, btConcaveShape__getMargin_28_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCapsuleShape___btCapsuleShape_28_29, btStaticPlaneShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btStaticPlaneShape__setLocalScaling_28btVector3_20const__29, btStaticPlaneShape__getLocalScaling_28_29_20const, btTriangleShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btStaticPlaneShape__getName_28_29_20const, btConvexInternalShape__calculateSerializeBufferSize_28_29_20const, btStaticPlaneShape__serialize_28void__2c_20btSerializer__29_20const, btStaticPlaneShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShapePart___btGImpactMeshShapePart_28_29, btGImpactMeshShapePart___btGImpactMeshShapePart_28_29_1, btGImpactShapeInterface__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btGImpactMeshShapePart__setLocalScaling_28btVector3_20const__29, btGImpactMeshShapePart__getLocalScaling_28_29_20const, btGImpactMeshShapePart__calculateLocalInertia_28double_2c_20btVector3__29_20const, btGImpactMeshShapePart__getName_28_29_20const, btGImpactMeshShapePart__setMargin_28double_29, btGImpactMeshShapePart__getMargin_28_29_20const, btGImpactMeshShapePart__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactShapeInterface__calcLocalAABB_28_29, btGImpactShapeInterface__postUpdate_28_29, btGImpactShapeInterface__getShapeType_28_29_20const, btTriangleShape__getNumPlanes_28_29_20const, btGImpactMeshShapePart__getPrimitiveManager_28_29_20const, btGImpactMeshShapePart__getNumChildShapes_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btTriangleShape__getNumPlanes_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btGImpactMeshShapePart__getBulletTriangle_28int_2c_20btTriangleShapeEx__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btGImpactMeshShapePart__lockChildShapes_28_29_20const, btGImpactMeshShapePart__unlockChildShapes_28_29_20const, btGImpactShapeInterface__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btGImpactMeshShapePart__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShape___btGImpactMeshShape_28_29, btGImpactMeshShape___btGImpactMeshShape_28_29_1, btGImpactMeshShape__setLocalScaling_28btVector3_20const__29, btGImpactShapeInterface__getLocalScaling_28_29_20const, btGImpactMeshShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btGImpactMeshShape__getName_28_29_20const, btGImpactMeshShape__setMargin_28double_29, btGImpactMeshShape__calculateSerializeBufferSize_28_29_20const, btGImpactMeshShape__serialize_28void__2c_20btSerializer__29_20const, btGImpactMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShape__calcLocalAABB_28_29, btGImpactMeshShape__postUpdate_28_29, btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btGImpactMeshShape__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btGImpactMeshShape__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShapePart___btGImpactMeshShapePart_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btGImpactShapeInterface__setLocalScaling_28btVector3_20const__29, btGImpactShapeInterface__setMargin_28double_29, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btTriangleShape__getNumPlanes_28_29_20const, btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_count_28_29_20const, btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_box_28int_2c_20btAABB__29_20const, btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_triangle_28int_2c_20btPrimitiveTriangle__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCapsuleShape___btCapsuleShape_28_29, btTriangleMeshShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btTriangleMeshShape__setLocalScaling_28btVector3_20const__29, btTriangleMeshShape__getLocalScaling_28_29_20const, btTriangleShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btTriangleMeshShape__getName_28_29_20const, btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btTriangleMeshShape__localGetSupportingVertex_28btVector3_20const__29_20const, btTriangleMeshShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__FilteredCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, SupportVertexCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btQuantizedBvh___btQuantizedBvh_28_29, btQuantizedBvh___btQuantizedBvh_28_29_1, btQuantizedBvh__serialize_28void__2c_20unsigned_20int_2c_20bool_29_20const, btQuantizedBvh__calculateSerializeBufferSizeNew_28_29_20const, btQuantizedBvh__serialize_28void__2c_20btSerializer__29_20const, btQuantizedBvh__deSerializeFloat_28btQuantizedBvhFloatData__29, btQuantizedBvh__deSerializeDouble_28btQuantizedBvhDoubleData__29, btOptimizedBvh___btOptimizedBvh_28_29, btOptimizedBvh___btOptimizedBvh_28_29_1, btOptimizedBvh__serializeInPlace_28void__2c_20unsigned_20int_2c_20bool_29_20const, btManifoldResult___btManifoldResult_28_29, btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__QuantizedNodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__NodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29, btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29, btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29_1, btBvhTriangleMeshShape__setLocalScaling_28btVector3_20const__29, btBvhTriangleMeshShape__getName_28_29_20const, btCapsuleShape__calculateSerializeBufferSize_28_29_20const, btBvhTriangleMeshShape__serialize_28void__2c_20btSerializer__29_20const, btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btBvhTriangleMeshShape__serializeSingleBvh_28btSerializer__29_20const, btBvhTriangleMeshShape__serializeSingleTriangleInfoMap_28btSerializer__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__MyNodeOverlapCallback__processNode_28int_2c_20int_29, btCompoundShape___btCompoundShape_28_29, btCompoundShape___btCompoundShape_28_29_1, btCompoundShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btCompoundShape__setLocalScaling_28btVector3_20const__29, btCompoundShape__getLocalScaling_28_29_20const, btCompoundShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btCompoundShape__getName_28_29_20const, btCompoundShape__setMargin_28double_29, btCompoundShape__getMargin_28_29_20const, btCompoundShape__calculateSerializeBufferSize_28_29_20const, btCompoundShape__serialize_28void__2c_20btSerializer__29_20const, btCompoundShape__removeChildShape_28btCollisionShape__29, btCompoundShape__recalculateLocalAabb_28_29, btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29, btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29_1, btStridingMeshInterface__InternalProcessAllTriangles_28btInternalTriangleIndexCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29, btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__getNumSubParts_28_29_20const, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__hasPremadeAabb_28_29_20const, btTriangleIndexVertexArray__setPremadeAabb_28btVector3_20const__2c_20btVector3_20const__29_20const, btTriangleIndexVertexArray__getPremadeAabb_28btVector3__2c_20btVector3__29_20const, btStridingMeshInterface__calculateSerializeBufferSize_28_29_20const, btStridingMeshInterface__serialize_28void__2c_20btSerializer__29_20const, btTriangleMesh___btTriangleMesh_28_29, btTriangleMesh___btTriangleMesh_28_29_1, btTriangleMesh__preallocateVertices_28int_29, btTriangleMesh__preallocateIndices_28int_29, btConvexShape__localGetSupportVertexNonVirtual_28btVector3_20const__29_20const, btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGjkEpaPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29, btManifoldResult___btManifoldResult_28_29, btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btPointCollector__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btConvexConvexAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29, btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29_1, btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConvexAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConvexAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29, btManifoldResult___btManifoldResult_28_29, btPerturbedContactResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29, btCapsuleShape__setMargin_28double_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGImpactShapeInterface__lockChildShapes_28_29_20const, __wasm_call_ctors, btManifoldResult___btManifoldResult_28_29, btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29, btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29, btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29_1, btConvexConcaveCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConcaveCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btConvexTriangleCallback___btConvexTriangleCallback_28_29, btConvexTriangleCallback___btConvexTriangleCallback_28_29_1, btConvexTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btManifoldResult___btManifoldResult_28_29, btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29, btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29_1, btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btCompoundLeafCallback__Process_28btDbvtNode_20const__29, btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20double_29, btDbvt__ICollide__Descent_28btDbvtNode_20const__29, btDbvt__ICollide__Descent_28btDbvtNode_20const__29, btHashedSimplePairCache___btHashedSimplePairCache_28_29, btHashedSimplePairCache___btHashedSimplePairCache_28_29_1, btHashedSimplePairCache__removeOverlappingPair_28int_2c_20int_29, btHashedSimplePairCache__addOverlappingPair_28int_2c_20int_29, btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29, btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29, btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29_1, btCompoundCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, btCompoundCompoundLeafCallback__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btManifoldResult___btManifoldResult_28_29, btGImpactMeshShape__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29, btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29_1, btSphereSphereCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29, btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29, btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29_1, btSphereTriangleCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29, btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29, btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29_1, btBoxBoxCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29, btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29_1, btConvexPlaneCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29, btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29_1, btDefaultCollisionConfiguration__getPersistentManifoldPool_28_29, btDefaultCollisionConfiguration__getCollisionAlgorithmPool_28_29, btDefaultCollisionConfiguration__getCollisionAlgorithmCreateFunc_28int_2c_20int_29, btDefaultCollisionConfiguration__getClosestPointsAlgorithmCreateFunc_28int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btConvexConcaveCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btConvexConcaveCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btCompoundCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btCompoundCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btEmptyAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btSphereSphereCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btSphereTriangleCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btBoxBoxCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btConvexPlaneCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29, btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29_1, btHashedOverlappingPairCache__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btHashedOverlappingPairCache__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29, btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29, btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29, btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29, btHashedOverlappingPairCache__getOverlappingPairArray_28_29, btHashedOverlappingPairCache__cleanOverlappingPair_28btBroadphasePair__2c_20btDispatcher__29, btHashedOverlappingPairCache__getNumOverlappingPairs_28_29_20const, btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29, btHashedOverlappingPairCache__setOverlapFilterCallback_28btOverlapFilterCallback__29, btHashedOverlappingPairCache__processAllOverlappingPairs_28btOverlapCallback__2c_20btDispatcher__29, btHashedOverlappingPairCache__findPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btHashedOverlappingPairCache__setInternalGhostPairCallback_28btOverlappingPairCallback__29, btHashedOverlappingPairCache__sortOverlappingPairs_28btDispatcher__29, btManifoldResult___btManifoldResult_28_29, btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback__processOverlap_28btBroadphasePair__29, btManifoldResult___btManifoldResult_28_29, btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback__processOverlap_28btBroadphasePair__29, btDbvtBroadphase___btDbvtBroadphase_28_29, btDbvtBroadphase___btDbvtBroadphase_28_29_1, btDbvtBroadphase__createProxy_28btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20void__2c_20int_2c_20int_2c_20btDispatcher__29, btDbvtBroadphase__destroyProxy_28btBroadphaseProxy__2c_20btDispatcher__29, btDbvtBroadphase__setAabb_28btBroadphaseProxy__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDispatcher__29, btDbvtBroadphase__getAabb_28btBroadphaseProxy__2c_20btVector3__2c_20btVector3__29_20const, btDbvtBroadphase__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseRayCallback__2c_20btVector3_20const__2c_20btVector3_20const__29, btDbvtBroadphase__aabbTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseAabbCallback__29, btDbvtBroadphase__calculateOverlappingPairs_28btDispatcher__29, btDbvtBroadphase__getOverlappingPairCache_28_29, btDbvtBroadphase__getOverlappingPairCache_28_29, btDbvtBroadphase__getBroadphaseAabb_28btVector3__2c_20btVector3__29_20const, btDbvtBroadphase__resetPool_28btDispatcher__29, btGImpactShapeInterface__lockChildShapes_28_29_20const, btManifoldResult___btManifoldResult_28_29, btDbvtTreeCollider__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29, btDbvtTreeCollider__Process_28btDbvtNode_20const__29, btManifoldResult___btManifoldResult_28_29, BroadphaseRayTester__Process_28btDbvtNode_20const__29, btManifoldResult___btManifoldResult_28_29, BroadphaseRayTester__Process_28btDbvtNode_20const__29, btRigidBody___btRigidBody_28_29, btRigidBody___btRigidBody_28_29_1, btRigidBody__calculateSerializeBufferSize_28_29_20const, btRigidBody__serialize_28void__2c_20btSerializer__29_20const, btRigidBody__serializeSingleObject_28btSerializer__29_20const, gResolveSingleConstraintRowGeneric_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29, gResolveSingleConstraintRowLowerLimit_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29, gResolveSplitPenetrationImpulse_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29, btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29, btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29_1, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btSequentialImpulseConstraintSolver__solveGroup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__2c_20btDispatcher__29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btSequentialImpulseConstraintSolver__reset_28_29, btTriangleShape__getNumPlanes_28_29_20const, btSequentialImpulseConstraintSolver__convertContacts_28btPersistentManifold___2c_20int_2c_20btContactSolverInfo_20const__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySplitImpulseIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyFinish_28btCollisionObject___2c_20int_2c_20btContactSolverInfo_20const__29, btSequentialImpulseConstraintSolver__solveSingleIteration_28int_2c_20btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySetup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btManifoldResult___btManifoldResult_28_29, btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btTriangleRaycastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btTriangleConvexcastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCollisionWorld___btCollisionWorld_28_29, btCollisionWorld___btCollisionWorld_28_29_1, btCollisionWorld__updateAabbs_28_29, btCollisionWorld__computeOverlappingPairs_28_29, btCollisionWorld__setDebugDrawer_28btIDebugDraw__29, btCollisionWorld__getDebugDrawer_28_29, btCollisionWorld__debugDrawWorldClear_28_29, btCollisionWorld__debugDrawWorld_28_29, btCollisionWorld__debugDrawObject_28btTransform_20const__2c_20btCollisionShape_20const__2c_20btVector3_20const__29, btCollisionWorld__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btCollisionWorld__RayResultCallback__29_20const, btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29, btCollisionWorld__removeCollisionObject_28btCollisionObject__29, btCollisionWorld__performDiscreteCollisionDetection_28_29, btCollisionWorld__serialize_28btSerializer__29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20double_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20double_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester__Process_28btDbvtNode_20const__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__needsCollision_28btBroadphaseProxy__29_20const, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__btCompoundLeafCallback__Process_28btDbvtNode_20const__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__needsCollision_28btBroadphaseProxy__29_20const, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20double_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btSingleRayCallback__process_28btBroadphaseProxy_20const__29, btManifoldResult___btManifoldResult_28_29, btSingleSweepCallback__process_28btBroadphaseProxy_20const__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, DebugDrawcallback__processTriangle_28btVector3__2c_20int_2c_20int_29, DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29, non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29, non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29_1, non_virtual_20thunk_20to_20DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29, btSimulationIslandManager___btSimulationIslandManager_28_29, btSimulationIslandManager___btSimulationIslandManager_28_29_1, btSimulationIslandManager__updateActivationState_28btCollisionWorld__2c_20btDispatcher__29, btSimulationIslandManager__storeIslandActivationState_28btCollisionWorld__29, btTypedConstraint___btTypedConstraint_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btGImpactShapeInterface__lockChildShapes_28_29_20const, btTypedConstraint__setupSolverConstraint_28btAlignedObjectArray_btSolverConstraint___2c_20int_2c_20int_2c_20double_29, btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_29, btTypedConstraint__calculateSerializeBufferSize_28_29_20const, btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const, btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29, btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29_1, btDiscreteDynamicsWorld__debugDrawWorld_28_29, btDiscreteDynamicsWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29, btDiscreteDynamicsWorld__removeCollisionObject_28btCollisionObject__29, btDiscreteDynamicsWorld__serialize_28btSerializer__29, btDiscreteDynamicsWorld__stepSimulation_28double_2c_20int_2c_20double_29, btDiscreteDynamicsWorld__addConstraint_28btTypedConstraint__2c_20bool_29, btDiscreteDynamicsWorld__removeConstraint_28btTypedConstraint__29, btDiscreteDynamicsWorld__addAction_28btActionInterface__29, btDiscreteDynamicsWorld__removeAction_28btActionInterface__29, btDiscreteDynamicsWorld__setGravity_28btVector3_20const__29, btDiscreteDynamicsWorld__getGravity_28_29_20const, btDiscreteDynamicsWorld__synchronizeMotionStates_28_29, btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__29, btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__2c_20int_2c_20int_29, btDiscreteDynamicsWorld__removeRigidBody_28btRigidBody__29, btDiscreteDynamicsWorld__setConstraintSolver_28btConstraintSolver__29, btDiscreteDynamicsWorld__getConstraintSolver_28_29, btDiscreteDynamicsWorld__getNumConstraints_28_29_20const, btDiscreteDynamicsWorld__getConstraint_28int_29, btDiscreteDynamicsWorld__getConstraint_28int_29, btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const, btDiscreteDynamicsWorld__clearForces_28_29, btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__predictUnconstraintMotion_28double_29, btDiscreteDynamicsWorld__integrateTransforms_28double_29, btDiscreteDynamicsWorld__calculateSimulationIslands_28_29, btDiscreteDynamicsWorld__solveConstraints_28btContactSolverInfo__29, btDiscreteDynamicsWorld__updateActivationState_28double_29, btDiscreteDynamicsWorld__internalSingleStepSimulation_28double_29, btDiscreteDynamicsWorld__createPredictiveContacts_28double_29, btDiscreteDynamicsWorld__saveKinematicState_28double_29, btDiscreteDynamicsWorld__debugDrawConstraint_28btTypedConstraint__29, btDiscreteDynamicsWorld__applyGravity_28_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btDiscreteDynamicsWorld__updateVehicles_28double_29, InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29, InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29_1, InplaceSolverIslandCallback__processIsland_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btClosestNotMeConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const, btClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btGhostObject___btGhostObject_28_29, btGhostObject___btGhostObject_28_29_1, btGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29, btPairCachingGhostObject___btPairCachingGhostObject_28_29, btPairCachingGhostObject___btPairCachingGhostObject_28_29_1, btPairCachingGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btPairCachingGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29, btKinematicCharacterController___btKinematicCharacterController_28_29, btKinematicCharacterController___btKinematicCharacterController_28_29_1, btKinematicCharacterController__updateAction_28btCollisionWorld__2c_20double_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btKinematicCharacterController__setWalkDirection_28btVector3_20const__29, btKinematicCharacterController__setVelocityForTimeInterval_28btVector3_20const__2c_20double_29, btKinematicCharacterController__reset_28btCollisionWorld__29, btKinematicCharacterController__warp_28btVector3_20const__29, btKinematicCharacterController__preStep_28btCollisionWorld__29, btKinematicCharacterController__playerStep_28btCollisionWorld__2c_20double_29, btKinematicCharacterController__canJump_28_29_20const, btKinematicCharacterController__jump_28btVector3_20const__29, btKinematicCharacterController__onGround_28_29_20const, btKinematicCharacterController__setUpInterpolate_28bool_29, btKinematicCharacterController__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btKinematicCharacterController__setAngularVelocity_28btVector3_20const__29, btKinematicCharacterController__getAngularVelocity_28_29_20const, btKinematicCharacterController__setLinearVelocity_28btVector3_20const__29, btKinematicCharacterController__getLinearVelocity_28_29_20const, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__ConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const, btKinematicClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btGeneric6DofSpring2Constraint___btGeneric6DofSpring2Constraint_28_29, btGImpactShapeInterface__lockChildShapes_28_29_20const, btGeneric6DofSpring2Constraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29, btGeneric6DofSpring2Constraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29, btGeneric6DofSpring2Constraint__setParam_28int_2c_20double_2c_20int_29, btGeneric6DofSpring2Constraint__getParam_28int_2c_20int_29_20const, btGeneric6DofSpring2Constraint__calculateSerializeBufferSize_28_29_20const, btGeneric6DofSpring2Constraint__serialize_28void__2c_20btSerializer__29_20const, btTypedConstraint___btTypedConstraint_28_29, btGeneric6DofSpring2Constraint___btGeneric6DofSpring2Constraint_28_29, __cxx_global_array_dtor, btRaycastVehicle___btRaycastVehicle_28_29, btRaycastVehicle___btRaycastVehicle_28_29_1, btRaycastVehicle__updateAction_28btCollisionWorld__2c_20double_29, btRaycastVehicle__debugDraw_28btIDebugDraw__29, btRaycastVehicle__updateVehicle_28double_29, btRaycastVehicle__updateFriction_28double_29, btRaycastVehicle__setCoordinateSystem_28int_2c_20int_2c_20int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btDefaultVehicleRaycaster__castRay_28btVector3_20const__2c_20btVector3_20const__2c_20btVehicleRaycaster__btVehicleRaycasterResult__29, btAdjustInternalEdgeContactsCallback_28btManifoldPoint__2c_20btCollisionObjectWrapper_20const__2c_20int_2c_20int_2c_20btCollisionObjectWrapper_20const__2c_20int_2c_20int_29, btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29, btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29_1, btHeightfieldTerrainShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btHeightfieldTerrainShape__setLocalScaling_28btVector3_20const__29, btHeightfieldTerrainShape__getLocalScaling_28_29_20const, btTriangleShape__calculateLocalInertia_28double_2c_20btVector3__29_20const, btHeightfieldTerrainShape__getName_28_29_20const, btHeightfieldTerrainShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btHeightfieldTerrainShape__getRawHeightFieldValue_28int_2c_20int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, LayaMotionState__getWorldTransform_28btTransform__29, LayaMotionState__setWorldTransform_28btTransform_20const__29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__RayResultCallback__needsCollision_28btBroadphaseProxy__29_20const, btCollisionWorld__ClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29, btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29, btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29_1, btCollisionWorld__AllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__ClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29, btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29_1, btCollisionWorld__AllConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btIDebugDraw__getDefaultColors_28_29_20const, btTriangleIndexVertexArray__preallocateVertices_28int_29, LayaDebugDraw__drawLine_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29, btIDebugDraw__drawLine_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29, btIDebugDraw__drawSphere_28double_2c_20btTransform_20const__2c_20btVector3_20const__29, btIDebugDraw__drawSphere_28btVector3_20const__2c_20double_2c_20btVector3_20const__29, btIDebugDraw__drawTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_29, btIDebugDraw__drawTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_29, LayaDebugDraw__drawContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20int_2c_20btVector3_20const__29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, layaMotionState_set_rigidBodyID, tBtCollisionObjectArray_size, btIDebugDraw__drawAabb_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29, btIDebugDraw__drawTransform_28btTransform_20const__2c_20double_29, btIDebugDraw__drawArc_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20double_2c_20double_2c_20double_2c_20btVector3_20const__2c_20bool_2c_20double_29, btIDebugDraw__drawSpherePatch_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20btVector3_20const__2c_20double_2c_20bool_29, btIDebugDraw__drawBox_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29, btIDebugDraw__drawBox_28btVector3_20const__2c_20btVector3_20const__2c_20btTransform_20const__2c_20btVector3_20const__29, btIDebugDraw__drawCapsule_28double_2c_20double_2c_20int_2c_20btTransform_20const__2c_20btVector3_20const__29, btIDebugDraw__drawCylinder_28double_2c_20double_2c_20int_2c_20btTransform_20const__2c_20btVector3_20const__29, btIDebugDraw__drawCone_28double_2c_20double_2c_20int_2c_20btTransform_20const__2c_20btVector3_20const__29, btIDebugDraw__drawPlane_28btVector3_20const__2c_20double_2c_20btTransform_20const__2c_20btVector3_20const__29, LayaDebugDraw__clearLines_28_29, btGImpactShapeInterface__lockChildShapes_28_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGhostPairCallback__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btGhostPairCallback__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29_1, btSphereSweepResult__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29];
 __wasm_init_memory();
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "btGImpactCollisionAlgorithm_RegisterAlgorithm": btGImpactCollisionAlgorithm_RegisterAlgorithm, 
  "__heap_base": {
   get value() {
    return global$1;
   }, 
   set value(_global$1) {
    global$1 = _global$1;
   }
  }, 
  "btVector3_create": btVector3_create, 
  "btVector3_setValue": btVector3_setValue, 
  "btVector3_x": btVector3_x, 
  "btVector3_y": btVector3_y, 
  "btVector3_z": btConcaveShape__getMargin_28_29_20const, 
  "btQuaternion_create": btQuaternion_create, 
  "btQuaternion_delete": btQuaternion_delete, 
  "btQuaternion_setValue": btQuaternion_setValue, 
  "btQuaternion_x": btVector3_x, 
  "btQuaternion_y": btVector3_y, 
  "btQuaternion_z": btConcaveShape__getMargin_28_29_20const, 
  "btQuaternion_w": btQuaternion_w, 
  "btTransform_create": btTransform_create, 
  "btTransform_setOrigin": btTransform_setOrigin, 
  "btTransform_setRotation": btTransform_setRotation, 
  "btTransform_getOrigin": btGImpactShapeInterface__getLocalScaling_28_29_20const, 
  "btTransform_getRotation": btTransform_getRotation, 
  "btTransform_setIdentity": btTransform_setIdentity, 
  "btTransform_equal": btTransform_equal, 
  "btTransform_getBasis": btCollisionAlgorithm___btCollisionAlgorithm_28_29, 
  "btMatrix3x3_getRow": btMatrix3x3_getRow, 
  "btMotionState_destroy": btMotionState_destroy, 
  "layaMotionState_create": layaMotionState_create, 
  "layaMotionState_set_rigidBodyID": layaMotionState_set_rigidBodyID, 
  "btCollisionObject_create": btCollisionObject_create, 
  "btCollisionObject_setContactProcessingThreshold": btCollisionObject_setContactProcessingThreshold, 
  "btCollisionObject_setActivationState": btCollisionObject_setActivationState, 
  "btCollisionObject_forceActivationState": btCollisionObject_forceActivationState, 
  "btCollisionObject_activate": btCollisionObject_activate, 
  "btCollisionObject_isActive": btCollisionObject_isActive, 
  "btCollisionObject_setRestitution": btCollisionObject_setRestitution, 
  "btCollisionObject_setFriction": btCollisionObject_setFriction, 
  "btCollisionObject_setRollingFriction": btCollisionObject_setRollingFriction, 
  "btCollisionObject_getCollisionFlags": btCollisionObject_getCollisionFlags, 
  "btCollisionObject_setCollisionFlags": btCollisionObject_setCollisionFlags, 
  "btCollisionObject_getWorldTransform": btCollisionObject_getWorldTransform, 
  "btCollisionObject_setWorldTransform": btCollisionObject_setWorldTransform, 
  "btCollisionObject_setInterpolationWorldTransform": btCollisionObject_setInterpolationWorldTransform, 
  "btCollisionObject_setCollisionShape": btCollisionObject_setCollisionShape, 
  "btCollisionObject_getCcdMotionThreshold": btCollisionObject_getCcdMotionThreshold, 
  "btCollisionObject_setCcdMotionThreshold": btCollisionObject_setCcdMotionThreshold, 
  "btCollisionObject_getCcdSweptSphereRadius": btCollisionObject_getCcdSweptSphereRadius, 
  "btCollisionObject_setCcdSweptSphereRadius": btCollisionObject_setCcdSweptSphereRadius, 
  "btCollisionObject_getUserIndex": btCollisionObject_getUserIndex, 
  "btCollisionObject_setUserIndex": btCollisionObject_setUserIndex, 
  "btCollisionObject_getActivationState": btCollisionObject_getActivationState, 
  "btCollisionObject_setInterpolationAngularVelocity": btCollisionObject_setInterpolationAngularVelocity, 
  "btCollisionObject_setInterpolationLinearVelocity": btCollisionObject_setInterpolationLinearVelocity, 
  "btCollisionObject_getNumOverlappingObjects": btCollisionObject_getNumOverlappingObjects, 
  "btCollisionObject_getOverlappingObject": btCollisionObject_getOverlappingObject, 
  "btCollisionObject_destroy": btMotionState_destroy, 
  "RayResultCallback_set_m_flags": RayResultCallback_set_m_flags, 
  "RayResultCallback_hasHit": RayResultCallback_hasHit, 
  "RayResultCallback_set_m_collisionFilterGroup": RayResultCallback_set_m_collisionFilterGroup, 
  "RayResultCallback_set_m_collisionFilterMask": btHashedOverlappingPairCache__setOverlapFilterCallback_28btOverlapFilterCallback__29, 
  "RayResultCallback_get_m_closestHitFraction": btVector3_y, 
  "RayResultCallback_set_m_closestHitFraction": RayResultCallback_set_m_closestHitFraction, 
  "RayResultCallback_get_m_collisionObject": btDefaultCollisionConfiguration__getCollisionAlgorithmPool_28_29, 
  "RayResultCallback_set_m_collisionObject": RayResultCallback_set_m_collisionObject, 
  "ClosestRayResultCallback_create": ClosestRayResultCallback_create, 
  "ClosestRayResultCallback_get_m_rayFromWorld": ClosestRayResultCallback_get_m_rayFromWorld, 
  "ClosestRayResultCallback_set_m_rayFromWorld": ClosestRayResultCallback_set_m_rayFromWorld, 
  "ClosestRayResultCallback_get_m_rayToWorld": ClosestRayResultCallback_get_m_rayToWorld, 
  "ClosestRayResultCallback_set_m_rayToWorld": ClosestRayResultCallback_set_m_rayToWorld, 
  "ClosestRayResultCallback_get_m_hitNormalWorld": btGImpactShapeInterface__getLocalScaling_28_29_20const, 
  "ClosestRayResultCallback_get_m_hitPointWorld": btStaticPlaneShape__getLocalScaling_28_29_20const, 
  "tBtCollisionObjectArray_size": tBtCollisionObjectArray_size, 
  "tBtCollisionObjectArray_at": tBtCollisionObjectArray_at, 
  "tBtCollisionObjectArray_clear": btUnionFind___btUnionFind_28_29, 
  "tVector3Array_at": tVector3Array_at, 
  "tVector3Array_clear": btUnionFind___btUnionFind_28_29, 
  "tScalarArray_at": tScalarArray_at, 
  "tScalarArray_clear": btUnionFind___btUnionFind_28_29, 
  "AllHitsRayResultCallback_create": AllHitsRayResultCallback_create, 
  "AllHitsRayResultCallback_get_m_rayFromWorld": AllHitsRayResultCallback_get_m_rayFromWorld, 
  "AllHitsRayResultCallback_set_m_rayFromWorld": AllHitsRayResultCallback_set_m_rayFromWorld, 
  "AllHitsRayResultCallback_get_m_rayToWorld": AllHitsRayResultCallback_get_m_rayToWorld, 
  "AllHitsRayResultCallback_set_m_rayToWorld": AllHitsRayResultCallback_set_m_rayToWorld, 
  "AllHitsRayResultCallback_get_m_hitPointWorld": AllHitsRayResultCallback_get_m_hitPointWorld, 
  "AllHitsRayResultCallback_get_m_hitNormalWorld": btCompoundShape__getLocalScaling_28_29_20const, 
  "AllHitsRayResultCallback_get_m_collisionObjects": ClosestRayResultCallback_get_m_rayFromWorld, 
  "AllHitsRayResultCallback_get_m_hitFractions": AllHitsRayResultCallback_get_m_hitFractions, 
  "btManifoldPoint_get_m_positionWorldOnA": btGImpactShapeInterface__getLocalScaling_28_29_20const, 
  "btManifoldPoint_get_m_positionWorldOnB": ClosestRayResultCallback_get_m_rayToWorld, 
  "btManifoldPoint_get_m_normalWorldOnB": btStaticPlaneShape__getLocalScaling_28_29_20const, 
  "btManifoldPoint_getDistance": btManifoldPoint_getDistance, 
  "ConvexResultCallback_hasHit": ConvexResultCallback_hasHit, 
  "ConvexResultCallback_set_m_collisionFilterGroup": RayResultCallback_set_m_collisionObject, 
  "ConvexResultCallback_set_m_collisionFilterMask": RayResultCallback_set_m_collisionFilterGroup, 
  "ConvexResultCallback_get_m_closestHitFraction": btVector3_y, 
  "ConvexResultCallback_set_m_closestHitFraction": RayResultCallback_set_m_closestHitFraction, 
  "ClosestConvexResultCallback_create": ClosestConvexResultCallback_create, 
  "ClosestConvexResultCallback_get_m_hitNormalWorld": AllHitsRayResultCallback_get_m_rayToWorld, 
  "ClosestConvexResultCallback_get_m_hitPointWorld": btCompoundShape__getLocalScaling_28_29_20const, 
  "ClosestConvexResultCallback_get_m_hitCollisionObject": ClosestConvexResultCallback_get_m_hitCollisionObject, 
  "ClosestConvexResultCallback_set_m_hitCollisionObject": ClosestConvexResultCallback_set_m_hitCollisionObject, 
  "AllConvexResultCallback_create": AllConvexResultCallback_create, 
  "AllConvexResultCallback_get_m_hitNormalWorld": AllConvexResultCallback_get_m_hitNormalWorld, 
  "AllConvexResultCallback_get_m_hitPointWorld": AllConvexResultCallback_get_m_hitPointWorld, 
  "AllConvexResultCallback_get_m_hitFractions": AllConvexResultCallback_get_m_hitFractions, 
  "AllConvexResultCallback_get_m_collisionObjects": AllConvexResultCallback_get_m_collisionObjects, 
  "btCollisionShape_getLocalScaling": btCollisionShape_getLocalScaling, 
  "btCollisionShape_setLocalScaling": btCollisionShape_setLocalScaling, 
  "btCollisionShape_calculateLocalInertia": btCollisionShape_calculateLocalInertia, 
  "btCollisionShape_destroy": btMotionState_destroy, 
  "btBoxShape_create": btBoxShape_create, 
  "btCapsuleShape_create": btCapsuleShape_create, 
  "btCapsuleShapeX_create": btCapsuleShapeX_create, 
  "btCapsuleShapeZ_create": btCapsuleShapeZ_create, 
  "btCylinderShape_create": btCylinderShape_create, 
  "btCylinderShapeX_create": btCylinderShapeX_create, 
  "btCylinderShapeZ_create": btCylinderShapeZ_create, 
  "btSphereShape_create": btSphereShape_create, 
  "btSphereShpae_setUnscaledRadius": btSphereShpae_setUnscaledRadius, 
  "btConeShape_create": btConeShape_create, 
  "btConeShapeX_create": btConeShapeX_create, 
  "btConeShapeZ_create": btConeShapeZ_create, 
  "btStaticPlaneShape_create": btStaticPlaneShape_create, 
  "btGImpactShapeInterface_updateBound": btGImpactShapeInterface_updateBound, 
  "btGImpactMeshShape_create": btGImpactMeshShape_create, 
  "btBvhTriangleMeshShape_create": btBvhTriangleMeshShape_create, 
  "btCompoundShape_create": btCompoundShape_create, 
  "btCompoundShape_addChildShape": btCompoundShape_addChildShape, 
  "btCompoundShape_removeChildShapeByIndex": btCompoundShape_removeChildShapeByIndex, 
  "btCompoundShape_getChildShape": btCompoundShape_getChildShape, 
  "btCompoundShape_updateChildTransform": btCompoundShape_updateChildTransform, 
  "btStridingMeshInterface_destroy": btMotionState_destroy, 
  "btConcaveShape_setMargin": btConcaveShape_setMargin, 
  "btConcaveShape_getMargin": btConcaveShape_getMargin, 
  "btTriangleMesh_create": btTriangleMesh_create, 
  "btTriangleMesh_addTriangle": btTriangleMesh_addTriangle, 
  "btDefaultCollisionConfiguration_create": btDefaultCollisionConfiguration_create, 
  "btDefaultCollisionConfiguration_destroy": btMotionState_destroy, 
  "btPersistentManifold_getBody0": btPersistentManifold_getBody0, 
  "btPersistentManifold_getBody1": btPersistentManifold_getBody1, 
  "btPersistentManifold_getNumContacts": btPersistentManifold_getNumContacts, 
  "btPersistentManifold_getContactPoint": btPersistentManifold_getContactPoint, 
  "btDispatcher_getNumManifolds": btDispatcher_getNumManifolds, 
  "btDispatcher_getManifoldByIndexInternal": btDispatcher_getManifoldByIndexInternal, 
  "btCollisionDispatcher_create": btCollisionDispatcher_create, 
  "btCollisionDispatcher_destroy": btMotionState_destroy, 
  "btOverlappingPairCache_setInternalGhostPairCallback": btOverlappingPairCache_setInternalGhostPairCallback, 
  "btDbvtBroadphase_create": btDbvtBroadphase_create, 
  "btDbvtBroadphase_getOverlappingPairCache": btDispatcher_getNumManifolds, 
  "btDbvtBroadphase_destroy": btMotionState_destroy, 
  "btRigidBodyConstructionInfo_create": btRigidBodyConstructionInfo_create, 
  "btRigidBodyConstructionInfo_destroy": btQuaternion_delete, 
  "btRigidBody_create": btRigidBody_create, 
  "btRigidBody_setCenterOfMassTransform": btRigidBody__proceedToTransform_28btTransform_20const__29, 
  "btRigidBody_setCenterOfMassPos": btRigidBody_setCenterOfMassPos, 
  "btRigidBody_setCenterOfMassOrientation": btRigidBody_setCenterOfMassOrientation, 
  "btRigidBody_setSleepingThresholds": btRigidBody_setSleepingThresholds, 
  "btRigidBody_getLinearSleepingThreshold": btRigidBody_getLinearSleepingThreshold, 
  "btRigidBody_getAngularSleepingThreshold": btRigidBody_getAngularSleepingThreshold, 
  "btRigidBody_setDamping": btRigidBody_setDamping, 
  "btRigidBody_setMassProps": btRigidBody_setMassProps, 
  "btRigidBody_setLinearFactor": btRigidBody_setLinearFactor, 
  "btRigidBody_applyTorque": btRigidBody_applyTorque, 
  "btRigidBody_applyForce": btRigidBody_applyForce, 
  "btRigidBody_applyCentralForce": btRigidBody_applyCentralForce, 
  "btRigidBody_applyTorqueImpulse": btRigidBody_applyTorqueImpulse, 
  "btRigidBody_applyImpulse": btRigidBody_applyImpulse, 
  "btRigidBody_applyCentralImpulse": btRigidBody_applyCentralImpulse, 
  "btRigidBody_updateInertiaTensor": btRigidBody_updateInertiaTensor, 
  "btRigidBody_getLinearVelocity": btRigidBody_getLinearVelocity, 
  "btRigidBody_getAngularVelocity": btRigidBody_getAngularVelocity, 
  "btRigidBody_setLinearVelocity": btRigidBody_setLinearVelocity, 
  "btRigidBody_setAngularVelocity": btRigidBody_setAngularVelocity, 
  "btRigidBody_setAngularFactor": btRigidBody_setAngularFactor, 
  "btRigidBody_getGravity": btRigidBody_getGravity, 
  "btRigidBody_setGravity": btRigidBody_setGravity, 
  "btRigidBody_getTotalForce": btRigidBody_getTotalForce, 
  "btRigidBody_getTotalTorque": btRigidBody_getTotalTorque, 
  "btRigidBody_getFlags": btRigidBody_getFlags, 
  "btRigidBody_setFlags": btRigidBody_setFlags, 
  "btRigidBody_clearForces": btRigidBody_clearForces, 
  "btRigidBody_getMotionState": btRigidBody_getMotionState, 
  "btSequentialImpulseConstraintSolver_create": btSequentialImpulseConstraintSolver_create, 
  "btCollisionWorld_get_m_useContinuous": btCollisionWorld_get_m_useContinuous, 
  "btCollisionWorld_set_m_useContinuous": btCollisionWorld_set_m_useContinuous, 
  "btCollisionWorld_set_UserInfo": btCollisionWorld_set_UserInfo, 
  "btCollisionWorld_get_UserInfo": btCollisionWorld_get_UserInfo, 
  "btCollisionWorld_rayTest": btCollisionWorld_rayTest, 
  "btCollisionWorld_getDispatchInfo": ClosestRayResultCallback_get_m_rayFromWorld, 
  "btCollisionWorld_addCollisionObject": btCollisionWorld_addCollisionObject, 
  "btCollisionWorld_removeCollisionObject": btCollisionWorld_removeCollisionObject, 
  "btCollisionWorld_convexSweepTest": btCollisionWorld_convexSweepTest, 
  "btCollisionWorld_destroy": btMotionState_destroy, 
  "btDynamicsWorld_enableDebugDrawer": btDynamicsWorld_enableDebugDrawer, 
  "btDynamicsWorld_addAction": btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29, 
  "btDynamicsWorld_removeAction": btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29, 
  "btDynamicsWorld_getSolverInfo": btCompoundShape__getLocalScaling_28_29_20const, 
  "btDiscreteDynamicsWorld_create": btDiscreteDynamicsWorld_create, 
  "btDiscreteDynamicsWorld_setGravity": btDiscreteDynamicsWorld_setGravity, 
  "btDiscreteDynamicsWorld_getGravity": btDiscreteDynamicsWorld_getGravity, 
  "btDiscreteDynamicsWorld_addRigidBody": btDiscreteDynamicsWorld_addRigidBody, 
  "btDiscreteDynamicsWorld_removeRigidBody": btDiscreteDynamicsWorld_removeRigidBody, 
  "btDiscreteDynamicsWorld_stepSimulation": btDiscreteDynamicsWorld_stepSimulation, 
  "btDiscreteDynamicsWorld_SphereQuery": btDiscreteDynamicsWorld_SphereQuery, 
  "btDiscreteDynamicsWorld_clearForces": btDiscreteDynamicsWorld_clearForces, 
  "btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution": btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution, 
  "btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution": btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution, 
  "btKinematicCharacterController_create": btKinematicCharacterController_create, 
  "btKinematicCharacterController_setWalkDirection": btKinematicCharacterController_setWalkDirection, 
  "btKinematicCharacterController_setFallSpeed": btKinematicCharacterController_setFallSpeed, 
  "btKinematicCharacterController_setJumpSpeed": btKinematicCharacterController_setJumpSpeed, 
  "btKinematicCharacterController_setJumpAxis": btKinematicCharacterController_setJumpAxis, 
  "btKinematicCharacterController_setPushForce": btKinematicCharacterController_setPushForce, 
  "btKinematicCharacterController_getPushForce": btKinematicCharacterController_getPushForce, 
  "btKinematicCharacterController_setMaxSlope": btKinematicCharacterController_setMaxSlope, 
  "btKinematicCharacterController_onGround": btKinematicCharacterController__canJump_28_29_20const, 
  "btKinematicCharacterController_jump": btCollisionWorld_removeCollisionObject, 
  "btKinematicCharacterController_setGravity": btKinematicCharacterController_setGravity, 
  "btKinematicCharacterController_setUp": btKinematicCharacterController_setUp, 
  "btKinematicCharacterController_setStepHeight": btKinematicCharacterController_setStepHeight, 
  "btKinematicCharacterController_getHitFlag": btKinematicCharacterController_getHitFlag, 
  "btKinematicCharacterController_getVerticalVelocity": btKinematicCharacterController_getVerticalVelocity, 
  "btKinematicCharacterController_getCurrentPosition": btGImpactMeshShapePart__getPrimitiveManager_28_29_20const, 
  "btKinematicCharacterController_setCurrentPosition": btKinematicCharacterController_setCurrentPosition, 
  "btKinematicCharacterController_getCurrentOrientation": btKinematicCharacterController_getCurrentOrientation, 
  "btKinematicCharacterController_setUseGhostSweepTest": btKinematicCharacterController_setUseGhostSweepTest, 
  "btKinematicCharacterController_AllHitInfo_get_m_collisionObjects": btKinematicCharacterController_AllHitInfo_get_m_collisionObjects, 
  "btKinematicCharacterController_destroy": btMotionState_destroy, 
  "btPairCachingGhostObject_create": btPairCachingGhostObject_create, 
  "btGhostPairCallback_create": btGhostPairCallback_create, 
  "btTypedConstraint_setEnabled": btCollisionWorld_set_m_useContinuous, 
  "btCollisionWorld_addConstraint": btCollisionWorld_addConstraint, 
  "btCollisionWorld_removeConstraint": btCollisionWorld_removeConstraint, 
  "btJointFeedback_create": btJointFeedback_create, 
  "btJointFeedback_destroy": btJointFeedback_destroy, 
  "btTypedConstraint_setJointFeedback": btTypedConstraint_setJointFeedback, 
  "btJointFeedback_getAppliedForceBodyA": btCollisionAlgorithm___btCollisionAlgorithm_28_29, 
  "btJointFeedback_getAppliedForceBodyB": ClosestRayResultCallback_get_m_rayToWorld, 
  "btJointFeedback_getAppliedTorqueBodyA": ClosestRayResultCallback_get_m_rayFromWorld, 
  "btJointFeedback_getAppliedTorqueBodyB": btGImpactShapeInterface__getLocalScaling_28_29_20const, 
  "btFixedConstraint_create": btFixedConstraint_create, 
  "btGeneric6DofSpring2Constraint_create": btGeneric6DofSpring2Constraint_create, 
  "btGeneric6DofSpring2Constraint_setAxis": btGeneric6DofSpring2Constraint_setAxis, 
  "btGeneric6DofSpring2Constraint_setLimit": btGeneric6DofSpring2Constraint_setLimit, 
  "btGeneric6DofSpring2Constraint_enableSpring": btGeneric6DofSpring2Constraint_enableSpring, 
  "btGeneric6DofSpring2Constraint_setBounce": btGeneric6DofSpring2Constraint_setBounce, 
  "btGeneric6DofSpring2Constraint_setStiffness": btGeneric6DofSpring2Constraint_setStiffness, 
  "btGeneric6DofSpring2Constraint_setDamping": btGeneric6DofSpring2Constraint_setDamping, 
  "btGeneric6DofSpring2Constraint_setEquilibriumPoint": btGeneric6DofSpring2Constraint_setEquilibriumPoint, 
  "btGeneric6DofSpring2Constraint_enableMotor": btGeneric6DofSpring2Constraint_enableMotor, 
  "btGeneric6DofSpring2Constraint_setServo": btGeneric6DofSpring2Constraint_setServo, 
  "btGeneric6DofSpring2Constraint_setTargetVelocity": btGeneric6DofSpring2Constraint_setTargetVelocity, 
  "btGeneric6DofSpring2Constraint_setServoTarget": btGeneric6DofSpring2Constraint_setServoTarget, 
  "btGeneric6DofSpring2Constraint_setMaxMotorForce": btGeneric6DofSpring2Constraint_setMaxMotorForce, 
  "btGeneric6DofSpring2Constraint_setFrames": btGeneric6DofSpring2Constraint_setFrames, 
  "btGeneric6DofSpring2Constraint_setRotationOrder": btGeneric6DofSpring2Constraint_setRotationOrder, 
  "btRaycastVehicle_create": btRaycastVehicle_create, 
  "btRaycastVehicle_addWheel": btRaycastVehicle_addWheel, 
  "btRaycastVehicle_getNumWheels": btRaycastVehicle_getNumWheels, 
  "btRaycastVehicle_destroy": btMotionState_destroy, 
  "btRaycastVehicle_getWheelInfo": btRaycastVehicle_getWheelInfo, 
  "btWheelInfo_setEengineForce": btCollisionObject_setCcdSweptSphereRadius, 
  "btWheelInfo_getEengineForce": btWheelInfo_getEengineForce, 
  "btWheelInfo_setSteeringValue": btWheelInfo_setSteeringValue, 
  "btWheelInfo_getSteeringValue": btWheelInfo_getSteeringValue, 
  "btWheelInfo_setBrake": btCollisionObject_setCcdMotionThreshold, 
  "btWheelInfo_getBrake": btCollisionObject_getCcdMotionThreshold, 
  "btWheelInfo_getWorldTransform": btWheelInfo_getWorldTransform, 
  "btWheelInfo_getRrotation": btWheelInfo_getRrotation, 
  "btWheelInfo_getDeltaRotation": btWheelInfo_getDeltaRotation, 
  "btHeightfieldTerrainShape_create": btHeightfieldTerrainShape_create, 
  "_malloc": btAllocDefault_28unsigned_20long_29, 
  "_free": btFreeDefault_28void__29, 
  "solveSphereHit": solveSphereHit, 
  "main": btBU_Simplex1to4__getIndex_28int_29_20const
 };
}

var memasmFunc = new ArrayBuffer(initialMemory);
var retasmFunc = asmFunc(  { abort: function() { throw new Error('abort'); },
    fd_close,
    fd_write,
    getWorldTransform,
    setWorldTransform,
    drawLine,
    clearLine,
    fd_seek,
    memory: { buffer : memasmFunc }
  });
exports.btGImpactCollisionAlgorithm_RegisterAlgorithm = retasmFunc.btGImpactCollisionAlgorithm_RegisterAlgorithm;
exports.__heap_base = retasmFunc.__heap_base;
exports.btVector3_create = retasmFunc.btVector3_create;
exports.btVector3_setValue = retasmFunc.btVector3_setValue;
exports.btVector3_x = retasmFunc.btVector3_x;
exports.btVector3_y = retasmFunc.btVector3_y;
exports.btVector3_z = retasmFunc.btVector3_z;
exports.btQuaternion_create = retasmFunc.btQuaternion_create;
exports.btQuaternion_delete = retasmFunc.btQuaternion_delete;
exports.btQuaternion_setValue = retasmFunc.btQuaternion_setValue;
exports.btQuaternion_x = retasmFunc.btQuaternion_x;
exports.btQuaternion_y = retasmFunc.btQuaternion_y;
exports.btQuaternion_z = retasmFunc.btQuaternion_z;
exports.btQuaternion_w = retasmFunc.btQuaternion_w;
exports.btTransform_create = retasmFunc.btTransform_create;
exports.btTransform_setOrigin = retasmFunc.btTransform_setOrigin;
exports.btTransform_setRotation = retasmFunc.btTransform_setRotation;
exports.btTransform_getOrigin = retasmFunc.btTransform_getOrigin;
exports.btTransform_getRotation = retasmFunc.btTransform_getRotation;
exports.btTransform_setIdentity = retasmFunc.btTransform_setIdentity;
exports.btTransform_equal = retasmFunc.btTransform_equal;
exports.btTransform_getBasis = retasmFunc.btTransform_getBasis;
exports.btMatrix3x3_getRow = retasmFunc.btMatrix3x3_getRow;
exports.btMotionState_destroy = retasmFunc.btMotionState_destroy;
exports.layaMotionState_create = retasmFunc.layaMotionState_create;
exports.layaMotionState_set_rigidBodyID = retasmFunc.layaMotionState_set_rigidBodyID;
exports.btCollisionObject_create = retasmFunc.btCollisionObject_create;
exports.btCollisionObject_setContactProcessingThreshold = retasmFunc.btCollisionObject_setContactProcessingThreshold;
exports.btCollisionObject_setActivationState = retasmFunc.btCollisionObject_setActivationState;
exports.btCollisionObject_forceActivationState = retasmFunc.btCollisionObject_forceActivationState;
exports.btCollisionObject_activate = retasmFunc.btCollisionObject_activate;
exports.btCollisionObject_isActive = retasmFunc.btCollisionObject_isActive;
exports.btCollisionObject_setRestitution = retasmFunc.btCollisionObject_setRestitution;
exports.btCollisionObject_setFriction = retasmFunc.btCollisionObject_setFriction;
exports.btCollisionObject_setRollingFriction = retasmFunc.btCollisionObject_setRollingFriction;
exports.btCollisionObject_getCollisionFlags = retasmFunc.btCollisionObject_getCollisionFlags;
exports.btCollisionObject_setCollisionFlags = retasmFunc.btCollisionObject_setCollisionFlags;
exports.btCollisionObject_getWorldTransform = retasmFunc.btCollisionObject_getWorldTransform;
exports.btCollisionObject_setWorldTransform = retasmFunc.btCollisionObject_setWorldTransform;
exports.btCollisionObject_setInterpolationWorldTransform = retasmFunc.btCollisionObject_setInterpolationWorldTransform;
exports.btCollisionObject_setCollisionShape = retasmFunc.btCollisionObject_setCollisionShape;
exports.btCollisionObject_getCcdMotionThreshold = retasmFunc.btCollisionObject_getCcdMotionThreshold;
exports.btCollisionObject_setCcdMotionThreshold = retasmFunc.btCollisionObject_setCcdMotionThreshold;
exports.btCollisionObject_getCcdSweptSphereRadius = retasmFunc.btCollisionObject_getCcdSweptSphereRadius;
exports.btCollisionObject_setCcdSweptSphereRadius = retasmFunc.btCollisionObject_setCcdSweptSphereRadius;
exports.btCollisionObject_getUserIndex = retasmFunc.btCollisionObject_getUserIndex;
exports.btCollisionObject_setUserIndex = retasmFunc.btCollisionObject_setUserIndex;
exports.btCollisionObject_getActivationState = retasmFunc.btCollisionObject_getActivationState;
exports.btCollisionObject_setInterpolationAngularVelocity = retasmFunc.btCollisionObject_setInterpolationAngularVelocity;
exports.btCollisionObject_setInterpolationLinearVelocity = retasmFunc.btCollisionObject_setInterpolationLinearVelocity;
exports.btCollisionObject_getNumOverlappingObjects = retasmFunc.btCollisionObject_getNumOverlappingObjects;
exports.btCollisionObject_getOverlappingObject = retasmFunc.btCollisionObject_getOverlappingObject;
exports.btCollisionObject_destroy = retasmFunc.btCollisionObject_destroy;
exports.RayResultCallback_set_m_flags = retasmFunc.RayResultCallback_set_m_flags;
exports.RayResultCallback_hasHit = retasmFunc.RayResultCallback_hasHit;
exports.RayResultCallback_set_m_collisionFilterGroup = retasmFunc.RayResultCallback_set_m_collisionFilterGroup;
exports.RayResultCallback_set_m_collisionFilterMask = retasmFunc.RayResultCallback_set_m_collisionFilterMask;
exports.RayResultCallback_get_m_closestHitFraction = retasmFunc.RayResultCallback_get_m_closestHitFraction;
exports.RayResultCallback_set_m_closestHitFraction = retasmFunc.RayResultCallback_set_m_closestHitFraction;
exports.RayResultCallback_get_m_collisionObject = retasmFunc.RayResultCallback_get_m_collisionObject;
exports.RayResultCallback_set_m_collisionObject = retasmFunc.RayResultCallback_set_m_collisionObject;
exports.ClosestRayResultCallback_create = retasmFunc.ClosestRayResultCallback_create;
exports.ClosestRayResultCallback_get_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_get_m_rayFromWorld;
exports.ClosestRayResultCallback_set_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_set_m_rayFromWorld;
exports.ClosestRayResultCallback_get_m_rayToWorld = retasmFunc.ClosestRayResultCallback_get_m_rayToWorld;
exports.ClosestRayResultCallback_set_m_rayToWorld = retasmFunc.ClosestRayResultCallback_set_m_rayToWorld;
exports.ClosestRayResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestRayResultCallback_get_m_hitNormalWorld;
exports.ClosestRayResultCallback_get_m_hitPointWorld = retasmFunc.ClosestRayResultCallback_get_m_hitPointWorld;
exports.tBtCollisionObjectArray_size = retasmFunc.tBtCollisionObjectArray_size;
exports.tBtCollisionObjectArray_at = retasmFunc.tBtCollisionObjectArray_at;
exports.tBtCollisionObjectArray_clear = retasmFunc.tBtCollisionObjectArray_clear;
exports.tVector3Array_at = retasmFunc.tVector3Array_at;
exports.tVector3Array_clear = retasmFunc.tVector3Array_clear;
exports.tScalarArray_at = retasmFunc.tScalarArray_at;
exports.tScalarArray_clear = retasmFunc.tScalarArray_clear;
exports.AllHitsRayResultCallback_create = retasmFunc.AllHitsRayResultCallback_create;
exports.AllHitsRayResultCallback_get_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayFromWorld;
exports.AllHitsRayResultCallback_set_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayFromWorld;
exports.AllHitsRayResultCallback_get_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayToWorld;
exports.AllHitsRayResultCallback_set_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayToWorld;
exports.AllHitsRayResultCallback_get_m_hitPointWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitPointWorld;
exports.AllHitsRayResultCallback_get_m_hitNormalWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitNormalWorld;
exports.AllHitsRayResultCallback_get_m_collisionObjects = retasmFunc.AllHitsRayResultCallback_get_m_collisionObjects;
exports.AllHitsRayResultCallback_get_m_hitFractions = retasmFunc.AllHitsRayResultCallback_get_m_hitFractions;
exports.btManifoldPoint_get_m_positionWorldOnA = retasmFunc.btManifoldPoint_get_m_positionWorldOnA;
exports.btManifoldPoint_get_m_positionWorldOnB = retasmFunc.btManifoldPoint_get_m_positionWorldOnB;
exports.btManifoldPoint_get_m_normalWorldOnB = retasmFunc.btManifoldPoint_get_m_normalWorldOnB;
exports.btManifoldPoint_getDistance = retasmFunc.btManifoldPoint_getDistance;
exports.ConvexResultCallback_hasHit = retasmFunc.ConvexResultCallback_hasHit;
exports.ConvexResultCallback_set_m_collisionFilterGroup = retasmFunc.ConvexResultCallback_set_m_collisionFilterGroup;
exports.ConvexResultCallback_set_m_collisionFilterMask = retasmFunc.ConvexResultCallback_set_m_collisionFilterMask;
exports.ConvexResultCallback_get_m_closestHitFraction = retasmFunc.ConvexResultCallback_get_m_closestHitFraction;
exports.ConvexResultCallback_set_m_closestHitFraction = retasmFunc.ConvexResultCallback_set_m_closestHitFraction;
exports.ClosestConvexResultCallback_create = retasmFunc.ClosestConvexResultCallback_create;
exports.ClosestConvexResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitNormalWorld;
exports.ClosestConvexResultCallback_get_m_hitPointWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitPointWorld;
exports.ClosestConvexResultCallback_get_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_get_m_hitCollisionObject;
exports.ClosestConvexResultCallback_set_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_set_m_hitCollisionObject;
exports.AllConvexResultCallback_create = retasmFunc.AllConvexResultCallback_create;
exports.AllConvexResultCallback_get_m_hitNormalWorld = retasmFunc.AllConvexResultCallback_get_m_hitNormalWorld;
exports.AllConvexResultCallback_get_m_hitPointWorld = retasmFunc.AllConvexResultCallback_get_m_hitPointWorld;
exports.AllConvexResultCallback_get_m_hitFractions = retasmFunc.AllConvexResultCallback_get_m_hitFractions;
exports.AllConvexResultCallback_get_m_collisionObjects = retasmFunc.AllConvexResultCallback_get_m_collisionObjects;
exports.btCollisionShape_getLocalScaling = retasmFunc.btCollisionShape_getLocalScaling;
exports.btCollisionShape_setLocalScaling = retasmFunc.btCollisionShape_setLocalScaling;
exports.btCollisionShape_calculateLocalInertia = retasmFunc.btCollisionShape_calculateLocalInertia;
exports.btCollisionShape_destroy = retasmFunc.btCollisionShape_destroy;
exports.btBoxShape_create = retasmFunc.btBoxShape_create;
exports.btCapsuleShape_create = retasmFunc.btCapsuleShape_create;
exports.btCapsuleShapeX_create = retasmFunc.btCapsuleShapeX_create;
exports.btCapsuleShapeZ_create = retasmFunc.btCapsuleShapeZ_create;
exports.btCylinderShape_create = retasmFunc.btCylinderShape_create;
exports.btCylinderShapeX_create = retasmFunc.btCylinderShapeX_create;
exports.btCylinderShapeZ_create = retasmFunc.btCylinderShapeZ_create;
exports.btSphereShape_create = retasmFunc.btSphereShape_create;
exports.btSphereShpae_setUnscaledRadius = retasmFunc.btSphereShpae_setUnscaledRadius;
exports.btConeShape_create = retasmFunc.btConeShape_create;
exports.btConeShapeX_create = retasmFunc.btConeShapeX_create;
exports.btConeShapeZ_create = retasmFunc.btConeShapeZ_create;
exports.btStaticPlaneShape_create = retasmFunc.btStaticPlaneShape_create;
exports.btGImpactShapeInterface_updateBound = retasmFunc.btGImpactShapeInterface_updateBound;
exports.btGImpactMeshShape_create = retasmFunc.btGImpactMeshShape_create;
exports.btBvhTriangleMeshShape_create = retasmFunc.btBvhTriangleMeshShape_create;
exports.btCompoundShape_create = retasmFunc.btCompoundShape_create;
exports.btCompoundShape_addChildShape = retasmFunc.btCompoundShape_addChildShape;
exports.btCompoundShape_removeChildShapeByIndex = retasmFunc.btCompoundShape_removeChildShapeByIndex;
exports.btCompoundShape_getChildShape = retasmFunc.btCompoundShape_getChildShape;
exports.btCompoundShape_updateChildTransform = retasmFunc.btCompoundShape_updateChildTransform;
exports.btStridingMeshInterface_destroy = retasmFunc.btStridingMeshInterface_destroy;
exports.btConcaveShape_setMargin = retasmFunc.btConcaveShape_setMargin;
exports.btConcaveShape_getMargin = retasmFunc.btConcaveShape_getMargin;
exports.btTriangleMesh_create = retasmFunc.btTriangleMesh_create;
exports.btTriangleMesh_addTriangle = retasmFunc.btTriangleMesh_addTriangle;
exports.btDefaultCollisionConfiguration_create = retasmFunc.btDefaultCollisionConfiguration_create;
exports.btDefaultCollisionConfiguration_destroy = retasmFunc.btDefaultCollisionConfiguration_destroy;
exports.btPersistentManifold_getBody0 = retasmFunc.btPersistentManifold_getBody0;
exports.btPersistentManifold_getBody1 = retasmFunc.btPersistentManifold_getBody1;
exports.btPersistentManifold_getNumContacts = retasmFunc.btPersistentManifold_getNumContacts;
exports.btPersistentManifold_getContactPoint = retasmFunc.btPersistentManifold_getContactPoint;
exports.btDispatcher_getNumManifolds = retasmFunc.btDispatcher_getNumManifolds;
exports.btDispatcher_getManifoldByIndexInternal = retasmFunc.btDispatcher_getManifoldByIndexInternal;
exports.btCollisionDispatcher_create = retasmFunc.btCollisionDispatcher_create;
exports.btCollisionDispatcher_destroy = retasmFunc.btCollisionDispatcher_destroy;
exports.btOverlappingPairCache_setInternalGhostPairCallback = retasmFunc.btOverlappingPairCache_setInternalGhostPairCallback;
exports.btDbvtBroadphase_create = retasmFunc.btDbvtBroadphase_create;
exports.btDbvtBroadphase_getOverlappingPairCache = retasmFunc.btDbvtBroadphase_getOverlappingPairCache;
exports.btDbvtBroadphase_destroy = retasmFunc.btDbvtBroadphase_destroy;
exports.btRigidBodyConstructionInfo_create = retasmFunc.btRigidBodyConstructionInfo_create;
exports.btRigidBodyConstructionInfo_destroy = retasmFunc.btRigidBodyConstructionInfo_destroy;
exports.btRigidBody_create = retasmFunc.btRigidBody_create;
exports.btRigidBody_setCenterOfMassTransform = retasmFunc.btRigidBody_setCenterOfMassTransform;
exports.btRigidBody_setCenterOfMassPos = retasmFunc.btRigidBody_setCenterOfMassPos;
exports.btRigidBody_setCenterOfMassOrientation = retasmFunc.btRigidBody_setCenterOfMassOrientation;
exports.btRigidBody_setSleepingThresholds = retasmFunc.btRigidBody_setSleepingThresholds;
exports.btRigidBody_getLinearSleepingThreshold = retasmFunc.btRigidBody_getLinearSleepingThreshold;
exports.btRigidBody_getAngularSleepingThreshold = retasmFunc.btRigidBody_getAngularSleepingThreshold;
exports.btRigidBody_setDamping = retasmFunc.btRigidBody_setDamping;
exports.btRigidBody_setMassProps = retasmFunc.btRigidBody_setMassProps;
exports.btRigidBody_setLinearFactor = retasmFunc.btRigidBody_setLinearFactor;
exports.btRigidBody_applyTorque = retasmFunc.btRigidBody_applyTorque;
exports.btRigidBody_applyForce = retasmFunc.btRigidBody_applyForce;
exports.btRigidBody_applyCentralForce = retasmFunc.btRigidBody_applyCentralForce;
exports.btRigidBody_applyTorqueImpulse = retasmFunc.btRigidBody_applyTorqueImpulse;
exports.btRigidBody_applyImpulse = retasmFunc.btRigidBody_applyImpulse;
exports.btRigidBody_applyCentralImpulse = retasmFunc.btRigidBody_applyCentralImpulse;
exports.btRigidBody_updateInertiaTensor = retasmFunc.btRigidBody_updateInertiaTensor;
exports.btRigidBody_getLinearVelocity = retasmFunc.btRigidBody_getLinearVelocity;
exports.btRigidBody_getAngularVelocity = retasmFunc.btRigidBody_getAngularVelocity;
exports.btRigidBody_setLinearVelocity = retasmFunc.btRigidBody_setLinearVelocity;
exports.btRigidBody_setAngularVelocity = retasmFunc.btRigidBody_setAngularVelocity;
exports.btRigidBody_setAngularFactor = retasmFunc.btRigidBody_setAngularFactor;
exports.btRigidBody_getGravity = retasmFunc.btRigidBody_getGravity;
exports.btRigidBody_setGravity = retasmFunc.btRigidBody_setGravity;
exports.btRigidBody_getTotalForce = retasmFunc.btRigidBody_getTotalForce;
exports.btRigidBody_getTotalTorque = retasmFunc.btRigidBody_getTotalTorque;
exports.btRigidBody_getFlags = retasmFunc.btRigidBody_getFlags;
exports.btRigidBody_setFlags = retasmFunc.btRigidBody_setFlags;
exports.btRigidBody_clearForces = retasmFunc.btRigidBody_clearForces;
exports.btRigidBody_getMotionState = retasmFunc.btRigidBody_getMotionState;
exports.btSequentialImpulseConstraintSolver_create = retasmFunc.btSequentialImpulseConstraintSolver_create;
exports.btCollisionWorld_get_m_useContinuous = retasmFunc.btCollisionWorld_get_m_useContinuous;
exports.btCollisionWorld_set_m_useContinuous = retasmFunc.btCollisionWorld_set_m_useContinuous;
exports.btCollisionWorld_set_UserInfo = retasmFunc.btCollisionWorld_set_UserInfo;
exports.btCollisionWorld_get_UserInfo = retasmFunc.btCollisionWorld_get_UserInfo;
exports.btCollisionWorld_rayTest = retasmFunc.btCollisionWorld_rayTest;
exports.btCollisionWorld_getDispatchInfo = retasmFunc.btCollisionWorld_getDispatchInfo;
exports.btCollisionWorld_addCollisionObject = retasmFunc.btCollisionWorld_addCollisionObject;
exports.btCollisionWorld_removeCollisionObject = retasmFunc.btCollisionWorld_removeCollisionObject;
exports.btCollisionWorld_convexSweepTest = retasmFunc.btCollisionWorld_convexSweepTest;
exports.btCollisionWorld_destroy = retasmFunc.btCollisionWorld_destroy;
exports.btDynamicsWorld_enableDebugDrawer = retasmFunc.btDynamicsWorld_enableDebugDrawer;
exports.btDynamicsWorld_addAction = retasmFunc.btDynamicsWorld_addAction;
exports.btDynamicsWorld_removeAction = retasmFunc.btDynamicsWorld_removeAction;
exports.btDynamicsWorld_getSolverInfo = retasmFunc.btDynamicsWorld_getSolverInfo;
exports.btDiscreteDynamicsWorld_create = retasmFunc.btDiscreteDynamicsWorld_create;
exports.btDiscreteDynamicsWorld_setGravity = retasmFunc.btDiscreteDynamicsWorld_setGravity;
exports.btDiscreteDynamicsWorld_getGravity = retasmFunc.btDiscreteDynamicsWorld_getGravity;
exports.btDiscreteDynamicsWorld_addRigidBody = retasmFunc.btDiscreteDynamicsWorld_addRigidBody;
exports.btDiscreteDynamicsWorld_removeRigidBody = retasmFunc.btDiscreteDynamicsWorld_removeRigidBody;
exports.btDiscreteDynamicsWorld_stepSimulation = retasmFunc.btDiscreteDynamicsWorld_stepSimulation;
exports.btDiscreteDynamicsWorld_SphereQuery = retasmFunc.btDiscreteDynamicsWorld_SphereQuery;
exports.btDiscreteDynamicsWorld_clearForces = retasmFunc.btDiscreteDynamicsWorld_clearForces;
exports.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution;
exports.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution;
exports.btKinematicCharacterController_create = retasmFunc.btKinematicCharacterController_create;
exports.btKinematicCharacterController_setWalkDirection = retasmFunc.btKinematicCharacterController_setWalkDirection;
exports.btKinematicCharacterController_setFallSpeed = retasmFunc.btKinematicCharacterController_setFallSpeed;
exports.btKinematicCharacterController_setJumpSpeed = retasmFunc.btKinematicCharacterController_setJumpSpeed;
exports.btKinematicCharacterController_setJumpAxis = retasmFunc.btKinematicCharacterController_setJumpAxis;
exports.btKinematicCharacterController_setPushForce = retasmFunc.btKinematicCharacterController_setPushForce;
exports.btKinematicCharacterController_getPushForce = retasmFunc.btKinematicCharacterController_getPushForce;
exports.btKinematicCharacterController_setMaxSlope = retasmFunc.btKinematicCharacterController_setMaxSlope;
exports.btKinematicCharacterController_onGround = retasmFunc.btKinematicCharacterController_onGround;
exports.btKinematicCharacterController_jump = retasmFunc.btKinematicCharacterController_jump;
exports.btKinematicCharacterController_setGravity = retasmFunc.btKinematicCharacterController_setGravity;
exports.btKinematicCharacterController_setUp = retasmFunc.btKinematicCharacterController_setUp;
exports.btKinematicCharacterController_setStepHeight = retasmFunc.btKinematicCharacterController_setStepHeight;
exports.btKinematicCharacterController_getHitFlag = retasmFunc.btKinematicCharacterController_getHitFlag;
exports.btKinematicCharacterController_getVerticalVelocity = retasmFunc.btKinematicCharacterController_getVerticalVelocity;
exports.btKinematicCharacterController_getCurrentPosition = retasmFunc.btKinematicCharacterController_getCurrentPosition;
exports.btKinematicCharacterController_setCurrentPosition = retasmFunc.btKinematicCharacterController_setCurrentPosition;
exports.btKinematicCharacterController_getCurrentOrientation = retasmFunc.btKinematicCharacterController_getCurrentOrientation;
exports.btKinematicCharacterController_setUseGhostSweepTest = retasmFunc.btKinematicCharacterController_setUseGhostSweepTest;
exports.btKinematicCharacterController_AllHitInfo_get_m_collisionObjects = retasmFunc.btKinematicCharacterController_AllHitInfo_get_m_collisionObjects;
exports.btKinematicCharacterController_destroy = retasmFunc.btKinematicCharacterController_destroy;
exports.btPairCachingGhostObject_create = retasmFunc.btPairCachingGhostObject_create;
exports.btGhostPairCallback_create = retasmFunc.btGhostPairCallback_create;
exports.btTypedConstraint_setEnabled = retasmFunc.btTypedConstraint_setEnabled;
exports.btCollisionWorld_addConstraint = retasmFunc.btCollisionWorld_addConstraint;
exports.btCollisionWorld_removeConstraint = retasmFunc.btCollisionWorld_removeConstraint;
exports.btJointFeedback_create = retasmFunc.btJointFeedback_create;
exports.btJointFeedback_destroy = retasmFunc.btJointFeedback_destroy;
exports.btTypedConstraint_setJointFeedback = retasmFunc.btTypedConstraint_setJointFeedback;
exports.btJointFeedback_getAppliedForceBodyA = retasmFunc.btJointFeedback_getAppliedForceBodyA;
exports.btJointFeedback_getAppliedForceBodyB = retasmFunc.btJointFeedback_getAppliedForceBodyB;
exports.btJointFeedback_getAppliedTorqueBodyA = retasmFunc.btJointFeedback_getAppliedTorqueBodyA;
exports.btJointFeedback_getAppliedTorqueBodyB = retasmFunc.btJointFeedback_getAppliedTorqueBodyB;
exports.btFixedConstraint_create = retasmFunc.btFixedConstraint_create;
exports.btGeneric6DofSpring2Constraint_create = retasmFunc.btGeneric6DofSpring2Constraint_create;
exports.btGeneric6DofSpring2Constraint_setAxis = retasmFunc.btGeneric6DofSpring2Constraint_setAxis;
exports.btGeneric6DofSpring2Constraint_setLimit = retasmFunc.btGeneric6DofSpring2Constraint_setLimit;
exports.btGeneric6DofSpring2Constraint_enableSpring = retasmFunc.btGeneric6DofSpring2Constraint_enableSpring;
exports.btGeneric6DofSpring2Constraint_setBounce = retasmFunc.btGeneric6DofSpring2Constraint_setBounce;
exports.btGeneric6DofSpring2Constraint_setStiffness = retasmFunc.btGeneric6DofSpring2Constraint_setStiffness;
exports.btGeneric6DofSpring2Constraint_setDamping = retasmFunc.btGeneric6DofSpring2Constraint_setDamping;
exports.btGeneric6DofSpring2Constraint_setEquilibriumPoint = retasmFunc.btGeneric6DofSpring2Constraint_setEquilibriumPoint;
exports.btGeneric6DofSpring2Constraint_enableMotor = retasmFunc.btGeneric6DofSpring2Constraint_enableMotor;
exports.btGeneric6DofSpring2Constraint_setServo = retasmFunc.btGeneric6DofSpring2Constraint_setServo;
exports.btGeneric6DofSpring2Constraint_setTargetVelocity = retasmFunc.btGeneric6DofSpring2Constraint_setTargetVelocity;
exports.btGeneric6DofSpring2Constraint_setServoTarget = retasmFunc.btGeneric6DofSpring2Constraint_setServoTarget;
exports.btGeneric6DofSpring2Constraint_setMaxMotorForce = retasmFunc.btGeneric6DofSpring2Constraint_setMaxMotorForce;
exports.btGeneric6DofSpring2Constraint_setFrames = retasmFunc.btGeneric6DofSpring2Constraint_setFrames;
exports.btGeneric6DofSpring2Constraint_setRotationOrder = retasmFunc.btGeneric6DofSpring2Constraint_setRotationOrder;
exports.btRaycastVehicle_create = retasmFunc.btRaycastVehicle_create;
exports.btRaycastVehicle_addWheel = retasmFunc.btRaycastVehicle_addWheel;
exports.btRaycastVehicle_getNumWheels = retasmFunc.btRaycastVehicle_getNumWheels;
exports.btRaycastVehicle_destroy = retasmFunc.btRaycastVehicle_destroy;
exports.btRaycastVehicle_getWheelInfo = retasmFunc.btRaycastVehicle_getWheelInfo;
exports.btWheelInfo_setEengineForce = retasmFunc.btWheelInfo_setEengineForce;
exports.btWheelInfo_getEengineForce = retasmFunc.btWheelInfo_getEengineForce;
exports.btWheelInfo_setSteeringValue = retasmFunc.btWheelInfo_setSteeringValue;
exports.btWheelInfo_getSteeringValue = retasmFunc.btWheelInfo_getSteeringValue;
exports.btWheelInfo_setBrake = retasmFunc.btWheelInfo_setBrake;
exports.btWheelInfo_getBrake = retasmFunc.btWheelInfo_getBrake;
exports.btWheelInfo_getWorldTransform = retasmFunc.btWheelInfo_getWorldTransform;
exports.btWheelInfo_getRrotation = retasmFunc.btWheelInfo_getRrotation;
exports.btWheelInfo_getDeltaRotation = retasmFunc.btWheelInfo_getDeltaRotation;
exports.btHeightfieldTerrainShape_create = retasmFunc.btHeightfieldTerrainShape_create;
exports._malloc = retasmFunc._malloc;
exports._free = retasmFunc._free;
exports.solveSphereHit = retasmFunc.solveSphereHit;
exports.main = retasmFunc.main;
}
                var physics3D=window.Physics3D={};
                physics3D.then=(completeFun)=>{
                completeFun(physics3D);
                }
                init(pages*64*1024,interactive,physics3D);
                return physics3D;
                }