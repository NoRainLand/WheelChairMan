{"version":3,"file":"laya.d3.js","sources":["../../src/layaAir/laya/d3/depthMap/DepthCasterData.ts","../../src/layaAir/laya/d3/depthMap/DepthPass.ts","../../src/layaAir/laya/d3/utils/Physics3DUtils.ts","../../src/layaAir/laya/d3/resource/TextureGenerator.ts","../../src/layaAir/ILaya3D.ts","../../src/layaAir/laya/d3/utils/Utils3D.ts","../../src/layaAir/laya/d3/core/Transform3D.ts","../../src/layaAir/laya/d3/physics/shape/ColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/BoxColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CapsuleColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CompoundColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/ConeColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CylinderColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/MeshColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/SphereColliderShape.ts","../../src/layaAir/laya/d3/physics/PhysicsComponent.ts","../../src/layaAir/laya/d3/physics/CharacterController.ts","../../src/layaAir/laya/d3/physics/PhysicsUpdateList.ts","../../src/layaAir/laya/d3/physics/ContactPoint.ts","../../src/layaAir/laya/d3/physics/HitResult.ts","../../src/layaAir/laya/d3/physics/Collision.ts","../../src/layaAir/laya/d3/physics/CollisionTool.ts","../../src/layaAir/laya/d3/physics/RaycastWheel.ts","../../src/layaAir/laya/d3/physics/RaycastVehicle.ts","../../src/layaAir/laya/d3/physics/PhysicsSimulation.ts","../../src/layaAir/laya/d3/physics/PhysicsTriggerComponent.ts","../../src/layaAir/laya/d3/physics/Rigidbody3D.ts","../../src/layaAir/laya/d3/physics/shape/StaticPlaneColliderShape.ts","../../src/layaAir/laya/d3/Physics3D.ts","../../src/layaAir/laya/d3/animation/KeyframeNode.ts","../../src/layaAir/laya/d3/animation/AnimationEvent.ts","../../src/layaAir/laya/d3/core/Keyframe.ts","../../src/layaAir/laya/d3/core/FloatKeyframe.ts","../../src/layaAir/laya/d3/core/QuaternionKeyframe.ts","../../src/layaAir/laya/d3/core/Vector3Keyframe.ts","../../src/layaAir/laya/d3/animation/AnimationClipParser03.ts","../../src/layaAir/laya/d3/core/Vector2Keyframe.ts","../../src/layaAir/laya/d3/core/Vector4Keyframe.ts","../../src/layaAir/laya/d3/component/Animator/KeyframeNodeOwner.ts","../../src/layaAir/laya/d3/animation/AnimationClipParser04.ts","../../src/layaAir/laya/d3/animation/KeyframeNodeList.ts","../../src/layaAir/laya/d3/animation/AnimationClip.ts","../../src/layaAir/laya/d3/core/Sprite3D.ts","../../src/layaAir/laya/d3/graphics/renderPath/Cluster.ts","../../src/layaAir/laya/d3/math/Plane.ts","../../src/layaAir/laya/d3/math/Ray.ts","../../src/layaAir/laya/d3/math/ContainmentType.ts","../../src/layaAir/laya/d3/math/CollisionUtils.ts","../../src/layaAir/laya/d3/math/BoundFrustum.ts","../../src/layaAir/laya/d3/math/Viewport.ts","../../src/layaAir/laya/d3/utils/Picker.ts","../../src/layaAir/laya/d3/core/RenderableSprite3D.ts","../../src/layaAir/laya/d3/core/MeshSprite3DShaderDeclaration.ts","../../src/layaAir/laya/d3/resource/TextureCube.ts","../../src/layaAir/laya/d3/math/Bounds.ts","../../src/layaAir/laya/d3/component/Volume/Volume.ts","../../src/layaAir/laya/d3/component/Volume/reflectionProbe/ReflectionProbeManager.ts","../../src/layaAir/laya/d3/component/Volume/VolumeManager.ts","../../src/layaAir/laya/d3/graphics/SphericalHarmonicsL2.ts","../../src/layaAir/laya/d3/core/render/Sprite3DRenderDeclaration.ts","../../src/layaAir/laya/d3/core/scene/AmbientMode.ts","../../src/layaAir/laya/d3/component/Volume/reflectionProbe/ReflectionProbe.ts","../../src/layaAir/laya/d3/core/render/BaseRender.ts","../../src/layaAir/laya/d3/core/render/RenderElement.ts","../../src/layaAir/laya/d3/core/GeometryElement.ts","../../src/layaAir/laya/d3/resource/models/SkyBox.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTexture0.ts","../../src/layaAir/laya/d3/resource/models/SkyDome.ts","../../src/layaAir/laya/d3/resource/models/SkyRenderer.ts","../../src/layaAir/laya/d3/core/BaseCamera.ts","../../src/layaAir/laya/d3/core/light/ShadowMode.ts","../../src/layaAir/laya/d3/core/light/ShadowCascadesMode.ts","../../src/layaAir/laya/d3/core/light/Light.ts","../../src/layaAir/laya/d3/core/light/ShadowUtils.ts","../../src/layaAir/laya/d3/core/render/RenderContext3D.ts","../../src/layaAir/laya/d3/core/render/ScreenQuad.ts","../../src/layaAir/laya/d3/core/render/command/Command.ts","../../src/layaAir/laya/d3/core/render/command/BlitScreenQuadCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetRenderTargetCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetShaderDataCMD.ts","../../src/layaAir/laya/d3/core/material/Material.ts","../../src/layaAir/laya/d3/core/material/BlinnPhongMaterial.ts","../../src/layaAir/laya/d3/core/render/SubMeshRenderElement.ts","../../src/layaAir/laya/d3/core/MeshFilter.ts","../../src/layaAir/laya/d3/core/MeshRenderer.ts","../../src/layaAir/laya/d3/core/render/command/DrawMeshCMD.ts","../../src/layaAir/laya/d3/core/render/command/ClearRenderTextureCMD.ts","../../src/layaAir/laya/d3/core/render/command/DrawRenderCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetGlobalShaderDataCMD.ts","../../src/layaAir/laya/d3/graphics/MeshInstanceGeometry.ts","../../src/layaAir/laya/d3/core/render/command/DrawMeshInstancedCMD.ts","../../src/layaAir/laya/d3/core/render/command/CommandBuffer.ts","../../src/layaAir/laya/d3/physics/PhysicsSettings.ts","../../src/layaAir/laya/d3/core/light/LightQueue.ts","../../src/layaAir/laya/d3/core/scene/Lightmap.ts","../../src/layaAir/laya/d3/core/scene/Scene3DShaderDeclaration.ts","../../src/layaAir/laya/d3/math/BoundSphere.ts","../../src/layaAir/laya/d3/shadowMap/ShadowSliceData.ts","../../src/layaAir/laya/d3/graphics/FrustumCulling.ts","../../src/layaAir/laya/d3/shadowMap/ShadowLightType.ts","../../src/layaAir/laya/d3/shadowMap/ShadowCasterPass.ts","../../src/layaAir/laya/d3/core/render/command/BlitFrameBufferCMD.ts","../../src/layaAir/laya/d3/core/scene/SceneRenderManager.ts","../../src/layaAir/laya/d3/core/UI3D/UI3DManager.ts","../../src/layaAir/laya/d3/core/scene/bvh/SpatialManager.ts","../../src/layaAir/laya/d3/core/scene/bvh/BVHSpatialBox.ts","../../src/layaAir/laya/d3/core/scene/bvh/BVHSpatial.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHRenderSpatialBox.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHRenderSpatial.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHSceneRenderManager.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/CullPass.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHCullPass.ts","../../src/layaAir/laya/d3/core/scene/Scene3D.ts","../../src/layaAir/laya/d3/core/Camera.ts","../../src/layaAir/laya/d3/core/GradientMode.ts","../../src/layaAir/laya/d3/core/Gradient.ts","../../src/layaAir/laya/d3/core/light/DirectionLightCom.ts","../../src/layaAir/laya/d3/core/light/LightSprite.ts","../../src/layaAir/laya/d3/core/light/DirectionLight.ts","../../src/layaAir/laya/d3/core/light/PointLightCom.ts","../../src/layaAir/laya/d3/core/light/PointLight.ts","../../src/layaAir/laya/d3/core/light/SpotLightCom.ts","../../src/layaAir/laya/d3/core/light/SpotLight.ts","../../src/layaAir/laya/d3/core/material/UnlitMaterial.ts","../../src/layaAir/laya/d3/core/material/EffectMaterial.ts","../../src/layaAir/laya/d3/core/material/ExtendTerrainMaterial.ts","../../src/layaAir/laya/d3/core/material/PBRRenderQuality.ts","../../src/layaAir/laya/d3/core/material/PBRMaterial.ts","../../src/layaAir/laya/d3/core/material/PBRStandardMaterial.ts","../../src/layaAir/laya/d3/core/material/SkyBoxMaterial.ts","../../src/layaAir/laya/d3/core/material/SkyPanoramicMaterial.ts","../../src/layaAir/laya/d3/core/material/SkyProceduralMaterial.ts","../../src/layaAir/laya/d3/core/material/WaterPrimaryMaterial.ts","../../src/layaAir/laya/d3/core/MeshSprite3D.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/Burst.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientColor.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/ColorOverLifetime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/Emission.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/FrameOverTime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientAngularVelocity.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataInt.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataNumber.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientSize.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientVelocity.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/RotationOverLifetime.ts","../../src/layaAir/laya/d3/math/BoundBox.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BaseShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ShapeUtils.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BoxShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/CircleShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ConeShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/HemisphereShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/SphereShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/SizeOverLifetime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/StartFrame.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/TextureSheetAnimation.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/VelocityOverLifetime.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShuriKenParticle.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleBillboard.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleMesh.ts","../../src/layaAir/laya/d3/math/Rand.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3DShaderDeclaration.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleData.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleSystem.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleInstanceSystem.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleMaterial.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleRenderer.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3D.ts","../../src/layaAir/laya/d3/core/SkinnedMeshSprite3DShaderDeclaration.ts","../../src/layaAir/laya/d3/core/render/SkinRenderElement.ts","../../src/layaAir/laya/d3/core/SkinnedMeshRenderer.ts","../../src/layaAir/laya/d3/core/SimpleSkinnedMeshRenderer.ts","../../src/layaAir/laya/d3/core/SimpleSkinnedMeshSprite3D.ts","../../src/layaAir/laya/d3/core/SkinnedMeshSprite3D.ts","../../src/layaAir/laya/d3/core/TrailTextureMode.ts","../../src/layaAir/laya/d3/core/trail/TrailAlignment.ts","../../src/layaAir/laya/d3/core/trail/VertexTrail.ts","../../src/layaAir/laya/d3/core/trail/TrailGeometry.ts","../../src/layaAir/laya/d3/core/trail/TrailMaterial.ts","../../src/layaAir/laya/d3/core/trail/TrailFilter.ts","../../src/layaAir/laya/d3/core/trail/TrailRenderer.ts","../../src/layaAir/laya/d3/core/trail/TrailSprite3D.ts","../../src/layaAir/laya/d3/core/render/InstanceRenderElement.ts","../../src/layaAir/laya/d3/resource/models/SubMesh.ts","../../src/layaAir/laya/d3/resource/models/Mesh.ts","../../src/layaAir/laya/d3/core/light/AreaLightCom.ts","../../src/layaAir/laya/d3/component/LODGroup.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineData.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineVertex.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineFilter.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineMaterial.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineRenderer.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorPlayState.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorControllerLayer.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorResource.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorState.ts","../../src/layaAir/laya/d3/component/Animator/AvatarMask.ts","../../src/layaAir/laya/d3/component/Animator/Animator.ts","../../src/layaAir/laya/d3/core/render/PostProcessRenderContext.ts","../../src/layaAir/laya/d3/core/render/PostProcessEffect.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitScreen.vs","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitLUTScreen.fs","../../src/layaAir/laya/d3/core/render/PostEffect/ColorGradEffect.ts","../../src/layaAir/laya/d3/component/PostProcess.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Bloom.vs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomDownsample13.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomDownsample4.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomPrefilter13.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomPrefilter4.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomUpsampleBox.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomUpsampleTent.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Composite.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Composite.vs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Sampling.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/StdLib.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Colors.glsl","../../src/layaAir/laya/d3/core/render/PostEffect/BloomEffect.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/FullScreenVert.vs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/CoC.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/Prefilter.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/BlurV.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/BlurH.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/Composite.fs","../../src/layaAir/laya/d3/core/render/PostEffect/GaussianDoF.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/FragAO.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AoBlurHorizontal.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AOComposition.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AmbientOcclusion.glsl","../../src/layaAir/laya/d3/core/render/PostEffect/ScalableAO.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorTransition.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorController.ts","../../src/layaAir/laya/d3/core/render/BatchMark.ts","../../src/layaAir/laya/d3/graphics/Batch/InstanceBatchManager.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/BatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StaticInstanceBatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StatiVertexMergeBatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StaticBatchVolume.ts","../../src/layaAir/laya/d3/loaders/AnimationClipLoader.ts","../../src/layaAir/laya/d3/loaders/CubemapLoader.ts","../../src/layaAir/laya/d3/loaders/MaterialParser.ts","../../src/layaAir/laya/d3/loaders/MaterialLoader.ts","../../src/layaAir/laya/d3/loaders/LoadModelV04.ts","../../src/layaAir/laya/d3/loaders/LoadModelV05.ts","../../src/layaAir/laya/d3/loaders/MeshReader.ts","../../src/layaAir/laya/d3/loaders/MeshLoader.ts","../../src/layaAir/laya/d3/loaders/HierarchyParserV2.ts","../../src/layaAir/laya/d3/loaders/AvatarMaskLoader.ts","../../src/layaAir/laya/d3/utils/ParseJSON.ts","../../src/layaAir/laya/d3/loaders/ShaderParser.ts","../../src/layaAir/laya/d3/loaders/ShaderLoader.ts","../../src/layaAir/laya/d3/loaders/GLSLLoader.ts","../../src/layaAir/laya/d3/loaders/AnimationControllerLoader.ts","../../src/layaAir/laya/d3/ModuleDef.ts","../../src/layaAir/laya/d3/graphics/SubMeshInstanceBatch.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTerrain.ts","../../src/layaAir/laya/d3/physics/BulletInteractive.ts","../../src/layaAir/laya/d3/resource/models/PrimitiveMesh.ts","../../bin/tsc/layaAir/laya/d3/shader/utils/Utils.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/Color.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/Math.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/TBNNormal.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/BakedBoneMatrixSampler.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/VertexCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/SceneCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/CameraCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthNormalUtil.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/ShadowSampleTent.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/ShadowSampler.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/SceneFog.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/Lighting.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/globalIllumination.glsl","../../bin/tsc/layaAir/laya/d3/shader/lightingmode/BlinnPhongLighting.glsl","../../bin/tsc/layaAir/laya/d3/shader/lightingmode/PBRLighting.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitScreen.fs","../../bin/tsc/layaAir/laya/d3/shader/postprocess/FastApproximateAntiAliasing.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ColorGrading.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/Tonemapping.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/LUT.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/LUTBuilder.fs","../../src/layaAir/laya/d3/shader/postprocess/BlitScreenShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/unlit/Unlit.vs","../../bin/tsc/layaAir/laya/d3/shader/unlit/Unlit.fs","../../bin/tsc/layaAir/laya/d3/shader/depth/Depth.vs","../../bin/tsc/layaAir/laya/d3/shader/depth/Depth.fs","../../src/layaAir/laya/d3/shader/unlit/UnlitShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhong.vs","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhong.fs","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthNormal.vs","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthNormal.fs","../../src/layaAir/laya/d3/shader/blinnphong/BlinnPhongShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/Trail/Trail.vs","../../bin/tsc/layaAir/laya/d3/shader/Trail/Trail.fs","../../src/layaAir/laya/d3/shader/Trail/TrailShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/pbr/BRDF.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrGI.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrMetallicFrag.glsl","../../src/layaAir/laya/d3/shader/pbr/PBRDefaultDFG.ts","../../src/layaAir/laya/d3/shader/pbr/PBRShaderLib.ts","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrStandard.vs","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrStandard.fs","../../src/layaAir/laya/d3/shader/pbr/PBRStandardShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyBox.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyBox.fs","../../src/layaAir/laya/d3/shader/sky/SkyBoxShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKen.vs","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKen.fs","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/MathGradient.glsl","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKenSpriteVS.glsl","../../src/layaAir/laya/d3/shader/ShurikenParticle/ParticleShuriKenShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyProceduralShader.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyProceduralShader.fs","../../src/layaAir/laya/d3/shader/sky/SkyProceduralShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyPanoramic.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyPanoramic.fs","../../src/layaAir/laya/d3/shader/sky/SkyPanoramicShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/UtillitiesColor.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/TransformCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/RRTCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/ODTCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/Tonescales.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/rrt/RRT.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/odt/ODT_sRGB_100nits.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/ACES.glsl","../../src/layaAir/laya/d3/shader/postprocess/ACES/ACESShaderLib.ts","../../src/layaAir/laya/d3/shader/ShaderInit3D.ts","../../src/layaAir/laya/d3/graphics/IndexBuffer3D.ts","../../src/layaAir/laya/d3/graphics/VertexBuffer3D.ts","../../src/layaAir/laya/d3/math/BoundsImpl.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/BaseRenderNode.ts","../../src/layaAir/laya/d3/graphics/Batch/RenderElementBatch.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/BaseRenderQueue.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/CameraCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/InstanceRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/QuickSort.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderContext3DOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderGeometryElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/SceneRenderManagerOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/ShadowCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/SkinRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderOBJCreateUtil.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeBaseRenderNode.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeBaseRenderQueue.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeBounds.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeCameraCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeCommandUniformMap.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeCullPass.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeIndexBuffer3D.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeInstanceRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderContext3DOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderGeometryElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderState.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeSceneRenderManager.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeShaderData.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeShaderInstance.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeShadowCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeSkinRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeTransform3D.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeUniformBufferObject.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeVertexBuffer3D.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderOBJCreateUtil.ts","../../src/layaAir/Laya3D.ts","../../src/layaAir/laya/d3/animation/AnimatorStateScript.ts","../../src/layaAir/laya/d3/math/RandX.ts","../../src/layaAir/laya/d3/text/TextMesh.ts","../../src/layaAir/laya/d3/utils/Size.ts","../../src/layaAir/laya/d3/resource/RenderTextureCube.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRRenderTexture.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRSessionManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRCameraManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRGamepad.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRInput.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRInputManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRExperienceHelper.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRCamera.ts","../../src/layaAir/laya/d3/physics/Constraint3D.ts","../../src/layaAir/laya/d3/physics/constraints/ConstraintComponent.ts","../../src/layaAir/laya/d3/physics/constraints/ConfigurableConstraint.ts","../../src/layaAir/laya/d3/physics/constraints/FixedConstraint.ts","../../src/layaAir/laya/d3/physics/PhysicsCollider.ts","../../src/layaAir/laya/d3/physics/ModuleDef.ts","../../src/layaAir/laya/d3/physics/shape/HeightfieldTerrainShape.ts","../../src/layaAir/laya/d3/component/Script3D.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchSubMesh.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMesh.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMeshRenderElement.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMeshRender.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticMeshMergeInfo.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticMeshBatchManager.ts","../../src/layaAir/laya/d3/core/TransLargeUBOUtils.ts","../../src/layaAir/laya/d3/core/UI3D/UI3DGeometry.ts","../../src/layaAir/laya/d3/core/UI3D/UI3D.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineSprite3D.ts","../../src/layaAir/laya/d3/core/scene/Input3D.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataVector2.ts","../../src/layaAir/laya/d3/core/render/command/MaterialInstanceProperty.ts","../../src/layaAir/laya/d3/core/render/command/MaterialInstancePropertyBlock.ts"],"sourcesContent":["import { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { UniformBufferParamsType, UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\n\nexport class DepthCasterData{\n    static DepthCasterUBOData: UnifromBufferData;\n    /**\n     * create DepthCaster UniformBuffer\n     * @internal\n     * @returns \n     */\n    static createDepthCasterUniformBlock(): UnifromBufferData {\n\n        if (!DepthCasterData.DepthCasterUBOData) {\n            let uniformpara = new Map<number, UniformBufferParamsType>();\n            uniformpara.set(Shader3D.propertyNameToID(\"u_ShadowBias\"), UniformBufferParamsType.Vector4);\n            //uniformpara.set(Shader3D.propertyNameToID(\"u_ViewProjection\"), UniformBufferParamsType.Matrix4x4);\n            uniformpara.set(Shader3D.propertyNameToID(\"u_ShadowLightDirection\"), UniformBufferParamsType.Vector3);\n            DepthCasterData.DepthCasterUBOData = new UnifromBufferData(uniformpara);\n        }\n\n        return DepthCasterData.DepthCasterUBOData;\n    }\n}","import { Config3D } from \"../../../Config3D\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Camera } from \"../core/Camera\";\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\nimport { UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\nimport { Viewport } from \"../math/Viewport\";\nimport { RenderClearFlag } from \"../../RenderEngine/RenderEnum/RenderClearFlag\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { Stat } from \"../../utils/Stat\";\nimport { DepthCasterData } from \"./DepthCasterData\";\nimport { Color } from \"../../maths/Color\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { RenderTexture } from \"../../resource/RenderTexture\";\n\n\n/**\n * 深度贴图模式\n */\nexport enum DepthTextureMode {\n    /**不生成深度贴图 */\n    None = 0,\n    /**生成深度贴图 */\n    Depth = 1,\n    /**生成深度+法线贴图 */\n    DepthNormals = 2,\n    /**是否应渲染运动矢量  TODO*/\n    DepthAndDepthNormals = 3,\n    MotionVectors = 4,\n}\n/**\n * <code>ShadowCasterPass</code> 类用于实现阴影渲染管线\n */\nexport class DepthPass {\n    private static SHADOW_BIAS: Vector4 = new Vector4();\n    /** @internal */\n    static DEPTHPASS: ShaderDefine;\n    /** @internal */\n    static DEFINE_SHADOW_BIAS: number;\n    /**@internal */\n    static DEPTHTEXTURE: number;\n    /**@internal */\n    static DEPTHNORMALSTEXTURE: number;\n    /**@internal */\n    static DEPTHZBUFFERPARAMS: number;\n    /**@internal */\n    static SHADOWUNIFORMBLOCK: number;\n\n\n    static __init__() {\n        DepthPass.DEPTHPASS = Shader3D.getDefineByName(\"DEPTHPASS\");\n        DepthPass.DEFINE_SHADOW_BIAS = Shader3D.propertyNameToID(\"u_ShadowBias\");\n        DepthPass.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\n        DepthPass.DEPTHNORMALSTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalsTexture\");\n        DepthPass.DEPTHZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\n        DepthPass.SHADOWUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW);\n    }\n\n    /**@internal */\n    private _depthTexture: RenderTexture;\n    /**@internal */\n    private _depthNormalsTexture: RenderTexture;\n    /**@internal */\n    private _viewPort: Viewport;\n    /**@internal */\n    private _camera: Camera;\n    /** @internal */\n    private _castDepthData: UnifromBufferData;\n    /** @internal */\n    private _castDepthUBO: UniformBufferObject;\n    /**@internal */\n    //private _castDepthBuffer:\n    private _defaultNormalDepthColor = new Color(0.5, 0.5, 1.0, 0.0);\n    // Values used to linearize the Z buffer (http://www.humus.name/temp/Linearize%20depth.txt)\n    // x = 1-far/near\n    // y = far/near\n    // z = x/far\n    // w = y/far\n    // or in case of a reversed depth buffer (UNITY_REVERSED_Z is 1)\n    // x = -1+far/near\n    // y = 1\n    // z = x/far\n    // w = 1/far\n    /**@internal */\n    private _zBufferParams: Vector4 = new Vector4();\n\n    constructor() {\n        if (Config3D._uniformBlock) {\n            this._castDepthData = DepthCasterData.createDepthCasterUniformBlock();\n            this._castDepthUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SHADOW, 0);\n            if (!this._castDepthUBO) {\n                this._castDepthUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_SHADOW, BufferUsage.Dynamic, this._castDepthData.getbyteLength(), true);\n            }\n\n        }\n    }\n\n    /**\n     * 渲染深度更新\n     * @param camera \n     * @param depthType \n     */\n    update(camera: Camera, depthType: DepthTextureMode, depthTextureFormat: RenderTargetFormat): void {\n        this._viewPort = camera.viewport;\n        this._camera = camera;\n        switch (depthType) {\n            case DepthTextureMode.Depth:\n                camera.depthTexture = this._depthTexture = RenderTexture.createFromPool(this._viewPort.width, this._viewPort.height, depthTextureFormat, RenderTargetFormat.None, false, 1);\n                break;\n            case DepthTextureMode.DepthNormals:\n                camera.depthNormalTexture = this._depthNormalsTexture = RenderTexture.createFromPool(this._viewPort.width, this._viewPort.height, RenderTargetFormat.R8G8B8A8, depthTextureFormat, false, 1);\n                break;\n            case DepthTextureMode.MotionVectors:\n                //TODO：\n                break;\n            default:\n                throw (\"there is UnDefined type of DepthTextureMode\")\n        }\n    }\n\n    /**\n     * 渲染深度帧缓存\n     * @param context \n     * @param depthType \n     */\n    render(context: RenderContext3D, depthType: DepthTextureMode): void {\n        var scene = context.scene;\n        var shaderValues: ShaderData = scene._shaderValues;\n        //this._castDepthUBO && shaderValues.setValueData(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), this._castDepthUBO);\n        switch (depthType) {\n            case DepthTextureMode.Depth:\n                context.pipelineMode = \"ShadowCaster\";\n                shaderValues.addDefine(DepthPass.DEPTHPASS);\n                shaderValues.setVector(DepthPass.DEFINE_SHADOW_BIAS, DepthPass.SHADOW_BIAS);\n                var offsetX: number = this._viewPort.x;\n                var offsetY: number = this._viewPort.y;\n                this._depthTexture._start();\n                LayaGL.renderEngine.viewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                LayaGL.renderEngine.scissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, null, 1);\n                context.changeViewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                context.changeScissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                context.destTarget = this._depthTexture;\n                Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);\n                this._depthTexture._end();\n                this._setupDepthModeShaderValue(depthType, this._camera);\n                context.pipelineMode = context.configPipeLineMode;\n                shaderValues.removeDefine(DepthPass.DEPTHPASS);\n                break;\n            case DepthTextureMode.DepthNormals:\n                context.pipelineMode = \"DepthNormal\";\n                this._depthNormalsTexture._start();\n                //传入shader该传的值\n                var offsetX: number = this._viewPort.x;\n                var offsetY: number = this._viewPort.y;\n                LayaGL.renderEngine.viewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                LayaGL.renderEngine.scissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Color | RenderClearFlag.Depth, this._defaultNormalDepthColor, 1)\n                context.destTarget = this._depthNormalsTexture;\n                context.changeViewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                context.changeScissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\n                Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);\n                this._depthNormalsTexture._end();\n                this._setupDepthModeShaderValue(depthType, this._camera);\n                context.pipelineMode = context.configPipeLineMode;\n                break;\n            case DepthTextureMode.MotionVectors:\n                break;\n            default:\n                throw (\"there is UnDefined type of DepthTextureMode\")\n        }\n    }\n\n    /**\n     * 渲染完后传入使用的参数\n     * @internal\n     */\n    _setupDepthModeShaderValue(depthType: DepthTextureMode, camera: Camera) {\n        switch (depthType) {\n            case DepthTextureMode.Depth:\n                var far = camera.farPlane;\n                var near = camera.nearPlane;\n                this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\n                camera._shaderValues.setVector(DepthPass.DEFINE_SHADOW_BIAS, DepthPass.SHADOW_BIAS);\n                camera._shaderValues.setTexture(DepthPass.DEPTHTEXTURE, this._depthTexture);\n                camera._shaderValues.setVector(DepthPass.DEPTHZBUFFERPARAMS, this._zBufferParams);\n                break;\n            case DepthTextureMode.DepthNormals:\n                camera._shaderValues.setTexture(DepthPass.DEPTHNORMALSTEXTURE, this._depthNormalsTexture);\n                break;\n            case DepthTextureMode.MotionVectors:\n                break;\n            default:\n                throw (\"there is UnDefined type of DepthTextureMode\")\n        }\n    }\n\n    /**\n     * 清理深度数据\n     * @internal\n     */\n    cleanUp(): void {\n        (this._depthTexture instanceof RenderTexture)&& this._depthTexture && RenderTexture.recoverToPool(this._depthTexture);\n        this._depthNormalsTexture && RenderTexture.recoverToPool(this._depthNormalsTexture);\n        this._depthTexture = null;\n        this._depthNormalsTexture = null;\n    }\n}\n\n","import { Vector3 } from \"../../maths/Vector3\";\nimport { PhysicsComponent } from \"../physics/PhysicsComponent\"\n\n\t\n\t/**\n\t * <code>Physics</code> 类用于简单物理检测。\n\t */\n\texport class Physics3DUtils {\n\t\t/**默认碰撞组 */\n\t\t static COLLISIONFILTERGROUP_DEFAULTFILTER:number = 0x1;\n\t\t/**静态碰撞组 */\n\t\t static COLLISIONFILTERGROUP_STATICFILTER:number = 0x2;\n\t\t/**运动学刚体碰撞组 */\n\t\t static COLLISIONFILTERGROUP_KINEMATICFILTER:number = 0x4;\n\t\t/**碎片碰撞组 */\n\t\t static COLLISIONFILTERGROUP_DEBRISFILTER:number = 0x8;\n\t\t/**传感器触发器*/\n\t\t static COLLISIONFILTERGROUP_SENSORTRIGGER:number = 0x10;\n\t\t/**字符过滤器 */\n\t\t static COLLISIONFILTERGROUP_CHARACTERFILTER:number = 0x20;\n\t\t/**自定义过滤1 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER1:number = 0x40;\n\t\t/**自定义过滤2 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER2:number = 0x80;\n\t\t/**自定义过滤3 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER3:number = 0x100;\n\t\t/**自定义过滤4 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER4:number = 0x200;\n\t\t/**自定义过滤5 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER5:number = 0x400;\n\t\t/**自定义过滤6 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER6:number = 0x800;\n\t\t/**自定义过滤7 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER7:number = 0x1000;\n\t\t/**自定义过滤8 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER8:number = 0x2000;\n\t\t/**自定义过滤9 */\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER9:number = 0x4000;\n\t\t/**自定义过滤10*/\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER10:number = 0x8000;\n\t\t/**所有过滤 */\n\t\t static COLLISIONFILTERGROUP_ALLFILTER:number = -1;\n\t\t\n\t\t/**重力值。*/\n\t\t static gravity:Vector3 = new Vector3(0, -9.81, 0);\n\t\t\n\t\t/**\n\t\t * 创建一个 <code>Physics</code> 实例。\n\t\t */\n\t\tconstructor(){\n\t\t\n\t\t}\n\t\t\n\t\t/**\n\t\t * 是否忽略两个碰撞器的碰撞检测。\n\t\t * @param\tcollider1 碰撞器一。\n\t\t * @param\tcollider2 碰撞器二。\n\t\t * @param\tignore 是否忽略。\n\t\t */\n\t\t static setColliderCollision(collider1:PhysicsComponent, collider2:PhysicsComponent, collsion:boolean):void {\n\t\t}\n\t\t\n\t\t/**\n\t\t * 获取是否忽略两个碰撞器的碰撞检测。\n\t\t * @param\tcollider1 碰撞器一。\n\t\t * @param\tcollider2 碰撞器二。\n\t\t * @return\t是否忽略。\n\t\t */\n\t\t static getIColliderCollision(collider1:PhysicsComponent, collider2:PhysicsComponent):boolean {\n\t\t\t//return collider1._ignoreCollisonMap[collider2.id] ? true : false;\n\t\t\treturn false;\n\t\t}\n\t\n\t}\n\n\n","import { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\nimport { Texture2D } from \"../../resource/Texture2D\"\n\n\n/**\n * 贴图生成器\n * @internal\n * @author\n */\nexport class TextureGenerator {\n\n\tconstructor() {\n\n\t}\n\n\tstatic lightAttenTexture(x: number, y: number, maxX: number, maxY: number, index: number, data: Uint8Array): void {\n\n\t\tvar sqrRange: number = x / maxX;\n\t\tvar atten: number = 1.0 / (1.0 + 25.0 * sqrRange);\n\t\tif (sqrRange >= 0.64) {\n\t\t\tif (sqrRange > 1.0) {\n\t\t\t\tatten = 0;\n\t\t\t} else {\n\t\t\t\tatten *= 1 - (sqrRange - 0.64) / (1 - 0.64);\n\t\t\t}\n\t\t}\n\t\tdata[index] = Math.floor(atten * 255.0 + 0.5);\n\t}\n\n\tstatic haloTexture(x: number, y: number, maxX: number, maxY: number, index: number, data: Uint8Array): void {\n\n\t\tmaxX >>= 1;\n\t\tmaxY >>= 1;\n\t\tvar xFac: number = (x - maxX) / maxX;\n\t\tvar yFac: number = (y - maxY) / maxY;\n\t\tvar sqrRange: number = xFac * xFac + yFac * yFac;\n\t\tif (sqrRange > 1.0) {\n\t\t\tsqrRange = 1.0;\n\t\t}\n\t\tdata[index] = Math.floor((1.0 - sqrRange) * 255.0 + 0.5);\n\t}\n\n\tstatic _generateTexture2D(texture: Texture2D, textureWidth: number, textureHeight: number, func: Function): void {\n\t\tvar index: number = 0;\n\t\tvar size: number = 0;\n\t\tswitch (texture.format) {\n\t\t\tcase TextureFormat.R8G8B8:\n\t\t\t\tsize = 3;\n\t\t\t\tbreak;\n\t\t\tcase TextureFormat.R8G8B8A8:\n\t\t\t\tsize = 4;\n\t\t\t\tbreak;\n\t\t\tcase TextureFormat.Alpha8:\n\t\t\t\tsize = 1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"GeneratedTexture._generateTexture: unkonw texture format.\";\n\t\t}\n\n\t\tvar data: Uint8Array = new Uint8Array(textureWidth * textureHeight * size);\n\t\tfor (var y: number = 0; y < textureHeight; y++) {\n\t\t\tfor (var x: number = 0; x < textureWidth; x++) {\n\t\t\t\tfunc(x, y, textureWidth, textureHeight, index, data);\n\t\t\t\tindex += size;\n\t\t\t}\n\t\t}\n\t\ttexture.setPixelsData(data, false, false);\n\t}\n\n}\n\n\n","import { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\nimport { Laya3D } from \"./Laya3D\";\nimport { Physics3D } from \"./laya/d3/Physics3D\";\n\n/**\n * @internal\n * 使用全局类的时候，避免引用其他模块\n */\nexport class ILaya3D {\n    static Scene3D: typeof Scene3D = null;\n    static Laya3D: typeof Laya3D = null;\n    static Physics3D: typeof Physics3D = null;\n}\n","import { Node } from \"../../display/Node\";\nimport { Texture2D } from \"../../resource/Texture2D\";\nimport { PixelLineSprite3D } from \"../core/pixelLine/PixelLineSprite3D\";\nimport { BoundBox } from \"../math/BoundBox\";\nimport { TextureGenerator } from \"../resource/TextureGenerator\";\nimport { ILaya3D } from \"../../../ILaya3D\";\nimport { HTMLCanvas } from \"../../resource/HTMLCanvas\";\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { LayaEnv } from \"../../../LayaEnv\";\nimport { Bounds } from \"../math/Bounds\";\nimport { Color } from \"../../maths/Color\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { RenderTexture } from \"../../resource/RenderTexture\";\n\n/**\n * <code>Utils3D</code> 类用于创建3D工具。\n */\nexport class Utils3D {\n    private static _tempVector3_0: Vector3 = new Vector3();\n    private static _tempVector3_1: Vector3 = new Vector3();\n\n    private static _tempArray16_0: Float32Array = new Float32Array(16);\n    private static _tempArray16_1: Float32Array = new Float32Array(16);\n    private static _tempArray16_2: Float32Array = new Float32Array(16);\n    private static _tempArray16_3: Float32Array = new Float32Array(16);\n\n    /**\n     * @internal\n     */\n    static _createFloatTextureBuffer(width: number, height: number): Texture2D {\n        var floatTex: Texture2D = new Texture2D(width, height, TextureFormat.R32G32B32A32, false, false);\n        floatTex.setPixelsData(null, false, false);\n        floatTex.filterMode = FilterMode.Point;\n        floatTex.wrapModeU = WrapMode.Clamp;\n        floatTex.wrapModeV = WrapMode.Clamp;\n        floatTex.anisoLevel = 0;\n        return floatTex;\n    }\n\n    /**\n     * @internal\n     */\n    static _convertToLayaVec3(bVector: number, out: Vector3): void {\n        var bullet: any = ILaya3D.Physics3D._bullet;\n        out.x = bullet.btVector3_x(bVector);\n        out.y = bullet.btVector3_y(bVector);\n        out.z = bullet.btVector3_z(bVector);\n    }\n\n    /**\n     * @internal\n     */\n    static _convertToBulletVec3(lVector: Vector3, out: number): void {\n        ILaya3D.Physics3D._bullet.btVector3_setValue(out, lVector.x, lVector.y, lVector.z);\n    }\n\n    /**\n     *通过数平移、旋转、缩放值计算到结果矩阵数组,骨骼动画专用。\n     * @param tx left矩阵数组。\n     * @param ty left矩阵数组的偏移。\n     * @param tz right矩阵数组。\n     * @param qx right矩阵数组的偏移。\n     * @param qy 输出矩阵数组。\n     * @param qz 输出矩阵数组的偏移。\n     * @param qw 输出矩阵数组的偏移。\n     * @param sx 输出矩阵数组的偏移。\n     * @param sy 输出矩阵数组的偏移。\n     * @param sz 输出矩阵数组的偏移。\n     * @param outArray 结果矩阵数组。\n     * @param outOffset 结果矩阵数组的偏移。\n     */\n    private static _rotationTransformScaleSkinAnimation(tx: number, ty: number, tz: number, qx: number, qy: number, qz: number, qw: number, sx: number, sy: number, sz: number, outArray: Float32Array, outOffset: number): void {\n\n        var re: Float32Array = Utils3D._tempArray16_0;\n        var se: Float32Array = Utils3D._tempArray16_1;\n        var tse: Float32Array = Utils3D._tempArray16_2;\n\n        //平移\n\n        //旋转\n        var x2: number = qx + qx;\n        var y2: number = qy + qy;\n        var z2: number = qz + qz;\n\n        var xx: number = qx * x2;\n        var yx: number = qy * x2;\n        var yy: number = qy * y2;\n        var zx: number = qz * x2;\n        var zy: number = qz * y2;\n        var zz: number = qz * z2;\n        var wx: number = qw * x2;\n        var wy: number = qw * y2;\n        var wz: number = qw * z2;\n\n        //re[3] = re[7] = re[11] = re[12] = re[13] = re[14] = 0;\n        re[15] = 1;\n        re[0] = 1 - yy - zz;\n        re[1] = yx + wz;\n        re[2] = zx - wy;\n\n        re[4] = yx - wz;\n        re[5] = 1 - xx - zz;\n        re[6] = zy + wx;\n\n        re[8] = zx + wy;\n        re[9] = zy - wx;\n        re[10] = 1 - xx - yy;\n\n        //缩放\n        //se[4] = se[8] = se[12] = se[1] = se[9] = se[13] = se[2] = se[6] = se[14] = se[3] = se[7] = se[11] = 0;\n        se[15] = 1;\n        se[0] = sx;\n        se[5] = sy;\n        se[10] = sz;\n\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\n        //mul(rMat, tMat, tsMat)......................................\n        for (i = 0; i < 4; i++) {\n            ai0 = re[i];\n            ai1 = re[i + 4];\n            ai2 = re[i + 8];\n            ai3 = re[i + 12];\n            tse[i] = ai0;\n            tse[i + 4] = ai1;\n            tse[i + 8] = ai2;\n            tse[i + 12] = ai0 * tx + ai1 * ty + ai2 * tz + ai3;\n        }\n\n        //mul(tsMat, sMat, out)..............................................\n        for (i = 0; i < 4; i++) {\n            ai0 = tse[i];\n            ai1 = tse[i + 4];\n            ai2 = tse[i + 8];\n            ai3 = tse[i + 12];\n            outArray[i + outOffset] = ai0 * se[0] + ai1 * se[1] + ai2 * se[2] + ai3 * se[3];\n            outArray[i + outOffset + 4] = ai0 * se[4] + ai1 * se[5] + ai2 * se[6] + ai3 * se[7];\n            outArray[i + outOffset + 8] = ai0 * se[8] + ai1 * se[9] + ai2 * se[10] + ai3 * se[11];\n            outArray[i + outOffset + 12] = ai0 * se[12] + ai1 * se[13] + ai2 * se[14] + ai3 * se[15];\n        }\n    }\n\n    /**\n     * @internal\n     */\n    static _compIdToNode: any = new Object();\n\n\n\n\n\n\n\n    /** @internal */\n    static _computeBoneAndAnimationDatasByBindPoseMatrxix(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\n\n        var offset: number = 0;\n        var matOffset: number = 0;\n\n        var i: number;\n        var parentOffset: number;\n        var boneLength: number = bones.length;\n        for (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\n            //将旋转平移缩放合成矩阵...........................................\n            Utils3D._rotationTransformScaleSkinAnimation(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], outBonesDatas, matOffset);\n\n            if (i != 0) {\n                parentOffset = bones[i].parentIndex * 16;\n                Utils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\n            }\n        }\n\n        var n: number = inverGlobalBindPose.length;\n        for (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\n        {\n            Utils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\n        }\n    }\n\n    /** @internal */\n    static _computeAnimationDatasByArrayAndMatrixFast(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\n        for (var i: number = 0, n: number = inverGlobalBindPose.length; i < n; i++)//将绝对矩阵乘以反置矩阵\n            Utils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\n    }\n\n    /** @internal */\n    static _computeBoneAndAnimationDatasByBindPoseMatrxixOld(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\n\n        var offset: number = 0;\n        var matOffset: number = 0;\n\n        var i: number;\n        var parentOffset: number;\n        var boneLength: number = bones.length;\n        for (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\n            //将旋转平移缩放合成矩阵...........................................\n            Utils3D._rotationTransformScaleSkinAnimation(curData[offset + 7], curData[offset + 8], curData[offset + 9], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 0], curData[offset + 1], curData[offset + 2], outBonesDatas, matOffset);\n\n            if (i != 0) {\n                parentOffset = bones[i].parentIndex * 16;\n                Utils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\n            }\n        }\n\n        var n: number = inverGlobalBindPose.length;\n        for (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\n        {\n            var arrayOffset: number = i * 16;\n            Utils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\n        }\n    }\n\n    /** @internal */\n    static _computeAnimationDatasByArrayAndMatrixFastOld(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\n        var n: number = inverGlobalBindPose.length;\n        for (var i: number = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\n        {\n            var arrayOffset: number = i * 16;\n            Utils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\n        }\n    }\n\n    /** @internal */\n    static _computeRootAnimationData(bones: any, curData: Float32Array, animationDatas: Float32Array): void {\n\n        for (var i: number = 0, offset: number = 0, matOffset: number = 0, boneLength: number = bones.length; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++)\n            Utils3D.createAffineTransformationArray(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], animationDatas, matOffset);\n    }\n\n    /**\n     * 根据四元数旋转三维向量。\n     * @param\tsource 源三维向量。\n     * @param\trotation 旋转四元数。\n     * @param\tout 输出三维向量。\n     */\n    static transformVector3ArrayByQuat(sourceArray: Float32Array, sourceOffset: number, rotation: Quaternion, outArray: Float32Array, outOffset: number): void {\n        var x: number = sourceArray[sourceOffset], y: number = sourceArray[sourceOffset + 1], z: number = sourceArray[sourceOffset + 2], qx: number = rotation.x, qy: number = rotation.y, qz: number = rotation.z, qw: number = rotation.w, ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\n        outArray[outOffset] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        outArray[outOffset + 1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        outArray[outOffset + 2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    }\n\n    /**\n     *通过数组数据计算矩阵乘法。\n     * @param leftArray left矩阵数组。\n     * @param leftOffset left矩阵数组的偏移。\n     * @param rightArray right矩阵数组。\n     * @param rightOffset right矩阵数组的偏移。\n     * @param outArray 输出矩阵数组。\n     * @param outOffset 输出矩阵数组的偏移。\n     */\n    static mulMatrixByArray(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\n\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\n\n        if (outArray === rightArray) {\n            rightArray = Utils3D._tempArray16_3;\n            for (i = 0; i < 16; ++i) {\n                rightArray[i] = outArray[outOffset + i];\n            }\n            rightOffset = 0;\n        }\n\n        for (i = 0; i < 4; i++) {\n            ai0 = leftArray[leftOffset + i];\n            ai1 = leftArray[leftOffset + i + 4];\n            ai2 = leftArray[leftOffset + i + 8];\n            ai3 = leftArray[leftOffset + i + 12];\n            outArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\n            outArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\n            outArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\n            outArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\n        }\n    }\n\n    /**\n     *通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。\n     * @param leftArray left矩阵数组。\n     * @param leftOffset left矩阵数组的偏移。\n     * @param rightArray right矩阵数组。\n     * @param rightOffset right矩阵数组的偏移。\n     * @param outArray 结果矩阵数组。\n     * @param outOffset 结果矩阵数组的偏移。\n     */\n    static mulMatrixByArrayFast(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\n\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\n        for (i = 0; i < 4; i++) {\n            ai0 = leftArray[leftOffset + i];\n            ai1 = leftArray[leftOffset + i + 4];\n            ai2 = leftArray[leftOffset + i + 8];\n            ai3 = leftArray[leftOffset + i + 12];\n            outArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\n            outArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\n            outArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\n            outArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\n        }\n    }\n\n    /**\n     *通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。\n     * @param leftArray left矩阵数组。\n     * @param leftOffset left矩阵数组的偏移。\n     * @param rightMatrix right矩阵。\n     * @param outArray 结果矩阵数组。\n     * @param outOffset 结果矩阵数组的偏移。\n     */\n    static mulMatrixByArrayAndMatrixFast(leftArray: Float32Array, leftOffset: number, rightMatrix: Matrix4x4, outArray: Float32Array, outOffset: number): void {\n\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\n        var rightMatrixE: Float32Array = rightMatrix.elements;\n        var m11: number = rightMatrixE[0], m12: number = rightMatrixE[1], m13: number = rightMatrixE[2], m14: number = rightMatrixE[3];\n        var m21: number = rightMatrixE[4], m22: number = rightMatrixE[5], m23: number = rightMatrixE[6], m24: number = rightMatrixE[7];\n        var m31: number = rightMatrixE[8], m32: number = rightMatrixE[9], m33: number = rightMatrixE[10], m34: number = rightMatrixE[11];\n        var m41: number = rightMatrixE[12], m42: number = rightMatrixE[13], m43: number = rightMatrixE[14], m44: number = rightMatrixE[15];\n        var ai0LeftOffset: number = leftOffset;\n        var ai1LeftOffset: number = leftOffset + 4;\n        var ai2LeftOffset: number = leftOffset + 8;\n        var ai3LeftOffset: number = leftOffset + 12;\n        var ai0OutOffset: number = outOffset;\n        var ai1OutOffset: number = outOffset + 4;\n        var ai2OutOffset: number = outOffset + 8;\n        var ai3OutOffset: number = outOffset + 12;\n\n        for (i = 0; i < 4; i++) {\n            ai0 = leftArray[ai0LeftOffset + i];\n            ai1 = leftArray[ai1LeftOffset + i];\n            ai2 = leftArray[ai2LeftOffset + i];\n            ai3 = leftArray[ai3LeftOffset + i];\n            outArray[ai0OutOffset + i] = ai0 * m11 + ai1 * m12 + ai2 * m13 + ai3 * m14;\n            outArray[ai1OutOffset + i] = ai0 * m21 + ai1 * m22 + ai2 * m23 + ai3 * m24;\n            outArray[ai2OutOffset + i] = ai0 * m31 + ai1 * m32 + ai2 * m33 + ai3 * m34;\n            outArray[ai3OutOffset + i] = ai0 * m41 + ai1 * m42 + ai2 * m43 + ai3 * m44;\n        }\n    }\n\n    /**\n     *通过数平移、旋转、缩放值计算到结果矩阵数组。\n     * @param tX left矩阵数组。\n     * @param tY left矩阵数组的偏移。\n     * @param tZ right矩阵数组。\n     * @param qX right矩阵数组的偏移。\n     * @param qY 输出矩阵数组。\n     * @param qZ 输出矩阵数组的偏移。\n     * @param qW 输出矩阵数组的偏移。\n     * @param sX 输出矩阵数组的偏移。\n     * @param sY 输出矩阵数组的偏移。\n     * @param sZ 输出矩阵数组的偏移。\n     * @param outArray 结果矩阵数组。\n     * @param outOffset 结果矩阵数组的偏移。\n     */\n    static createAffineTransformationArray(tX: number, tY: number, tZ: number, rX: number, rY: number, rZ: number, rW: number, sX: number, sY: number, sZ: number, outArray: Float32Array, outOffset: number): void {\n\n        var x2: number = rX + rX, y2: number = rY + rY, z2: number = rZ + rZ;\n        var xx: number = rX * x2, xy: number = rX * y2, xz: number = rX * z2, yy: number = rY * y2, yz: number = rY * z2, zz: number = rZ * z2;\n        var wx: number = rW * x2, wy: number = rW * y2, wz: number = rW * z2;\n\n        outArray[outOffset + 0] = (1 - (yy + zz)) * sX;\n        outArray[outOffset + 1] = (xy + wz) * sX;\n        outArray[outOffset + 2] = (xz - wy) * sX;\n        outArray[outOffset + 3] = 0;\n        outArray[outOffset + 4] = (xy - wz) * sY;\n        outArray[outOffset + 5] = (1 - (xx + zz)) * sY;\n        outArray[outOffset + 6] = (yz + wx) * sY;\n        outArray[outOffset + 7] = 0;\n        outArray[outOffset + 8] = (xz + wy) * sZ;\n        outArray[outOffset + 9] = (yz - wx) * sZ;\n        outArray[outOffset + 10] = (1 - (xx + yy)) * sZ;\n        outArray[outOffset + 11] = 0;\n        outArray[outOffset + 12] = tX;\n        outArray[outOffset + 13] = tY;\n        outArray[outOffset + 14] = tZ;\n        outArray[outOffset + 15] = 1;\n    }\n\n    /**\n     * 通过矩阵转换一个三维向量数组到另外一个三维向量数组。\n     * @param\tsource 源三维向量所在数组。\n     * @param\tsourceOffset 源三维向量数组偏移。\n     * @param\ttransform  变换矩阵。\n     * @param\tresult 输出三维向量所在数组。\n     * @param\tresultOffset 输出三维向量数组偏移。\n     */\n    static transformVector3ArrayToVector3ArrayCoordinate(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\n        var coordinateX: number = source[sourceOffset + 0];\n        var coordinateY: number = source[sourceOffset + 1];\n        var coordinateZ: number = source[sourceOffset + 2];\n\n        var transformElem: Float32Array = transform.elements;\n        var w: number = ((coordinateX * transformElem[3]) + (coordinateY * transformElem[7]) + (coordinateZ * transformElem[11]) + transformElem[15]);\n        result[resultOffset] = (coordinateX * transformElem[0]) + (coordinateY * transformElem[4]) + (coordinateZ * transformElem[8]) + transformElem[12] / w;\n        result[resultOffset + 1] = (coordinateX * transformElem[1]) + (coordinateY * transformElem[5]) + (coordinateZ * transformElem[9]) + transformElem[13] / w;\n        result[resultOffset + 2] = (coordinateX * transformElem[2]) + (coordinateY * transformElem[6]) + (coordinateZ * transformElem[10]) + transformElem[14] / w;\n    }\n\n    /**\n     * 通过矩阵转换一个三维向量数组到另外一个归一化的三维向量数组。\n     * @param source 源三维向量所在数组。\n     * @param sourceOffset 源三维向量数组偏移。\n     * @param transform 变换矩阵。\n     * @param result 输出三维向量所在数组。\n     * @param resultOffset 输出三维向量数组偏移。\n     */\n    static transformVector3ArrayToVector3ArrayNormal(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\n        var coordinateX: number = source[sourceOffset + 0];\n        var coordinateY: number = source[sourceOffset + 1];\n        var coordinateZ: number = source[sourceOffset + 2];\n\n        var transformElem: Float32Array = transform.elements;\n        result[resultOffset] = coordinateX * transformElem[0] + coordinateY * transformElem[4] + coordinateZ * transformElem[8];\n        result[resultOffset + 1] = coordinateX * transformElem[1] + coordinateY * transformElem[5] + coordinateZ * transformElem[9];\n        result[resultOffset + 2] = coordinateX * transformElem[2] + coordinateY * transformElem[6] + coordinateZ * transformElem[10];\n    }\n\n    /**\n     * @internal\n     */\n    static transformLightingMapTexcoordArray(source: Float32Array, sourceOffset: number, lightingMapScaleOffset: Vector4, result: Float32Array, resultOffset: number): void {\n        result[resultOffset + 0] = source[sourceOffset + 0] * lightingMapScaleOffset.x + lightingMapScaleOffset.z;\n        result[resultOffset + 1] = 1.0 - ((1.0 - source[sourceOffset + 1]) * lightingMapScaleOffset.y + lightingMapScaleOffset.w);\n    }\n\n    /**\n     * 获取URL版本字符。\n     * @param\turl\n     * @return\n     */\n    static getURLVerion(url: string): string {\n        var index: number = url.indexOf(\"?\");\n        return index >= 0 ? url.substr(index) : null;\n    }\n\n    /**\n     * @internal\n     */\n    static _createAffineTransformationArray(trans: Vector3, rot: Quaternion, scale: Vector3, outE: Float32Array): void {\n\n        var x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\n        var xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\n        var wx: number = w * x2, wy: number = w * y2, wz: number = w * z2, sx: number = scale.x, sy: number = scale.y, sz: number = scale.z;\n\n        outE[0] = (1 - (yy + zz)) * sx;\n        outE[1] = (xy + wz) * sx;\n        outE[2] = (xz - wy) * sx;\n        outE[3] = 0;\n        outE[4] = (xy - wz) * sy;\n        outE[5] = (1 - (xx + zz)) * sy;\n        outE[6] = (yz + wx) * sy;\n        outE[7] = 0;\n        outE[8] = (xz + wy) * sz;\n        outE[9] = (yz - wx) * sz;\n        outE[10] = (1 - (xx + yy)) * sz;\n        outE[11] = 0;\n        outE[12] = trans.x;\n        outE[13] = trans.y;\n        outE[14] = trans.z;\n        outE[15] = 1;\n    }\n\n    /**\n     * @internal\n     */\n    static _mulMatrixArray(left: Float32Array, right: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\n        var l: Float32Array = right;\n        var r: Float32Array = left;\n        var e: Float32Array = outArray;\n\n        var l11: number = l[rightOffset], l12: number = l[rightOffset + 1], l13: number = l[rightOffset + 2], l14: number = l[rightOffset + 3];\n        var l21: number = l[rightOffset + 4], l22: number = l[rightOffset + 5], l23: number = l[rightOffset + 6], l24: number = l[rightOffset + 7];\n        var l31: number = l[rightOffset + 8], l32: number = l[rightOffset + 9], l33: number = l[rightOffset + 10], l34: number = l[rightOffset + 11];\n        var l41: number = l[rightOffset + 12], l42: number = l[rightOffset + 13], l43: number = l[rightOffset + 14], l44: number = l[rightOffset + 15];\n\n        var r11: number = r[0], r12: number = r[1], r13: number = r[2], r14: number = r[3];\n        var r21: number = r[4], r22: number = r[5], r23: number = r[6], r24: number = r[7];\n        var r31: number = r[8], r32: number = r[9], r33: number = r[10], r34: number = r[11];\n        var r41: number = r[12], r42: number = r[13], r43: number = r[14], r44: number = r[15];\n\n        e[outOffset] = (l11 * r11) + (l12 * r21) + (l13 * r31) + (l14 * r41);\n        e[outOffset + 1] = (l11 * r12) + (l12 * r22) + (l13 * r32) + (l14 * r42);\n        e[outOffset + 2] = (l11 * r13) + (l12 * r23) + (l13 * r33) + (l14 * r43);\n        e[outOffset + 3] = (l11 * r14) + (l12 * r24) + (l13 * r34) + (l14 * r44);\n        e[outOffset + 4] = (l21 * r11) + (l22 * r21) + (l23 * r31) + (l24 * r41);\n        e[outOffset + 5] = (l21 * r12) + (l22 * r22) + (l23 * r32) + (l24 * r42);\n        e[outOffset + 6] = (l21 * r13) + (l22 * r23) + (l23 * r33) + (l24 * r43);\n        e[outOffset + 7] = (l21 * r14) + (l22 * r24) + (l23 * r34) + (l24 * r44);\n        e[outOffset + 8] = (l31 * r11) + (l32 * r21) + (l33 * r31) + (l34 * r41);\n        e[outOffset + 9] = (l31 * r12) + (l32 * r22) + (l33 * r32) + (l34 * r42);\n        e[outOffset + 10] = (l31 * r13) + (l32 * r23) + (l33 * r33) + (l34 * r43);\n        e[outOffset + 11] = (l31 * r14) + (l32 * r24) + (l33 * r34) + (l34 * r44);\n        e[outOffset + 12] = (l41 * r11) + (l42 * r21) + (l43 * r31) + (l44 * r41);\n        e[outOffset + 13] = (l41 * r12) + (l42 * r22) + (l43 * r32) + (l44 * r42);\n        e[outOffset + 14] = (l41 * r13) + (l42 * r23) + (l43 * r33) + (l44 * r43);\n        e[outOffset + 15] = (l41 * r14) + (l42 * r24) + (l43 * r34) + (l44 * r44);\n    }\n\n    /**@internal */\n    private static arcTanAngle(x: number, y: number): number {\n\n        if (x == 0) {\n            if (y == 1)\n                return Math.PI / 2;\n            return -Math.PI / 2;\n        }\n        if (x > 0)\n            return Math.atan(y / x);\n        if (x < 0) {\n            if (y > 0)\n                return Math.atan(y / x) + Math.PI;\n            return Math.atan(y / x) - Math.PI;\n        }\n        return 0;\n    }\n\n    /**@internal */\n    static angleTo(from: Vector3, location: Vector3, angle: Vector3): void {\n\n        Vector3.subtract(location, from, TEMPVector30);\n        Vector3.normalize(TEMPVector30, TEMPVector30);\n\n        angle.x = Math.asin(TEMPVector30.y);\n        angle.y = Utils3D.arcTanAngle(-TEMPVector30.z, -TEMPVector30.x);\n    }\n\n    /**\n     * 四元数旋转矩阵\n     * @param source 源数据\n     * @param rotation 旋转四元数Array\n     * @param out 输出数据\n     */\n    static transformQuat(source: Vector3, rotation: Float32Array, out: Vector3): void {\n        var re: Float32Array = rotation;\n\n        var x: number = source.x, y: number = source.y, z: number = source.z, qx: number = re[0], qy: number = re[1], qz: number = re[2], qw: number = re[3],\n\n            ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\n\n        out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    }\n\n    /**\n     * 修改四元数权重\n     * @param f 元数据\n     * @param weight 权重\n     * @param e 目标数据\n     */\n    static quaternionWeight(f: Quaternion, weight: number, e: Quaternion): void {\n        e.x = f.x * weight;\n        e.y = f.y * weight;\n        e.z = f.z * weight;\n        e.w = f.w;\n    }\n\n    /**\n     * @internal\n     */\n    static quaternionConjugate(value: Quaternion, result: Quaternion): void {\n        result.x = -value.x;\n        result.y = -value.y;\n        result.z = -value.z;\n        result.w = value.w;\n    }\n\n    /**\n     * @internal\n     */\n    static scaleWeight(s: Vector3, w: number, out: Vector3): void {\n        var sX: number = s.x, sY: number = s.y, sZ: number = s.z;\n        out.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\n        out.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\n        out.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\n    }\n\n    /**\n     * @internal\n     */\n    static scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\n        var saw: Vector3 = Utils3D._tempVector3_0;\n        var sbw: Vector3 = Utils3D._tempVector3_1;\n        Utils3D.scaleWeight(sa, 1.0 - w, saw);\n        Utils3D.scaleWeight(sb, w, sbw);\n        var sng: Vector3 = w > 0.5 ? sb : sa;\n        out.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\n        out.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\n        out.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\n    }\n\n\n    /**@internal */\n    static matrix4x4MultiplyFFF(a: Float32Array, b: Float32Array, e: Float32Array): void {\n\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\n        if (e === b) {\n            b = new Float32Array(16);\n            for (i = 0; i < 16; ++i) {\n                b[i] = e[i];\n            }\n        }\n\n        var b0: number = b[0], b1: number = b[1], b2: number = b[2], b3: number = b[3];\n        var b4: number = b[4], b5: number = b[5], b6: number = b[6], b7: number = b[7];\n        var b8: number = b[8], b9: number = b[9], b10: number = b[10], b11: number = b[11];\n        var b12: number = b[12], b13: number = b[13], b14: number = b[14], b15: number = b[15];\n\n        for (i = 0; i < 4; i++) {\n            ai0 = a[i];\n            ai1 = a[i + 4];\n            ai2 = a[i + 8];\n            ai3 = a[i + 12];\n            e[i] = ai0 * b0 + ai1 * b1 + ai2 * b2 + ai3 * b3;\n            e[i + 4] = ai0 * b4 + ai1 * b5 + ai2 * b6 + ai3 * b7;\n            e[i + 8] = ai0 * b8 + ai1 * b9 + ai2 * b10 + ai3 * b11;\n            e[i + 12] = ai0 * b12 + ai1 * b13 + ai2 * b14 + ai3 * b15;\n        }\n    }\n\n    /**@internal */\n    static matrix4x4MultiplyMFM(left: Matrix4x4, right: Float32Array, out: Matrix4x4): void {\n        Utils3D.matrix4x4MultiplyFFF(left.elements, right, out.elements);\n    }\n\n    /**\n     * @internal\n     */\n    static _buildTexture2D(width: number, height: number, format: number, colorFunc: Function, mipmaps: boolean = false): Texture2D {\n        var texture: Texture2D = new Texture2D(width, height, format, mipmaps, true);\n        texture.anisoLevel = 1;\n        texture.filterMode = FilterMode.Point;\n        TextureGenerator._generateTexture2D(texture, width, height, colorFunc);\n        return texture;\n    }\n\n    /**\n     * @internal\n     */\n    static _drawBound(debugLine: PixelLineSprite3D, boundBox: BoundBox | Bounds, color: Color): void {\n        if (debugLine.lineCount + 12 > debugLine.maxLineCount)\n            debugLine.maxLineCount += 12;\n\n        var start: Vector3 = Utils3D._tempVector3_0;\n        var end: Vector3 = Utils3D._tempVector3_1;\n        var min: Vector3 = boundBox.min;\n        var max: Vector3 = boundBox.max;\n\n        start.setValue(min.x, min.y, min.z);\n        end.setValue(max.x, min.y, min.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(min.x, min.y, min.z);\n        end.setValue(min.x, min.y, max.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(max.x, min.y, min.z);\n        end.setValue(max.x, min.y, max.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(min.x, min.y, max.z);\n        end.setValue(max.x, min.y, max.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(min.x, min.y, min.z);\n        end.setValue(min.x, max.y, min.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(min.x, min.y, max.z);\n        end.setValue(min.x, max.y, max.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(max.x, min.y, min.z);\n        end.setValue(max.x, max.y, min.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(max.x, min.y, max.z);\n        end.setValue(max.x, max.y, max.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(min.x, max.y, min.z);\n        end.setValue(max.x, max.y, min.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(min.x, max.y, min.z);\n        end.setValue(min.x, max.y, max.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(max.x, max.y, min.z);\n        end.setValue(max.x, max.y, max.z);\n        debugLine.addLine(start, end, color, color);\n\n        start.setValue(min.x, max.y, max.z);\n        end.setValue(max.x, max.y, max.z);\n        debugLine.addLine(start, end, color, color);\n    }\n\n    ///**@internal */\n    //private static var _tempHierarchyID:int = 0;\n    //\n    ///**\n    //* @internal\n    //*/\n    //public static function _getSpritesHierarchyID(sprite:Sprite3D, checkSprites:Array, outIDs:Array):void {\n    //var index:int = checkSprites.indexOf(sprite);\n    //if (index !== -1)\n    //outIDs[index] = _tempHierarchyID;\n    //_tempHierarchyID++;\n    //var children:Array = sprite._children;\n    //for (var i:int = 0, n:int = children.length; i < n; i++)\n    //_getSpritesHierarchyID(children[i], checkSprites, outIDs);\n    //}\n\n    /**\n     * @internal\n     * @param rootSprite parent Sprite\n     * @param checkSprite check Sprite\n     * @param path pathArray\n     * @returns \n     */\n    static _getHierarchyPath(rootSprite: Node, checkSprite: Node, path: number[]): any[] {\n        path.length = 0;\n        var sprite: Node = checkSprite;\n        while (sprite !== rootSprite) {\n            var parent: Node = sprite._parent;\n            if (parent)\n                path.push(parent.getChildIndex(sprite));\n            else\n                return null;\n            sprite = parent;\n        }\n        return path;\n    }\n\n    /**\n     * @interanl\n     * @param rootSprite parentNode\n     * @param invPath PathArray\n     * @returns \n     */\n    static _getNodeByHierarchyPath(rootSprite: Node, invPath: number[]): Node {\n        var sprite: Node = rootSprite;\n        for (var i: number = invPath.length - 1; i >= 0; i--) {\n            sprite = sprite.getChildAt(invPath[i]);\n        }\n        return sprite;\n    }\n\n    static _getParentNodeByHierarchyPath(rootSprite: Node, path: number[]): Node {\n        let pathlength = path.length;\n        let node: Node = rootSprite;\n        for (let i = 0; i < pathlength; i++) {\n            if (node)\n                node = rootSprite.parent;\n            else\n                return null;\n        }\n        return node;\n    }\n\n    \n    /**\n     * 将RenderTexture转换为Base64\n     * @param rendertexture 渲染Buffer\n     * @returns \n     */\n    static uint8ArrayToArrayBuffer(rendertexture: RenderTexture) {\n        let pixelArray: Uint8Array | Float32Array;\n        let width = rendertexture.width;\n        let height = rendertexture.height;\n        switch (rendertexture.colorFormat) {\n            case RenderTargetFormat.R8G8B8:\n                pixelArray = new Uint8Array(width * height * 4);\n                break;\n            case RenderTargetFormat.R8G8B8A8:\n                pixelArray = new Uint8Array(width * height * 4);\n                break;\n            case RenderTargetFormat.R16G16B16A16:\n                pixelArray = new Float32Array(width * height * 4);\n                break;\n            default:\n                throw \"this function is not surpprt \" + rendertexture.format.toString() + \"format Material\";\n        }\n        rendertexture.getData(0, 0, rendertexture.width, rendertexture.height, pixelArray);\n        //tranceTo\n        //throw \" rt get Data\";\n        switch (rendertexture.colorFormat) {\n            case RenderTargetFormat.R16G16B16A16:\n                let ori = pixelArray;\n                let trans = new Uint8Array(width * height * 4);\n                for (let i = 0, n = ori.length; i < n; i++) {\n                    trans[i] = Math.min(Math.floor(ori[i] * 255), 255);\n                }\n                pixelArray = trans;\n                break;\n        }\n\n        let pixels = pixelArray;\n        var bs: String;\n        if (LayaEnv.isConch) {\n            //TODO:\n            //var base64img=__JS__(\"conchToBase64('image/png',1,pixels,canvasWidth,canvasHeight)\");\n            //var l = base64img.split(\",\");\n            //if (isBase64)\n            //\treturn base64img;\n            //return base.utils.DBUtils.decodeArrayBuffer(l[1]);\n        }\n        else {\n            var canv: HTMLCanvas = new HTMLCanvas(true);\n            canv.lock = true;\n            canv.size(width, height);\n            var ctx2d = canv.getContext('2d');\n            //@ts-ignore\n            var imgdata: ImageData = ctx2d.createImageData(width, height);\n            //@ts-ignore\n            imgdata.data.set(new Uint8ClampedArray(pixels));\n            //@ts-ignore\n            ctx2d.putImageData(imgdata, 0, 0);;\n            bs = canv.source.toDataURL();\n            canv.destroy();\n        }\n        return bs;\n    }\n}\n\n(window as any).getRTBase64 = Utils3D.uint8ArrayToArrayBuffer;\nconst TEMPVector30 = new Vector3();","import { Event } from \"../../events/Event\";\nimport { EventDispatcher } from \"../../events/EventDispatcher\";\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\nimport { Matrix3x3 } from \"../../maths/Matrix3x3\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Sprite3D } from \"./Sprite3D\";\n\n/**\n * <code>Transform3D</code> 类用于实现3D变换。\n */\nexport class Transform3D extends EventDispatcher {\n\t/** @internal */\n\tprotected static _tempVector30: Vector3 = new Vector3();\n\t/** @internal */\n\tprotected static _tempQuaternion0: Quaternion = new Quaternion();\n\t/** @internal */\n\tprotected static _tempMatrix0: Matrix4x4 = new Matrix4x4();\n\t/** @internal */\n\tprotected static _tempMatrix3x30: Matrix3x3 = new Matrix3x3();\n\t/** @internal */\n\tprotected static _tempMatrix3x31: Matrix3x3 = new Matrix3x3();\n\t/** @internal */\n\tprotected static _tempMatrix3x32: Matrix3x3 = new Matrix3x3();\n\t/** @internal */\n\tprotected static _tempMatrix3x33: Matrix3x3 = new Matrix3x3();\n\n\t/**@internal */\n\tstatic TRANSFORM_LOCALQUATERNION: number = 0x01;\n\t/**@internal */\n\tstatic TRANSFORM_LOCALEULER: number = 0x02;\n\t/**@internal */\n\tstatic TRANSFORM_LOCALMATRIX: number = 0x04;\n\t/**@internal */\n\tstatic TRANSFORM_WORLDPOSITION: number = 0x08;\n\t/**@internal */\n\tstatic TRANSFORM_WORLDQUATERNION: number = 0x10;\n\t/**@internal */\n\tstatic TRANSFORM_WORLDSCALE: number = 0x20;\n\t/**@internal */\n\tstatic TRANSFORM_WORLDMATRIX: number = 0x40;\n\t/**@internal */\n\tstatic TRANSFORM_WORLDEULER: number = 0x80;\n\n\t/**@internal */\n\tprotected static _angleToRandin: number = 180 / Math.PI;\n\n\t/** @internal */\n\tprotected _owner: Sprite3D;\n\t/** @internal */\n\tprotected _localPosition: Vector3 = new Vector3(0, 0, 0);\n\t/** @internal */\n\tprotected _localRotation: Quaternion = new Quaternion(0, 0, 0, 1);\n\t/** @internal */\n\tprotected _localScale: Vector3 = new Vector3(1, 1, 1);\n\t/**@internal */\n\tprotected _localRotationEuler: Vector3 = new Vector3(0, 0, 0);\n\t/** @internal */\n\tprotected _localMatrix: Matrix4x4 = new Matrix4x4();\n\n\t/** @internal */\n\tprotected _position: Vector3 = new Vector3(0, 0, 0);\n\t/** @internal */\n\tprotected _rotation: Quaternion = new Quaternion(0, 0, 0, 1);\n\t/** @internal */\n\tprotected _scale: Vector3 = new Vector3(1, 1, 1);\n\t/**@internal */\n\tprotected _rotationEuler: Vector3 = new Vector3(0, 0, 0);\n\t/** @internal */\n\tprotected _worldMatrix: Matrix4x4 = new Matrix4x4();\n\n\t/** @internal */\n\t_children: Transform3D[] | null = null;\n\t/**@internal 如果为true 表示自身相对于父节点并无任何改变，将通过这个参数忽略计算*/\n\tprotected _isDefaultMatrix: boolean = false;\n\n\t/** @internal */\n\t_parent: Transform3D | null = null;\n\t/**@internal */\n\t_transformFlag: number = 0;\n\n\n\t/**@internal */\n\tget isDefaultMatrix(): boolean {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)) {\n\t\t\tlet localMat = this.localMatrix;\n\t\t}\n\t\treturn this._isDefaultMatrix;\n\t}\n\t/**\n\t * @internal\n\t */\n\tget _isFrontFaceInvert(): boolean {\n\t\tvar scale: Vector3 = this.getWorldLossyScale();\n\t\tvar isInvert: boolean = scale.x < 0;\n\t\t(scale.y < 0) && (isInvert = !isInvert);\n\t\t(scale.z < 0) && (isInvert = !isInvert);\n\t\treturn isInvert;\n\t}\n\n\t/**\n\t * 所属精灵。\n\t */\n\tget owner(): Sprite3D {\n\t\treturn this._owner;\n\t}\n\n\t/**\n\t * 世界矩阵是否需要更新。\n\t */\n\tget worldNeedUpdate(): boolean {\n\t\treturn this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX);\n\t}\n\n\t/**\n\t * 局部位置X轴分量。\n\t */\n\tget localPositionX(): number {\n\t\treturn this._localPosition.x;\n\t}\n\n\tset localPositionX(x: number) {\n\t\tthis._localPosition.x = x;\n\t\tthis.localPosition = this._localPosition;\n\t}\n\n\t/**\n\t * 局部位置Y轴分量。\n\t */\n\tget localPositionY(): number {\n\t\treturn this._localPosition.y;\n\t}\n\n\tset localPositionY(y: number) {\n\t\tthis._localPosition.y = y;\n\t\tthis.localPosition = this._localPosition;\n\t}\n\n\t/**\n\t * 局部位置Z轴分量。\n\t */\n\tget localPositionZ(): number {\n\t\treturn this._localPosition.z;\n\t}\n\n\tset localPositionZ(z: number) {\n\t\tthis._localPosition.z = z;\n\t\tthis.localPosition = this._localPosition;\n\t}\n\n\t/**\n\t * 局部位置。\n\t */\n\tget localPosition(): Vector3 {\n\t\treturn this._localPosition;\n\t}\n\n\tset localPosition(value: Vector3) {\n\t\tif (this._localPosition !== value)\n\t\t\tvalue.cloneTo(this._localPosition);\n\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\n\t\tthis._onWorldPositionTransform();\n\t}\n\n\t/**\n\t * 局部旋转四元数X分量。\n\t */\n\tget localRotationX(): number {\n\t\treturn this.localRotation.x;\n\t}\n\n\tset localRotationX(x: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.x = x;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转四元数Y分量。\n\t */\n\tget localRotationY(): number {\n\t\treturn this.localRotation.y;\n\t}\n\n\tset localRotationY(y: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.y = y;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转四元数Z分量。\n\t */\n\tget localRotationZ(): number {\n\t\treturn this.localRotation.z;\n\t}\n\n\tset localRotationZ(z: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.z = z;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转四元数W分量。\n\t */\n\tget localRotationW(): number {\n\t\treturn this.localRotation.w;\n\t}\n\n\tset localRotationW(w: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.w = w;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转。\n\t */\n\tget localRotation(): Quaternion {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION)) {\n\t\t\tvar eulerE: Vector3 = this._localRotationEuler;\n\t\t\tQuaternion.createFromYawPitchRoll(eulerE.y / Transform3D._angleToRandin, eulerE.x / Transform3D._angleToRandin, eulerE.z / Transform3D._angleToRandin, this._localRotation);\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\n\t\t}\n\t\treturn this._localRotation;\n\t}\n\n\tset localRotation(value: Quaternion) {\n\t\tif (this._localRotation !== value)\n\t\t\tvalue.cloneTo(this._localRotation);\n\t\tthis._localRotation.normalize(this._localRotation);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, true);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\n\t\tthis._onWorldRotationTransform();\n\t}\n\n\t/**\n\t * 局部缩放X。\n\t */\n\tget localScaleX(): number {\n\t\treturn this._localScale.x;\n\t}\n\n\tset localScaleX(value: number) {\n\t\tthis._localScale.x = value;\n\t\tthis.localScale = this._localScale;\n\t}\n\n\t/**\n\t * 局部缩放Y。\n\t */\n\tget localScaleY(): number {\n\t\treturn this._localScale.y;\n\t}\n\n\tset localScaleY(value: number) {\n\t\tthis._localScale.y = value;\n\t\tthis.localScale = this._localScale;\n\t}\n\n\t/**\n\t * 局部缩放Z。\n\t */\n\tget localScaleZ(): number {\n\t\treturn this._localScale.z;\n\t}\n\n\tset localScaleZ(value: number) {\n\t\tthis._localScale.z = value;\n\t\tthis.localScale = this._localScale;\n\t}\n\n\t/**\n\t * 局部缩放。\n\t */\n\tget localScale(): Vector3 {\n\t\treturn this._localScale;\n\t}\n\n\tset localScale(value: Vector3) {\n\t\tif (this._localScale !== value)\n\t\t\tvalue.cloneTo(this._localScale);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\n\t\tthis._onWorldScaleTransform();\n\t}\n\n\t/**\n\t * 局部空间的X轴欧拉角。\n\t */\n\tget localRotationEulerX(): number {\n\t\treturn this.localRotationEuler.x;\n\t}\n\n\tset localRotationEulerX(value: number) {\n\t\tlet rot = this.localRotationEuler;\n\t\trot.x = value;\n\t\tthis.localRotationEuler = rot;\n\t}\n\n\t/**\n\t * 局部空间的Y轴欧拉角。\n\t */\n\tget localRotationEulerY(): number {\n\t\treturn this.localRotationEuler.y;\n\t}\n\n\tset localRotationEulerY(value: number) {\n\t\tlet rot = this.localRotationEuler;\n\t\trot.y = value;\n\t\tthis.localRotationEuler = rot;\n\t}\n\n\t/**\n\t * 局部空间的Z轴欧拉角。\n\t */\n\tget localRotationEulerZ(): number {\n\t\treturn this.localRotationEuler.z;\n\t}\n\n\tset localRotationEulerZ(value: number) {\n\t\tlet rot = this.localRotationEuler;\n\t\trot.z = value;\n\t\tthis.localRotationEuler = rot;\n\t}\n\n\t/**\n\t * 局部空间欧拉角。\n\t */\n\tget localRotationEuler(): Vector3 {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALEULER)) {\n\t\t\tthis._localRotation.getYawPitchRoll(Transform3D._tempVector30);\n\t\t\tvar euler: Vector3 = Transform3D._tempVector30;\n\t\t\tvar localRotationEuler: Vector3 = this._localRotationEuler;\n\t\t\tlocalRotationEuler.x = euler.y * Transform3D._angleToRandin;\n\t\t\tlocalRotationEuler.y = euler.x * Transform3D._angleToRandin;\n\t\t\tlocalRotationEuler.z = euler.z * Transform3D._angleToRandin;\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\n\t\t}\n\t\treturn this._localRotationEuler;\n\t}\n\n\tset localRotationEuler(value: Vector3) {\n\t\tif (this._localRotationEuler !== value)\n\t\t\tvalue.cloneTo(this._localRotationEuler);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALMATRIX, true);\n\t\tthis._onWorldRotationTransform();\n\t}\n\n\t/**\n\t * 局部矩阵。\n\t */\n\tget localMatrix(): Matrix4x4 {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)) {\n\t\t\tMatrix4x4.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix);\n\t\t\tthis._isDefaultMatrix = this._localMatrix.isIdentity();\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\n\t\t}\n\t\treturn this._localMatrix;\n\t}\n\n\tset localMatrix(value: Matrix4x4) {\n\t\tif (this._localMatrix !== value)\n\t\t\tvalue.cloneTo(this._localMatrix);\n\t\tthis._isDefaultMatrix = this._localMatrix.isIdentity();\n\t\tthis._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, true);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\n\t\tthis._onWorldTransform();\n\t}\n\n\t/**\n\t * 世界位置。\n\t */\n\tget position(): Vector3 {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\n\t\t\tif (this._parent != null) {\n\t\t\t\tvar worldMatE = this.worldMatrix.elements;\n\t\t\t\tthis._position.x = worldMatE[12];\n\t\t\t\tthis._position.y = worldMatE[13];\n\t\t\t\tthis._position.z = worldMatE[14];\n\t\t\t} else {\n\t\t\t\tthis._localPosition.cloneTo(this._position);\n\t\t\t}\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\n\t\t}\n\t\treturn this._position;\n\t}\n\n\tset position(value: Vector3) {\n\t\tif (this._parent != null) {\n\t\t\tvar parentInvMat: Matrix4x4 = Transform3D._tempMatrix0;\n\t\t\tthis._parent.worldMatrix.invert(parentInvMat);\n\t\t\tVector3.transformCoordinate(value, parentInvMat, this._localPosition);\n\t\t}\n\t\telse {\n\t\t\tvalue.cloneTo(this._localPosition);\n\t\t}\n\t\tthis.localPosition = this._localPosition;\n\t\tif (this._position !== value)\n\t\t\tvalue.cloneTo(this._position);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\n\t}\n\n\n\n\t/**\n\t * 世界旋转。\n\t */\n\tget rotation(): Quaternion {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\n\t\t\tif (this._parent != null)\n\t\t\t\tQuaternion.multiply(this._parent.rotation, this.localRotation, this._rotation);//使用localRotation不使用_localRotation,内部需要计算\n\t\t\telse\n\t\t\t\tthis.localRotation.cloneTo(this._rotation);\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\n\t\t}\n\t\treturn this._rotation;\n\t}\n\n\tset rotation(value: Quaternion) {\n\t\tif (this._parent != null) {\n\t\t\tthis._parent.rotation.invert(Transform3D._tempQuaternion0);\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, value, this._localRotation);\n\t\t} else {\n\t\t\tvalue.cloneTo(this._localRotation);\n\t\t}\n\t\tthis.localRotation = this._localRotation;\n\t\tif (value !== this._rotation)\n\t\t\tvalue.cloneTo(this._rotation);\n\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\n\t}\n\n\n\t/**\n\t * 世界空间的旋转角度，顺序为x、y、z。\n\t */\n\tget rotationEuler(): Vector3 {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\n\t\t\tthis.rotation.getYawPitchRoll(Transform3D._tempVector30);//使用rotation属性,可能需要更新\n\t\t\tvar eulerE: Vector3 = Transform3D._tempVector30;\n\t\t\tvar rotationEulerE: Vector3 = this._rotationEuler;\n\t\t\trotationEulerE.x = eulerE.y * Transform3D._angleToRandin;\n\t\t\trotationEulerE.y = eulerE.x * Transform3D._angleToRandin;\n\t\t\trotationEulerE.z = eulerE.z * Transform3D._angleToRandin;\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\n\t\t}\n\t\treturn this._rotationEuler;\n\t}\n\n\tset rotationEuler(value: Vector3) {\n\t\tQuaternion.createFromYawPitchRoll(value.y / Transform3D._angleToRandin, value.x / Transform3D._angleToRandin, value.z / Transform3D._angleToRandin, this._rotation);\n\t\tthis.rotation = this._rotation;\n\t\tif (this._rotationEuler !== value)\n\t\t\tvalue.cloneTo(this._rotationEuler);\n\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\n\t}\n\n\t/**\n\t * 世界矩阵。\n\t */\n\tget worldMatrix(): Matrix4x4 {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)) {\n\t\t\tif (this._parent != null) {\n\t\t\t\t//这里将剔除单位矩阵的计算\n\t\t\t\tlet effectiveTrans = this._parent;\n\n\t\t\t\twhile (effectiveTrans._parent && effectiveTrans.isDefaultMatrix) {\n\t\t\t\t\teffectiveTrans = effectiveTrans._parent;\n\t\t\t\t}\n\t\t\t\tMatrix4x4.multiply(effectiveTrans.worldMatrix, this.localMatrix, this._worldMatrix);\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis.localMatrix.cloneTo(this._worldMatrix);\n\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\n\t\t}\n\t\treturn this._worldMatrix;\n\t}\n\n\tset worldMatrix(value: Matrix4x4) {\n\t\tif (this._parent === null) {\n\t\t\tvalue.cloneTo(this._localMatrix);\n\t\t} else {\n\t\t\tthis._parent.worldMatrix.invert(this._localMatrix);\n\t\t\tMatrix4x4.multiply(this._localMatrix, value, this._localMatrix);\n\t\t}\n\t\tthis.localMatrix = this._localMatrix;\n\t\tif (this._worldMatrix !== value)\n\t\t\tvalue.cloneTo(this._worldMatrix);\n\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\n\t}\n\n\t/**\n\t * 创建一个 <code>Transform3D</code> 实例。\n\t * @internal\n\t * @param owner 所属精灵。\n\t */\n\tconstructor(owner: Sprite3D) {\n\t\tsuper();\n\t\tthis._owner = owner;\n\t\tthis._children = [];\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, false);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE | Transform3D.TRANSFORM_WORLDMATRIX, true);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_getScaleMatrix(): Matrix3x3 {\n\t\tvar invRotation: Quaternion = Transform3D._tempQuaternion0;\n\t\tvar invRotationMat: Matrix3x3 = Transform3D._tempMatrix3x30;\n\t\tvar worldRotScaMat: Matrix3x3 = Transform3D._tempMatrix3x31;\n\t\tvar scaMat: Matrix3x3 = Transform3D._tempMatrix3x32;\n\t\tMatrix3x3.createFromMatrix4x4(this.worldMatrix, worldRotScaMat)\n\t\tthis.rotation.invert(invRotation);\n\t\tMatrix3x3.createRotationQuaternion(invRotation, invRotationMat);\n\t\tMatrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n\t\treturn scaMat;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setTransformFlag(type: number, value: boolean): void {\n\t\tif (value)\n\t\t\tthis._transformFlag |= type;\n\t\telse\n\t\t\tthis._transformFlag &= ~type;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_getTransformFlag(type: number): boolean {\n\t\treturn (this._transformFlag & type) != 0;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setParent(value: Transform3D): void {\n\t\tif (this._parent !== value) {\n\t\t\tif (this._parent) {\n\t\t\t\tvar parentChilds: Transform3D[] = this._parent._children!;\n\t\t\t\tvar index: number = parentChilds.indexOf(this);\n\t\t\t\tparentChilds.splice(index, 1);\n\t\t\t}\n\t\t\tif (value) {\n\t\t\t\tvalue._children!.push(this);\n\t\t\t\t(value) && (this._onWorldTransform());\n\t\t\t}\n\t\t\tthis._parent = value;\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_onWorldPositionRotationTransform(): void {\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\n\t\t}\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\n\t\t\tthis._children![i]._onWorldPositionRotationTransform();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_onWorldPositionScaleTransform(): void {\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDSCALE, true);\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\n\t\t}\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\n\t\t\tthis._children![i]._onWorldPositionScaleTransform();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_onWorldPositionTransform(): void {\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION, true);\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\n\t\t}\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\n\t\t\tthis._children![i]._onWorldPositionTransform();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _onWorldRotationTransform(): void {\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\n\t\t}\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\n\t\t\tthis._children![i]._onWorldPositionRotationTransform();//父节点旋转发生变化，子节点的世界位置和旋转都需要更新\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_onWorldScaleTransform(): void {\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDSCALE, true);\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\n\t\t}\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\n\t\t\tthis._children![i]._onWorldPositionScaleTransform();//父节点缩放发生变化，子节点的世界位置和缩放都需要更新\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_onWorldTransform(): void {\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE, true);\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\n\t\t}\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\n\t\t\tthis._children![i]._onWorldTransform();\n\t}\n\n\t/**\n\t * 平移变换。\n\t * @param \ttranslation 移动距离。\n\t * @param \tisLocal 是否局部空间。\n\t */\n\ttranslate(translation: Vector3, isLocal: boolean = true): void {\n\t\tif (isLocal) {\n\t\t\tMatrix4x4.createFromQuaternion(this.localRotation, Transform3D._tempMatrix0);\n\t\t\tVector3.transformCoordinate(translation, Transform3D._tempMatrix0, Transform3D._tempVector30);\n\t\t\tVector3.add(this.localPosition, Transform3D._tempVector30, this._localPosition);\n\t\t\tthis.localPosition = this._localPosition;\n\t\t} else {\n\t\t\tVector3.add(this.position, translation, this._position);\n\t\t\tthis.position = this._position;\n\t\t}\n\t}\n\n\t/**\n\t * 旋转变换。\n\t * @param \trotations 旋转幅度。\n\t * @param \tisLocal 是否局部空间。\n\t * @param \tisRadian 是否弧度制。\n\t */\n\trotate(rotation: Vector3, isLocal: boolean = true, isRadian: boolean = true): void {\n\t\tvar rot: Vector3;\n\t\tif (isRadian) {\n\t\t\trot = rotation;\n\t\t} else {\n\t\t\tVector3.scale(rotation, Math.PI / 180.0, Transform3D._tempVector30);\n\t\t\trot = Transform3D._tempVector30;\n\t\t}\n\n\t\tQuaternion.createFromYawPitchRoll(rot.y, rot.x, rot.z, Transform3D._tempQuaternion0);\n\t\tif (isLocal) {\n\t\t\tQuaternion.multiply(this._localRotation, Transform3D._tempQuaternion0, this._localRotation);\n\t\t\tthis.localRotation = this._localRotation;\n\t\t} else {\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, this.rotation, this._rotation);\n\t\t\tthis.rotation = this._rotation;\n\t\t}\n\t}\n\n\t/**\n\t * 获取向前方向。\n\t * @param forward 前方向。\n\t */\n\tgetForward(forward: Vector3): void {\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\n\t\tforward.x = -worldMatElem[8];\n\t\tforward.y = -worldMatElem[9];\n\t\tforward.z = -worldMatElem[10];\n\t}\n\n\t/**\n\t * 获取向上方向。\n\t * @param up 上方向。\n\t */\n\tgetUp(up: Vector3): void {\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\n\t\tup.x = worldMatElem[4];\n\t\tup.y = worldMatElem[5];\n\t\tup.z = worldMatElem[6];\n\t}\n\n\t/**\n\t * 获取向右方向。\n\t * @param 右方向。\n\t */\n\tgetRight(right: Vector3): void {\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\n\t\tright.x = worldMatElem[0];\n\t\tright.y = worldMatElem[1];\n\t\tright.z = worldMatElem[2];\n\t}\n\n\t/**\n\t * 观察目标位置。\n\t * @param\ttarget 观察目标。\n\t * @param\tup 向上向量。\n\t * @param\tisLocal 是否局部空间。\n\t */\n\tlookAt(target: Vector3, up: Vector3, isLocal: boolean = false, isCamera: boolean = true): void {\n\t\tvar eye: Vector3;\n\t\tif (isLocal) {\n\t\t\teye = this._localPosition;\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\n\t\t\t\treturn;\n\t\t\tif (isCamera) {\n\t\t\t\tQuaternion.lookAt(this._localPosition, target, up, this._localRotation);\n\t\t\t\tthis._localRotation.invert(this._localRotation);\n\t\t\t} else {\n\t\t\t\tVector3.subtract(this.localPosition, target, Transform3D._tempVector30);\n\t\t\t\tQuaternion.rotationLookAt(Transform3D._tempVector30, up, this.localRotation);\n\t\t\t\tthis._localRotation.invert(this._localRotation);\n\t\t\t}\n\n\t\t\tthis.localRotation = this._localRotation;\n\t\t} else {\n\t\t\tvar worldPosition: Vector3 = this.position;\n\t\t\teye = worldPosition;\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\n\t\t\t\treturn;\n\t\t\tif (isCamera) {\n\t\t\t\tQuaternion.lookAt(worldPosition, target, up, this._rotation);\n\t\t\t\tthis._rotation.invert(this._rotation);\n\t\t\t} else {\n\t\t\t\tVector3.subtract(this.position, target, Transform3D._tempVector30);\n\t\t\t\tQuaternion.rotationLookAt(Transform3D._tempVector30, up, this._rotation);\n\t\t\t\tthis._rotation.invert(this._rotation);\n\t\t\t}\n\t\t\tthis.rotation = this._rotation;\n\t\t}\n\t}\n\n\t/**\n\t * 对象朝向目标\n\t * @param target \n\t * @param up \n\t * @param isLocal \n\t */\n\tobjLookat(target: Vector3, up: Vector3, isLocal: boolean = false): void {\n\n\t}\n\n\n\n\t/**\n\t * 世界缩放。\n\t * 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\n\t * @return\t世界缩放。\n\t */\n\tgetWorldLossyScale(): Vector3 {\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\n\t\t\tif (this._parent !== null) {\n\t\t\t\tvar scaMatE = this._getScaleMatrix().elements;\n\t\t\t\tthis._scale.x = scaMatE[0];\n\t\t\t\tthis._scale.y = scaMatE[4];\n\t\t\t\tthis._scale.z = scaMatE[8];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._localScale.cloneTo(this._scale);\n\t\t\t}\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\n\t\t}\n\t\treturn this._scale;\n\t}\n\n\t/**\n\t * 设置世界缩放。\n\t * 某种条件下设置该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\n\t * @return\t世界缩放。\n\t */\n\tsetWorldLossyScale(value: Vector3) {\n\t\tif (this._parent !== null) {\n\t\t\tvar scaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\n\t\t\tvar localScaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\n\t\t\tvar localScaleMatE: Float32Array = localScaleMat.elements;\n\t\t\tvar parInvScaleMat: Matrix3x3 = this._parent._getScaleMatrix();\n\t\t\tparInvScaleMat.invert(parInvScaleMat);\n\t\t\tMatrix3x3.createFromScaling(value, scaleMat);\n\t\t\tMatrix3x3.multiply(parInvScaleMat, scaleMat, localScaleMat);\n\t\t\tthis._localScale.x = localScaleMatE[0];\n\t\t\tthis._localScale.y = localScaleMatE[4];\n\t\t\tthis._localScale.z = localScaleMatE[8];\n\t\t} else {\n\t\t\tvalue.cloneTo(this._localScale);\n\t\t}\n\t\tthis.localScale = this._localScale;\n\t\tif (this._scale !== value)\n\t\t\tvalue.cloneTo(this._scale);\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\n\t}\n\n\t//----------------------------------------Discard-------------------------------------------------\n\t/**\n\t * @deprecated\n\t */\n\tget scale(): Vector3 {\n\t\tconsole.warn(\"Transfrm3D: discard function,please use getWorldLossyScale instead.\");\n\t\treturn this.getWorldLossyScale();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tset scale(value: Vector3) {\n\t\tconsole.warn(\"Transfrm3D: discard function,please use setWorldLossyScale instead.\");\n\t\tthis.setWorldLossyScale(value);\n\t}\n\n\tlocalToGlobal(value: Vector3, out: Vector3): void {\n\t\tVector3.transformV3ToV3(value, this.worldMatrix, out);\n\t}\n\n\t/**\n\t *转化成局部坐标\n\t\t* @param pos\n\t\t* @param out\n\t\t* \n\t\t*/\n\tglobalToLocal(pos: Vector3, out: Vector3): void {\n\t\tthis.worldMatrix.invert(Transform3D._tempMatrix0);\n\t\tVector3.transformV3ToV3(pos, Transform3D._tempMatrix0, out);\n\t}\n\n\t/**\n\t *转化成局部向量 \n\t * @param pos\n\t * @param out\n\t * \n\t */\n\ttoLocalNormal(pos: Vector3, out: Vector3): void {\n\t\tthis.worldMatrix.invert(Transform3D._tempMatrix0);\n\t\tVector3.TransformNormal(pos, Transform3D._tempMatrix0, out);\n\t}\n\n\ttoDir(forward: Vector3, dir: Vector3) {\n\t\t//TODO 判断一样么\n\t\tvar wmat: Matrix4x4 = this.worldMatrix;\n\t\t//var newForward:Vector3 = new Vector3();\n\t\t//var newRot:Quaternion = new Quaternion();\n\n\t\t//Vector3.TransformNormal(forward,wmat,newForward);\n\t\t//Vector3.normalize(newForward,newForward);\n\t\t//rotationTo(newRot,newForward,dir);\n\t\tthis.rotationTo(this.rotation, forward, dir);\n\t\t//Quaternion.multiply(rotation,newRot,rotation)\n\t\t//DEBUG\n\t\t//Quaternion.createFromAxisAngle(new Vector3(0,1,0),75*Math.PI/180,newRot)\n\t\t//DEBUG\n\t\tthis.rotation = this.rotation;\n\t}\n\n\tstatic tmpVec3: Vector3 = new Vector3();\n\t/**\n\t * 这是一个 glmatrix中的函数\n\t * a,b都是规格化以后的向量\n\t * Sets a quaternion to represent the shortest rotation from one\n\t * vector to another.\n\t *\n\t * Both vectors are assumed to be unit length.\n\t *\n\t * @param {quat} out the receiving quaternion.\n\t * @param {vec3} a the initial vector\n\t * @param {vec3} b the destination vector\n\t * @returns {quat} out\n\t */\n\trotationTo(out: Quaternion, a: Vector3, b: Vector3): boolean {\n\t\tvar dot: number = Vector3.dot(a, b);\n\t\tVector3.Up\n\t\tif (dot < -0.999999) {// 180度了，可以选择多个轴旋转\n\t\t\tVector3.cross(Vector3.UnitX, a, Transform3D.tmpVec3);\n\t\t\tif (Vector3.scalarLength(Transform3D.tmpVec3) < 0.000001)\n\t\t\t\tVector3.cross(Vector3.UnitY, a, Transform3D.tmpVec3);\n\t\t\tVector3.normalize(Transform3D.tmpVec3, Transform3D.tmpVec3);\n\t\t\tQuaternion.createFromAxisAngle(Transform3D.tmpVec3, Math.PI, out);\n\t\t\treturn true\n\t\t} else if (dot > 0.999999) {// 没有变化\n\t\t\tout.x = 0;\n\t\t\tout.y = 0;\n\t\t\tout.z = 0;\n\t\t\tout.w = 1;\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// 下面是求这个四元数，这是一个简化求法，根据cos(a/2)=√((1+dot)/2), cos(a/2)sin(a/2)=sin(a)/2 就能推导出来\n\t\t\tVector3.cross(a, b, Transform3D.tmpVec3);\n\t\t\tout.x = Transform3D.tmpVec3.x;\n\t\t\tout.y = Transform3D.tmpVec3.y;\n\t\t\tout.z = Transform3D.tmpVec3.z;\n\t\t\tout.w = 1 + dot;\n\t\t\tout.normalize(out);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\n\n","import { IClone } from \"../../../utils/IClone\";\nimport { PhysicsComponent } from \"../PhysicsComponent\";\nimport { CompoundColliderShape } from \"./CompoundColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>ColliderShape</code> 类用于创建形状碰撞器的父类，该类为抽象类。\n */\nexport class ColliderShape implements IClone {\n\t/** 形状方向_X轴正向 */\n\tstatic SHAPEORIENTATION_UPX: number = 0;\n\t/** 形状方向_Y轴正向 */\n\tstatic SHAPEORIENTATION_UPY: number = 1;\n\t/** 形状方向_Z轴正向 */\n\tstatic SHAPEORIENTATION_UPZ: number = 2;\n\n\t/** @internal */\n\tstatic SHAPETYPES_BOX: number = 0;\n\t/** @internal */\n\tstatic SHAPETYPES_SPHERE: number = 1;\n\t/** @internal */\n\tstatic SHAPETYPES_CYLINDER: number = 2;\n\t/** @internal */\n\tstatic SHAPETYPES_CAPSULE: number = 3;\n\t/** @internal */\n\tstatic SHAPETYPES_CONVEXHULL: number = 4;\n\t/** @internal */\n\tstatic SHAPETYPES_COMPOUND: number = 5;\n\t/** @internal */\n\tstatic SHAPETYPES_STATICPLANE: number = 6;\n\t/** @internal */\n\tstatic SHAPETYPES_CONE: number = 7;\n\t/** @internal */\n\tstatic SHAPETYPES_HEIGHTFIELDTERRAIN: number = 8;\n\n\t/** @internal */\n\tstatic _tempVector30: Vector3 = new Vector3();\n\t/** @internal */\n\tprotected static _btScale: number;\n\t/**@internal */\n\tprotected static _btVector30: number;\n\t/**@internal */\n\tprotected static _btQuaternion0: number;\n\t/**@internal */\n\tprotected static _btTransform0: number;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tColliderShape._btScale = bt.btVector3_create(1, 1, 1);\n\t\tColliderShape._btVector30 = bt.btVector3_create(0, 0, 0);\n\t\tColliderShape._btQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\n\t\tColliderShape._btTransform0 = bt.btTransform_create();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic _createAffineTransformation(trans: Vector3, rot: Quaternion, outE: Float32Array): void {\n\n\t\tvar x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\n\t\tvar xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\n\t\tvar wx: number = w * x2, wy: number = w * y2, wz: number = w * z2;\n\n\t\toutE[0] = (1 - (yy + zz));\n\t\toutE[1] = (xy + wz);\n\t\toutE[2] = (xz - wy);\n\t\toutE[3] = 0;\n\t\toutE[4] = (xy - wz);\n\t\toutE[5] = (1 - (xx + zz));\n\t\toutE[6] = (yz + wx);\n\t\toutE[7] = 0;\n\t\toutE[8] = (xz + wy);\n\t\toutE[9] = (yz - wx);\n\t\toutE[10] = (1 - (xx + yy));\n\t\toutE[11] = 0;\n\t\toutE[12] = trans.x;\n\t\toutE[13] = trans.y;\n\t\toutE[14] = trans.z;\n\t\toutE[15] = 1;\n\t}\n\n\t/**@internal */\n\tprotected _scale: Vector3 = new Vector3(1, 1, 1);\n\n\t/**@internal */\n\t_btShape: number;\n\t/**@internal */\n\t_type: number;//TODO:可以删掉\n\t/**@internal */\n\t_centerMatrix: Matrix4x4 = new Matrix4x4();\n\n\t/**@internal */\n\t_attatched: boolean = false;\n\t/**@internal */\n\t_indexInCompound: number = -1;\n\t/**@internal */\n\t_compoundParent: CompoundColliderShape = null;\n\t/**@internal */\n\t_attatchedCollisionObject: PhysicsComponent = null;\n\n\t/**@internal */\n\t_referenceCount: number = 0;\n\n\t/**@internal */\n\tprivate _localOffset: Vector3 = new Vector3(0, 0, 0);\n\t/**@internal */\n\tprivate _localRotation: Quaternion = new Quaternion(0, 0, 0, 1);\n\n\tneedsCustomCollisionCallback: boolean = false;//TODO:默认值,TODO:::::::::::::::::::::::::::::::\n\n\t/**\n\t * 碰撞类型。\n\t */\n\tget type(): number {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * Shape的本地偏移。\n\t */\n\tget localOffset(): Vector3 {\n\t\treturn this._localOffset;\n\t}\n\n\tset localOffset(value: Vector3) {\n\t\tthis._localOffset = value;\n\t\tif (this._compoundParent)\n\t\t\tthis._compoundParent._updateChildTransform(this);\n\t}\n\n\t/**\n\t * Shape的本地旋转。\n\t */\n\tget localRotation(): Quaternion {\n\t\treturn this._localRotation;\n\t}\n\n\tset localRotation(value: Quaternion) {\n\t\tthis._localRotation = value;\n\t\tif (this._compoundParent)\n\t\t\tthis._compoundParent._updateChildTransform(this);\n\t}\n\n\t/**\n\t * 创建一个新的 <code>ColliderShape</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setScale(value: Vector3): void {\n\t\tif (this._compoundParent) {//TODO:待查,这里有问题\n\t\t\tthis.updateLocalTransformations();\n\t\t} else {\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\t\tbt.btVector3_setValue(ColliderShape._btScale, value.x, value.y, value.z);\n\t\t\tbt.btCollisionShape_setLocalScaling(this._btShape, ColliderShape._btScale);\n\t\t}\n\t}\n\n\t/**\n\t * 更新本地偏移,如果修改LocalOffset或LocalRotation需要调用。\n\t */\n\tupdateLocalTransformations(): void {//TODO:是否需要优化\n\t\tif (this._compoundParent) {\n\t\t\tvar offset: Vector3 = ColliderShape._tempVector30;\n\t\t\tVector3.multiply(this.localOffset, this._scale, offset);\n\t\t\tColliderShape._createAffineTransformation(offset, this.localRotation, this._centerMatrix.elements);\n\t\t} else {\n\t\t\tColliderShape._createAffineTransformation(this.localOffset, this.localRotation, this._centerMatrix.elements);\n\t\t}\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destColliderShape: ColliderShape = (<ColliderShape>destObject);\n\t\tthis._localOffset.cloneTo(destColliderShape.localOffset);\n\t\tthis._localRotation.cloneTo(destColliderShape.localRotation);\n\t\tdestColliderShape.localOffset = destColliderShape.localOffset;\n\t\tdestColliderShape.localRotation = destColliderShape.localRotation;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return 克隆副本。\n\t */\n\tclone(): any {\n\t\treturn null;\n\t}\n\n\t/**\n\t * 销毁。\n\t */\n\tdestroy(): void {\n\t\tif (this._btShape) {\n\t\t\tILaya3D.Physics3D._bullet.btCollisionShape_destroy(this._btShape);\n\t\t\tthis._btShape = null;\n\t\t}\n\t}\n\n}\n\n\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { LayaEnv } from \"../../../../LayaEnv\";\n\n/**\n * <code>BoxColliderShape</code> 类用于创建盒子形状碰撞器。\n */\nexport class BoxColliderShape extends ColliderShape {\n\t/** @internal */\n\tprivate static _btSize: number;\n\n\t/**\n\t* @internal\n\t*/\n\tstatic __init__(): void {\n\t\tBoxColliderShape._btSize = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\n\t}\n\n\t/**@internal */\n\tprivate _sizeX: number;\n\t/**@internal */\n\tprivate _sizeY: number;\n\t/**@internal */\n\tprivate _sizeZ: number;\n\n\t/**\n\t * X轴尺寸。\n\t */\n\tget sizeX(): number {\n\t\treturn this._sizeX;\n\t}\n\n\tset sizeX(value: number) {\n\t\tthis._sizeX = value;\n\t\tif (LayaEnv.isPlaying) {\n\t\t\tthis.changeBoxShape();\n\t\t}\n\t}\n\n\t/**\n\t * Y轴尺寸。\n\t */\n\tget sizeY(): number {\n\t\treturn this._sizeY;\n\t}\n\n\tset sizeY(value: number) {\n\t\tthis._sizeY = value;\n\t\tif (LayaEnv.isPlaying) {\n\t\t\tthis.changeBoxShape();\n\t\t}\n\t}\n\n\t/**\n\t * Z轴尺寸。\n\t */\n\tget sizeZ(): number {\n\t\treturn this._sizeZ;\n\t}\n\n\tset sizeZ(value: number) {\n\t\tthis._sizeZ = value;\n\t\tif (LayaEnv.isPlaying) {\n\t\t\tthis.changeBoxShape();\n\t\t}\n\t}\n\n\t/**\n\t * 创建一个新的 <code>BoxColliderShape</code> 实例。\n\t * @param sizeX 盒子X轴尺寸。\n\t * @param sizeY 盒子Y轴尺寸。\n\t * @param sizeZ 盒子Z轴尺寸。\n\t */\n\tconstructor(sizeX: number = 1.0, sizeY: number = 1.0, sizeZ: number = 1.0) {\n\n\t\tsuper();\n\t\tthis._sizeX = sizeX;\n\t\tthis._sizeY = sizeY;\n\t\tthis._sizeZ = sizeZ;\n\t\tthis._type = ColliderShape.SHAPETYPES_BOX;\n\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tbt.btVector3_setValue(BoxColliderShape._btSize, sizeX / 2, sizeY / 2, sizeZ / 2);\n\t\tthis._btShape = bt.btBoxShape_create(BoxColliderShape._btSize);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tchangeBoxShape() {\n\t\t//TODO Miner\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tif (this._btShape) {\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\n\t\t}\n\t\tbt.btVector3_setValue(BoxColliderShape._btSize, this._sizeX / 2, this._sizeY / 2, this._sizeZ / 2);\n\t\tthis._btShape = bt.btBoxShape_create(BoxColliderShape._btSize);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: BoxColliderShape = new BoxColliderShape(this._sizeX, this._sizeY, this._sizeZ);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n}\n\n\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { LayaEnv } from \"../../../../LayaEnv\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>CapsuleColliderShape</code> 类用于创建胶囊形状碰撞器。\n */\nexport class CapsuleColliderShape extends ColliderShape {\n\t/** @internal */\n\tpublic static _tempVector30: Vector3 = new Vector3();\n\n\t/**@internal */\n\tprivate _radius: number;\n\t/**@internal */\n\tprivate _length: number;\n\t/**@internal */\n\tprivate _orientation: number;\n\n\t/**\n\t * 半径。\n\t */\n\tget radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tset radius(value: number) {\n\t\tthis._radius = value;\n\t\tif (LayaEnv.isPlaying) {\n\t\t\tthis.changeCapsuleShape();\n\t\t}\n\t}\n\n\t/**\n\t * 长度。\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\tset length(value: number) {\n\t\tthis._length = value;\n\t\tif (LayaEnv.isPlaying) {\n\t\t\tthis.changeCapsuleShape();\n\t\t}\n\t}\n\n\t/**\n\t * 方向。\n\t */\n\tget orientation(): number {\n\t\treturn this._orientation;\n\t}\n\n\tset orientation(value: number) {\n\t\tthis._orientation = value;\n\t\tif (LayaEnv.isPlaying) {\n\t\t\tthis.changeCapsuleShape();\n\t\t}\n\t}\n\n\t/**\n\t * 创建一个新的 <code>CapsuleColliderShape</code> 实例。\n\t * @param 半径。\n\t * @param 高(包含半径)。\n\t * @param orientation 胶囊体方向。\n\t */\n\tconstructor(radius: number = 0.5, length: number = 2, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\n\n\t\tsuper();\n\t\tthis._radius = radius;\n\t\tthis._length = length;\n\t\tthis._orientation = orientation;\n\t\tthis._type = ColliderShape.SHAPETYPES_CAPSULE;\n\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tswitch (orientation) {\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\n\t\t\t\tthis._btShape = bt.btCapsuleShapeX_create(radius, length - radius * 2);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\n\t\t\t\tthis._btShape = bt.btCapsuleShape_create(radius, length - radius * 2);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\n\t\t\t\tthis._btShape = bt.btCapsuleShapeZ_create(radius, length - radius * 2);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tchangeCapsuleShape() {\n\t\t//TODO MIner\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tif (this._btShape) {\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\n\t\t}\n\t\tswitch (this._orientation) {\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\n\t\t\t\tthis._btShape = bt.btCapsuleShapeX_create(this._radius, this._length - this._radius * 2);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\n\t\t\t\tthis._btShape = bt.btCapsuleShape_create(this._radius, this._length - this._radius * 2);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\n\t\t\t\tthis._btShape = bt.btCapsuleShapeZ_create(this._radius, this._length - this._radius * 2);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_setScale(value: Vector3): void {\n\t\tvar fixScale: Vector3 = CapsuleColliderShape._tempVector30;\n\t\tswitch (this.orientation) {\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\n\t\t\t\tfixScale.x = value.x;\n\t\t\t\tfixScale.y = fixScale.z = Math.max(value.y, value.z);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\n\t\t\t\tfixScale.y = value.y;\n\t\t\t\tfixScale.x = fixScale.z = Math.max(value.x, value.z);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\n\t\t\t\tfixScale.z = value.z;\n\t\t\t\tfixScale.x = fixScale.y = Math.max(value.x, value.y);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\n\t\t}\n\t\tsuper._setScale(fixScale);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: CapsuleColliderShape = new CapsuleColliderShape(this._radius, this._length, this._orientation);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>CompoundColliderShape</code> 类用于创建组合碰撞器。\n */\nexport class CompoundColliderShape extends ColliderShape {\n\t/**@internal */\n\tprivate static _btVector3One: number;\n\t/**@internal */\n\tprivate static _btTransform: number;\n\t/**@internal */\n\tprivate static _btOffset: number;\n\t/**@internal */\n\tprivate static _btRotation: number;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tCompoundColliderShape._btVector3One = bt.btVector3_create(1, 1, 1);\n\t\tCompoundColliderShape._btTransform = bt.btTransform_create();\n\t\tCompoundColliderShape._btOffset = bt.btVector3_create(0, 0, 0);\n\t\tCompoundColliderShape._btRotation = bt.btQuaternion_create(0, 0, 0, 1);\n\t}\n\n\t/**@internal */\n\tprivate _childColliderShapes: ColliderShape[] = [];\n\n\t/**\n\t * 创建一个新的 <code>CompoundColliderShape</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._type = ColliderShape.SHAPETYPES_COMPOUND;\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btCompoundShape_create();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _clearChildShape(shape: ColliderShape): void {\n\t\tshape._attatched = false;\n\t\tshape._compoundParent = null;\n\t\tshape._indexInCompound = -1;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_updateChildTransform(shape: ColliderShape): void {\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tvar offset: Vector3 = shape.localOffset;\n\t\tvar rotation: Quaternion = shape.localRotation;\n\t\tvar btOffset: number = ColliderShape._btVector30;\n\t\tvar btQuaternion: number = ColliderShape._btQuaternion0;\n\t\tvar btTransform: number = ColliderShape._btTransform0;\n\t\tbt.btVector3_setValue(btOffset, offset.x, offset.y, offset.z);\n\t\tbt.btQuaternion_setValue(btQuaternion, rotation.x, rotation.y, rotation.z, rotation.w);\n\t\tbt.btTransform_setOrigin(btTransform, btOffset);\n\t\tbt.btTransform_setRotation(btTransform, btQuaternion);\n\t\tbt.btCompoundShape_updateChildTransform(this._btShape, shape._indexInCompound, btTransform, true);\n\t}\n\n\n\t/**\n\t * 设置物理shape数组\n\t * IDE\n\t */\n\tpublic set shapes(value: ColliderShape[]) {\n\t\tfor (var i = this._childColliderShapes.length - 1; i >= 0; i--) {\n\t\t\tthis.removeChildShape(this._childColliderShapes[i]);\n\t\t}\n\n\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\tthis.addChildShape(value[i]);\n\t\t}\n\t}\n\n\tpublic get shapes(): ColliderShape[] {\n\t\treturn this._childColliderShapes;\n\t}\n\n\t/**\n\t * 添加子碰撞器形状。\n\t * @param\tshape 子碰撞器形状。\n\t */\n\taddChildShape(shape: ColliderShape): void {\n\t\tif (shape._attatched)\n\t\t\tthrow \"CompoundColliderShape: this shape has attatched to other entity.\";\n\n\t\tshape._attatched = true;\n\t\tshape._compoundParent = this;\n\t\tshape._indexInCompound = this._childColliderShapes.length;\n\t\tthis._childColliderShapes.push(shape);\n\t\tvar offset: Vector3 = shape.localOffset;\n\t\tvar rotation: Quaternion = shape.localRotation;\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tbt.btVector3_setValue(CompoundColliderShape._btOffset, offset.x, offset.y, offset.z);\n\t\tbt.btQuaternion_setValue(CompoundColliderShape._btRotation, rotation.x, rotation.y, rotation.z, rotation.w);\n\t\tbt.btTransform_setOrigin(CompoundColliderShape._btTransform, CompoundColliderShape._btOffset);\n\t\tbt.btTransform_setRotation(CompoundColliderShape._btTransform, CompoundColliderShape._btRotation);\n\n\t\tvar btScale: number = bt.btCollisionShape_getLocalScaling(this._btShape);\n\t\tbt.btCollisionShape_setLocalScaling(this._btShape, CompoundColliderShape._btVector3One);\n\t\tbt.btCompoundShape_addChildShape(this._btShape, CompoundColliderShape._btTransform, shape._btShape);\n\t\tbt.btCollisionShape_setLocalScaling(this._btShape, btScale);\n\n\t\t(this._attatchedCollisionObject) && (this._attatchedCollisionObject.colliderShape = this);//修改子Shape需要重新赋值父Shape以及将物理精灵重新加入物理世界等操作\n\t}\n\n\t/**\n\t * 移除子碰撞器形状。\n\t * @param\tshape 子碰撞器形状。\n\t */\n\tremoveChildShape(shape: ColliderShape): void {\n\t\tif (shape._compoundParent === this) {\n\t\t\tvar index: number = shape._indexInCompound;\n\t\t\tthis._clearChildShape(shape);\n\t\t\tvar endShape: ColliderShape = this._childColliderShapes[this._childColliderShapes.length - 1];\n\t\t\tendShape._indexInCompound = index;\n\t\t\tthis._childColliderShapes[index] = endShape;\n\t\t\tthis._childColliderShapes.pop();\n\t\t\tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, index);\n\t\t}\n\t}\n\n\t/**\n\t * 清空子碰撞器形状。\n\t */\n\tclearChildShape(): void {\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\n\t\t\tthis._clearChildShape(this._childColliderShapes[i]);\n\t\t\tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, 0);\n\t\t}\n\t\tthis._childColliderShapes.length = 0;\n\t}\n\n\t/**\n\t * 获取子形状数量。\n\t * @return\n\t */\n\tgetChildShapeCount(): number {\n\t\treturn this._childColliderShapes.length;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destCompoundColliderShape: CompoundColliderShape = (<CompoundColliderShape>destObject);\n\t\tdestCompoundColliderShape.clearChildShape();\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++)\n\t\t\tdestCompoundColliderShape.addChildShape(this._childColliderShapes[i].clone());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: CompoundColliderShape = new CompoundColliderShape();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tdestroy(): void {\n\t\tsuper.destroy();\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\n\t\t\tvar childShape: ColliderShape = this._childColliderShapes[i];\n\t\t\tif (childShape._referenceCount === 0)\n\t\t\t\tchildShape.destroy();\n\t\t}\n\t}\n\n}\n\n\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { LayaEnv } from \"../../../../LayaEnv\";\n\n/**\n * <code>ConeColliderShape</code> 类用于创建圆锥碰撞器。\n */\nexport class ConeColliderShape extends ColliderShape {\n\tprivate _orientation: number;\n\tprivate _radius: number = 1;\n\tprivate _height: number = 0.5;\n\n\t/**\n\t * 半径。\n\t */\n\tget radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tset radius(value: number) {\n\t\tthis._radius = value;\n\t\tif (LayaEnv.isPlaying) this.changeConeShape();\n\t}\n\n\t/**\n\t * 高度。\n\t */\n\tget height(): number {\n\t\treturn this._height;\n\t}\n\n\tset height(value: number) {\n\t\tthis._height = value;\n\t\tif (LayaEnv.isPlaying) this.changeConeShape();\n\t}\n\n\t/**\n\t * 方向。\n\t */\n\tget orientation(): number {\n\t\treturn this._orientation;\n\t}\n\n\tset orientation(value: number) {\n\t\tthis._orientation = value;\n\t\tif (LayaEnv.isPlaying) this.changeConeShape();\n\t}\n\n\t/**\n\t * 创建一个新的 <code>ConeColliderShape</code> 实例。\n\t * @param height 高。\n\t * @param radius 半径。\n\t */\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\n\t\tsuper();\n\t\tthis._radius = radius;\n\t\tthis._height = height;\n\t\tthis._orientation = orientation;\n\t\tthis._type = ColliderShape.SHAPETYPES_CYLINDER;\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tswitch (orientation) {\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\n\t\t\t\tthis._btShape = bt.btConeShapeX_create(radius, height);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\n\t\t\t\tthis._btShape = bt.btConeShape_create(radius, height);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\n\t\t\t\tthis._btShape = bt.btConeShapeZ_create(radius, height);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"ConeColliderShape:unknown orientation.\";\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tchangeConeShape() {\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tif (this._btShape) {\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\n\t\t}\n\n\t\tswitch (this._orientation) {\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\n\t\t\t\tthis._btShape = bt.btConeShapeX_create(this._radius, this._height);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\n\t\t\t\tthis._btShape = bt.btConeShape_create(this._radius, this._height);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\n\t\t\t\tthis._btShape = bt.btConeShapeZ_create(this._radius, this._height);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"ConeColliderShape:unknown orientation.\";\n\t\t}\n\t}\n\n\t/**\n\t * 克隆\n\t * @inheritDoc\n\t * @override\n\t * @returns 克隆的ConeColliderShape实例\n\t */\n\tclone(): any {\n\t\tvar dest: ConeColliderShape = new ConeColliderShape(this._radius, this._height, this._orientation);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { LayaEnv } from \"../../../../LayaEnv\";\n\n/**\n * <code>CylinderColliderShape</code> 类用于创建圆柱碰撞器。\n */\nexport class CylinderColliderShape extends ColliderShape {\n\t/** @internal */\n\tprivate static _btSize: number;\n\n\t/**\n\t* @internal\n\t*/\n\tstatic __init__(): void {\n\t\tCylinderColliderShape._btSize = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\n\t}\n\n\tprivate _orientation: number;\n\tprivate _radius: number = 1;\n\tprivate _height: number = 0.5;\n\n\t/**\n\t * 半径。\n\t */\n\tget radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tset radius(value: number) {\n\t\tthis._radius = value;\n\t\tif (LayaEnv.isPlaying) this.changeCylinder();\n\t}\n\n\t/**\n\t * 高度。\n\t */\n\tget height(): number {\n\t\treturn this._height;\n\t}\n\n\tset height(value: number) {\n\t\tthis._height = value;\n\t\tif (LayaEnv.isPlaying) this.changeCylinder();\n\t}\n\n\t/**\n\t * 方向。\n\t */\n\tget orientation(): number {\n\t\treturn this._orientation;\n\t}\n\n\tset orientation(value: number) {\n\t\tthis._orientation = value;\n\t\tif (LayaEnv.isPlaying) this.changeCylinder();\n\t}\n\n\t/**\n\t * 创建一个新的 <code>CylinderColliderShape</code> 实例。\n\t * @param height 高。\n\t * @param radius 半径。\n\t */\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\n\t\tsuper();\n\t\tthis._radius = radius;\n\t\tthis._height = height;\n\t\tthis._orientation = orientation;\n\t\tthis._type = ColliderShape.SHAPETYPES_CYLINDER;\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tswitch (orientation) {\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, height / 2, radius, radius);\n\t\t\t\tthis._btShape = bt.btCylinderShapeX_create(CylinderColliderShape._btSize);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, radius, height / 2, radius);\n\t\t\t\tthis._btShape = bt.btCylinderShape_create(CylinderColliderShape._btSize);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, radius, radius, height / 2);\n\t\t\t\tthis._btShape = bt.btCylinderShapeZ_create(CylinderColliderShape._btSize);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tchangeCylinder() {\n\t\t//TODO \n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tif (this._btShape) {\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\n\t\t}\n\t\tswitch (this._orientation) {\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, this._height / 2, this._radius, this._radius);\n\t\t\t\tthis._btShape = bt.btCylinderShapeX_create(CylinderColliderShape._btSize);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, this._radius, this._height / 2, this._radius);\n\t\t\t\tthis._btShape = bt.btCylinderShape_create(CylinderColliderShape._btSize);\n\t\t\t\tbreak;\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, this._radius, this._radius, this._height / 2);\n\t\t\t\tthis._btShape = bt.btCylinderShapeZ_create(CylinderColliderShape._btSize);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: CylinderColliderShape = new CylinderColliderShape(this._radius, this._height, this._orientation);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","import { Mesh } from \"../../resource/models/Mesh\";\nimport { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>MeshColliderShape</code> 类用于创建网格碰撞器。\n */\nexport class MeshColliderShape extends ColliderShape {\n\t/** @internal */\n\tprivate _mesh: Mesh = null;\n\t/** @internal */\n\tprivate _convex: boolean = false;\n\t/** @internal */\n\tprivate _physicMesh:any;\n\n\t/**\n\t * 网格。\n\t */\n\tget mesh(): Mesh {\n\t\treturn this._mesh;\n\t}\n\n\tset mesh(value: Mesh) {\n\t\tif(!value)\n\t\t\treturn;\n\t\tif (this._mesh !== value) {\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\t\tthis._physicMesh = value._getPhysicMesh()\n\t\t\tif (this._mesh) {\n\t\t\t\tbt.btCollisionShape_destroy(this._btShape);\n\t\t\t}\n\t\t\tthis._setPhysicsMesh();\n\t\t\tthis._mesh = value;\n\t\t}\n\t}\n\n\t/**\n\t * 是否使用凸多边形。\n\t */\n\tget convex(): boolean {\n\t\treturn this._convex;\n\t}\n\n\tset convex(value: boolean) {\n\t\tthis._convex = value;\n\t}\n\n\t/**\n\t * 创建一个新的 <code>MeshColliderShape</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\n\t}\n\t/**\n\t * @internal\n\t */\n\t_setPhysicsMesh(){\n\t\t//if (this._attatchedCollisionObject) {\n\t\t\tif(false){\n\t\t\t\tthis._createDynamicMeshCollider();\n\t\t\t}else{\n\t\t\t\tthis._createBvhTriangleCollider();\n\t\t\t\t//bt.btGImpactShapeInterface_updateBound(this._btShape);\n\t\t\t}\n\t\t//}\n\t}\n\n\tprivate _createDynamicMeshCollider(){\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tif(this._physicMesh){\n\t\t\tthis._btShape = bt.btGImpactMeshShape_create(this._physicMesh);\n\t\t\tbt.btGImpactShapeInterface_updateBound(this._btShape);\n\t\t}\n\t}\n\n\tprivate _createBvhTriangleCollider(){\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tif(this._physicMesh)\n\t\tthis._btShape = bt.btBvhTriangleMeshShape_create(this._physicMesh);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_setScale(value: Vector3): void {\n\t\tif (this._compoundParent) {//TODO:待查,这里有问题\n\t\t\tthis.updateLocalTransformations();//TODO:\n\t\t} else {\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\t\tbt.btVector3_setValue(ColliderShape._btScale, value.x, value.y, value.z);\n\t\t\tbt.btCollisionShape_setLocalScaling(this._btShape, ColliderShape._btScale);\n\t\t\tif(this._attatchedCollisionObject&&this._attatchedCollisionObject._enableProcessCollisions){\n\t\t\t\tbt.btGImpactShapeInterface_updateBound(this._btShape);//更新缩放后需要更新包围体,有性能损耗\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destMeshCollider: MeshColliderShape = (<MeshColliderShape>destObject);\n\t\tdestMeshCollider.convex = this._convex;\n\t\tdestMeshCollider.mesh = this._mesh;\n\t\tsuper.cloneTo(destObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: MeshColliderShape = new MeshColliderShape();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tdestroy(): void {\n\t\tif (this._btShape) {\n\t\t\tILaya3D.Physics3D._bullet.btCollisionShape_destroy(this._btShape);\n\t\t\tthis._btShape = null;\n\t\t}\n\t}\n\n}\n\n\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { LayaEnv } from \"../../../../LayaEnv\";\n\n/**\n * <code>SphereColliderShape</code> 类用于创建球形碰撞器。\n */\nexport class SphereColliderShape extends ColliderShape {\n\t/** @internal */\n\tprivate _radius: number;\n\n\t/**\n\t * 半径。\n\t */\n\tget radius(): number {\n\t\treturn this._radius;\n\t}\n\n\tset radius(value: number) {\n\t\tthis._radius = value;\n\t\tif (LayaEnv.isPlaying) this.changeSphere();\n\t}\n\n\t/**\n\t * 创建一个新的 <code>SphereColliderShape</code> 实例。\n\t * @param radius 半径。\n\t */\n\tconstructor(radius: number = 0.5) {//TODO:球形旋转无效，需要优化\n\n\t\tsuper();\n\t\tthis._radius = radius;\n\t\tthis._type = ColliderShape.SHAPETYPES_SPHERE;\n\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btSphereShape_create(radius);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tchangeSphere() {\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tif (this._btShape) {\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\n\t\t}\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btSphereShape_create(this._radius);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: SphereColliderShape = new SphereColliderShape(this._radius);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","\nimport { Component } from \"../../components/Component\";\nimport { Event } from \"../../events/Event\";\nimport { Loader } from \"../../net/Loader\";\nimport { Scene3D } from \"../core/scene/Scene3D\";\nimport { Sprite3D } from \"../core/Sprite3D\";\nimport { Transform3D } from \"../core/Transform3D\";\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\nimport { PhysicsSimulation } from \"./PhysicsSimulation\";\nimport { BoxColliderShape } from \"./shape/BoxColliderShape\";\nimport { CapsuleColliderShape } from \"./shape/CapsuleColliderShape\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\nimport { CompoundColliderShape } from \"./shape/CompoundColliderShape\";\nimport { ConeColliderShape } from \"./shape/ConeColliderShape\";\nimport { CylinderColliderShape } from \"./shape/CylinderColliderShape\";\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\nimport { SphereColliderShape } from \"./shape/SphereColliderShape\";\nimport { ILaya3D } from \"../../../ILaya3D\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * <code>PhysicsComponent</code> 类用于创建物理组件的父类。\n */\nexport class PhysicsComponent extends Component {\n    /** @internal */\n    static ACTIVATIONSTATE_ACTIVE_TAG = 1;\n    /** @internal */\n    static ACTIVATIONSTATE_ISLAND_SLEEPING = 2;\n    /** @internal */\n    static ACTIVATIONSTATE_WANTS_DEACTIVATION = 3;\n    /** @internal */\n    static ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4;\n    /** @internal */\n    static ACTIVATIONSTATE_DISABLE_SIMULATION = 5;\n\n    /** @internal */\n    static COLLISIONFLAGS_STATIC_OBJECT = 1;\n    /** @internal */\n    static COLLISIONFLAGS_KINEMATIC_OBJECT = 2;\n    /** @internal */\n    static COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4;\n    /** @internal */\n    static COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8;//this allows per-triangle material (friction/restitution)\n    /** @internal */\n    static COLLISIONFLAGS_CHARACTER_OBJECT = 16;\n    /** @internal */\n    static COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32;//disable debug drawing\n    /** @internal */\n    static COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64;//disable parallel/SPU processing\n\n    /** @internal */\n    protected static _tempVector30: Vector3 = new Vector3();\n    /** @internal */\n    protected static _tempQuaternion0: Quaternion = new Quaternion();\n    /** @internal */\n    protected static _tempQuaternion1: Quaternion = new Quaternion();\n    /** @internal */\n    protected static _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\n    /** @internal */\n    protected static _btVector30: number;\n    /** @internal */\n    protected static _btQuaternion0: number;\n\n    /** @internal */\n    static _physicObjectsMap: any = {};\n    /** @internal */\n    static _addUpdateList: boolean = true;\n\n    /**\n    * @internal\n    */\n    static __init__(): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        PhysicsComponent._btVector30 = bt.btVector3_create(0, 0, 0);\n        PhysicsComponent._btQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\n    }\n\n    /**\n     * @internal\n     */\n    private static _createAffineTransformationArray(tranX: number, tranY: number, tranZ: number, rotX: number, rotY: number, rotZ: number, rotW: number, scale: Float32Array, outE: Float32Array): void {\n\n        var x2 = rotX + rotX, y2 = rotY + rotY, z2 = rotZ + rotZ;\n        var xx = rotX * x2, xy = rotX * y2, xz = rotX * z2, yy = rotY * y2, yz = rotY * z2, zz = rotZ * z2;\n        var wx = rotW * x2, wy = rotW * y2, wz = rotW * z2, sx = scale[0], sy = scale[1], sz = scale[2];\n\n        outE[0] = (1 - (yy + zz)) * sx;\n        outE[1] = (xy + wz) * sx;\n        outE[2] = (xz - wy) * sx;\n        outE[3] = 0;\n        outE[4] = (xy - wz) * sy;\n        outE[5] = (1 - (xx + zz)) * sy;\n        outE[6] = (yz + wx) * sy;\n        outE[7] = 0;\n        outE[8] = (xz + wy) * sz;\n        outE[9] = (yz - wx) * sz;\n        outE[10] = (1 - (xx + yy)) * sz;\n        outE[11] = 0;\n        outE[12] = tranX;\n        outE[13] = tranY;\n        outE[14] = tranZ;\n        outE[15] = 1;\n    }\n\n    /**\n     * @internal\n     */\n    static _creatShape(shapeData: any): ColliderShape {\n        var colliderShape: ColliderShape;\n        switch (shapeData.type) {\n            case \"BoxColliderShape\":\n                var sizeData: any[] = shapeData.size;\n                colliderShape = sizeData ? new BoxColliderShape(sizeData[0], sizeData[1], sizeData[2]) : new BoxColliderShape();\n                break;\n            case \"SphereColliderShape\":\n                colliderShape = new SphereColliderShape(shapeData.radius);\n                break;\n            case \"CapsuleColliderShape\":\n                colliderShape = new CapsuleColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\n                break;\n            case \"MeshColliderShape\":\n                var meshCollider: MeshColliderShape = new MeshColliderShape();\n                shapeData.mesh && (meshCollider.mesh = Loader.getRes(shapeData.mesh));\n                colliderShape = meshCollider;\n                break;\n            case \"ConeColliderShape\":\n                colliderShape = new ConeColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\n                break;\n            case \"CylinderColliderShape\":\n                colliderShape = new CylinderColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\n                break;\n            default:\n                throw \"unknown shape type.\";\n        }\n\n        if (shapeData.center) {\n            var localOffset: Vector3 = colliderShape.localOffset;\n            localOffset.fromArray(shapeData.center);\n            colliderShape.localOffset = localOffset;\n        }\n        return colliderShape;\n    }\n\n    /**\n     * @internal\n     */\n    private static physicVector3TransformQuat(source: Vector3, qx: number, qy: number, qz: number, qw: number, out: Vector3): void {\n        var x = source.x, y = source.y, z = source.z, ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;\n        out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    }\n\n    /**\n     * @internal\n     */\n    private static physicQuaternionMultiply(lx: number, ly: number, lz: number, lw: number, right: Quaternion, out: Quaternion): void {\n        var rx = right.x;\n        var ry = right.y;\n        var rz = right.z;\n        var rw = right.w;\n        var a = (ly * rz - lz * ry);\n        var b = (lz * rx - lx * rz);\n        var c = (lx * ry - ly * rx);\n        var d = (lx * rx + ly * ry + lz * rz);\n        out.x = (lx * rw + rx * lw) + a;\n        out.y = (ly * rw + ry * lw) + b;\n        out.z = (lz * rw + rz * lw) + c;\n        out.w = lw * rw - d;\n    }\n\n    /** @internal */\n    private _restitution = 0.0;\n    /** @internal */\n    private _friction = 0.5;\n    /** @internal */\n    private _rollingFriction = 0.0;\n    /** @internal */\n    private _ccdMotionThreshold = 0.0;\n    /** @internal */\n    private _ccdSweptSphereRadius = 0.0;\n\n    /** @internal */\n    protected _collisionGroup = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER;\n    /** @internal */\n    protected _canCollideWith = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;\n    /** @internal */\n    protected _colliderShape: ColliderShape = null;\n    /** @internal */\n    protected _transformFlag = 2147483647 /*int.MAX_VALUE*/;\n    /** @internal */\n    protected _controlBySimulation: boolean = false;\n\n    /** @internal */\n    _btColliderObject: number;//TODO:不用声明,TODO:删除相关判断\n    /** @internal */\n    _simulation: PhysicsSimulation;\n    /** @internal */\n    _enableProcessCollisions: boolean = true;\n    /** @internal */\n    _inPhysicUpdateListIndex = -1;\n\n    /** 是否可以缩放Shape。 */\n    canScaleShape: boolean = true;\n\n    /**\n     * 弹力。\n     */\n    get restitution(): number {\n        return this._restitution;\n    }\n\n    set restitution(value: number) {\n        this._restitution = value;\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setRestitution(this._btColliderObject, value);\n    }\n\n    /**\n     * 摩擦力。\n     */\n    get friction(): number {\n        return this._friction;\n    }\n\n    set friction(value: number) {\n        this._friction = value;\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setFriction(this._btColliderObject, value);\n    }\n\n    /**\n     * 滚动摩擦力。\n     */\n    get rollingFriction(): number {\n        return this._rollingFriction;\n    }\n\n    set rollingFriction(value: number) {\n        this._rollingFriction = value;\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setRollingFriction(this._btColliderObject, value);\n    }\n\n    /**\n     * 用于连续碰撞检测(CCD)的速度阈值,当物体移动速度小于该值时不进行CCD检测,防止快速移动物体(例如:子弹)错误的穿过其它物体,0表示禁止。\n     */\n    get ccdMotionThreshold(): number {\n        return this._ccdMotionThreshold;\n    }\n\n    set ccdMotionThreshold(value: number) {\n        this._ccdMotionThreshold = value;\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdMotionThreshold(this._btColliderObject, value);\n    }\n\n    /**\n     * 获取用于进入连续碰撞检测(CCD)范围的球半径。\n     */\n    get ccdSweptSphereRadius(): number {\n        return this._ccdSweptSphereRadius;\n    }\n\n    set ccdSweptSphereRadius(value: number) {\n        this._ccdSweptSphereRadius = value;\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdSweptSphereRadius(this._btColliderObject, value);\n    }\n\n    /**\n     * 获取是否激活。\n     */\n    get isActive(): boolean {\n        return this._btColliderObject ? ILaya3D.Physics3D._bullet.btCollisionObject_isActive(this._btColliderObject) : false;\n    }\n\n    /**\n     * 碰撞形状。\n     */\n    get colliderShape(): ColliderShape {\n        return this._colliderShape;\n    }\n\n    set colliderShape(value: ColliderShape) {\n        var lastColliderShape: ColliderShape = this._colliderShape;\n        if (lastColliderShape) {\n            lastColliderShape._attatched = false;\n            lastColliderShape._attatchedCollisionObject = null;\n        }\n\n        this._colliderShape = value;\n        if (value) {\n            if (value._attatched) {\n                throw \"PhysicsComponent: this shape has attatched to other entity.\";\n            } else {\n                value._attatched = true;\n                value._attatchedCollisionObject = this;\n            }\n\n            if (this._btColliderObject) {\n                ILaya3D.Physics3D._bullet.btCollisionObject_setCollisionShape(this._btColliderObject, value._btShape);\n                var canInSimulation: boolean = this._simulation && this._enabled;\n                (canInSimulation && lastColliderShape) && (this._removeFromSimulation());//修改shape必须把Collison从物理世界中移除再重新添加\n                this._onShapeChange(value);//修改shape会计算惯性\n                if (canInSimulation) {\n                    this._derivePhysicsTransformation(true);\n                    this._addToSimulation();\n                }\n            }\n        } else {\n            if (this._simulation && this._enabled)\n                lastColliderShape && this._removeFromSimulation();\n        }\n    }\n\n    /**\n     * 模拟器。\n     */\n    get simulation(): PhysicsSimulation {\n        return this._simulation;\n    }\n\n    /**\n     * 所属碰撞组。\n     */\n    get collisionGroup(): number {\n        return this._collisionGroup;\n    }\n\n    set collisionGroup(value: number) {\n        if (this._collisionGroup !== value) {\n            this._collisionGroup = value;\n            if (this._simulation && this._colliderShape && this._enabled) {\n                this._removeFromSimulation();\n                this._addToSimulation();\n            }\n        }\n    }\n\n    /**\n     * 可碰撞的碰撞组,基于位运算。\n     */\n    get canCollideWith(): number {\n        return this._canCollideWith;\n    }\n\n    set canCollideWith(value: number) {\n        if (this._canCollideWith !== value) {\n            this._canCollideWith = value;\n            if (this._simulation && this._colliderShape && this._enabled) {\n                this._removeFromSimulation();\n                this._addToSimulation();\n            }\n        }\n    }\n\n    /**\n     * 创建一个 <code>PhysicsComponent</code> 实例。\n     * @param collisionGroup 所属碰撞组。\n     * @param canCollideWith 可产生碰撞的碰撞组。\n     */\n    constructor(collisionGroup: number, canCollideWith: number) {\n        super();\n        this._collisionGroup = collisionGroup;\n        this._canCollideWith = canCollideWith;\n        PhysicsComponent._physicObjectsMap[this.id] = this;\n    }\n\n    /**\n     * @internal\n     */\n    protected _parseShape(shapesData: any[]): void {\n        var shapeCount = shapesData.length;\n        if (shapeCount === 1) {\n            var shape: ColliderShape = PhysicsComponent._creatShape(shapesData[0]);\n            this.colliderShape = shape;\n        } else {\n            var compoundShape: CompoundColliderShape = new CompoundColliderShape();\n            for (var i = 0; i < shapeCount; i++) {\n                shape = PhysicsComponent._creatShape(shapesData[i]);\n                compoundShape.addChildShape(shape);\n            }\n            this.colliderShape = compoundShape;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    protected _onScaleChange(scale: Vector3): void {\n        this._colliderShape._setScale(scale);\n    }\n\n    protected _onAdded(): void {\n        this.restitution = this._restitution;\n        this.friction = this._friction;\n        this.rollingFriction = this._rollingFriction;\n        this.ccdMotionThreshold = this._ccdMotionThreshold;\n        this.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\n    }\n\n    protected _onEnable(): void {\n        (<Sprite3D>this.owner).transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\n        this._simulation = ((<Scene3D>this.owner._scene)).physicsSimulation;\n        ILaya3D.Physics3D._bullet.btCollisionObject_setContactProcessingThreshold(this._btColliderObject, 0);\n        if (this._colliderShape) {\n            this._derivePhysicsTransformation(true);\n            this._addToSimulation();\n        }\n    }\n\n    protected _onDisable(): void {\n        (<Sprite3D>this.owner).transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\n        if (this._colliderShape) {\n            this._removeFromSimulation();\n            (this._inPhysicUpdateListIndex !== -1) && (this._simulation._physicsUpdateList.remove(this));//销毁前一定会调用 _onDisable()\n        }\n        this._simulation = null;\n    }\n\n    protected _onDestroy() {\n        delete PhysicsComponent._physicObjectsMap[this.id];\n        ILaya3D.Physics3D._bullet.btCollisionObject_destroy(this._btColliderObject);\n        this._colliderShape && this._colliderShape.destroy();\n        this._btColliderObject = null;\n        this._colliderShape = null;\n        this._simulation = null;\n    }\n\n    /**\n     * 获得物理位置\n     * @returns 返回位置\n     */\n    getPhysicsPosition() {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btColliderObject: number = this._btColliderObject;\n        var btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\n        var btPosition: number = bt.btTransform_getOrigin(btTransform);\n        let x = bt.btVector3_x(btPosition);\n        let y = bt.btVector3_y(btPosition);\n        let z = bt.btVector3_z(btPosition);\n        PhysicsComponent._tempVector30.setValue(x, y, z);\n        return PhysicsComponent._tempVector30;\n    }\n\n    /**\n     * 获得物理四元数\n     * @returns \n     */\n    getPhysicsOrientation() {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btColliderObject: number = this._btColliderObject;\n        var btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\n        var btRotation: number = bt.btTransform_getRotation(btTransform);\n\n        var qx: number = bt.btQuaternion_x(btRotation);\n        var qy: number = bt.btQuaternion_y(btRotation);\n        var qz: number = bt.btQuaternion_z(btRotation);\n        var qw: number = bt.btQuaternion_w(btRotation);\n\n        PhysicsComponent._tempQuaternion0.setValue(qx, qy, qz, qw);\n        return PhysicsComponent._tempQuaternion0;\n    }\n\n    /**\n     * @internal\n     */\n    _isValid(): boolean {\n        return this._simulation && this._colliderShape && this._enabled;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any): void {\n        (data.collisionGroup != null) && (this.collisionGroup = data.collisionGroup);\n        (data.canCollideWith != null) && (this.canCollideWith = data.canCollideWith);\n        (data.ccdMotionThreshold != null) && (this.ccdMotionThreshold = data.ccdMotionThreshold);\n        (data.ccdSweptSphereRadius != null) && (this.ccdSweptSphereRadius = data.ccdSweptSphereRadius);\n    }\n\n    /**\n     * @internal\n     */\n    _setTransformFlag(type: number, value: boolean): void {\n        if (value)\n            this._transformFlag |= type;\n        else\n            this._transformFlag &= ~type;\n    }\n\n    /**\n     * @internal\n     */\n    _getTransformFlag(type: number): boolean {\n        return (this._transformFlag & type) != 0;\n    }\n\n    /**\n     * @internal\n     */\n    _addToSimulation(): void {\n    }\n\n    /**\n     * @internal\n     */\n    _removeFromSimulation(): void {\n\n    }\n\n    /**\n     * \t@internal\n     * 通过渲染矩阵更新物理矩阵。\n     */\n    _derivePhysicsTransformation(force: boolean): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btColliderObject: number = this._btColliderObject;\n        var btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\n        this._innerDerivePhysicsTransformation(btTransform, force);\n        bt.btCollisionObject_setWorldTransform(btColliderObject, btTransform);\n    }\n\n    /**\n     * \t@internal\n     *\t通过渲染矩阵更新物理矩阵。\n     */\n    _innerDerivePhysicsTransformation(physicTransformPtr: number, force: boolean): void {\n        var bt = ILaya3D.Physics3D._bullet;\n        var transform = (<Sprite3D>this.owner)._transform;\n\n        let pxoff = 0;\n        let pyoff = 0;\n        let pzoff = 0;\n\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\n            var shapeOffset = this._colliderShape.localOffset;\n            var position = transform.position;\n            //position.x-=pxoff; position.y-=pyoff; position.z-=pzoff; 这里错了，-=会修改模型位置，\n            var btPosition = PhysicsComponent._btVector30;\n            if (shapeOffset.x !== 0 || shapeOffset.y !== 0 || shapeOffset.z !== 0) {\n                var physicPosition = PhysicsComponent._tempVector30;\n                var worldMat = transform.worldMatrix;\n                Vector3.transformCoordinate(shapeOffset, worldMat, physicPosition);\n                bt.btVector3_setValue(btPosition, physicPosition.x, physicPosition.y, physicPosition.z);\n            } else {\n                bt.btVector3_setValue(btPosition, position.x - pxoff, position.y - pyoff, position.z - pzoff);\n            }\n            bt.btTransform_setOrigin(physicTransformPtr, btPosition);\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\n        }\n\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\n            var shapeRotation = this._colliderShape.localRotation;\n            var btRotation = PhysicsComponent._btQuaternion0;\n            var rotation = transform.rotation;\n            if (shapeRotation.x !== 0 || shapeRotation.y !== 0 || shapeRotation.z !== 0 || shapeRotation.w !== 1) {\n                var physicRotation = PhysicsComponent._tempQuaternion0;\n                PhysicsComponent.physicQuaternionMultiply(rotation.x, rotation.y, rotation.z, rotation.w, shapeRotation, physicRotation);\n                bt.btQuaternion_setValue(btRotation, physicRotation.x, physicRotation.y, physicRotation.z, physicRotation.w);\n            } else {\n                bt.btQuaternion_setValue(btRotation, rotation.x, rotation.y, rotation.z, rotation.w);\n            }\n            bt.btTransform_setRotation(physicTransformPtr, btRotation);\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\n        }\n\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\n            this._onScaleChange(transform.getWorldLossyScale());\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\n        }\n    }\n\n    /**\n     * @internal\n     * 通过物理矩阵更新渲染矩阵。\n     */\n    _updateTransformComponent(physicsTransform: number, syncRot = true, addmargin = 0): void {\n        //TODO:Need Test!!! because _innerDerivePhysicsTransformation update position use worldMatrix,not(position rotation WorldLossyScale),maybe the center is no different.\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var colliderShape = this._colliderShape;\n        var localOffset = colliderShape.localOffset;\n        var localRotation = colliderShape.localRotation;\n\n        var transform = (<Sprite3D>this.owner)._transform;\n        if (!transform) return;\n        var position = transform.position;\n        var rotation = transform.rotation;\n\n        var btPosition: number = bt.btTransform_getOrigin(physicsTransform);\n\n        if (syncRot) {\n            var btRotation: number = bt.btTransform_getRotation(physicsTransform);\n\n            var btRotX: number = bt.btQuaternion_x(btRotation);\n            var btRotY: number = bt.btQuaternion_y(btRotation);\n            var btRotZ: number = bt.btQuaternion_z(btRotation);\n            var btRotW: number = bt.btQuaternion_w(btRotation);\n\n            if (localRotation.x !== 0 || localRotation.y !== 0 || localRotation.z !== 0 || localRotation.w !== 1) {\n                var invertShapeRotaion = PhysicsComponent._tempQuaternion0;\n                localRotation.invert(invertShapeRotaion);\n                PhysicsComponent.physicQuaternionMultiply(btRotX, btRotY, btRotZ, btRotW, invertShapeRotaion, rotation);\n            } else {\n                rotation.x = btRotX;\n                rotation.y = btRotY;\n                rotation.z = btRotZ;\n                rotation.w = btRotW;\n            }\n            transform.rotation = rotation;\n        }\n\n        if (localOffset.x !== 0 || localOffset.y !== 0 || localOffset.z !== 0) {\n            var btScale: number = bt.btCollisionShape_getLocalScaling(colliderShape._btShape);\n            var rotShapePosition = PhysicsComponent._tempVector30;\n            rotShapePosition.x = localOffset.x * bt.btVector3_x(btScale);\n            rotShapePosition.y = localOffset.y * bt.btVector3_y(btScale);\n            rotShapePosition.z = localOffset.z * bt.btVector3_z(btScale);\n            Vector3.transformQuat(rotShapePosition, rotation, rotShapePosition);\n            position.x = bt.btVector3_x(btPosition) - rotShapePosition.x;\n            //TODO 临时加一个0.04，对一个人来说0.04的margin太大了，足以把脚陷入地下，所以先加回来\n            position.y = bt.btVector3_y(btPosition) - rotShapePosition.y + addmargin;\n            position.z = bt.btVector3_z(btPosition) - rotShapePosition.z;\n        } else {\n            position.x = bt.btVector3_x(btPosition);\n            position.y = bt.btVector3_y(btPosition);\n            position.z = bt.btVector3_z(btPosition);\n        }\n\n        transform.position = position;\n        //transform.worldMatrix;  TODO\n        //this.owner.callaterChange && this.owner.callaterChange();\n    }\n\n\n\n    /**\n     * @internal\n     */\n    _onShapeChange(colShape: ColliderShape): void {\n        var btColObj: any = this._btColliderObject;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\n        if (colShape.needsCustomCollisionCallback) {\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) === 0)\n                bt.btCollisionObject_setCollisionFlags(btColObj, flags | PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);\n        } else {\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) > 0)\n                bt.btCollisionObject_setCollisionFlags(btColObj, flags ^ PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _onTransformChanged(flag: number): void {\n        if (PhysicsComponent._addUpdateList || !this._controlBySimulation) {//PhysicsComponent._addUpdateList = false is the stage of physic simulation.\n            flag &= Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE;//过滤有用TRANSFORM标记\n            if (flag) {\n                this._transformFlag |= flag;\n                if (this._isValid() && this._inPhysicUpdateListIndex === -1)//_isValid()表示可使用\n                    this._simulation._physicsUpdateList.add(this);\n            }\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: Component): void {\n        var destPhysicsComponent: PhysicsComponent = <PhysicsComponent>dest;\n        destPhysicsComponent.restitution = this._restitution;\n        destPhysicsComponent.friction = this._friction;\n        destPhysicsComponent.rollingFriction = this._rollingFriction;\n        destPhysicsComponent.ccdMotionThreshold = this._ccdMotionThreshold;\n        destPhysicsComponent.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\n        destPhysicsComponent.collisionGroup = this._collisionGroup;\n        destPhysicsComponent.canCollideWith = this._canCollideWith;\n        destPhysicsComponent.canScaleShape = this.canScaleShape;\n        (this._colliderShape) && (destPhysicsComponent.colliderShape = this._colliderShape.clone());\n    }\n}\n\n","import { Physics3DUtils } from \"../utils/Physics3DUtils\";\nimport { Utils3D } from \"../utils/Utils3D\";\nimport { PhysicsComponent } from \"./PhysicsComponent\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\nimport { Component } from \"../../components/Component\";\nimport { ILaya3D } from \"../../../ILaya3D\";\nimport { Rigidbody3D } from \"./Rigidbody3D\";\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * <code>CharacterController</code> 类用于创建角色控制器。\n */\nexport class CharacterController extends PhysicsComponent {\n    /** @internal */\n    private static _btTempVector30: number;\n    /** @internal */\n    private static tmpPosition = new Vector3();\n    /** @internal */\n    private static tmpOrientation = new Quaternion();\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        CharacterController._btTempVector30 = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\n    }\n\n    /* UP轴_X轴。*/\n    static UPAXIS_X = 0;\n    /* UP轴_Y轴。*/\n    static UPAXIS_Y = 1;\n    /* UP轴_Z轴。*/\n    static UPAXIS_Z = 2;\n\n\n\n    /** @internal */\n    private _stepHeight: number;\n    /** @internal */\n    private _upAxis = new Vector3(0, 1, 0);\n    /**@internal */\n    private _maxSlope = 90.0;\t// 45度容易在地形上卡住\n    /**@internal */\n    private _jumpSpeed = 10.0;\n    /**@internal */\n    private _fallSpeed = 55.0;\n    /** @internal */\n    private _gravity = new Vector3(0, -9.8 * 3, 0);\n\n    /**@internal */\n    _btKinematicCharacter: number = null;\n\n    userData: any;\n\n    /**@internal */\n    protected _pushForce = 1;\n\n\n    set colliderShape(value: ColliderShape) {\n        if (value instanceof MeshColliderShape) {\n            value = null;\n            console.error(\"CharacterController is not support MeshColliderShape\");\n        }\n        super.colliderShape = value;\n    }\n\n    /**\n    * 碰撞形状。\n    */\n    get colliderShape(): ColliderShape {\n        return this._colliderShape;\n    }\n\n    /**\n     * 角色降落速度。\n     */\n    get fallSpeed(): number {\n        return this._fallSpeed;\n    }\n\n    set fallSpeed(value: number) {\n        this._fallSpeed = value;\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setFallSpeed(this._btKinematicCharacter, value);\n    }\n\n    /**\n     * 角色与其他物体碰撞的时候，产生的推力的大小\n     */\n    set pushForce(v: number) {\n        this._pushForce = v;\n        if (this._btKinematicCharacter) {\n            var bt: any = ILaya3D.Physics3D._bullet;\n            bt.btKinematicCharacterController_setPushForce(this._btKinematicCharacter, v);\n        }\n    }\n\n    get pushForce() {\n        return this._pushForce;\n        //var bt: any = ILaya3D.Physics3D._bullet;\n        //return bt.btKinematicCharacterController_getPushForce(this._btKinematicCharacter);\n    }\n\n    /**\n     * 角色跳跃速度。\n     */\n    get jumpSpeed(): number {\n        return this._jumpSpeed;\n    }\n\n    set jumpSpeed(value: number) {\n        this._jumpSpeed = value;\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setJumpSpeed(this._btKinematicCharacter, value);\n    }\n\n    /**\n     * 重力。\n     */\n    get gravity(): Vector3 {\n        return this._gravity;\n    }\n\n    set gravity(value: Vector3) {\n        this._gravity = value;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btGravity: number = CharacterController._btTempVector30;\n        bt.btVector3_setValue(btGravity, value.x, value.y, value.z);\n        bt.btKinematicCharacterController_setGravity(this._btKinematicCharacter, btGravity);\n    }\n\n    /**\n     * 最大坡度。\n     */\n    get maxSlope(): number {\n        return this._maxSlope;\n    }\n\n    set maxSlope(value: number) {\n        this._maxSlope = value;\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setMaxSlope(this._btKinematicCharacter, (value / 180) * Math.PI);\n    }\n\n    /**\n     * 角色是否在地表。\n     */\n    get isGrounded(): boolean {\n        return ILaya3D.Physics3D._bullet.btKinematicCharacterController_onGround(this._btKinematicCharacter);\n    }\n\n    /**\n     * 角色行走的脚步高度，表示可跨越的最大高度。\n     */\n    get stepHeight(): number {\n        return this._stepHeight;\n    }\n\n    set stepHeight(value: number) {\n        this._stepHeight = value;\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setStepHeight(this._btKinematicCharacter, value);\n    }\n\n    /**\n     * 角色的Up轴。\n     */\n    get upAxis(): Vector3 {\n        return this._upAxis;\n    }\n\n    set upAxis(value: Vector3) {\n        this._upAxis = value;\n        var btUpAxis: number = CharacterController._btTempVector30;\n        Utils3D._convertToBulletVec3(value, btUpAxis);\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setUp(this._btKinematicCharacter, btUpAxis);\n    }\n\n    /**\n     * 角色位置\n     */\n    get position() {\n        let bt = ILaya3D.Physics3D._bullet;\n        let pPos = bt.btKinematicCharacterController_getCurrentPosition(this._btKinematicCharacter);\n        CharacterController.tmpPosition.setValue(\n            bt.btVector3_x(pPos),\n            bt.btVector3_y(pPos),\n            bt.btVector3_z(pPos));\n        return CharacterController.tmpPosition;\n    }\n\n    set position(v: Vector3) {\n        var bt = ILaya3D.Physics3D._bullet;\n        bt.btKinematicCharacterController_setCurrentPosition(this._btKinematicCharacter, v.x, v.y, v.z);\n        //var btColliderObject = this._btColliderObject;\n        //bt.btCollisionObject_setWorldTransformPos(btColliderObject, v.x, v.y, v.z);\t\t\n    }\n\n    /**\n     * 获得角色四元数\n     */\n    get orientation() {\n        let bt = ILaya3D.Physics3D._bullet;\n        let pQuat = bt.btKinematicCharacterController_getCurrentOrientation(this._btKinematicCharacter);\n        CharacterController.tmpOrientation.setValue(\n            bt.btQuaternion_x(pQuat),\n            bt.btQuaternion_y(pQuat),\n            bt.btQuaternion_z(pQuat),\n            bt.btQuaternion_w(pQuat));\n        return CharacterController.tmpOrientation;\n    }\n\n    set orientation(v: Quaternion) {\n        var bt = ILaya3D.Physics3D._bullet;\n        var btColliderObject = this._btColliderObject;\n        // 不能按照rigidbody算，会破坏内存\n        //bt.btRigidBody_setCenterOfMassOrientation(btColliderObject, v.x, v.y, v.z, v.w);\n    }\n\n\n    /**\n     * 创建一个 <code>CharacterController</code> 实例。\n     * @param stepheight 角色脚步高度。\n     * @param upAxis 角色Up轴\n     * @param collisionGroup 所属碰撞组。\n     * @param canCollideWith 可产生碰撞的碰撞组。\n     */\n    constructor(stepheight: number = 0.1, upAxis: Vector3 = null, collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\n        super(collisionGroup, canCollideWith);\n        this._stepHeight = stepheight;\n        (upAxis) && (this._upAxis = upAxis);\n        this._controlBySimulation = true;\n    }\n\n    private setJumpAxis(x: number, y: number, z: number) {\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setJumpAxis(this._btKinematicCharacter, x, y, z);\n    }\n\n    protected _onAdded(): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var ghostObject: number = bt.btPairCachingGhostObject_create();\n        bt.btCollisionObject_setUserIndex(ghostObject, this.id);\n        bt.btCollisionObject_setCollisionFlags(ghostObject, PhysicsComponent.COLLISIONFLAGS_CHARACTER_OBJECT);\n        this._btColliderObject = ghostObject;\n        (this._colliderShape) && (this._constructCharacter());\n        super._onAdded();\n    }\n\n    protected _onDestroy() {\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_destroy(this._btKinematicCharacter);\n        super._onDestroy();\n        this._btKinematicCharacter = null;\n    }\n\n    /**\n     * @internal\n     */\n    private _constructCharacter(): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        if (this._btKinematicCharacter)\n            bt.btKinematicCharacterController_destroy(this._btKinematicCharacter);\n\n        var btUpAxis: number = CharacterController._btTempVector30;\n        bt.btVector3_setValue(btUpAxis, this._upAxis.x, this._upAxis.y, this._upAxis.z);\n        this._btKinematicCharacter = bt.btKinematicCharacterController_create(this._btColliderObject, this._colliderShape._btShape, this._stepHeight, btUpAxis);\n        //bt.btKinematicCharacterController_setUseGhostSweepTest(this._btKinematicCharacter, false);\n        this.fallSpeed = this._fallSpeed;\n        this.maxSlope = this._maxSlope;\n        this.jumpSpeed = this._jumpSpeed;\n        this.gravity = this._gravity;\n        this.setJumpAxis(0, 1, 0);\n        this.pushForce = this._pushForce;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _onShapeChange(colShape: ColliderShape): void {\n        super._onShapeChange(colShape);\n        this._constructCharacter();\n    }\n\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _addToSimulation(): void {\n        this._simulation._characters.push(this);\n        this._simulation._addCharacter(this, this._collisionGroup, this._canCollideWith);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _removeFromSimulation(): void {\n        this._simulation._removeCharacter(this);\n        var characters: CharacterController[] = this._simulation._characters;\n        characters.splice(characters.indexOf(this), 1);\n    }\n\n    /**\n     * 获得碰撞标签\n     * @returns \n     */\n    getHitFlag() {\n        return ILaya3D.Physics3D._bullet.btKinematicCharacterController_getHitFlag(this._btKinematicCharacter);\n    }\n\n    /**\n     * 获得速度\n     * @returns \n     */\n    getVerticalVel() {\n        return ILaya3D.Physics3D._bullet.btKinematicCharacterController_getVerticalVelocity(this._btKinematicCharacter);\n    }\n\n    /**\n     * 获得角色碰撞的对象\n     * @param cb \n     */\n    getOverlappingObj(cb: (body: Rigidbody3D) => void) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        let ghost = this._btColliderObject;\n        let num = bt.btCollisionObject_getNumOverlappingObjects(ghost);\n        for (let i = 0; i < num; i++) {\n            let obj = bt.btCollisionObject_getOverlappingObject(ghost, i);\n            let comp = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(obj)] as Rigidbody3D;\n            if (comp) {\n                cb(comp);\n            }\n        }\n    }\n\n    /**\n     * 通过指定移动向量移动角色。\n     * @param\tmovement 移动向量。\n     */\n    move(movement: Vector3): void {\n        var btMovement: number = CharacterController._btVector30;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btVector3_setValue(btMovement, movement.x, movement.y, movement.z);\n        bt.btKinematicCharacterController_setWalkDirection(this._btKinematicCharacter, btMovement);\n    }\n\n    /**\n     * 跳跃。\n     * @param velocity 跳跃速度。\n     */\n    jump(velocity: Vector3 = null): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btVelocity: number = CharacterController._btVector30;\n        if (velocity) {\n            Utils3D._convertToBulletVec3(velocity, btVelocity);\n            bt.btKinematicCharacterController_jump(this._btKinematicCharacter, btVelocity);\n        } else {\n            bt.btVector3_setValue(btVelocity, 0, this._jumpSpeed, 0);\n            bt.btKinematicCharacterController_jump(this._btKinematicCharacter, btVelocity);\n        }\n    }\n\n    get btColliderObject(): number {\n        return this._btColliderObject;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: Component): void {\n        super._cloneTo(dest);\n        var destCharacterController: CharacterController = <CharacterController>dest;\n        destCharacterController.stepHeight = this._stepHeight;\n        destCharacterController.upAxis = this._upAxis;\n        destCharacterController.maxSlope = this._maxSlope;\n        destCharacterController.jumpSpeed = this._jumpSpeed;\n        destCharacterController.fallSpeed = this._fallSpeed;\n        destCharacterController.gravity = this._gravity;\n    }\n}\n\n","import { PhysicsComponent } from \"./PhysicsComponent\";\nimport { SingletonList } from \"../../utils/SingletonList\"\n\n/**\n * <code>PhysicsUpdateList</code> 类用于实现物理更新队列。\n */\nexport class PhysicsUpdateList extends SingletonList<PhysicsComponent> {\n\n    /**\n     * 创建一个新的 <code>PhysicsUpdateList</code> 实例。\n     */\n    constructor() {\n        super();\n\n    }\n\n    /**\n     * @internal\n     */\n    add(element: PhysicsComponent): void {\n        var index: number = element._inPhysicUpdateListIndex;\n        if (index !== -1)\n            throw \"PhysicsUpdateList:element has  in  PhysicsUpdateList.\";\n        this._add(element);\n        element._inPhysicUpdateListIndex = this.length++;\n    }\n\n    /**\n     * @internal\n     */\n    remove(element: PhysicsComponent): void {\n        var index: number = element._inPhysicUpdateListIndex;\n        this.length--;\n        if (index !== this.length) {\n            var end: any = this.elements[this.length];\n            this.elements[index] = end;\n            end._inPhysicUpdateListIndex = index;\n        }\n        element._inPhysicUpdateListIndex = -1;\n    }\n\n}\n\n\n","import { Vector3 } from \"../../maths/Vector3\";\nimport { PhysicsComponent } from \"./PhysicsComponent\"\n\n/**\n * <code>ContactPoint</code> 类用于创建物理碰撞信息。\n */\nexport class ContactPoint {\n\t/**@internal */\n\t_idCounter: number = 0;\n\n\t/**@internal */\n\t_id: number;\n\n\t/**碰撞器A。*/\n\tcolliderA: PhysicsComponent = null;\n\t/**碰撞器B。*/\n\tcolliderB: PhysicsComponent = null;\n\t/**距离。*/\n\tdistance: number = 0;\n\t/**法线。*/\n\tnormal: Vector3 = new Vector3();\n\t/**碰撞器A的碰撞点。*/\n\tpositionOnA: Vector3 = new Vector3();\n\t/**碰撞器B的碰撞点。*/\n\tpositionOnB: Vector3 = new Vector3();\n\n\t/**\n\t * 创建一个 <code>ContactPoint</code> 实例。\n\t */\n\tconstructor() {\n\t\tthis._id = ++this._idCounter;\n\t}\n\n}\n\n\n","import { Vector3 } from \"../../maths/Vector3\";\nimport { PhysicsComponent } from \"./PhysicsComponent\"\n\n/**\n * <code>HitResult</code> 类用于实现射线检测或形状扫描的结果。\n */\nexport class HitResult {\n    /** 是否成功。 */\n    succeeded: boolean = false;\n    /** 发生碰撞的碰撞组件。*/\n    collider: PhysicsComponent = null;\n    /** 碰撞点。*/\n    point: Vector3 = new Vector3();\n    /** 碰撞法线。*/\n    normal: Vector3 = new Vector3();\n    /** 碰撞分数。 */\n    hitFraction: number = 0;\n\n    /**\n     * 创建一个 <code>HitResult</code> 实例。\n     */\n    constructor() {\n\n    }\n}\n\n\n","import { ContactPoint } from \"./ContactPoint\";\nimport { PhysicsComponent } from \"./PhysicsComponent\"\n\n/**\n * <code>Collision</code> 类用于创建物理碰撞信息。\n */\nexport class Collision {\n    /**@internal */\n    _lastUpdateFrame = -2147483648/*int.MIN_VALUE*/;\n    /**@internal */\n    _updateFrame = -2147483648/*int.MIN_VALUE*/;\n    /**@internal */\n    _isTrigger = false;\n\n    /**@internal */\n    _colliderA: PhysicsComponent;\n    /**@internal */\n    _colliderB: PhysicsComponent;\n\n    /**@readonly*/\n    contacts: ContactPoint[] = [];\n    /**@readonly*/\n    other: PhysicsComponent;\n\n    /**\n     * 创建一个 <code>Collision</code> 实例。\n     */\n    constructor() {\n\n    }\n\n    /**\n     * @internal\n     */\n    _setUpdateFrame(farme: number): void {\n        this._lastUpdateFrame = this._updateFrame;//TODO:为啥整两个\n        this._updateFrame = farme;\n    }\n\n}\n\n\n","import { ContactPoint } from \"./ContactPoint\";\nimport { HitResult } from \"./HitResult\";\nimport { Collision } from \"./Collision\";\nimport { PhysicsComponent } from \"./PhysicsComponent\";\n\n/**\n * <code>CollisionMap</code> 类用于实现碰撞组合实例图。\n */\nexport class CollisionTool {\n\t/**@internal\t*/\n\tprivate _hitResultsPoolIndex: number = 0;\n\t/**@internal\t*/\n\tprivate _hitResultsPool: HitResult[] = [];\n\t/**@internal\t*/\n\tprivate _contactPonintsPoolIndex: number = 0;\n\t/**@internal\t*/\n\tprivate _contactPointsPool: ContactPoint[] = [];\n\t/**@internal */\n\tprivate _collisionsPool: Collision[] = [];\n\n\t/**@internal */\n\tprivate _collisions: any = {};\n\n\t/**\n\t * 创建一个 <code>CollisionMap</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tgetHitResult(): HitResult {\n\t\tvar hitResult: HitResult = this._hitResultsPool[this._hitResultsPoolIndex++];\n\t\tif (!hitResult) {\n\t\t\thitResult = new HitResult();\n\t\t\tthis._hitResultsPool.push(hitResult);\n\t\t}\n\t\treturn hitResult;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\trecoverAllHitResultsPool(): void {\n\t\tthis._hitResultsPoolIndex = 0;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tgetContactPoints(): ContactPoint {\n\t\tvar contactPoint: ContactPoint = this._contactPointsPool[this._contactPonintsPoolIndex++];\n\t\tif (!contactPoint) {\n\t\t\tcontactPoint = new ContactPoint();\n\t\t\tthis._contactPointsPool.push(contactPoint);\n\t\t}\n\t\treturn contactPoint;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\trecoverAllContactPointsPool(): void {\n\t\tthis._contactPonintsPoolIndex = 0;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tgetCollision(physicComponentA: PhysicsComponent, physicComponentB: PhysicsComponent): Collision {\n\t\tvar collision: Collision;\n\t\tvar idA = physicComponentA.id;\n\t\tvar idB = physicComponentB.id;\n\t\tvar subCollisionFirst: any = this._collisions[idA];\n\t\tif (subCollisionFirst)\n\t\t\tcollision = subCollisionFirst[idB];\n\t\tif (!collision) {\n\t\t\tif (!subCollisionFirst) {\n\t\t\t\tsubCollisionFirst = {};\n\t\t\t\tthis._collisions[idA] = subCollisionFirst;\n\t\t\t}\n\t\t\tcollision = this._collisionsPool.length === 0 ? new Collision() : this._collisionsPool.pop();\n\t\t\tcollision._colliderA = physicComponentA;\n\t\t\tcollision._colliderB = physicComponentB;\n\t\t\tsubCollisionFirst[idB] = collision;\n\t\t}\n\t\treturn collision;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\trecoverCollision(collision: Collision): void {\n\t\tvar idA = collision._colliderA.id;\n\t\tvar idB = collision._colliderB.id;\n\t\tthis._collisions[idA][idB] = null;\n\t\tthis._collisionsPool.push(collision);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tgarbageCollection(): void {//TODO:哪里调用\n\t\tthis._hitResultsPoolIndex = 0;\n\t\tthis._hitResultsPool.length = 0;\n\n\t\tthis._contactPonintsPoolIndex = 0;\n\t\tthis._contactPointsPool.length = 0;\n\n\t\tthis._collisionsPool.length = 0;\n\t\tfor (var subCollisionsKey in this._collisionsPool) {\n\t\t\tvar subCollisions: any = this._collisionsPool[subCollisionsKey];\n\t\t\tvar wholeDelete: boolean = true;\n\t\t\tfor (var collisionKey in subCollisions) {\n\t\t\t\tif (subCollisions[collisionKey])\n\t\t\t\t\twholeDelete = false;\n\t\t\t\telse\n\t\t\t\t\tdelete subCollisions[collisionKey];\n\t\t\t}\n\t\t\tif (wholeDelete)\n\t\t\t\tdelete this._collisionsPool[subCollisionsKey];\n\t\t}\n\t}\n}\n\n\n","import { ILaya } from \"../../../ILaya\";\nimport { ILaya3D } from \"../../../ILaya3D\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\nexport class RaycastWheel {\n    btWheelPtr: number;\n    worldPos = new Vector3();\n    worldQuat = new Quaternion();\n    bt: any;\n    private btMemory: WebAssembly.Memory;\n    worldMat = new Matrix4x4();\n\n\n    constructor(ptr: number) {\n        this.btWheelPtr = ptr;\n        this.bt = ILaya3D.Physics3D._bullet;\n        this.btMemory = ILaya.Laya.WasmModules['bullet']?.memory;\n    }\n\n    set engineForce(force: number) {\n        this.bt.btWheelInfo_setEengineForce(this.btWheelPtr, force);\n    }\n\n    get engineForce() {\n        return this.bt.btWheelInfo_getEengineForce(this.btWheelPtr);\n    }\n\n    set steeringValue(v: number) {\n        this.bt.btWheelInfo_setSteeringValue(this.btWheelPtr, v);\n    }\n\n    get steeringValue() {\n        return this.bt.btWheelInfo_getSteeringValue(this.btWheelPtr);\n    }\n\n    set brake(v: number) {\n        this.bt.btWheelInfo_setBrake(this.btWheelPtr, v);\n    }\n\n    get brake() {\n        return this.bt.btWheelInfo_getBrake(this.btWheelPtr);\n    }\n\n    get rotation() {\n        let bt = this.bt;\n        return bt.btWheelInfo_getRrotation(this.btWheelPtr);\n    }\n\n    get deltaRotation() {\n        let bt = this.bt;\n        return bt.btWheelInfo_getDeltaRotation(this.btWheelPtr);\n    }\n\n    get transform() {\n        let bt = this.bt;\n        let btrans = bt.btWheelInfo_getWorldTransform(this.btWheelPtr);\n        let ret = this.worldMat;\n        let retarr = ret.elements;\n        if ((window as any).conch) {\n            // runtime没有wasm的memory\n            let o = bt.btTransform_getOrigin(btrans);\n            let basisptr = bt.btTransform_getBasis(btrans);\n            let r0 = bt.btMatrix3x3_getRow(basisptr, 0);\n            let r1 = bt.btMatrix3x3_getRow(basisptr, 1);\n            let r2 = bt.btMatrix3x3_getRow(basisptr, 2);\n            // 重新排列一下，使符合laya matrix44排列\n            retarr[0] = bt.btVector3_x(r0); retarr[1] = bt.btVector3_x(r1); retarr[2] = bt.btVector3_x(r2); retarr[3] = 0;\n            retarr[4] = bt.btVector3_y(r0); retarr[5] = bt.btVector3_y(r1); retarr[6] = bt.btVector3_y(r2); retarr[7] = 0;\n            retarr[8] = bt.btVector3_z(r0); retarr[9] = bt.btVector3_z(r1); retarr[10] = bt.btVector3_z(r2); retarr[11] = 0;\n            retarr[12] = bt.btVector3_x(o); retarr[13] = bt.btVector3_y(o); retarr[14] = bt.btVector3_z(o); retarr[15] = 1;\n        } else {\n            let mem = this.btMemory;\n            let fbuff = new Float64Array(mem.buffer, btrans, 16);\n            // 重新排列一下，使符合laya matrix44排列\n            retarr[0] = fbuff[0]; retarr[1] = fbuff[4]; retarr[2] = fbuff[8]; retarr[3] = 0;\n            retarr[4] = fbuff[1]; retarr[5] = fbuff[5]; retarr[6] = fbuff[9]; retarr[7] = 0;\n            retarr[8] = fbuff[2]; retarr[9] = fbuff[6]; retarr[10] = fbuff[10]; retarr[11] = 0;\n            retarr[12] = fbuff[12]; retarr[13] = fbuff[13]; retarr[14] = fbuff[14]; retarr[15] = 1;\n        }\n        return ret;\n    }\n\n    getWorldTransform() {\n        let bt = this.bt;\n        let btrans = bt.btWheelInfo_getWorldTransform(this.btWheelPtr);\n        let btOri = bt.btTransform_getOrigin(btrans);\n        let btRot = bt.btTransform_getRotation(btrans); // transform 转成的rotation\n        this.worldPos.set(bt.btVector3_x(btOri), bt.btVector3_y(btOri), bt.btVector3_z(btOri));\n        this.worldQuat.set(bt.btQuaternion_x(btRot), bt.btQuaternion_y(btRot), bt.btQuaternion_z(btRot), bt.btQuaternion_w(btRot));\n    }\n}","import { ILaya3D } from \"../../../ILaya3D\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { RaycastWheel } from \"./RaycastWheel\";\n/**\n * @internal\n */\nexport class btVehicleTuning {\n    suspensionStiffness = 15.88;\n    suspensionCompression = 0.83;\n    suspensionDamping = 0.88;\n    maxSuspensionTravelCm = 500;\n    frictionSlip = 10.5;\n    maxSuspensionForce = 6000;\n}\n\n/**\n * @internal\n */\nexport class btWheelInfo {\n    btPointer: number;\n}\n\n/**\n * @internal\n */\nexport class RaycastVehicle {\n    userdata: any;\n    btVehiclePtr: number;\n    //tuning\n    tuing = new btVehicleTuning();\n    private wheels:RaycastWheel[]=[];\n\n    constructor(btObj: number) {\n        this.btVehiclePtr = btObj;\n    }\n\n    addWheel(connectionPointCS0: Vector3, wheelDirectionCS0: Vector3, wheelAxleCS: Vector3, wheelRadius: number,\n        suspensionRestLength: number,\n        suspensionMaxTravel:number,\n        suspensionStiffness:number,\n        suspensionDamping:number,\n        frictionSlip:number,\n        isFrontWheel: boolean) {\n            \n        let bt: any = ILaya3D.Physics3D._bullet;\n        let tuing = this.tuing;\n\n        let id = this.getNumWheels();\n        let wheelinfo = bt.btRaycastVehicle_addWheel(this.btVehiclePtr, connectionPointCS0.x, connectionPointCS0.y, connectionPointCS0.z,\n            wheelDirectionCS0.x, wheelDirectionCS0.y, wheelDirectionCS0.z,\n            wheelAxleCS.x, wheelAxleCS.y, wheelAxleCS.z,\n            suspensionRestLength,\n            wheelRadius,\n            suspensionStiffness || tuing.suspensionStiffness,\n            tuing.suspensionCompression,\n            suspensionDamping   || tuing.suspensionDamping,\n            frictionSlip        || tuing.frictionSlip,\n            (suspensionMaxTravel?suspensionMaxTravel*100:tuing.maxSuspensionTravelCm),\n            tuing.maxSuspensionForce,\n            isFrontWheel\n        )\n\n        let wheel =  new RaycastWheel(wheelinfo);\n        this.wheels.push(wheel);\n        // 更新每个wheel的指针。 因为前面返回的指针在这次push之后会失效\n        for(let i=0,n=this.wheels.length; i<n; i++){\n            let cwheel = this.wheels[i];\n            cwheel.btWheelPtr = this.getWheelInfo(i);\n        }\n        return wheel;\n    }\n\n    getNumWheels() {\n        let bt: any = ILaya3D.Physics3D._bullet;\n        return bt.btRaycastVehicle_getNumWheels(this.btVehiclePtr);\n    }\n\n    getWheelInfo(i: number) {\n        let bt: any = ILaya3D.Physics3D._bullet;\n        return bt.btRaycastVehicle_getWheelInfo(this.btVehiclePtr, i);\n    }\n}","import { Ray } from \"../math/Ray\";\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\nimport { CharacterController } from \"./CharacterController\";\nimport { PhysicsUpdateList } from \"./PhysicsUpdateList\";\nimport { Collision } from \"./Collision\";\nimport { CollisionTool } from \"./CollisionTool\";\nimport { ContactPoint } from \"./ContactPoint\";\nimport { HitResult } from \"./HitResult\";\nimport { PhysicsCollider } from \"./PhysicsCollider\";\nimport { PhysicsComponent } from \"./PhysicsComponent\";\nimport { PhysicsSettings } from \"./PhysicsSettings\";\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\nimport { Rigidbody3D } from \"./Rigidbody3D\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\nimport { ConstraintComponent } from \"./constraints/ConstraintComponent\";\nimport { ILaya3D } from \"../../../ILaya3D\";\nimport { RaycastVehicle } from \"./RaycastVehicle\";\nimport { NodeFlags } from \"../../Const\";\nimport { Event } from \"../../events/Event\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * <code>Simulation</code> 类用于创建物理模拟器。\n */\nexport class PhysicsSimulation {\n    /** @internal */\n    static PHYSICSENGINEFLAGS_NONE = 0x0;\n    /** @internal */\n    static PHYSICSENGINEFLAGS_COLLISIONSONLY = 0x1;\n    /** @internal */\n    static PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 0x2;\n    /** @internal */\n    static PHYSICSENGINEFLAGS_MULTITHREADED = 0x4;\n    /** @internal */\n    static PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 0x8;\n\n    /** @internal */\n    static SOLVERMODE_RANDMIZE_ORDER = 1;\n    /** @internal */\n    static SOLVERMODE_FRICTION_SEPARATE = 2;\n    /** @internal */\n    static SOLVERMODE_USE_WARMSTARTING = 4;\n    /** @internal */\n    static SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16;\n    /** @internal */\n    static SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32;\n    /** @internal */\n    static SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64;\n    /** @internal */\n    static SOLVERMODE_CACHE_FRIENDLY = 128;\n    /** @internal */\n    static SOLVERMODE_SIMD = 256;\n    /** @internal */\n    static SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512;\n    /** @internal */\n    static SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024;\n    /** @internal 射线回调模式*/\n    static HITSRAYRESULTCALLBACK_FLAG_NONE = 0;\n    /** @internal 射线回调模式 忽略反面,射线检测时，会忽略掉反面的三角形*/\n    static HITSRAYRESULTCALLBACK_FLAG_FILTERBACKFACESS = 1;\n    /** @internal 射线回调模式*/\n    static HITSRAYRESULTCALLBACK_FLAG_KEEPUNFILIPPEDNORMAL = 2;\n    /** @internal 射线回调模式*/\n    static HITSRAYRESULTCALLBACK_FLAG_USESUBSIMPLEXCONVEXCASTRAYTEST = 4;\n    /** @internal 射线回调模式*/\n    static HITSRAYRESULTCALLBACK_FLAG_USEGJKCONVEXCASTRAYTEST = 8;\n    /** @internal 射线回调模式*/\n    static HITSRAYRESULTCALLBACK_FLAG_TERMINATOR = 0xffffffff;\n    /** @internal */\n    private static _btTempVector30: number;\n    /** @internal */\n    private static _btTempVector31: number;\n    /** @internal */\n    private static _btTempQuaternion0: number;\n    /** @internal */\n    private static _btTempQuaternion1: number;\n    /** @internal */\n    private static _btTempTransform0: number;\n    /** @internal */\n    private static _btTempTransform1: number;\n    /** @internal */\n    private static _tempVector30 = new Vector3();\n\n    /*是否禁用所有模拟器。*/\n    static disableSimulation = false;\n\n    protected _updateCount = 0;\n\n    /**\n    * @internal\n    */\n    static __init__(): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        PhysicsSimulation._btTempVector30 = bt.btVector3_create(0, 0, 0);\n        PhysicsSimulation._btTempVector31 = bt.btVector3_create(0, 0, 0);\n        PhysicsSimulation._btTempQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\n        PhysicsSimulation._btTempQuaternion1 = bt.btQuaternion_create(0, 0, 0, 1);\n        PhysicsSimulation._btTempTransform0 = bt.btTransform_create();\n        PhysicsSimulation._btTempTransform1 = bt.btTransform_create();\n    }\n\n    /**\n     * 创建限制刚体运动的约束条件。\n     */\n    static createConstraint(): void {//TODO: 两种重载函数\n        //TODO:\n    }\n\n    /** @internal */\n    private _btDiscreteDynamicsWorld: number;\n    /** @internal */\n    private _btCollisionWorld: number;\n    /** @internal */\n    protected _btDispatcher: number;\n    /** @internal */\n    private _btCollisionConfiguration: number;\n    /** @internal */\n    private _btBroadphase: number;\n    /** @internal */\n    _btSolverInfo: number;\n    /** @internal */\n    private _btDispatchInfo: number;\n    /** @internal */\n    private _gravity = new Vector3(0, -10, 0);\n\n    /** @internal */\n    private _btVector3Zero: number = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\n    /** @internal */\n    private _btDefaultQuaternion: number = ILaya3D.Physics3D._bullet.btQuaternion_create(0, 0, 0, -1);\n    /** @internal */\n    private _btClosestRayResultCallback: number;\n    /** @internal */\n    private _btAllHitsRayResultCallback: number;\n    /** @internal */\n    private _btClosestConvexResultCallback: number;\n    /** @internal */\n    private _btAllConvexResultCallback: number;\n\n    /** @internal */\n    protected _collisionsUtils = new CollisionTool();\n    /** @internal */\n    protected _previousFrameCollisions: Collision[] = [];\n    /** @internal */\n    protected _currentFrameCollisions: Collision[] = [];\n    /** @internal */\n    private _currentConstraint: { [key: number]: ConstraintComponent } = {};\n    /** @internal */\n    _physicsUpdateList = new PhysicsUpdateList();\n    /**@internal\t*/\n    _characters: CharacterController[] = [];\n    /**@internal\t*/\n    _updatedRigidbodies = 0;\n\n    /**物理引擎在一帧中用于补偿减速的最大次数：模拟器每帧允许的最大模拟次数，如果引擎运行缓慢,可能需要增加该次数，否则模拟器会丢失“时间\",引擎间隔时间小于maxSubSteps*fixedTimeStep非常重要。*/\n    maxSubSteps = 1;\n    /**物理模拟器帧的间隔时间:通过减少fixedTimeStep可增加模拟精度，默认是1.0 / 60.0。*/\n    fixedTimeStep = 1.0 / 60.0;\n\n    dt = 1 / 60;\n\n    /**\n     * 是否进行连续碰撞检测。\n     */\n    get continuousCollisionDetection(): boolean {\n        return ILaya3D.Physics3D._bullet.btCollisionWorld_get_m_useContinuous(this._btDispatchInfo);\n    }\n\n    set continuousCollisionDetection(value: boolean) {\n        ILaya3D.Physics3D._bullet.btCollisionWorld_set_m_useContinuous(this._btDispatchInfo, value);\n    }\n\n    /**\n     * 获取重力。\n     */\n    get gravity(): Vector3 {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        return this._gravity;\n    }\n\n    set gravity(value: Vector3) {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\n\n        this._gravity = value;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btGravity: number = PhysicsSimulation._btTempVector30;\n        bt.btVector3_setValue(btGravity, value.x, value.y, value.z);//TODO:是否先get省一个变量\n        bt.btDiscreteDynamicsWorld_setGravity(this._btDiscreteDynamicsWorld, btGravity);\n    }\n\n    /**\n     * @internal\n     */\n    get speculativeContactRestitution(): boolean {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        return ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld);\n    }\n\n    /**\n     * @internal\n     */\n    set speculativeContactRestitution(value: boolean) {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld, value);\n    }\n\n    /**\n     * @internal\n     * 创建一个 <code>Simulation</code> 实例。\n     */\n    constructor(configuration: PhysicsSettings) {\n        this.maxSubSteps = configuration.maxSubSteps;\n        this.fixedTimeStep = configuration.fixedTimeStep;\n\n        var bt: any = ILaya3D.Physics3D._bullet;\n        this._btCollisionConfiguration = bt.btDefaultCollisionConfiguration_create();\n        this._btDispatcher = bt.btCollisionDispatcher_create(this._btCollisionConfiguration);\n        this._btBroadphase = bt.btDbvtBroadphase_create();\n        bt.btOverlappingPairCache_setInternalGhostPairCallback(bt.btDbvtBroadphase_getOverlappingPairCache(this._btBroadphase), bt.btGhostPairCallback_create());//this allows characters to have proper physics behavior\n\n        var conFlags = configuration.flags;\n        if (conFlags & PhysicsSimulation.PHYSICSENGINEFLAGS_COLLISIONSONLY) {\n            this._btCollisionWorld = new bt.btCollisionWorld(this._btDispatcher, this._btBroadphase, this._btCollisionConfiguration);\n        } else if (conFlags & PhysicsSimulation.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT) {\n            throw \"PhysicsSimulation:SoftBody processing is not yet available\";\n        } else {\n            var solver: number = bt.btSequentialImpulseConstraintSolver_create();\n            this._btDiscreteDynamicsWorld = bt.btDiscreteDynamicsWorld_create(this._btDispatcher, this._btBroadphase, solver, this._btCollisionConfiguration);\n            this._btCollisionWorld = this._btDiscreteDynamicsWorld;\n        }\n\n        if (this._btDiscreteDynamicsWorld) {\n            this._btSolverInfo = bt.btDynamicsWorld_getSolverInfo(this._btDiscreteDynamicsWorld); //we are required to keep this reference, or the GC will mess up\n            this._btDispatchInfo = bt.btCollisionWorld_getDispatchInfo(this._btDiscreteDynamicsWorld);\n        }\n\n        this._btClosestRayResultCallback = bt.ClosestRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\n        this._btAllHitsRayResultCallback = bt.AllHitsRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\n        this._btClosestConvexResultCallback = bt.ClosestConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);\n        this._btAllConvexResultCallback = bt.AllConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);//TODO:是否优化C++\n        //this.setHitsRayResultCallbackFlag();\n        bt.btGImpactCollisionAlgorithm_RegisterAlgorithm(this._btDispatcher);//注册算法\n    }\n\n    enableDebugDrawer(b: boolean) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btDynamicsWorld_enableDebugDrawer(this._btDiscreteDynamicsWorld, b);\n    }\n\n    /**\n     * @internal\n     */\n    _simulate(deltaTime: number): void {\n        this._updatedRigidbodies = 0;\n        this.dt = deltaTime;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        if (this._btDiscreteDynamicsWorld)\n            bt.btDiscreteDynamicsWorld_stepSimulation(this._btDiscreteDynamicsWorld, deltaTime, this.maxSubSteps, this.fixedTimeStep);\n        else\n            bt.PerformDiscreteCollisionDetection(this._btCollisionWorld);\n\n        this._updateCount++;\n    }\n\n    /**\n     * @internal\n     */\n    _destroy(): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        if (this._btDiscreteDynamicsWorld) {\n            bt.btCollisionWorld_destroy(this._btDiscreteDynamicsWorld);\n            this._btDiscreteDynamicsWorld = null;\n        } else {\n            bt.btCollisionWorld_destroy(this._btCollisionWorld);\n            this._btCollisionWorld = null;\n        }\n\n        bt.btDbvtBroadphase_destroy(this._btBroadphase);\n        this._btBroadphase = null;\n        bt.btCollisionDispatcher_destroy(this._btDispatcher);\n        this._btDispatcher = null;\n        bt.btDefaultCollisionConfiguration_destroy(this._btCollisionConfiguration);\n        this._btCollisionConfiguration = null;\n    }\n\n    /**\n     * @internal\n     */\n    _addPhysicsCollider(component: PhysicsCollider, group: number, mask: number): void {\n        ILaya3D.Physics3D._bullet.btCollisionWorld_addCollisionObject(this._btCollisionWorld, component._btColliderObject, group, mask);\n    }\n\n    /**\n     * @internal\n     */\n    _removePhysicsCollider(component: PhysicsCollider): void {\n        ILaya3D.Physics3D._bullet.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, component._btColliderObject);\n    }\n\n    /**\n     * @internal\n     */\n    _addRigidBody(rigidBody: Rigidbody3D, group: number, mask: number): void {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_addRigidBody(this._btCollisionWorld, rigidBody._btColliderObject, group, mask);\n    }\n\n    /**\n     * @internal\n     */\n    _removeRigidBody(rigidBody: Rigidbody3D): void {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_removeRigidBody(this._btCollisionWorld, rigidBody._btColliderObject);\n    }\n\n    /**\n     * @internal\n     */\n    _addCharacter(character: CharacterController, group: number, mask: number): void {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btCollisionWorld_addCollisionObject(this._btCollisionWorld, character._btColliderObject, group, mask);\n        bt.btDynamicsWorld_addAction(this._btCollisionWorld, character._btKinematicCharacter);\n    }\n\n    /**\n     * @internal\n     */\n    _removeCharacter(character: CharacterController): void {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, character._btColliderObject);\n        bt.btDynamicsWorld_removeAction(this._btCollisionWorld, character._btKinematicCharacter);\n    }\n\n    /**\n     * 射线检测第一个碰撞物体。\n     * @param\tfrom 起始位置。\n     * @param\tto 结束位置。\n     * @param\tout 碰撞结果。\n     * @param   collisonGroup 射线所属碰撞组。\n     * @param   collisionMask 与射线可产生碰撞的组。\n     * @return \t是否成功。\n     */\n    raycastFromTo(from: Vector3, to: Vector3, out: HitResult = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var rayResultCall: number = this._btClosestRayResultCallback;\n        var rayFrom = PhysicsSimulation._btTempVector30;\n        var rayTo = PhysicsSimulation._btTempVector31;\n        bt.btVector3_setValue(rayFrom, from.x, from.y, from.z);\n        bt.btVector3_setValue(rayTo, to.x, to.y, to.z);\n        bt.ClosestRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\n        bt.ClosestRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\n        bt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\n        bt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\n\n        bt.RayResultCallback_set_m_collisionObject(rayResultCall, null);//还原默认值\n        bt.RayResultCallback_set_m_closestHitFraction(rayResultCall, 1);//还原默认值\n        bt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);//TODO:out为空可优化,bullet内\n        if (bt.RayResultCallback_hasHit(rayResultCall)) {\n            if (out) {\n                out.succeeded = true;\n                out.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.RayResultCallback_get_m_collisionObject(rayResultCall))];\n                out.hitFraction = bt.RayResultCallback_get_m_closestHitFraction(rayResultCall);\n                var btPoint: number = bt.ClosestRayResultCallback_get_m_hitPointWorld(rayResultCall);\n                var point = out.point;\n                point.x = bt.btVector3_x(btPoint);\n                point.y = bt.btVector3_y(btPoint);\n                point.z = bt.btVector3_z(btPoint);\n                var btNormal: number = bt.ClosestRayResultCallback_get_m_hitNormalWorld(rayResultCall);\n                var normal = out.normal;\n                normal.x = bt.btVector3_x(btNormal);\n                normal.y = bt.btVector3_y(btNormal);\n                normal.z = bt.btVector3_z(btNormal);\n            }\n            return true;\n        } else {\n            if (out)\n                out.succeeded = false;\n            return false;\n        }\n    }\n\n    /**\n     * 射线检测所有碰撞的物体。\n     * @param\tfrom 起始位置。\n     * @param\tto 结束位置。\n     * @param\tout 碰撞结果[数组元素会被回收]。\n     * @param   collisonGroup 射线所属碰撞组。\n     * @param   collisionMask 与射线可产生碰撞的组。\n     * @return \t是否成功。\n     */\n    raycastAllFromTo(from: Vector3, to: Vector3, out: HitResult[], collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var rayResultCall: number = this._btAllHitsRayResultCallback;\n        var rayFrom: number = PhysicsSimulation._btTempVector30;\n        var rayTo: number = PhysicsSimulation._btTempVector31;\n\n        out.length = 0;\n        bt.btVector3_setValue(rayFrom, from.x, from.y, from.z);\n        bt.btVector3_setValue(rayTo, to.x, to.y, to.z);\n        bt.AllHitsRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\n        bt.AllHitsRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\n        bt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\n        bt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\n\n        //rayResultCall.set_m_collisionObject(null);//还原默认值\n        //rayResultCall.set_m_closestHitFraction(1);//还原默认值\n        var collisionObjects: number = bt.AllHitsRayResultCallback_get_m_collisionObjects(rayResultCall);\n        var btPoints: number = bt.AllHitsRayResultCallback_get_m_hitPointWorld(rayResultCall);\n        var btNormals: number = bt.AllHitsRayResultCallback_get_m_hitNormalWorld(rayResultCall);\n        var btFractions: number = bt.AllHitsRayResultCallback_get_m_hitFractions(rayResultCall);\n        bt.tBtCollisionObjectArray_clear(collisionObjects);//清空检测队列\n        bt.tVector3Array_clear(btPoints);\n        bt.tVector3Array_clear(btNormals);\n        bt.tScalarArray_clear(btFractions);\n        bt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);\n        var count: number = bt.tBtCollisionObjectArray_size(collisionObjects);\n        if (count > 0) {\n            this._collisionsUtils.recoverAllHitResultsPool();\n            for (var i = 0; i < count; i++) {\n                var hitResult = this._collisionsUtils.getHitResult();\n                out.push(hitResult);\n                hitResult.succeeded = true;\n                hitResult.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.tBtCollisionObjectArray_at(collisionObjects, i))];\n                hitResult.hitFraction = bt.tScalarArray_at(btFractions, i);\n                var btPoint: number = bt.tVector3Array_at(btPoints, i);//取出后需要立即赋值,防止取出法线时被覆盖\n                var pointE = hitResult.point;\n                pointE.x = bt.btVector3_x(btPoint);\n                pointE.y = bt.btVector3_y(btPoint);\n                pointE.z = bt.btVector3_z(btPoint);\n                var btNormal: number = bt.tVector3Array_at(btNormals, i);\n                var normal = hitResult.normal;\n                normal.x = bt.btVector3_x(btNormal);\n                normal.y = bt.btVector3_y(btNormal);\n                normal.z = bt.btVector3_z(btNormal);\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *  射线检测第一个碰撞物体。\n     * @param  \tray        射线\n     * @param  \toutHitInfo 与该射线发生碰撞的第一个碰撞器的碰撞信息\n     * @param  \tdistance   射线长度,默认为最大值\n     * @param   collisonGroup 射线所属碰撞组。\n     * @param   collisionMask 与射线可产生碰撞的组。\n     * @return \t是否检测成功。\n     */\n    rayCast(ray: Ray, outHitResult: HitResult = null, distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\n        var from = ray.origin;\n        var to = PhysicsSimulation._tempVector30;\n        Vector3.normalize(ray.direction, to);\n        Vector3.scale(to, distance, to);\n        Vector3.add(from, to, to);\n        return this.raycastFromTo(from, to, outHitResult, collisonGroup, collisionMask);\n    }\n\n    /**\n     * 射线检测所有碰撞的物体。\n     * @param  \tray        射线\n     * @param  \tout 碰撞结果[数组元素会被回收]。\n     * @param  \tdistance   射线长度,默认为最大值\n     * @param   collisonGroup 射线所属碰撞组。\n     * @param   collisionMask 与射线可产生碰撞的组。\n     * @return \t是否检测成功。\n     */\n    rayCastAll(ray: Ray, out: HitResult[], distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\n        var from = ray.origin;\n        var to = PhysicsSimulation._tempVector30;\n        Vector3.normalize(ray.direction, to);\n        Vector3.scale(to, distance, to);\n        Vector3.add(from, to, to);\n        return this.raycastAllFromTo(from, to, out, collisonGroup, collisionMask);\n    }\n\n    /**\n     * 形状检测第一个碰撞的物体。\n     * @param   shape 形状。\n     * @param\tfromPosition 世界空间起始位置。\n     * @param\ttoPosition 世界空间结束位置。\n     * @param\tout 碰撞结果。\n     * @param\tfromRotation 起始旋转。\n     * @param\ttoRotation 结束旋转。\n     * @param   collisonGroup 射线所属碰撞组。\n     * @param   collisionMask 与射线可产生碰撞的组。\n     * @return \t是否成功。\n     */\n    shapeCast(shape: ColliderShape, fromPosition: Vector3, toPosition: Vector3, out: HitResult = null, fromRotation: Quaternion = null, toRotation: Quaternion = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, allowedCcdPenetration: number = 0.0): boolean {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var convexResultCall: number = this._btClosestConvexResultCallback;\n        var convexPosFrom: number = PhysicsSimulation._btTempVector30;\n        var convexPosTo: number = PhysicsSimulation._btTempVector31;\n        var convexRotFrom: number = PhysicsSimulation._btTempQuaternion0;\n        var convexRotTo: number = PhysicsSimulation._btTempQuaternion1;\n        var convexTransform: number = PhysicsSimulation._btTempTransform0;\n        var convexTransTo: number = PhysicsSimulation._btTempTransform1;\n\n        var sweepShape: number = shape._btShape;\n\n        bt.btVector3_setValue(convexPosFrom, fromPosition.x, fromPosition.y, fromPosition.z);\n        bt.btVector3_setValue(convexPosTo, toPosition.x, toPosition.y, toPosition.z);\n        //convexResultCall.set_m_convexFromWorld(convexPosFrom);\n        //convexResultCall.set_m_convexToWorld(convexPosTo);\n        bt.ConvexResultCallback_set_m_collisionFilterGroup(convexResultCall, collisonGroup);\n        bt.ConvexResultCallback_set_m_collisionFilterMask(convexResultCall, collisionMask);\n\n        bt.btTransform_setOrigin(convexTransform, convexPosFrom);\n        bt.btTransform_setOrigin(convexTransTo, convexPosTo);\n\n        if (fromRotation) {\n            bt.btQuaternion_setValue(convexRotFrom, fromRotation.x, fromRotation.y, fromRotation.z, fromRotation.w);\n            bt.btTransform_setRotation(convexTransform, convexRotFrom);\n        } else {\n            bt.btTransform_setRotation(convexTransform, this._btDefaultQuaternion);\n        }\n        if (toRotation) {\n            bt.btQuaternion_setValue(convexRotTo, toRotation.x, toRotation.y, toRotation.z, toRotation.w);\n            bt.btTransform_setRotation(convexTransTo, convexRotTo);\n        } else {\n            bt.btTransform_setRotation(convexTransTo, this._btDefaultQuaternion);\n        }\n\n        bt.ClosestConvexResultCallback_set_m_hitCollisionObject(convexResultCall, null);//还原默认值\n        bt.ConvexResultCallback_set_m_closestHitFraction(convexResultCall, 1);//还原默认值\n        bt.btCollisionWorld_convexSweepTest(this._btCollisionWorld, sweepShape, convexTransform, convexTransTo, convexResultCall, allowedCcdPenetration);\n        if (bt.ConvexResultCallback_hasHit(convexResultCall)) {\n            if (out) {\n                out.succeeded = true;\n                out.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.ClosestConvexResultCallback_get_m_hitCollisionObject(convexResultCall))];\n                out.hitFraction = bt.ConvexResultCallback_get_m_closestHitFraction(convexResultCall);\n                var btPoint: number = bt.ClosestConvexResultCallback_get_m_hitPointWorld(convexResultCall);\n                var btNormal: number = bt.ClosestConvexResultCallback_get_m_hitNormalWorld(convexResultCall);\n                var point = out.point;\n                var normal = out.normal;\n                point.x = bt.btVector3_x(btPoint);\n                point.y = bt.btVector3_y(btPoint);\n                point.z = bt.btVector3_z(btPoint);\n                normal.x = bt.btVector3_x(btNormal);\n                normal.y = bt.btVector3_y(btNormal);\n                normal.z = bt.btVector3_z(btNormal);\n            }\n            return true;\n        } else {\n            if (out)\n                out.succeeded = false;\n            return false;\n        }\n    }\n\n    /**\n     * 形状检测所有碰撞的物体。\n     * @param   shape 形状。\n     * @param\tfromPosition 世界空间起始位置。\n     * @param\ttoPosition 世界空间结束位置。\n     * @param\tout 碰撞结果[数组元素会被回收]。\n     * @param\tfromRotation 起始旋转。\n     * @param\ttoRotation 结束旋转。\n     * @param   collisonGroup 射线所属碰撞组。\n     * @param   collisionMask 与射线可产生碰撞的组。\n     * @return \t是否成功。\n     */\n    shapeCastAll(shape: ColliderShape, fromPosition: Vector3, toPosition: Vector3, out: HitResult[], fromRotation: Quaternion = null, toRotation: Quaternion = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, allowedCcdPenetration: number = 0.0): boolean {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var convexResultCall: number = this._btAllConvexResultCallback;\n        var convexPosFrom: number = PhysicsSimulation._btTempVector30;\n        var convexPosTo: number = PhysicsSimulation._btTempVector31;\n        var convexRotFrom: number = PhysicsSimulation._btTempQuaternion0;\n        var convexRotTo: number = PhysicsSimulation._btTempQuaternion1;\n        var convexTransform: number = PhysicsSimulation._btTempTransform0;\n        var convexTransTo: number = PhysicsSimulation._btTempTransform1;\n\n        var sweepShape: number = shape._btShape;\n\n        out.length = 0;\n        bt.btVector3_setValue(convexPosFrom, fromPosition.x, fromPosition.y, fromPosition.z);\n        bt.btVector3_setValue(convexPosTo, toPosition.x, toPosition.y, toPosition.z);\n\n        //convexResultCall.set_m_convexFromWorld(convexPosFrom);\n        //convexResultCall.set_m_convexToWorld(convexPosTo);\n\n        bt.ConvexResultCallback_set_m_collisionFilterGroup(convexResultCall, collisonGroup);\n        bt.ConvexResultCallback_set_m_collisionFilterMask(convexResultCall, collisionMask);\n\n        bt.btTransform_setOrigin(convexTransform, convexPosFrom);\n        bt.btTransform_setOrigin(convexTransTo, convexPosTo);\n        if (fromRotation) {\n            bt.btQuaternion_setValue(convexRotFrom, fromRotation.x, fromRotation.y, fromRotation.z, fromRotation.w);\n            bt.btTransform_setRotation(convexTransform, convexRotFrom);\n        } else {\n            bt.btTransform_setRotation(convexTransform, this._btDefaultQuaternion);\n        }\n        if (toRotation) {\n            bt.btQuaternion_setValue(convexRotTo, toRotation.x, toRotation.y, toRotation.z, toRotation.w);\n            bt.btTransform_setRotation(convexTransTo, convexRotTo);\n        } else {\n            bt.btTransform_setRotation(convexTransTo, this._btDefaultQuaternion);\n        }\n\n        var collisionObjects: number = bt.AllConvexResultCallback_get_m_collisionObjects(convexResultCall);\n        var btPoints: number = bt.AllConvexResultCallback_get_m_hitPointWorld(convexResultCall);\n        var btNormals: number = bt.AllConvexResultCallback_get_m_hitNormalWorld(convexResultCall);\n        var btFractions: number = bt.AllConvexResultCallback_get_m_hitFractions(convexResultCall);\n\n        bt.tVector3Array_clear(btPoints);\n        bt.tVector3Array_clear(btNormals);\n        bt.tScalarArray_clear(btFractions);\n        bt.tBtCollisionObjectArray_clear(collisionObjects);//清空检测队列\n        bt.btCollisionWorld_convexSweepTest(this._btCollisionWorld, sweepShape, convexTransform, convexTransTo, convexResultCall, allowedCcdPenetration);\n        var count: number = bt.tBtCollisionObjectArray_size(collisionObjects);\n\n        if (count > 0) {\n            this._collisionsUtils.recoverAllHitResultsPool();\n\n            for (var i = 0; i < count; i++) {\n                var hitResult = this._collisionsUtils.getHitResult();\n                out.push(hitResult);\n                hitResult.succeeded = true;\n                hitResult.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.tBtCollisionObjectArray_at(collisionObjects, i))];\n                hitResult.hitFraction = bt.tScalarArray_at(btFractions, i);\n                var btPoint: number = bt.tVector3Array_at(btPoints, i);\n                var point = hitResult.point;\n                point.x = bt.btVector3_x(btPoint);\n                point.y = bt.btVector3_y(btPoint);\n                point.z = bt.btVector3_z(btPoint);\n                var btNormal: number = bt.tVector3Array_at(btNormals, i);\n                var normal = hitResult.normal;\n                normal.x = bt.btVector3_x(btNormal);\n                normal.y = bt.btVector3_y(btNormal);\n                normal.z = bt.btVector3_z(btNormal);\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * 添加刚体运动的约束条件。\n     * @param constraint 约束。\n     * @param disableCollisionsBetweenLinkedBodies 是否禁用\n     */\n    addConstraint(constraint: ConstraintComponent, disableCollisionsBetweenLinkedBodies: boolean = false): void {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        // this._nativeDiscreteDynamicsWorld.addConstraint(constraint._nativeConstraint, disableCollisionsBetweenLinkedBodies);\n        ILaya3D.Physics3D._bullet.btCollisionWorld_addConstraint(this._btDiscreteDynamicsWorld, constraint._btConstraint, disableCollisionsBetweenLinkedBodies);\n        this._currentConstraint[constraint.id] = constraint;\n    }\n\n    /**\n     * 移除刚体运动的约束条件。\n     */\n    removeConstraint(constraint: ConstraintComponent): void {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        // this._nativeDiscreteDynamicsWorld.removeConstraint(constraint._nativeConstraint);\n        ILaya3D.Physics3D._bullet.btCollisionWorld_removeConstraint(this._btDiscreteDynamicsWorld, constraint._btConstraint);\n        delete this._currentConstraint[constraint.id];\n    }\n\n    /**\n     * 设置射线检测回调\n     * @param HITSRAYRESULTCALLBACK_FLAG值\n     */\n    setHitsRayResultCallbackFlag(flag: number = 1) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.RayResultCallback_set_m_flags(this._btAllHitsRayResultCallback, flag);\n        bt.RayResultCallback_set_m_flags(this._btClosestRayResultCallback, flag);\n    }\n\n    /**\n     * @internal\n     */\n\n    _updatePhysicsTransformFromRender(): void {\n        var elements: any = this._physicsUpdateList.elements;\n        for (var i = 0, n = this._physicsUpdateList.length; i < n; i++) {\n            var physicCollider: PhysicsComponent = elements[i];\n            physicCollider._derivePhysicsTransformation(false);\n            physicCollider._inPhysicUpdateListIndex = -1;//置空索引\n        }\n        this._physicsUpdateList.length = 0;//清空物理更新队列\n    }\n\n\n    /**\n     * @internal\n     */\n    _updateCharacters(): void {\n        let bt = ILaya3D.Physics3D._bullet;\n        for (var i = 0, n = this._characters.length; i < n; i++) {\n            var character = this._characters[i];\n            //TODO 临时加一个0.04，对一个人来说0.04的margin太大了，足以把脚陷入地下，所以先加回来\n            character._updateTransformComponent(bt.btCollisionObject_getWorldTransform(character._btColliderObject), false, 0.04);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _updateCollisions(): void {\n        this._collisionsUtils.recoverAllContactPointsPool();\n        var previous = this._currentFrameCollisions;\n        this._currentFrameCollisions = this._previousFrameCollisions;\n        this._currentFrameCollisions.length = 0;\n        this._previousFrameCollisions = previous;\n        var loopCount = this._updateCount;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var numManifolds: number = bt.btDispatcher_getNumManifolds(this._btDispatcher);\n        for (let i = 0; i < numManifolds; i++) {\n            var contactManifold: number = bt.btDispatcher_getManifoldByIndexInternal(this._btDispatcher, i);//1.可能同时返回A和B、B和A 2.可能同时返回A和B多次(可能和CCD有关)\n            var componentA: PhysicsTriggerComponent = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody0(contactManifold))];\n            var componentB: PhysicsTriggerComponent = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody1(contactManifold))];\n            if (componentA.id > componentB.id) {\n                //交换一下，保证A.id<b.id\n                let tt = componentA;\n                componentA = componentB;\n                componentB = tt;\n            }\n            var collision: Collision = null;\n            var isFirstCollision: boolean;//可能同时返回A和B多次,需要过滤\n            var contacts: ContactPoint[] = null;\n            var isTrigger = componentA.isTrigger || componentB.isTrigger;\n            if (isTrigger) {\n                if (componentA.owner._getBit(NodeFlags.PROCESS_TRIGGERS) || componentB.owner._getBit(NodeFlags.PROCESS_TRIGGERS)) {\n                    var numContacts: number = bt.btPersistentManifold_getNumContacts(contactManifold);\n                    for (let j = 0; j < numContacts; j++) {\n                        var pt: number = bt.btPersistentManifold_getContactPoint(contactManifold, j);\n                        var distance: number = bt.btManifoldPoint_getDistance(pt);\n                        if (distance <= 0) {\n                            collision = this._collisionsUtils.getCollision(componentA, componentB);\n                            contacts = collision.contacts;\n                            isFirstCollision = collision._updateFrame !== loopCount;\n                            if (isFirstCollision) {\n                                collision._isTrigger = true;\n                                contacts.length = 0;\n                            }\n                            break;\n                        }\n                    }\n                }\n            } else if (componentA.owner._getBit(NodeFlags.PROCESS_COLLISIONS) || componentB.owner._getBit(NodeFlags.PROCESS_COLLISIONS)) {\n                if (componentA._enableProcessCollisions || componentB._enableProcessCollisions) {//例：A和B均为运动刚体或PhysicCollider\n                    numContacts = bt.btPersistentManifold_getNumContacts(contactManifold);\n                    for (let j = 0; j < numContacts; j++) {\n                        pt = bt.btPersistentManifold_getContactPoint(contactManifold, j);\n                        distance = bt.btManifoldPoint_getDistance(pt)\n                        if (distance <= 0) {\n                            var contactPoint = this._collisionsUtils.getContactPoints();\n                            contactPoint.colliderA = componentA;\n                            contactPoint.colliderB = componentB;\n                            contactPoint.distance = distance;\n                            var btNormal: number = bt.btManifoldPoint_get_m_normalWorldOnB(pt);\n                            var normal = contactPoint.normal;\n                            normal.x = bt.btVector3_x(btNormal);\n                            normal.y = bt.btVector3_y(btNormal);\n                            normal.z = bt.btVector3_z(btNormal);\n                            var btPostionA: number = bt.btManifoldPoint_get_m_positionWorldOnA(pt);\n                            var positionOnA = contactPoint.positionOnA;\n                            positionOnA.x = bt.btVector3_x(btPostionA);\n                            positionOnA.y = bt.btVector3_y(btPostionA);\n                            positionOnA.z = bt.btVector3_z(btPostionA);\n                            var btPostionB: number = bt.btManifoldPoint_get_m_positionWorldOnB(pt);\n                            var positionOnB = contactPoint.positionOnB;\n                            positionOnB.x = bt.btVector3_x(btPostionB);\n                            positionOnB.y = bt.btVector3_y(btPostionB);\n                            positionOnB.z = bt.btVector3_z(btPostionB);\n\n                            if (!collision) {\n                                collision = this._collisionsUtils.getCollision(componentA, componentB);\n                                contacts = collision.contacts;\n                                isFirstCollision = collision._updateFrame !== loopCount;\n                                if (isFirstCollision) {\n                                    collision._isTrigger = false;\n                                    contacts.length = 0;\n                                }\n                            }\n                            contacts.push(contactPoint);\n                        }\n                    }\n                }\n            }\n            if (collision && isFirstCollision) {//isFirstCollision是因为可能有AB,AB,BA\n                this._currentFrameCollisions.push(collision);\n                collision._setUpdateFrame(loopCount);\n            }\n        }\n\n        // 角色的碰撞需要特殊处理一下。由于在角色流程中有可能已经解决了碰撞，导致发现不了碰撞，所以特殊处理\n        for (var i = 0, n = this._characters.length; i < n; i++) {\n            var character = this._characters[i];\n\n            //取出所有碰撞对象\n            character.getOverlappingObj(body => {\n                // 如果body也是角色则忽略，因为每个角色都会遍历到\n                if (body instanceof CharacterController) return;\n                let compa = character;\n                let compb = body;\n                if (character.id > body.id) {\n                    compa = body as any;\n                    compb = character as any;\n                }\n                let collision = this._collisionsUtils.getCollision(compa, compb);\n                // a和b已经有碰撞了，则忽略\n                if (collision._updateFrame === loopCount) return;\n                let contacts = collision.contacts;\n                contacts.length = 1;\t// 反正是假的，只记录一个假的碰撞点\n                collision._setUpdateFrame(loopCount);\n                // 添加假的碰撞点\n                var contactPoint = this._collisionsUtils.getContactPoints();\n                contactPoint.colliderA = compa;\n                contactPoint.colliderB = compb;\n                contactPoint.distance = 0;\n                contacts[0] = contactPoint;\n                this._currentFrameCollisions.push(collision);\n            });\n        }\n\n    }\n\n\n    /**\n     * 这个只是给对象发送事件，不会挨个组件调用碰撞函数\n     * 组件要响应碰撞的话，要通过监听事件\n     */\n    dispatchCollideEvent(): void {\n        let loopCount = this._updateCount;\n        for (let i = 0, n = this._currentFrameCollisions.length; i < n; i++) {\n            let curFrameCol = this._currentFrameCollisions[i];\n            let colliderA = curFrameCol._colliderA;\n            let colliderB = curFrameCol._colliderB;\n            if (colliderA.destroyed || colliderB.destroyed)//前一个循环可能会销毁后面循环的同一物理组件\n                continue;\n            // TODO 下面是否正确。现在这个_enableProcessCollisions是kinematic的话，就是false，所以先改成&&\n            //if(!colliderA._enableProcessCollisions && colliderB._enableProcessCollisions) return;\t// 这个会导致角色和kinematic地板的碰撞不处理\n            let ownerA = colliderA.owner;\n            let ownerB = colliderB.owner;\n            if (loopCount - curFrameCol._lastUpdateFrame === 1) {// 上一帧有，这一帧还有,则是stay\n                if (curFrameCol._isTrigger) {\n                    ownerA.event(Event.TRIGGER_STAY, colliderB);\n                    ownerB.event(Event.TRIGGER_STAY, colliderA);\n                } else {\n                    curFrameCol.other = colliderB;\n                    ownerA.event(Event.COLLISION_STAY, curFrameCol);\n                    curFrameCol.other = colliderA;\n                    ownerB.event(Event.COLLISION_STAY, curFrameCol);\n                }\n            } else {\n                if (curFrameCol._isTrigger) {\n                    ownerA.event(Event.TRIGGER_ENTER, colliderB);\n                    ownerB.event(Event.TRIGGER_ENTER, colliderA);\n                } else {\n                    curFrameCol.other = colliderB;\n                    ownerA.event(Event.COLLISION_ENTER, curFrameCol);\n                    curFrameCol.other = colliderA;\n                    ownerB.event(Event.COLLISION_ENTER, curFrameCol);\n                }\n            }\n        }\n\n        for (let i = 0, n = this._previousFrameCollisions.length; i < n; i++) {\n            let preFrameCol = this._previousFrameCollisions[i];\n            let preColliderA = preFrameCol._colliderA;\n            let preColliderB = preFrameCol._colliderB;\n            if (preColliderA.destroyed || preColliderB.destroyed)\n                continue;\n            let ownerA = preColliderA.owner;\n            let ownerB = preColliderB.owner;\n\n            if (loopCount - preFrameCol._updateFrame === 1) {\n                this._collisionsUtils.recoverCollision(preFrameCol);//回收collision对象\n                if (preFrameCol._isTrigger) {\n                    ownerA.event(Event.TRIGGER_EXIT, preColliderB);\n                    ownerB.event(Event.TRIGGER_EXIT, preColliderA);\n                } else {\n                    preFrameCol.other = preColliderB;\n                    ownerA.event(Event.COLLISION_EXIT, preFrameCol);\n                    preFrameCol.other = preColliderA;\n                    ownerB.event(Event.COLLISION_EXIT, preFrameCol);\n                }\n            }\n        }\n\n        for (let id in this._currentConstraint) {\n            // 检查所有的约束\n            let constraintObj = this._currentConstraint[id];\n            // TODO 这个只要发一次就行\n            if (constraintObj.enabled && constraintObj._isBreakConstrained()) {\n                let bodya = constraintObj.ownBody.owner;\n                let bodyb = constraintObj.connectedBody.owner;\n                bodya.event(Event.JOINT_BREAK);\n                bodyb.event(Event.JOINT_BREAK);\n            }\n        }\n    }\n\n    /**\n     * 清除力。\n     */\n    clearForces(): void {\n        if (!this._btDiscreteDynamicsWorld)\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_clearForces(this._btDiscreteDynamicsWorld);\n    }\n\n    createRaycastVehicle(body: Rigidbody3D) {\n        let bt: any = ILaya3D.Physics3D._bullet;\n        let btVehiclePtr = bt.btRaycastVehicle_create(this._btDiscreteDynamicsWorld, body._btColliderObject);\n        bt.btCollisionObject_forceActivationState(body._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_DISABLE_DEACTIVATION);//车辆禁止睡眠\n        let ret = new RaycastVehicle(btVehiclePtr);\n        return ret;\n    }\n\n    addVehicle(v: RaycastVehicle) {\n        let bt: any = ILaya3D.Physics3D._bullet;\n        bt.btDynamicsWorld_addAction(this._btDiscreteDynamicsWorld, v.btVehiclePtr);\n    }\n\n    removeVehicle(v: RaycastVehicle) {\n        let bt: any = ILaya3D.Physics3D._bullet;\n        bt.btDynamicsWorld_removeAction(v.btVehiclePtr);\n    }\n\n    // 给Query用的\n    private _btPairCachingGhost: number;\n    private _btSphereShape: number;\n    private _btTransform: number;\n    private _btVec: number;\n\n    sphereQuery(pos: Vector3, radius: number, result: PhysicsComponent[], collisionmask = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\n        let bt = ILaya3D.Physics3D._bullet;\n        if (!this._btPairCachingGhost) {\n            this._btPairCachingGhost = bt.btPairCachingGhostObject_create();\n            this._btTransform = bt.btTransform_create();\n            this._btVec = bt.btVector3_create(0, 0, 0);\n            this._btSphereShape = bt.btSphereShape_create(1);\n        }\n        result.length = 0;\n        let sphere = this._btSphereShape;\n        bt.btSphereShpae_setUnscaledRadius(sphere, radius);\n        let ghost = this._btPairCachingGhost;\n        let xform = this._btTransform;\n        let vpos = this._btVec;\n        bt.btVector3_setValue(vpos, pos.x, pos.y, pos.z);\n        bt.btTransform_setIdentity(xform);\n        bt.btTransform_setOrigin(xform, vpos);\n        bt.btCollisionObject_setCollisionShape(ghost, sphere);\n        bt.btCollisionObject_setWorldTransform(ghost, xform);\n        bt.btCollisionWorld_addCollisionObject(this._btDiscreteDynamicsWorld, ghost, -1, -1);\n        let num = bt.btCollisionObject_getNumOverlappingObjects(ghost);\n        for (let i = 0; i < num; i++) {\n            let obj = bt.btCollisionObject_getOverlappingObject(ghost, i);\n            let comp = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(obj)] as Rigidbody3D;\n            if (comp.collisionGroup & collisionmask)\n                result.push(comp);\n            //let motionstate = bt.btRigidBody_getMotionState(obj);\n            //let rigidid = bt.layaMotionState_get_rigidBodyID(motionstate)\n        }\n\n        // 必须要删掉，否则会触发碰撞事件\n        bt.btCollisionWorld_removeCollisionObject(this._btDiscreteDynamicsWorld, ghost);\n    }\n}\n\n\n","import { Component } from \"../../components/Component\"\nimport { PhysicsComponent } from \"./PhysicsComponent\"\nimport { ILaya3D } from \"../../../ILaya3D\";\n\n/**\n * <code>PhysicsTriggerComponent</code> 类用于创建物理触发器组件。\n */\nexport class PhysicsTriggerComponent extends PhysicsComponent {\n    /** @internal */\n    private _isTrigger: boolean = false;\n\n    /**\n     * 是否为触发器。\n     */\n    get isTrigger(): boolean {\n        return this._isTrigger;\n    }\n\n    set isTrigger(value: boolean) {\n        this._isTrigger = value;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        if (this._btColliderObject) {\n            var flags: number = bt.btCollisionObject_getCollisionFlags(this._btColliderObject);\n            if (value) {\n                if ((flags & PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE) === 0)\n                    bt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags | PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\n            } else {\n                if ((flags & PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE) !== 0)\n                    bt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags ^ PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\n            }\n        }\n    }\n\n    /**\n     * 创建一个 <code>PhysicsTriggerComponent</code> 实例。\n     * @param collisionGroup 所属碰撞组。\n     * @param canCollideWith 可产生碰撞的碰撞组。\n     */\n    constructor(collisionGroup: number, canCollideWith: number) {\n        super(collisionGroup, canCollideWith);\n    }\n\n    protected _onAdded(): void {\n        super._onAdded();\n        this.isTrigger = this._isTrigger;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: Component): void {\n        super._cloneTo(dest);\n        (<PhysicsTriggerComponent>dest).isTrigger = this._isTrigger;\n    }\n}\n\n","import { Component } from \"../../components/Component\";\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\nimport { Utils3D } from \"../utils/Utils3D\";\nimport { PhysicsComponent } from \"./PhysicsComponent\";\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\nimport { ILaya3D } from \"../../../ILaya3D\";\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * <code>Rigidbody3D</code> 类用于创建刚体碰撞器。\n */\nexport class Rigidbody3D extends PhysicsTriggerComponent {\n    /*\n     * 刚体类型_静态。\n     * 设定为永远不会移动刚体,引擎也不会自动更新。\n     * 如果你打算移动物理,建议使用TYPE_KINEMATIC。\n     */\n    static TYPE_STATIC = 0;\n    /*\n     * 刚体类型_动态。\n     * 可以通过forces和impulsesy移动刚体,并且不需要修改移动转换。\n     */\n    static TYPE_DYNAMIC = 1;\n    /*\n     * 刚体类型_运动。\n     * 可以移动刚体,物理引擎会自动处理动态交互。\n     * 注意：和静态或其他类型刚体不会产生动态交互。\n     */\n    static TYPE_KINEMATIC = 2;\n\n    /** @internal */\n    static _BT_DISABLE_WORLD_GRAVITY = 1;\n    /** @internal */\n    static _BT_ENABLE_GYROPSCOPIC_FORCE = 2;\n\n    /** @internal */\n    private static _btTempVector30: number;\n    /** @internal */\n    private static _btTempVector31: number;\n    /** @internal */\n    private static _btVector3Zero: number;\n    /**@internal */\n    private static _btTransform0: number;\n    /** @internal */\n    private static _btInertia: number;\n    /** @internal */\n    private static _btImpulse: number;\n    /** @internal */\n    private static _btImpulseOffset: number;\n    /** @internal */\n    private static _btGravity: number;\n\n    userData: any;\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        Rigidbody3D._btTempVector30 = bt.btVector3_create(0, 0, 0);\n        Rigidbody3D._btTempVector31 = bt.btVector3_create(0, 0, 0);\n        Rigidbody3D._btVector3Zero = bt.btVector3_create(0, 0, 0);\n        Rigidbody3D._btInertia = bt.btVector3_create(0, 0, 0);\n        Rigidbody3D._btImpulse = bt.btVector3_create(0, 0, 0);\n        Rigidbody3D._btImpulseOffset = bt.btVector3_create(0, 0, 0);\n        Rigidbody3D._btGravity = bt.btVector3_create(0, 0, 0);\n        Rigidbody3D._btTransform0 = bt.btTransform_create();\n    }\n\n    /** @internal */\n    private _btLayaMotionState: number;\n    /** @internal */\n    private _isKinematic = false;\n    /** @internal */\n    private _mass = 1.0;\n    /** @internal */\n    private _gravity = new Vector3(0, -10, 0);\n    /** @internal */\n    private _angularDamping = 0.0;\n    /** @internal */\n    private _linearDamping = 0.0;\n    /** @internal */\n    private _overrideGravity = false;\n    /** @internal */\n    private _totalTorque = new Vector3(0, 0, 0);\n    /** @internal */\n    private _totalForce = new Vector3(0, 0, 0);\n    /** @internal */\n    private _linearVelocity = new Vector3();\n    /** @internal */\n    private _angularVelocity = new Vector3();\n    /** @internal */\n    private _linearFactor = new Vector3(1, 1, 1);\n    /** @internal */\n    private _angularFactor = new Vector3(1, 1, 1);\n    /** @internal */\n    private _detectCollisions = true;\n    //private var _linkedConstraints:Array;//TODO:\n    /**\n     * 质量。\n     */\n    get mass(): number {\n        return this._mass;\n    }\n\n    set mass(value: number) {\n        value = Math.max(value, 1e-07);//质量最小为1e-07\n        this._mass = value;\n        (this._isKinematic) || (this._updateMass(value));\n    }\n\n    // /**\n    //  * 设置禁止\n    //  */\n    // set disableSimulation(b: boolean) {\n    //     var bt: any = ILaya3D.Physics3D._bullet;\n    //     let curstate = bt.btCollisionObject_getActivationState(this._btColliderObject);\n    //     if (b) {\n    //         bt.btCollisionObject_forceActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_DISABLE_SIMULATION);\n    //     } else {\n    //         if (curstate != PhysicsComponent.ACTIVATIONSTATE_DISABLE_SIMULATION) {\n    //             // 本身就没有禁止，则不改\n    //         } else {\n    //             bt.btCollisionObject_forceActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_ACTIVE_TAG);\n    //         }\n    //     }\n    // }\n\n    // get disableSimulation(): boolean {\n    //     //TODO\n    //     return false;\n    // }\n    /**\n    * 获得碰撞标记\n    * @returns \n    */\n    getCollisionFlags() {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        if (!this._btColliderObject) return 0;\n        return bt.btCollisionObject_getCollisionFlags(this._btColliderObject);\n    }\n\n    /**\n     * 是否为运动物体，如果为true仅可通过transform属性移动物体,而非其他力相关属性。\n     * \n     * TODO 这个现在是指static或者kinematic\n     */\n    get isKinematic(): boolean {\n        return this._isKinematic;\n    }\n\n    set isKinematic(value: boolean) {\n        this._isKinematic = value;\n        this._controlBySimulation = !value;//isKinematic not controll by Simulation\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var canInSimulation: boolean = !!(this._simulation && this._enabled && this._colliderShape);\n        canInSimulation && this._removeFromSimulation();\n        var natColObj: any = this._btColliderObject;\n        var flags: number = bt.btCollisionObject_getCollisionFlags(natColObj);\n        if (value) {\n            flags = flags | PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\n            bt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\n            // TODO kinematic直接禁止睡眠有问题，例如如果实际不动的话，会导致与他接触的物体都无法进入睡眠状态\n            bt.btCollisionObject_forceActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_DISABLE_DEACTIVATION);//触发器开启主动检测,并防止睡眠\n            this._enableProcessCollisions = false;\n            this._updateMass(0);//必须设置Mass为0来保证InverMass为0\n        } else {\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\n                flags = flags ^ PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\n            bt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\n            bt.btCollisionObject_setActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_ACTIVE_TAG);\n            this._enableProcessCollisions = true;\n            this._updateMass(this._mass);\n        }\n\n        var btZero: number = Rigidbody3D._btVector3Zero;\n        bt.btCollisionObject_setInterpolationLinearVelocity(natColObj, btZero);\n        bt.btRigidBody_setLinearVelocity(natColObj, btZero);\n        bt.btCollisionObject_setInterpolationAngularVelocity(natColObj, btZero);\n        bt.btRigidBody_setAngularVelocity(natColObj, btZero);\n\n        canInSimulation && this._addToSimulation();\n    }\n\n    /**\n     * 刚体的线阻力。\n     */\n    get linearDamping(): number {\n        return this._linearDamping;\n    }\n\n    set linearDamping(value: number) {\n        this._linearDamping = value;\n        if (this._btColliderObject)\n            ILaya3D.Physics3D._bullet.btRigidBody_setDamping(this._btColliderObject, value, this._angularDamping);\n    }\n\n    /**\n     * 刚体的角阻力。\n     */\n    get angularDamping(): number {\n        return this._angularDamping;\n    }\n\n    set angularDamping(value: number) {\n        this._angularDamping = value;\n        if (this._btColliderObject)\n            ILaya3D.Physics3D._bullet.btRigidBody_setDamping(this._btColliderObject, this._linearDamping, value);\n    }\n\n    /**\n     * 是否重载重力。\n     */\n    get overrideGravity(): boolean {\n        return this._overrideGravity;\n    }\n\n    set overrideGravity(value: boolean) {\n        this._overrideGravity = value;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        if (this._btColliderObject) {\n            var flag: number = bt.btRigidBody_getFlags(this._btColliderObject);\n            if (value) {\n                if ((flag & Rigidbody3D._BT_DISABLE_WORLD_GRAVITY) === 0)\n                    bt.btRigidBody_setFlags(this._btColliderObject, flag | Rigidbody3D._BT_DISABLE_WORLD_GRAVITY);\n            } else {\n                if ((flag & Rigidbody3D._BT_DISABLE_WORLD_GRAVITY) > 0)\n                    bt.btRigidBody_setFlags(this._btColliderObject, flag ^ Rigidbody3D._BT_DISABLE_WORLD_GRAVITY);\n            }\n        }\n    }\n\n    /**\n     * 重力。\n     */\n    get gravity(): Vector3 {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        Rigidbody3D._btGravity = bt.btRigidBody_getGravity(this._btColliderObject);\n        Utils3D._convertToLayaVec3(Rigidbody3D._btGravity, this._gravity);\n        return this._gravity;\n    }\n\n    set gravity(value: Vector3) {\n        this._gravity = value;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btVector3_setValue(Rigidbody3D._btGravity, value.x, value.y, value.z);\n        bt.btRigidBody_setGravity(this._btColliderObject, Rigidbody3D._btGravity);\n    }\n\n    /**\n     * 总力。\n     */\n    get totalForce(): Vector3 {\n        if (this._btColliderObject) {\n            var btTotalForce: number = ILaya3D.Physics3D._bullet.btRigidBody_getTotalForce(this._btColliderObject);\n            Utils3D._convertToLayaVec3(btTotalForce, this._totalForce);\n            return this._totalForce;\n        }\n        return null;\n    }\n\n    /**\n     * 每个轴的线性运动缩放因子,如果某一轴的值为0表示冻结在该轴的线性运动。\n     */\n    get linearFactor(): Vector3 {\n        return this._linearFactor;\n    }\n\n    set linearFactor(value: Vector3) {\n        this._linearFactor = value;\n        var btValue: number = Rigidbody3D._btTempVector30;\n        Utils3D._convertToBulletVec3(value, btValue);\n        ILaya3D.Physics3D._bullet.btRigidBody_setLinearFactor(this._btColliderObject, btValue);\n    }\n\n    /**\n     * 线速度\n     */\n    get linearVelocity(): Vector3 {\n        if (this._btColliderObject)\n            Utils3D._convertToLayaVec3(ILaya3D.Physics3D._bullet.btRigidBody_getLinearVelocity(this._btColliderObject), this._linearVelocity);\n        return this._linearVelocity;\n    }\n\n    set linearVelocity(value: Vector3) {\n        this._linearVelocity = value;\n        if (this._btColliderObject) {\n            var btValue = Rigidbody3D._btTempVector30;\n            Utils3D._convertToBulletVec3(value, btValue);\n            (this.isSleeping) && (this.wakeUp());//可能会因睡眠导致设置线速度无效\n            ILaya3D.Physics3D._bullet.btRigidBody_setLinearVelocity(this._btColliderObject, btValue);\n        }\n    }\n\n    /**\n     * 每个轴的角度运动缩放因子,如果某一轴的值为0表示冻结在该轴的角度运动。\n     */\n    get angularFactor(): Vector3 {\n        return this._angularFactor;\n    }\n\n    set angularFactor(value: Vector3) {\n        this._angularFactor = value;\n        var btValue: number = Rigidbody3D._btTempVector30;\n        Utils3D._convertToBulletVec3(value, btValue);\n        ILaya3D.Physics3D._bullet.btRigidBody_setAngularFactor(this._btColliderObject, btValue);\n\n    }\n\n    /**\n     * 角速度。\n     */\n    get angularVelocity(): Vector3 {\n        if (this._btColliderObject)\n            Utils3D._convertToLayaVec3(ILaya3D.Physics3D._bullet.btRigidBody_getAngularVelocity(this._btColliderObject), this._angularVelocity);\n        return this._angularVelocity;\n    }\n\n    set angularVelocity(value: Vector3) {\n        this._angularVelocity = value;\n        if (this._btColliderObject) {\n            var btValue: number = Rigidbody3D._btTempVector30;\n            Utils3D._convertToBulletVec3(value, btValue);\n            (this.isSleeping) && (this.wakeUp());//可能会因睡眠导致设置角速度无效\n            ILaya3D.Physics3D._bullet.btRigidBody_setAngularVelocity(this._btColliderObject, btValue);\n        }\n    }\n\n    /**\n     * 刚体所有扭力。\n     */\n    get totalTorque(): Vector3 {\n        if (this._btColliderObject) {\n            var btTotalTorque: number = ILaya3D.Physics3D._bullet.btRigidBody_getTotalTorque(this._btColliderObject);\n            Utils3D._convertToLayaVec3(btTotalTorque, this._totalTorque);\n            return this._totalTorque;\n        }\n        return null;\n    }\n\n    /**\n     * 是否进行碰撞检测。\n     */\n    get detectCollisions(): boolean {\n        return this._detectCollisions;\n    }\n\n    set detectCollisions(value: boolean) {\n        if (this._detectCollisions !== value) {\n            this._detectCollisions = value;\n\n            if (this._colliderShape && this._enabled && this._simulation) {\n                this._simulation._removeRigidBody(this);\n                this._simulation._addRigidBody(this, this._collisionGroup, value ? this._canCollideWith : 0);\n                //_nativeColliderObject.getBroadphaseHandle().set_m_collisionFilterMask(value ? _canCollideWith : 0);//有延迟问题\n            }\n        }\n    }\n\n    /**\n     * 是否处于睡眠状态。\n     */\n    get isSleeping(): boolean {\n        if (this._btColliderObject)\n            return ILaya3D.Physics3D._bullet.btCollisionObject_getActivationState(this._btColliderObject) === PhysicsComponent.ACTIVATIONSTATE_ISLAND_SLEEPING;\n        return false;\n    }\n\n    /**\n     * 刚体睡眠的线速度阈值。\n     */\n    get sleepLinearVelocity(): number {\n        return ILaya3D.Physics3D._bullet.btRigidBody_getLinearSleepingThreshold(this._btColliderObject);\n    }\n\n    set sleepLinearVelocity(value: number) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btRigidBody_setSleepingThresholds(this._btColliderObject, value, bt.btRigidBody_getAngularSleepingThreshold(this._btColliderObject));\n    }\n\n    /**\n     * 刚体睡眠的角速度阈值。\n     */\n    get sleepAngularVelocity(): number {\n        return ILaya3D.Physics3D._bullet.btRigidBody_getAngularSleepingThreshold(this._btColliderObject);\n    }\n\n    set sleepAngularVelocity(value: number) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btRigidBody_setSleepingThresholds(this._btColliderObject, bt.btRigidBody_getLinearSleepingThreshold(this._btColliderObject), value);\n    }\n\n    get btColliderObject(): number {\n        return this._btColliderObject;\n    }\n\n    /**\n     * 直接设置物理位置\n     */\n    set position(pos: Vector3) {\n        var bt = ILaya3D.Physics3D._bullet;\n        var btColliderObject = this._btColliderObject;\n        bt.btRigidBody_setCenterOfMassPos(btColliderObject, pos.x, pos.y, pos.z);\n    }\n\n    get position() {\n        return this.getPhysicsPosition();\n    }\n\n    /**\n     * 设置物理旋转\n     */\n    set orientation(q: Quaternion) {\n        var bt = ILaya3D.Physics3D._bullet;\n        var btColliderObject = this._btColliderObject;\n        bt.btRigidBody_setCenterOfMassOrientation(btColliderObject, q.x, q.y, q.z, q.w);\n    }\n\n    get orientation() {\n        return this.getPhysicsOrientation();\n    }\n\n    /**\n     * 创建一个 <code>RigidBody3D</code> 实例。\n     * @param collisionGroup 所属碰撞组。\n     * @param canCollideWith 可产生碰撞的碰撞组。\n     */\n    constructor(collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\n        //LinkedConstraints = new List<Constraint>();\n        super(collisionGroup, canCollideWith);\n        this._controlBySimulation = true;\n    }\n\n    /**\n     * @internal\n     */\n    private _updateMass(mass: number): void {\n        if (this._btColliderObject && this._colliderShape && this._colliderShape._btShape) {\n            var bt: any = ILaya3D.Physics3D._bullet;\n            bt.btCollisionShape_calculateLocalInertia(this._colliderShape._btShape, mass, Rigidbody3D._btInertia);\n            bt.btRigidBody_setMassProps(this._btColliderObject, mass, Rigidbody3D._btInertia);\n            bt.btRigidBody_updateInertiaTensor(this._btColliderObject); //this was the major headache when I had to debug Slider and Hinge constraint\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    protected _onScaleChange(scale: Vector3): void {\n        super._onScaleChange(scale);\n        this._updateMass(this._isKinematic ? 0 : this._mass);//修改缩放需要更新惯性\n    }\n\n    /**\n     * \t@internal\n     */\n    _derivePhysicsTransformation(force: boolean): void {\n        var bt = ILaya3D.Physics3D._bullet;\n        var btColliderObject = this._btColliderObject;\n        //btColliderObject 当前的trasform\n        var oriTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\n\n        // 临时transform\n        var transform = Rigidbody3D._btTransform0;//must use another transform\n\n        // transform = origTransform。 由于transform是公用的，下面的设置可能只是设置一部分，所以先完整拷贝一下当前的物理位置\n        bt.btTransform_equal(transform, oriTransform);\n        this._innerDerivePhysicsTransformation(transform, force);\n        bt.btRigidBody_setCenterOfMassTransform(btColliderObject, transform);//RigidBody use 'setCenterOfMassTransform' instead(influence interpolationWorldTransform and so on) ,or stepSimulation may return old transform because interpolation.\n    }\n\n    /**\n     * @internal\n     * @param motionid 设置的物理ID\n     */\n    _initRigidbody(motionid: number,) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var motionState: number = bt.layaMotionState_create();\n        bt.layaMotionState_set_rigidBodyID(motionState, motionid);\n        this._btLayaMotionState = motionState;\n        var constructInfo: number = bt.btRigidBodyConstructionInfo_create(0.0, motionState, null, Rigidbody3D._btVector3Zero);\n        var btRigid: number = bt.btRigidBody_create(constructInfo);\n        bt.btCollisionObject_setUserIndex(btRigid, this.id);\n        this._btColliderObject = btRigid;\n        bt.btRigidBodyConstructionInfo_destroy(constructInfo);\n    }\n\n    protected _onAdded(): void {\n        this._initRigidbody(this.id);\n        super._onAdded();\n        this.mass = this._mass;\n        this.linearFactor = this._linearFactor;\n        this.angularFactor = this._angularFactor;\n        this.linearDamping = this._linearDamping;\n        this.angularDamping = this._angularDamping;\n        this.overrideGravity = this._overrideGravity;\n        this.gravity = this._gravity;\n        this.isKinematic = this._isKinematic;\n    }\n\n    protected _onDestroy() {\n        ILaya3D.Physics3D._bullet.btMotionState_destroy(this._btLayaMotionState);\n\n        ////Remove constraints safely\n        //var toremove = new FastList<Constraint>();\n        //foreach (var c in LinkedConstraints)\n        //{\n        //toremove.Add(c);\n        //}\n\n        //foreach (var disposable in toremove)\n        //{\n        //disposable.Dispose();\n        //}\n\n        //LinkedConstraints.Clear();\n        ////~Remove constraints\n\n        super._onDestroy();\n        this._btLayaMotionState = null;\n        this._gravity = null;\n        this._totalTorque = null;\n        this._linearVelocity = null;\n        this._angularVelocity = null;\n        this._linearFactor = null;\n        this._angularFactor = null;\n    }\n\n    set colliderShape(value: ColliderShape) {\n        if (value instanceof MeshColliderShape) {\n            value = null;\n            console.error(\"RigidBody3D is not support MeshColliderShape\");\n        }\n        super.colliderShape = value;\n    }\n\n    /**\n    * 碰撞形状。\n    */\n    get colliderShape(): ColliderShape {\n        return this._colliderShape;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _onShapeChange(colShape: ColliderShape): void {\n        super._onShapeChange(colShape);\n        //TODO:此时已经加入场景,只影响mass为0,函数内部设置的flas是否为static无效\t\t\t\n        if (this.mass <= 0) return;\n        if (this._isKinematic) {\n            this._updateMass(0);\n        } else {\n            var bt: any = ILaya3D.Physics3D._bullet;\n            bt.btRigidBody_setCenterOfMassTransform(this._btColliderObject, bt.btCollisionObject_getWorldTransform(this._btColliderObject));//修改Shape会影响坐标,需要更新插值坐标,否则物理引擎motionState.setWorldTrans数据为旧数据\n            this._updateMass(this._mass);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any): void {\n        (data.friction != null) && (this.friction = data.friction);\n        (data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\n        (data.restitution != null) && (this.restitution = data.restitution);\n        (data.isTrigger != null) && (this.isTrigger = data.isTrigger);\n        (data.mass != null) && (this.mass = data.mass);\n        (data.linearDamping != null) && (this.linearDamping = data.linearDamping);\n        (data.angularDamping != null) && (this.angularDamping = data.angularDamping);\n        (data.overrideGravity != null) && (this.overrideGravity = data.overrideGravity);\n\n        if (data.linearFactor != null) {\n            var linFac = this.linearFactor;\n            linFac.fromArray(data.linearFactor);\n            this.linearFactor = linFac;\n        }\n        if (data.angularFactor != null) {\n            var angFac = this.angularFactor;\n            angFac.fromArray(data.angularFactor);\n            this.angularFactor = angFac;\n        }\n\n        if (data.gravity) {\n            this.gravity.fromArray(data.gravity);\n            this.gravity = this.gravity;\n        }\n        super._parse(data);\n        this._parseShape(data.shapes);\n        (data.isKinematic != null) && (this.isKinematic = data.isKinematic);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _addToSimulation(): void {\n        this._simulation._addRigidBody(this, this._collisionGroup, this._detectCollisions ? this._canCollideWith : 0);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _removeFromSimulation(): void {\n        this._simulation._removeRigidBody(this);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: Component): void {\n        super._cloneTo(dest);\n        var destRigidbody3D: Rigidbody3D = (<Rigidbody3D>dest);\n        destRigidbody3D.isKinematic = this._isKinematic;\n        destRigidbody3D.mass = this._mass;\n        destRigidbody3D.gravity = this._gravity;\n        destRigidbody3D.angularDamping = this._angularDamping;\n        destRigidbody3D.linearDamping = this._linearDamping;\n        destRigidbody3D.overrideGravity = this._overrideGravity;\n        //destRigidbody3D.totalTorque = _totalTorque;\n        destRigidbody3D.linearVelocity = this._linearVelocity;\n        destRigidbody3D.angularVelocity = this._angularVelocity;\n        destRigidbody3D.linearFactor = this._linearFactor;\n        destRigidbody3D.angularFactor = this._angularFactor;\n        destRigidbody3D.detectCollisions = this._detectCollisions;\n    }\n\n    /**\n     * 应用作用力。\n     * @param\tforce 作用力。\n     * @param\tlocalOffset 偏移,如果为null则为中心点\n     */\n    applyForce(force: Vector3, localOffset: Vector3 = null): void {\n        this.applyForceXYZ(force.x, force.y, force.z, localOffset);\n    }\n\n    /**\n     * 应用作用力\n     * @param fx \n     * @param fy \n     * @param fz \n     * @param localOffset \n     */\n    applyForceXYZ(fx: number, fy: number, fz: number, localOffset: Vector3 = null): void {\n        if (this._btColliderObject == null)\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btForce = Rigidbody3D._btTempVector30;\n        bt.btVector3_setValue(btForce, fx, fy, fz);\n        this.wakeUp();\n        if (localOffset) {\n            var btOffset: number = Rigidbody3D._btTempVector31;\n            bt.btVector3_setValue(btOffset, localOffset.x, localOffset.y, localOffset.z);\n            bt.btRigidBody_applyForce(this._btColliderObject, btForce, btOffset);\n        } else {\n            bt.btRigidBody_applyCentralForce(this._btColliderObject, btForce);\n        }\n    }\n\n    /**\n     * 设置物理标签\n     * @param flags \n     */\n    setCollisionFlags(flags: number) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var canInSimulation = !!(this._simulation && this._enabled);\n        //如果动态改变只能重新添加。否则world不能正确记录动态物体\n        canInSimulation && this._removeFromSimulation();\n        if (flags & 3) {\n            this._isKinematic = true;\n            this._simulation && this._updateMass(0)\n        } else {\n            this._simulation && this._updateMass(this._mass);\n        }\n        bt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags);\n        canInSimulation && this._addToSimulation();\n    }\n\n\n    /**\n     * 应用扭转力。\n     * @param\ttorque 扭转力。\n     */\n    applyTorque(torque: Vector3): void {\n        if (this._btColliderObject == null)\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\n        var bullet: any = ILaya3D.Physics3D._bullet;\n        var btTorque: number = Rigidbody3D._btTempVector30;\n        this.wakeUp();\n        bullet.btVector3_setValue(btTorque, torque.x, torque.y, torque.z);\n        bullet.btRigidBody_applyTorque(this._btColliderObject, btTorque);\n    }\n\n    /**\n     * 应用冲量。\n     * @param\timpulse 冲量。\n     * @param   localOffset 偏移,如果为null则为中心点。\n     */\n    applyImpulse(impulse: Vector3, localOffset: Vector3 = null): void {\n        if (this._btColliderObject == null)\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btVector3_setValue(Rigidbody3D._btImpulse, impulse.x, impulse.y, impulse.z);\n        this.wakeUp();\n        if (localOffset) {\n            bt.btVector3_setValue(Rigidbody3D._btImpulseOffset, localOffset.x, localOffset.y, localOffset.z);\n            bt.btRigidBody_applyImpulse(this._btColliderObject, Rigidbody3D._btImpulse, Rigidbody3D._btImpulseOffset);\n        } else {\n            bt.btRigidBody_applyCentralImpulse(this._btColliderObject, Rigidbody3D._btImpulse);\n        }\n    }\n\n    /**\n     * 应用扭转冲量。\n     * @param\ttorqueImpulse\n     */\n    applyTorqueImpulse(torqueImpulse: Vector3): void {\n        if (this._btColliderObject == null)\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\n        var bt: any = ILaya3D.Physics3D._bullet;\n        var btTorqueImpulse: number = Rigidbody3D._btTempVector30;\n        this.wakeUp();\n        bt.btVector3_setValue(btTorqueImpulse, torqueImpulse.x, torqueImpulse.y, torqueImpulse.z);\n        bt.btRigidBody_applyTorqueImpulse(this._btColliderObject, btTorqueImpulse);\n    }\n\n    /**\n     * 唤醒刚体。\n     */\n    wakeUp(): void {\n        this._btColliderObject && (ILaya3D.Physics3D._bullet.btCollisionObject_activate(this._btColliderObject, false));\n    }\n\n    /**\n     *清除应用到刚体上的所有力。\n     */\n    clearForces(): void {\n        var rigidBody: number = this._btColliderObject;\n        if (rigidBody == null)\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\n\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btRigidBody_clearForces(rigidBody);\n        var btZero: number = Rigidbody3D._btVector3Zero;\n        bt.btCollisionObject_setInterpolationLinearVelocity(rigidBody, btZero);\n        bt.btRigidBody_setLinearVelocity(rigidBody, btZero);\n        bt.btCollisionObject_setInterpolationAngularVelocity(rigidBody, btZero);\n        bt.btRigidBody_setAngularVelocity(rigidBody, btZero);\n    }\n\n}\n\n\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>StaticPlaneColliderShape</code> 类用于创建静态平面碰撞器。\n */\nexport class StaticPlaneColliderShape extends ColliderShape {\n\t/** @internal */\n\tprivate static _btNormal: number;\n\n\t/**@internal */\n\t_offset: number;\n\t/**@internal */\n\t_normal: Vector3;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tStaticPlaneColliderShape._btNormal = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\n\t}\n\n\t/**\n\t * 创建一个新的 <code>StaticPlaneColliderShape</code> 实例。\n\t */\n\tconstructor(normal: Vector3, offset: number) {\n\t\tsuper();\n\t\tthis._normal = normal;\n\t\tthis._offset = offset;\n\t\tthis._type = ColliderShape.SHAPETYPES_STATICPLANE;\n\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\n\t\tbt.btVector3_setValue(StaticPlaneColliderShape._btNormal, -normal.x, normal.y, normal.z);\n\t\tthis._btShape = bt.btStaticPlaneShape_create(StaticPlaneColliderShape._btNormal, offset);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: StaticPlaneColliderShape = new StaticPlaneColliderShape(this._normal, this._offset);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","import { CharacterController } from \"./physics/CharacterController\";\nimport { PhysicsComponent } from \"./physics/PhysicsComponent\";\nimport { PhysicsSimulation } from \"./physics/PhysicsSimulation\";\nimport { Rigidbody3D } from \"./physics/Rigidbody3D\";\nimport { BoxColliderShape } from \"./physics/shape/BoxColliderShape\";\nimport { ColliderShape } from \"./physics/shape/ColliderShape\";\nimport { CompoundColliderShape } from \"./physics/shape/CompoundColliderShape\";\nimport { CylinderColliderShape } from \"./physics/shape/CylinderColliderShape\";\nimport { StaticPlaneColliderShape } from \"./physics/shape/StaticPlaneColliderShape\";\n\n\n/**\n * Laya物理类\n * internal\n */\nexport class Physics3D {\n    /**@internal */\n    static _bullet: any = null;\n    /**@internal */\n    static _cannon:any = null;\n    /**@internal */\n    static _enablePhysics: Boolean = false;\n\n    /**@internal */\n    static __bulletinit__(){\n        this._bullet = (window as any).Physics3D;\n        if(this._bullet){\n            StaticPlaneColliderShape.__init__();\n            ColliderShape.__init__();\n            CompoundColliderShape.__init__();\n            PhysicsComponent.__init__();\n            PhysicsSimulation.__init__();\n            BoxColliderShape.__init__();\n            CylinderColliderShape.__init__();\n            CharacterController.__init__();\n            Rigidbody3D.__init__();\n        }   \n    }\n}","import { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\nimport { Keyframe } from \"../core/Keyframe\"\n\n/**\n * @internal\n */\nexport class KeyframeNode {\n\tprivate _ownerPath: string[] = [];\n\tprivate _propertys: string[] = [];\n\n\t/**@internal */\n\t_keyFrames: Keyframe[] = [];\n\t/**@internal */\n\t_indexInList: number;\n\n\t/**@internal */\n\ttype: KeyFrameValueType;\n\t/**@internal */\n\tfullPath: string;\n\t/**@internal */\n\tnodePath: string;\n\t/**@internal */\n\tpropertyOwner: string;\n\n\t/**\n\t * 精灵路径个数。\n\t */\n\tget ownerPathCount(): number {\n\t\treturn this._ownerPath.length;\n\t}\n\n\t/**\n\t * 属性路径个数。\n\t */\n\tget propertyCount(): number {\n\t\treturn this._propertys.length;\n\t}\n\n\t/**\n\t * 帧个数。\n\t */\n\tget keyFramesCount(): number {\n\t\treturn this._keyFrames.length;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setOwnerPathCount(value: number): void {\n\t\tthis._ownerPath.length = value;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setOwnerPathByIndex(index: number, value: string): void {\n\t\tthis._ownerPath[index] = value;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_joinOwnerPath(sep: string): string {\n\t\treturn this._ownerPath.join(sep);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setPropertyCount(value: number): void {\n\t\tthis._propertys.length = value;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setPropertyByIndex(index: number, value: string): void {\n\t\tthis._propertys[index] = value;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_joinProperty(sep: string): string {\n\t\treturn this._propertys.join(sep);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setKeyframeCount(value: number): void {\n\t\tthis._keyFrames.length = value;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setKeyframeByIndex(index: number, value: Keyframe): void {\n\t\tthis._keyFrames[index] = value;\n\t}\n\n\t/**\n\t * 通过索引获取精灵路径。\n\t * @param index 索引。\n\t */\n\tgetOwnerPathByIndex(index: number): string {\n\t\treturn this._ownerPath[index];\n\t}\n\n\t/**\n\t * 通过索引获取属性路径。\n\t * @param index 索引。\n\t */\n\tgetPropertyByIndex(index: number): string {\n\t\treturn this._propertys[index];\n\t}\n\n\t/**\n\t * 通过索引获取帧。\n\t * @param index 索引。\n\t */\n\tgetKeyframeByIndex(index: number): Keyframe {\n\t\treturn this._keyFrames[index];\n\t}\n}","/**\n * <code>AnimationEvent</code> 类用于实现动画事件。\n */\nexport class AnimationEvent {\n\t/** 事件触发时间。*/\n\ttime: number;\n\t/** 事件触发名称。*/\n\teventName: string;\n\t/** 事件触发参数。*/\n\tparams: any[];\n\n\t/**\n\t * 创建一个 <code>AnimationEvent</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n}\n\n\n","import { IClone } from \"../../utils/IClone\";\n/**\n * 动画权重模式\n */\n export enum WeightedMode {\n\t\n\t\n\tNone = 0,\n\tIn = 1,\n\tOut = 2,\n\tBoth = 3,\n}\n/**\n * <code>KeyFrame</code> 类用于创建关键帧实例。\n */\nexport class Keyframe implements IClone {\n\tstatic defaultWeight:number = 0.33333;\n\t/**时间。*/\n\ttime: number;\n\n\t/**\n\t * 创建一个 <code>KeyFrame</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destKeyFrame: Keyframe = (<Keyframe>destObject);\n\t\tdestKeyFrame.time = this.time;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar dest: Keyframe = new Keyframe();\n\t\t\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","import { Keyframe, WeightedMode } from \"./Keyframe\";\n/**\n\t * <code>FloatKeyFrame</code> 类用于创建浮点关键帧实例。\n\t */\nexport class FloatKeyframe extends Keyframe {\n\t/**内切线 */\n\tinTangent: number;\n\t/**外切线 */\n\toutTangent: number;\n\t/**帧数据 */\n\tvalue: number;\n\t/**内权重 */\n\tinWeight: number = Keyframe.defaultWeight;\n\t/**外权重 */\n\toutWeight: number = Keyframe.defaultWeight;\n\t/**权重模式 */\n\tweightedMode: number = WeightedMode.None;\n\n\t/**\n\t * 创建一个 <code>FloatKeyFrame</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * 克隆数据\n\t * @inheritDoc\n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tsuper.cloneTo(destObject);\n\t\tvar destKeyFrame: FloatKeyframe = (<FloatKeyframe>destObject);\n\t\tdestKeyFrame.inTangent = this.inTangent;\n\t\tdestKeyFrame.outTangent = this.outTangent;\n\t\tdestKeyFrame.value = this.value;\n\t\tdestKeyFrame.inTangent = this.inTangent;\n\t\tdestKeyFrame.outTangent = this.outTangent;\n\t\tdestKeyFrame.value = this.value;\n\t\tdestKeyFrame.inWeight = this.inWeight;\n\t\tdestKeyFrame.outWeight = this.outWeight;\n\t\tdestKeyFrame.weightedMode = this.weightedMode;\n\t}\n\n\tclone(): FloatKeyframe {\n\t\tlet f = new FloatKeyframe();\n\t\tthis.cloneTo(f);\n\t\treturn f;\n\t}\n\n}\n\n\n","import { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { Keyframe } from \"./Keyframe\";\n\n/**\n * <code>QuaternionKeyframe</code> 类用于创建四元数关键帧实例。\n */\nexport class QuaternionKeyframe extends Keyframe {\n\t/**内切线 */\n\tinTangent: Vector4 = new Vector4();\n\t/**外切线 */\n\toutTangent: Vector4 = new Vector4();\n\t/**帧数据 */\n\tvalue: Quaternion = new Quaternion();\n\t/**内权重 */\n\tinWeight: Vector4 = new Vector4();\n\t/**外权重 */\n\toutWeight: Vector4 = new Vector4();\n\t/**权重模式*/\n\tweightedMode: Vector4 = new Vector4();\n\n\t/**\n\t * 创建一个 <code>QuaternionKeyframe</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t * @override\n\t */\n\tcloneTo(dest: any): void {\n\t\tsuper.cloneTo(dest);\n\t\tvar destKeyFarme: QuaternionKeyframe = (<QuaternionKeyframe>dest);\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\n\t\tthis.value.cloneTo(destKeyFarme.value);\n\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\n\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\n\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\n\t}\n}\n\n","import { Vector3 } from \"../../maths/Vector3\";\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\n\n/**\n * <code>Vector3Keyframe</code> 类用于创建三维向量关键帧实例。\n */\nexport class Vector3Keyframe extends Keyframe {\n\t/**内切线 */\n\tinTangent: Vector3 = new Vector3();\n\t/**外切线 */\n\toutTangent: Vector3 = new Vector3();\n\t/**帧数据 */\n\tvalue: Vector3 = new Vector3();\n\t/**内权重 */\n\tinWeight: Vector3 = new Vector3(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\n\t/**外权重 */\n\toutWeight: Vector3 = new Vector3(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\n\t/**权重模式 */\n\tweightedMode: Vector3 = new Vector3(WeightedMode.None, WeightedMode.None, WeightedMode.None);\n\n\n\t/**\n\t * 创建一个 <code>Vector3Keyframe</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t * @override\n\t */\n\tcloneTo(dest: any): void {\n\t\tsuper.cloneTo(dest);\n\t\tvar destKeyFarme: Vector3Keyframe = (<Vector3Keyframe>dest);\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\n\t\tthis.value.cloneTo(destKeyFarme.value);\n\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\n\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\n\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\n\t}\n}","import { KeyframeNode } from \"./KeyframeNode\";\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\nimport { Byte } from \"../../utils/Byte\"\nimport { AnimationClip } from \"./AnimationClip\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n/**\n * @internal\n */\nexport class AnimationClipParser03 {\n\tprivate static _animationClip: AnimationClip;\n\tprivate static _reader: Byte;\n\tprivate static _strings: any[] = [];\n\tprivate static _BLOCK: any = { count: 0 };\n\tprivate static _DATA: any = { offset: 0, size: 0 };\n\n\tprivate static READ_DATA(): void {\n\t\tAnimationClipParser03._DATA.offset = AnimationClipParser03._reader.getUint32();\n\t\tAnimationClipParser03._DATA.size = AnimationClipParser03._reader.getUint32();\n\t}\n\n\tprivate static READ_BLOCK(): void {\n\t\tvar count: number = AnimationClipParser03._BLOCK.count = AnimationClipParser03._reader.getUint16();\n\t\tvar blockStarts: any[] = AnimationClipParser03._BLOCK.blockStarts = [];\n\t\tvar blockLengths: any[] = AnimationClipParser03._BLOCK.blockLengths = [];\n\t\tfor (var i: number = 0; i < count; i++) {\n\t\t\tblockStarts.push(AnimationClipParser03._reader.getUint32());\n\t\t\tblockLengths.push(AnimationClipParser03._reader.getUint32());\n\t\t}\n\t}\n\n\tprivate static READ_STRINGS(): void {\n\t\tvar offset: number = AnimationClipParser03._reader.getUint32();\n\t\tvar count: number = AnimationClipParser03._reader.getUint16();\n\t\tvar prePos: number = AnimationClipParser03._reader.pos;\n\t\tAnimationClipParser03._reader.pos = offset + AnimationClipParser03._DATA.offset;\n\n\t\tfor (var i: number = 0; i < count; i++)\n\t\t\tAnimationClipParser03._strings[i] = AnimationClipParser03._reader.readUTFString();\n\t\tAnimationClipParser03._reader.pos = prePos;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic parse(clip: AnimationClip, reader: Byte): void {\n\t\tAnimationClipParser03._animationClip = clip;\n\t\tAnimationClipParser03._reader = reader;\n\t\n\t\tAnimationClipParser03.READ_DATA();\n\t\tAnimationClipParser03.READ_BLOCK();\n\t\tAnimationClipParser03.READ_STRINGS();\n\t\tfor (var i: number = 0, n: number = AnimationClipParser03._BLOCK.count; i < n; i++) {\n\t\t\tvar index: number = reader.getUint16();\n\t\t\tvar blockName: string = AnimationClipParser03._strings[index];\n\t\t\tvar fn:()=>void = (AnimationClipParser03 as any)[\"READ_\" + blockName];\n\t\t\tif (fn == null)\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\n\t\t\telse\n\t\t\t\tfn.call(null);\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic READ_ANIMATIONS(): void {\n\t\tvar i: number, j: number;\n\t\tvar node: KeyframeNode;\n\t\tvar reader: Byte = AnimationClipParser03._reader;\n\n\t\tvar startTimeTypes: number[] = [];\n\t\tvar startTimeTypeCount: number = reader.getUint16();\n\t\tstartTimeTypes.length = startTimeTypeCount;\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\n\n\t\tvar clip: AnimationClip = AnimationClipParser03._animationClip;\n\t\tclip.name = AnimationClipParser03._strings[reader.getUint16()];\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\n\t\tclip.islooping = !!reader.getByte();\n\t\tclip._frameRate = reader.getInt16();\n\t\tvar nodeCount: number = reader.getInt16();\n\t\tvar nodes = clip._nodes;\n\t\t(nodes as KeyframeNodeList).count = nodeCount;\n\t\tvar nodesMap: any = clip._nodesMap = {};\n\t\tvar nodesDic: any = clip._nodesDic = {};\n\n\t\tfor (i = 0; i < nodeCount; i++) {\n\t\t\tnode = new KeyframeNode();\n\t\t\t(nodes as KeyframeNodeList).setNodeByIndex(i, node);\n\t\t\tnode._indexInList = i;\n\t\t\tvar type: number = node.type = reader.getUint8();\n\n\t\t\tvar pathLength: number = reader.getUint16();\n\t\t\tnode._setOwnerPathCount(pathLength);\n\t\t\tfor (j = 0; j < pathLength; j++)\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\n\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\n\t\t\tmapArray.push(node);\n\n\t\t\tnode.propertyOwner = AnimationClipParser03._strings[reader.getUint16()];\n\n\t\t\tvar propertyLength: number = reader.getUint16();\n\t\t\tnode._setPropertyCount(propertyLength);\n\t\t\tfor (j = 0; j < propertyLength; j++)\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);\n\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\n\t\t\tnodesDic[fullPath] = node;\n\t\t\tnode.fullPath = fullPath;\n\n\t\t\tvar keyframeCount: number = reader.getUint16();\n\t\t\tnode._setKeyframeCount(keyframeCount);\n\n\t\t\tfor (j = 0; j < keyframeCount; j++) {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\n\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\n\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\n\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\tcase 3:\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\n\n\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\n\n\n\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\n\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\n\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\n\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\n\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\n\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\n\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\n\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\n\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\n\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\n\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\n\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tvar quaArrayKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaArrayKeyframe);\n\t\t\t\t\t\tquaArrayKeyframe.time = startTimeTypes[reader.getUint16()];\n\n\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaArrayKeyframe.inTangent;\n\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaArrayKeyframe.outTangent;\n\t\t\t\t\t\t\tvar valueQua: Quaternion = quaArrayKeyframe.value;\n\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\n\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\n\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\n\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\n\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\n\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\n\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\n\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\n\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\n\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\n\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\n\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow \"AnimationClipParser03:unknown type.\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar eventCount: number = reader.getUint16();\n\t\tfor (i = 0; i < eventCount; i++) {\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\n\t\t\tevent.eventName = AnimationClipParser03._strings[reader.getUint16()];\n\t\t\tvar params: Array<number|boolean|string> = [];\n\t\t\tvar paramCount: number = reader.getUint16();\n\t\t\t(paramCount > 0) && (event.params = params = []);\n\n\t\t\tfor (j = 0; j < paramCount; j++) {\n\t\t\t\tvar eventType: number = reader.getByte();\n\t\t\t\tswitch (eventType) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tparams.push(!!reader.getByte());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tparams.push(reader.getInt32());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tparams.push(reader.getFloat32());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tparams.push(AnimationClipParser03._strings[reader.getUint16()]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addEvent(event);\n\t\t}\n\t}\n}\n\n","import { Vector2 } from \"../../maths/Vector2\";\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\n\n\n/**\n * <code>Vector2Keyframe</code> 类用于创建三维向量关键帧实例。\n */\nexport class Vector2Keyframe extends Keyframe {\n\t/**内切线 */\n\tinTangent: Vector2 = new Vector2();\n\t/**外切线 */\n\toutTangent: Vector2 = new Vector2();\n\t/**帧数据 */\n\tvalue: Vector2 = new Vector2();\n\t/**内权重 */\n\tinWeight: Vector2 = new Vector2(Keyframe.defaultWeight, Keyframe.defaultWeight);\n\t/**外权重 */\n\toutWeight: Vector2 = new Vector2(Keyframe.defaultWeight, Keyframe.defaultWeight);\n\t/**权重模式 */\n\tweightedMode: Vector2 = new Vector2(WeightedMode.None, WeightedMode.None);\n\n\n\t/**\n\t * 创建一个 <code>Vector2Keyframe</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t * @override\n\t */\n\tcloneTo(dest: any): void {\n\t\tsuper.cloneTo(dest);\n\t\tvar destKeyFarme: Vector2Keyframe = (<Vector2Keyframe>dest);\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\n\t\tthis.value.cloneTo(destKeyFarme.value);\n\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\n\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\n\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\n\t}\n}\n","import { Vector4 } from \"../../maths/Vector4\";\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\n\n\n/**\n * <code>Vector4Keyframe</code> 类用于创建三维向量关键帧实例。\n */\nexport class Vector4Keyframe extends Keyframe {\n\t/**内切线 */\n\tinTangent: Vector4 = new Vector4();\n\t/**外切线 */\n\toutTangent: Vector4 = new Vector4();\n\t/**帧数据 */\n\tvalue: Vector4 = new Vector4();\n\t/**内权重 */\n\tinWeight: Vector4 = new Vector4(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\n\t/**外权重 */\n\toutWeight: Vector4 = new Vector4(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight,Keyframe.defaultWeight);\n\t/**权重模式 */\n\tweightedMode: Vector4 = new Vector4(WeightedMode.None, WeightedMode.None, WeightedMode.None,WeightedMode.None);\n\n\n\t/**\n\t * 创建一个 <code>Vector4Keyframe</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t * @override\n\t */\n\tcloneTo(dest: any): void {\n\t\tsuper.cloneTo(dest);\n\t\tvar destKeyFarme: Vector4Keyframe = (<Vector4Keyframe>dest);\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\n\t\tthis.value.cloneTo(destKeyFarme.value);\n\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\n\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\n\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\n\t}\n}","import { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\nexport enum KeyFrameValueType {\n\tFloat = 0,\n\tPosition = 1,\n\tRotation = 2,\n\tScale = 3,\n\tRotationEuler = 4,\n\tVector2 = 5,\n\tVector3 = 6,\n\tVector4 = 7,\n\tColor = 8\n}\n/**\n * @internal\n * <code>KeyframeNodeOwner</code> 类用于保存帧节点的拥有者信息。\n */\nexport class KeyframeNodeOwner {\n\t/**@internal */\n\tindexInList: number = -1;\n\t/**@internal */\n\treferenceCount: number = 0;\n\t/**@internal */\n\tupdateMark: number = -1;\n\n\t/**@internal 0 float,1 position,2 rotation,3 Scale,4 rotationEuler*/\n\ttype: KeyFrameValueType = -1;\n\t/**@internal */\n\tfullPath: string | null = null;\n\tnodePath: string | null = null;\n\t/**@internal */\n\tpropertyOwner: any = null;\n\t/**@internal */\n\tproperty: string[] | null = null;\n\t/**@internal */\n\tdefaultValue: any = null;\n\t/**@internal */\n\tvalue: any = null;\n\t/**@internal */\n\tcrossFixedValue: any = null;\n\t/**@internal */\n\tisMaterial: boolean = false;\n\n\t/**\n\t * 创建一个 <code>KeyframeNodeOwner</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tsaveCrossFixedValue(): void {\n\t\tvar pro: any = this.propertyOwner;\n\t\tif (pro) {\n\t\t\tswitch (this.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.crossFixedValue = this.value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\tcase 3:\n\t\t\t\tcase 4:\n\t\t\t\t\t(<Vector3>this.value).cloneTo(this.crossFixedValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t(<Quaternion>this.value).cloneTo(this.crossFixedValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow \"Animator:unknown type.\";\n\t\t\t}\n\n\t\t}\n\t}\n\n}\n\n\n","import { KeyframeNode } from \"./KeyframeNode\";\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\nimport { AnimationClip } from \"./AnimationClip\";\nimport { Byte } from \"../../utils/Byte\";\nimport { HalfFloatUtils } from \"../../utils/HalfFloatUtils\";\nimport { Vector2Keyframe } from \"../core/Vector2Keyframe\";\nimport { Vector4Keyframe } from \"../core/Vector4Keyframe\";\nimport { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n/**\n * @internal\n */\nexport class AnimationClipParser04 {\n\tprivate static _animationClip: AnimationClip | null;\n\tprivate static _reader: Byte | null;\n\tprivate static _strings: any[] = [];\n\tprivate static _BLOCK: any = { count: 0 };\n\tprivate static _DATA: any = { offset: 0, size: 0 };\n\tprivate static _version: string | null;\n\n\tprivate static READ_DATA(): void {\n\t\tAnimationClipParser04._DATA.offset = AnimationClipParser04._reader!.getUint32();\n\t\tAnimationClipParser04._DATA.size = AnimationClipParser04._reader!.getUint32();\n\t}\n\n\tprivate static READ_BLOCK(): void {\n\t\tvar count: number = AnimationClipParser04._BLOCK.count = AnimationClipParser04._reader!.getUint16();\n\t\tvar blockStarts: any[] = AnimationClipParser04._BLOCK.blockStarts = [];\n\t\tvar blockLengths: any[] = AnimationClipParser04._BLOCK.blockLengths = [];\n\t\tfor (var i: number = 0; i < count; i++) {\n\t\t\tblockStarts.push(AnimationClipParser04._reader!.getUint32());\n\t\t\tblockLengths.push(AnimationClipParser04._reader!.getUint32());\n\t\t}\n\t}\n\n\tprivate static READ_STRINGS(): void {\n\t\tvar offset: number = AnimationClipParser04._reader!.getUint32();\n\t\tvar count: number = AnimationClipParser04._reader!.getUint16();\n\t\tvar prePos: number = AnimationClipParser04._reader!.pos;\n\t\tAnimationClipParser04._reader!.pos = offset + AnimationClipParser04._DATA.offset;\n\n\t\tfor (var i: number = 0; i < count; i++)\n\t\t\tAnimationClipParser04._strings[i] = AnimationClipParser04._reader!.readUTFString();\n\t\tAnimationClipParser04._reader!.pos = prePos;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic parse(clip: AnimationClip, reader: Byte, version: string): void {\n\t\tAnimationClipParser04._animationClip = clip;\n\t\tAnimationClipParser04._reader = reader;\n\t\tAnimationClipParser04._version = version;\n\t\tAnimationClipParser04.READ_DATA();\n\t\tAnimationClipParser04.READ_BLOCK();\n\t\tAnimationClipParser04.READ_STRINGS();\n\t\tfor (var i: number = 0, n: number = AnimationClipParser04._BLOCK.count; i < n; i++) {\n\t\t\tvar index: number = reader.getUint16();\n\t\t\tvar blockName: string = AnimationClipParser04._strings[index];\n\t\t\tvar fn: () => void = (AnimationClipParser04 as any)[\"READ_\" + blockName];\n\t\t\tif (fn == null)\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\n\t\t\telse\n\t\t\t\tfn.call(null);\n\t\t}\n\t\tAnimationClipParser04._version = null;\n\t\tAnimationClipParser04._reader = null;\n\t\tAnimationClipParser04._animationClip = null;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic READ_ANIMATIONS(): void {\n\t\tvar i: number, j: number;\n\t\tvar node: KeyframeNode;\n\t\tvar reader: Byte = AnimationClipParser04._reader!;\n\n\t\tvar startTimeTypes: number[] = [];\n\t\tvar startTimeTypeCount: number = reader.getUint16();\n\t\tstartTimeTypes.length = startTimeTypeCount;\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\n\n\t\tvar clip: AnimationClip = AnimationClipParser04._animationClip!;\n\t\tclip.name = AnimationClipParser04._strings[reader.getUint16()];\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\n\t\tclip.islooping = !!reader.getByte();\n\t\tclip._frameRate = reader.getInt16();\n\t\tvar nodeCount: number = reader.getInt16();\n\t\tvar nodes: KeyframeNodeList = clip._nodes!;\n\t\tnodes.count = nodeCount;\n\t\tvar nodesMap: any = clip._nodesMap = {};\n\t\tvar nodesDic: any = clip._nodesDic = {};\n\n\t\tfor (i = 0; i < nodeCount; i++) {\n\t\t\tnode = new KeyframeNode();\n\t\t\tnodes.setNodeByIndex(i, node);\n\t\t\tnode._indexInList = i;\n\t\t\tvar type: number = node.type = reader.getUint8();\n\n\t\t\tvar pathLength: number = reader.getUint16();\n\t\t\tnode._setOwnerPathCount(pathLength);\n\t\t\tfor (j = 0; j < pathLength; j++)\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\n\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\n\t\t\tmapArray.push(node);\n\n\t\t\tnode.propertyOwner = AnimationClipParser04._strings[reader.getUint16()];\n\n\t\t\tvar propertyLength: number = reader.getUint16();\n\t\t\tnode._setPropertyCount(propertyLength);\n\t\t\tfor (j = 0; j < propertyLength; j++)\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);\n\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\n\t\t\tnodesDic[fullPath] = node;\n\t\t\tnode.fullPath = fullPath;\n\t\t\tnode.nodePath = nodePath;\n\n\t\t\tvar keyframeCount: number = reader.getUint16();\n\t\t\tnode._setKeyframeCount(keyframeCount);\n\t\t\tswitch (AnimationClipParser04._version) {\n\t\t\t\tcase \"LAYAANIMATION:04\":\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\n\t\t\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\n\t\t\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\n\t\t\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\n\t\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\n\t\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\n\t\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\n\t\t\t\t\t\t\t\tvar quaternionKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaternionKeyframe.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaternionKeyframe.outTangent;\n\t\t\t\t\t\t\t\tvar valueQua: Quaternion = quaternionKeyframe.value;\n\t\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\n\t\t\t\t\t\t\t\tinTangentV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\n\t\t\t\t\t\t\t\tinTangentV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV4.w = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"LAYAANIMATION:WEIGHT_04\":\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\n\t\t\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\n\t\t\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\n\t\t\t\t\t\t\t\tfloatKeyframe.weightedMode = reader.getUint8();\n\t\t\t\t\t\t\t\tfloatKeyframe.inWeight = reader.getFloat32();\n\t\t\t\t\t\t\t\tfloatKeyframe.outWeight = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\n\t\t\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\n\t\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\n\t\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\n\t\t\t\t\t\t\t\tlet weidhtMode = floatArrayKeyframe.weightedMode;\n\t\t\t\t\t\t\t\tlet inWeight = floatArrayKeyframe.inWeight;\n\t\t\t\t\t\t\t\tlet outWeight = floatArrayKeyframe.outWeight;\n\t\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tweidhtMode.x = reader.getUint8();\n\t\t\t\t\t\t\t\tweidhtMode.y = reader.getUint8();\n\t\t\t\t\t\t\t\tweidhtMode.z = reader.getUint8();\n\t\t\t\t\t\t\t\tinWeight.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeight.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeight.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeight.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeight.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeight.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\n\t\t\t\t\t\t\t\tvar quaternionKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaternionKeyframe.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaternionKeyframe.outTangent;\n\t\t\t\t\t\t\t\tvar valueQua: Quaternion = quaternionKeyframe.value;\n\t\t\t\t\t\t\t\tlet weightModeV4 = quaternionKeyframe.weightedMode;\n\t\t\t\t\t\t\t\tlet inWeightQua = quaternionKeyframe.inWeight;\n\t\t\t\t\t\t\t\tlet outWeightQua = quaternionKeyframe.outWeight;\n\t\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tweightModeV4.x = reader.getUint8();\n\t\t\t\t\t\t\t\tweightModeV4.y = reader.getUint8();\n\t\t\t\t\t\t\t\tweightModeV4.z = reader.getUint8();\n\t\t\t\t\t\t\t\tweightModeV4.w = reader.getUint8();\n\t\t\t\t\t\t\t\tinWeightQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeightQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeightQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeightQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightQua.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightQua.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightQua.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightQua.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\n\t\t\t\t\t\t\t\tlet weightModeV2 = vec2Keyfram.weightedMode;\n\t\t\t\t\t\t\t\tlet inWeightV2 = vec2Keyfram.inWeight;\n\t\t\t\t\t\t\t\tlet outWeightV2 = vec2Keyfram.outWeight;\n\t\t\t\t\t\t\t\tinTangentV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tweightModeV2.x = reader.getUint8();\n\t\t\t\t\t\t\t\tweightModeV2.y = reader.getUint8();\n\t\t\t\t\t\t\t\tinWeightV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeightV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightV2.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightV2.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\n\t\t\t\t\t\t\t\tvar weightMode_V4 = vec4Keyfram.weightedMode;\n\t\t\t\t\t\t\t\tvar inWeightV4 = vec4Keyfram.inWeight;\n\t\t\t\t\t\t\t\tvar outWeightV4 = vec4Keyfram.outWeight;\n\t\t\t\t\t\t\t\tinTangentV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tinTangentV4.w = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutTangentV4.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tvalueV4.w = reader.getFloat32();\n\n\t\t\t\t\t\t\t\tweightMode_V4.x = reader.getUint8();\n\t\t\t\t\t\t\t\tweightMode_V4.y = reader.getUint8();\n\t\t\t\t\t\t\t\tweightMode_V4.z = reader.getUint8();\n\t\t\t\t\t\t\t\tweightMode_V4.w = reader.getUint8();\n\t\t\t\t\t\t\t\tinWeightV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeightV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeightV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\tinWeightV4.w = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightV4.x = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightV4.y = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightV4.z = reader.getFloat32();\n\t\t\t\t\t\t\t\toutWeightV4.w = reader.getFloat32();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\n\t\t\t\t\t\t\t\tfloatKeyframe = new FloatKeyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tfloatKeyframe.value = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\n\t\t\t\t\t\t\t\tfloatArrayKeyframe = new Vector3Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\n\n\t\t\t\t\t\t\t\tinTangent = floatArrayKeyframe.inTangent;\n\t\t\t\t\t\t\t\toutTangent = floatArrayKeyframe.outTangent;\n\t\t\t\t\t\t\t\tvalue = floatArrayKeyframe.value;\n\t\t\t\t\t\t\t\tinTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalue.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalue.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalue.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\n\t\t\t\t\t\t\t\tquaternionKeyframe = new QuaternionKeyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\n\n\t\t\t\t\t\t\t\tinTangentQua = quaternionKeyframe.inTangent;\n\t\t\t\t\t\t\t\toutTangentQua = quaternionKeyframe.outTangent;\n\t\t\t\t\t\t\t\tvalueQua = quaternionKeyframe.value;\n\t\t\t\t\t\t\t\tinTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\n\t\t\t\t\t\t\t\tinTangentV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangentV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe();\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\n\t\t\t\t\t\t\t\tinTangentV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangentV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangentV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tinTangentV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\toutTangentV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tvalueV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\tvar eventCount: number = reader.getUint16();\n\t\tfor (i = 0; i < eventCount; i++) {\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\n\t\t\tevent.eventName = AnimationClipParser04._strings[reader.getUint16()];\n\t\t\tvar params: Array<number | string | boolean> = [];\n\t\t\tvar paramCount: number = reader.getUint16();\n\t\t\t(paramCount > 0) && (event.params = params = []);\n\n\t\t\tfor (j = 0; j < paramCount; j++) {\n\t\t\t\tvar eventType: number = reader.getByte();\n\t\t\t\tswitch (eventType) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tparams.push(!!reader.getByte());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tparams.push(reader.getInt32());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tparams.push(reader.getFloat32());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tparams.push(AnimationClipParser04._strings[reader.getUint16()]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addEvent(event);\n\t\t}\n\t}\n}\n\n","import { KeyframeNode } from \"./KeyframeNode\";\n\n/**\n * @internal\n * <code>KeyframeNodeList</code> 类用于创建KeyframeNode节点队列。\n */\nexport class KeyframeNodeList {\n\t/** @internal */\n\tprivate _nodes: KeyframeNode[] = [];\n\n\t/**\n\t *\t节点个数。\n\t */\n\tget count(): number {\n\t\treturn this._nodes.length;\n\t}\n\n\tset count(value: number) {\n\t\tthis._nodes.length = value;\n\t}\n\n\t/**\n\t * 创建一个 <code>KeyframeNodeList</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n\t/**\n\t * 通过索引获取节点。\n\t * @param\tindex 索引。\n\t * @return 节点。\n\t */\n\tgetNodeByIndex(index: number): KeyframeNode {\n\t\treturn this._nodes[index];\n\t}\n\n\t/**\n\t * 通过索引设置节点。\n\t * @param\tindex 索引。\n\t * @param 节点。\n\t */\n\tsetNodeByIndex(index: number, node: KeyframeNode): void {\n\t\tthis._nodes[index] = node;\n\t}\n\n}\n","import { AnimationClipParser03 } from \"./AnimationClipParser03\";\nimport { AnimationClipParser04 } from \"./AnimationClipParser04\";\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\nimport { Utils3D } from \"../utils/Utils3D\"\nimport { Resource } from \"../../resource/Resource\"\nimport { Byte } from \"../../utils/Byte\"\nimport { Handler } from \"../../utils/Handler\"\nimport { ILaya } from \"../../../ILaya\";\nimport { WeightedMode } from \"../core/Keyframe\";\nimport { Loader } from \"../../net/Loader\";\nimport { Vector2Keyframe } from \"../core/Vector2Keyframe\";\nimport { Vector4Keyframe } from \"../core/Vector4Keyframe\";\nimport { AvatarMask } from \"../component/Animator/AvatarMask\";\nimport { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n/**\n * <code>AnimationClip</code> 类用于动画片段资源。\n */\nexport class AnimationClip extends Resource {\n\n\t/**@internal\t*/\n\tstatic _tempQuaternion0: Quaternion = new Quaternion();\n\n\t/**\n\t * @inheritDoc\n\t * @internal\n\t */\n\tstatic _parse(data: any): AnimationClip {\n\t\tvar clip = new AnimationClip();\n\t\tvar reader = new Byte(data);\n\t\tvar version = reader.readUTFString();\n\t\tswitch (version) {\n\t\t\tcase \"LAYAANIMATION:03\":\n\t\t\t\tAnimationClipParser03.parse(clip, reader);\n\t\t\t\tbreak;\n\t\t\tcase \"LAYAANIMATION:04\":\n\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\n\t\t\tcase \"LAYAANIMATION:WEIGHT_04\":\n\t\t\t\tAnimationClipParser04.parse(clip, reader, version);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"unknown animationClip version.\";\n\t\t}\n\t\treturn clip;\n\t}\n\n\t/**\n\t * 加载动画片段。\n\t * @param url 动画片段地址。\n\t * @param complete  完成回掉。load\n\t */\n\tstatic load(url: string, complete: Handler): void {\n\t\tILaya.loader.load(url, complete, null, Loader.ANIMATIONCLIP);\n\t}\n\n\t/**@internal */\n\t_duration: number = 0;\n\t/**@internal */\n\t_frameRate: number = 0;\n\t/**@internal */\n\t_nodes: KeyframeNodeList | null = new KeyframeNodeList();\n\t/**@internal */\n\t_nodesDic: any;\n\t/**@internal */\n\t_nodesMap: any;//TODO:去掉\n\t/** @internal */\n\t_animationEvents: AnimationEvent[];\n\n\t/**是否循环。*/\n\tislooping: boolean = false;\n\n\t/**\n\t * 动画持续时间\n\t * @returns 返回动画持续时间\n\t */\n\tduration(): number {\n\t\treturn this._duration;\n\t}\n\n\t/**\n\t * 创建一个 <code>AnimationClip</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._animationEvents = [];\n\t}\n\n\t/**\n\t * 是否是Weight模式\n\t * @param weightMode \n\t * @param nextweightMode \n\t * @returns true 此段动画插值使用埃尔米特插值\n\t */\n\tprivate _weightModeHermite(weightMode: number, nextweightMode: number): boolean {\n\t\treturn (((weightMode & WeightedMode.Out) == 0) && ((nextweightMode & WeightedMode.In) == 0));\n\t}\n\n\n\n\t/**\n\t * @internal\n\t */\n\tprivate _hermiteInterpolate(frame: FloatKeyframe, nextFrame: FloatKeyframe, t: number, dur: number): number {\n\t\tvar t0 = frame.outTangent, t1 = nextFrame.inTangent;\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1)) {\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\t\t\tvar b = t3 - 2.0 * t2 + t;\n\t\t\tvar c = t3 - t2;\n\t\t\tvar d = -2.0 * t3 + 3.0 * t2;\n\t\t\treturn a * frame.value + b * t0 * dur + c * t1 * dur + d * nextFrame.value;\n\t\t} else\n\t\t\treturn frame.value;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _hermiteInterpolateVector3(frame: Vector3Keyframe, nextFrame: Vector3Keyframe, t: number, dur: number, out: Vector3): void {\n\t\tvar p0 = frame.value;\n\t\tvar tan0 = frame.outTangent;\n\t\tvar p1 = nextFrame.value;\n\t\tvar tan1 = nextFrame.inTangent;\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\t\tvar b = t3 - 2.0 * t2 + t;\n\t\tvar c = t3 - t2;\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\n\n\t\tvar t0 = tan0.x, t1 = tan1.x;\n\t\tif (this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n\t\t\telse\n\t\t\t\tout.x = p0.x;\n\t\t} else {\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\n\t\t}\n\n\t\tt0 = tan0.y, t1 = tan1.y;\n\t\tif (this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n\t\t\telse\n\t\t\t\tout.y = p0.y;\n\t\t} else {\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\n\t\t}\n\n\t\tt0 = tan0.z, t1 = tan1.z;\n\t\tif (this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n\t\t\telse\n\t\t\t\tout.z = p0.z;\n\t\t} else {\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _hermiteInterpolateQuaternion(frame: QuaternionKeyframe, nextFrame: QuaternionKeyframe, t: number, dur: number, out: Quaternion): void {\n\t\tvar p0 = frame.value;\n\t\tvar tan0 = frame.outTangent;\n\t\tvar p1 = nextFrame.value;\n\t\tvar tan1 = nextFrame.inTangent;\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\t\tvar b = t3 - 2.0 * t2 + t;\n\t\tvar c = t3 - t2;\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\n\n\t\tvar t0 = tan0.x, t1 = tan1.x;\n\t\tif (this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n\t\t\telse\n\t\t\t\tout.x = p0.x;\n\t\t} else {\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\n\t\t}\n\n\n\t\tt0 = tan0.y, t1 = tan1.y;\n\t\tif (this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n\t\t\telse\n\t\t\t\tout.y = p0.y;\n\t\t} else {\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\n\t\t}\n\n\t\tt0 = tan0.z, t1 = tan1.z;\n\t\tif (this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n\t\t\telse\n\t\t\t\tout.z = p0.z;\n\t\t} else {\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\n\t\t}\n\n\t\tt0 = tan0.w, t1 = tan1.w;\n\t\tif (this._weightModeHermite(frame.weightedMode.w, nextFrame.weightedMode.w)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n\t\t\telse\n\t\t\t\tout.w = p0.w;\n\t\t} else {\n\t\t\tout.w = this._hermiteCurveSplineWeight(frame.value.w, frame.time, frame.outWeight.w, frame.outTangent.w,\n\t\t\t\tnextFrame.value.w, nextFrame.time, nextFrame.inWeight.w, nextFrame.inTangent.w, t);\n\t\t}\n\t}\n\n\tprivate _hermiteInterpolateVector4(frame: Vector4Keyframe, nextFrame: Vector4Keyframe, t: number, dur: number, out: Vector4) {\n\t\tvar p0 = frame.value;\n\t\tvar tan0 = frame.outTangent;\n\t\tvar p1 = nextFrame.value;\n\t\tvar tan1 = nextFrame.inTangent;\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\t\tvar b = t3 - 2.0 * t2 + t;\n\t\tvar c = t3 - t2;\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\n\n\t\tvar t0 = tan0.x, t1 = tan1.x;\n\t\tif (this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n\t\t\telse\n\t\t\t\tout.x = p0.x;\n\t\t} else {\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\n\t\t}\n\t\tt0 = tan0.y, t1 = tan1.y;\n\t\tif (this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n\t\t\telse\n\t\t\t\tout.y = p0.y;\n\t\t} else {\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\n\t\t}\n\n\t\tt0 = tan0.z, t1 = tan1.z;\n\t\tif (this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n\t\t\telse\n\t\t\t\tout.z = p0.z;\n\t\t} else {\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\n\t\t}\n\n\t\tt0 = tan0.w, t1 = tan1.w;\n\t\tif (this._weightModeHermite(frame.weightedMode.w, nextFrame.weightedMode.w)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n\t\t\telse\n\t\t\t\tout.w = p0.w;\n\t\t} else {\n\t\t\tout.w = this._hermiteCurveSplineWeight(frame.value.w, frame.time, frame.outWeight.w, frame.outTangent.w,\n\t\t\t\tnextFrame.value.w, nextFrame.time, nextFrame.inWeight.w, nextFrame.inTangent.w, t);\n\t\t}\n\t}\n\n\tprivate _hermiteInterpolateVector2(frame: Vector2Keyframe, nextFrame: Vector2Keyframe, t: number, dur: number, out: Vector2) {\n\t\tvar p0 = frame.value;\n\t\tvar tan0 = frame.outTangent;\n\t\tvar p1 = nextFrame.value;\n\t\tvar tan1 = nextFrame.inTangent;\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\t\tvar b = t3 - 2.0 * t2 + t;\n\t\tvar c = t3 - t2;\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\n\n\t\tvar t0 = tan0.x, t1 = tan1.x;\n\t\tif (this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n\t\t\telse\n\t\t\t\tout.x = p0.x;\n\t\t} else {\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\n\t\t}\n\n\t\tt0 = tan0.y, t1 = tan1.y;\n\t\tif (this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n\t\t\telse\n\t\t\t\tout.y = p0.y;\n\t\t} else {\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\n\t\t}\n\t}\n\n\tprivate _hermiteCurveSplineWeight(frameValue: number, frametime: number, frameOutWeight: number, frameOutTangent: number, nextframeValue: number, nextframetime: number, nextframeInweight: number, nextframeIntangent: number, time: number) {\n\t\tlet Eps = 2.22e-16;\n\n\t\tlet x = time;\n\t\tlet x1 = frametime;\n\t\tlet y1 = frameValue;\n\t\tlet wt1 = frameOutWeight;\n\t\tlet x2 = nextframetime;\n\t\tlet y2 = nextframeValue;\n\t\tlet wt2 = nextframeInweight;\n\n\t\tlet dx = x2 - x1;\n\t\tlet dy = y2 - y1;\n\t\tdy = Math.max(Math.abs(dy), Eps) * (dy < 0 ? -1 : 1);\n\n\t\tlet yp1 = frameOutTangent;\n\t\tlet yp2 = nextframeIntangent;\n\n\t\tif (!Number.isFinite(yp1) || !Number.isFinite(yp2)) {\n\t\t\treturn frameValue;\n\t\t}\n\n\t\typ1 = yp1 * dx / dy;\n\t\typ2 = yp2 * dx / dy;\n\n\t\tlet wt2s = 1 - wt2;\n\n\t\tlet t = 0.5;\n\t\tlet t2 = 0;\n\n\t\tif (Math.abs(wt1 - 0.33333334) < 0.0001 && Math.abs(wt2 - 0.33333334) < 0.0001) {\n\t\t\tt = x;\n\t\t\tt2 = 1 - t;\n\t\t}\n\t\telse {\n\t\t\twhile (true) {\n\t\t\t\tt2 = (1 - t);\n\t\t\t\tlet fg = 3 * t2 * t2 * t * wt1 + 3 * t2 * t * t * wt2s + t * t * t - x;\n\t\t\t\tif (Math.abs(fg) <= 2.5 * Eps)\n\t\t\t\t\tbreak;\n\n\t\t\t\t// third order householder method\n\t\t\t\tlet fpg = 3 * t2 * t2 * wt1 + 6 * t2 * t * (wt2s - wt1) + 3 * t * t * (1 - wt2s);\n\t\t\t\tlet fppg = 6 * t2 * (wt2s - 2 * wt1) + 6 * t * (1 - 2 * wt2s + wt1);\n\t\t\t\tlet fpppg = 18 * wt1 - 18 * wt2s + 6;\n\n\t\t\t\tt -= (6 * fg * fpg * fpg - 3 * fg * fg * fppg) / (6 * fpg * fpg * fpg - 6 * fg * fpg * fppg + fg * fg * fpppg);\n\t\t\t}\n\t\t}\n\n\t\tlet y = 3 * t2 * t2 * t * wt1 * yp1 + 3 * t2 * t * t * (1 - wt2 * yp2) + t * t * t;\n\n\t\treturn y * dy + y1;\n\t}\n\n\tprivate _curveInterpolate(frame: FloatKeyframe, nextFrame: FloatKeyframe, t: number, dur: number): number {\n\t\tif (this._weightModeHermite(frame.weightedMode, nextFrame.weightedMode)) {\n\t\t\treturn this._hermiteInterpolate(frame, nextFrame, t, dur);\n\t\t} else {\n\t\t\t//weight\n\t\t\treturn this._hermiteCurveSplineWeight(frame.value, frame.time, frame.outWeight, frame.outTangent,\n\t\t\t\tnextFrame.value, nextFrame.time, nextFrame.inWeight, nextFrame.inTangent, t);\n\t\t}\n\n\t}\n\n\t/**\n\t * @internal\n\t * @param nodes 动画帧\n\t * @param playCurTime 现在的播放时间\n\t * @param realTimeCurrentFrameIndexes 目前到达了动画的第几帧\n\t * @param addtive 是否是addtive模式\n\t * @param frontPlay 是否是前向播放\n\t * @param outDatas 计算好的动画数据\n\t */\n\t_evaluateClipDatasRealTime(nodes: KeyframeNodeList, playCurTime: number, realTimeCurrentFrameIndexes: Int16Array, addtive: boolean, frontPlay: boolean, outDatas: Array<number | Vector3 | Quaternion | Vector4 | Vector2>, avatarMask: AvatarMask): void {\n\t\tfor (var i = 0, n = nodes.count; i < n; i++) {\n\t\t\tvar node = nodes.getNodeByIndex(i);\n\t\t\tvar type = node.type;\n\t\t\tvar nextFrameIndex;\n\t\t\tvar keyFrames = node._keyFrames;\n\t\t\tvar keyFramesCount = keyFrames.length;\n\t\t\tvar frameIndex = realTimeCurrentFrameIndexes[i];\n\t\t\tif (avatarMask && (!avatarMask.getTransformActive(node.nodePath))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (frontPlay) {\n\t\t\t\tif ((frameIndex !== -1) && (playCurTime < keyFrames[frameIndex].time)) {//重置正向循环\n\t\t\t\t\tframeIndex = -1;\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\n\t\t\t\t}\n\n\t\t\t\tnextFrameIndex = frameIndex + 1;\n\t\t\t\twhile (nextFrameIndex < keyFramesCount) {\n\t\t\t\t\tif (keyFrames[nextFrameIndex].time > playCurTime)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tframeIndex++;\n\t\t\t\t\tnextFrameIndex++;\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnextFrameIndex = frameIndex + 1;\n\t\t\t\tif ((nextFrameIndex !== keyFramesCount) && (playCurTime > keyFrames[nextFrameIndex].time)) {//重置逆向循环\n\t\t\t\t\tframeIndex = keyFramesCount - 1;\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\n\t\t\t\t}\n\n\t\t\t\tnextFrameIndex = frameIndex + 1;\n\t\t\t\twhile (frameIndex > -1) {\n\t\t\t\t\tif (keyFrames[frameIndex].time < playCurTime)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tframeIndex--;\n\t\t\t\t\tnextFrameIndex--;\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar isEnd = nextFrameIndex === keyFramesCount;\n\t\t\tswitch (type) {\n\t\t\t\tcase KeyFrameValueType.Float:\n\t\t\t\t\tif (frameIndex !== -1) {\n\t\t\t\t\t\tvar frame = (<FloatKeyframe>keyFrames[frameIndex]);\n\t\t\t\t\t\tif (isEnd) {//如果nextFarme为空，不修改数据，保持上一帧\n\t\t\t\t\t\t\toutDatas[i] = frame.value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar nextFarme = (<FloatKeyframe>keyFrames[nextFrameIndex]);\n\t\t\t\t\t\t\tvar d = nextFarme.time - frame.time;\n\t\t\t\t\t\t\tvar t;\n\t\t\t\t\t\t\tif (d !== 0)\n\t\t\t\t\t\t\t\tt = (playCurTime - frame.time) / d;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tt = 0;\n\t\t\t\t\t\t\toutDatas[i] = this._curveInterpolate(frame, nextFarme, t, d);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutDatas[i] = (<FloatKeyframe>keyFrames[0]).value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (addtive)\n\t\t\t\t\t\toutDatas[i] = <number>outDatas[i] - (<FloatKeyframe>keyFrames[0]).value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase KeyFrameValueType.Position:\n\t\t\t\tcase KeyFrameValueType.RotationEuler:\n\t\t\t\tcase KeyFrameValueType.Vector3:\n\t\t\t\t\tvar clipData = <Vector3>outDatas[i];\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\n\t\t\t\t\tif (addtive) {\n\t\t\t\t\t\tvar firstFrameValue = ((<Vector3Keyframe>keyFrames[0])).value;\n\t\t\t\t\t\tclipData.x -= firstFrameValue.x;\n\t\t\t\t\t\tclipData.y -= firstFrameValue.y;\n\t\t\t\t\t\tclipData.z -= firstFrameValue.z;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase KeyFrameValueType.Rotation:\n\t\t\t\t\tvar clipQuat = <Quaternion>outDatas[i];\n\t\t\t\t\tthis._evaluateFrameNodeQuaternionDatasRealTime(keyFrames as QuaternionKeyframe[], frameIndex, isEnd, playCurTime, clipQuat);\n\t\t\t\t\tif (addtive) {\n\t\t\t\t\t\tvar tempQuat = AnimationClip._tempQuaternion0;\n\t\t\t\t\t\tvar firstFrameValueQua = ((<QuaternionKeyframe>keyFrames[0])).value;\n\t\t\t\t\t\tUtils3D.quaternionConjugate(firstFrameValueQua, tempQuat);\n\t\t\t\t\t\tQuaternion.multiply(tempQuat, clipQuat, clipQuat);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase KeyFrameValueType.Scale:\n\t\t\t\t\tclipData = <Vector3>outDatas[i];\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\n\t\t\t\t\tif (addtive) {\n\t\t\t\t\t\tfirstFrameValue = ((<Vector3Keyframe>keyFrames[0])).value;\n\t\t\t\t\t\tclipData.x /= firstFrameValue.x;\n\t\t\t\t\t\tclipData.y /= firstFrameValue.y;\n\t\t\t\t\t\tclipData.z /= firstFrameValue.z;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase KeyFrameValueType.Vector2:\n\t\t\t\t\tvar v2Data = <Vector2>outDatas[i];\n\t\t\t\t\tthis._evaluateFrameNodeVector2DatasRealTime(keyFrames as Vector2Keyframe[], frameIndex, isEnd, playCurTime, v2Data);\n\t\t\t\t\tif (addtive) {\n\t\t\t\t\t\tvar v2FrameValue = ((<Vector2Keyframe>keyFrames[0])).value;\n\t\t\t\t\t\tv2Data.x -= v2FrameValue.x;\n\t\t\t\t\t\tv2Data.y -= v2FrameValue.y;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tbreak;\n\t\t\t\tcase KeyFrameValueType.Vector4:\n\t\t\t\tcase KeyFrameValueType.Color:\n\t\t\t\t\tvar v4Data = <Vector4>outDatas[i];\n\t\t\t\t\tthis._evaluateFrameNodeVector4DatasRealTime(keyFrames as Vector4Keyframe[], frameIndex, isEnd, playCurTime, v4Data);\n\t\t\t\t\tif (addtive) {\n\t\t\t\t\t\tvar v4FrameValue = ((<Vector4Keyframe>keyFrames[0])).value;\n\t\t\t\t\t\tv4Data.x -= v4FrameValue .x;\n\t\t\t\t\t\tv4Data.y -= v4FrameValue .y;\n\t\t\t\t\t\tv4Data.z -= v4FrameValue .z;\n\t\t\t\t\t\tv4Data.w -= v4FrameValue .w;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow \"AnimationClip:unknown node type.\";\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _evaluateFrameNodeVector3DatasRealTime(keyFrames: Vector3Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector3): void {\n\t\tif (frameIndex !== -1) {\n\t\t\tvar frame = keyFrames[frameIndex];\n\t\t\tif (isEnd) {\n\t\t\t\tvar frameData = frame.value;\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\n\t\t\t\toutDatas.y = frameData.y;\n\t\t\t\toutDatas.z = frameData.z;\n\t\t\t} else {\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\n\t\t\t\tvar t;\n\t\t\t\tvar startTime = frame.time;\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\n\t\t\t\tif (d !== 0)\n\t\t\t\t\tt = (playCurTime - startTime) / d;\n\t\t\t\telse\n\t\t\t\t\tt = 0;\n\n\t\t\t\tthis._hermiteInterpolateVector3(frame, nextKeyFrame, t, d, outDatas);\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\n\t\t\toutDatas.x = firstFrameDatas.x;\n\t\t\toutDatas.y = firstFrameDatas.y;\n\t\t\toutDatas.z = firstFrameDatas.z;\n\t\t}\n\t}\n\n\tprivate _evaluateFrameNodeVector2DatasRealTime(keyFrames: Vector2Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector2): void {\n\t\tif (frameIndex !== -1) {\n\t\t\tvar frame = keyFrames[frameIndex];\n\t\t\tif (isEnd) {\n\t\t\t\tvar frameData = frame.value;\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\n\t\t\t\toutDatas.y = frameData.y;\n\t\t\t} else {\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\n\t\t\t\tvar t;\n\t\t\t\tvar startTime = frame.time;\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\n\t\t\t\tif (d !== 0)\n\t\t\t\t\tt = (playCurTime - startTime) / d;\n\t\t\t\telse\n\t\t\t\t\tt = 0;\n\n\t\t\t\tthis._hermiteInterpolateVector2(frame, nextKeyFrame, t, d, outDatas);\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\n\t\t\toutDatas.x = firstFrameDatas.x;\n\t\t\toutDatas.y = firstFrameDatas.y;\n\t\t}\n\t}\n\n\tprivate _evaluateFrameNodeVector4DatasRealTime(keyFrames: Vector4Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector4): void {\n\t\tif (frameIndex !== -1) {\n\t\t\tvar frame = keyFrames[frameIndex];\n\t\t\tif (isEnd) {\n\t\t\t\tvar frameData = frame.value;\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\n\t\t\t\toutDatas.y = frameData.y;\n\t\t\t\toutDatas.z = frameData.z;\n\t\t\t} else {\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\n\t\t\t\tvar t;\n\t\t\t\tvar startTime = frame.time;\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\n\t\t\t\tif (d !== 0)\n\t\t\t\t\tt = (playCurTime - startTime) / d;\n\t\t\t\telse\n\t\t\t\t\tt = 0;\n\n\t\t\t\tthis._hermiteInterpolateVector4(frame, nextKeyFrame, t, d, outDatas);\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\n\t\t\toutDatas.x = firstFrameDatas.x;\n\t\t\toutDatas.y = firstFrameDatas.y;\n\t\t\toutDatas.z = firstFrameDatas.z;\n\t\t}\n\t}\n\n\n\tprivate _evaluateFrameNodeQuaternionDatasRealTime(keyFrames: QuaternionKeyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Quaternion): void {\n\t\tif (frameIndex !== -1) {\n\t\t\tvar frame = keyFrames[frameIndex];\n\t\t\tif (isEnd) {\n\t\t\t\tvar frameData = frame.value;\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\n\t\t\t\toutDatas.y = frameData.y;\n\t\t\t\toutDatas.z = frameData.z;\n\t\t\t\toutDatas.w = frameData.w;\n\t\t\t} else {\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\n\t\t\t\tvar t;\n\t\t\t\tvar startTime = frame.time;\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\n\t\t\t\tif (d !== 0)\n\t\t\t\t\tt = (playCurTime - startTime) / d;\n\t\t\t\telse\n\t\t\t\t\tt = 0;\n\n\t\t\t\tthis._hermiteInterpolateQuaternion(frame, nextKeyFrame, t, d, outDatas);\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\n\t\t\toutDatas.x = firstFrameDatas.x;\n\t\t\toutDatas.y = firstFrameDatas.y;\n\t\t\toutDatas.z = firstFrameDatas.z;\n\t\t\toutDatas.w = firstFrameDatas.w;\n\t\t}\n\t}\n\n\tprivate _binarySearchEventIndex(time: number): number {\n\t\tvar start = 0;\n\t\tvar end = this._animationEvents.length - 1;\n\t\tvar mid;\n\t\twhile (start <= end) {\n\t\t\tmid = Math.floor((start + end) / 2);\n\t\t\tvar midValue = this._animationEvents[mid].time;\n\t\t\tif (midValue == time)\n\t\t\t\treturn mid;\n\t\t\telse if (midValue > time)\n\t\t\t\tend = mid - 1;\n\t\t\telse\n\t\t\t\tstart = mid + 1;\n\t\t}\n\t\treturn start;\n\t}\n\n\t/**\n\t * 添加动画事件。\n\t * @param event 动画事件\n\t */\n\taddEvent(event: AnimationEvent): void {\n\t\tvar index = this._binarySearchEventIndex(event.time);\n\t\tthis._animationEvents.splice(index, 0, event);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tprotected _disposeResource(): void {\n\t\tthis._nodes = null;\n\t\tthis._nodesMap = null;\n\t}\n}\n\n\n\n","import { Node } from \"../../display/Node\";\nimport { Handler } from \"../../utils/Handler\";\nimport { Transform3D } from \"./Transform3D\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Stat } from \"../../utils/Stat\";\nimport { Prefab } from \"../../resource/HierarchyResource\";\nimport { ILaya } from \"../../../ILaya\";\nimport { CommandUniformMap } from \"../../RenderEngine/CommandUniformMap\";\nimport { NodeFlags } from \"../../Const\";\nimport { Event } from \"../../events/Event\";\nimport { Scene3D } from \"./scene/Scene3D\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * @internal\n */\nexport enum StaticFlag {\n    Normal = 1 << 0,\n    StaticBatch = 1 << 1,\n}\n\n/**\n * <code>Sprite3D</code> 类用于实现3D精灵。\n */\nexport class Sprite3D extends Node {\n    /**@internal 着色器变量名，世界矩阵。*/\n    static WORLDMATRIX: number;\n    /**@internal */\n    static sprite3DCommandUniformMap: CommandUniformMap;\n    /**@internal */\n    protected static _uniqueIDCounter: number = 0;\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n\n        Sprite3D.WORLDMATRIX = Shader3D.propertyNameToID(\"u_WorldMat\");\n\n        Sprite3D.sprite3DCommandUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\n        Sprite3D.sprite3DCommandUniformMap.addShaderUniform(Sprite3D.WORLDMATRIX, \"u_WorldMat\");\n    }\n\n    /**\n     * 创建精灵的克隆实例。\n     * @param\toriginal  原始精灵。\n     * @param   parent    父节点。\n     * @param   worldPositionStays 是否保持自身世界变换。\n     * @param\tposition  世界位置,worldPositionStays为false时生效。\n     * @param\trotation  世界旋转,worldPositionStays为false时生效。\n     * @return  克隆实例。\n     */\n    static instantiate(original: Sprite3D, parent: Node = null, worldPositionStays: boolean = true, position: Vector3 = null, rotation: Quaternion = null): Sprite3D {\n        var destSprite3D: Sprite3D = (<Sprite3D>original.clone());\n        (parent) && (parent.addChild(destSprite3D));\n        var transform: Transform3D = destSprite3D.transform;\n        if (worldPositionStays) {\n            var worldMatrix: Matrix4x4 = transform.worldMatrix;\n            original.transform.worldMatrix.cloneTo(worldMatrix);\n            transform.worldMatrix = worldMatrix;\n        } else {\n            (position) && (transform.position = position);\n            (rotation) && (transform.rotation = rotation);\n        }\n        return destSprite3D;\n    }\n\n    /**\n     * 加载网格模板。\n     * @param url 模板地址。\n     * @param complete 完成回掉。\n     */\n    static load(url: string, complete: Handler): void {\n        ILaya.loader.load(url).then((res: Prefab) => {\n            complete && complete.runWith([res?.create()]);\n        });\n    }\n\n    /** @internal */\n    private _id: number;\n\n    /** @internal */\n    _isStatic: number;\n    /** @internal */\n    _layer: number;\n    /**@internal */\n    _transform: Transform3D;\n    /**@internal 0表示不是渲染节点*/\n    _isRenderNode: number = 0;\n\n    /**\n     * 唯一标识ID。\n     */\n    get id(): number {\n        return this._id;\n    }\n\n    /**\n     * 蒙版层。\n     */\n    get layer(): number {\n        return this._layer;\n    }\n\n    set layer(value: number) {\n        if (this._layer !== value) {\n            if (value >= 0 && value <= 30) {\n                this._layer = value;\n                this.event(Event.LAYERCHANGE, value);\n            } else {\n                throw new Error(\"Layer value must be 0-30.\");\n            }\n        }\n    }\n\n    /**\n     * 是否为静态。\n     */\n    get isStatic(): boolean {\n        return !!(this._isStatic >> 1 | 0x0);\n    }\n\n    /**@internal IDE only*/\n    set isStatic(value: boolean) {\n        this._isStatic = value ? StaticFlag.StaticBatch : StaticFlag.Normal;\n        this.event(Event.staticMask, this._isStatic);\n    }\n\n    /**\n     * 精灵变换。\n     */\n    get transform(): Transform3D {\n        return this._transform;\n    }\n\n    get scene(): Scene3D {\n        return <Scene3D>this._scene;\n    }\n\n    /**\n     * 创建一个 <code>Sprite3D</code> 实例。\n     * @param name 精灵名称。\n     * @param isStatic 是否为静态。\n     */\n    constructor(name: string = null, isStatic: boolean = false) {\n        super();\n        this._id = ++Sprite3D._uniqueIDCounter;\n        this._is3D = true;\n        this._transform = LayaGL.renderOBJCreate.createTransform(this);\n        this._isStatic = isStatic ? StaticFlag.StaticBatch : StaticFlag.Normal;\n        this.layer = 0;\n        this.name = name ? name : \"New Sprite3D\";\n    }\n\n    /**\n    * @private\n    */\n    protected _onActive(): void {\n        super._onActive();\n        Stat.sprite3DCount++;\n    }\n\n    /**\n     * @private\n     */\n    protected _onInActive(): void {\n        super._onInActive();\n        Stat.sprite3DCount--;\n    }\n\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onAdded(): void {\n        if (this._parent instanceof Sprite3D) {\n            var parent3D: Sprite3D = (<Sprite3D>this._parent);\n            this.transform._setParent(parent3D.transform);\n        }\n        super._onAdded();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onRemoved(): void {\n        super._onRemoved();\n        if (this._parent instanceof Sprite3D)\n            this.transform._setParent(null);\n    }\n\n    protected onStartListeningToType(type: string) {\n        super.onStartListeningToType(type);\n        if (type.startsWith(\"collision\"))\n            this._setBit(NodeFlags.PROCESS_COLLISIONS, true);\n        else if (type.startsWith(\"trigger\"))\n            this._setBit(NodeFlags.PROCESS_TRIGGERS, true);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        (data.isStatic !== undefined) && (this.isStatic = data.isStatic);\n        (data.active !== undefined) && (this.active = data.active);\n        (data.name != undefined) && (this.name = data.name);\n\n        if (data.position !== undefined) {\n            var loccalPosition: Vector3 = this.transform.localPosition;\n            loccalPosition.fromArray(data.position);\n            this.transform.localPosition = loccalPosition;\n        }\n\n        if (data.rotationEuler !== undefined) {\n            var localRotationEuler: Vector3 = this.transform.localRotationEuler;\n            localRotationEuler.fromArray(data.rotationEuler);\n            this.transform.localRotationEuler = localRotationEuler;\n        }\n        if (data.rotation !== undefined) {\n            var localRotation: Quaternion = this.transform.localRotation;\n            localRotation.fromArray(data.rotation);\n            this.transform.localRotation = localRotation;\n        }\n\n        if (data.scale !== undefined) {\n            var localScale: Vector3 = this.transform.localScale;\n            localScale.fromArray(data.scale);\n            this.transform.localScale = localScale;\n        }\n\n        (data.layer != undefined) && (this.layer = data.layer);\n    }\n\n    /**\n     * @override\n     * @internal\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\n        if (this._destroyed)\n            throw new Error(\"Sprite3D: Can't be cloned if the Sprite3D has destroyed.\");\n\n        var destSprite3D: Sprite3D = <Sprite3D>destObject;\n        var trans: Transform3D = this._transform;\n        var destTrans: Transform3D = destSprite3D._transform;\n\n        destSprite3D.name = this.name/* + \"(clone)\"*/;//TODO:克隆后不能播放刚体动画，找不到名字\n        destSprite3D._destroyed = this._destroyed;\n        destSprite3D.active = this.active;\n        destTrans.localPosition = trans.localPosition;\n        destTrans.localRotation = trans.localRotation;\n        destTrans.localScale = trans.localScale;\n\n        destSprite3D._isStatic = this._isStatic;\n        destSprite3D.layer = this.layer;\n        super._cloneTo(destSprite3D, srcRoot, dstRoot);\n    }\n\n    /**\n     * @internal\n     */\n    private static _createSprite3DInstance(scrSprite: Sprite3D): Node {\n        var node: Node = scrSprite._create();\n        var children: any[] = scrSprite._children;\n        for (var i: number = 0, n: number = children.length; i < n; i++) {\n            var child: any = Sprite3D._createSprite3DInstance(children[i])\n            node.addChild(child);\n        }\n        return node;\n    }\n\n    /**\n     * @internal\n     */\n    private static _parseSprite3DInstance(srcRoot: Node, dstRoot: Node, scrSprite: Node, dstSprite: Node): void {\n        var srcChildren: any[] = scrSprite._children;\n        var dstChildren: any[] = dstSprite._children;\n        for (var i: number = 0, n: number = srcChildren.length; i < n; i++)\n            Sprite3D._parseSprite3DInstance(srcRoot, dstRoot, srcChildren[i], dstChildren[i])\n        scrSprite._cloneTo(dstSprite, srcRoot, dstRoot);\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): Node {\n        var dstSprite3D: Node = Sprite3D._createSprite3DInstance(this);\n        Sprite3D._parseSprite3DInstance(this, dstSprite3D, this, dstSprite3D);\n        return dstSprite3D;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    destroy(destroyChild: boolean = true): void {\n        if (this._destroyed)\n            return;\n\n        super.destroy(destroyChild);\n        this._transform = null;\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Node {\n        return new Sprite3D();\n    }\n}\n\n","import { Config3D } from \"../../../../Config3D\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Texture2D } from \"../../../resource/Texture2D\";\nimport { Camera } from \"../../core/Camera\";\nimport { LightQueue } from \"../../core/light/LightQueue\";\nimport { PointLightCom } from \"../../core/light/PointLightCom\";\nimport { SpotLightCom } from \"../../core/light/SpotLightCom\";\nimport { Scene3D } from \"../../core/scene/Scene3D\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\n\nimport { Utils3D } from \"../../utils/Utils3D\";\n\n/**\n * @internal\n */\nclass LightBound {\n    xMin: number;\n    xMax: number;\n    yMin: number;\n    yMax: number;\n    zMin: number;\n    zMax: number;\n}\n\n/**\n * @internal\n */\nclass ClusterData {\n    updateMark: number = -1;\n    pointLightCount: number = 0;\n    spotLightCount: number = 0;\n    indices: number[] = [];\n}\n\n/**\n * @internal\n */\nexport class Cluster {\n    private static _tempVector30: Vector3 = new Vector3();\n    private static _tempVector31: Vector3 = new Vector3();\n    private static _tempVector32: Vector3 = new Vector3();\n    private static _tempVector33: Vector3 = new Vector3();\n    private static _tempVector34: Vector3 = new Vector3();\n    private static _tempVector35: Vector3 = new Vector3();\n    private static _tempVector36: Vector3 = new Vector3();\n    private static _tempVector37: Vector3 = new Vector3();\n    private static _tempLightBound: LightBound = new LightBound();\n\n    static instance: Cluster;\n\n    private _xSlices: number;\n    private _ySlices: number;\n    private _zSlices: number;\n    private _clusterDatas: ClusterData[][][];\n    private _clusterPixels: Float32Array;\n    private _updateMark: number = 0;\n    private _depthSliceParam: Vector2 = new Vector2();\n\n    public _clusterTexture: Texture2D;\n\n    constructor(xSlices: number, ySlices: number, zSlices: number, maxLightsPerClusterAverage: number) {\n        this._xSlices = xSlices;\n        this._ySlices = ySlices;\n        this._zSlices = zSlices;\n        var clusterTexWidth: number = xSlices * ySlices;\n        var clisterTexHeight: number = zSlices * (1 + Math.ceil(maxLightsPerClusterAverage / 4));\n        this._clusterTexture = Utils3D._createFloatTextureBuffer(clusterTexWidth, clisterTexHeight);\n        this._clusterTexture.lock = true;\n        this._clusterPixels = new Float32Array(clusterTexWidth * clisterTexHeight * 4);\n\n        //Init for every cluster\n        var clusterDatas: ClusterData[][][] = new Array<Array<Array<ClusterData>>>(this._zSlices);\n        for (var z = 0; z < this._zSlices; z++) {\n            clusterDatas[z] = new Array<Array<ClusterData>>(this._ySlices);\n            for (var y = 0; y < this._ySlices; y++) {\n                clusterDatas[z][y] = new Array<ClusterData>(this._xSlices);\n                for (var x = 0; x < this._xSlices; x++)\n                    clusterDatas[z][y][x] = new ClusterData();\n            }\n        }\n        this._clusterDatas = clusterDatas;\n\n        /*\n        Layout of clusterTexture\n        |------------------------------------------------------U(XY)\n        |               cluster0               cluster1       \n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \n        |               cluster2               cluster3      \n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \n        |-----------------------------------------------------------\n        |                                    _                              \n        |        (poi0|poi1|spo0|spo1) |(spo2|poi0|poi1|poi2)\n        |             _\n        |        (poi3|spo0|....|....) |(....|....|....|....) \n        |\n        V(Z)\n        */\n    }\n\n    // private _insertSpotLightSphere(origin: Vector3, forward: Vector3, size: number, angle: number, testSphere: Vector4): boolean {\n    //     //combine cone cull and sphere range cull\n    //     var V: Vector3 = Cluster._tempVector35;\n    //     V.x = testSphere.x - origin.x;\n    //     V.y = testSphere.y - origin.y;\n    //     V.z = testSphere.z - origin.z;\n\n    //     var VlenSq = Vector3.dot(V, V);\n    //     var sphereRadius: number = testSphere.w;\n\n    //     var rangeCull: boolean = VlenSq > sphereRadius * sphereRadius;\n    //     if (!rangeCull)\n    //         return false;\n\n    //     var V1len: number = Vector3.dot(V, forward);\n    //     var distanceClosestPoint: number = Math.cos(angle) * Math.sqrt(VlenSq - V1len * V1len) - V1len * Math.sin(angle);\n\n    //     var angleCull: boolean = distanceClosestPoint > sphereRadius;\n    //     var frontCull: boolean = V1len > sphereRadius + size;\n    //     var backCull: boolean = V1len < -sphereRadius;\n    //     return !(angleCull || frontCull || backCull);\n    // }\n\n    private _placePointLightToClusters(lightIndex: number, lightBound: LightBound): void {\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\n        var updateMark: number = this._updateMark;\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\n                    var data: ClusterData = clusterDatas[z][y][x];\n                    if (data.updateMark != updateMark) {\n                        data.pointLightCount = 0;\n                        data.spotLightCount = 0;\n                        data.updateMark = updateMark;\n                    }\n                    var indices: number[] = data.indices;\n                    var lightCount: number = data.pointLightCount++;\n                    if (lightCount < indices.length)\n                        indices[lightCount] = lightIndex;\n                    else\n                        indices.push(lightIndex);\n                }\n            }\n        }\n    }\n\n    private _placeSpotLightToClusters(lightIndex: number, lightBound: LightBound): void {\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\n        var updateMark: number = this._updateMark;\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\n                    var data: ClusterData = clusterDatas[z][y][x];\n                    if (data.updateMark != updateMark) {\n                        data.pointLightCount = 0;\n                        data.spotLightCount = 0;\n                        data.updateMark = updateMark;\n                    }\n                    var indices: number[] = data.indices;\n                    var lightCount: number = data.pointLightCount + data.spotLightCount++;\n                    if (lightCount < indices.length)\n                        indices[lightCount] = lightIndex;\n                    else\n                        indices.push(lightIndex);\n                }\n            }\n        }\n    }\n\n\n    private _insertConePlane(origin: Vector3, forward: Vector3, radius: number, halfAngle: number, pNor: Vector3): boolean {\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\n        //because distance is always zero so we ease this method\n        var V1: Vector3 = Cluster._tempVector36;\n        var V2: Vector3 = Cluster._tempVector37;\n        Vector3.cross(pNor, forward, V1);\n        Vector3.cross(V1, forward, V2);\n        Vector3.normalize(V2, V2);\n        var tanR: number = radius * Math.tan(halfAngle);\n        var capRimX: number = origin.x + radius * forward.x + tanR * V2.x;\n        var capRimY: number = origin.y + radius * forward.y + tanR * V2.y;\n        var capRimZ: number = origin.z + radius * forward.z + tanR * V2.z;\n\n        return capRimX * pNor.x + capRimY * pNor.y + capRimZ * pNor.z <= 0 || origin.x * pNor.x + origin.y * pNor.y + origin.z * pNor.z <= 0;\n    }\n\n\n    private _shrinkSphereLightZPerspective(near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\n        var lvZ: number = lightviewPos.z;\n        var minZ: number = lvZ - radius;\n        var maxZ: number = lvZ + radius;\n\n        if ((minZ > far) || (maxZ <= near))\n            return false;\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\n        var depthSliceParam: Vector2 = this._depthSliceParam;\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\n        return true;\n    }\n\n    private _shrinkSpotLightZPerspective(near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\n\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\n        var rb: number = Math.tan(halfAngle) * radius;\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\n\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\n\n        if ((minZ > far) || (maxZ <= near))\n            return false;\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\n        var depthSliceParam: Vector2 = this._depthSliceParam;\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\n        return true;\n    }\n\n    private _shrinkSphereLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\n        var lvZ: number = lightviewPos.z;\n        var minZ: number = lvZ - radius, maxZ: number = lvZ + radius;\n        if ((minZ > far) || (maxZ <= near))\n            return false;\n        var lvX: number = lightviewPos.x;\n        var minX: number = lvX - radius, maxX: number = lvX + radius;\n        if ((minX > halfX) || (maxX <= -halfX))\n            return false;\n        var lvY: number = lightviewPos.y;\n        var minY: number = lvY - radius, maxY: number = lvY + radius;\n        if ((minY > halfY) || (maxY <= -halfY))\n            return false;\n\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\n        var depthSliceParam: Vector2 = this._depthSliceParam;\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\n        return true;\n    }\n\n    private _shrinkSpotLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\n        var rb: number = Math.tan(halfAngle) * radius;\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\n\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\n        if ((minZ > far) || (maxZ <= near))\n            return false;\n        var eX: number = Math.sqrt(1.0 - aX * aX / dotA);\n        var minX: number = Math.max(Math.min(paX, pbX - eX * rb), viewLightPos.x - radius);\n        var maxX: number = Math.min(Math.max(paX, pbX + eX * rb), viewLightPos.x + radius);\n        if ((minX > halfX) || (maxX <= -halfX))\n            return false;\n        var eY: number = Math.sqrt(1.0 - aY * aY / dotA);\n        var minY: number = Math.max(Math.min(paY, pbY - eY * rb), viewLightPos.y - radius);\n        var maxY: number = Math.min(Math.max(paY, pbY + eY * rb), viewLightPos.y + radius);\n        if ((minY > halfY) || (maxY <= -halfY))\n            return false;\n\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\n        var depthSliceParam: Vector2 = this._depthSliceParam;\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\n        return true;\n    }\n\n\n    private _shrinkXYByRadiusPerspective(lightviewPos: Vector3, radius: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): boolean {\n        var xMin: number, yMin: number;\n        var xMax: number, yMax: number;\n        var lvX: number = lightviewPos.x, lvY: number = lightviewPos.y, lvZ: number = lightviewPos.z;\n\n        var i: number;\n        var n: number = this._ySlices + 1;\n        for (i = 0; i < n; i++) {\n            var plane: Vector3 = yPlanes[i];\n            if (lvY * plane.y + lvZ * plane.z < radius) {//Dot\n                yMin = Math.max(0, i - 1);\n                break;\n            }\n        }\n        if (i == n)//fail scan insert\n            return false;\n        yMax = this._ySlices;\n        for (i = yMin + 1; i < n; i++) {\n            var plane: Vector3 = yPlanes[i];\n            if (lvY * plane.y + lvZ * plane.z <= -radius) {//Dot\n                yMax = Math.max(0, i);\n                break;\n            }\n        }\n\n        n = this._xSlices + 1;\n        for (i = 0; i < n; i++) {\n            var plane: Vector3 = xPlanes[i];\n            if (lvX * plane.x + lvZ * plane.z < radius) {//Dot\n                xMin = Math.max(0, i - 1);\n                break;\n            }\n        }\n        xMax = this._xSlices;\n        for (i = xMin + 1; i < n; i++) {\n            var plane: Vector3 = xPlanes[i];\n            if (lvX * plane.x + lvZ * plane.z <= -radius) {//Dot\n                xMax = Math.max(0, i);\n                break;\n            }\n        }\n\n\n        lightBound.xMin = xMin\n        lightBound.xMax = xMax;\n        lightBound.yMin = yMin;\n        lightBound.yMax = yMax;\n        return true;\n    }\n\n    private _shrinkSpotXYByConePerspective(lightviewPos: Vector3, viewForward: Vector3, radius: number, halfAngle: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): void {\n        var xMin: number, yMin: number;\n        var xMax: number, yMax: number;\n\n        var normal: Vector3 = Cluster._tempVector32;\n        var n: number = lightBound.yMax + 1;\n        for (var i: number = lightBound.yMin + 1; i < n; i++) {\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, yPlanes[i])) {\n                yMin = Math.max(0, i - 1);\n                break;\n            }\n        }\n\n        yMax = lightBound.yMax;\n        for (var i: number = yMin + 1; i < n; i++) {\n            var plane: Vector3 = yPlanes[i];\n            normal.setValue(0, -plane.y, -plane.z);\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\n                yMax = Math.max(0, i);\n                break;\n            }\n        }\n\n        n = lightBound.xMax + 1;\n        for (var i: number = lightBound.xMin + 1; i < n; i++) {\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, xPlanes[i])) {\n                xMin = Math.max(0, i - 1);\n                break;\n            }\n        }\n        xMax = lightBound.xMax;\n        for (var i: number = xMin + 1; i < n; i++) {\n            var plane: Vector3 = xPlanes[i];\n            normal.setValue(-plane.x, 0, -plane.z);\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\n                xMax = Math.max(0, i);\n                break;\n            }\n        }\n\n        lightBound.xMin = xMin;\n        lightBound.xMax = xMax;\n        lightBound.yMin = yMin;\n        lightBound.yMax = yMax;\n    }\n\n\n\n    private _updatePointLightPerspective(near: number, far: number, viewMat: Matrix4x4, pointLight: PointLightCom, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\n        var lightBound: LightBound = Cluster._tempLightBound;\n        var lightviewPos: Vector3 = Cluster._tempVector30;\n        Vector3.transformV3ToV3((pointLight.owner as Sprite3D)._transform.position, viewMat, lightviewPos);//World to View\n        lightviewPos.z *= -1;\n        if (!this._shrinkSphereLightZPerspective(near, far, lightviewPos, pointLight.range, lightBound))\n            return;\n        if (!this._shrinkXYByRadiusPerspective(lightviewPos, pointLight.range, lightBound, xPlanes, yPlanes))\n            return;\n\n        this._placePointLightToClusters(lightIndex, lightBound);\n    }\n\n    private _updateSpotLightPerspective(near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLightCom, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\n        // the effect is exaggerated the steeper the angle the plane makes is\n        var lightBound: LightBound = Cluster._tempLightBound;\n        var viewPos: Vector3 = Cluster._tempVector30;\n        var forward: Vector3 = Cluster._tempVector31;\n        var viewConeCap: Vector3 = Cluster._tempVector34;\n        var position: Vector3 = (spotLight.owner as Sprite3D)._transform.position;\n        var range: number = spotLight.range;\n        (spotLight.owner as Sprite3D)._transform.worldMatrix.getForward(forward);\n        Vector3.normalize(forward, forward);\n        Vector3.scale(forward, range, viewConeCap);\n        Vector3.add(position, viewConeCap, viewConeCap);\n\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\n        viewPos.z *= -1;\n        viewConeCap.z *= -1;\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\n        if (!this._shrinkSpotLightZPerspective(near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\n            return;\n        if (!this._shrinkXYByRadiusPerspective(viewPos, range, lightBound, xPlanes, yPlanes))\n            return;\n        var viewFor: Vector3 = Cluster._tempVector33;\n        viewFor.x = viewConeCap.x - viewPos.x, viewFor.y = viewConeCap.y - viewPos.y, viewFor.z = viewConeCap.z - viewPos.z;\n        Vector3.normalize(viewFor, viewFor);\n        this._shrinkSpotXYByConePerspective(viewPos, viewFor, range, halfAngle, lightBound, xPlanes, yPlanes);\n\n        this._placeSpotLightToClusters(lightIndex, lightBound);\n    }\n\n    private _updatePointLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, pointLight: PointLightCom, lightIndex: number): void {\n        var lightBound: LightBound = Cluster._tempLightBound;\n        var lightviewPos: Vector3 = Cluster._tempVector30;\n        Vector3.transformV3ToV3((pointLight.owner as Sprite3D)._transform.position, viewMat, lightviewPos);//World to View\n        lightviewPos.z *= -1;\n\n        if (!this._shrinkSphereLightByBoundOrth(halfX, halfY, near, far, lightviewPos, pointLight.range, lightBound))\n            return;\n\n        this._placePointLightToClusters(lightIndex, lightBound);\n    }\n\n    private _updateSpotLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLightCom, lightIndex: number): void {\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\n        // the effect is exaggerated the steeper the angle the plane makes is\n        var lightBound: LightBound = Cluster._tempLightBound;\n        var viewPos: Vector3 = Cluster._tempVector30;\n        var forward: Vector3 = Cluster._tempVector31;\n        var viewConeCap: Vector3 = Cluster._tempVector34;\n        var position: Vector3 = (spotLight.owner as Sprite3D)._transform.position;\n        var range: number = spotLight.range;\n        (spotLight.owner as Sprite3D)._transform.worldMatrix.getForward(forward);\n        Vector3.normalize(forward, forward);\n        Vector3.scale(forward, range, viewConeCap);\n        Vector3.add(position, viewConeCap, viewConeCap);\n\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\n        viewPos.z *= -1;\n        viewConeCap.z *= -1;\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\n        if (!this._shrinkSpotLightByBoundOrth(halfX, halfY, near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\n            return;\n\n        this._placeSpotLightToClusters(lightIndex, lightBound);\n    }\n\n    update(camera: Camera, scene: Scene3D): void {\n        this._updateMark++;\n        var camNear: number = camera.nearPlane;\n        this._depthSliceParam.x = Config3D.lightClusterCount.z / Math.log2(camera.farPlane / camNear);\n        this._depthSliceParam.y = Math.log2(camNear) * this._depthSliceParam.x;\n\n        var near: number = camera.nearPlane;\n        var far: number = camera.farPlane;\n        var viewMat: Matrix4x4 = camera.viewMatrix;\n        var curCount: number = scene._directionLights._length;\n        var pointLights: LightQueue<PointLightCom> = scene._pointLights;\n        var poiCount: number = pointLights._length;\n        var poiElements: PointLightCom[] = <PointLightCom[]>pointLights._elements;\n        var spotLights: LightQueue<SpotLightCom> = scene._spotLights;\n        var spoCount: number = spotLights._length;\n        var spoElements: SpotLightCom[] = <SpotLightCom[]>spotLights._elements;\n        if (camera.orthographic) {\n            var halfY: number = camera.orthographicVerticalSize / 2.0;\n            var halfX: number = halfY * camera.aspectRatio;\n            for (var i = 0; i < poiCount; i++, curCount++)\n                this._updatePointLightOrth(halfX, halfY, near, far, viewMat, poiElements[i], curCount);\n            for (var i = 0; i < spoCount; i++, curCount++)\n                this._updateSpotLightOrth(halfX, halfY, near, far, viewMat, spoElements[i], curCount);\n        }\n        else {\n            camera._updateClusterPlaneXY();\n            var xPlanes: Vector3[] = camera._clusterXPlanes;//must after camera._updateClusterPlaneXY()\n            var yPlanes: Vector3[] = camera._clusterYPlanes;\n            for (var i = 0; i < poiCount; i++, curCount++)\n                this._updatePointLightPerspective(near, far, viewMat, poiElements[i], curCount, xPlanes, yPlanes);\n            for (var i = 0; i < spoCount; i++, curCount++)\n                this._updateSpotLightPerspective(near, far, viewMat, spoElements[i], curCount, xPlanes, yPlanes);\n        }\n\n        if (poiCount + spoCount > 0) {\n            var xSlices: number = this._xSlices, ySlices: number = this._ySlices, zSlices: number = this._zSlices;\n            var widthFloat: number = xSlices * ySlices * 4;\n            var lightOff: number = widthFloat * zSlices;\n            var clusterPixels: Float32Array = this._clusterPixels;\n            var clusterPixelsCount: number = clusterPixels.length;\n            var clusterDatas: ClusterData[][][] = this._clusterDatas;\n            var updateMark: number = this._updateMark;\n            var freeSpace: boolean = true;\n            for (var z = 0; z < zSlices; z++) {\n                for (var y = 0; y < ySlices; y++) {\n                    for (var x = 0; x < xSlices; x++) {\n                        var data: ClusterData = clusterDatas[z][y][x];\n                        var clusterOff: number = (x + y * xSlices + z * xSlices * ySlices) * 4;\n                        if (data.updateMark !== updateMark) {\n                            clusterPixels[clusterOff] = 0;\n                            clusterPixels[clusterOff + 1] = 0;\n                        }\n                        else {\n                            if (freeSpace) {\n                                var indices: number[] = data.indices;\n                                var pCount: number = data.pointLightCount;\n                                var sCount: number = data.spotLightCount;\n                                var count: number = pCount + sCount;\n                                if (lightOff + count < clusterPixelsCount) {\n                                    clusterPixels[clusterOff] = pCount;\n                                    clusterPixels[clusterOff + 1] = sCount;\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\n                                    for (var i: number = 0; i < count; i++)\n                                        clusterPixels[lightOff++] = indices[i];\n                                }\n                                else {\n                                    count = clusterPixelsCount - (lightOff + count);\n                                    pCount = Math.min(pCount, count);\n                                    clusterPixels[clusterOff] = pCount;\n                                    clusterPixels[clusterOff + 1] = Math.min(sCount, count - pCount);\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\n                                    for (var i: number = 0; i < count; i++)\n                                        clusterPixels[lightOff++] = indices[i];\n                                    freeSpace = false;//remain cluster light will be ignore\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            var width: number = this._clusterTexture.width;\n            this._clusterTexture.setSubPixelsData(0, 0, width, Math.ceil(lightOff / (4 * width)), clusterPixels, 0, false, false, false);\n        }\n    }\n}\n","import { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * 平面。\n */\nexport class Plane {\n\t/**平面与其他几何体相交类型*/\n\tstatic PlaneIntersectionType_Back: number = 0;\n\tstatic PlaneIntersectionType_Front: number = 1;\n\tstatic PlaneIntersectionType_Intersecting: number = 2;\n\t\n\t/**@internal 平面的向量*/\n\t_normal: Vector3;\n\t\n\t/**@internal 平面到坐标系原点的距离*/\n\t_distance: number;\n\n\t/**\n\t * 创建一个 <code>Plane</code> 实例。\n\t * @param\tnormal 平面的向量\n\t * @param\td  平面到原点的距离\n\t */\n\tconstructor(normal: Vector3 = new Vector3, d: number = 0) {\n\t\tthis._normal = normal;\n\t\tthis._distance = d;//this.distance = d;\n\t}\n\n\t/**\n\t * 平面法线\n\t */\n\tset normal(value: Vector3) {\n\t\tvalue.cloneTo(this._normal);\n\t}\n\n\tget normal() {\n\t\treturn this._normal;\n\t}\n\n\t/**\n\t * 平面距离\n\t */\n\tset distance(value: number) {\n\t\tthis._distance = value;\n\t}\n\n\tget distance(): number {\n\t\treturn this._distance;\n\t}\n\n\t/**\n\t * 通过三个点创建一个平面。\n\t * @param\tpoint0 第零个点\n\t * @param\tpoint1 第一个点\n\t * @param\tpoint2 第二个点\n\t */\n\tstatic createPlaneBy3P(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n\t\tvar x1: number = point1.x - point0.x;\n\t\tvar y1: number = point1.y - point0.y;\n\t\tvar z1: number = point1.z - point0.z;\n\t\tvar x2: number = point2.x - point0.x;\n\t\tvar y2: number = point2.y - point0.y;\n\t\tvar z2: number = point2.z - point0.z;\n\t\tvar yz: number = (y1 * z2) - (z1 * y2);\n\t\tvar xz: number = (z1 * x2) - (x1 * z2);\n\t\tvar xy: number = (x1 * y2) - (y1 * x2);\n\t\tvar invPyth: number = 1.0 / (Math.sqrt((yz * yz) + (xz * xz) + (xy * xy)));\n\n\t\tvar x: number = yz * invPyth;\n\t\tvar y: number = xz * invPyth;\n\t\tvar z: number = xy * invPyth;\n\n\t\tvar normal: Vector3 = out.normal;\n\t\tnormal.x = x;\n\t\tnormal.y = y;\n\t\tnormal.z = z;\n\t\tout.normal = normal.normalize();\n\t\tout.distance = -((x * point0.x) + (y * point0.y) + (z * point0.z));\n\t}\n\n\t/**\n\t * 更改平面法线向量的系数，使之成单位长度。\n\t */\n\tnormalize(): void {\n\t\tvar normalEX: number = this.normal.x;\n\t\tvar normalEY: number = this.normal.y;\n\t\tvar normalEZ: number = this.normal.z;\n\t\tvar magnitude: number = 1.0 / Math.sqrt(normalEX * normalEX + normalEY * normalEY + normalEZ * normalEZ);\n\n\t\tthis.normal.x = normalEX * magnitude;\n\t\tthis.normal.y = normalEY * magnitude;\n\t\tthis.normal.z = normalEZ * magnitude;\n\t\tthis.distance *= magnitude;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar dest: Plane = <Plane>destObject;\n\t\tthis.normal.cloneTo(dest.normal);\n\t\tdest.distance = this.distance;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): Plane {\n\t\tvar dest = new Plane();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n\n","import { Vector3 } from \"../../maths/Vector3\";\n\n/**\n\t * <code>Ray</code> 类用于创建射线。\n\t */\nexport class Ray {\n\t/**原点*/\n\torigin: Vector3;\n\t/**方向*/\n\tdirection: Vector3;\n\n\t/**\n\t * 创建一个 <code>Ray</code> 实例。\n\t * @param\torigin 射线的起点\n\t * @param\tdirection  射线的方向\n\t */\n\tconstructor(origin: Vector3, direction: Vector3) {\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\t}\n\n\t/**\n\t * 射线上的某点\n\t * @param t \n\t * @param out \n\t */\n\tat(t: number, out: Vector3) {\n\t\tVector3.scale(this.direction, t, out);\n\t\tVector3.add(this.origin, out, out);\n\t}\n\n}\n\n","/**\n * <code>ContainmentType</code> 类用于定义空间物体位置关系。\n */\nexport class ContainmentType {\n\n\t/**不相交*/\n\tstatic Disjoint: number = 0;\n\t/**包含*/\n\tstatic Contains: number = 1;\n\t/**相交*/\n\tstatic Intersects: number = 2;\n\n}\n\n\n","import { Plane } from \"./Plane\";\nimport { BoundBox } from \"./BoundBox\";\nimport { BoundSphere } from \"./BoundSphere\";\nimport { Ray } from \"./Ray\";\nimport { ContainmentType } from \"./ContainmentType\";\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\nimport { Vector3 } from \"../../maths/Vector3\";\n/**\n     * <code>Collision</code> 类用于检测碰撞。\n     */\nexport class CollisionUtils {\n\n    /** @internal */\n    private static _tempV30: Vector3 = new Vector3();\n    /** @internal */\n    private static _tempV31: Vector3 = new Vector3();\n    /** @internal */\n    private static _tempV32: Vector3 = new Vector3();\n    /** @internal */\n    private static _tempV33: Vector3 = new Vector3();\n    /** @internal */\n    private static _tempV34: Vector3 = new Vector3();\n    /** @internal */\n    private static _tempV35: Vector3 = new Vector3();\n    /** @internal */\n    private static _tempV36: Vector3 = new Vector3();\n\n\n    /**\n     * 创建一个 <code>Collision</code> 实例。\n     */\n    constructor() {\n\n    }\n\n\n    /**\n     * 空间中点到平面的距离\n     * @param\tplane 平面\n     * @param\tpoint 点\n     */\n    static distancePlaneToPoint(plane: Plane, point: Vector3): number {\n\n        var dot: number = Vector3.dot(plane.normal, point);\n        return dot + plane.distance;\n    }\n\n    /**\n     * 空间中点到包围盒的距离\n     * @param\tbox 包围盒\n     * @param\tpoint 点\n     */\n    static distanceBoxToPoint(box: BoundBox, point: Vector3): number {\n\n        var boxMin: Vector3 = box.min;\n        var boxMineX: number = boxMin.x;\n        var boxMineY: number = boxMin.y;\n        var boxMineZ: number = boxMin.z;\n\n        var boxMax: Vector3 = box.max;\n        var boxMaxeX: number = boxMax.x;\n        var boxMaxeY: number = boxMax.y;\n        var boxMaxeZ: number = boxMax.z;\n\n        var pointeX: number = point.x;\n        var pointeY: number = point.y;\n        var pointeZ: number = point.z;\n\n        var distance: number = 0;\n\n        if (pointeX < boxMineX)\n            distance += (boxMineX - pointeX) * (boxMineX - pointeX);\n        if (pointeX > boxMaxeX)\n            distance += (boxMaxeX - pointeX) * (boxMaxeX - pointeX);\n\n        if (pointeY < boxMineY)\n            distance += (boxMineY - pointeY) * (boxMineY - pointeY);\n        if (pointeY > boxMaxeY)\n            distance += (boxMaxeY - pointeY) * (boxMaxeY - pointeY);\n\n        if (pointeZ < boxMineZ)\n            distance += (boxMineZ - pointeZ) * (boxMineZ - pointeZ);\n        if (pointeZ > boxMaxeZ)\n            distance += (boxMaxeZ - pointeZ) * (boxMaxeZ - pointeZ);\n\n        return Math.sqrt(distance);\n    }\n\n    /**\n     * 空间中包围盒到包围盒的距离\n     * @param\tbox1 包围盒1\n     * @param\tbox2 包围盒2\n     */\n    static distanceBoxToBox(box1: BoundBox, box2: BoundBox): number {\n\n        var box1Mine: Vector3 = box1.min;\n        var box1MineX: number = box1Mine.x;\n        var box1MineY: number = box1Mine.y;\n        var box1MineZ: number = box1Mine.z;\n\n        var box1Maxe: Vector3 = box1.max;\n        var box1MaxeX: number = box1Maxe.x;\n        var box1MaxeY: number = box1Maxe.y;\n        var box1MaxeZ: number = box1Maxe.z;\n\n        var box2Mine: Vector3 = box2.min;\n        var box2MineX: number = box2Mine.x;\n        var box2MineY: number = box2Mine.y;\n        var box2MineZ: number = box2Mine.z;\n\n        var box2Maxe: Vector3 = box2.max;\n        var box2MaxeX: number = box2Maxe.x;\n        var box2MaxeY: number = box2Maxe.y;\n        var box2MaxeZ: number = box2Maxe.z;\n\n        var distance: number = 0;\n        var delta: number;\n\n        if (box1MineX > box2MaxeX) {\n\n            delta = box1MineX - box2MaxeX;\n            distance += delta * delta;\n        } else if (box2MineX > box1MaxeX) {\n\n            delta = box2MineX - box1MaxeX;\n            distance += delta * delta;\n        }\n\n        if (box1MineY > box2MaxeY) {\n\n            delta = box1MineY - box2MaxeY;\n            distance += delta * delta;\n        } else if (box2MineY > box1MaxeY) {\n\n            delta = box2MineY - box1MaxeY;\n            distance += delta * delta;\n        }\n\n        if (box1MineZ > box2MaxeZ) {\n\n            delta = box1MineZ - box2MaxeZ;\n            distance += delta * delta;\n        } else if (box2MineZ > box1MaxeZ) {\n\n            delta = box2MineZ - box1MaxeZ;\n            distance += delta * delta;\n        }\n\n        return Math.sqrt(distance);\n    }\n\n    /**\n     * 空间中点到包围球的距离\n     * @param\tsphere 包围球\n     * @param\tpoint  点\n     */\n    static distanceSphereToPoint(sphere: BoundSphere, point: Vector3): number {\n\n        var distance: number = Math.sqrt(Vector3.distanceSquared(sphere.center, point));\n        distance -= sphere.radius;\n\n        return Math.max(distance, 0);\n    }\n\n    /**\n     * 空间中包围球到包围球的距离\n     * @param\tsphere1 包围球1\n     * @param\tsphere2 包围球2\n     */\n    static distanceSphereToSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\n\n        var distance: number = Math.sqrt(Vector3.distanceSquared(sphere1.center, sphere2.center));\n        distance -= sphere1.radius + sphere2.radius;\n\n        return Math.max(distance, 0);\n    }\n\n\n    /**\n     * 空间中射线和三角面是否相交,输出距离\n     * @param\tray 射线\n     * @param\tvertex1 三角面顶点1\n     * @param\tvertex2\t三角面顶点2\n     * @param\tvertex3 三角面顶点3\n     * @param\tout 点和三角面的距离\n     * @return  是否相交\n     */\n    static intersectsRayAndTriangleRD(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: number): boolean {\n\n        var rayO: Vector3 = ray.origin;\n        var rayOeX: number = rayO.x;\n        var rayOeY: number = rayO.y;\n        var rayOeZ: number = rayO.z;\n\n        var rayD: Vector3 = ray.direction;\n        var rayDeX: number = rayD.x;\n        var rayDeY: number = rayD.y;\n        var rayDeZ: number = rayD.z;\n\n        var v1eX: number = vertex1.x;\n        var v1eY: number = vertex1.y;\n        var v1eZ: number = vertex1.z;\n\n        var v2eX: number = vertex2.x;\n        var v2eY: number = vertex2.y;\n        var v2eZ: number = vertex2.z;\n\n        var v3eX: number = vertex3.x;\n        var v3eY: number = vertex3.y;\n        var v3eZ: number = vertex3.z;\n\n        var _tempV30eX: number = CollisionUtils._tempV30.x;\n        var _tempV30eY: number = CollisionUtils._tempV30.y;\n        var _tempV30eZ: number = CollisionUtils._tempV30.z;\n\n        _tempV30eX = v2eX - v1eX;\n        _tempV30eY = v2eY - v1eY;\n        _tempV30eZ = v2eZ - v1eZ;\n\n        var _tempV31eX: number = CollisionUtils._tempV31.x;\n        var _tempV31eY: number = CollisionUtils._tempV31.y;\n        var _tempV31eZ: number = CollisionUtils._tempV31.z;\n\n        _tempV31eX = v3eX - v1eX;\n        _tempV31eY = v3eY - v1eY;\n        _tempV31eZ = v3eZ - v1eZ;\n\n        var _tempV32eX: number = CollisionUtils._tempV32.x;\n        var _tempV32eY: number = CollisionUtils._tempV32.y;\n        var _tempV32eZ: number = CollisionUtils._tempV32.z;\n\n        _tempV32eX = (rayDeY * _tempV31eZ) - (rayDeZ * _tempV31eY);\n        _tempV32eY = (rayDeZ * _tempV31eX) - (rayDeX * _tempV31eZ);\n        _tempV32eZ = (rayDeX * _tempV31eY) - (rayDeY * _tempV31eX);\n\n        var determinant: number = (_tempV30eX * _tempV32eX) + (_tempV30eY * _tempV32eY) + (_tempV30eZ * _tempV32eZ);\n\n        if (MathUtils3D.isZero(determinant)) {\n\n            out = 0;\n            return false;\n        }\n\n        var inversedeterminant: number = 1 / determinant;\n\n        var _tempV33eX: number = CollisionUtils._tempV33.x;\n        var _tempV33eY: number = CollisionUtils._tempV33.y;\n        var _tempV33eZ: number = CollisionUtils._tempV33.z;\n\n        _tempV33eX = rayOeX - v1eX;\n        _tempV33eY = rayOeY - v1eY;\n        _tempV33eZ = rayOeZ - v1eZ;\n\n        var triangleU: number = (_tempV33eX * _tempV32eX) + (_tempV33eY * _tempV32eY) + (_tempV33eZ * _tempV32eZ);\n        triangleU *= inversedeterminant;\n\n        if (triangleU < 0 || triangleU > 1) {\n\n            out = 0;\n            return false;\n        }\n\n        var _tempV34eX: number = CollisionUtils._tempV34.x;\n        var _tempV34eY: number = CollisionUtils._tempV34.y;\n        var _tempV34eZ: number = CollisionUtils._tempV34.z;\n\n        _tempV34eX = (_tempV33eY * _tempV30eZ) - (_tempV33eZ * _tempV30eY);\n        _tempV34eY = (_tempV33eZ * _tempV30eX) - (_tempV33eX * _tempV30eZ);\n        _tempV34eZ = (_tempV33eX * _tempV30eY) - (_tempV33eY * _tempV30eX);\n\n        var triangleV: number = ((rayDeX * _tempV34eX) + (rayDeY * _tempV34eY)) + (rayDeZ * _tempV34eZ);\n        triangleV *= inversedeterminant;\n\n        if (triangleV < 0 || triangleU + triangleV > 1) {\n\n            out = 0;\n            return false;\n        }\n\n        var raydistance: number = (_tempV31eX * _tempV34eX) + (_tempV31eY * _tempV34eY) + (_tempV31eZ * _tempV34eZ);\n        raydistance *= inversedeterminant;\n\n        if (raydistance < 0) {\n\n            out = 0;\n            return false;\n        }\n\n        out = raydistance;\n        return true;\n    }\n\n    /**\n     * 空间中射线和三角面是否相交,输出相交点\n     * @param\tray 射线\n     * @param\tvertex1 三角面顶点1\n     * @param\tvertex2\t三角面顶点2\n     * @param\tvertex3 三角面顶点3\n     * @param\tout 相交点\n     * @return  是否相交\n     */\n    static intersectsRayAndTriangleRP(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): boolean {\n\n        var distance: number;\n        if (!CollisionUtils.intersectsRayAndTriangleRD(ray, vertex1, vertex2, vertex3, distance)) {\n\n            Vector3.ZERO.cloneTo(out);\n            return false;\n        }\n\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\n        Vector3.add(ray.origin, CollisionUtils._tempV30, out);\n        return true;\n    }\n\n    /**\n     * 空间中射线和点是否相交\n     * @param\tsphere1 包围球1\n     * @param\tsphere2 包围球2\n     */\n    static intersectsRayAndPoint(ray: Ray, point: Vector3): boolean {\n\n        Vector3.subtract(ray.origin, point, CollisionUtils._tempV30);\n\n        var b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\n        var c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - MathUtils3D.zeroTolerance;\n\n        if (c > 0 && b > 0)\n            return false;\n        var discriminant: number = b * b - c;\n        if (discriminant < 0)\n            return false;\n        return true;\n    }\n\n    /**\n     * 空间中射线和射线是否相交\n     * @param\tray1 射线1\n     * @param\tray2 射线2\n     * @param\tout 相交点\n     */\n    static intersectsRayAndRay(ray1: Ray, ray2: Ray, out: Vector3): boolean {\n\n        var ray1o: Vector3 = ray1.origin;\n        var ray1oeX: number = ray1o.x;\n        var ray1oeY: number = ray1o.y;\n        var ray1oeZ: number = ray1o.z;\n\n        var ray1d: Vector3 = ray1.direction;\n        var ray1deX: number = ray1d.x;\n        var ray1deY: number = ray1d.y;\n        var ray1deZ: number = ray1d.z;\n\n        var ray2o: Vector3 = ray2.origin;\n        var ray2oeX: number = ray2o.x;\n        var ray2oeY: number = ray2o.y;\n        var ray2oeZ: number = ray2o.z;\n\n        var ray2d: Vector3 = ray2.direction;\n        var ray2deX: number = ray2d.x;\n        var ray2deY: number = ray2d.y;\n        var ray2deZ: number = ray2d.z;\n\n        Vector3.cross(ray1d, ray2d, CollisionUtils._tempV30);\n        var tempV3: Vector3 = CollisionUtils._tempV30;\n        var denominator: number = Vector3.scalarLength(CollisionUtils._tempV30);\n\n        if (MathUtils3D.isZero(denominator)) {\n\n            if (MathUtils3D.nearEqual(ray2oeX, ray1oeX) && MathUtils3D.nearEqual(ray2oeY, ray1oeY) && MathUtils3D.nearEqual(ray2oeZ, ray1oeZ)) {\n                Vector3.ZERO.cloneTo(out);\n                return true;\n            }\n        }\n\n        denominator = denominator * denominator;\n\n        var m11: number = ray2oeX - ray1oeX;\n        var m12: number = ray2oeY - ray1oeY;\n        var m13: number = ray2oeZ - ray1oeZ;\n        var m21: number = ray2deX;\n        var m22: number = ray2deY;\n        var m23: number = ray2deZ;\n        var m31: number = tempV3.x;\n        var m32: number = tempV3.y;\n        var m33: number = tempV3.z;\n\n        var dets: number = m11 * m22 * m33 + m12 * m23 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 - m13 * m22 * m31;\n\n        m21 = ray1deX;\n        m22 = ray1deY;\n        m23 = ray1deZ;\n\n\n        var s: number = dets / denominator;\n\n        Vector3.scale(ray1d, s, CollisionUtils._tempV30);\n        Vector3.scale(ray2d, s, CollisionUtils._tempV31);\n\n        Vector3.add(ray1o, CollisionUtils._tempV30, CollisionUtils._tempV32);\n        Vector3.add(ray2o, CollisionUtils._tempV31, CollisionUtils._tempV33);\n\n        var point1e: Vector3 = CollisionUtils._tempV32;\n        var point2e: Vector3 = CollisionUtils._tempV33;\n\n        if (!MathUtils3D.nearEqual(point2e.x, point1e.x) || !MathUtils3D.nearEqual(point2e.y, point1e.y) || !MathUtils3D.nearEqual(point2e.z, point1e.z)) {\n            Vector3.ZERO.cloneTo(out);\n            return false;\n        }\n\n        out = CollisionUtils._tempV32;\n        return true;\n    }\n\n    /**\n     * 空间中平面和三角面是否相交\n     * @param\tplane 平面\n     * @param\tvertex1 三角面顶点1\n     * @param\tvertex2 三角面顶点2\n     * @param\tvertex3 三角面顶点3\n     * @return  返回空间位置关系\n     */\n    static intersectsPlaneAndTriangle(plane: Plane, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\n\n        var test1: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex1);\n        var test2: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex2);\n        var test3: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex3);\n\n        if (test1 == Plane.PlaneIntersectionType_Front && test2 == Plane.PlaneIntersectionType_Front && test3 == Plane.PlaneIntersectionType_Front)\n            return Plane.PlaneIntersectionType_Front;\n\n        if (test1 == Plane.PlaneIntersectionType_Back && test2 == Plane.PlaneIntersectionType_Back && test3 == Plane.PlaneIntersectionType_Back)\n            return Plane.PlaneIntersectionType_Back;\n\n        return Plane.PlaneIntersectionType_Intersecting;\n    }\n\n    /**\n     * 射线和平面是否相交,并返回相交距离。\n     * @param\tray   射线。\n     * @param\tplane 平面。\n     * @return\t相交距离,-1为不相交。\n     */\n    static intersectsRayAndPlaneRD(ray: Ray, plane: Plane): number {\n        //Source: Real-Time Collision Detection by Christer Ericson\n        //Reference: Page 175\n        var planeNor: Vector3 = plane.normal;\n        var direction: number = Vector3.dot(planeNor, ray.direction);\n\n        if (Math.abs(direction) < MathUtils3D.zeroTolerance)\n            return -1;\n\n        var position: number = Vector3.dot(planeNor, ray.origin);\n        var distance: number = (-plane.distance - position) / direction;\n\n        if (distance < 0) {\n            if (distance < -MathUtils3D.zeroTolerance)\n                return -1;\n            distance = 0;\n        }\n        return distance;\n    }\n\n    /**\n     * 空间中射线和平面是否相交，并返回相交点。\n     * @param\tray   射线。\n     * @param\tplane 平面。\n     * @param\tout 相交点。\n     */\n    static intersectsRayAndPlaneRP(ray: Ray, plane: Plane, out: Vector3): boolean {\n        //Source: Real-Time Collision Detection by Christer Ericson\n        //Reference: Page 175\n        var distance: number = CollisionUtils.intersectsRayAndPlaneRD(ray, plane);\n        if (distance == -1) {\n            out.setValue(0, 0, 0);\n            return false;\n        }\n\n        var scaDis: Vector3 = CollisionUtils._tempV30;\n        Vector3.scale(ray.direction, distance, scaDis);\n        Vector3.add(ray.origin, scaDis, out);\n        return true;\n    }\n\n    /**\n     * 空间中射线和包围盒是否相交\n     * @param\tray 射线\n     * @param\tbox\t包围盒\n     * @param\tout 相交距离,如果为0,不相交\n     */\n    static intersectsRayAndBoxRD(ray: Ray, box: BoundBox): number {\n\n        var rayoe: Vector3 = ray.origin;\n        var rayoeX: number = rayoe.x;\n        var rayoeY: number = rayoe.y;\n        var rayoeZ: number = rayoe.z;\n\n        var rayde: Vector3 = ray.direction;\n        var raydeX: number = rayde.x;\n        var raydeY: number = rayde.y;\n        var raydeZ: number = rayde.z;\n\n        var boxMine: Vector3 = box.min;\n        var boxMineX: number = boxMine.x;\n        var boxMineY: number = boxMine.y;\n        var boxMineZ: number = boxMine.z;\n\n        var boxMaxe: Vector3 = box.max;\n        var boxMaxeX: number = boxMaxe.x;\n        var boxMaxeY: number = boxMaxe.y;\n        var boxMaxeZ: number = boxMaxe.z;\n\n        var out: number = 0;\n\n        var tmax: number = MathUtils3D.MaxValue;\n\n        if (MathUtils3D.isZero(raydeX)) {\n\n            if (rayoeX < boxMineX || rayoeX > boxMaxeX) {\n\n                //out = 0;\n                return -1;\n            }\n        } else {\n\n            var inverse: number = 1 / raydeX;\n            var t1: number = (boxMineX - rayoeX) * inverse;\n            var t2: number = (boxMaxeX - rayoeX) * inverse;\n\n            if (t1 > t2) {\n\n                var temp: number = t1;\n                t1 = t2;\n                t2 = temp;\n            }\n\n            out = Math.max(t1, out);\n            tmax = Math.min(t2, tmax);\n\n            if (out > tmax) {\n\n                //out = 0;\n                return -1;\n            }\n        }\n\n        if (MathUtils3D.isZero(raydeY)) {\n\n            if (rayoeY < boxMineY || rayoeY > boxMaxeY) {\n\n                //out = 0;\n                return -1;\n            }\n        } else {\n\n            var inverse1: number = 1 / raydeY;\n            var t3: number = (boxMineY - rayoeY) * inverse1;\n            var t4: number = (boxMaxeY - rayoeY) * inverse1;\n\n            if (t3 > t4) {\n\n                var temp1: number = t3;\n                t3 = t4;\n                t4 = temp1;\n            }\n\n            out = Math.max(t3, out);\n            tmax = Math.min(t4, tmax);\n\n            if (out > tmax) {\n\n                //out = 0;\n                return -1;\n            }\n        }\n\n        if (MathUtils3D.isZero(raydeZ)) {\n\n            if (rayoeZ < boxMineZ || rayoeZ > boxMaxeZ) {\n\n                //out = 0;\n                return -1;\n            }\n        } else {\n\n            var inverse2: number = 1 / raydeZ;\n            var t5: number = (boxMineZ - rayoeZ) * inverse2;\n            var t6: number = (boxMaxeZ - rayoeZ) * inverse2;\n\n            if (t5 > t6) {\n\n                var temp2: number = t5;\n                t5 = t6;\n                t6 = temp2;\n            }\n\n            out = Math.max(t5, out);\n            tmax = Math.min(t6, tmax);\n\n            if (out > tmax) {\n\n                //out = 0;\n                return -1;\n            }\n        }\n\n        return out;\n    }\n\n    /**\n     * 空间中射线和包围盒是否相交\n     * @param\tray 射线\n     * @param\tbox\t包围盒\n     * @param\tout 相交点\n     */\n    static intersectsRayAndBoxRP(ray: Ray, box: BoundBox, out: Vector3): number {\n\n        var distance: number = CollisionUtils.intersectsRayAndBoxRD(ray, box);\n        if (distance === -1) {\n\n            Vector3.ZERO.cloneTo(out);\n            return distance;\n        }\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\n        Vector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\n\n        CollisionUtils._tempV31.cloneTo(out);\n\n        return distance;\n    }\n\n    /**\n     * 空间中射线和包围球是否相交\n     * @param\tray    射线\n     * @param\tsphere 包围球\n     * @return\t相交距离,-1表示不相交\n     */\n    static intersectsRayAndSphereRD(ray: Ray, sphere: BoundSphere): number {\n\n        var sphereR: number = sphere.radius;\n        Vector3.subtract(ray.origin, sphere.center, CollisionUtils._tempV30);\n\n        var b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\n        var c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - (sphereR * sphereR);\n\n        if (c > 0 && b > 0) {\n            return -1;\n        }\n\n        var discriminant: number = b * b - c;\n\n        if (discriminant < 0) {\n            return -1;\n        }\n\n        var distance: number = -b - Math.sqrt(discriminant);\n\n        if (distance < 0)\n            distance = 0;\n\n        return distance;\n\n    }\n\n    /**\n     * 空间中射线和包围球是否相交\n     * @param\tray    射线\n     * @param\tsphere 包围球\n     * @param\tout    相交点\n     * @return  相交距离,-1表示不相交\n     */\n    static intersectsRayAndSphereRP(ray: Ray, sphere: BoundSphere, out: Vector3): number {\n        var distance: number = CollisionUtils.intersectsRayAndSphereRD(ray, sphere);\n        if (distance === -1) {\n            Vector3.ZERO.cloneTo(out);\n            return distance;\n        }\n\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\n        Vector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\n\n        CollisionUtils._tempV31.cloneTo(out);\n        return distance;\n    }\n\n    /**\n     * 空间中包围球和三角面是否相交\n     * @param\tsphere 包围球\n     * @param\tvertex1 三角面顶点1\n     * @param\tvertex2 三角面顶点2\n     * @param\tvertex3 三角面顶点3\n     * @return  返回是否相交\n     */\n    static intersectsSphereAndTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): boolean {\n\n        var sphereC: Vector3 = sphere.center;\n        var sphereR: number = sphere.radius;\n\n        CollisionUtils.closestPointPointTriangle(sphereC, vertex1, vertex2, vertex3, CollisionUtils._tempV30);\n        Vector3.subtract(CollisionUtils._tempV30, sphereC, CollisionUtils._tempV31);\n\n        var dot: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV31);\n\n        return dot <= sphereR * sphereR;\n    }\n\n    /**\n     * 空间中点和平面是否相交\n     * @param\tplane  平面\n     * @param\tpoint  点\n     * @return  碰撞状态\n     */\n    static intersectsPlaneAndPoint(plane: Plane, point: Vector3): number {\n        var distance: number = Vector3.dot(plane.normal, point) + plane.distance;\n        if (distance > 0)\n            return Plane.PlaneIntersectionType_Front;\n        if (distance < 0)\n            return Plane.PlaneIntersectionType_Back;\n        return Plane.PlaneIntersectionType_Intersecting;\n    }\n\n    /**\n     * 空间中平面和平面是否相交\n     * @param\tplane1 平面1\n     * @param\tplane2 平面2\n     * @return  是否相交\n     */\n    static intersectsPlaneAndPlane(plane1: Plane, plane2: Plane): boolean {\n\n        Vector3.cross(plane1.normal, plane2.normal, CollisionUtils._tempV30);\n\n        var denominator: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30);\n\n        if (MathUtils3D.isZero(denominator))\n            return false;\n\n        return true;\n    }\n\n    /**\n     * 空间中平面和平面是否相交\n     * @param\tplane1 平面1\n     * @param\tplane2 平面2\n     * @param\tline   相交线\n     * @return  是否相交\n     */\n    static intersectsPlaneAndPlaneRL(plane1: Plane, plane2: Plane, line: Ray): boolean {\n\n        var plane1nor: Vector3 = plane1.normal;\n        var plane2nor: Vector3 = plane2.normal;\n\n        Vector3.cross(plane1nor, plane2nor, CollisionUtils._tempV34);\n        var denominator: number = Vector3.dot(CollisionUtils._tempV34, CollisionUtils._tempV34);\n\n        if (MathUtils3D.isZero(denominator))\n            return false;\n\n        Vector3.scale(plane2nor, plane1.distance, CollisionUtils._tempV30);\n        Vector3.scale(plane1nor, plane2.distance, CollisionUtils._tempV31);\n        Vector3.subtract(CollisionUtils._tempV30, CollisionUtils._tempV31, CollisionUtils._tempV32);\n        Vector3.cross(CollisionUtils._tempV32, CollisionUtils._tempV34, CollisionUtils._tempV33);\n\n        Vector3.normalize(CollisionUtils._tempV34, CollisionUtils._tempV34);\n        line = new Ray(CollisionUtils._tempV33, CollisionUtils._tempV34);\n\n        return true;\n    }\n\n    /**\n     * 空间中平面和包围盒是否相交\n     * @param\tplane 平面\n     * @param   box  包围盒\n     * @return  碰撞状态\n     */\n    static intersectsPlaneAndBox(plane: Plane, box: BoundBox): number {\n\n        var planeD: number = plane.distance;\n\n        var planeNor: Vector3 = plane.normal;\n        var planeNoreX: number = planeNor.x;\n        var planeNoreY: number = planeNor.y;\n        var planeNoreZ: number = planeNor.z;\n\n        var boxMine: Vector3 = box.min;\n        var boxMineX: number = boxMine.x;\n        var boxMineY: number = boxMine.y;\n        var boxMineZ: number = boxMine.z;\n\n        var boxMaxe: Vector3 = box.max;\n        var boxMaxeX: number = boxMaxe.x;\n        var boxMaxeY: number = boxMaxe.y;\n        var boxMaxeZ: number = boxMaxe.z;\n\n        CollisionUtils._tempV30.x = (planeNoreX > 0) ? boxMineX : boxMaxeX;\n        CollisionUtils._tempV30.y = (planeNoreY > 0) ? boxMineY : boxMaxeY;\n        CollisionUtils._tempV30.z = (planeNoreZ > 0) ? boxMineZ : boxMaxeZ;\n\n        CollisionUtils._tempV31.x = (planeNoreX > 0) ? boxMaxeX : boxMineX;\n        CollisionUtils._tempV31.y = (planeNoreY > 0) ? boxMaxeY : boxMineY;\n        CollisionUtils._tempV31.z = (planeNoreZ > 0) ? boxMaxeZ : boxMineZ;\n\n        var distance: number = Vector3.dot(planeNor, CollisionUtils._tempV30);\n        if (distance + planeD > 0)\n            return Plane.PlaneIntersectionType_Front;\n\n        distance = Vector3.dot(planeNor, CollisionUtils._tempV31);\n        if (distance + planeD < 0)\n            return Plane.PlaneIntersectionType_Back;\n\n        return Plane.PlaneIntersectionType_Intersecting;\n    }\n\n    /**\n     * 空间中平面和包围球是否相交\n     * @param\tplane 平面\n     * @param   sphere 包围球\n     * @return  碰撞状态\n     */\n    static intersectsPlaneAndSphere(plane: Plane, sphere: BoundSphere): number {\n\n        var sphereR: number = sphere.radius;\n        var distance: number = Vector3.dot(plane.normal, sphere.center) + plane.distance;\n\n        if (distance > sphereR)\n            return Plane.PlaneIntersectionType_Front;\n        if (distance < -sphereR)\n            return Plane.PlaneIntersectionType_Back;\n        return Plane.PlaneIntersectionType_Intersecting;\n    }\n\n    /**\n     * 空间中包围盒和包围盒是否相交\n     * @param\tbox1 包围盒1\n     * @param   box2 包围盒2\n     * @return  是否相交\n     */\n    static intersectsBoxAndBox(box1: BoundBox, box2: BoundBox): boolean {\n\n        var box1Mine: Vector3 = box1.min;\n        var box1Maxe: Vector3 = box1.max;\n        var box2Mine: Vector3 = box2.min;\n        var box2Maxe: Vector3 = box2.max;\n\n        if (box1Mine.x > box2Maxe.x || box2Mine.x > box1Maxe.x)\n            return false;\n        if (box1Mine.y > box2Maxe.y || box2Mine.y > box1Maxe.y)\n            return false;\n        if (box1Mine.z > box2Maxe.z || box2Mine.z > box1Maxe.z)\n            return false;\n        return true;\n    }\n\n    /**\n     * 空间中包围盒和包围球是否相交\n     * @param\tbox 包围盒\n     * @param   sphere 包围球\n     * @return  是否相交\n     */\n    static intersectsBoxAndSphere(box: BoundBox, sphere: BoundSphere): boolean {\n        var center: Vector3 = sphere.center;\n        var radius: number = sphere.radius;\n        var nearest: Vector3 = CollisionUtils._tempV30;\n        Vector3.Clamp(center, box.min, box.max, nearest);\n        var distance: number = Vector3.distanceSquared(center, nearest);\n        return distance <= radius * radius;\n    }\n\n    /**\n     * 空间中包围球和包围球是否相交\n     * @param\tsphere1 包围球1\n     * @param   sphere2 包围球2\n     * @return  是否相交\n     */\n    static intersectsSphereAndSphere(sphere1: BoundSphere, sphere2: BoundSphere): boolean {\n\n        var radiisum: number = sphere1.radius + sphere2.radius;\n        return Vector3.distanceSquared(sphere1.center, sphere2.center) <= radiisum * radiisum;\n    }\n\n\n    /**\n     * 空间中包围盒是否包含另一个点\n     * @param\tbox 包围盒\n     * @param   point 点\n     * @return  位置关系:0 不想交,1 包含, 2 相交\n     */\n    static boxContainsPoint(box: BoundBox, point: Vector3): number {\n        var boxMine: Vector3 = box.min;\n        var boxMaxe: Vector3 = box.max;\n        if (boxMine.x <= point.x && boxMaxe.x >= point.x && boxMine.y <= point.y && boxMaxe.y >= point.y && boxMine.z <= point.z && boxMaxe.z >= point.z)\n            return ContainmentType.Contains;\n        return ContainmentType.Disjoint;\n    }\n\n    /**\n     * 空间中包围盒是否包含另一个包围盒\n     * @param\tbox1 包围盒1\n     * @param   box2 包围盒2\n     * @return  位置关系:0 不想交,1 包含, 2 相交\n     */\n    static boxContainsBox(box1: BoundBox, box2: BoundBox): number {\n\n        var box1Mine: Vector3 = box1.min;\n        var box1MineX: number = box1Mine.x;\n        var box1MineY: number = box1Mine.y;\n        var box1MineZ: number = box1Mine.z;\n\n        var box1Maxe: Vector3 = box1.max;\n        var box1MaxeX: number = box1Maxe.x;\n        var box1MaxeY: number = box1Maxe.y;\n        var box1MaxeZ: number = box1Maxe.z;\n\n        var box2Mine: Vector3 = box2.min;\n        var box2MineX: number = box2Mine.x;\n        var box2MineY: number = box2Mine.y;\n        var box2MineZ: number = box2Mine.z;\n\n        var box2Maxe: Vector3 = box2.max;\n        var box2MaxeX: number = box2Maxe.x;\n        var box2MaxeY: number = box2Maxe.y;\n        var box2MaxeZ: number = box2Maxe.z;\n\n        if (box1MaxeX < box2MineX || box1MineX > box2MaxeX)\n            return ContainmentType.Disjoint;\n\n        if (box1MaxeY < box2MineY || box1MineY > box2MaxeY)\n            return ContainmentType.Disjoint;\n\n        if (box1MaxeZ < box2MineZ || box1MineZ > box2MaxeZ)\n            return ContainmentType.Disjoint;\n\n        if (box1MineX <= box2MineX && box2MaxeX <= box1MaxeX && box1MineY <= box2MineY && box2MaxeY <= box1MaxeY && box1MineZ <= box2MineZ && box2MaxeZ <= box1MaxeZ) {\n            return ContainmentType.Contains;\n        }\n\n        return ContainmentType.Intersects;\n    }\n\n\n    /**\n     * 空间中包围盒是否包含另一个包围球\n     * @param\tbox 包围盒\n     * @param   sphere 包围球\n     * @return  位置关系:0 不想交,1 包含, 2 相交\n     */\n    static boxContainsSphere(box: BoundBox, sphere: BoundSphere): number {\n\n        var boxMin: Vector3 = box.min;\n        var boxMineX: number = boxMin.x;\n        var boxMineY: number = boxMin.y;\n        var boxMineZ: number = boxMin.z;\n\n        var boxMax: Vector3 = box.max;\n        var boxMaxeX: number = boxMax.x;\n        var boxMaxeY: number = boxMax.y;\n        var boxMaxeZ: number = boxMax.z;\n\n        var sphereC: Vector3 = sphere.center;\n        var sphereCeX: number = sphereC.x;\n        var sphereCeY: number = sphereC.y;\n        var sphereCeZ: number = sphereC.z;\n\n        var sphereR: number = sphere.radius;\n\n        Vector3.Clamp(sphereC, boxMin, boxMax, CollisionUtils._tempV30);\n        var distance: number = Vector3.distanceSquared(sphereC, CollisionUtils._tempV30);\n\n        if (distance > sphereR * sphereR)\n            return ContainmentType.Disjoint;\n\n        if ((((boxMineX + sphereR <= sphereCeX) && (sphereCeX <= boxMaxeX - sphereR)) && ((boxMaxeX - boxMineX > sphereR) &&\n            (boxMineY + sphereR <= sphereCeY))) && (((sphereCeY <= boxMaxeY - sphereR) && (boxMaxeY - boxMineY > sphereR)) &&\n                (((boxMineZ + sphereR <= sphereCeZ) && (sphereCeZ <= boxMaxeZ - sphereR)) && (boxMaxeZ - boxMineZ > sphereR))))\n            return ContainmentType.Contains;\n\n        return ContainmentType.Intersects;\n    }\n\n    /**\n     * 空间中包围球是否包含另一个点\n     * @param\tsphere 包围球\n     * @param   point 点\n     * @return  位置关系:0 不想交,1 包含, 2 相交\n     */\n    static sphereContainsPoint(sphere: BoundSphere, point: Vector3): number {\n\n        if (Vector3.distanceSquared(point, sphere.center) <= sphere.radius * sphere.radius)\n            return ContainmentType.Contains;\n\n        return ContainmentType.Disjoint;\n    }\n\n    /**\n     * 空间中包围球是否包含另一个三角面\n     * @param\tsphere\n     * @param\tvertex1 三角面顶点1\n     * @param\tvertex2 三角面顶点2\n     * @param\tvertex3 三角面顶点3\n     * @return  返回空间位置关系\n     */\n    static sphereContainsTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\n        var test1: number = CollisionUtils.sphereContainsPoint(sphere, vertex1);\n        var test2: number = CollisionUtils.sphereContainsPoint(sphere, vertex2);\n        var test3: number = CollisionUtils.sphereContainsPoint(sphere, vertex3);\n\n        if (test1 == ContainmentType.Contains && test2 == ContainmentType.Contains && test3 == ContainmentType.Contains)\n            return ContainmentType.Contains;\n\n        if (CollisionUtils.intersectsSphereAndTriangle(sphere, vertex1, vertex2, vertex3))\n            return ContainmentType.Intersects;\n\n        return ContainmentType.Disjoint;\n    }\n\n    /**\n     * 空间中包围球是否包含另一包围盒\n     * @param\tsphere 包围球\n     * @param   box 包围盒\n     * @return  位置关系:0 不想交,1 包含, 2 相交\n     */\n    static sphereContainsBox(sphere: BoundSphere, box: BoundBox): number {\n\n        var sphereC: Vector3 = sphere.center;\n        var sphereCeX: number = sphereC.x;\n        var sphereCeY: number = sphereC.y;\n        var sphereCeZ: number = sphereC.z;\n\n        var sphereR: number = sphere.radius;\n\n        var boxMin: Vector3 = box.min;\n        var boxMineX: number = boxMin.x;\n        var boxMineY: number = boxMin.y;\n        var boxMineZ: number = boxMin.z;\n\n        var boxMax: Vector3 = box.max;\n        var boxMaxeX: number = boxMax.x;\n        var boxMaxeY: number = boxMax.y;\n        var boxMaxeZ: number = boxMax.z;\n\n        var _tempV30e: Vector3 = CollisionUtils._tempV30;\n        var _tempV30eX: number = _tempV30e.x;\n        var _tempV30eY: number = _tempV30e.y;\n        var _tempV30eZ: number = _tempV30e.z;\n\n        if (!CollisionUtils.intersectsBoxAndSphere(box, sphere))\n            return ContainmentType.Disjoint;\n\n        var radiusSquared: number = sphereR * sphereR;\n\n        _tempV30eX = sphereCeX - boxMineX;\n        _tempV30eY = sphereCeY - boxMaxeY;\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        _tempV30eX = sphereCeX - boxMaxeX;\n        _tempV30eY = sphereCeY - boxMaxeY;\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        _tempV30eX = sphereCeX - boxMaxeX;\n        _tempV30eY = sphereCeY - boxMineY;\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        _tempV30eX = sphereCeX - boxMineX;\n        _tempV30eY = sphereCeY - boxMineY;\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        _tempV30eX = sphereCeX - boxMineX;\n        _tempV30eY = sphereCeY - boxMaxeY;\n        _tempV30eZ = sphereCeZ - boxMineZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        _tempV30eX = sphereCeX - boxMaxeX;\n        _tempV30eY = sphereCeY - boxMaxeY;\n        _tempV30eZ = sphereCeZ - boxMineZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        _tempV30eX = sphereCeX - boxMaxeX;\n        _tempV30eY = sphereCeY - boxMineY;\n        _tempV30eZ = sphereCeZ - boxMineZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        _tempV30eX = sphereCeX - boxMineX;\n        _tempV30eY = sphereCeY - boxMineY;\n        _tempV30eZ = sphereCeZ - boxMineZ;\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\n            return ContainmentType.Intersects;\n\n        return ContainmentType.Contains;\n\n    }\n\n    /**\n     * 空间中包围球是否包含另一包围球\n     * @param\tsphere1 包围球\n     * @param   sphere2 包围球\n     * @return  位置关系:0 不想交,1 包含, 2 相交\n     */\n    static sphereContainsSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\n\n        var sphere1R: number = sphere1.radius;\n        var sphere2R: number = sphere2.radius;\n\n        var distance: number = Vector3.distance(sphere1.center, sphere2.center);\n\n        if (sphere1R + sphere2R < distance)\n            return ContainmentType.Disjoint;\n\n        if (sphere1R - sphere2R < distance)\n            return ContainmentType.Intersects;\n\n        return ContainmentType.Contains;\n    }\n\n\n    /**\n     * 空间中点与三角面的最近点\n     * @param\tpoint 点\n     * @param\tvertex1 三角面顶点1\n     * @param\tvertex2\t三角面顶点2\n     * @param\tvertex3 三角面顶点3\n     * @param\tout 最近点\n     */\n    static closestPointPointTriangle(point: Vector3, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): void {\n\n        Vector3.subtract(vertex2, vertex1, CollisionUtils._tempV30);\n        Vector3.subtract(vertex3, vertex1, CollisionUtils._tempV31);\n\n        Vector3.subtract(point, vertex1, CollisionUtils._tempV32);\n        Vector3.subtract(point, vertex2, CollisionUtils._tempV33);\n        Vector3.subtract(point, vertex3, CollisionUtils._tempV34);\n\n        var d1: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV32);\n        var d2: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV32);\n        var d3: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV33);\n        var d4: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV33);\n        var d5: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV34);\n        var d6: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV34);\n\n        if (d1 <= 0 && d2 <= 0) {\n            vertex1.cloneTo(out);\n            return;\n        }\n\n        if (d3 >= 0 && d4 <= d3) {\n            vertex2.cloneTo(out);\n            return;\n        }\n\n        var vc: number = d1 * d4 - d3 * d2;\n        if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n            var v: number = d1 / (d1 - d3);\n            Vector3.scale(CollisionUtils._tempV30, v, out);\n            Vector3.add(vertex1, out, out);\n            return;\n        }\n\n        if (d6 >= 0 && d5 <= d6) {\n            vertex3.cloneTo(out);\n            return;\n        }\n\n        var vb: number = d5 * d2 - d1 * d6;\n        if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n            var w: number = d2 / (d2 - d6);\n            Vector3.scale(CollisionUtils._tempV31, w, out);\n            Vector3.add(vertex1, out, out);\n            return;\n        }\n\n        var va: number = d3 * d6 - d5 * d4;\n        if (va <= 0 && (d4 - d3) >= 0 && (d5 - d6) >= 0) {\n            var w3: number = (d4 - d3) / ((d4 - d3) + (d5 - d6));\n            Vector3.subtract(vertex3, vertex2, out);\n            Vector3.scale(out, w3, out);\n            Vector3.add(vertex2, out, out);\n            return;\n        }\n\n        var denom: number = 1 / (va + vb + vc);\n        var v2: number = vb * denom;\n        var w2: number = vc * denom;\n        Vector3.scale(CollisionUtils._tempV30, v2, CollisionUtils._tempV35);\n        Vector3.scale(CollisionUtils._tempV31, w2, CollisionUtils._tempV36);\n        Vector3.add(CollisionUtils._tempV35, CollisionUtils._tempV36, out);\n        Vector3.add(vertex1, out, out);\n    }\n\n    /**\n     * 空间中平面与一点的最近点\n     * @param\tplane 平面\n     * @param\tpoint 点\n     * @param\tout 最近点\n     */\n    static closestPointPlanePoint(plane: Plane, point: Vector3, out: Vector3): void {\n\n        var planeN: Vector3 = plane.normal;\n        var t: number = Vector3.dot(planeN, point) - plane.distance;\n\n        Vector3.scale(planeN, t, CollisionUtils._tempV30);\n        Vector3.subtract(point, CollisionUtils._tempV30, out);\n    }\n\n    /**\n     * 空间中包围盒与一点的最近点\n     * @param\tbox 包围盒\n     * @param\tpoint 点\n     * @param\tout 最近点\n     */\n    static closestPointBoxPoint(box: BoundBox, point: Vector3, out: Vector3): void {\n        Vector3.max(point, box.min, CollisionUtils._tempV30);\n        Vector3.min(CollisionUtils._tempV30, box.max, out);\n    }\n\n    /**\n     * 空间中包围球与一点的最近点\n     * @param\tsphere 包围球\n     * @param\tpoint 点\n     * @param\tout 最近点\n     */\n    static closestPointSpherePoint(sphere: BoundSphere, point: Vector3, out: Vector3): void {\n        var sphereC: Vector3 = sphere.center;\n\n        Vector3.subtract(point, sphereC, out);\n        Vector3.normalize(out, out);\n\n        Vector3.scale(out, sphere.radius, out);\n        Vector3.add(out, sphereC, out);\n    }\n\n    /**\n     * 空间中包围球与包围球的最近点\n     * @param\tsphere1 包围球1\n     * @param\tsphere2 包围球2\n     * @param\tout 最近点\n     */\n    static closestPointSphereSphere(sphere1: BoundSphere, sphere2: BoundSphere, out: Vector3): void {\n        var sphere1C: Vector3 = sphere1.center;\n\n        Vector3.subtract(sphere2.center, sphere1C, out);\n        Vector3.normalize(out, out);\n\n        Vector3.scale(out, sphere1.radius, out);\n        Vector3.add(out, sphere1C, out);\n    }\n\n}\n\n\n\n","import { Plane } from \"./Plane\";\nimport { CollisionUtils } from \"./CollisionUtils\";\nimport { ContainmentType } from \"./ContainmentType\";\nimport { BoundBox } from \"./BoundBox\";\nimport { BoundSphere } from \"./BoundSphere\";\nimport { IClone } from \"../../utils/IClone\";\nimport { Bounds } from \"./Bounds\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * 锥体角点。\n */\nexport enum FrustumCorner {\n\tFarBottomLeft = 0,\n\tFarTopLeft = 1,\n\tFarTopRight = 2,\n\tFarBottomRight = 3,\n\tnearBottomLeft = 4,\n\tnearTopLeft = 5,\n\tnearTopRight = 6,\n\tnearBottomRight = 7,\n\tunknown = 8\n}\n\n\n/**\n * <code>BoundFrustum</code> 类用于创建锥截体。\n */\nexport class BoundFrustum implements IClone {\n\t/** @internal */\n\tprivate static _tempV30: Vector3 = new Vector3();\n\t/** @internal */\n\tprivate static _tempV31: Vector3 = new Vector3();\n\t/** @internal */\n\tprivate static _tempV32: Vector3 = new Vector3();\n\t/** @internal */\n\tprivate static _tempV33: Vector3 = new Vector3();\n\t/** @internal */\n\tprivate static _tempV34: Vector3 = new Vector3();\n\t/** @internal */\n\tprivate static _tempV35: Vector3 = new Vector3();\n\t/** @internal */\n\tprivate static _tempV36: Vector3 = new Vector3();\n\n\t/**\n\t * 根据矩阵获取6个包围平面。\n\t * @param  m 描述矩阵。\n\t * @param  np 近平面。\n\t * @param  fp 远平面。\n\t * @param  lp 左平面。\n\t * @param  rp 右平面。\n\t * @param  tp 顶平面。\n\t * @param  bp 底平面。\n\t */\n\tstatic getPlanesFromMatrix(m: Matrix4x4, np: Plane, fp: Plane, lp: Plane, rp: Plane, tp: Plane, bp: Plane): void {\n\t\tvar matrixE: Float32Array = m.elements;\n\t\tvar m11: number = matrixE[0];\n\t\tvar m12: number = matrixE[1];\n\t\tvar m13: number = matrixE[2];\n\t\tvar m14: number = matrixE[3];\n\t\tvar m21: number = matrixE[4];\n\t\tvar m22: number = matrixE[5];\n\t\tvar m23: number = matrixE[6];\n\t\tvar m24: number = matrixE[7];\n\t\tvar m31: number = matrixE[8];\n\t\tvar m32: number = matrixE[9];\n\t\tvar m33: number = matrixE[10];\n\t\tvar m34: number = matrixE[11];\n\t\tvar m41: number = matrixE[12];\n\t\tvar m42: number = matrixE[13];\n\t\tvar m43: number = matrixE[14];\n\t\tvar m44: number = matrixE[15];\n\n\t\t//near\n\t\tvar nearNorE: Vector3 = np.normal;\n\t\tnearNorE.x = m13;\n\t\tnearNorE.y = m23;\n\t\tnearNorE.z = m33;\n\t\tnp.distance = m43;\n\t\tnp.normal = nearNorE;\n\t\tnp.normalize();\n\n\t\t//far\n\t\tvar farNorE: Vector3 = fp.normal;\n\t\tfarNorE.x = m14 - m13;\n\t\tfarNorE.y = m24 - m23;\n\t\tfarNorE.z = m34 - m33;\n\t\tfp.distance = m44 - m43;\n\t\tfp.normal = farNorE;\n\t\tfp.normalize();\n\n\t\t//left\n\t\tvar leftNorE: Vector3 = lp.normal;\n\t\tleftNorE.x = m14 + m11;\n\t\tleftNorE.y = m24 + m21;\n\t\tleftNorE.z = m34 + m31;\n\t\tlp.distance = m44 + m41;\n\t\tlp.normal = leftNorE;\n\t\tlp.normalize();\n\n\t\t//right\n\t\tvar rightNorE: Vector3 = rp.normal;\n\t\trightNorE.x = m14 - m11;\n\t\trightNorE.y = m24 - m21;\n\t\trightNorE.z = m34 - m31;\n\t\trp.distance = m44 - m41;\n\t\trp.normal = rightNorE;\n\t\trp.normalize();\n\n\t\t//top\n\t\tvar topNorE: Vector3 = tp.normal;\n\t\ttopNorE.x = m14 - m12;\n\t\ttopNorE.y = m24 - m22;\n\t\ttopNorE.z = m34 - m32;\n\t\ttp.distance = m44 - m42;\n\t\ttp.normal = topNorE;\n\t\ttp.normalize();\n\n\t\t//bottom\n\t\tvar bottomNorE: Vector3 = bp.normal;\n\t\tbottomNorE.x = m14 + m12;\n\t\tbottomNorE.y = m24 + m22;\n\t\tbottomNorE.z = m34 + m32;\n\t\tbp.distance = m44 + m42;\n\t\tbp.normal = bottomNorE;\n\t\tbp.normalize();\n\t}\n\n\t/** @internal */\n\tprotected _matrix: Matrix4x4;\n\t/** @internal */\n\tprotected _near: Plane;\n\t/** @internal */\n\tprotected _far: Plane;\n\t/** @internal */\n\tprotected _left: Plane;\n\t/** @internal */\n\tprotected _right: Plane;\n\t/** @internal */\n\tprotected _top: Plane;\n\t/** @internal */\n\tprotected _bottom: Plane;\n\n\t/**\n\t * 创建一个 <code>BoundFrustum</code> 实例。\n\t * @param\tmatrix 锥截体的描述4x4矩阵。\n\t */\n\tconstructor(matrix: Matrix4x4) {\n\t\tthis._matrix = matrix;\n\t\tthis.initBoundingPlane();\n\t}\n\n\tprotected initBoundingPlane() {\n\t\tthis._near = new Plane();\n\t\tthis._far = new Plane();\n\t\tthis._left = new Plane();\n\t\tthis._right = new Plane();\n\t\tthis._top = new Plane();\n\t\tthis._bottom = new Plane();\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\n\t}\n\n\t/**\n\t * 描述矩阵。\n\t */\n\tget matrix(): Matrix4x4 {\n\t\treturn this._matrix;\n\t}\n\n\tset matrix(matrix: Matrix4x4) {\n\t\tmatrix.cloneTo(this._matrix)\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\n\t}\n\n\t/**\n\t * 近平面。\n\t */\n\tget near(): Plane {\n\t\treturn this._near;\n\t}\n\n\t/**\n\t * 远平面。\n\t */\n\tget far(): Plane {\n\t\treturn this._far;\n\t}\n\n\t/**\n\t * 左平面。\n\t */\n\tget left(): Plane {\n\t\treturn this._left;\n\t}\n\n\t/**\n\t * 右平面。\n\t */\n\tget right(): Plane {\n\t\treturn this._right;\n\t}\n\n\t/**\n\t * 顶平面。\n\t */\n\tget top(): Plane {\n\t\treturn this._top;\n\t}\n\n\t/**\n\t * 底平面。\n\t */\n\tget bottom(): Plane {\n\t\treturn this._bottom;\n\t}\n\n\t/**\n\t * 判断是否与其他锥截体相等。\n\t * @param\tother 锥截体。\n\t */\n\tequalsBoundFrustum(other: BoundFrustum): boolean {\n\t\treturn this._matrix.equalsOtherMatrix(other.matrix)\n\t}\n\n\t/**\n\t * 判断是否与其他对象相等。\n\t * @param\tobj 对象。\n\t */\n\tequalsObj(obj: any): boolean {\n\t\tif (obj instanceof BoundFrustum) {\n\t\t\tvar bf: BoundFrustum = (<BoundFrustum>obj);\n\t\t\treturn this.equalsBoundFrustum(bf);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 获取锥截体的任意一平面。\n\t * 0:近平面\n\t * 1:远平面\n\t * 2:左平面\n\t * 3:右平面\n\t * 4:顶平面\n\t * 5:底平面\n\t * @param\tindex 索引。\n\t */\n\tgetPlane(index: number): Plane {\n\t\tswitch (index) {\n\t\t\tcase 0:\n\t\t\t\treturn this._near;\n\t\t\tcase 1:\n\t\t\t\treturn this._far;\n\t\t\tcase 2:\n\t\t\t\treturn this._left;\n\t\t\tcase 3:\n\t\t\t\treturn this._right;\n\t\t\tcase 4:\n\t\t\t\treturn this._top;\n\t\t\tcase 5:\n\t\t\t\treturn this._bottom;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * 锥截体三个相交平面的交点。\n\t * @param  p1  平面1。\n\t * @param  p2  平面2。\n\t * @param  p3  平面3。\n\t */\n\tstatic get3PlaneInterPoint(p1: Plane, p2: Plane, p3: Plane, out: Vector3): void {\n\t\tvar p1Nor: Vector3 = p1.normal;\n\t\tvar p2Nor: Vector3 = p2.normal;\n\t\tvar p3Nor: Vector3 = p3.normal;\n\n\t\tVector3.cross(p2Nor, p3Nor, BoundFrustum._tempV30);\n\t\tVector3.cross(p3Nor, p1Nor, BoundFrustum._tempV31);\n\t\tVector3.cross(p1Nor, p2Nor, BoundFrustum._tempV32);\n\n\t\tvar a: number = Vector3.dot(p1Nor, BoundFrustum._tempV30);\n\t\tvar b: number = Vector3.dot(p2Nor, BoundFrustum._tempV31);\n\t\tvar c: number = Vector3.dot(p3Nor, BoundFrustum._tempV32);\n\n\t\tVector3.scale(BoundFrustum._tempV30, -p1.distance / a, BoundFrustum._tempV33);\n\t\tVector3.scale(BoundFrustum._tempV31, -p2.distance / b, BoundFrustum._tempV34);\n\t\tVector3.scale(BoundFrustum._tempV32, -p3.distance / c, BoundFrustum._tempV35);\n\n\t\tVector3.add(BoundFrustum._tempV33, BoundFrustum._tempV34, BoundFrustum._tempV36);\n\t\tVector3.add(BoundFrustum._tempV35, BoundFrustum._tempV36, out);\n\t}\n\n\t/**\n\t * 锥截体的8个顶点。\n\t * @param  corners  返回顶点的输出队列。\n\t */\n\tgetCorners(corners: Vector3[]): void {\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._right, corners[FrustumCorner.nearBottomRight]);\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._right, corners[FrustumCorner.nearTopRight]);\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._left, corners[FrustumCorner.nearTopLeft]);\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._left, corners[FrustumCorner.nearBottomLeft]);\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._right, corners[FrustumCorner.FarBottomRight]);\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._right, corners[FrustumCorner.FarTopRight]);\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._left, corners[FrustumCorner.FarTopLeft]);\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._left, corners[FrustumCorner.FarBottomLeft]);\n\t}\n\n\t/**\n\t * 与点的关系。\n\t * @param  point  点。\n\t * @returns 包涵:1,相交:2,不相交:0\n\t */\n\tcontainsPoint(point: Vector3): number {\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\n\n\t\tfor (var i: number = 0; i < 6; i++) {\n\n\t\t\tswitch (i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._near, point);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._far, point);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._left, point);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._right, point);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._top, point);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._bottom, point);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tswitch (planeResult) {\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\n\t\t\t\t\treturn ContainmentType.Disjoint;\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tswitch (result) {\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\n\t\t\t\treturn ContainmentType.Intersects;\n\t\t\tdefault:\n\t\t\t\treturn ContainmentType.Contains;\n\t\t}\n\t}\n\n\t/**\n\t * 是否与包围盒交叉。\n\t * @param box 包围盒。\n\t * @returns boolean 是否相交\n\t */\n\tintersects(box: BoundBox|Bounds): boolean {\n\t\tvar min: Vector3 = box.min;\n\t\tvar max: Vector3 = box.max;\n\t\tvar minX: number = min.x;\n\t\tvar minY: number = min.y;\n\t\tvar minZ: number = min.z;\n\t\tvar maxX: number = max.x;\n\t\tvar maxY: number = max.y;\n\t\tvar maxZ: number = max.z;\n\n\t\tvar nearNormal: Vector3 = this._near.normal;\n\t\tif (this._near.distance + (nearNormal.x * (nearNormal.x < 0 ? minX : maxX)) + (nearNormal.y * (nearNormal.y < 0 ? minY : maxY)) + (nearNormal.z * (nearNormal.z < 0 ? minZ : maxZ)) < 0)\n\t\t\treturn false;\n\n\t\tvar leftNormal: Vector3 = this._left.normal;\n\t\tif (this._left.distance + (leftNormal.x * (leftNormal.x < 0 ? minX : maxX)) + (leftNormal.y * (leftNormal.y < 0 ? minY : maxY)) + (leftNormal.z * (leftNormal.z < 0 ? minZ : maxZ)) < 0)\n\t\t\treturn false\n\n\t\tvar rightNormal: Vector3 = this._right.normal;\n\t\tif (this._right.distance + (rightNormal.x * (rightNormal.x < 0 ? minX : maxX)) + (rightNormal.y * (rightNormal.y < 0 ? minY : maxY)) + (rightNormal.z * (rightNormal.z < 0 ? minZ : maxZ)) < 0)\n\t\t\treturn false;\n\n\t\tvar bottomNormal: Vector3 = this._bottom.normal;\n\t\tif (this._bottom.distance + (bottomNormal.x * (bottomNormal.x < 0 ? minX : maxX)) + (bottomNormal.y * (bottomNormal.y < 0 ? minY : maxY)) + (bottomNormal.z * (bottomNormal.z < 0 ? minZ : maxZ)) < 0)\n\t\t\treturn false;\n\n\t\tvar topNormal: Vector3 = this._top.normal;\n\t\tif (this._top.distance + (topNormal.x * (topNormal.x < 0 ? minX : maxX)) + (topNormal.y * (topNormal.y < 0 ? minY : maxY)) + (topNormal.z * (topNormal.z < 0 ? minZ : maxZ)) < 0)\n\t\t\treturn false;\n\n\t\t// Can ignore far plane when distant object culling is handled by another mechanism\n\t\tvar farNormal: Vector3 = this._far.normal;\n\t\tif (this._far.distance + (farNormal.x * (farNormal.x < 0 ? minX : maxX)) + (farNormal.y * (farNormal.y < 0 ? minY : maxY)) + (farNormal.z * (farNormal.z < 0 ? minZ : maxZ)) < 0)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * 与包围盒的位置关系。\n\t * @param  box  包围盒。\n\t * @returns 包涵:1,相交:2,不相交:0\n\t */\n\tcontainsBoundBox(box: BoundBox|Bounds): number {\n\t\tvar p: Vector3 = BoundFrustum._tempV30, n: Vector3 = BoundFrustum._tempV31;\n\t\tvar boxMin: Vector3 = box.min;\n\t\tvar boxMax: Vector3 = box.max;\n\t\tvar result: number = ContainmentType.Contains;\n\t\tfor (var i: number = 0; i < 6; i++) {\n\t\t\tvar plane: Plane = this.getPlane(i);\n\t\t\tvar planeNor: Vector3 = plane.normal;\n\n\t\t\tif (planeNor.x >= 0) {\n\t\t\t\tp.x = boxMax.x;\n\t\t\t\tn.x = boxMin.x;\n\t\t\t} else {\n\t\t\t\tp.x = boxMin.x;\n\t\t\t\tn.x = boxMax.x;\n\t\t\t}\n\t\t\tif (planeNor.y >= 0) {\n\t\t\t\tp.y = boxMax.y;\n\t\t\t\tn.y = boxMin.y;\n\t\t\t} else {\n\t\t\t\tp.y = boxMin.y;\n\t\t\t\tn.y = boxMax.y;\n\t\t\t}\n\t\t\tif (planeNor.z >= 0) {\n\t\t\t\tp.z = boxMax.z;\n\t\t\t\tn.z = boxMin.z;\n\t\t\t} else {\n\t\t\t\tp.z = boxMin.z;\n\t\t\t\tn.z = boxMax.z;\n\t\t\t}\n\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\n\t\t\t\treturn ContainmentType.Disjoint;\n\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\n\t\t\t\tresult = ContainmentType.Intersects;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * 与包围球的位置关系\n\t * @param  sphere  包围球。\n\t * @returns 包涵:1,相交:2,不相交:0\n\t */\n\tcontainsBoundSphere(sphere: BoundSphere): number {\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\n\t\tfor (var i: number = 0; i < 6; i++) {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._near, sphere);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._far, sphere);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._left, sphere);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._right, sphere);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._top, sphere);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._bottom, sphere);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tswitch (planeResult) {\n\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\n\t\t\t\t\treturn ContainmentType.Disjoint;\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tswitch (result) {\n\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\n\t\t\t\treturn ContainmentType.Intersects;\n\t\t\tdefault:\n\t\t\t\treturn ContainmentType.Contains;\n\t\t}\n\t}\n\n\tcloneTo(dest: BoundFrustum) {\n\t\tdest.matrix = this.matrix;\n\t}\n\n\tclone(): BoundFrustum {\n\t\tlet dest = new BoundFrustum(new Matrix4x4);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n}\n\n\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n/**\n * <code>Viewport</code> 类用于创建视口。\n */\nexport class Viewport {\n\t/** @internal */\n\tstatic _tempMatrix4x4: Matrix4x4 = new Matrix4x4();\n\tstatic _tempViewport: Viewport = new Viewport(0, 0, 0, 0);\n\t/**X轴坐标*/\n\tx: number;\n\t/**Y轴坐标*/\n\ty: number;\n\t/**宽度*/\n\twidth: number;\n\t/**高度*/\n\theight: number;\n\t/**最小深度*/\n\tminDepth: number;\n\t/**最大深度*/\n\tmaxDepth: number;\n\n\t/**\n\t * 创建一个 <code>Viewport</code> 实例。\n\t * @param\tx x坐标。\n\t * @param\ty y坐标。\n\t * @param\twidth 宽度。\n\t * @param\theight 高度。\n\t */\n\tconstructor(x?: number, y?: number, width?: number, height?: number) {\n\t\tthis.minDepth = 0.0;\n\t\tthis.maxDepth = 1.0;\n\n\t\tthis.x = x ?? 0;\n\t\tthis.y = y ?? 0;\n\t\tthis.width = width ?? 0;\n\t\tthis.height = height ?? 0;\n\t}\n\n\t/**\n\t * 投影一个三维向量到视口空间。\n\t * @param\tsource 三维向量。\n\t * @param\tmatrix 变换矩阵。\n\t * @param\tout x、y、z为视口空间坐标,透视投影下w为相对于变换矩阵的z轴坐标。\n\t */\n\tproject(source: Vector3, matrix: Matrix4x4, out: Vector4): void {\n\t\tVector3.transformV3ToV4(source, matrix, out);\n\t\tvar x: number = out.x, y: number = out.y, z: number = out.z;\n\t\tvar w: number = out.w;\n\t\tif (w !== 1.0) {\n\t\t\tx = x / w;\n\t\t\ty = y / w;\n\t\t\tz = z / w;\n\t\t}\n\t\tout.x = (x + 1.0) * 0.5 * this.width + this.x;\n\t\tout.y = (-y + 1.0) * 0.5 * this.height + this.y;\n\t\tout.z = z * (this.maxDepth - this.minDepth) + this.minDepth;\n\t}\n\n\t/**\n\t * 反变换一个三维向量。\n\t * @param\tsource 源三维向量。\n\t * @param\tmatrix 变换矩阵。\n\t * @param\tout 输出三维向量。\n\t */\n\tunprojectFromMat(source: Vector3, matrix: Matrix4x4, out: Vector3): void {\n\t\tvar matrixEleme: Float32Array = matrix.elements;\n\n\t\tout.x = (((source.x - this.x) / this.width) * 2.0) - 1.0;\n\t\tout.y = -((((source.y - this.y) / this.height) * 2.0) - 1.0);\n\t\tout.z = (source.z - this.minDepth) / (this.maxDepth - this.minDepth);\n\t\tvar a: number = (((out.x * matrixEleme[3]) + (out.y * matrixEleme[7])) + (out.z * matrixEleme[11])) + matrixEleme[15];\n\t\tVector3.transformV3ToV3(out, matrix, out);\n\t\tif (a !== 1.0) {\n\t\t\tout.x = out.x / a;\n\t\t\tout.y = out.y / a;\n\t\t\tout.z = out.z / a;\n\t\t}\n\t}\n\n\t/**\n\t * 反变换一个三维向量。\n\t * @param\tsource 源三维向量。\n\t * @param\tprojection  透视投影矩阵。\n\t * @param\tview 视图矩阵。\n\t * @param\tworld 世界矩阵,可设置为null。\n\t * @param   out 输出向量。\n\t */\n\tunprojectFromWVP(source: Vector3, projection: Matrix4x4, view: Matrix4x4, world: Matrix4x4, out: Vector3): void {\n\n\t\tMatrix4x4.multiply(projection, view, Viewport._tempMatrix4x4);\n\t\t(world) && (Matrix4x4.multiply(Viewport._tempMatrix4x4, world, Viewport._tempMatrix4x4));\n\t\tViewport._tempMatrix4x4.invert(Viewport._tempMatrix4x4);\n\t\tthis.unprojectFromMat(source, Viewport._tempMatrix4x4, out);\n\t}\n\n\tset(x: number, y: number, width: number, height: number) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\t/**\n\t * 克隆\n\t * @param\tout\n\t */\n\tcloneTo(out: Viewport): void {\n\t\tout.x = this.x;\n\t\tout.y = this.y;\n\t\tout.width = this.width;\n\t\tout.height = this.height;\n\t\tout.minDepth = this.minDepth;\n\t\tout.maxDepth = this.maxDepth;\n\t}\n}\n\n\n","\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Plane } from \"../math/Plane\"\nimport { Ray } from \"../math/Ray\"\n\nimport { Viewport } from \"../math/Viewport\"\n\n/**\n * <code>Picker</code> 类用于创建拾取。\n */\nexport class Picker {\n\tprivate static _tempVector30: Vector3 = new Vector3();\n\tprivate static _tempVector31: Vector3 = new Vector3();\n\tprivate static _tempVector32: Vector3 = new Vector3();\n\tprivate static _tempVector33: Vector3 = new Vector3();\n\tprivate static _tempVector34: Vector3 = new Vector3();\n\n\t/**\n\t * 创建一个 <code>Picker</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n\t/**\n\t * 计算鼠标生成的射线。\n\t * @param\tpoint 鼠标位置。\n\t * @param\tviewPort 视口。\n\t * @param\tprojectionMatrix 透视投影矩阵。\n\t * @param\tviewMatrix 视图矩阵。\n\t * @param\tworld 世界偏移矩阵。\n\t * @return  out  输出射线。\n\t */\n\tstatic calculateCursorRay(point: Vector2, viewPort: Viewport, projectionMatrix: Matrix4x4, viewMatrix: Matrix4x4, world: Matrix4x4, out: Ray): void {\n\n\t\tvar x: number = point.x;\n\t\tvar y: number = point.y;\n\n\t\tvar nearSource: Vector3 = Picker._tempVector30;\n\t\tvar nerSourceE: Vector3 = nearSource;\n\t\tnerSourceE.x = x;\n\t\tnerSourceE.y = y;\n\t\tnerSourceE.z = viewPort.minDepth;\n\n\t\tvar farSource: Vector3 = Picker._tempVector31;\n\t\tvar farSourceE: Vector3 = farSource;\n\t\tfarSourceE.x = x;\n\t\tfarSourceE.y = y;\n\t\tfarSourceE.z = viewPort.maxDepth;\n\n\t\tvar nearPoint: Vector3 = out.origin;\n\t\tvar farPoint: Vector3 = Picker._tempVector32;\n\n\t\tviewPort.unprojectFromWVP(nearSource, projectionMatrix, viewMatrix, world, nearPoint);\n\t\tviewPort.unprojectFromWVP(farSource, projectionMatrix, viewMatrix, world, farPoint);\n\n\t\tvar outDire: Vector3 = out.direction;\n\t\toutDire.x = farPoint.x - nearPoint.x;\n\t\toutDire.y = farPoint.y - nearPoint.y;\n\t\toutDire.z = farPoint.z - nearPoint.z;\n\t\tVector3.normalize(out.direction, out.direction);\n\t}\n\n\t/**\n\t * 计算射线和三角形碰撞并返回碰撞距离。\n\t * @param\tray 射线。\n\t * @param\tvertex1 顶点1。\n\t * @param\tvertex2 顶点2。\n\t * @param\tvertex3 顶点3。\n\t * @return   射线距离三角形的距离，返回Number.NaN则不相交。\n\t */\n\tstatic rayIntersectsTriangle(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\n\n\t\tvar result: number;\n\t\t// Compute vectors along two edges of the triangle.\n\t\tvar edge1: Vector3 = Picker._tempVector30, edge2: Vector3 = Picker._tempVector31;\n\n\t\tVector3.subtract(vertex2, vertex1, edge1);\n\t\tVector3.subtract(vertex3, vertex1, edge2);\n\n\t\t// Compute the determinant.\n\t\tvar directionCrossEdge2: Vector3 = Picker._tempVector32;\n\t\tVector3.cross(ray.direction, edge2, directionCrossEdge2);\n\n\t\tvar determinant: number;\n\t\tdeterminant = Vector3.dot(edge1, directionCrossEdge2);\n\n\t\t// If the ray is parallel to the triangle plane, there is no collision.\n\t\tif (determinant > -Number.MIN_VALUE && determinant < Number.MIN_VALUE) {\n\t\t\tresult = Number.NaN;\n\t\t\treturn result;\n\t\t}\n\n\t\tvar inverseDeterminant: number = 1.0 / determinant;\n\n\t\t// Calculate the U parameter of the intersection point.\n\t\tvar distanceVector: Vector3 = Picker._tempVector33;\n\t\tVector3.subtract(ray.origin, vertex1, distanceVector);\n\n\t\tvar triangleU: number;\n\t\ttriangleU = Vector3.dot(distanceVector, directionCrossEdge2);\n\t\ttriangleU *= inverseDeterminant;\n\n\t\t// Make sure it is inside the triangle.\n\t\tif (triangleU < 0 || triangleU > 1) {\n\t\t\tresult = Number.NaN;\n\t\t\treturn result;\n\t\t}\n\n\t\t// Calculate the V parameter of the intersection point.\n\t\tvar distanceCrossEdge1: Vector3 = Picker._tempVector34;\n\t\tVector3.cross(distanceVector, edge1, distanceCrossEdge1);\n\n\t\tvar triangleV: number;\n\t\ttriangleV = Vector3.dot(ray.direction, distanceCrossEdge1);\n\t\ttriangleV *= inverseDeterminant;\n\n\t\t// Make sure it is inside the triangle.\n\t\tif (triangleV < 0 || triangleU + triangleV > 1) {\n\t\t\tresult = Number.NaN;\n\t\t\treturn result;\n\t\t}\n\n\t\t// Compute the distance along the ray to the triangle.\n\t\tvar rayDistance: number;\n\t\trayDistance = Vector3.dot(edge2, distanceCrossEdge1);\n\t\trayDistance *= inverseDeterminant;\n\n\t\t// Is the triangle behind the ray origin?\n\t\tif (rayDistance < 0) {\n\t\t\tresult = Number.NaN;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = rayDistance;\n\t\treturn result;\n\t}\n\n\t/**\n\t * 检测射线和平面的交点\n\t * @param ray \n\t * @param plane \n\t * @returns \n\t */\n\tstatic rayPlaneIntersection(ray: Ray, plane: Plane): Vector3 {\n\t\tlet point = new Vector3();\n\t\tlet ddotn = Vector3.dot(ray.direction.normalize(), plane.normal.normalize());\n\t\tif (ddotn == 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet t = (plane.distance - Vector3.dot(ray.origin, plane.normal)) / ddotn;\n\t\tif (t < 0)\n\t\t\treturn null;\n\t\tray.at(t, point);\n\t\treturn point;\n\t}\n}\n\n\n","import { Node } from \"../../display/Node\";\nimport { Sprite3D } from \"./Sprite3D\";\nimport { BaseRender } from \"./render/BaseRender\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\n\n/**\n * <code>RenderableSprite3D</code> 类用于可渲染3D精灵的父类，抽象类不允许实例。\n */\nexport class RenderableSprite3D extends Sprite3D {\n\t/**精灵级着色器宏定义,接收阴影。*/\n\tstatic SHADERDEFINE_RECEIVE_SHADOW: ShaderDefine;\n\t/**精灵级着色器宏定义,光照贴图。*/\n\tstatic SAHDERDEFINE_LIGHTMAP: ShaderDefine;\n\t/**精灵级着色器宏定义,光照贴图方向。 */\n\tstatic SHADERDEFINE_LIGHTMAP_DIRECTIONAL: ShaderDefine;\n\t/**着色器变量名，光照贴图缩放和偏移。*/\n\tstatic LIGHTMAPSCALEOFFSET: number;\n\t/**着色器变量名，光照贴图。*/\n\tstatic LIGHTMAP: number;\n\t/**着色器变量名，光照贴图方向。*/\n\tstatic LIGHTMAP_DIRECTION: number;\n\t/**拾取颜色。*/\n\tstatic PICKCOLOR: number;\n\n\n\t/** 反射探针位置 最大、最小值*/\n\tstatic REFLECTIONCUBE_PROBEPOSITION: number;\n\tstatic REFLECTIONCUBE_PROBEBOXMAX: number;\n\tstatic REFLECTIONCUBE_PROBEBOXMIN: number;\n\n\t/** @internal */\n\tstatic IBLTEX: number;\n\t/** @internal */\n\tstatic AMBIENTSH: number;\n\t/** @internal */\n\tstatic AMBIENTCOLOR: number;\n\t/** @internal */\n\tstatic AMBIENTINTENSITY:number;\n\t/** @internal */\t\n\tstatic REFLECTIONINTENSITY:number;\n\n\t//--------------------------------------------------------deprecated------------------------------------------------------------------------\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tstatic AMBIENTSHAR: number;\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tstatic AMBIENTSHAG: number;\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tstatic AMBIENTSHAB: number;\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tstatic AMBIENTSHBR: number;\n\t/**\n\t* @deprecated\n\t* @internal\n\t*/\n\tstatic AMBIENTSHBG: number;\n\t/**\n\t* @deprecated\n\t* @internal\n\t*/\n\tstatic AMBIENTSHBB: number;\n\t/**\n\t* @deprecated\n\t* @internal\n\t*/\n\tstatic AMBIENTSHC: number;\n\t/**\n\t * @deprecated\n\t *  反射贴图 \n\t */\n\tstatic REFLECTIONTEXTURE: number;\n\t/**\n\t * @deprecated\n\t *  反射贴图参数 \n\t */\n\tstatic REFLECTIONCUBE_HDR_PARAMS: number;\n\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tRenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW = Shader3D.getDefineByName(\"RECEIVESHADOW\");\n\t\tRenderableSprite3D.SAHDERDEFINE_LIGHTMAP = Shader3D.getDefineByName(\"LIGHTMAP\");\n\t\tRenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL = Shader3D.getDefineByName(\"LIGHTMAP_DIRECTIONAL\");\n\n\t\tRenderableSprite3D.LIGHTMAPSCALEOFFSET = Shader3D.propertyNameToID(\"u_LightmapScaleOffset\");\n\t\tRenderableSprite3D.LIGHTMAP = Shader3D.propertyNameToID(\"u_LightMap\");\n\t\tRenderableSprite3D.LIGHTMAP_DIRECTION = Shader3D.propertyNameToID(\"u_LightMapDirection\");\n\t\tRenderableSprite3D.PICKCOLOR = Shader3D.propertyNameToID(\"u_PickColor\");\n\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION = Shader3D.propertyNameToID(\"u_SpecCubeProbePosition\");\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX = Shader3D.propertyNameToID(\"u_SpecCubeBoxMax\");\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN = Shader3D.propertyNameToID(\"u_SpecCubeBoxMin\");\n\n\t\t//ambient Color\n\t\tRenderableSprite3D.AMBIENTCOLOR = Shader3D.propertyNameToID(\"u_AmbientColor\");\n\t\t// sh \n\t\tRenderableSprite3D.AMBIENTSH = Shader3D.propertyNameToID(\"u_IblSH\");\n\t\t//GI instance\n\t\tRenderableSprite3D.AMBIENTINTENSITY = Shader3D.propertyNameToID(\"u_AmbientIntensity\");\n\t\tRenderableSprite3D.REFLECTIONINTENSITY = Shader3D.propertyNameToID(\"u_ReflectionIntensity\");\n\t\tRenderableSprite3D.IBLTEX = Shader3D.propertyNameToID(\"u_IBLTex\");\n\n\t\tconst commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAPSCALEOFFSET, \"u_LightmapScaleOffset\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAP, \"u_LightMap\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAP_DIRECTION, \"u_LightMapDirection\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.PICKCOLOR, \"u_PickColor\");\n\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION, \"u_SpecCubeProbePosition\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX, \"u_SpecCubeBoxMax\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN, \"u_SpecCubeBoxMin\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.IBLTEX,\"u_IBLTex\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSH, \"u_IblSH\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTCOLOR, \"u_AmbientColor\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTINTENSITY,\"u_AmbientIntensity\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONINTENSITY,\"u_ReflectionIntensity\");\n\n\t\t//Legency Reflectexture\n\t\tRenderableSprite3D.REFLECTIONTEXTURE = Shader3D.propertyNameToID(\"u_ReflectTexture\");\n\t\tRenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS = Shader3D.propertyNameToID(\"u_ReflectCubeHDRParams\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONTEXTURE, \"REFLECTIONTEXTURE\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS, \"u_ReflectCubeHDRParams\");\n\t\t// legacy sh\n\t\tRenderableSprite3D.AMBIENTSHAR = Shader3D.propertyNameToID(\"u_AmbientSHAr\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAR, \"u_AmbientSHAr\");\n\t\tRenderableSprite3D.AMBIENTSHAG = Shader3D.propertyNameToID(\"u_AmbientSHAg\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAG, \"u_AmbientSHAg\");\n\t\tRenderableSprite3D.AMBIENTSHAB = Shader3D.propertyNameToID(\"u_AmbientSHAb\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAB, \"u_AmbientSHAb\");\n\t\tRenderableSprite3D.AMBIENTSHBR = Shader3D.propertyNameToID(\"u_AmbientSHBr\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBR, \"u_AmbientSHBr\");\n\t\tRenderableSprite3D.AMBIENTSHBG = Shader3D.propertyNameToID(\"u_AmbientSHBg\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBG, \"u_AmbientSHBg\");\n\t\tRenderableSprite3D.AMBIENTSHBB = Shader3D.propertyNameToID(\"u_AmbientSHBb\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBB, \"u_AmbientSHBb\");\n\t\tRenderableSprite3D.AMBIENTSHC = Shader3D.propertyNameToID(\"u_AmbientSHC\");\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHC, \"u_AmbientSHC\");\n\t}\n\n\t/** @internal */\n\t_render: BaseRender;\n\n\t/**\n\t * @deprecated\n\t * 创建一个 <code>RenderableSprite3D</code> 实例。\n\t */\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\t/** \n\t * @inheritDoc\n\t * @override\n\t */\n\tprotected _onInActive(): void {\n\t\tsuper._onInActive();\n\t}\n\n\t/** \n\t * @inheritDoc\n\t * @override\n\t */\n\tprotected _onActive(): void {\n\t\tsuper._onActive();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tprotected _onActiveInScene(): void {\n\t\tsuper._onActiveInScene();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Node {\n\t\treturn new Sprite3D(this.name);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_addToInitStaticBatchManager(): void {\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @internal\n\t * @override\n\t */\n\t_setBelongScene(scene: Node): void {\n\t\tsuper._setBelongScene(scene);\n\t\t//this._render._setBelongScene(<Scene3D>scene);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @internal\n\t * @override\n\t */\n\t_setUnBelongScene(): void {\n\t\tsuper._setUnBelongScene();\n\t}\n}\n\n\n","import { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\n\n/**\n * 类用来记录精灵数据宏\n */\nexport class MeshSprite3DShaderDeclaration {\n\t/**UV0通道顶点数据宏 */\n\tstatic SHADERDEFINE_UV0: ShaderDefine;\n\t/**顶点色顶点数据宏 */\n\tstatic SHADERDEFINE_COLOR: ShaderDefine;\n\t/**UV1通道顶点数据宏 */\n\tstatic SHADERDEFINE_UV1: ShaderDefine;\n\t/** Tangent 通道顶点数据宏 */\n\tstatic SHADERDEFINE_TANGENT: ShaderDefine;\n\t/**instance调用宏 */\n\tstatic SHADERDEFINE_GPU_INSTANCE: ShaderDefine;\n\t\n}","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { DDSTextureInfo } from \"../../RenderEngine/DDSTextureInfo\";\nimport { KTXTextureInfo } from \"../../RenderEngine/KTXTextureInfo\";\nimport { TextureDimension } from \"../../RenderEngine/RenderEnum/TextureDimension\";\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\nimport { BaseTexture } from \"../../resource/BaseTexture\";\n\nexport enum TextureCubeFace {\n    /**+x */\n    PositiveX,\n    /**-x */\n    NegativeX,\n    /**+y */\n    PositiveY,\n    /**-y */\n    NegativeY,\n    /**+z */\n    PositiveZ,\n    /**-z */\n    NegativeZ\n}\n\nconst DEFAULT_PIXELS: Uint8Array = new Uint8Array(3);\n\n/**\n * <code>TextureCube</code> 类用于生成立方体纹理。\n */\nexport class TextureCube extends BaseTexture {\n\n    /**@private*/\n    private static _blackTexture: TextureCube;\n    /**@private*/\n    private static _grayTexture: TextureCube;\n    /**@private*/\n    private static _whiteTexture: TextureCube;\n    \n    /**\n     * 黑色纯色纹理。\n     */\n    static get blackTexture() {\n        return TextureCube._blackTexture;\n    }\n\n    /**\n     * 灰色纯色纹理。\n     */\n    static get grayTexture() {\n        return TextureCube._grayTexture;\n    }\n\n    /**\n     * 白色纯色纹理。\n     */\n     static get whiteTexture() {\n        return TextureCube._grayTexture;\n    }\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        var blackTexture: TextureCube = new TextureCube(1, TextureFormat.R8G8B8, false);\n        var grayTexture: TextureCube = new TextureCube(1, TextureFormat.R8G8B8, false);\n        var writeTexture:TextureCube = new TextureCube(1,TextureFormat.R8G8B8,false);\n        var pixels = DEFAULT_PIXELS;\n        pixels[0] = 0, pixels[1] = 0, pixels[2] = 0;\n        blackTexture.setPixelsData([pixels, pixels, pixels, pixels, pixels, pixels], false, false);\n        blackTexture.lock = true;//锁住资源防止被资源管理释放\n        pixels[0] = 128, pixels[1] = 128, pixels[2] = 128;\n        grayTexture.setPixelsData([pixels, pixels, pixels, pixels, pixels, pixels], false, false);\n        grayTexture.lock = true;//锁住资源防止被资源管理释放\n        pixels[0] = 255, pixels[1] = 255, pixels[2] = 255;\n        writeTexture.setPixelsData([pixels, pixels, pixels, pixels, pixels, pixels], false, false);\n        writeTexture.lock = true;\n        TextureCube._grayTexture = grayTexture;\n        TextureCube._blackTexture = blackTexture;\n        TextureCube._whiteTexture = writeTexture;\n    }\n\n    constructor(size: number, format: TextureFormat, mipmap: boolean = true, sRGB: boolean = false) {\n        super(size, size, format);\n\n        this._dimension = TextureDimension.Cube;\n\n        this._texture = LayaGL.textureContext.createTextureInternal(this._dimension, size, size, format, mipmap, sRGB);\n        return;\n    }\n\n    // todo source数组 改为 CubeInfo 结构体?\n    setImageData(source: (HTMLImageElement | HTMLCanvasElement | ImageBitmap)[], premultiplyAlpha: boolean, invertY: boolean) {\n        let error = false;\n        let k = source.findIndex(s => s != null);\n        if (k != -1) {\n            let img = source[k];\n            if (!source.every(s => s != null && s.width == img.width && s.height == img.height)) //必须满足所有元素不为null且大小相等\n                error = true;\n        }\n        else\n            error = true;\n\n        let texture = this._texture;\n        if (!error)\n            LayaGL.textureContext.setCubeImageData(texture, source, premultiplyAlpha, invertY);\n        else {\n            let pixels = DEFAULT_PIXELS;\n            LayaGL.textureContext.setCubePixelsData(texture, [pixels, pixels, pixels, pixels, pixels, pixels], premultiplyAlpha, invertY);\n        }\n    }\n\n    setPixelsData(source: ArrayBufferView[], premultiplyAlpha: boolean, invertY: boolean) {\n        let texture = this._texture;\n        LayaGL.textureContext.setCubePixelsData(texture, source, premultiplyAlpha, invertY);\n    }\n\n    updateSubPixelsData(source: ArrayBufferView[], xOffset: number, yOffset: number, width: number, height: number, mipmapLevel: number, generateMipmap: boolean, premultiplyAlpha: boolean, invertY: boolean) {\n        let texture = this._texture;\n        LayaGL.textureContext.setCubeSubPixelData(texture, source, mipmapLevel, generateMipmap, xOffset, yOffset, width, height, premultiplyAlpha, invertY);\n    }\n\n    setDDSData(ddsInfo: DDSTextureInfo) {\n        let texture = this._texture;\n        LayaGL.textureContext.setCubeDDSData(texture, ddsInfo);\n    }\n\n    setKTXData(ktxInfo: KTXTextureInfo) {\n        let texture = this._texture;\n        LayaGL.textureContext.setCubeKTXData(texture, ktxInfo);\n    }\n\n    get defaultTexture(): BaseTexture {\n        return TextureCube.grayTexture;\n    }\n}","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { IClone } from \"../../utils/IClone\";\nimport { BoundBox } from \"./BoundBox\";\n\n/**\n * <code>Bounds</code> 类用于创建包围体。\n */\nexport class Bounds implements IClone {\n    /**\n     * 合并两个包围盒。\n     * @param\tbox1 包围盒1。\n     * @param\tbox2 包围盒2。\n     * @param\tout 生成的包围盒。\n     */\n    static merge(box1: Bounds, box2: Bounds, out: Bounds): void {\n        Vector3.min(box1.min, box2.min, out.min);\n        Vector3.max(box1.max, box2.max, out.max);\n        out.min = out.min;\n        out.max = out.max;\n    }\n\n    /**\n     * 包围盒是否包含点\n     * @param box \n     * @param point \n     * @returns \n     */\n    static containPoint(box: Bounds, point: Vector3): boolean {\n        let max = box.getMax();\n        let min = box.getMin();\n        if (point.x > max.x || point.x < min.x) return false;\n        if (point.y > max.y || point.y < min.y) return false;\n        if (point.z > max.z || point.z < min.z) return false;\n        return true;\n    }\n\n\n    /**@internal */\n    static _UPDATE_MIN: number = 0x01;\n    /**@internal */\n    static _UPDATE_MAX: number = 0x02;\n    /**@internal */\n    static _UPDATE_CENTER: number = 0x04;\n    /**@internal */\n    static _UPDATE_EXTENT: number = 0x08;\n\n    /**@internal\t*/\n    _imp: any;\n\n    get min() {\n        return this.getMin();\n    }\n\n    set min(value: Vector3) {\n        this.setMin(value);\n    }\n\n    get max() {\n        return this.getMax();\n    }\n\n    set max(value: Vector3) {\n        this.setMax(value);\n    }\n\n    /**\n     * 设置包围盒的最小点。\n     * @param value\t包围盒的最小点。\n     */\n    setMin(value: Vector3): void {\n        this._imp.setMin(value);\n    }\n\n    /**\n     * 获取包围盒的最小点。\n     * @return\t包围盒的最小点。\n     */\n    getMin(): Vector3 {\n        return this._imp.getMin();\n    }\n\n    /**\n     * 设置包围盒的最大点。\n     * @param value\t包围盒的最大点。\n     */\n    setMax(value: Vector3): void {\n        this._imp.setMax(value);\n    }\n\n    /**\n     * 获取包围盒的最大点。\n     * @return\t包围盒的最大点。\n     */\n    getMax(): Vector3 {\n        return this._imp.getMax();\n    }\n\n    /**\n     * 设置包围盒的中心点。\n     * @param value\t包围盒的中心点。\n     */\n    setCenter(value: Vector3): void {\n        this._imp.setCenter(value);\n    }\n\n    /**\n     * 获取包围盒的中心点。\n     * @return\t包围盒的中心点。\n     */\n    getCenter(): Vector3 {\n        return this._imp.getCenter();\n    }\n\n    /**\n     * 设置包围盒的范围。\n     * @param value\t包围盒的范围。\n     */\n    setExtent(value: Vector3): void {\n        this._imp.setExtent(value);\n    }\n\n    /**\n     * 获取包围盒的范围。\n     * @return\t包围盒的范围。\n     */\n    getExtent(): Vector3 {\n        return this._imp.getExtent();\n    }\n\n    /**\n     * 创建一个 <code>Bounds</code> 实例。\n     * @param\tmin  min 最小坐标\n     * @param\tmax  max 最大坐标。\n     */\n    constructor(min?: Vector3, max?: Vector3) {\n        this._imp = LayaGL.renderOBJCreate.createBounds(min, max);\n    }\n\n    protected _getUpdateFlag(type: number): boolean {\n        return this._imp._getUpdateFlag(type);\n    }\n\n\n    protected _setUpdateFlag(type: number, value: boolean): void {\n        this._imp._setUpdateFlag(type, value);\n    }\n\n\n    protected _getCenter(min: Vector3, max: Vector3, out: Vector3): void {\n        Vector3.add(min, max, out);\n        Vector3.scale(out, 0.5, out);\n    }\n\n\n    protected _getExtent(min: Vector3, max: Vector3, out: Vector3): void {\n        Vector3.subtract(max, min, out);\n        Vector3.scale(out, 0.5, out);\n    }\n\n\n    protected _getMin(center: Vector3, extent: Vector3, out: Vector3): void {\n        Vector3.subtract(center, extent, out);\n    }\n\n\n    protected _getMax(center: Vector3, extent: Vector3, out: Vector3): void {\n        Vector3.add(center, extent, out);\n    }\n\n    protected _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\n        var extentsX: number = extents.x;\n        var extentsY: number = extents.y;\n        var extentsZ: number = extents.z;\n        var matE: Float32Array = rotation.elements;\n        out.x = Math.abs(matE[0] * extentsX) + Math.abs(matE[4] * extentsY) + Math.abs(matE[8] * extentsZ);\n        out.y = Math.abs(matE[1] * extentsX) + Math.abs(matE[5] * extentsY) + Math.abs(matE[9] * extentsZ);\n        out.z = Math.abs(matE[2] * extentsX) + Math.abs(matE[6] * extentsY) + Math.abs(matE[10] * extentsZ);\n    }\n\n    /**\n     * @internal\n     */\n    _tranform(matrix: Matrix4x4, out: Bounds): void {\n        this._imp._tranform(matrix, out._imp);\n    }\n\n    getCorners(corners: Vector3[]) {\n        this._imp.getCorners(corners);\n    }\n\n    /**\n     * TODO\n     * @param box \n     */\n    getBoundBox(box: BoundBox): void {\n        this._imp._getBoundBox().cloneTo(box);\n    }\n\n    /**\n     * @returns -1为不相交 不为0的时候返回值为相交体积\n     */\n    calculateBoundsintersection(bounds: Bounds): number {\n        return this._imp.calculateBoundsintersection(bounds._imp);\n    }\n\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        this._imp.cloneTo(destObject._imp);\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: Bounds = new Bounds(new Vector3(), new Vector3());\n        this.cloneTo(dest);\n        return dest;\n    }\n\n}\n\nconst TEMP_VECTOR3_MAX0 = new Vector3();\nconst TEMP_VECTOR3_MAX1 = new Vector3();","import { Component } from \"../../../components/Component\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { VolumeManager } from \"./VolumeManager\";\nimport { Event } from \"../../../events/Event\";\nimport { Scene3D } from \"../../core/scene/Scene3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\nexport enum volumeIntersectType {\n    /**包含 */\n    contain,\n    /**相交 */\n    intersect,\n    /**不相交*/\n    Disjoint\n}\n\n/**\n * 物体于Volume的相交属性\n */\nexport class volumeIntersectInfo {\n    type: volumeIntersectType;\n    /**相交比例 */\n    intersectRate: number;\n}\n\n/**\n * @internal\n */\nexport class Volume extends Component {\n    /**@internal */\n    protected _primitiveBounds: Bounds;\n    /** 包围盒 */\n    protected _bounds: Bounds;\n    /**cache number of around Volume */\n    protected _aroundVolumeCacheNum: number = 0;\n    /** around Volume */\n    protected _aroundVolume: Volume[];\n    /** volume manager */\n    protected _volumeManager: VolumeManager;\n    /** volume intersect Comonent */\n    protected _type: number;\n    /** 重要性 */\n    protected _importance: number;\n\n    /**\n     * 创建一个<code>Volume</code>实例\n     */\n    constructor() {\n        super();\n        this._bounds = new Bounds();\n        this._primitiveBounds = new Bounds();\n        this._importance = 0;\n        this.runInEditor = true;\n    }\n\n    /**\n     * volume Type\n     */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @internal\n     */\n    get bounds(): Bounds {\n        return this._bounds;\n    }\n\n    get boundsMax(): Vector3 {\n        return this._primitiveBounds.getMax();\n    }\n\n    /**\n     * primitive包围盒max\n     */\n    set boundsMax(value: Vector3) {\n        this._primitiveBounds.setMax(value);\n        this._reCaculateBoundBox();\n    }\n\n    /**\n     * primitiveBoxMax\n     */\n    set boundsMin(value: Vector3) {\n        this._primitiveBounds.setMin(value);\n        this._reCaculateBoundBox();\n    }\n\n    get boundsMin(): Vector3 {\n        return this._primitiveBounds.getMin();\n    }\n\n    get probePosition(): Vector3 {\n        return (this.owner as Sprite3D).transform.position;\n    }\n\n    get importance() {\n        return this._importance;\n    }\n\n    set importance(value: number) {\n        this._importance = value;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onEnable(): void {\n        (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._VolumeChange);\n        this._volumeManager = ((this.owner as Sprite3D).scene as Scene3D)._volumeManager;\n        this._volumeManager.add(this);\n        this._reCaculateBoundBox();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onDisable(): void {\n        (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._VolumeChange);\n        this._volumeManager.remove(this);\n    }\n\n    /**\n     * 当一个渲染节点进入体积\n     * @param renderNode \n     */\n    _addRenderNode?(renderNode: BaseRender): void;\n\n    /**\n     * 当一个渲染节点移除体积\n     * @param renderNode    \n     */\n    _removeRenderNode?(renderNode: BaseRender): void;\n\n    /**\n     * 当一个渲染节点在体积中移动\n     * @param renderNode \n     */\n    _motionInVolume?(renderNode: BaseRender): void;\n\n\n    /**\n     * Volume change\n     */\n    _VolumeChange() {\n        this._volumeManager._needUpdateAllRender = true;\n        this._reCaculateBoundBox();\n    }\n\n    _reCaculateBoundBox() {\n        this.owner && this._primitiveBounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: Volume): void {\n    }\n\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\nimport { BaseRender } from \"../../../core/render/BaseRender\";\nimport { Bounds } from \"../../../math/Bounds\";\nimport { IVolumeManager } from \"../IVolumeManager\";\nimport { Volume } from \"../Volume\";\nimport { ReflectionProbe } from \"./ReflectionProbe\";\n\n/**\n *<code>ReflectionProbeManager</code> 类用于反射探针管理\n */\nexport class ReflectionProbeManager implements IVolumeManager {\n\n    /** @internal 反射探针队列 */\n    private _reflectionProbes: SingletonList<ReflectionProbe> = new SingletonList<ReflectionProbe>();\n    /** @internal 环境探针 */\n    private _sceneReflectionProbe: ReflectionProbe;\n    /** @internal */\n    _needUpdateAllRender: boolean = false;\n\n    /**\n     * 实例化一个反射探针管理类\n     */\n    constructor() {\n        this._sceneReflectionProbe = new ReflectionProbe();\n        this._sceneReflectionProbe.boxProjection = false;\n        this._sceneReflectionProbe._isScene = true;\n    }\n\n    /**\n     * Scene Reflection\n     */\n    set sceneReflectionProbe(value: ReflectionProbe) {\n        this._sceneReflectionProbe = value;\n        this._needUpdateAllRender = true;//update Reflection\n    }\n\n    get sceneReflectionProbe():ReflectionProbe{\n        return this._sceneReflectionProbe;\n    }\n\n    /**\n     * 更新baseRender的反射探针\n     * @param baseRender \n     */\n    _updateRenderObject(baseRender: BaseRender): void {\n        if (this._reflectionProbes.length == 0) {\n            baseRender.probReflection = this._sceneReflectionProbe;\n            return;\n        }\n        var elements: ReflectionProbe[] = this._reflectionProbes.elements;\n        var maxOverlap: number = 0;\n        var mainProbe: ReflectionProbe;\n        var renderBounds: Bounds = baseRender.bounds;\n        var overlop;\n        for (var i: number = 0, n: number = this._reflectionProbes.length; i < n; i++) {\n            var renflectProbe = elements[i];\n            if (!mainProbe) {\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\n                if (overlop < maxOverlap) continue;\n            } else {\n                if (mainProbe.importance > renflectProbe.importance) continue;//重要性判断\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\n                if (overlop < maxOverlap && mainProbe.importance == renflectProbe.importance) continue;\n            }\n            mainProbe = renflectProbe;\n            maxOverlap = overlop;\n        }\n        if (!mainProbe && this._sceneReflectionProbe)//如果没有相交 传场景反射球\n            mainProbe = this._sceneReflectionProbe;\n        baseRender.probReflection = mainProbe;\n    }\n\n    /**\n     * 场景中添加反射探针\n     * @internal\n     * @param reflectionProbe \n     */\n    add(volume: Volume) {\n        this._reflectionProbes.add(volume as any);\n        this._needUpdateAllRender = true;\n    }\n    /**\n     * 场景中删除反射探针\n     * @internal\n     * @param reflectionProbe \n     */\n    remove(volume: Volume) {\n        this._reflectionProbes.remove(volume as any);\n        this._needUpdateAllRender = true;\n    }\n\n    /**\n     * @internal\n     * 更新运动物体的反射探针信息\n     */\n    handleMotionlist(motionObjects: SingletonList<BaseRender>): void {\n        var elements: BaseRender[] = motionObjects.elements;\n        let render: BaseRender;\n        for (var i: number = 0, n: number = motionObjects.length; i < n; i++) {\n            render = elements[i];\n            if (render._surportReflectionProbe && render._reflectionMode == 1) {\n                this._updateRenderObject(elements[i]);\n            }\n        }\n        //this.clearMotionObjects();\n    }\n\n    /**\n     * @internal\n     * 更新传入所有渲染器反射探针\n     * @param 渲染器列表\n     */\n    reCaculateAllRenderObjects(baseRenders: SingletonList<BaseRender>) {\n        var elements = baseRenders.elements;\n        let render: BaseRender;\n        for (var i: number = 0, n: number = baseRenders.length; i < n; i++) {\n            render = elements[i];\n            if (render._surportReflectionProbe && render._reflectionMode == 1) {\n                this._updateRenderObject(render);\n            }\n            this._needUpdateAllRender = false;\n        }\n    }\n\n\n    /**\n     * @internal\n     * destroy\n     */\n    destroy() {\n        for (let index = 0; index < this._reflectionProbes.length; index++) {\n            let probe = this._reflectionProbes.elements[index];\n            probe.destroy();\n        }\n        this._reflectionProbes.length = 0;\n        this._sceneReflectionProbe.destroy();\n        this._sceneReflectionProbe = null;\n    }\n}\n\n\n","import { SingletonList } from \"../../../utils/SingletonList\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { IVolumeManager } from \"./IVolumeManager\";\nimport { ReflectionProbeManager } from \"./reflectionProbe/ReflectionProbeManager\";\nimport { Volume, volumeIntersectType } from \"./Volume\";\n\n/**\n * <code>VolumeManager</code> 类用于管理体积组件\n */\nexport class VolumeManager implements IVolumeManager {\n    static ReflectionProbeVolumeType: number = 1;\n    //注册特殊的Volume管理类\n    //static regVolumeManager: { [key: number]: any } = {};\n    /** @internal 需要跟新反射探针的渲染队列 */\n    private _motionObjects: SingletonList<BaseRender> = new SingletonList<BaseRender>();\n    /** @internal volume list */\n    private _volumeList: SingletonList<Volume> = new SingletonList<Volume>();\n\n    /** @internal */\n    _needUpdateAllRender: boolean = false;\n    /** 有些Volume需要特殊的管理能力 */\n    private _regVolumeManager: { [key: number]: IVolumeManager } = {};\n\n    /**@internal 反射探针管理*/\n    _reflectionProbeManager: ReflectionProbeManager;\n    constructor() {\n        this._reflectionProbeManager = new ReflectionProbeManager();\n        this._regVolumeManager[VolumeManager.ReflectionProbeVolumeType] = this._reflectionProbeManager;\n\n    }\n\n    /**\n     * get reflection manager\n     */\n    get reflectionProbeManager(): ReflectionProbeManager {\n        return this._reflectionProbeManager;\n    }\n\n    /**\n     * add volume\n     * @param volume \n     */\n    add(volume: Volume) {\n        let reManager = this._regVolumeManager[volume.type];\n        if (reManager) {\n            reManager.add(volume);\n        } else {\n            this._volumeList.add(volume);\n            this._needUpdateAllRender = true;\n        }\n    }\n\n    /**\n     * remove volume\n     * @param volume \n     */\n    remove(volume: Volume) {\n        let reManager = this._regVolumeManager[volume.type];\n        if (reManager) {\n            reManager.remove(volume);\n        } else {\n            this._volumeList.remove(volume);\n            this._needUpdateAllRender = true;\n        }\n    }\n\n    /**\n     * add motion obj to handle list\n     * @param renderObj \n     */\n    addMotionObject(renderObj: BaseRender) {\n        this._motionObjects.add(renderObj);\n    }\n\n    removeMotionObject(renderObj:BaseRender){\n        this._motionObjects.remove(renderObj);\n    }\n\n    /**\n     * update one RenderNode Volume info\n     * @param baseRender \n     */\n    _updateRenderObject(baseRender: BaseRender): void {\n        let elements: Volume[] = this._volumeList.elements;\n\n        let renderBounds: Bounds = baseRender.bounds;\n        let center = renderBounds.getCenter();\n        let mainVolume: Volume;\n        for (var i: number = 0, n: number = this._volumeList.length; i < n; i++) {\n            let volume = elements[i];\n            let bounds = volume.bounds;\n            if(Bounds.containPoint(bounds,center)){\n                mainVolume = volume;\n                continue;\n            }\n        }\n        baseRender.volume = mainVolume;\n    }\n    /**\n     * @internal\n     * handle motion list\n     */\n    handleMotionlist(): void {\n        var elements: BaseRender[] = this._motionObjects.elements;\n        for (var i: number = 0, n: number = this._motionObjects.length; i < n; i++) {\n            this._updateRenderObject(elements[i]);\n        }\n        //miner特殊管理TODO 更新所有动态物体\n        this.reflectionProbeManager.handleMotionlist(this._motionObjects);\n\n        this.clearMotionObjects();\n    }\n\n    /**\n     * 重新更新所有Volume的信息\n     */\n    reCaculateAllRenderObjects(baseRenders: SingletonList<BaseRender>) {\n        if (this._needUpdateAllRender) {\n            var elements = baseRenders.elements;\n            for (var i: number = 0, n: number = baseRenders.length; i < n; i++) {\n                this._updateRenderObject(elements[i]);\n            }\n            this._needUpdateAllRender = false;\n        } else {\n            this.handleMotionlist();\n        }\n\n        //miner特殊管理TODO 更新所有渲染物体\n        if (this.reflectionProbeManager._needUpdateAllRender) {\n            this.reflectionProbeManager.reCaculateAllRenderObjects(baseRenders);\n        } else {\n            this.reflectionProbeManager.handleMotionlist(this._motionObjects);\n        }\n\n    }\n\n    needreCaculateAllRenderObjects(): boolean {\n        return this._needUpdateAllRender || this.reflectionProbeManager._needUpdateAllRender;\n    }\n\n    /**\n     * @internal\n     * 清理变动队列\n     */\n    clearMotionObjects() {\n        this._motionObjects.length = 0;\n    }\n\n    /**\n     * @internal\n     * destroy\n     */\n    destroy() {\n\n    }\n}","\nimport { Color } from \"../../maths/Color\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { TextureCubeFace } from \"../resource/TextureCube\";\n\n/**\n * 二阶球谐函数。\n */\nexport class SphericalHarmonicsL2 {\n    /** @internal */\n    static _default: SphericalHarmonicsL2 = new SphericalHarmonicsL2();\n\n    /** @internal */\n    private _coefficients: Float32Array = new Float32Array(27);\n\n    /**\n     * 获取颜色通道的系数。\n     * @param i 通道索引，范围0到2。\n     * @param j 系数索引，范围0到8。\n     */\n    getCoefficient(i: number, j: number): number {\n        return this._coefficients[i * 9 + j];\n    }\n\n    /**\n     * 设置颜色通道的系数。\n     * @param i 通道索引，范围0到2。\n     * @param j 系数索引，范围0到8。\n     */\n    setCoefficient(i: number, j: number, coefficient: number): void {\n        this._coefficients[i * 9 + j] = coefficient;\n    }\n\n    /**\n     * 设置颜色通道的系数。\n     * @param i 通道索引，范围0到2。\n     * @param coefficient0 系数0\n     * @param coefficient1 系数1\n     * @param coefficient2 系数2\n     * @param coefficient3 系数3\n     * @param coefficient4 系数4\n     * @param coefficient5 系数5\n     * @param coefficient6 系数6\n     * @param coefficient7 系数7\n     * @param coefficient8 系数8\n     */\n    setCoefficients(i: number, coefficient0: number, coefficient1: number, coefficient2: number, coefficient3: number, coefficient4: number, coefficient5: number, coefficient6: number, coefficient7: number, coefficient8: number): void {\n        var offset: number = i * 9;\n        this._coefficients[offset] = coefficient0;\n        this._coefficients[++offset] = coefficient1;\n        this._coefficients[++offset] = coefficient2;\n        this._coefficients[++offset] = coefficient3;\n        this._coefficients[++offset] = coefficient4;\n        this._coefficients[++offset] = coefficient5;\n        this._coefficients[++offset] = coefficient6;\n        this._coefficients[++offset] = coefficient7;\n        this._coefficients[++offset] = coefficient8;\n    }\n\n    /**\n     * 克隆\n     * @param dest \n     */\n    cloneTo(dest: SphericalHarmonicsL2): void {\n        if (this === dest)\n            return;\n        var coes: Float32Array = this._coefficients;\n        var destCoes: Float32Array = dest._coefficients;\n        for (var i: number = 0; i < 27; i++)\n            destCoes[i] = coes[i];\n    }\n}\n\n/**\n * @internal\n * 生成二阶球谐系数\n */\nexport class SphericalHarmonicsL2Generater {\n\n    private static _tempSHR: Float32Array = new Float32Array(9);\n    private static _tempSHG: Float32Array = new Float32Array(9);\n    private static _tempSHB: Float32Array = new Float32Array(9);\n\n    /**\n     * k0: 1/2  * sqrt(1/Pi)\n     * k1: 1/3  * sqrt(3/Pi)\n     * k2: 1/8  * sqrt(15/Pi)\n     * k3: 1/16 * sqrt(5/Pi)\n     * k4: 1/16 * sqrt(15/Pi)\n     * [\n     *  k0,\n     * -k1, k1, k1\n     * k2, -k2, k3, -k2, k4\n     * ]\n     */\n    private static readonly k = [\n        0.28209479177387814347,\n        -0.32573500793527994772, 0.32573500793527994772, -0.32573500793527994772,\n        0.27313710764801976764, -0.27313710764801976764, 0.07884789131313000151, -0.27313710764801976764, 0.13656855382400988382\n    ]\n\n    /** @internal */\n    static readonly GradientSimulateSize: number = 3;\n    /** @internal */\n    static readonly SH_Count: number = 9;\n\n    private static _tempSkyPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\n    private static _tempEquatorPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\n    private static _tempGroundPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\n    /**\n     * @internal\n     * uv 坐标对应 纹素 球面面积\n     * @param u \n     * @param v \n     */\n    static surfaceArea(u: number, v: number) {\n        return Math.atan2(u * v, Math.sqrt(u * u + v * v + 1.0));\n    }\n\n    /**\n     * uv 与 法线(方向) 对应关系\n     * @param u \n     * @param v \n     * @param face \n     * @param out_dir \n     */\n    static uv2Dir(u: number, v: number, face: TextureCubeFace, out_dir: Vector3) {\n        switch (face) {\n            case TextureCubeFace.PositiveX:\n                out_dir.x = 1.0;\n                out_dir.y = -v;\n                out_dir.z = -u;\n                break;\n            case TextureCubeFace.NegativeX:\n                out_dir.x = -1.0;\n                out_dir.y = -v;\n                out_dir.z = u;\n                break;\n            case TextureCubeFace.PositiveY:\n                out_dir.x = u;\n                out_dir.y = 1.0;\n                out_dir.z = v;\n                break;\n            case TextureCubeFace.NegativeY:\n                out_dir.x = u;\n                out_dir.y = -1.0;\n                out_dir.z = -v;\n                break;\n            case TextureCubeFace.PositiveZ:\n                out_dir.x = u;\n                out_dir.y = -v;\n                out_dir.z = 1.0;\n                break;\n            case TextureCubeFace.NegativeZ:\n                out_dir.x = -u;\n                out_dir.y = -v;\n                out_dir.z = -1.0;\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @internal\n     * 计算 球谐系数\n     * @param i \n     * @param x \n     * @param y \n     * @param z \n     * @returns \n     */\n    static sh_eval_9(i: number, x: number, y: number, z: number) {\n        const sqrt = Math.sqrt;\n        const M_PI = Math.PI;\n        switch (i) {\n            case 0:\n                return 0.5 * sqrt(1.0 / M_PI);\n            case 1:\n                return -y * 0.5 * sqrt(3.0 / M_PI);\n            case 2:\n                return z * 0.5 * sqrt(3.0 / M_PI);\n            case 3:\n                return -x * 0.5 * sqrt(3.0 / M_PI);\n            case 4:\n                return x * y * 0.5 * sqrt(15.0 / M_PI);\n            case 5:\n                return -y * z * 0.5 * sqrt(15.0 / M_PI);\n            case 6:\n                return (3.0 * z * z - 1.0) * 0.25 * sqrt(5.0 / M_PI);\n            case 7:\n                return -x * z * 0.5 * sqrt(15.0 / M_PI);\n            case 8:\n                return (x * x - y * y) * 0.25 * sqrt(15.0 / M_PI);\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * @internal\n     * 通过 cubemap 像素值 计算环境光照系数\n     * @param cubemapPixels cubemap 像素数据\n     * @param pixelComponentSize 每像素数据量 (RGB 3, RGBA 4)\n     * @param cubemapSize cubemap 大小\n     * @param isGamma 像素数据颜色空间\n     */\n    static CalCubemapSH(cubemapPixels: Float32Array[], pixelComponentSize: number, cubemapSize: number, isGamma: boolean = true): SphericalHarmonicsL2 {\n\n        let width = cubemapSize;\n        let height = cubemapSize;\n\n        let shr = this._tempSHR.fill(0);\n        let shg = this._tempSHG.fill(0);\n        let shb = this._tempSHB.fill(0);\n\n        let dir = new Vector3();\n        for (let face = 0; face < 6; face++) {\n\n            let facePixels = cubemapPixels[face];\n\n            for (let y = 0; y < height; y++) {\n                for (let x = 0; x < width; x++) {\n\n                    let px = x + 0.5;\n                    let py = y + 0.5;\n\n                    let u = 2.0 * (px / width) - 1.0;\n                    let v = 2.0 * (py / height) - 1.0;\n\n                    let dx = 1.0 / width;\n                    let dy = 1.0 / height;\n                    // 4个点 uv 分布\n                    let x0 = u - dx;\n                    let y0 = v - dy;\n                    let x1 = u + dx;\n                    let y1 = v + dy;\n\n                    // 当前纹素立体角\n                    let da = this.surfaceArea(x0, y0) - this.surfaceArea(x0, y1) - this.surfaceArea(x1, y0) + this.surfaceArea(x1, y1);\n\n                    this.uv2Dir(u, v, face, dir);\n                    Vector3.normalize(dir, dir);\n\n                    let pixelOffset = (x + y * width) * pixelComponentSize;\n                    let r = facePixels[pixelOffset];\n                    let g = facePixels[pixelOffset + 1];\n                    let b = facePixels[pixelOffset + 2];\n                    if (isGamma) {\n                        r = Color.gammaToLinearSpace(r);\n                        g = Color.gammaToLinearSpace(g);\n                        b = Color.gammaToLinearSpace(b);\n                    }\n\n                    for (let s = 0; s < this.SH_Count; s++) {\n                        let sh_val = this.sh_eval_9(s, dir.x, dir.y, dir.z);\n                        shr[s] += r * sh_val * da;\n                        shg[s] += g * sh_val * da;\n                        shb[s] += b * sh_val * da;\n                    }\n                }\n            }\n        }\n\n        let sh = new SphericalHarmonicsL2();\n\n        for (let index = 0; index < this.SH_Count; index++) {\n            let scale = this.k[index];\n\n            let r = shr[index];\n            sh.setCoefficient(0, index, r * scale);\n\n            let g = shg[index];\n            sh.setCoefficient(1, index, g * scale);\n\n            let b = shb[index];\n            sh.setCoefficient(2, index, b * scale);\n        }\n\n        return sh;\n    }\n\n    /**\n     * @internal\n     * 通过 天空颜色, 地平线颜色, 地面颜色计算环境光照系数\n     * @param skyColor \n     * @param equatorColor \n     * @param groundColor \n     * @param isGamma 颜色空间\n     */\n    static CalGradientSH(skyColor: Vector3, equatorColor: Vector3, groundColor: Vector3, isGamma: boolean = true): SphericalHarmonicsL2 {\n\n        console.time(\"Gradient SH\");\n\n        let skyPixels = this._tempSkyPixels;\n        let equatorPixels = this._tempEquatorPixels;\n        let groundPixels = this._tempGroundPixels;\n\n        const fillPixelBuffer = (float32: Float32Array, color: Vector3, isGamma: boolean) => {\n            let fillColor = new Color(color.x, color.y, color.z, 1.0);\n            if (isGamma) {\n                fillColor.toLinear(fillColor);\n            }\n            let r = Math.min(fillColor.r, 1.0);\n            let g = Math.min(fillColor.g, 1.0);\n            let b = Math.min(fillColor.b, 1.0);\n            for (let index = 0; index < float32.length; index += 3) {\n                float32[index] = r;\n                float32[index + 1] = g;\n                float32[index + 2] = b;\n            }\n        }\n\n        fillPixelBuffer(skyPixels, skyColor, isGamma);\n        fillPixelBuffer(equatorPixels, equatorColor, isGamma);\n        fillPixelBuffer(groundPixels, groundColor, isGamma);\n\n        let gradientPixles = [];\n        gradientPixles[TextureCubeFace.PositiveY] = skyPixels;\n        gradientPixles[TextureCubeFace.NegativeY] = groundPixels;\n        gradientPixles[TextureCubeFace.PositiveX] = equatorPixels;\n        gradientPixles[TextureCubeFace.NegativeX] = equatorPixels;\n        gradientPixles[TextureCubeFace.PositiveZ] = equatorPixels;\n        gradientPixles[TextureCubeFace.NegativeZ] = equatorPixels;\n\n        let sh = SphericalHarmonicsL2Generater.CalCubemapSH(gradientPixles, 3, this.GradientSimulateSize, false);\n\n        console.timeEnd(\"Gradient SH\");\n        return sh;\n    }\n}","import { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\n\nexport class Sprite3DRenderDeclaration{\n\t/**@internal */\n\tstatic SHADERDEFINE_GI_LEGACYIBL: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_GI_IBL: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_IBL_RGBD: ShaderDefine;\n    /**盒子反射宏 */\n\tstatic SHADERDEFINE_SPECCUBE_BOX_PROJECTION: ShaderDefine;\n\n}","/**\n * 环境光模式\n */\nexport enum AmbientMode {\n    /** 固定颜色。*/\n    SolidColor,\n    /** 球谐光照, 通过天空盒生成的球谐数据。 */\n    SphericalHarmonics,\n    /** 分别设置天空, 地平线, 地面的环境光颜色 */\n    TripleColor\n}\n","import { TextureDecodeFormat } from \"../../../../RenderEngine/RenderEnum/TextureDecodeFormat\";\nimport { Sprite3D } from \"../../../core/Sprite3D\";\nimport { Bounds } from \"../../../math/Bounds\";\nimport { TextureCube } from \"../../../resource/TextureCube\";\nimport { Volume } from \"../Volume\";\nimport { VolumeManager } from \"../VolumeManager\";\nimport { SphericalHarmonicsL2, SphericalHarmonicsL2Generater } from \"../../../graphics/SphericalHarmonicsL2\";\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { RenderableSprite3D } from \"../../../core/RenderableSprite3D\";\nimport { Sprite3DRenderDeclaration } from \"../../../core/render/Sprite3DRenderDeclaration\";\nimport { ILaya3D } from \"../../../../../ILaya3D\";\nimport { AmbientMode } from \"../../../core/scene/AmbientMode\";\nimport { Color } from \"../../../../maths/Color\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\n\n\n/**\n * 反射探针模式\n */\nexport enum ReflectionProbeMode {\n\t/**烘培模式 */\n\toff = 0,//现在仅仅支持Back烘培\n\t/**实时简单采样模式 还未支持*/\n\tsimple = 1,\n}\n/**\n * <code>ReflectionProbe</code> 类用于实现反射探针组件\n * @miner\n */\nexport class ReflectionProbe extends Volume {\n\t//因为纹理数量问题 暂不支持探针混合\n\tstatic TEMPVECTOR3: Vector3 = new Vector3();\n\t/** 默认解码数据 */\n\tstatic defaultTextureHDRDecodeValues: Vector4 = new Vector4(1.0, 1.0, 0.0, 0.0);\n\t/** 盒子反射是否开启 */\n\tprivate _boxProjection: boolean = false;\n\t/** 包围盒 */\n\tprotected _bounds: Bounds;\n\t/** 探针重要度 */\n\tprotected _importance: number;\n\t/**漫反射顔色 */\n\tprivate _ambientColor: Color = new Color();\n\t/**漫反射SH */\n\tprivate _ambientSH: Float32Array;\n\t/**漫反射强度 */\n\tprivate _ambientIntensity: number;\n\t/**ibl反射 */\n\tprivate _iblTex: TextureCube;\n\t/**ibl是否压缩 */\n\tprivate _iblTexRGBD: boolean;\n\t/**反射强度 */\n\tprivate _reflectionIntensity: number;\n\t/** @internal */\n\tprivate _ambientMode: AmbientMode = AmbientMode.SolidColor;\n\n\t/** 是否是场景探针 */\n\t_isScene: boolean = false;\n\t/**修改了值，需要更新shader，需要和updateMask对应 */\n\t_updateMark: number;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._importance = 0;\n\t\tthis._type = VolumeManager.ReflectionProbeVolumeType;\n\t\tthis._ambientIntensity = 1.0;\n\t\tthis._reflectionIntensity = 1.0;\n\t\tthis.boundsMax = new Vector3(5, 5, 5);\n\t\tthis.boundsMin = new Vector3(-5, -5, -5);\n\t}\n\n\n\t/**\n\t * 是否开启正交反射。\n\t */\n\tget boxProjection(): boolean {\n\t\treturn this._boxProjection;\n\t}\n\n\tset boxProjection(value: boolean) {\n\t\tif (value != this._boxProjection) {\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t\t}\n\t\tthis._boxProjection = value;\n\t}\n\n\t/**\n\t * 设置反射探针的重要度\n\t */\n\tget importance(): number {\n\t\treturn this._importance;\n\t}\n\n\tset importance(value: number) {\n\t\tthis._importance = value\n\t}\n\n\t/**\n\t * 设置环境漫反射的强度\n\t */\n\tget ambientIntensity(): number {\n\t\treturn this._ambientIntensity;\n\t}\n\n\tset ambientIntensity(value: number) {\n\t\tif (value == this._ambientIntensity) return;\n\t\tthis._ambientIntensity = value;\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\t/**\n\t * 设置反射探针强度\n\t */\n\tget reflectionIntensity(): number {\n\t\treturn this._reflectionIntensity;\n\t}\n\n\tset reflectionIntensity(value: number) {\n\t\tif (value == this._reflectionIntensity) return;\n\t\tvalue = Math.max(value, 0.0);\n\t\tthis._reflectionIntensity = value\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\n\t/**\n\t * 获得反射探针的包围盒\n\t */\n\tget bounds(): Bounds {\n\t\treturn this._bounds as Bounds;\n\t}\n\n\t/**\n\t * 包围盒 max\n\t */\n\tset boundsMax(value: Vector3) {\n\t\tsuper.boundsMax = value;\n\t\tif (this.boxProjection)\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\tget boundsMax(): Vector3 {\n\t\treturn this._primitiveBounds.getMax();\n\t}\n\n\t/**\n\t * 包围盒 min\n\t */\n\tset boundsMin(value: Vector3) {\n\t\tsuper.boundsMin = value;\n\t\tif (this.boxProjection)\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\tget boundsMin(): Vector3 {\n\t\treturn this._primitiveBounds.getMin();\n\t}\n\n\t/**\n\t * probe 位置\n\t */\n\tget probePosition(): Vector3 {\n\t\treturn (this.owner as Sprite3D).transform.position;\n\t}\n\n\t/**\n\t * 漫反射颜色\n\t */\n\tpublic get ambientColor(): Color {\n\t\treturn this._ambientColor;\n\t}\n\tpublic set ambientColor(value: Color) {\n\t\tvalue && value.cloneTo(this._ambientColor);\n\t\tif (this.ambientMode == AmbientMode.SolidColor)\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\t/**\n\t * 漫反射颜色 sh\n\t */\n\tpublic get ambientSH(): Float32Array {\n\t\treturn this._ambientSH;\n\t}\n\n\tpublic set ambientSH(value: Float32Array) {\n\t\tif (this.ambientMode == AmbientMode.SphericalHarmonics)\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t\tthis._ambientSH = value;\n\t}\n\n\t/**\n\t* 环境光模式。\n\t* 如果值为AmbientMode.SolidColor一般使用ambientColor作为环境光源，如果值为如果值为AmbientMode.SphericalHarmonics一般使用ambientSphericalHarmonics作为环境光源。\n\t*/\n\tget ambientMode(): AmbientMode {\n\t\treturn this._ambientMode;\n\t}\n\n\tset ambientMode(value: AmbientMode) {\n\t\tif (value == this.ambientMode) return;\n\t\tthis._ambientMode = value;\n\t\tif (!this.ambientSH) {\n\t\t\tif (value == AmbientMode.SphericalHarmonics) {\n\t\t\t\tthis._ambientSphericalHarmonics && this._applySHCoefficients(this._ambientSphericalHarmonics, 2.2);\n\t\t\t} else if (value == AmbientMode.TripleColor) {\n\t\t\t\tthis._ambientTripleColorSphericalHarmonics && this._applySHCoefficients(this._ambientTripleColorSphericalHarmonics, 1.0);\n\t\t\t}\n\t\t}\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\n\t}\n\n\t/**\n\t * Image base Light\n\t */\n\tpublic get iblTex(): TextureCube {\n\t\treturn this._iblTex;\n\t}\n\n\tpublic set iblTex(value: TextureCube) {\n\t\tif (this.iblTex == value) return;\n\t\tif (this.iblTex) this.iblTex._removeReference();\n\t\tthis._iblTex = value;\n\t\tthis._iblTex._addReference();\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\t/**\n\t * Image base Light Compress by RGBD\n\t */\n\tpublic get iblTexRGBD(): boolean {\n\t\treturn this._iblTexRGBD;\n\t}\n\n\tpublic set iblTexRGBD(value: boolean) {\n\t\tif (value == this._iblTexRGBD)\n\t\t\treturn;\n\t\tthis._iblTexRGBD = value;\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\tapplyReflectionShaderData(shaderData: ShaderData) {\n\t\t//boxProjection\n\t\tif (!this.boxProjection) {\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\n\t\t} else {\n\t\t\tshaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\n\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION, ShaderDataType.Vector3, this.probePosition);\n\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX, ShaderDataType.Vector3, this._bounds.getMax());\n\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN, ShaderDataType.Vector3, this._bounds.getMin());\n\n\t\t}\n\t\tif (this.ambientMode == AmbientMode.SolidColor) {\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\n\t\t\tshaderData.setColor(RenderableSprite3D.AMBIENTCOLOR, this.ambientColor);\n\t\t} else if (this.iblTex && this.ambientSH) {\n\t\t\tshaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\n\t\t\tthis.iblTex && shaderData.setTexture(RenderableSprite3D.IBLTEX, this.iblTex);\n\t\t\tthis.iblTexRGBD ? shaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD) : shaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD);\n\t\t\tthis.ambientSH && shaderData.setBuffer(RenderableSprite3D.AMBIENTSH, this.ambientSH);\n\t\t} else {//Legency\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\n\t\t\tshaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\n\t\t\tif (this._reflectionTexture) {\n\t\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONTEXTURE, ShaderDataType.TextureCube, this.reflectionTexture);\n\t\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS, ShaderDataType.Vector4, this.reflectionHDRParams);\n\t\t\t}\n\n\t\t\tif (this._shCoefficients) {\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHAR, this._shCoefficients[0]);\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHAG, this._shCoefficients[1]);\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHAB, this._shCoefficients[2]);\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHBR, this._shCoefficients[3]);\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHBG, this._shCoefficients[4]);\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHBB, this._shCoefficients[5]);\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHC, this._shCoefficients[6]);\n\t\t\t}\n\n\t\t}\n\t\tshaderData.setNumber(RenderableSprite3D.AMBIENTINTENSITY, this.ambientIntensity);\n\t\tshaderData.setNumber(RenderableSprite3D.REFLECTIONINTENSITY, this.reflectionIntensity);\n\t}\n\n\t/**\n\t* @inheritDoc\n\t* @override\n\t*/\n\tprotected _onEnable(): void {\n\t\tsuper._onEnable();\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tprotected _onDisable(): void {\n\t\tsuper._onDisable();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tprotected _onDestroy() {\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_cloneTo(dest: ReflectionProbe): void {\n\t\t//TODO\n\t}\n\n\n\n\t//----------------------------------------deprecated--------------------------------------------\n\t/**\n\t * @deprecated\n\t *  反射探针图片 */\n\tprivate _reflectionTexture: TextureCube;\n\t/**\n\t * @deprecated\n\t *  反射参数 \n\t */\n\tprivate _reflectionHDRParams: Vector4 = new Vector4();\n\t/**\n\t * @deprecated 反射探针解码格式 \n\t */\n\tprivate _reflectionDecodeFormat: TextureDecodeFormat = TextureDecodeFormat.Normal;\n\t/**\n\t * @deprecated\n\t *  @internal \n\t */\n\tprivate _ambientSphericalHarmonics: SphericalHarmonicsL2;\n\t/**\n\t * 三颜色\n\t * @deprecated\n\t *  @internal \n\t */\n\tprivate _ambientTripleColorSphericalHarmonics: SphericalHarmonicsL2;\n\t/**\n\t * @deprecated\n\t *  @internal \n\t */\n\tprivate _shCoefficients: Vector4[];\n\t/**\n\t * @deprecated\n\t *  @internal \n\t */\n\tprivate _ambientSkyColor: Vector3 = new Vector3();\n\t/**\n\t * @deprecated\n\t *  @internal \n\t */\n\tprivate _ambientEquatorColor: Vector3 = new Vector3();\n\t/**\n\t * @deprecated\n\t *  @internal \n\t */\n\tprivate _ambientGroundColor: Vector3 = new Vector3();\n\n\t/**\n\t * @deprecated\n\t * 设置反射贴图\n\t */\n\tget reflectionTexture() {\n\t\treturn this._reflectionTexture;\n\t}\n\n\tset reflectionTexture(value: TextureCube) {\n\t\tif (this._reflectionTexture == value) return;\n\t\tif (this._reflectionTexture) this.iblTex._removeReference();\n\t\tthis._reflectionTexture = value\n\t\tthis._reflectionTexture._addReference();\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\t/**\n\t* @deprecated\n\t*/\n\tget customReflection(): TextureCube {\n\t\treturn this.reflectionTexture;\n\t}\n\n\tset customReflection(value: TextureCube) {\n\t\tthis.reflectionTexture = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * 反射参数\n\t */\n\tget reflectionHDRParams(): Vector4 {\n\t\treturn this._reflectionHDRParams;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset reflectionHDRParams(value: Vector4) {\n\t\tthis._reflectionHDRParams = value;\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\t/**\n\t * 反射立方体纹理解码格式。\n\t * @deprecated\n\t */\n\tget reflectionDecodingFormat(): TextureDecodeFormat {\n\t\treturn this._reflectionDecodeFormat;\n\t}\n\n\tset reflectionDecodingFormat(value: TextureDecodeFormat) {\n\t\tif (this._reflectionDecodeFormat != value) {\n\t\t\tthis._reflectionDecodeFormat = value;\n\t\t\tif (this._reflectionDecodeFormat == TextureDecodeFormat.RGBM)\n\t\t\t\tthis._reflectionHDRParams.x = 5.0;//5.0 is RGBM param\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t\t}\n\t}\n\n\t/**\n\t* @deprecated\n\t* 球谐环境光,修改后必须重新赋值。\n\t* use scene.ambientSH\n\t*/\n\tget ambientSphericalHarmonics(): SphericalHarmonicsL2 {\n\t\treturn this._ambientSphericalHarmonics;\n\t}\n\n\t/**\n\t * @deprecated\n\t * use scene.ambientSH\n\t */\n\tset ambientSphericalHarmonics(value: SphericalHarmonicsL2) {\n\t\tvar originalSH: SphericalHarmonicsL2 = value || SphericalHarmonicsL2._default;\n\n\t\tif (!this._ambientSphericalHarmonics) {\n\t\t\tthis._ambientSphericalHarmonics = new SphericalHarmonicsL2();\n\t\t}\n\t\tif (this._ambientSphericalHarmonics != value)\n\t\t\tvalue.cloneTo(this._ambientSphericalHarmonics);\n\t\tif (this.ambientMode == AmbientMode.TripleColor)\n\t\t\tthis._applySHCoefficients(originalSH, 2.2);//Gamma to Linear,I prefer use 'Color.gammaToLinearSpace',but must same with Unity now.\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate _applySHCoefficients(originalSH: SphericalHarmonicsL2, intensity: number): void {\n\t\tif (!this._shCoefficients) {\n\t\t\tthis._shCoefficients = new Array(7);\n\t\t\tfor (var i: number = 0; i < 7; i++)\n\t\t\t\tthis._shCoefficients[i] = new Vector4();\n\t\t}\n\t\tvar optSH: Vector4[] = this._shCoefficients;\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\tvar shaderSHA: Vector4 = optSH[i];\n\t\t\tvar shaderSHB: Vector4 = optSH[i + 3];\n\t\t\tshaderSHA.setValue(originalSH.getCoefficient(i, 3) * intensity, originalSH.getCoefficient(i, 1) * intensity, originalSH.getCoefficient(i, 2) * intensity, (originalSH.getCoefficient(i, 0) - originalSH.getCoefficient(i, 6)) * intensity);\n\t\t\tshaderSHB.setValue(originalSH.getCoefficient(i, 4) * intensity, originalSH.getCoefficient(i, 5) * intensity, originalSH.getCoefficient(i, 6) * 3 * intensity, originalSH.getCoefficient(i, 7) * intensity);// Quadratic polynomials \n\t\t}\n\t\toptSH[6].setValue(originalSH.getCoefficient(0, 8) * intensity, originalSH.getCoefficient(1, 8) * intensity, originalSH.getCoefficient(2, 8) * intensity, 1);// Final quadratic polynomial\n\t}\n\n\t/**\n   * @deprecated\n   * 设置 天空， 地平线， 地面 环境光颜色\n   */\n\tpublic setGradientAmbient(skyColor: Vector3, equatorColor: Vector3, groundColor: Vector3) {\n\t\tthis._ambientSkyColor = skyColor;\n\t\tthis._ambientEquatorColor = equatorColor;\n\t\tthis._ambientGroundColor = groundColor;\n\n\t\tlet gradientSH = SphericalHarmonicsL2Generater.CalGradientSH(this._ambientSkyColor, this._ambientEquatorColor, this._ambientGroundColor, true);\n\t\tthis._ambientTripleColorSphericalHarmonics = gradientSH;\n\n\t\tif (this.ambientMode == AmbientMode.TripleColor) {\n\t\t\tthis._applySHCoefficients(gradientSH, 2.2);\n\t\t}\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\n\t}\n}\n\n\n","import { RenderElement } from \"./RenderElement\";\nimport { RenderContext3D } from \"./RenderContext3D\";\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\nimport { Transform3D } from \"../Transform3D\"\nimport { Material } from \"../material/Material\"\nimport { BoundFrustum } from \"../../math/BoundFrustum\"\nimport { Event } from \"../../../events/Event\"\nimport { Lightmap } from \"../scene/Lightmap\";\nimport { MeshSprite3DShaderDeclaration } from \"../../../d3/core/MeshSprite3DShaderDeclaration\";\nimport { TextureCube } from \"../../resource/TextureCube\";\nimport { Component } from \"../../../components/Component\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { TransLargeUBOUtils } from \"../TransLargeUBOUtils\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\nimport { SubUniformBufferData } from \"../../../RenderEngine/SubUniformBufferData\";\nimport { Stat } from \"../../../utils/Stat\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { Volume } from \"../../component/Volume/Volume\";\nimport { ReflectionProbe, ReflectionProbeMode } from \"../../component/Volume/reflectionProbe/ReflectionProbe\";\nimport { Mesh } from \"../../resource/models/Mesh\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { NodeFlags } from \"../../../Const\";\nimport { Sprite3DRenderDeclaration } from \"./Sprite3DRenderDeclaration\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { BatchRender } from \"../../component/Volume/BatchVolume/BatchRender\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { IBoundsCell } from \"../../math/IBoundsCell\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\nexport enum RenderBitFlag {\n    RenderBitFlag_CullFlag = 0,\n    RenderBitFlag_Batch = 1,\n    RenderBitFlag_Editor = 2,\n    RenderBitFlag_InstanceBatch = 3,\n    RenderBitFlag_VertexMergeBatch = 4,\n\n}\n/**\n * <code>Render</code> 类用于渲染器的父类，抽象类不允许实例。\n */\nexport class BaseRender extends Component implements IBoundsCell {\n    /** @internal */\n    static _meshVerticeDefine: Array<ShaderDefine> = [];\n\n    /**@internal */\n    private static _uniqueIDCounter: number = 0;\n\n    /**@internal */\n    static _tempBoundBoxCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n\n    /**@internal */\n    static _defaultLightmapScaleOffset: Vector4 = new Vector4(1.0, 1.0, 0.0, 0.0);\n\n    /**@internal */\n    static _transLargeUbO: TransLargeUBOUtils;\n\n    /**\n     * BaseRender Init\n     */\n    static __init__() {\n        BaseRender.shaderValueInit();\n        // if (Config3D._config._uniformBlock)\n        // \tBaseRender.initRenderableLargeUniformBlock();\n    }\n    /**\n      * @internal\n      * @param mesh \n      * @param out \n      */\n    static getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\n        out.length = 0;\n        var define: number;\n        for (var i: number = 0, n: number = mesh._subMeshes.length; i < n; i++) {\n            var subMesh = mesh.getSubMesh(i);\n            var vertexElements: any[] = subMesh._vertexBuffer._vertexDeclaration._vertexElements;\n            for (var j: number = 0, m: number = vertexElements.length; j < m; j++) {\n                var vertexElement = vertexElements[j];\n                var name: number = vertexElement._elementUsage;\n                switch (name) {\n                    case VertexMesh.MESH_COLOR0:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\n                        break\n                    case VertexMesh.MESH_TEXTURECOORDINATE0:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\n                        break;\n                    case VertexMesh.MESH_TEXTURECOORDINATE1:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\n                        break;\n                    case VertexMesh.MESH_TANGENT0:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\n                        break;\n                }\n            }\n        }\n        return define;\n    }\n\n    static changeVertexDefine(oldMesh: Mesh, mesh: Mesh, defineDatas: ShaderData) {\n\n        var lastValue: Mesh = oldMesh;\n        if (lastValue) {\n            BaseRender.getMeshDefine(lastValue, BaseRender._meshVerticeDefine);\n            for (var i: number = 0, n: number = BaseRender._meshVerticeDefine.length; i < n; i++)\n                defineDatas.removeDefine(BaseRender._meshVerticeDefine[i]);\n        }\n        if (mesh) {\n            BaseRender.getMeshDefine(mesh, BaseRender._meshVerticeDefine);\n            for (var i: number = 0, n: number = BaseRender._meshVerticeDefine.length; i < n; i++)\n                defineDatas.addDefine(BaseRender._meshVerticeDefine[i]);\n        }\n    }\n\n    static shaderValueInit() {\n        Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL = Shader3D.getDefineByName(\"GI_LEGACYIBL\");\n        Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL = Shader3D.getDefineByName(\"GI_IBL\");\n        Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD = Shader3D.getDefineByName(\"IBL_RGBD\");\n        Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION = Shader3D.getDefineByName(\"SPECCUBE_BOX_PROJECTION\");\n    }\n\n    /** @internal */\n    private _lightmapScaleOffset: Vector4 = new Vector4(1, 1, 0, 0);\n    /** @internal */\n    private _lightmapIndex: number;\n    /** @internal */\n    private _materialsInstance: boolean[];\n    /** @internal */\n    _sharedMaterials: Material[] = [];\n    /** @internal TODO*/\n    _supportOctree: boolean = true;\n    /** @internal TODO*/\n    _scene: any;//Scene3D\n    /** @internal */\n    _sceneUpdateMark: number = -1;\n    /** @internal 属于相机的标记*/\n    _updateMark: number = -1;\n    /** @internal 是否需要反射探针*/\n    _probReflection: ReflectionProbe;\n    /** @internal 材质是否支持反射探针*/\n    _surportReflectionProbe: boolean = false;\n    /** @internal 设置是反射探针模式 off  simple */\n    _reflectionMode: number = ReflectionProbeMode.simple;\n    /** @internal */\n    _shaderValues: ShaderData;\n    /**@internal */\n    _renderElements: RenderElement[];\n    /** @internal */\n    _updateRenderType: number = -1;\n    /**排序矫正值。*/\n    sortingFudge: number;\n    /**@internal */\n    _subUniformBufferData: SubUniformBufferData;\n    /**@internal motion list index，not motion is -1*/\n    _motionIndexList: number = -1;\n    /**@internal 是否自定义了needRender*/\n    _customCull: boolean;\n    /**@internal 可以根据不同的值来设置*/\n    _ratioIgnor: number = 0.005;//TODO\n    /**@internal TODO*/\n    _LOD: number = -1;\n    /**@internal TODO*/\n    _batchRender: BatchRender;\n    /**@internal 如果这个值不是0,说明有一些条件使他不能加入渲染队列，例如如果是1，证明此节点被lod淘汰*/\n    private _volume: Volume;\n    /**\n     * DistanceVolumCull\n     * 根据距离和包围盒进行裁剪，越大越容易被裁\n     */\n    set ratioIgnor(value: number) {\n        this._ratioIgnor = value;\n    }\n\n    get ratioIgnor(): number {\n        return this._ratioIgnor;\n    }\n\n    get renderbitFlag() {\n        return this._rendernode.renderbitFlag;\n    }\n\n    set boundsChange(value: boolean) {\n        this._rendernode.boundsChange = value\n    }\n\n    get boundsChange(): boolean {\n        return this._rendernode.boundsChange;\n    }\n\n    /**@internal */\n    protected _rendernode: IBaseRenderNode;\n    /** @internal */\n    protected _bounds: Bounds;\n\n    /** @internal */\n    protected _baseGeometryBounds: Bounds;\n    /**@internal */\n    protected _transform: Transform3D;\n\n    get renderNode(): IBaseRenderNode {\n        return this._rendernode;\n    }\n\n    set distanceForSort(value: number) {\n        this._rendernode.distanceForSort = value;\n    }\n\n    get distanceForSort() {\n        return this._rendernode.distanceForSort;\n    }\n\n    /**\n     * 设置GeometryBounds，\n     * 如果设置了此bounds，渲染包围盒会根据geometryBounds和transform来更新，native层会下沉\n     * @internal\n     */\n    set geometryBounds(value: Bounds) {\n        this._baseGeometryBounds = this._rendernode.geometryBounds = value;\n    }\n    get geometryBounds(): Bounds {\n        return this._baseGeometryBounds;\n    }\n    /**\n     * 获取唯一标识ID,通常用于识别。\n     */\n    get id(): number {\n        return this._rendernode.renderId;\n    }\n\n    /**\n     * 光照贴图的索引。\n     */\n    get lightmapIndex(): number {\n        return this._lightmapIndex;\n    }\n\n    set lightmapIndex(value: number) {\n        this._lightmapIndex = value;\n    }\n\n    /**\n     * 光照贴图的缩放和偏移。\n     */\n    get lightmapScaleOffset(): Vector4 {\n        return this._lightmapScaleOffset;\n    }\n\n    set lightmapScaleOffset(value: Vector4) {\n        if (!value)\n            throw \"BaseRender: lightmapScaleOffset can't be null.\";\n        this._lightmapScaleOffset = value;\n        this._setShaderValue(RenderableSprite3D.LIGHTMAPSCALEOFFSET, ShaderDataType.Vector4, value);\n    }\n\n    /**\n     * 返回第一个实例材质,第一次使用会拷贝实例对象。\n     */\n    get material(): Material {\n        var material: Material = this._sharedMaterials[0];\n        if (material && !this._materialsInstance[0]) {\n            var insMat: Material = this._getInstanceMaterial(material, 0);\n            var renderElement: RenderElement = this._renderElements[0];\n            (renderElement) && (renderElement.material = insMat);\n        }\n        return this._sharedMaterials[0];\n    }\n\n    set material(value: Material) {\n        this.sharedMaterial = value;\n        this._isSupportReflection();\n    }\n\n    /**\n     * 潜拷贝实例材质列表,第一次使用会拷贝实例对象。\n     */\n    get materials(): Material[] {\n        for (var i: number = 0, n: number = this._sharedMaterials.length; i < n; i++) {\n            if (!this._materialsInstance[i]) {\n                var insMat: Material = this._getInstanceMaterial(this._sharedMaterials[i], i);\n                var renderElement: RenderElement = this._renderElements[i];\n                (renderElement) && (renderElement.material = insMat);\n            }\n        }\n        return this._sharedMaterials.slice();\n    }\n\n    set materials(value: Material[]) {\n        this.sharedMaterials = value;\n        this._isSupportReflection();\n    }\n\n    /**\n     * 返回第一个材质。\n     */\n    get sharedMaterial(): Material {\n        return this._sharedMaterials[0];\n    }\n\n    set sharedMaterial(value: Material) {\n        var lastValue: Material = this._sharedMaterials[0];\n        if (lastValue !== value) {\n            this._sharedMaterials[0] = value;\n            this._materialsInstance[0] = false;\n            this._changeMaterialReference(lastValue, value);\n            var renderElement: RenderElement = this._renderElements[0];\n            (renderElement) && (renderElement.material = value);\n        }\n        this._isSupportReflection();\n    }\n\n    /**\n     * 浅拷贝材质列表。\n     */\n    get sharedMaterials(): Material[] {\n        return this._sharedMaterials.slice();\n    }\n\n    set sharedMaterials(value: Material[]) {\n        var materialsInstance: boolean[] = this._materialsInstance;\n        var sharedMats: Material[] = this._sharedMaterials;\n\n        for (var i: number = 0, n: number = sharedMats.length; i < n; i++) {\n            var lastMat: Material = sharedMats[i];\n            (lastMat) && (lastMat._removeReference());\n        }\n\n        if (value) {\n            var count: number = value.length;\n            materialsInstance.length = count;\n            sharedMats.length = count;\n            for (i = 0; i < count; i++) {\n                lastMat = sharedMats[i];\n                var mat: Material = value[i];\n                if (lastMat !== mat) {\n                    materialsInstance[i] = false;\n                    var renderElement: RenderElement = this._renderElements[i];\n                    (renderElement) && (renderElement.material = mat);\n                }\n                if (mat) {\n                    mat._addReference();\n                }\n                sharedMats[i] = mat;\n            }\n        } else {\n            throw new Error(\"BaseRender: shadredMaterials value can't be null.\");\n        }\n        this._isSupportReflection();\n    }\n\n    /**\n     * 包围盒,只读,不允许修改其值。\n     */\n    get bounds(): Bounds {\n        if (this.boundsChange) {\n            this._calculateBoundingBox();\n            this.boundsChange = false;\n        }\n        return this._bounds as Bounds;\n    }\n\n    set receiveShadow(value: boolean) {\n        if (this.renderNode.receiveShadow !== value) {\n            this.renderNode.receiveShadow = value;\n            if (value)\n                this._shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\n            else\n                this._shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\n        }\n    }\n\n    /**\n     * 是否接收阴影属性\n     */\n    get receiveShadow(): boolean {\n        return this.renderNode.receiveShadow;\n    }\n\n    /**\n     * 是否产生阴影。\n     */\n    get castShadow(): boolean {\n        return this.renderNode.castShadow;\n    }\n\n    set castShadow(value: boolean) {\n        this.renderNode.castShadow = value;\n    }\n\n    /**\n     * 反射模式\n     */\n    set reflectionMode(value: ReflectionProbeMode) {\n        this._reflectionMode = value;\n    }\n\n    get reflectionMode(): ReflectionProbeMode {\n        return this._reflectionMode;\n    }\n\n\n\n    set volume(value: Volume) {\n        if (!value) {//value = null,\n            if (this._volume) {\n                this._volume._removeRenderNode && this._volume._removeRenderNode(this);\n                this._volume = null;\n            }\n            return;\n        }\n        if (this._volume != value) {\n            value._addRenderNode && value._addRenderNode(this);\n            this._volume = value;\n            return;\n        } else {\n            value._motionInVolume && value._motionInVolume(this);\n        }\n    }\n\n    get volume(): Volume {\n        return this._volume;\n    }\n\n    /**\n     * 设置反射球\n     */\n    set probReflection(voluemProbe: ReflectionProbe) {\n        if (this._probReflection == voluemProbe)\n            return;\n        this._probReflection = voluemProbe;\n        if (this._reflectionMode == ReflectionProbeMode.off) {\n            this._shaderValues.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\n            this._shaderValues.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\n            this._setShaderValue(RenderableSprite3D.IBLTEX, ShaderDataType.TextureCube, TextureCube.blackTexture);\n        } else {\n            this._probReflection.applyReflectionShaderData(this._shaderValues);\n        }\n    }\n\n\n    /**\n     * 创建一个新的 <code>BaseRender</code> 实例。\n     */\n    constructor() {\n        super();\n        this._rendernode = this._createBaseRenderNode();\n        this._rendernode.owner = this;\n        this._rendernode.renderId = ++BaseRender._uniqueIDCounter;\n        this._bounds = this._rendernode.bounds = new Bounds(Vector3.ZERO, Vector3.ZERO);\n        this._renderElements = [];\n        this._enabled = true;\n        this._materialsInstance = [];\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(null);\n        this.lightmapIndex = -1;\n        this.receiveShadow = false;\n        this.sortingFudge = 0.0;\n        this._customCull = this._needRender !== BaseRender.prototype._needRender;\n        this.runInEditor = true;\n        this.boundsChange = true;\n        this._rendernode.renderbitFlag = 0;\n        this._rendernode.staticMask = 1;\n    }\n\n    protected _createBaseRenderNode(): IBaseRenderNode {\n        return LayaGL.renderOBJCreate.createBaseRenderNode();\n    }\n\n    private _changeLayer(layer: number) {\n        this._rendernode.layer = layer;\n    }\n\n    private _changeStaticMask(staticmask: number) {\n        this._rendernode.staticMask = staticmask;\n    }\n\n    protected _onAdded(): void {\n        this._transform = (this.owner as Sprite3D).transform;\n        (this.owner as Sprite3D)._isRenderNode++;\n        this.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Editor, this.owner._getBit(NodeFlags.HIDE_BY_EDITOR));\n        this._rendernode.transform = this._transform;\n        this._changeLayer((this.owner as Sprite3D).layer);\n        this._changeStaticMask((this.owner as Sprite3D)._isStatic);\n    }\n\n    protected _onEnable(): void {\n        super._onEnable();\n        if (this.owner) {\n            (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);//如果为合并BaseRender,owner可能为空\n            (this.owner as Sprite3D).on(Event.LAYERCHANGE, this, this._changeLayer);\n            (this.owner as Sprite3D).on(Event.staticMask, this, this._changeStaticMask);\n            this._changeLayer((this.owner as Sprite3D).layer);\n            this._changeStaticMask((this.owner as Sprite3D)._isStatic);\n        }\n        this.owner.scene._addRenderObject(this);\n        this._setBelongScene(this.owner.scene);\n    }\n\n    protected _onDisable(): void {\n        if (this.owner) {\n            (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);//如果为合并BaseRender,owner可能为空\n            (this.owner as Sprite3D).off(Event.LAYERCHANGE, this, this._changeLayer);\n            (this.owner as Sprite3D).off(Event.staticMask, this, this._changeStaticMask);\n        }\n        this.owner.scene._removeRenderObject(this);\n        this._setUnBelongScene();\n        this.volume = null;\n    }\n\n    /**\n     * @internal\n     */\n    private _changeMaterialReference(lastValue: Material, value: Material): void {\n        (lastValue) && (lastValue._removeReference());\n        value._addReference();//TODO:value可以为空\n    }\n\n    /**\n     * @internal\n     */\n    private _getInstanceMaterial(material: Material, index: number): Material {\n        var insMat: Material = material.clone();//深拷贝\n        insMat.name = insMat.name + \"(Instance)\";\n        this._materialsInstance[index] = true;\n        this._changeMaterialReference(this._sharedMaterials[index], insMat);\n        this._sharedMaterials[index] = insMat;\n        return insMat;\n    }\n\n    /**\n     * @internal\n     */\n    private _isSupportReflection() {\n        let pre = this._surportReflectionProbe;\n        this._surportReflectionProbe = false;\n        var sharedMats: Material[] = this._sharedMaterials;\n        for (var i: number = 0, n: number = sharedMats.length; i < n; i++) {\n            var mat: Material = sharedMats[i];\n            this._surportReflectionProbe ||= (this._surportReflectionProbe || (mat && mat._shader._supportReflectionProbe));//TODO：最后一个判断是否合理\n        }\n        if (!pre && this._surportReflectionProbe)//如果变成支持Reflection\n            this._addReflectionProbeUpdate();\n    }\n\n    /**\n     * @internal\n     * BaseRender motion\n     */\n    protected _onWorldMatNeedChange(flag: number): void {\n        this.boundsChange = true;\n        this._addReflectionProbeUpdate();\n        this._subUniformBufferData && (this._subUniformBufferData._needUpdate = true);\n        this._batchRender && this._batchRender._updateOneRender(this);\n    }\n\n    /**\n     * @internal\n     */\n    protected _calculateBoundingBox(): void {\n        throw (\"BaseRender: must override it.\");\n    }\n\n\n    /**\n     * 设置渲染flag,每一位都代表不同的淘汰原因，1表示lod淘汰\n     */\n    setRenderbitFlag(flag: number, pass: boolean) {\n        if (pass)\n            this._rendernode.renderbitFlag |= (1 << flag);\n        else\n            this._rendernode.renderbitFlag &= ~(1 << flag);\n    }\n\n    /**\n     * @internal\n     */\n    _setShaderValue(index: number, shaderdataType: ShaderDataType, value: any) {\n        this._shaderValues.setShaderData(index, shaderdataType, value);\n    }\n\n    /**\n     * 渲染器添加到更新反射探针队列\n     * @internal\n     */\n    _addReflectionProbeUpdate() {\n        //TODO目前暂时不支持混合以及与天空盒模式，只支持simple和off\n        this._scene && this._scene._volumeManager.addMotionObject(this);\n    }\n\n    /**\n     * @internal\n     * 全局贴图\n     */\n    _applyLightMapParams(): void {\n        if (!this._scene) return;\n        var lightMaps: Lightmap[] = this._scene.lightmaps;\n        var shaderValues: ShaderData = this._shaderValues;\n        var lightmapIndex: number = this._lightmapIndex;\n        if (lightmapIndex >= 0 && lightmapIndex < lightMaps.length) {\n            var lightMap: Lightmap = lightMaps[lightmapIndex];\n            shaderValues.setTexture(RenderableSprite3D.LIGHTMAP, lightMap.lightmapColor);\n            shaderValues.addDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\n            if (lightMap.lightmapDirection) {\n                shaderValues.setTexture(RenderableSprite3D.LIGHTMAP_DIRECTION, lightMap.lightmapDirection);\n                shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\n            }\n            else {\n                shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\n            }\n        } else {\n            shaderValues.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\n            shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\n        }\n    }\n\n    _applyReflection() {\n        if (!this._probReflection) return;\n        if (this._probReflection._updateMark = ILaya3D.Scene3D._updateMark) {\n            this._probReflection.applyReflectionShaderData(this._shaderValues)\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _setBelongScene(scene: any): void {\n        this._scene = scene;\n        this._onWorldMatNeedChange(1);\n        this._isSupportReflection();\n        this._batchRender && this._batchRender._batchOneRender(this);\n        Stat.renderNode++;\n        if (false) {\n            this._subUniformBufferData = BaseRender._transLargeUbO.create();\n            this._subUniformBufferData.setMatrix(\"u_WorldMat\", Matrix4x4.DEFAULT);\n            this._addReflectionProbeUpdate();\n            this.probReflection = this._probReflection;\n            this.lightmapScaleOffset = this._lightmapScaleOffset;\n            this._subUniformBufferData._needUpdate = true;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _setUnBelongScene() {\n        Stat.renderNode--;\n        this._scene._volumeManager.removeMotionObject(this);\n        let batch = this._batchRender;\n        this._batchRender && this._batchRender._removeOneRender(this);\n        this._batchRender = batch;\n        if (false) {\n            this._subUniformBufferData && BaseRender._transLargeUbO.recover(this._subUniformBufferData);\n            this._subUniformBufferData = null;\n        }\n        this._scene = null;\n    }\n\n    /**\n     * @internal\n     * @param boundFrustum 裁剪。\n     */\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\n        if (boundFrustum)\n            return boundFrustum.intersects(this.bounds);\n        else\n            return true;\n    }\n\n    /**\n     * @internal\n     * 裁剪失败后，如果需要可以调用此函数更新数据\n     */\n    _CullOut(): void {\n    }\n\n    /**\n     * @internal\n     */\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\n    }\n\n    /**\n     * @internal\n     */\n    _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\n    }\n\n    protected _onDestroy() {\n        if (this.owner as Sprite3D)\n            (this.owner as Sprite3D)._isRenderNode--;\n        (this._motionIndexList !== -1) && (this._scene._sceneRenderManager.removeMotionObject(this));\n        (this._scene) && this._scene.sceneRenderableManager.removeRenderObject(this);\n        var i: number = 0, n: number = 0;\n        for (i = 0, n = this._renderElements.length; i < n; i++)\n            this._renderElements[i].destroy();\n        for (i = 0, n = this._sharedMaterials.length; i < n; i++) {\n            let m = this._sharedMaterials[i];\n            m && !m.destroyed && m._removeReference();\n        }\n        this._renderElements = null;\n        this._sharedMaterials = null;\n        this._bounds = null;\n        this._lightmapScaleOffset = null;\n        this._scene = null;\n        this._rendernode = null;\n        this._shaderValues.destroy();\n        this._shaderValues = null;\n        this._transform = null;\n        this._batchRender = null;\n        if (this._subUniformBufferData) {\n            BaseRender._transLargeUbO.recover(this._subUniformBufferData);\n            this._subUniformBufferData = null;\n        }\n    }\n\n    /**\n     * @override\n     * @param dest \n     */\n    _cloneTo(dest: Component): void {\n        super._cloneTo(dest);\n        let render = (dest as BaseRender);\n        render.receiveShadow = this.receiveShadow;\n        render.sharedMaterials = this.sharedMaterials;\n        render.reflectionMode = this.reflectionMode;\n        render.castShadow = this.castShadow;\n        render.sortingFudge = this.sortingFudge;\n    }\n}\n\n","import { BaseRender } from \"./BaseRender\"\nimport { RenderContext3D } from \"./RenderContext3D\"\nimport { Camera } from \"../Camera\"\nimport { GeometryElement } from \"../GeometryElement\"\nimport { Transform3D } from \"../Transform3D\"\nimport { Material } from \"../material/Material\"\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\"\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\"\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\"\nimport { LayaGL } from \"../../../layagl/LayaGL\"\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\"\nimport { ILaya3D } from \"../../../../ILaya3D\"\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\"\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\"\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\"\n\n/**\n * <code>RenderElement</code> 类用于实现渲染元素。\n */\nexport class RenderElement {\n    /** @internal */\n    static RENDERTYPE_NORMAL: number = 0;\n    /** @internal */\n    static RENDERTYPE_STATICBATCH: number = 1;\n    /** @internal */\n    static RENDERTYPE_INSTANCEBATCH: number = 2;\n    /** @internal */\n    static RENDERTYPE_VERTEXBATCH: number = 3;\n\n    /** @internal */\n    static _compileDefine: DefineDatas = new DefineDatas();\n\n    /**\n     * 可提交底层的渲染节点\n     */\n    _renderElementOBJ: IRenderElement;\n    /** @internal */\n    _geometry: GeometryElement;\n    /**@internal */\n    _canBatch: boolean = false;\n    /** @internal */\n    protected _material: Material;//可能为空\n    /** @internal */\n    protected _baseRender: BaseRender;\n    /**@internal */\n    protected _subShader: SubShader;\n    /**@internal */\n    _subShaderIndex: number = 0;\n    _batchElement: RenderElement;\n\n\n    /** @internal */\n    set transform(value: Transform3D) {\n        this._renderElementOBJ._transform = value;\n    }\n\n    /**@internal */\n    get transform(): Transform3D {\n        return this._renderElementOBJ._transform;\n    }\n\n    /**@internal */\n    set material(value: Material) {\n        // todo debug 临时\n        if (value) {\n            this._material = value;\n            this._renderElementOBJ._materialShaderData = value.shaderData;\n        }\n\n    }\n\n    /**@internal */\n    get material(): Material {\n        return this._material;\n    }\n\n    /**@internal */\n    set renderSubShader(value: SubShader) {\n        this._subShader = value;\n    }\n\n    /**@internal */\n    get renderSubShader(): SubShader {\n        return this._subShader;\n    }\n    /**@internal */\n    set render(value: BaseRender) {\n        this._baseRender = value;\n        this._renderElementOBJ._renderShaderData = value._shaderValues;\n    }\n\n    get render(): BaseRender {\n        return this._baseRender;\n    }\n\n\n\n    /** @internal */\n    staticBatch: GeometryElement;\n    /** @internal */\n    renderType: number = RenderElement.RENDERTYPE_NORMAL;\n    /**\n     * 创建一个 <code>RenderElement</code> 实例。\n     */\n    constructor() {\n        this._createRenderElementOBJ();\n    }\n\n    protected _createRenderElementOBJ() {\n        this._renderElementOBJ = LayaGL.renderOBJCreate.createRenderElement();\n    }\n\n    /**\n     * @internal\n     */\n    getInvertFront(): boolean {\n        return this.transform ? this.transform._isFrontFaceInvert : false;\n    }\n\n    /**\n     * @internal\n     */\n    setTransform(transform: Transform3D): void {\n        this.transform = transform;\n    }\n\n    /**\n     * @internal\n     */\n    setGeometry(geometry: GeometryElement): void {\n        this._geometry = geometry;\n        this._renderElementOBJ._geometry = geometry._geometryElementOBj;\n    }\n\n    // /**\n    //  * @internal\n    //  */\n    // addToOpaqueRenderQueue(context: RenderContext3D, queue: RenderQueue): void {\n    // \tqueue.elements.add(this);\n    // }\n\n    // /**\n    //  * @internal\n    //  */\n    // addToTransparentRenderQueue(context: RenderContext3D, queue: RenderQueue): void {\n    // \tqueue.elements.add(this);\n    // }\n\n    compileShader(context: IRenderContext3D) {\n        var passes: ShaderPass[] = this._subShader._passes;\n        this._renderElementOBJ._clearShaderInstance();\n        for (var j: number = 0, m: number = passes.length; j < m; j++) {\n            var pass: ShaderPass = passes[j];\n            //NOTE:this will cause maybe a shader not render but do prepare before，but the developer can avoide this manual,for example shaderCaster=false.\n            if (pass._pipelineMode !== context.pipelineMode)\n                continue;\n\n            var comDef: DefineDatas = RenderElement._compileDefine;\n\n            if (context.sceneShaderData) {\n                context.sceneShaderData._defineDatas.cloneTo(comDef);\n            } else {\n                Shader3D._configDefineValues.cloneTo(comDef);\n            }\n            context.cameraShaderData && comDef.addDefineDatas(context.cameraShaderData._defineDatas);\n            this.render && comDef.addDefineDatas(this.render._shaderValues._defineDatas);\n\n            comDef.addDefineDatas(this._renderElementOBJ._materialShaderData._defineDatas);\n            var shaderIns: ShaderInstance = pass.withCompile(comDef);\n            this._renderElementOBJ._addShaderInstance(shaderIns);\n        }\n    }\n\n\n    _convertSubShader(customShader: Shader3D, replacementTag: string, subshaderIndex: number = 0) {\n        var subShader: SubShader = this.material._shader.getSubShaderAt(this._subShaderIndex);//TODO:\n        this.renderSubShader = null;\n        if (customShader) {\n            if (replacementTag) {\n                var oriTag: string = subShader.getFlag(replacementTag);\n                if (oriTag) {\n                    var customSubShaders: SubShader[] = customShader._subShaders;\n                    for (var k: number = 0, p: number = customSubShaders.length; k < p; k++) {\n                        var customSubShader: SubShader = customSubShaders[k];\n                        if (oriTag === customSubShader.getFlag(replacementTag)) {\n                            this.renderSubShader = customSubShader;\n                            break;\n                        }\n                    }\n                    if (!this.renderSubShader)\n                        return;\n                } else {\n                    return;\n                }\n            } else {\n                this.renderSubShader = customShader.getSubShaderAt(subshaderIndex);//TODO:\n            }\n        } else {\n            this.renderSubShader = subShader;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _update(scene: any, context: RenderContext3D, customShader: Shader3D, replacementTag: string, subshaderIndex: number = 0): void {\n        if (this.material) {//材质可能为空\n            this._convertSubShader(customShader, replacementTag, subshaderIndex);\n            if (!this.renderSubShader)\n                return;\n            var renderQueue = scene._getRenderQueue(this.material.renderQueue);\n            if (renderQueue._isTransparent)\n                renderQueue.addRenderElement(this);\n            else\n                renderQueue.addRenderElement(this);\n        }\n    }\n\n    _renderUpdatePre(context: RenderContext3D) {\n\n        var sceneMark: number = ILaya3D.Scene3D._updateMark;\n        var transform: Transform3D = this.transform;\n        context.renderElement = this;\n        //model local\n        var modelDataRender: boolean = (!!this.render) ? (sceneMark !== this.render._sceneUpdateMark || this.renderType !== this.render._updateRenderType) : false;\n        if (modelDataRender) {\n            this.render._renderUpdate(context, transform);\n            this.render._sceneUpdateMark = sceneMark;\n        }\n        //camera\n        var updateMark: number = Camera._updateMark;\n        var updateRender: boolean = (!!this.render) ? (updateMark !== this.render._updateMark || this.renderType !== this.render._updateRenderType) : false;\n        if (updateRender) {//此处处理更新为裁剪和合并后的，可避免浪费\n            this.render._renderUpdateWithCamera(context, transform);\n            this.render._updateMark = updateMark;\n            this.render._updateRenderType = this.renderType;\n        }\n\n        const subUbo = (!!this.render) ? this.render._subUniformBufferData : false;\n        if (subUbo) {\n            subUbo._needUpdate && BaseRender._transLargeUbO.updateSubData(subUbo);\n        }\n        //context.shader = this._renderElementOBJ._subShader;\n        this._renderElementOBJ._isRender = this._geometry._prepareRender(context);\n        this._geometry._updateRenderParams(context);\n        this.compileShader(context._contextOBJ);\n        this._renderElementOBJ._invertFront = this.getInvertFront();\n    }\n\n    /**\n     * @internal\n     */\n    _render(context: IRenderContext3D): void {\n        this._renderElementOBJ._render(context);\n    }\n\n    /**\n     * @internal\n     */\n    destroy(): void {\n        this._renderElementOBJ._destroy();\n        this._renderElementOBJ = null;\n        this._geometry = null;\n        this._baseRender = null;\n        this._material = null\n        this._baseRender = null;\n        this._subShader = null;\n    }\n}\n\n","import { RenderContext3D } from \"./render/RenderContext3D\"\nimport { IRenderGeometryElement } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\nimport { BufferState } from \"../../webgl/utils/BufferState\";\n\n/**\n * <code>GeometryElement</code> 类用于实现几何体元素,该类为抽象类。\n */\nexport class GeometryElement {\n\t/** @internal */\n\tprivate static _uniqueIDCounter: number = 0;\n\tprotected _owner: any;\n\t/**@internal */\n\tprotected static _typeCounter: number = 0;\n\t/**@internal */\n\tprotected _destroyed: boolean;\n\t_geometryElementOBj: IRenderGeometryElement;\n\t/** @internal */\n\t_id: number;\n\t/**\n\t * VAO OBJ\n\t */\n\tset bufferState(value: BufferState) {\n\t\tthis._geometryElementOBj.bufferState = value;\n\t}\n\n\tget bufferState(): BufferState {\n\t\treturn this._geometryElementOBj.bufferState;\n\t}\n\n\t/**\n\t * mesh topology type\n\t */\n\tset mode(value: MeshTopology) {\n\t\tthis._geometryElementOBj.mode = value;\n\t}\n\n\tget mode(): MeshTopology {\n\t\treturn this._geometryElementOBj.mode;\n\t}\n\n\t/**\n\t * draw Type\n\t */\n\tset drawType(value: number) {\n\t\tthis._geometryElementOBj.drawType = value;\n\t}\n\n\tget drawType(): number {\n\t\treturn this._geometryElementOBj.drawType;\n\t}\n\n\tsetDrawArrayParams(first: number, count: number): void {\n\t\tthis._geometryElementOBj.setDrawArrayParams(first, count);\n\n\t}\n\n\tsetDrawElemenParams(count: number, offset: number): void {\n\t\tthis._geometryElementOBj.setDrawElemenParams(count, offset);\n\t}\n\n\tset instanceCount(value: number) {\n\t\tthis._geometryElementOBj.instanceCount = value;\n\t}\n\n\tget instanceCount(): number {\n\t\treturn this._geometryElementOBj.instanceCount;\n\t}\n\n\tset indexFormat(value: IndexFormat) {\n\t\tthis._geometryElementOBj.indexFormat = value;\n\t}\n\n\tget indexFormat(): IndexFormat {\n\t\treturn this._geometryElementOBj.indexFormat;\n\t}\n\n\n\n\t/**\n\t * 获取是否销毁。\n\t * @return 是否销毁。\n\t */\n\tget destroyed(): boolean {\n\t\treturn this._destroyed;\n\t}\n\n\t/**\n\t * 创建一个 <code>GeometryElement</code> 实例。\n\t */\n\tconstructor(mode: MeshTopology, drawType: DrawType) {\n\t\tthis._destroyed = false;\n\t\tthis._geometryElementOBj = LayaGL.renderOBJCreate.createRenderGeometry(mode, drawType);\n\t\tthis._id = ++GeometryElement._uniqueIDCounter;\n\t}\n\n\n\n\n\n\n\t/**\n\t * 获取几何体类型。\n\t */\n\t_getType(): number {\n\t\tthrow \"GeometryElement:must override it.\";\n\t}\n\n\t/**\n\t * @internal\n\t * @return  是否需要渲染。\n\t */\n\t_prepareRender(state: RenderContext3D): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_render(state: RenderContext3D): void {\n\t\t// throw \"GeometryElement:must override it.\";\n\t\tLayaGL.renderDrawContext.drawGeometryElement(this._geometryElementOBj);\n\t}\n\n\t/**\n\t * @internal\n\t * UpdateGeometry Data\n\t */\n\t_updateRenderParams(state: RenderContext3D): void {\n\t\tthrow \"GeometryElement:must override it.\";\n\t}\n\n\t/**\n\t * 销毁。\n\t */\n\tdestroy(): void {\n\t\tif (this._destroyed)\n\t\t\treturn;\n\t\tthis._destroyed = true;\n\t\tthis._geometryElementOBj.destroy();\n\t}\n\n\tclearRenderParams() {\n\t\tthis._geometryElementOBj.clearRenderParams();\n\t}\n}\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { GeometryElement } from \"../../core/GeometryElement\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\n\n\n/**\n * <code>SkyBox</code> 类用于创建天空盒。\n */\nexport class SkyBox extends GeometryElement {\n\tstatic instance: SkyBox;\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tSkyBox.instance = new SkyBox();//TODO:移植为标准Mesh后需要加锁\n\t}\n\n\t/**\n\t * 创建一个 <code>SkyBox</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper(MeshTopology.Triangles,DrawType.DrawElement);\n\t\tvar halfHeight: number = 1.0;\n\t\tvar halfWidth: number = 1.0;\n\t\tvar halfDepth: number = 1.0;\n\t\tvar vertices: Float32Array = new Float32Array([-halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, halfWidth, -halfDepth, halfHeight, halfWidth,//上\n\t\t-halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, halfWidth, -halfDepth, -halfHeight, halfWidth]);//下\n\t\tvar indices: Uint8Array = new Uint8Array([\n\t\t\t0, 1, 2, 2, 3, 0, //上\n\t\t\t4, 7, 6, 6, 5, 4, //下\n\t\t\t0, 3, 7, 7, 4, 0, //左\n\t\t\t1, 5, 6, 6, 2, 1,//右\n\t\t\t3, 2, 6, 6, 7, 3, //前\n\t\t\t0, 4, 5, 5, 1, 0]);//后\n\t\tvar verDec: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION\");\n\t\tlet vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(verDec.vertexStride * 8, BufferUsage.Static, false);\n\t\tvertexBuffer.vertexDeclaration = verDec;\n\t\tlet indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt8, 36, BufferUsage.Static, false);\n\t\tvertexBuffer.setData(vertices.buffer);\n\t\tindexBuffer.setData(indices);\n\t\tthis.bufferState = new BufferState();\n\t\tthis.bufferState.applyState([vertexBuffer],indexBuffer);\n\t\tthis._geometryElementOBj.setDrawElemenParams(36,0);\n\t\tthis.indexFormat = IndexFormat.UInt8;\n\t}\n\n\t/**\n\t * @internal\n\t * UpdateGeometry Data\n\t */\n\t _updateRenderParams(state: RenderContext3D): void {\n\t\t\n\t}\n}\n\n","import { IVertex } from \"../IVertex\"\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\n/**\n * @internal\n * <code>VertexPositionNormalTexture</code> 类用于创建位置、纹理顶点结构。\n */\nexport class VertexPositionTexture0 implements IVertex {\n\n\tprivate static _vertexDeclaration: VertexDeclaration;\n\n\tstatic get vertexDeclaration(): VertexDeclaration {\n\t\treturn VertexPositionTexture0._vertexDeclaration;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tVertexPositionTexture0._vertexDeclaration = new VertexDeclaration(20, [new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\n\t\tnew VertexElement(12, VertexElementFormat.Vector2, VertexMesh.MESH_TEXTURECOORDINATE0)]);\n\t}\n\n\tprivate _position: Vector3;\n\tprivate _textureCoordinate0: Vector2;\n\n\tget position(): Vector3 {\n\t\treturn this._position;\n\t}\n\n\tget textureCoordinate0(): Vector2 {\n\t\treturn this._textureCoordinate0;\n\t}\n\n\tget vertexDeclaration(): VertexDeclaration {\n\t\treturn VertexPositionTexture0._vertexDeclaration;\n\t}\n\n\tconstructor(position: Vector3, textureCoordinate0: Vector2) {\n\t\tthis._position = position;\n\t\tthis._textureCoordinate0 = textureCoordinate0;\n\t}\n\n}\n\n\n","import { VertexPositionTexture0 } from \"../../graphics/Vertex/VertexPositionTexture0\"\nimport { LayaGL } from \"../../../layagl/LayaGL\"\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { GeometryElement } from \"../../core/GeometryElement\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\n\n/**\n * <code>SkyDome</code> 类用于创建天空盒。\n */\nexport class SkyDome extends GeometryElement {\n\t/**@internal */\n\tprivate static _radius: number = 1;\n\n\tstatic instance: SkyDome;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tSkyDome.instance = new SkyDome();//TODO:移植为标准Mesh后需要加锁\n\t}\n\n\t/**@internal */\n\tprivate _stacks: number;\n\t/**@internal */\n\tprivate _slices: number;\n\n\t/**\n\t * 获取堆数。\n\t */\n\tget stacks(): number {\n\t\treturn this._stacks;\n\t}\n\n\t/**\n\t * 获取层数。\n\t */\n\tget slices(): number {\n\t\treturn this._slices;\n\t}\n\n\t/**\n\t * 创建一个 <code>SkyDome</code> 实例。\n\t * @param stacks 堆数。\n\t * @param slices 层数。\n\t */\n\tconstructor(stacks: number = 48, slices: number = 48) {\n\t\tsuper(MeshTopology.Triangles,DrawType.DrawElement);\n\t\tthis._stacks = stacks;\n\t\tthis._slices = slices;\n\t\tvar vertexDeclaration: VertexDeclaration = VertexPositionTexture0.vertexDeclaration;\n\t\tvar vertexFloatCount: number = vertexDeclaration.vertexStride / 4;\n\t\tvar numberVertices: number = (this._stacks + 1) * (this._slices + 1);\n\t\tvar numberIndices: number = (3 * this._stacks * (this._slices + 1)) * 2;\n\n\t\tvar vertices: Float32Array = new Float32Array(numberVertices * vertexFloatCount);\n\t\tvar indices: Uint16Array = new Uint16Array(numberIndices);\n\n\t\tvar stackAngle: number = Math.PI / this._stacks;\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / this._slices;\n\n\t\t// Generate the group of Stacks for the sphere  \n\t\tvar vertexIndex: number = 0;\n\t\tvar vertexCount: number = 0;\n\t\tvar indexCount: number = 0;\n\n\t\tfor (var stack: number = 0; stack < (this._stacks + 1); stack++) {\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\n\n\t\t\t// Generate the group of segments for the current Stack  \n\t\t\tfor (var slice: number = 0; slice < (this._slices + 1); slice++) {\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle);\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle);\n\t\t\t\tvertices[vertexCount + 0] = x * SkyDome._radius;\n\t\t\t\tvertices[vertexCount + 1] = y * SkyDome._radius;\n\t\t\t\tvertices[vertexCount + 2] = z * SkyDome._radius;\n\t\t\t\tvertices[vertexCount + 3] = -(slice / this._slices) + 0.75;//gzk 改成我喜欢的坐标系 原来是 slice/_slices\n\t\t\t\tvertices[vertexCount + 4] = stack / this._stacks;\n\t\t\t\tvertexCount += vertexFloatCount;\n\t\t\t\tif (stack != (this._stacks - 1)) {\n\t\t\t\t\t// First Face\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\n\t\t\t\t\t// Second \n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices);\n\t\t\t\t\tvertexIndex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vertices.length * 4, BufferUsage.Static, false);\n\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\n\t\tlet indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indices.length, BufferUsage.Static, false);\n\t\tvertexBuffer.setData(vertices.buffer);\n\t\tindexBuffer.setData(indices);\n\n\t\tvar bufferState: BufferState = new BufferState();\n\t\tbufferState.applyState([vertexBuffer],indexBuffer);\n\t\tthis.bufferState = bufferState;\n\t\tthis.indexFormat = IndexFormat.UInt16;\n\t\tthis._geometryElementOBj.setDrawElemenParams(indexBuffer.indexCount,0);\n\t}\n\n\t/**\n\t * @internal\n\t * UpdateGeometry Data\n\t */\n\t _updateRenderParams(state: RenderContext3D): void {\n\t\t\n\t}\n}\n\n","import { ILaya3D } from \"../../../../ILaya3D\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { CompareFunction } from \"../../../RenderEngine/RenderEnum/CompareFunction\";\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { Camera } from \"../../core/Camera\";\nimport { GeometryElement } from \"../../core/GeometryElement\";\nimport { Material } from \"../../core/material/Material\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { RenderElement } from \"../../core/render/RenderElement\";\nimport { Scene3D } from \"../../core/scene/Scene3D\";\nimport { SkyBox } from \"./SkyBox\";\nimport { SkyDome } from \"./SkyDome\";\n\n/**\n * <code>SkyRenderer</code> 类用于实现天空渲染器。\n */\nexport class SkyRenderer {\n    /** @internal */\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4();\n    /** @internal */\n    private static _tempMatrix1: Matrix4x4 = new Matrix4x4();\n\n    /** @internal */\n    private _material: Material;\n    /** @internal */\n    private _mesh: GeometryElement;\n    /**@internal */\n    private _renderElement: RenderElement;\n\n    private _renderData: BaseRender;\n    static SUNLIGHTDIRECTION: number;\n    static SUNLIGHTDIRCOLOR: number;\n    static __init__() {\n        SkyRenderer.SUNLIGHTDIRECTION = Shader3D.propertyNameToID(\"u_SunLight_direction\");\n        SkyRenderer.SUNLIGHTDIRCOLOR = Shader3D.propertyNameToID(\"u_SunLight_color\");\n        const commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\n        commandUniform.addShaderUniform(SkyRenderer.SUNLIGHTDIRECTION, \"u_SunLight_direction\");\n        commandUniform.addShaderUniform(SkyRenderer.SUNLIGHTDIRCOLOR, \"u_SunLight_color\");\n    }\n\n    /**\n     * 材质。\n     */\n    get material(): Material {\n        return this._material;\n    }\n\n    set material(value: Material) {\n        if (this._material !== value) {\n            (this._material) && (this._material._removeReference());\n            this._material = value;\n            this._renderElement.material = value;\n            if (value) {\n                value._addReference();\n                value.cull = CullMode.Off;\n                value.depthTest = CompareFunction.LessEqual;\n                value.depthWrite = false;\n                value.stencilWrite = false;\n                this._renderElement.renderSubShader = this._material._shader.getSubShaderAt(0);\n            }\n            else\n                this._renderElement.renderSubShader = null;\n        }\n    }\n\n    /**\n     * 网格。\n     */\n    get mesh(): GeometryElement {\n        return this._mesh;\n    }\n\n    set mesh(value: GeometryElement) {\n\n        if (this._mesh !== value) {\n            this._mesh = value;\n            this._renderElement.setGeometry(this._mesh);\n        }\n    }\n\n    //@internal\n    private get meshType(): \"box\" | \"dome\" | \"\" {\n        return this.mesh == SkyBox.instance ? \"box\" : (this.mesh == SkyDome.instance ? \"dome\" : \"\");\n    }\n\n    //@internal\n    private set meshType(value: \"box\" | \"dome\" | \"\") {\n        if (value == \"dome\")\n            this.mesh = SkyDome.instance;\n        else\n            this.mesh = SkyBox.instance;\n    }\n\n    /**\n     * 创建一个新的 <code>SkyRenderer</code> 实例。\n     */\n    constructor() {\n        this._renderElement = new RenderElement();\n        this.mesh = SkyDome.instance;\n        this._renderData = new BaseRender();\n        this._renderElement.render = this._renderData;\n    }\n\n    /**\n     * @internal\n     * 是否可用。\n     */\n    _isAvailable(): boolean {\n        return this._material && this._mesh ? true : false;\n    }\n\n    /**\n     * @internal\n     */\n    _render(context: RenderContext3D): void {\n        if (this._material && this._mesh) {\n            var camera= context.camera;\n            var scene: Scene3D = context.scene;\n            var projectionMatrix: Matrix4x4 = SkyRenderer._tempMatrix1;\n            if (camera.orthographic)\n                Matrix4x4.createPerspective(camera.fieldOfView, camera.aspectRatio, camera.nearPlane, camera.farPlane, projectionMatrix);\n            this._renderData._shaderValues.setColor(SkyRenderer.SUNLIGHTDIRCOLOR, scene._sunColor);\n            this._renderData._shaderValues.setVector3(SkyRenderer.SUNLIGHTDIRECTION, scene._sundir);\n            //无穷投影矩阵算法,DirectX右手坐标系推导\n            //http://terathon.com/gdc07_lengyel.pdf\n\n            //xScale  0     0                          0\n            //0     yScale  0                          0\n            //0       0    \t-zfar /(zfar-znear)        -1.0\n            //0       0     -znear*zfar /(zfar-znear)  0\n\n            //xScale  0     0       0        mul   [x,y,z,0] =[xScale*x,yScale*y,-z,-z]\n            //0     yScale  0       0\t\t\n            //0       0    \t-1      -1.0\t\n            //0       0     -0      0\n\n            //[xScale*x,yScale*y,-z,-z]=>[-xScale*x/z,-yScale*y/z,1]\n\n            //xScale  0     0       0      \n            //0     yScale  0       0\t\t\n            //0       0    \t-1+e    -1.0\t\n            //0       0     -0  0\n            var viewMatrix: Matrix4x4 = SkyRenderer._tempMatrix0;\n\n            camera.viewMatrix.cloneTo(viewMatrix);//视图矩阵逆矩阵的转置矩阵，移除平移和缩放\n            camera.projectionMatrix.cloneTo(projectionMatrix);\n            viewMatrix.setTranslationVector(Vector3.ZERO);\n            var epsilon: number = 1e-6;\n            var yScale: number = 1.0 / Math.tan(3.1416 * camera.fieldOfView / 180 * 0.5);\n            projectionMatrix.elements[0] = yScale / camera.aspectRatio;\n            projectionMatrix.elements[5] = yScale;\n            projectionMatrix.elements[10] = epsilon - 1.0;\n            projectionMatrix.elements[11] = -1.0;\n            projectionMatrix.elements[14] = -0;//znear无穷小\n            if ((camera as any).isWebXR) {\n                camera._applyViewProject(context, viewMatrix, camera.projectionMatrix);//TODO:优化 不应设置给Camera直接提交\n            } else {\n                camera._applyViewProject(context, viewMatrix, projectionMatrix);//TODO:优化 不应设置给Camera直接提交\n            }\n\n            context._contextOBJ.applyContext(Camera._updateMark);\n            context.drawRenderElement(this._renderElement);\n            camera._applyViewProject(context, camera.viewMatrix, camera.projectionMatrix);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    destroy(): void {\n\n        if (this._material) {\n            this._material._removeReference();\n            this._material = null;\n        }\n        this._renderData.destroy();\n        //@ts-ignore\n        this._renderData._onDestroy();\n        this._renderElement.destroy();\n\n\n    }\n\n}\n\n\n","import { Node } from \"../../display/Node\";\nimport { Event } from \"../../events/Event\";\nimport { Loader } from \"../../net/Loader\";\nimport { Config3D } from \"../../../Config3D\";\nimport { IRenderEngine } from \"../../RenderEngine/RenderInterface/IRenderEngine\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\nimport { UniformBufferParamsType, UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\nimport { SkyRenderer } from \"../resource/models/SkyRenderer\";\nimport { Scene3D } from \"./scene/Scene3D\";\nimport { Sprite3D, StaticFlag } from \"./Sprite3D\";\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { CommandUniformMap } from \"../../RenderEngine/CommandUniformMap\";\nimport { ILaya } from \"../../../ILaya\";\nimport { Color } from \"../../maths/Color\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * <code>BaseCamera</code> 类用于创建摄像机的父类。\n */\nexport class BaseCamera extends Sprite3D {\n    /** @internal CameraUniformBlock Map */\n    static cameraUniformMap: CommandUniformMap;\n    /**Camera Uniform PropertyID */\n    /**@internal */\n    static CAMERAPOS: number;\n    /**@internal */\n    static VIEWMATRIX: number;\n    /**@internal */\n    static PROJECTMATRIX: number;\n    /**@internal */\n    static VIEWPROJECTMATRIX: number;\n    /**@internal */\n    static CAMERADIRECTION: number;\n    /**@internal */\n    static CAMERAUP: number;\n    /**@internal */\n    static VIEWPORT: number;\n    /**@internal */\n    static PROJECTION_PARAMS: number;\n    /**@internal */\n    static OPAQUETEXTURE: number\n    /**@internal */\n    static DEPTHTEXTURE: number;\n    /**@internal */\n    static DEPTHNORMALSTEXTURE: number;\n    /**@internal */\n    static DEPTHZBUFFERPARAMS: number;\n    /**@internal */\n    static CAMERAUNIFORMBLOCK: number;\n    /**Camera Define*/\n    /**@internal */\n    static SHADERDEFINE_DEPTH: ShaderDefine;\n    /**@internal */\n    static SHADERDEFINE_DEPTHNORMALS: ShaderDefine;\n    /**@internal */\n    static SHADERDEFINE_ORTHOGRAPHIC: ShaderDefine;\n    /**@internal */\n    static SHADERDEFINE_FXAA: ShaderDefine;\n    /**@internal */\n    static RENDERINGTYPE_SHADERDEFINE_FXAA: string = \"FXAA\";\n    /**渲染模式,延迟光照渲染，暂未开放。*/\n    static RENDERINGTYPE_DEFERREDLIGHTING: string = \"DEFERREDLIGHTING\";\n    /**渲染模式,前向渲染。*/\n    static RENDERINGTYPE_FORWARDRENDERING: string = \"FORWARDRENDERING\";\n    /**@internal */\n    protected static _invertYScaleMatrix: Matrix4x4 = new Matrix4x4(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);//Matrix4x4.createScaling(new Vector3(1, -1, 1), _invertYScaleMatrix);\n    /**@internal */\n    protected static _invertYProjectionMatrix: Matrix4x4 = new Matrix4x4();\n    /**@internal */\n    protected static _invertYProjectionViewMatrix: Matrix4x4 = new Matrix4x4();\n    /**@internal */\n    static _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\n    /**@internal */\n    static CameraUBOData: UnifromBufferData;\n    /**\n     * @internal\n     * shaderInfo init\n     */\n    static shaderValueInit() {\n        BaseCamera.SHADERDEFINE_DEPTH = Shader3D.getDefineByName(\"DEPTHMAP\");\n        BaseCamera.SHADERDEFINE_DEPTHNORMALS = Shader3D.getDefineByName(\"DEPTHNORMALSMAP\");\n        BaseCamera.SHADERDEFINE_ORTHOGRAPHIC = Shader3D.getDefineByName(\"CAMERAORTHOGRAPHIC\");\n        BaseCamera.SHADERDEFINE_FXAA = Shader3D.getDefineByName(\"FXAA\");\n        let camerauniformMap = BaseCamera.cameraUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"BaseCamera\");\n\n        BaseCamera.CAMERAPOS = Shader3D.propertyNameToID(\"u_CameraPos\");\n        BaseCamera.VIEWMATRIX = Shader3D.propertyNameToID(\"u_View\");\n        BaseCamera.VIEWPROJECTMATRIX = Shader3D.propertyNameToID(\"u_ViewProjection\");\n        BaseCamera.PROJECTMATRIX = Shader3D.propertyNameToID(\"u_Projection\");\n        BaseCamera.CAMERADIRECTION = Shader3D.propertyNameToID(\"u_CameraDirection\");\n        BaseCamera.CAMERAUP = Shader3D.propertyNameToID(\"u_CameraUp\");\n        BaseCamera.VIEWPORT = Shader3D.propertyNameToID(\"u_Viewport\");\n        BaseCamera.PROJECTION_PARAMS = Shader3D.propertyNameToID(\"u_ProjectionParams\");\n        BaseCamera.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\n        BaseCamera.DEPTHNORMALSTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalsTexture\");\n        BaseCamera.OPAQUETEXTURE = Shader3D.propertyNameToID(\"u_CameraOpaqueTexture\");\n        BaseCamera.DEPTHZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\n        BaseCamera.CAMERAUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_CAMERA);\n\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERAPOS, \"u_CameraPos\");\n        camerauniformMap.addShaderUniform(BaseCamera.VIEWMATRIX, \"u_View\");\n        camerauniformMap.addShaderUniform(BaseCamera.PROJECTMATRIX, \"u_Projection\");\n        camerauniformMap.addShaderUniform(BaseCamera.VIEWPROJECTMATRIX, \"u_ViewProjection\");\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERADIRECTION, \"u_CameraDirection\");\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERAUP, \"u_CameraUp\");\n        camerauniformMap.addShaderUniform(BaseCamera.VIEWPORT, \"u_Viewport\");\n        camerauniformMap.addShaderUniform(BaseCamera.PROJECTION_PARAMS, \"u_ProjectionParams\");\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHTEXTURE, \"u_CameraDepthTexture\");\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHNORMALSTEXTURE, \"u_CameraDepthNormalsTexture\");\n        camerauniformMap.addShaderUniform(BaseCamera.OPAQUETEXTURE, \"u_CameraOpaqueTexture\");\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHZBUFFERPARAMS, \"u_ZBufferParams\");\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERAUNIFORMBLOCK, UniformBufferObject.UBONAME_CAMERA);\n    }\n\n    /**\n     * create BaseCamera UniformBuffer\n     * @internal\n     * @returns \n     */\n    static createCameraUniformBlock() {\n        if (!BaseCamera.CameraUBOData) {\n            let uniformPara: Map<string, UniformBufferParamsType> = new Map<string, UniformBufferParamsType>();\n            uniformPara.set(\"u_View\", UniformBufferParamsType.Matrix4x4);\n            uniformPara.set(\"u_Projection\", UniformBufferParamsType.Matrix4x4);\n            uniformPara.set(\"u_ViewProjection\", UniformBufferParamsType.Matrix4x4);\n            uniformPara.set(\"u_ProjectionParams\", UniformBufferParamsType.Vector4);\n            uniformPara.set(\"u_Viewport\", UniformBufferParamsType.Vector4);\n            uniformPara.set(\"u_CameraDirection\", UniformBufferParamsType.Vector3);\n            uniformPara.set(\"u_CameraUp\", UniformBufferParamsType.Vector3);\n            uniformPara.set(\"u_CameraPos\", UniformBufferParamsType.Vector3);\n\n            let uniformMap = new Map<number, UniformBufferParamsType>();\n            uniformPara.forEach((value, key) => {\n                uniformMap.set(Shader3D.propertyNameToID(key), value);\n            })\n            BaseCamera.CameraUBOData = new UnifromBufferData(uniformMap);\n        }\n\n        return BaseCamera.CameraUBOData;\n    }\n    /**\n     * Camera Init\n     */\n    static __init__() {\n        BaseCamera.shaderValueInit();\n    }\n\n    /** @internal 渲染顺序。*/\n    _renderingOrder: number\n    /** @internal */\n    _cameraUniformData: UnifromBufferData;\n    /** @internal */\n    _cameraUniformUBO: UniformBufferObject;\n    /** 近裁剪面。*/\n    protected _nearPlane: number;\n    /** 远裁剪面。*/\n    protected _farPlane: number;\n    /**渲染引擎 */\n    protected _renderEngine: IRenderEngine;\n    /**@internal 相机最远处的开合高度*/\n    private _yrange: number;\n    /** 视野。*/\n    private _fieldOfView: number;\n    /** 正交投影的垂直尺寸。*/\n    private _orthographicVerticalSize: number;\n    /** skyRender */\n    private _skyRenderer: SkyRenderer = new SkyRenderer();\n    /** 前向量*/\n    private _forward: Vector3 = new Vector3();\n    /** up向量 */\n    private _up: Vector3 = new Vector3();\n    /** 是否正交 */\n    protected _orthographic: boolean;\n    /**@internal 是否使用用户自定义投影矩阵，如果使用了用户投影矩阵，摄像机投影矩阵相关的参数改变则不改变投影矩阵的值，需调用ResetProjectionMatrix方法。*/\n    protected _useUserProjectionMatrix: boolean;\n\n    /** @internal 着色器数据*/\n    _shaderValues: ShaderData;\n\n    /** @internal */\n    _linearClearColor: Color;\n    /**摄像机的清除颜色,默认颜色为CornflowerBlue。*/\n    private _clearColor: Color;\n    public get clearColor(): Color {\n        return this._clearColor;\n    }\n    public set clearColor(value: Color) {\n        this._clearColor = value;\n        value.toLinear(this._linearClearColor);\n    }\n    /** 可视层位标记遮罩值,支持混合 例:cullingMask=Math.pow(2,0)|Math.pow(2,1)为第0层和第1层可见。*/\n    private _cullingMask: number;\n\n    /**\n     * @internal\n     * 静态遮罩\n     */\n    staticMask: number;\n\n    /** 渲染时是否用遮挡剔除。 */\n    useOcclusionCulling: boolean;\n\n    /**\n     * 天空渲染器。\n     */\n    get skyRenderer(): SkyRenderer {\n        return this._skyRenderer;\n    }\n\n    /**\n     * 视野。\n     */\n    get fieldOfView(): number {\n        return this._fieldOfView;\n    }\n\n    set fieldOfView(value: number) {\n        this._fieldOfView = value;\n        this._calculateProjectionMatrix();\n        this._caculateMaxLocalYRange();\n    }\n\n    /**\n   * 最大本地距离\n   */\n    get maxlocalYDistance(): number {\n        return this._yrange;\n    }\n\n    /**\n     * 近裁面。\n     */\n    get nearPlane(): number {\n        return this._nearPlane;\n    }\n\n    set nearPlane(value: number) {\n        this._nearPlane = value;\n        this._calculateProjectionMatrix();\n\n    }\n\n    /**\n     * 远裁面。\n     */\n    get farPlane(): number {\n        return this._farPlane;\n    }\n\n    set farPlane(vaule: number) {\n        this._farPlane = vaule;\n        this._calculateProjectionMatrix();\n        this._caculateMaxLocalYRange();\n    }\n\n    /**\n     * 是否正交投影矩阵。\n     */\n    get orthographic(): boolean {\n        return this._orthographic;\n    }\n\n    set orthographic(vaule: boolean) {\n        this._orthographic = vaule;\n        this._calculateProjectionMatrix();\n        if (vaule) {\n            this._shaderValues.addDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC);\n        } else\n            this._shaderValues.removeDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC);\n    }\n\n    /**\n     * 正交投影垂直矩阵尺寸。\n     */\n    get orthographicVerticalSize(): number {\n        return this._orthographicVerticalSize;\n    }\n\n    set orthographicVerticalSize(vaule: number) {\n        this._orthographicVerticalSize = vaule;\n        this._calculateProjectionMatrix();\n    }\n\n    get cullingMask(){\n        return this._cullingMask;\n    }\n\n    set cullingMask(value:number){\n        this._cullingMask = value;\n    }\n\n    /**\n     * 渲染顺序\n     */\n    get renderingOrder(): number {\n        return this._renderingOrder;\n    }\n\n    set renderingOrder(value: number) {\n        this._renderingOrder = value;\n        this._sortCamerasByRenderingOrder();\n    }\n\n    /**\n     * 创建一个 <code>BaseCamera</code> 实例。\n     * @param\tfieldOfView 视野。\n     * @param\tnearPlane 近裁面。\n     * @param\tfarPlane 远裁面。\n     */\n    constructor(nearPlane: number = 0.3, farPlane: number = 1000) {\n        super();\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(null);\n\n        this._linearClearColor = new Color();\n        this.clearColor = new Color(100 / 255, 149 / 255, 237 / 255, 255 / 255);\n\n        this._fieldOfView = 60;\n        this._useUserProjectionMatrix = false;\n\n\n        this._orthographicVerticalSize = 10;\n        this.renderingOrder = 0;\n\n        this._nearPlane = nearPlane;\n        this._farPlane = farPlane;\n\n        this.cullingMask = 2147483647/*int.MAX_VALUE*/;\n        this.staticMask = 0xffffffff;\n        this.useOcclusionCulling = true;\n        this._renderEngine = LayaGL.renderEngine;\n        this._orthographic = false;\n        if (Config3D._uniformBlock) {\n            this._cameraUniformUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 0);\n            this._cameraUniformData = BaseCamera.createCameraUniformBlock();\n            if (!this._cameraUniformUBO) {\n                this._cameraUniformUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, this._cameraUniformData.getbyteLength(), false);\n            }\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_CAMERA, this._cameraUniformUBO, this._cameraUniformData);\n            this._shaderValues.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK, this._cameraUniformUBO);\n        }\n    }\n\n    private _caculateMaxLocalYRange() {\n        let halffield = 3.1416 * this.fieldOfView / 180.0 / 2;\n        let dist = this.farPlane;\n        this._yrange = Math.tan(halffield) * dist * 2;\n    }\n\n    /**\n     * @internal\n     */\n    protected _calculateProjectionMatrix(): void {\n    }\n\n    /**\n     * @internal\n     */\n    protected _onScreenSizeChanged(): void {\n        this._calculateProjectionMatrix();\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Node {\n        return new BaseCamera();\n    }\n\n    /**\n     * 通过RenderingOrder属性对摄像机机型排序。\n     * @internal\n     */\n    _sortCamerasByRenderingOrder(): void {\n        if (this.displayedInStage) {\n            var cameraPool: BaseCamera[] = this.scene._cameraPool;//TODO:可优化，从队列中移除再加入\n            var n: number = cameraPool.length - 1;\n            for (var i: number = 0; i < n; i++) {\n                if (cameraPool[i].renderingOrder > cameraPool[n].renderingOrder) {\n                    var tempCamera: BaseCamera = cameraPool[i];\n                    cameraPool[i] = cameraPool[n];\n                    cameraPool[n] = tempCamera;\n                }\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _prepareCameraToRender(): void {\n        //var cameraSV: ShaderData = this._shaderValues;\n        this.transform.getForward(this._forward);\n        this.transform.getUp(this._up);\n        this._shaderValues.setVector3(BaseCamera.CAMERAPOS, this.transform.position);\n        this._shaderValues.setVector3(BaseCamera.CAMERADIRECTION, this._forward);\n        this._shaderValues.setVector3(BaseCamera.CAMERAUP, this._up);\n    }\n\n    // /**\n    //  * @internal\n    //  */\n    // _setShaderValue(index: number, value: any) {\n    // \tif (this._cameraUniformData && this._cameraUniformData._has(index))\n    // \t\tthis._cameraUniformData._setData(index, value);\n    // \tthis._shaderValues.setValueData(index, value);\n    // }\n\n    // /**\n    //  * @internal\n    //  */\n    // _getShaderValue(index: number): any {\n    // \treturn this._shaderValues.getValueData(index);\n    // }\n\n\n    /**\n     * 相机渲染。\n     * @param\tshader 着色器。\n     * @param   replacementTag 着色器替换标记。\n     */\n    render(shader: Shader3D = null, replacementTag: string = null): void {\n    }\n\n    /**\n     * 增加可视图层,layer值为0到31层。\n     * @param layer 图层。\n     */\n    addLayer(layer: number): void {\n        this.cullingMask |= Math.pow(2, layer);\n    }\n\n    /**\n     * 移除可视图层,layer值为0到31层。\n     * @param layer 图层。\n     */\n    removeLayer(layer: number): void {\n        this.cullingMask &= ~Math.pow(2, layer);\n    }\n\n    /**\n     * 增加所有图层。\n     */\n    addAllLayers(): void {\n        this.cullingMask = 2147483647/*int.MAX_VALUE*/;\n    }\n\n    /**\n     * 移除所有图层。\n     */\n    removeAllLayers(): void {\n        this.cullingMask = 0;\n    }\n\n    /**\n     * 重算计算投影矩阵\n     */\n    resetProjectionMatrix(): void {\n        this._useUserProjectionMatrix = false;\n        this._calculateProjectionMatrix();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onActive(): void {\n        ((<Scene3D>this._scene))._addCamera(this);\n        super._onActive();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onInActive(): void {\n        ((<Scene3D>this._scene))._removeCamera(this);\n        super._onInActive();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n\n        this.orthographic = data.orthographic;\n        (data.orthographicVerticalSize !== undefined) && (this.orthographicVerticalSize = data.orthographicVerticalSize);\n        (data.fieldOfView !== undefined) && (this.fieldOfView = data.fieldOfView);\n        this.nearPlane = data.nearPlane;\n        this.farPlane = data.farPlane;\n\n        var color: any[] = data.clearColor;\n        this.clearColor = new Color(color[0], color[1], color[2], color[3]);\n        var skyboxMaterial: any = data.skyboxMaterial;\n        if (skyboxMaterial) {\n            this._skyRenderer.material = Loader.getRes(skyboxMaterial.path);\n        }\n    }\n\n    /**\n     * 删除相机\n     * @inheritDoc\n     * @override\n     * @param 是否删除节点\n     */\n    destroy(destroyChild: boolean = true): void {\n        //postProcess = null;\n        //AmbientLight = null;\n        this._skyRenderer.destroy();\n        this._skyRenderer = null;\n\n        ILaya.stage.off(Event.RESIZE, this, this._onScreenSizeChanged);\n        super.destroy(destroyChild);\n    }\n}\n\n","/**\n * 阴影模式。\n */\nexport enum ShadowMode {\n    /**不产生阴影。*/\n    None,\n    /**硬阴影，对性能要求较低。*/\n    Hard,\n    /**低强度软阴影，对性能要求一般。*/\n    SoftLow,\n    /**高强度软阴影,对性能要求较高。*/\n    SoftHigh\n}","/**\n * 阴影得级联模式。\n */\nexport enum ShadowCascadesMode {\n    /** 无级联。 */\n    NoCascades,\n    /** 二级级联。 */\n    TwoCascades,\n    /** 四级级联。 */\n    FourCascades,\n}","import { Config3D } from \"../../../../Config3D\";\nimport { Scene3D } from \"../scene/Scene3D\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { ShadowMode } from \"./ShadowMode\";\nimport { Component } from \"../../../components/Component\";\nimport { Color } from \"../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n\n/**\n * @internal\n */\nexport enum LightType {\n    Directional,\n    Spot,\n    Point,\n    Area\n}\n\nexport enum LightMode {\n    mix,\n    realTime,//\n    bakeOnly\n}\n\n/**\n * <code>LightSprite</code> 类用于创建灯光的父类。\n */\nexport class Light extends Component {\n\n    /** @internal */\n    protected _shadowMode: ShadowMode = ShadowMode.None;\n\n    /** @internal */\n    _isAlternate: boolean = false;\n    /** @internal */\n    _intensityColor: Vector3;\n    /** @internal */\n    _intensity: number;\n    /** @internal */\n    _shadowResolution: number = 2048;\n    /** @internal */\n    _shadowDistance: number = 50.0;\n    /** @internal */\n    _shadowDepthBias: number = 1.0;\n    /** @internal */\n    _shadowNormalBias: number = 1.0;\n    /** @internal */\n    _shadowNearPlane: number = 0.1;\n    /** @internal */\n    _shadowStrength: number = 1.0;\n    /** @internal */\n    _lightmapBakedType: LightMode;\n    /** @internal */\n    _lightType: LightType;\n    /** @internal 因为scale会影响裁剪阴影*/\n    _lightWoldMatrix: Matrix4x4 = new Matrix4x4();\n\n    /** 灯光颜色。 */\n    color: Color;\n\n    /**\n     * 灯光强度。\n     */\n    get intensity(): number {\n        return this._intensity;\n    }\n\n    set intensity(value: number) {\n        this._intensity = value;\n    }\n\n    /**\n     * 阴影模式。\n     */\n    get shadowMode(): ShadowMode {\n        return this._shadowMode;\n    }\n\n    set shadowMode(value: ShadowMode) {\n        this._shadowMode = value\n    }\n\n    /**\n     * 最大阴影距离。\n     */\n    get shadowDistance(): number {\n        return this._shadowDistance;\n    }\n\n    set shadowDistance(value: number) {\n        this._shadowDistance = value;\n    }\n\n    /**\n     * 阴影贴图分辨率。\n     */\n    get shadowResolution(): number {\n        return this._shadowResolution;\n    }\n\n    set shadowResolution(value: number) {\n        this._shadowResolution = value;\n    }\n\n    /**\n     * 阴影深度偏差。\n     */\n    get shadowDepthBias(): number {\n        return this._shadowDepthBias;\n    }\n\n    set shadowDepthBias(value: number) {\n        this._shadowDepthBias = value;\n    }\n\n    /**\n     * 阴影法线偏差。\n     */\n    get shadowNormalBias(): number {\n        return this._shadowNormalBias;\n    }\n\n    set shadowNormalBias(value: number) {\n        this._shadowNormalBias = value;\n    }\n\n    /**\n     * 阴影强度。\n     */\n    get shadowStrength(): number {\n        return this._shadowStrength;\n    }\n\n    set shadowStrength(value: number) {\n        this._shadowStrength = value;\n    }\n\n    /**\n     * 阴影视锥的近裁面。\n     */\n    get shadowNearPlane(): number {\n        return this._shadowNearPlane;\n    }\n\n    set shadowNearPlane(value: number) {\n        this._shadowNearPlane = value;\n    }\n\n    /**\n     * 灯光烘培类型。\n     */\n    get lightmapBakedType(): LightMode {\n        return this._lightmapBakedType;\n    }\n\n    set lightmapBakedType(value: LightMode) {\n        let premode = this._lightmapBakedType;\n        if (this._lightmapBakedType !== value) {\n            this._lightmapBakedType = value;\n            if (this._enabled) {\n                if (value == LightMode.bakeOnly)\n                    this._removeFromScene();\n                else\n                    if (premode == LightMode.bakeOnly)\n                        this._addToScene();\n            }\n        }\n    }\n\n    get lightWorldMatrix(): Matrix4x4 {\n        var position = (this.owner as Sprite3D).transform.position;\n        var quaterian = (this.owner as Sprite3D).transform.rotation;\n        Matrix4x4.createAffineTransformation(position, quaterian, Vector3.ONE, this._lightWoldMatrix);\n        return this._lightWoldMatrix;\n    }\n\n    /**\n     * 创建一个 <code>LightSprite</code> 实例。\n     */\n    constructor() {\n        super();\n\n        this.runInEditor = true;\n        this._intensity = 1.0;\n        this._intensityColor = new Vector3();\n        this.color = new Color(1.0, 1.0, 1.0, 1.0);\n        this._lightmapBakedType = LightMode.realTime;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n        var colorData: any[] = data.color;\n        this.color.r = colorData[0];\n        this.color.g = colorData[1];\n        this.color.b = colorData[2];\n        this.intensity = data.intensity;\n        this.lightmapBakedType = data.lightmapBakedType;\n    }\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: Component) {\n        super._cloneTo(dest);\n        var light = <Light>dest;\n        light.color = this.color.clone();\n        light.intensity = this.intensity;\n        light.lightmapBakedType = this.lightmapBakedType;\n    }\n\n    /**\n     * @internal\n     */\n    private _addToScene(): void {\n        var scene: Scene3D = <Scene3D>this.owner.scene;\n        var maxLightCount: number = Config3D.maxLightCount;\n        if (scene._lightCount < maxLightCount) {\n            scene._lightCount++;\n            this._addToLightQueue();\n            this._isAlternate = false;\n        }\n        else {\n            scene._alternateLights.add(this);\n            this._isAlternate = true;\n            console.warn(\"LightSprite:light count has large than maxLightCount,the latest added light will be ignore.\");\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _removeFromScene(): void {\n        var scene: Scene3D = <Scene3D>this.owner._scene;\n        if (!scene)\n            return;\n        if (this._isAlternate) {\n            scene._alternateLights.remove(this);\n        }\n        else {\n            scene._lightCount--;\n            this._removeFromLightQueue();\n            if (scene._alternateLights._length > 0) {\n                var alternateLight = scene._alternateLights.shift();\n                alternateLight!._addToLightQueue();\n                alternateLight!._isAlternate = false;\n                scene._lightCount++;\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    protected _addToLightQueue(): void {\n    }\n\n    /**\n     * @internal\n     */\n    protected _removeFromLightQueue(): void {\n    }\n\n    protected _onEnable(): void {\n        (this.lightmapBakedType !== LightMode.bakeOnly) && (this._addToScene());\n    }\n\n    protected _onDisable(): void {\n        (this.lightmapBakedType !== LightMode.bakeOnly) && (this._removeFromScene());\n    }\n\n    protected _onDestroy() {\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Component {\n        return new Light();\n    }\n}\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { BoundFrustum, FrustumCorner } from \"../../math/BoundFrustum\";\nimport { BoundSphere } from \"../../math/BoundSphere\";\nimport { Plane } from \"../../math/Plane\";\nimport { ShadowSliceData, ShadowSpotData } from \"../../shadowMap/ShadowSliceData\";\nimport { Utils3D } from \"../../utils/Utils3D\";\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\nimport { ShadowMode } from \"./ShadowMode\";\nimport { Light, LightType } from \"./Light\";\nimport { SpotLightCom } from \"./SpotLightCom\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { DirectionLightCom } from \"./DirectionLightCom\";\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\nimport { WrapMode } from \"../../../RenderEngine/RenderEnum/WrapMode\";\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\nimport { TextureCompareMode } from \"../../../RenderEngine/RenderEnum/TextureCompareMode\";\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\n\n/**\n * @internal\n */\nenum FrustumFace {\n    Near = 0,\n    Far = 1,\n    Left = 2,\n    Right = 3,\n    Bottom = 4,\n    Top = 5,\n}\n\nexport enum ShadowMapFormat {\n    bit16,\n    bit24_8,\n    bit32\n}\n\n/**\n * @internal\n */\nexport class ShadowUtils {\n    /** @internal */\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4()\n\n\n    /** @internal */\n    private static _shadowMapScaleOffsetMatrix: Matrix4x4 = new Matrix4x4(\n        0.5, 0.0, 0.0, 0.0,\n        0.0, 0.5, 0.0, 0.0,\n        0.0, 0.0, 1.0, 0.0,\n        0.5, 0.5, 0.0, 1.0,\n    );\n\n    /** @internal */\n    private static _frustumCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n    /** @internal */\n    private static _adjustNearPlane: Plane;\n    /** @internal */\n    private static _adjustFarPlane: Plane;\n    /** @internal */\n    private static _backPlaneFaces: FrustumFace[] = new Array(5);\n    /** @internal */\n    private static _edgePlanePoint2: Vector3 = new Vector3();\n\n    /** @internal */\n    private static _frustumPlaneNeighbors: FrustumFace[][] = [\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// near\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// far\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// left\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// right\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right],// bottom\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right]];// top\n\n    /** @internal */\n    private static _frustumTwoPlaneCorners: FrustumCorner[][][] = [\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.nearBottomLeft, FrustumCorner.nearTopLeft]/* left */, [FrustumCorner.nearTopRight, FrustumCorner.nearBottomRight]/* right */, [FrustumCorner.nearBottomRight, FrustumCorner.nearBottomLeft]/* bottom */, [FrustumCorner.nearTopLeft, FrustumCorner.nearTopRight]/* top */],// near\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.FarTopLeft, FrustumCorner.FarBottomLeft]/* left */, [FrustumCorner.FarBottomRight, FrustumCorner.FarTopRight]/* right */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarBottomRight]/* bottom */, [FrustumCorner.FarTopRight, FrustumCorner.FarTopLeft]/* top */],// far\n        [[FrustumCorner.nearTopLeft, FrustumCorner.nearBottomLeft]/* near */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarTopLeft]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.nearBottomLeft, FrustumCorner.FarBottomLeft]/* bottom */, [FrustumCorner.FarTopLeft, FrustumCorner.nearTopLeft]/* top */],// left\n        [[FrustumCorner.nearBottomRight, FrustumCorner.nearTopRight]/* near */, [FrustumCorner.FarTopRight, FrustumCorner.FarBottomRight]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.FarBottomRight, FrustumCorner.nearBottomRight]/* bottom */, [FrustumCorner.nearTopRight, FrustumCorner.FarTopRight]/* top */],// right\n        [[FrustumCorner.nearBottomLeft, FrustumCorner.nearBottomRight]/* near */, [FrustumCorner.FarBottomRight, FrustumCorner.FarBottomLeft]/* far */, [FrustumCorner.FarBottomLeft, FrustumCorner.nearBottomLeft]/* left */, [FrustumCorner.nearBottomRight, FrustumCorner.FarBottomRight]/* right */, [FrustumCorner.unknown, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */],// bottom\n        [[FrustumCorner.nearTopRight, FrustumCorner.nearTopLeft]/* near */, [FrustumCorner.FarTopLeft, FrustumCorner.FarTopRight]/* far */, [FrustumCorner.nearTopLeft, FrustumCorner.FarTopLeft]/* left */, [FrustumCorner.FarTopRight, FrustumCorner.nearTopRight], [FrustumCorner.unknown/* right */, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */]// top\n    ];\n\n    /** @internal */\n    static readonly atlasBorderSize: number = 4.0;//now max shadow sample tent is 5x5,atlas borderSize at leate 3=ceil(2.5),and +1 pixle is for global border for no cascade mode.\n\n    static init() {\n        ShadowUtils._adjustNearPlane = new Plane(new Vector3(), 0);\n        ShadowUtils._adjustFarPlane = new Plane(new Vector3(), 0);\n    }\n\n    /**\n    * @internal\n    */\n    static supportShadow(): boolean {\n        return LayaGL.renderEngine.getCapable(RenderCapable.RenderTextureFormat_Depth);\n    }\n\n    /**\n     * @internal\n     */\n    static getTemporaryShadowTexture(witdh: number, height: number, shadowFormat: ShadowMapFormat): RenderTexture {\n        let depthFormat = RenderTargetFormat.DEPTH_16;\n        switch (shadowFormat) {\n            case ShadowMapFormat.bit16:\n                depthFormat = RenderTargetFormat.DEPTH_16;\n                break;\n            case ShadowMapFormat.bit24_8:\n                depthFormat = RenderTargetFormat.DEPTHSTENCIL_24_8;\n                break;\n            case ShadowMapFormat.bit32:\n                depthFormat = RenderTargetFormat.DEPTH_32;\n                break;\n        }\n\n        var shadowMap: RenderTexture = RenderTexture.createFromPool(witdh, height, depthFormat, RenderTargetFormat.None, false, 1);\n        shadowMap.compareMode = TextureCompareMode.LESS;\n        shadowMap.filterMode = FilterMode.Bilinear;\n        shadowMap.wrapModeU = WrapMode.Clamp;\n        shadowMap.wrapModeV = WrapMode.Clamp;\n        return shadowMap;\n    }\n\n    /**\n     * @internal\n     */\n    static getShadowBias(light: Light, shadowProjectionMatrix: Matrix4x4, shadowResolution: number, out: Vector4): void {\n        var frustumSize: number;\n        if (light._lightType == LightType.Directional) {\n            // Frustum size is guaranteed to be a cube as we wrap shadow frustum around a sphere\n            // elements[0] = 2.0 / (right - left)\n            frustumSize = 2.0 / shadowProjectionMatrix.elements[0];\n        }\n        else if (light._lightType == LightType.Spot) {\n            // For perspective projections, shadow texel size varies with depth\n            // It will only work well if done in receiver side in the pixel shader. Currently We\n            // do bias on caster side in vertex shader. When we add shader quality tiers we can properly\n            // handle this. For now, as a poor approximation we do a constant bias and compute the size of\n            // the frustum as if it was orthogonal considering the size at mid point between near and far planes.\n            // Depending on how big the light range is, it will be good enough with some tweaks in bias\n            frustumSize = Math.tan((<SpotLightCom>light).spotAngle * 0.5 * MathUtils3D.Deg2Rad) * (<SpotLightCom>light).range;\n        }\n        else {\n            console.warn(\"ShadowUtils:Only spot and directional shadow casters are supported now.\");\n            frustumSize = 0.0;\n        }\n\n        // depth and normal bias scale is in shadowmap texel size in world space\n        var texelSize: number = frustumSize / shadowResolution;\n        var depthBias: number = -light._shadowDepthBias * texelSize;\n        var normalBias: number = -light._shadowNormalBias * texelSize;\n\n        if (light.shadowMode == ShadowMode.SoftHigh) {\n            // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\n            // This is not true with PCF. Ideally we need to do either\n            // cone base bias (based on distance to center sample)\n            // or receiver place bias based on derivatives.\n            // For now we scale it by the PCF kernel size (5x5)\n            const kernelRadius: number = 2.5;\n            depthBias *= kernelRadius;\n            normalBias *= kernelRadius;\n        }\n        out.setValue(depthBias, normalBias, 0.0, 0.0);\n    }\n\n    /**\n     * @internal\n     */\n    static getCameraFrustumPlanes(cameraViewProjectMatrix: Matrix4x4, frustumPlanes: Plane[]): void {\n        BoundFrustum.getPlanesFromMatrix(cameraViewProjectMatrix, frustumPlanes[FrustumFace.Near], frustumPlanes[FrustumFace.Far], frustumPlanes[FrustumFace.Left], frustumPlanes[FrustumFace.Right], frustumPlanes[FrustumFace.Top], frustumPlanes[FrustumFace.Bottom]);\n    }\n\n    /**\n    * @internal\n    */\n    static getFarWithRadius(radius: number, denominator: number): number {\n        // use the frustum side as the radius and get the far distance form camera.\n        // var tFov: number = Math.tan(fov * 0.5);// get this the equation using Pythagorean\n        // return Math.sqrt(radius * radius / (1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0)));\n        return Math.sqrt(radius * radius / denominator);\n    }\n\n    /**\n    * @internal\n    */\n    static getCascadesSplitDistance(twoSplitRatio: number, fourSplitRatio: Vector3, cameraNear: number, shadowFar: number, fov: number, aspectRatio: number, cascadesMode: ShadowCascadesMode, out: number[]): void {\n        out[0] = cameraNear;\n        var range: number = shadowFar - cameraNear;\n        var tFov: number = Math.tan(fov * 0.5);\n        var denominator: number = 1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0);\n        switch (cascadesMode) {\n            case ShadowCascadesMode.NoCascades:\n                out[1] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\n                break;\n            case ShadowCascadesMode.TwoCascades:\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * twoSplitRatio, denominator);\n                out[2] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\n                break;\n            case ShadowCascadesMode.FourCascades:\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.x, denominator);\n                out[2] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.y, denominator);\n                out[3] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.z, denominator);\n                out[4] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\n                break;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    static applySliceTransform(shadowSliceData: ShadowSliceData, atlasWidth: number, atlasHeight: number, cascadeIndex: number, outShadowMatrices: Float32Array): void {\n        // Apply shadow slice scale and offset\n        var sliceE: Float32Array = ShadowUtils._tempMatrix0.elements;\n        var oneOverAtlasWidth: number = 1.0 / atlasWidth;\n        var oneOverAtlasHeight: number = 1.0 / atlasHeight;\n\n        sliceE[0] = shadowSliceData.resolution * oneOverAtlasWidth;//scale\n        sliceE[5] = shadowSliceData.resolution * oneOverAtlasHeight;\n        sliceE[12] = shadowSliceData.offsetX * oneOverAtlasWidth;//offset\n        sliceE[13] = shadowSliceData.offsetY * oneOverAtlasHeight;\n        sliceE[1] = sliceE[2] = sliceE[2] = sliceE[4] = sliceE[6] = sliceE[7] = sliceE[8] = sliceE[9] = sliceE[11] = sliceE[14] = 0;\n        sliceE[10] = sliceE[15] = 1;\n\n        var offset: number = cascadeIndex * 16;\n        Utils3D._mulMatrixArray(sliceE, outShadowMatrices, offset, outShadowMatrices, offset);\n    }\n\n\n    /**\n     * @internal\n     */\n    static getDirectionLightShadowCullPlanes(cameraFrustumPlanes: Array<Plane>, cascadeIndex: number, splitDistance: number[], cameraNear: number, direction: Vector3, shadowSliceData: ShadowSliceData): void {\n        // http://lspiroengine.com/?p=187\n        var frustumCorners: Vector3[] = ShadowUtils._frustumCorners;\n        var backPlaneFaces: FrustumFace[] = ShadowUtils._backPlaneFaces;\n        var planeNeighbors: FrustumFace[][] = ShadowUtils._frustumPlaneNeighbors;\n        var twoPlaneCorners: FrustumCorner[][][] = ShadowUtils._frustumTwoPlaneCorners;\n        var edgePlanePoint2: Vector3 = ShadowUtils._edgePlanePoint2;\n        var out: Plane[] = shadowSliceData.cullPlanes;\n\n        // cameraFrustumPlanes is share\n        var near: Plane = cameraFrustumPlanes[FrustumFace.Near], far: Plane = cameraFrustumPlanes[FrustumFace.Far];\n        var left: Plane = cameraFrustumPlanes[FrustumFace.Left], right: Plane = cameraFrustumPlanes[FrustumFace.Right];\n        var bottom: Plane = cameraFrustumPlanes[FrustumFace.Bottom], top: Plane = cameraFrustumPlanes[FrustumFace.Top];\n\n        // adjustment the near/far plane\n        var splitNearDistance: number = splitDistance[cascadeIndex] - cameraNear;\n        var splitNear: Plane = ShadowUtils._adjustNearPlane;\n        var splitFar: Plane = ShadowUtils._adjustFarPlane;\n        splitNear.normal = near.normal;\n        splitFar.normal = far.normal;\n        splitNear.distance = near.distance - splitNearDistance;\n        splitFar.distance = Math.min(-near.distance + shadowSliceData.sphereCenterZ + shadowSliceData.splitBoundSphere.radius, far.distance);//do a clamp is the sphere is out of range the far plane\n\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, right, frustumCorners[FrustumCorner.nearBottomRight]);\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, right, frustumCorners[FrustumCorner.nearTopRight]);\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, left, frustumCorners[FrustumCorner.nearTopLeft]);\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, left, frustumCorners[FrustumCorner.nearBottomLeft]);\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, right, frustumCorners[FrustumCorner.FarBottomRight]);\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, right, frustumCorners[FrustumCorner.FarTopRight]);\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, left, frustumCorners[FrustumCorner.FarTopLeft]);\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, left, frustumCorners[FrustumCorner.FarBottomLeft]);\n\n        var backIndex: number = 0;\n        for (var i: FrustumFace = 0; i < 6; i++) {// meybe 3、4、5(light eye is at far, forward is near, or orth camera is any axis)\n            var plane: Plane;\n            switch (i) {\n                case FrustumFace.Near:\n                    plane = splitNear;\n                    break;\n                case FrustumFace.Far:\n                    plane = splitFar;\n                    break;\n                default:\n                    plane = cameraFrustumPlanes[i];\n                    break;\n            }\n            if (Vector3.dot(plane.normal, direction) < 0.0) {\n                plane.cloneTo(out[backIndex]);\n                backPlaneFaces[backIndex] = i;\n                backIndex++;\n            }\n        }\n\n        var edgeIndex: number = backIndex;\n        for (var i: FrustumFace = 0; i < backIndex; i++) {\n            var backFace: FrustumFace = backPlaneFaces[i];\n            var neighborFaces: Array<FrustumFace> = planeNeighbors[backFace];\n            for (var j: number = 0; j < 4; j++) {\n                var neighborFace: FrustumFace = neighborFaces[j];\n                var notBackFace: boolean = true;\n                for (var k: number = 0; k < backIndex; k++)\n                    if (neighborFace == backPlaneFaces[k]) {\n                        notBackFace = false;\n                        break;\n                    }\n                if (notBackFace) {\n                    var corners: Array<FrustumCorner> = twoPlaneCorners[backFace][neighborFace];\n                    var point0: Vector3 = frustumCorners[corners[0]];\n                    var point1: Vector3 = frustumCorners[corners[1]];\n                    Vector3.add(point0, direction, edgePlanePoint2);\n                    Plane.createPlaneBy3P(point0, point1, edgePlanePoint2, out[edgeIndex++]);\n                }\n            }\n        }\n        shadowSliceData.cullPlaneCount = edgeIndex;\n    }\n\n    /**\n     * @internal\n     */\n    static getBoundSphereByFrustum(near: number, far: number, fov: number, aspectRatio: number, cameraPos: Vector3, forward: Vector3, outBoundSphere: BoundSphere): number {\n        // https://lxjk.github.io/2017/04/15/Calculate-Minimal-Bounding-Sphere-of-Frustum.html\n        var centerZ: number;\n        var radius: number;\n        var k: number = Math.sqrt(1.0 + aspectRatio * aspectRatio) * Math.tan(fov / 2.0);\n        var k2: number = k * k;\n        var farSNear: number = far - near;\n        var farANear: number = far + near;\n        if (k2 > farSNear / farANear) {\n            centerZ = far;\n            radius = far * k;\n        }\n        else {\n            centerZ = 0.5 * farANear * (1 + k2);\n            radius = 0.5 * Math.sqrt(farSNear * farSNear + 2.0 * (far * far + near * near) * k2 + farANear * farANear * k2 * k2);\n        }\n\n        var center: Vector3 = outBoundSphere.center;\n        outBoundSphere.radius = radius;\n        Vector3.scale(forward, centerZ, center);\n        Vector3.add(cameraPos, center, center);\n        outBoundSphere.center = center;\n        return centerZ;\n    }\n\n    /**\n     * @inernal\n     */\n    static getMaxTileResolutionInAtlas(atlasWidth: number, atlasHeight: number, tileCount: number): number {\n        var resolution: number = Math.min(atlasWidth, atlasHeight);\n        var currentTileCount: number = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\n        while (currentTileCount < tileCount) {\n            resolution = Math.floor(resolution >> 1);\n            currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\n        }\n        return resolution;\n    }\n\n\n    /**\n     * @internal\n     */\n    static getDirectionalLightMatrices(lightUp: Vector3, lightSide: Vector3, lightForward: Vector3, cascadeIndex: number, nearPlane: number, shadowResolution: number, shadowSliceData: ShadowSliceData, shadowMatrices: Float32Array): void {\n        var boundSphere: BoundSphere = shadowSliceData.splitBoundSphere;\n\n        // To solve shdow swimming problem.\n        var center: Vector3 = boundSphere.center;\n        var radius: number = boundSphere.radius;\n        var halfShadowResolution: number = shadowResolution / 2;\n        // Add border to prject edge pixel PCF.\n        // Improve:the clip planes not conside the border,but I think is OK,because the object can clip is not continuous.\n        var borderRadius: number = radius * halfShadowResolution / (halfShadowResolution - ShadowUtils.atlasBorderSize);\n        var borderDiam: number = borderRadius * 2.0;\n        var sizeUnit: number = shadowResolution / borderDiam;\n        var radiusUnit: number = borderDiam / shadowResolution;\n        var upLen: number = Math.ceil(Vector3.dot(center, lightUp) * sizeUnit) * radiusUnit;\n        var sideLen: number = Math.ceil(Vector3.dot(center, lightSide) * sizeUnit) * radiusUnit;\n        var forwardLen: number = Vector3.dot(center, lightForward);\n        center.x = lightUp.x * upLen + lightSide.x * sideLen + lightForward.x * forwardLen;\n        center.y = lightUp.y * upLen + lightSide.y * sideLen + lightForward.y * forwardLen;\n        center.z = lightUp.z * upLen + lightSide.z * sideLen + lightForward.z * forwardLen;\n        boundSphere.center = center;\n\n        // Direction light use shadow pancaking tech,do special dispose with nearPlane.\n        var origin: Vector3 = shadowSliceData.position;\n        var viewMatrix: Matrix4x4 = shadowSliceData.viewMatrix;\n        var projectMatrix: Matrix4x4 = shadowSliceData.projectionMatrix;\n        var viewProjectMatrix: Matrix4x4 = shadowSliceData.viewProjectMatrix;\n\n        shadowSliceData.resolution = shadowResolution;\n        shadowSliceData.offsetX = (cascadeIndex % 2) * shadowResolution;\n        shadowSliceData.offsetY = Math.floor(cascadeIndex / 2) * shadowResolution;\n\n        Vector3.scale(lightForward, radius + nearPlane, origin);\n        Vector3.subtract(center, origin, origin);\n        Matrix4x4.createLookAt(origin, center, lightUp, viewMatrix);\n        Matrix4x4.createOrthoOffCenter(- borderRadius, borderRadius, - borderRadius, borderRadius, 0.0, radius * 2.0 + nearPlane, projectMatrix);\n        Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\n        Utils3D._mulMatrixArray(ShadowUtils._shadowMapScaleOffsetMatrix.elements, viewProjectMatrix.elements, 0, shadowMatrices, cascadeIndex * 16);\n    }\n\n    /** \n    * @internal\n    */\n    static getSpotLightShadowData(shadowSpotData: ShadowSpotData, spotLight: SpotLightCom, resolution: number, shadowParams: Vector4, shadowSpotMatrices: Matrix4x4, shadowMapSize: Vector4) {\n        var out: Vector3 = shadowSpotData.position = (spotLight.owner as Sprite3D).transform.position;\n        shadowSpotData.resolution = resolution;\n        shadowMapSize.setValue(1.0 / resolution, 1.0 / resolution, resolution, resolution);\n        shadowSpotData.offsetX = 0;\n        shadowSpotData.offsetY = 0;\n\n        var spotWorldMatrix: Matrix4x4 = spotLight.lightWorldMatrix;\n        var viewMatrix: Matrix4x4 = shadowSpotData.viewMatrix;\n        var projectMatrix: Matrix4x4 = shadowSpotData.projectionMatrix;\n        var viewProjectMatrix: Matrix4x4 = shadowSpotData.viewProjectMatrix;\n        var BoundFrustum: BoundFrustum = shadowSpotData.cameraCullInfo.boundFrustum;\n        spotWorldMatrix.invert(viewMatrix);\n        Matrix4x4.createPerspective(3.1416 * spotLight.spotAngle / 180.0, 1, 0.1, spotLight.range, projectMatrix);\n        shadowParams.y = spotLight.shadowStrength;\n        Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\n        BoundFrustum.matrix = viewProjectMatrix;\n        viewProjectMatrix.cloneTo(shadowSpotMatrices);\n        shadowSpotData.cameraCullInfo.position = out;\n    }\n\n    /**\n     * @internal\n     */\n    static prepareShadowReceiverShaderValues(light: DirectionLightCom, shadowMapWidth: number, shadowMapHeight: number, shadowSliceDatas: ShadowSliceData[], cascadeCount: number, shadowMapSize: Vector4, shadowParams: Vector4, shadowMatrices: Float32Array, splitBoundSpheres: Float32Array): void {\n        shadowMapSize.setValue(1.0 / shadowMapWidth, 1.0 / shadowMapHeight, shadowMapWidth, shadowMapHeight);\n        shadowParams.setValue(light._shadowStrength, 0.0, 0.0, 0.0);\n        if (cascadeCount > 1) {\n            const matrixFloatCount: number = 16;\n            for (var i: number = cascadeCount * matrixFloatCount, n: number = 4 * matrixFloatCount; i < n; i++)//the last matrix is always ZERO\n                shadowMatrices[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\n\n            for (var i: number = 0; i < cascadeCount; i++) {\n                var boundSphere: BoundSphere = shadowSliceDatas[i].splitBoundSphere;\n                var center: Vector3 = boundSphere.center;\n                var radius: number = boundSphere.radius;\n                var offset: number = i * 4;\n                splitBoundSpheres[offset] = center.x;\n                splitBoundSpheres[offset + 1] = center.y;\n                splitBoundSpheres[offset + 2] = center.z;\n                splitBoundSpheres[offset + 3] = radius * radius;\n            }\n            const sphereFloatCount: number = 4;\n            for (var i: number = cascadeCount * sphereFloatCount, n: number = 4 * sphereFloatCount; i < n; i++)\n                splitBoundSpheres[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\n        }\n    }\n}","import { RenderElement } from \"./RenderElement\";\nimport { Scene3D } from \"../scene/Scene3D\"\nimport { Viewport } from \"../../math/Viewport\"\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { Camera } from \"../Camera\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { IRenderContext3D, PipelineMode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { IRenderTarget } from \"../../../RenderEngine/RenderInterface/IRenderTarget\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\n\n/**\n * <code>RenderContext3D</code> 类用于实现渲染状态。\n */\nexport class RenderContext3D {\n    /** @internal */\n    static _instance: RenderContext3D;\n\n    /**渲染区宽度。*/\n    static clientWidth: number;\n    /**渲染区高度。*/\n    static clientHeight: number;\n\n    static __init__() {\n        RenderContext3D._instance = new RenderContext3D();\n    }\n    /**@internal */\n\n    /** @internal */\n    viewMatrix: Matrix4x4;\n    /**@internal */\n    customShader: Shader3D;\n    /**@internal */\n    replaceTag: string;\n\n    /** @internal */\n    projectionMatrix: Matrix4x4;\n    /** @internal */\n    projectionViewMatrix: Matrix4x4;\n    /** @internal */\n    renderElement: RenderElement;\n    /** @internal */\n    camera: Camera;\n    /**@internal */\n    _scene: Scene3D;\n    /** @internal */\n    shader: ShaderInstance;\n    /**设置渲染管线 */\n    configPipeLineMode: PipelineMode = \"Forward\";\n    /**@internal contextOBJ*/\n    _contextOBJ: IRenderContext3D;\n    /**@internal */\n    get destTarget(): IRenderTarget {\n        return this._contextOBJ.destTarget;\n    }\n\n    /**@internal */\n    set destTarget(value: IRenderTarget) {\n        this._contextOBJ.destTarget = value;\n    }\n\n    /** @internal */\n    get viewport(): Viewport {\n        return this._contextOBJ.viewPort;\n    }\n\n    set viewport(value: Viewport) {\n        value.cloneTo(this._contextOBJ.viewPort);\n    }\n    /** @internal */\n    get scissor(): Vector4 {\n        return this._contextOBJ.scissor;\n    }\n\n    set scissor(value: Vector4) {\n        value.cloneTo(this._contextOBJ.scissor);\n    }\n\n    /** @internal */\n    get invertY(): boolean {\n        return this._contextOBJ.invertY;\n    }\n\n    set invertY(value: boolean) {\n        this._contextOBJ.invertY = value;\n    }\n\n    /** @internal */\n    get pipelineMode(): PipelineMode {\n        return this._contextOBJ.pipelineMode;\n    }\n\n    set pipelineMode(value: PipelineMode) {\n        this._contextOBJ.pipelineMode = value;\n    }\n    //Camera Shader Data\n    get cameraShaderValue(): ShaderData {\n        return this._contextOBJ.cameraShaderData;\n    }\n\n    set cameraShaderValue(value: ShaderData) {\n        this._contextOBJ.cameraShaderData = value;\n    }\n\n    /** @internal */\n    set scene(value: Scene3D) {\n        if(value){\n            this._contextOBJ.sceneID = value._id;\n            this._contextOBJ.sceneShaderData = value._shaderValues;\n            this._scene = value;\n        }else{\n            this._contextOBJ.sceneID = -1;\n            this._contextOBJ.sceneShaderData = null;\n            this._scene = null;\n        }\n        \n    }\n\n    get scene(): Scene3D {\n        return this._scene;\n    }\n\n    changeViewport(x: number, y: number, width: number, height: number) {\n        Viewport._tempViewport.set(x, y, width, height);\n        this.viewport = Viewport._tempViewport;\n    }\n\n    changeScissor(x: number, y: number, width: number, height: number) {\n        Vector4.tempVec4.setValue(x, y, width, height);\n        this.scissor = Vector4.tempVec4;\n    }\n\n    /**\n     * 渲染一个\n     * @param renderelemt \n     */\n    drawRenderElement(renderelemt: RenderElement): void {\n        renderelemt.material && renderelemt._convertSubShader(this.customShader, this.replaceTag);\n        if(!renderelemt.renderSubShader)\n            return;\n        renderelemt._renderUpdatePre(this);\n        this._contextOBJ.drawRenderElement(renderelemt._renderElementOBJ);\n    }\n    /**\n     * 创建一个 <code>RenderContext3D</code> 实例。\n     */\n    constructor() {\n        this._contextOBJ = LayaGL.renderOBJCreate.createRenderContext3D();\n    }\n\n}\n\n\n","import { LayaGL } from \"../../../layagl/LayaGL\"\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\"\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\"\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\"\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\"\nimport { VertexElement } from \"../../../renders/VertexElement\"\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\"\nimport { BufferState } from \"../../../webgl/utils/BufferState\"\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\"\nimport { GeometryElement } from \"../GeometryElement\"\nimport { RenderContext3D } from \"./RenderContext3D\"\n\n/**\n * <code>ScreenQuad</code> 类用于创建全屏四边形。\n */\nexport class ScreenQuad extends GeometryElement {\n\t/** @internal */\n\tstatic SCREENQUAD_POSITION_UV: number = 0;\n\t/** @internal */\n\tprivate static _vertexDeclaration: VertexDeclaration;\n\t/** @internal */\n\tprivate static _vertices: Float32Array = new Float32Array([1, 1, 1, 1, 1, -1, 1, 0, -1, 1, 0, 1, -1, -1, 0, 0]);//the rule of OpenGL\n\t/** @internal */\n\tprivate static _verticesInvertUV: Float32Array = new Float32Array([1, 1, 1, 0, 1, -1, 1, 1, -1, 1, 0, 0, -1, -1, 0, 1]);\n\t/**@internal */\n\tstatic instance: ScreenQuad;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tScreenQuad._vertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, ScreenQuad.SCREENQUAD_POSITION_UV)]);\n\t\tScreenQuad.instance = new ScreenQuad();\n\t}\n\n\t/** @internal */\n\tprivate _vertexBuffer: VertexBuffer3D;\n\t/** @internal */\n\tprivate _bufferState: BufferState = new BufferState();\n\t/** @internal */\n\tprivate _vertexBufferInvertUV: VertexBuffer3D;\n\t/** @internal */\n\tprivate _bufferStateInvertUV: BufferState = new BufferState();\n\n\t/**\n\t * 创建一个 <code>ScreenQuad</code> 实例,禁止使用。\n\t */\n\tconstructor() {\n\t\tsuper(MeshTopology.TriangleStrip, DrawType.DrawArray);\n\t\tthis.setDrawArrayParams(0, 4);\n\t\t//顶点buffer\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(16 * 4, BufferUsage.Static, false);\n\t\tthis._vertexBuffer.vertexDeclaration = ScreenQuad._vertexDeclaration;\n\t\tthis._vertexBuffer.setData(ScreenQuad._vertices.buffer);\n\t\tthis._bufferState.applyState([this._vertexBuffer], null);\n\n\t\tthis._vertexBufferInvertUV = LayaGL.renderOBJCreate.createVertexBuffer3D(16 * 4, BufferUsage.Static, false);\n\t\tthis._vertexBufferInvertUV.vertexDeclaration = ScreenQuad._vertexDeclaration;\n\t\tthis._vertexBufferInvertUV.setData(ScreenQuad._verticesInvertUV.buffer);\n\t\tthis._bufferStateInvertUV.applyState([this._vertexBufferInvertUV], null);\n\t}\n\n\t/**\n\t * set BufferState\n\t */\n\tset invertY(value: boolean) {\n\t\tthis.bufferState = value ? this._bufferStateInvertUV : this._bufferState;\n\t}\n\n\t/**\n\t * @internal\n\t * UpdateGeometry Data\n\t */\n\t_updateRenderParams(state: RenderContext3D): void {\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tdestroy(): void {\n\t\tsuper.destroy();\n\t\tthis._bufferState.destroy();\n\t\tthis._vertexBuffer.destroy();\n\t\tthis._bufferStateInvertUV.destroy();\n\t\tthis._vertexBufferInvertUV.destroy();\n\n\t}\n\n}\n\n\n","\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { CommandBuffer } from \"./CommandBuffer\";\n\n/**\n * <code>Command</code> 类用于创建指令。\n */\nexport class Command {\n\t/**@internal */\n\tstatic _screenShaderData: ShaderData;\n\t/** @internal */\n\tstatic _screenShader: Shader3D;\n\n\t/** @internal */\n\tstatic SCREENTEXTURE_NAME: string = \"u_MainTex\";\n\t/** @internal */\n\tstatic SCREENTEXTUREOFFSETSCALE_NAME: string = \"u_OffsetScale\";\n\t/** @internal */\n\tstatic MAINTEXTURE_TEXELSIZE_NAME: string = \"u_MainTex_TexelSize\";//todo：\n\t/** @internal */\n\tstatic SCREENTEXTURE_ID: number ;//todo：\n\t/** @internal */\n\tstatic SCREENTEXTUREOFFSETSCALE_ID: number;//todo：\n\t/** @internal */\n\tstatic MAINTEXTURE_TEXELSIZE_ID: number ;//todo：\n\n\t/**@internal */\n\t_commandBuffer: CommandBuffer = null;\n\t/**@internal */\n\t_context: RenderContext3D;\n\t/**\n\t* @internal\n\t*/\n\tstatic __init__(): void {\n\t\tCommand._screenShaderData = LayaGL.renderOBJCreate.createShaderData(null);\n\t\tCommand._screenShader = Shader3D.find(\"BlitScreen\");\n\t\tCommand.SCREENTEXTURE_ID = Shader3D.propertyNameToID(Command.SCREENTEXTURE_NAME);//todo：\n\t\tCommand.SCREENTEXTUREOFFSETSCALE_ID = Shader3D.propertyNameToID(Command.SCREENTEXTUREOFFSETSCALE_NAME);//todo：\n\t\tCommand.MAINTEXTURE_TEXELSIZE_ID = Shader3D.propertyNameToID(Command.MAINTEXTURE_TEXELSIZE_NAME);//todo：\n\t}\n\n\t/**\n\t * 创建一个 <code>Command</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * 运行渲染指令\n\t */\n\trun(): void {\n\n\t}\n\n\t/**\n\t * 回收渲染指令\n\t */\n\trecover(): void {\n\t\tthis._commandBuffer = null;\n\t}\n\n\t/**\n\t * 设置渲染上下文\n\t * @param context 渲染上下文 \n\t */\n\tsetContext(context: RenderContext3D) {\n\t\tthis._context = context;\n\t}\n\n\t/**\n\t * @internal\n\t * @destroy\n\t */\n\tdestroy(){\n\t\tthis._commandBuffer = null;\n\t\tthis._context = null;\n\t}\n\n}\n\n\n","import { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\nimport { Stat } from \"../../../../utils/Stat\";\nimport { Viewport } from \"../../../math/Viewport\";\nimport { Transform3D } from \"../../Transform3D\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { RenderElement } from \"../RenderElement\";\nimport { ScreenQuad } from \"../ScreenQuad\";\nimport { Command } from \"./Command\";\nimport { CommandBuffer } from \"./CommandBuffer\";\nimport { Camera } from \"../../Camera\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\n\nexport class BlitScreenQuadCMD extends Command {\n\t/**@internal */\n\tstatic _SCREENTYPE_QUAD: number = 0;\n\t/**@internal */\n\tstatic _SCREENTYPE_TRIANGLE: number = 1;\n\t/**@internal */\n\tprivate static _pool: any[] = [];\n\t/** @internal */\n\tprivate static _defaultOffsetScale: Vector4 = new Vector4(0, 0, 1, 1);\n\t/**\n\t* 创建命令流\n\t* @param source 原始贴图 如果设置为null  将会使用默认的Camera流程中的原RenderTexture\n\t* @param dest 目标贴图 如果设置为null，将会使用默认的camera渲染目标\n\t* @param offsetScale 偏移缩放\n\t* @param shader 渲染shader\n\t* @param shaderData 渲染数据\n\t* @param subShader subshader的节点\n\t* @param screenType \n\t*/\n\tstatic create(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0, screenType: number = BlitScreenQuadCMD._SCREENTYPE_QUAD, commandbuffer: CommandBuffer = null): BlitScreenQuadCMD {\n\t\tvar cmd: BlitScreenQuadCMD;\n\t\tcmd = BlitScreenQuadCMD._pool.length > 0 ? BlitScreenQuadCMD._pool.pop() : new BlitScreenQuadCMD();\n\t\tcmd._source = source;\n\t\tcmd._dest = dest;\n\t\tcmd._offsetScale = offsetScale;\n\t\tcmd.setshader(shader, subShader, shaderData);\n\t\t// cmd._shader = shader;\n\t\t// cmd.shaderData = shaderData;\n\t\t// cmd._subShader = subShader;\n\t\tcmd._commandBuffer = commandbuffer;\n\t\treturn cmd;\n\t}\n\n\t/**@internal */\n\tprivate _source: BaseTexture = null;\n\t/**@internal */\n\tprivate _dest: RenderTexture = null;\n\t/**@internal */\n\tprivate _offsetScale: Vector4 = null;\n\t/**@internal */\n\tprivate _shader: Shader3D = null;\n\t/**@internal */\n\tprivate _shaderData: ShaderData = null;\n\t/**@internal */\n\tprivate _subShader: number = 0;\n\t/**@internal */\n\tprivate _sourceTexelSize: Vector4 = new Vector4();\n\t/**@internal */\n\tprivate _renderElement: RenderElement\n\t/**@internal */\n\tprivate _transform3D: Transform3D;\n\n\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._transform3D = LayaGL.renderOBJCreate.createTransform(null);\n\t\tthis._renderElement = new RenderElement();\n\t\tthis._renderElement.setTransform(this._transform3D);\n\t\tthis._renderElement.setGeometry(ScreenQuad.instance);\n\t}\n\n\tset shaderData(value: ShaderData) {\n\t\tthis._shaderData = value || Command._screenShaderData;\n\t\tthis._renderElement._renderElementOBJ._materialShaderData = this._shaderData;\n\t}\n\n\tsetshader(shader: Shader3D, subShader: number, shaderData: ShaderData) {\n\t\tthis._shader = shader || Command._screenShader;\n\t\tthis._subShader = subShader || 0;\n\t\tthis.shaderData = shaderData;\n\t\tthis._renderElement.renderSubShader = this._shader.getSubShaderAt(this._subShader);\n\t\tthis._renderElement._subShaderIndex = subShader;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trun(): void {//TODO:相机的UV\n\t\tthis._commandBuffer && (this.setContext(this._commandBuffer._context));\n\t\tvar context = this._context;\n\t\tvar source;\n\t\tif (!this._source) {\n\t\t\tif (!this._commandBuffer._camera._internalRenderTexture)//source null, Bind define FrameBuffer\n\t\t\t\tthrow \"camera internalRenderTexture is null,please set camera enableBuiltInRenderTexture\";\n\t\t\tsource = this._commandBuffer._camera._internalRenderTexture;\n\t\t} else\n\t\t\tsource = this._source;\n\t\tvar shaderData: ShaderData = this._shaderData;\n\t\tvar dest: RenderTexture = this._dest ? this._dest : this._commandBuffer._camera._internalRenderTexture;//set dest\n\t\tif (dest) {//set viewport\n\t\t\tcontext.changeViewport(0, 0, dest.width, dest.height);\n\t\t\tcontext.changeScissor(0, 0, dest.width, dest.height);\n\t\t} else {\n\t\t\tlet camera = this._commandBuffer._camera;\n\t\t\tlet viewport: Viewport = camera.viewport;\n\t\t\tlet vpH = viewport.height;\n\t\t\tlet vpY = RenderContext3D.clientHeight - viewport.y - vpH;\n\t\t\tcontext.changeViewport(viewport.x, vpY, viewport.width, vpH);\n\t\t\tcontext.changeScissor(viewport.x, vpY, viewport.width, vpH);\n\t\t}\n\t\tshaderData.setTexture(Command.SCREENTEXTURE_ID, source);\n\t\tshaderData.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale || BlitScreenQuadCMD._defaultOffsetScale);\n\t\tthis._sourceTexelSize.setValue(1.0 / source.width, 1.0 / source.height, source.width, source.height);\n\t\tshaderData.setVector(Command.MAINTEXTURE_TEXELSIZE_ID, this._sourceTexelSize);\n\t\tcontext.destTarget = dest;\n\t\tcontext._contextOBJ.applyContext(Camera._updateMark);\n\t\t// ScreenQuad.instance.invertY = dest ? dest._isCameraTarget : false;\n\t\tScreenQuad.instance.invertY = context.invertY;\n\t\tcontext.drawRenderElement(this._renderElement);\n\t\tStat.blitDrawCall++;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trecover(): void {\n\t\tBlitScreenQuadCMD._pool.push(this);\n\t\tthis._source = null;\n\t\tthis._dest = null;\n\t\tthis._offsetScale = null;\n\t\tthis._shader = null;\n\t\tthis._shaderData = null;\n\t\tsuper.recover();\n\t}\n\n\tdestroy(): void {\n\t\tthis._source = null;\n\t\tthis._dest = null;\n\t\tthis._offsetScale = null;\n\t\tthis._shader = null;\n\t\tthis._shaderData = null;\n\t\tthis._renderElement.destroy();\n\t}\n}","import { Command } from \"./Command\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { Camera } from \"../../Camera\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\n\n/**\n * @internal\n * <code>SetRenderTargetCMD</code> 类用于创建设置渲染目标指令。\n */\nexport class SetRenderTargetCMD extends Command {\n\t/**@internal */\n\tprivate static _pool: any[] = [];\n\n\t/**@internal */\n\tprivate _renderTexture: RenderTexture = null;\n\n\t/**\n\t * @internal\n\t */\n\tstatic create(renderTexture: RenderTexture): SetRenderTargetCMD {\n\t\tvar cmd: SetRenderTargetCMD;\n\t\tcmd = SetRenderTargetCMD._pool.length > 0 ? SetRenderTargetCMD._pool.pop() : new SetRenderTargetCMD();\n\t\tcmd._renderTexture = renderTexture;\n\t\treturn cmd;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trun(): void {\n\t\t//如果已经有绑定的帧buffer  需要先解绑\n\t\t(RenderTexture.currentActive) && (RenderTexture.currentActive._end());\n\t\tRenderContext3D._instance.destTarget = this._renderTexture;\n\t\tRenderContext3D._instance.changeScissor(0, 0, this._renderTexture.width, this._renderTexture.height);\n\t\tRenderContext3D._instance.changeViewport(0, 0, this._renderTexture.width, this._renderTexture.height);\n\t\tRenderContext3D._instance._contextOBJ.applyContext(Camera._updateMark);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trecover(): void {\n\t\tSetRenderTargetCMD._pool.push(this);\n\t\tthis._renderTexture = null;\n\t}\n}\n\n\n","import { Command } from \"./Command\";\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\nimport { CommandBuffer } from \"./CommandBuffer\";\nimport { ShaderData, ShaderDataItem, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { Color } from \"../../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\n\n/**\n * @internal\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\n */\nexport class SetShaderDataCMD extends Command {\n\tstatic ShaderDataType_define:number = -2;\n\t/**@internal */\n\tprivate static _pool: any[] = [];\n\n\t/**@internal */\n\tprivate _shaderData: ShaderData = null;\n\t/**@internal */\n\tprivate _nameID: number|string = 0;\n\t/**@internal */\n\tprivate _value: ShaderDataItem = null;\n\t/**@internal */\n\tprivate _dataType:number = -1;\n\n\t/**\n\t * @internal\n\t */\n\tstatic create(shaderData: ShaderData, nameID: number|string, value:ShaderDataItem,shaderDataType:ShaderDataType|number,commandBuffer:CommandBuffer): SetShaderDataCMD {\n\t\tvar cmd: SetShaderDataCMD;\n\t\tcmd = SetShaderDataCMD._pool.length > 0 ? SetShaderDataCMD._pool.pop() : new SetShaderDataCMD();\n\t\tcmd._shaderData = shaderData;\n\t\tcmd._nameID = nameID;\n\t\tcmd._value = (value as any).clone?(value as any).clone():value;\n\t\tcmd._dataType = shaderDataType;\n\t\tcmd._commandBuffer = commandBuffer;\n\t\treturn cmd;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trun(): void {\n\t\tswitch(this._dataType){\n\t\t\tcase ShaderDataType.Int:\n\t\t\t\tthis._shaderData.setInt(this._nameID as number,this._value as number);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Float:\n\t\t\t\tthis._shaderData.setNumber(this._nameID as number,this._value as number);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Bool:\n\t\t\t\tthis._shaderData.setBool(this._nameID as number,this._value as boolean);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Matrix4x4:\n\t\t\t\tthis._shaderData.setMatrix4x4(this._nameID as number,this._value as Matrix4x4);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Color:\n\t\t\t\tthis._shaderData.setColor(this._nameID as number,this._value as Color);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Texture2D:\n\t\t\t\tthis._shaderData.setTexture(this._nameID as number,this._value as BaseTexture);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Vector4:\n\t\t\t\tthis._shaderData.setVector(this._nameID as number,this._value as Vector4);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Vector2:\n\t\t\t\tthis._shaderData.setVector2(this._nameID as number,this._value as Vector2);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Vector3:\n\t\t\t\tthis._shaderData.setVector3(this._nameID as number,this._value as Vector3);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Buffer:\n\t\t\t\tthis._shaderData.setBuffer( this._nameID as number,this._value as Float32Array);\n\t\t\t\tbreak;\n\t\t\t// case ShaderDataType.ShaderDefine:\n\t\t\t// \tlet defineData :ShaderDefine = Shader3D.getDefineByName(this._nameID as string);\n\t\t\t// \tif(this._value)\n\t\t\t// \tthis._shaderData.addDefine(defineData);\n\t\t\t// \telse\n\t\t\t// \tthis._shaderData.removeDefine(defineData);\n\t\t\t// \tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif(this._dataType==SetShaderDataCMD.ShaderDataType_define){\n\t\t\t\t\tlet defineData :ShaderDefine = Shader3D.getDefineByName(this._nameID as string);\n\t\t\t\t\t\tif(this._value)\n\t\t\t\t\t\tthis._shaderData.addDefine(defineData);\n\t\t\t\t\t\telse\n\t\t\t\t\t\tthis._shaderData.removeDefine(defineData);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}else\n\t\t\t\t\tthrow \"no type shaderValue on this CommendBuffer\";\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trecover(): void {\n\t\tSetShaderDataCMD._pool.push(this);\n\t\tthis._shaderData = null;\n\t\tthis._nameID = 0;\n\t\tthis._value = null;\n\t\tthis._dataType = -1;\n\t}\n\n}\n\n\n","import { Loader } from \"../../../net/Loader\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Resource } from \"../../../resource/Resource\";\nimport { Handler } from \"../../../utils/Handler\";\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData, ShaderDataDefaultValue, ShaderDataItem, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\nimport { IClone } from \"../../../utils/IClone\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Config3D } from \"../../../../Config3D\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { ILaya } from \"../../../../ILaya\";\nimport { Color } from \"../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\n\nexport enum MaterialRenderMode {\n    /**渲染状态_不透明。*/\n    RENDERMODE_OPAQUE,\n    /**渲染状态_阿尔法测试。*/\n    RENDERMODE_CUTOUT,\n    /**渲染状态__透明。*/\n    RENDERMODE_TRANSPARENT,\n    /**渲染状态__加色法混合。*/\n    RENDERMODE_ADDTIVE,\n    /**渲染状态_透明混合。*/\n    RENDERMODE_ALPHABLENDED,\n    /**渲染状态_自定义 */\n    RENDERMODE_CUSTOME\n}\n\n/**\n * <code>Material</code> 类用于创建材质。\n */\nexport class Material extends Resource implements IClone {\n    /** 渲染队列_不透明。*/\n    static RENDERQUEUE_OPAQUE: number = 2000;\n    /** 渲染队列_阿尔法裁剪。*/\n    static RENDERQUEUE_ALPHATEST: number = 2450;\n    /** 渲染队列_透明。*/\n    static RENDERQUEUE_TRANSPARENT: number = 3000;\n\n    /**着色器变量,透明测试值。*/\n    static ALPHATESTVALUE: number;\n    /**@internal */\n    static CULL: number;\n    /**@internal */\n    static BLEND: number;\n    /**@internal */\n    static BLEND_SRC: number;\n    /**@internal */\n    static BLEND_DST: number;\n    /**@internal */\n    static BLEND_SRC_RGB: number;\n    /**@internal */\n    static BLEND_DST_RGB: number;\n    /**@internal */\n    static BLEND_SRC_ALPHA: number;\n    /**@internal */\n    static BLEND_DST_ALPHA: number;\n    /**@internal */\n    static BLEND_EQUATION: number;\n    /**@internal */\n    static BLEND_EQUATION_RGB: number;\n    /**@internal */\n    static BLEND_EQUATION_ALPHA: number;\n    /**@internal */\n    static DEPTH_TEST: number;\n    /**@internal */\n    static DEPTH_WRITE: number;\n    /**@internal */\n    static STENCIL_TEST: number;\n    /**@internal */\n    static STENCIL_WRITE: number;\n    /**@internal */\n    static STENCIL_Ref: number;\n    /**@internal */\n    static STENCIL_Op: number;\n    /**材质级着色器宏定义,透明测试。*/\n    static SHADERDEFINE_ALPHATEST: ShaderDefine;\n    static SHADERDEFINE_MAINTEXTURE: ShaderDefine;\n    static SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\n    /**\n     * 加载材质。\n     * @param url 材质地址。\n     * @param complete 完成回掉。\n     */\n    static load(url: string, complete: Handler): void {\n        ILaya.loader.load(url, complete, null, Loader.MATERIAL);\n    }\n\n    /**\n     * @internal\n     */\n    static __initDefine__(): void {\n        Material.SHADERDEFINE_ALPHATEST = Shader3D.getDefineByName(\"ALPHATEST\");\n        Material.SHADERDEFINE_MAINTEXTURE = Shader3D.getDefineByName(\"MAINTEXTURE\");\n        Material.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\n        Material.ALPHATESTVALUE = Shader3D.propertyNameToID(\"u_AlphaTestValue\");\n        Material.CULL = Shader3D.propertyNameToID(\"s_Cull\");\n        Material.BLEND = Shader3D.propertyNameToID(\"s_Blend\");\n        Material.BLEND_SRC = Shader3D.propertyNameToID(\"s_BlendSrc\");\n        Material.BLEND_DST = Shader3D.propertyNameToID(\"s_BlendDst\");\n        Material.BLEND_SRC_RGB = Shader3D.propertyNameToID(\"s_BlendSrcRGB\");\n        Material.BLEND_DST_RGB = Shader3D.propertyNameToID(\"s_BlendDstRGB\");\n        Material.BLEND_SRC_ALPHA = Shader3D.propertyNameToID(\"s_BlendSrcAlpha\");\n        Material.BLEND_DST_ALPHA = Shader3D.propertyNameToID(\"s_BlendDstAlpha\");\n        Material.BLEND_EQUATION = Shader3D.propertyNameToID(\"s_BlendEquation\");\n        Material.BLEND_EQUATION_RGB = Shader3D.propertyNameToID(\"s_BlendEquationRGB\");\n        Material.BLEND_EQUATION_ALPHA = Shader3D.propertyNameToID(\"s_BlendEquationAlpha\");\n        Material.DEPTH_TEST = Shader3D.propertyNameToID(\"s_DepthTest\");\n        Material.DEPTH_WRITE = Shader3D.propertyNameToID(\"s_DepthWrite\");\n        Material.STENCIL_Ref = Shader3D.propertyNameToID(\"s_StencilRef\");\n        Material.STENCIL_TEST = Shader3D.propertyNameToID(\"s_StencilTest\");\n        Material.STENCIL_WRITE = Shader3D.propertyNameToID(\"s_StencilWrite\");\n        Material.STENCIL_Op = Shader3D.propertyNameToID(\"s_StencilOp\");\n    }\n\n    /**@internal */\n    private _matRenderNode: MaterialRenderMode;\n    /** @internal */\n    _shader: Shader3D;\n    /** @private */\n    _shaderValues: ShaderData | null;//TODO:剥离贴图ShaderValue\n    /** 所属渲染队列. */\n    renderQueue: number;\n\n    /**\n     * 着色器数据。\n     */\n    get shaderData(): ShaderData {\n        return this._shaderValues;\n    }\n\n    /**\n     * 透明测试模式裁剪值。\n     */\n    get alphaTestValue(): number {\n        return this._shaderValues.getNumber(Material.ALPHATESTVALUE);\n    }\n\n    set alphaTestValue(value: number) {\n        this._shaderValues.setNumber(Material.ALPHATESTVALUE, value);\n    }\n\n    /**\n     * 是否透明裁剪。\n     */\n    get alphaTest(): boolean {\n        return this.shaderData.hasDefine(Material.SHADERDEFINE_ALPHATEST);\n    }\n\n    set alphaTest(value: boolean) {\n        if (value)\n            this._shaderValues.addDefine(Material.SHADERDEFINE_ALPHATEST);\n        else\n            this._shaderValues.removeDefine(Material.SHADERDEFINE_ALPHATEST);\n    }\n\n    /**\n     * 增加Shader宏定义。\n     * @param value 宏定义。\n     */\n    addDefine(define: ShaderDefine): void {\n        this._shaderValues.addDefine(define);\n    }\n\n    /**\n     * 移除Shader宏定义。\n     * @param value 宏定义。\n     */\n    removeDefine(define: ShaderDefine): void {\n        this._shaderValues.removeDefine(define);\n    }\n\n    /**\n     * 是否包含Shader宏定义。\n     * @param value 宏定义。\n     */\n    hasDefine(define: ShaderDefine): boolean {\n        return this._shaderValues.hasDefine(define);\n    }\n\n    /**\n     * 是否写入深度。\n     */\n    get depthWrite(): boolean {\n        return this._shaderValues.getBool(Material.DEPTH_WRITE);\n    }\n\n    set depthWrite(value: boolean) {\n        this._shaderValues.setBool(Material.DEPTH_WRITE, value);\n    }\n\n\n    /**\n     * 剔除方式。\n     */\n    get cull(): number {\n        return this._shaderValues.getInt(Material.CULL);\n    }\n\n    set cull(value: number) {\n        this._shaderValues.setInt(Material.CULL, value);\n    }\n\n    /**\n     * 混合方式。\n     */\n    get blend(): number {\n        return this._shaderValues.getInt(Material.BLEND);\n    }\n\n    set blend(value: number) {\n        this._shaderValues.setInt(Material.BLEND, value);\n    }\n\n\n    /**\n     * 混合源。\n     */\n    get blendSrc(): number {\n        return this._shaderValues.getInt(Material.BLEND_SRC);\n    }\n\n    set blendSrc(value: number) {\n        this._shaderValues.setInt(Material.BLEND_SRC, value);\n    }\n\n\n\n    /**\n     * 混合目标。\n     */\n    get blendDst(): number {\n        return this._shaderValues.getInt(Material.BLEND_DST);\n    }\n\n    set blendDst(value: number) {\n        this._shaderValues.setInt(Material.BLEND_DST, value);\n    }\n\n    /**\n     * 混合目标 alpha\n     */\n    public get blendSrcAlpha(): number {\n        return this._shaderValues.getInt(Material.BLEND_SRC_ALPHA);\n    }\n    public set blendSrcAlpha(value: number) {\n        this._shaderValues.setInt(Material.BLEND_SRC_ALPHA, value);\n    }\n\n    /**\n     * 混合原 RGB\n     */\n    public get blendSrcRGB(): number {\n        return this._shaderValues.getInt(Material.BLEND_SRC_RGB);\n    }\n    /**\n     * 混合原 RGB\n     */\n    public set blendSrcRGB(value: number) {\n        this._shaderValues.setInt(Material.BLEND_SRC_RGB, value);\n    }\n\n    public get blendDstRGB(): number {\n        return this._shaderValues.getInt(Material.BLEND_DST_RGB);\n    }\n    public set blendDstRGB(value: number) {\n        this._shaderValues.setInt(Material.BLEND_DST_RGB, value);\n    }\n\n    /**\n     * 混合目标 alpha\n     */\n    public get blendDstAlpha(): number {\n        return this._shaderValues.getInt(Material.BLEND_DST_ALPHA);\n    }\n    public set blendDstAlpha(value: number) {\n        this._shaderValues.setInt(Material.BLEND_DST_ALPHA, value);\n    }\n\n    /**\n     * 混合方程\n     */\n    public get blendEquation(): number {\n        return this._shaderValues.getInt(Material.BLEND_EQUATION);\n    }\n    public set blendEquation(value: number) {\n        this._shaderValues.setInt(Material.BLEND_EQUATION, value);\n    }\n\n    /**\n     * 混合方式 RGB\n     */\n    public get blendEquationRGB(): number {\n        return this._shaderValues.getInt(Material.BLEND_EQUATION_RGB);\n    }\n    public set blendEquationRGB(value: number) {\n        this._shaderValues.setInt(Material.BLEND_EQUATION_RGB, value);\n    }\n\n    /**\n     * 混合方式 Alpha\n     */\n    public get blendEquationAlpha(): number {\n        return this._shaderValues.getInt(Material.BLEND_EQUATION_ALPHA);\n    }\n    public set blendEquationAlpha(value: number) {\n        this._shaderValues.setInt(Material.BLEND_EQUATION_ALPHA, value);\n    }\n\n    /**\n     * 深度测试方式。\n     */\n    get depthTest(): number {\n        return this._shaderValues.getInt(Material.DEPTH_TEST);\n    }\n\n    set depthTest(value: number) {\n        this._shaderValues.setInt(Material.DEPTH_TEST, value);\n    }\n\n    /**\n     * 模板测试方式\n     */\n    get stencilTest(): number {\n        return this._shaderValues.getInt(Material.STENCIL_TEST);\n    }\n\n    set stencilTest(value: number) {\n        this._shaderValues.setInt(Material.STENCIL_TEST, value);\n    }\n\n    /**\n     * 是否写入模板。\n     */\n    get stencilWrite(): boolean {\n        return this._shaderValues.getBool(Material.STENCIL_WRITE);\n    }\n\n    set stencilWrite(value: boolean) {\n        this._shaderValues.setBool(Material.STENCIL_WRITE, value);\n    }\n\n    /**\n     * 写入模板值\n     */\n    set stencilRef(value: number) {\n        this._shaderValues.setInt(Material.STENCIL_Ref, value);\n    }\n\n    get stencilRef(): number {\n        return this._shaderValues.getInt(Material.STENCIL_Ref);\n    }\n\n    /** */\n    /**\n     * 写入模板测试设置\n     * vector(fail, zfail, zpass)\n     */\n    set stencilOp(value: Vector3) {\n        this._shaderValues.setVector3(Material.STENCIL_Op, value);\n    }\n\n    get stencilOp(): Vector3 {\n        return this._shaderValues.getVector3(Material.STENCIL_Op);\n    }\n\n    /**\n     * 获得材质属性\n     */\n    get MaterialProperty(): any {\n        let propertyMap: any = {};\n        var shaderValues = this._shaderValues.getData();\n        for (let key in shaderValues) {\n            propertyMap[LayaGL.renderEngine.propertyIDToName(parseInt(key))] = shaderValues[key];\n        }\n        return propertyMap;\n    }\n\n    /**\n     * 获得材质宏\n     */\n    get MaterialDefine(): Array<string> {\n        let shaderDefineArray = new Array<string>();\n        let defineData = this._shaderValues._defineDatas;\n        Shader3D._getNamesByDefineData(defineData, shaderDefineArray);\n        return shaderDefineArray;\n    }\n\n    /**\n     * 渲染模式。\n     */\n    set materialRenderMode(value: MaterialRenderMode) {\n        this._matRenderNode = value;\n        switch (value) {\n            case MaterialRenderMode.RENDERMODE_OPAQUE:\n                this.alphaTest = false;\n                this.renderQueue = Material.RENDERQUEUE_OPAQUE;\n                this.depthWrite = true;\n                //this.cull = RenderState.CULL_BACK;\n                this.blend = RenderState.BLEND_DISABLE;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                break;\n            case MaterialRenderMode.RENDERMODE_CUTOUT:\n                this.renderQueue = Material.RENDERQUEUE_ALPHATEST;\n                this.alphaTest = true;\n                this.depthWrite = true;\n                //this.cull = RenderState.CULL_BACK;\n                this.blend = RenderState.BLEND_DISABLE;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                break;\n            case MaterialRenderMode.RENDERMODE_TRANSPARENT:\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n                this.alphaTest = false;\n                this.depthWrite = false;\n                //this.cull = RenderState.CULL_BACK;\n                this.blend = RenderState.BLEND_ENABLE_ALL;\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                break;\n            case MaterialRenderMode.RENDERMODE_ADDTIVE:\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n                this.alphaTest = false;\n                this.depthWrite = false;\n                //this.cull = RenderState.CULL_NONE;\n                this.blend = RenderState.BLEND_ENABLE_ALL;\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n                this.blendDst = RenderState.BLENDPARAM_ONE;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                this._shaderValues.addDefine(Material.SHADERDEFINE_ADDTIVEFOG);\n                break;\n            case MaterialRenderMode.RENDERMODE_ALPHABLENDED:\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n                this.alphaTest = false;\n                this.depthWrite = false;\n                //this.cull = RenderState.CULL_NONE;\n                this.blend = RenderState.BLEND_ENABLE_ALL;\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                this._shaderValues.removeDefine(Material.SHADERDEFINE_ADDTIVEFOG);\n                break;\n            case MaterialRenderMode.RENDERMODE_CUSTOME:\n                //TODO IDE\n                break;\n            default:\n                throw new Error(\"UnlitMaterial : renderMode value error.\");\n        }\n    }\n\n    /**\n     * 获得材质渲染状态\n     */\n    get materialRenderMode() {\n        return this._matRenderNode;\n    }\n\n    /**\n     * 创建一个 <code>Material</code> 实例。\n     */\n    constructor() {\n        super();\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(this);\n        this.renderQueue = Material.RENDERQUEUE_OPAQUE;\n        this.alphaTest = false;\n        this.cull = RenderState.CULL_BACK;\n        this.blend = RenderState.BLEND_DISABLE;\n        this.blendSrc = RenderState.BLENDPARAM_ONE;\n        this.blendDst = RenderState.BLENDPARAM_ZERO;\n        this.blendSrcRGB = RenderState.BLENDPARAM_ONE;\n        this.blendDstRGB = RenderState.BLENDPARAM_ZERO;\n        this.blendSrcAlpha = RenderState.BLENDPARAM_ONE;\n        this.blendDstAlpha = RenderState.BLENDPARAM_ZERO;\n        this.blendEquation = RenderState.BLENDEQUATION_ADD;\n        this.blendEquationRGB = RenderState.BLENDEQUATION_ADD;\n        this.blendEquationAlpha = RenderState.BLENDEQUATION_ADD;\n        this.depthTest = RenderState.DEPTHTEST_LEQUAL;\n        this.depthWrite = true;\n        this.stencilRef = 1;\n        this.stencilTest = RenderState.STENCILTEST_OFF;\n        this.stencilWrite = false;\n        this.stencilOp = new Vector3(RenderState.STENCILOP_KEEP, RenderState.STENCILOP_KEEP, RenderState.STENCILOP_REPLACE);\n        this.destoryedImmediately = false;\n    }\n\n    /**\n     * @internal\n     * @param shader \n     * @returns \n     */\n    private _bindShaderInfo(shader: Shader3D) {\n        //update UBOData by Shader\n        let subShader = shader.getSubShaderAt(0);//TODO\t\n        // ubo\n        let shaderUBODatas = subShader._uniformBufferDataMap;\n        if (!shaderUBODatas)\n            return;\n        for (let key of shaderUBODatas.keys()) {\n            //create data\n            let uboData = shaderUBODatas.get(key).clone();\n            //create UBO\n            let ubo = UniformBufferObject.create(key, BufferUsage.Dynamic, uboData.getbyteLength(), false);\n            this._shaderValues.setUniformBuffer(Shader3D.propertyNameToID(key), ubo);\n            this._shaderValues._addCheckUBO(key, ubo, uboData);\n        }\n    }\n\n    /**\n     * @internal\n     * 清除UBO\n     * @returns \n     */\n    private _releaseUBOData() {\n        if (!this._shaderValues.uniformBufferDatas) {\n            return;\n        }\n        for (let value of this._shaderValues.uniformBufferDatas.values()) {\n            value._updateDataInfo.destroy();\n            value.destroy();\n            value._updateDataInfo = null;\n        }\n        this._shaderValues.uniformBufferDatas.clear();\n        this._shaderValues.uniformBuffersMap.clear();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _disposeResource(): void {\n        this._releaseUBOData();\n        this._shaderValues.destroy();\n        this._shaderValues = null;\n    }\n\n\n    \n    /**\n     * get all material uniform property \n     * @returns \n     */\n    effectiveProperty() {\n        return this._shader.getSubShaderAt(0)._uniformTypeMap;\n    }\n\n    /**\n     * 设置使用Shader名字。\n     * @param name 名称。\n     */\n    setShaderName(name: string): void {\n        this._shader = Shader3D.find(name);\n        if (!this._shader) {\n            //throw new Error(\"Material: unknown shader name.\");\n            console.warn(`Material: unknown shader name '${name}'`);\n            this._shader = Shader3D.find(\"BLINNPHONG\");\n        }\n\n        if (Config3D._uniformBlock) {\n            this._releaseUBOData();\n            //bind shader info\n            // todo 清理残留 shader data\n            this._bindShaderInfo(this._shader);\n        }\n\n        // set default value\n        // todo subShader 选择\n        let subShader = this._shader.getSubShaderAt(0);\n        let defaultValue = subShader._uniformDefaultValue;\n        let typeMap = subShader._uniformTypeMap;\n        this.applyUniformDefaultValue(typeMap, defaultValue);\n    }\n\n    /**\n     * @internal\n     */\n    applyUniformDefaultValue(typeMap: Map<string, ShaderDataType>, defaultValue: Record<string, ShaderDataItem>) {\n        typeMap.forEach((type, key) => {\n            if (defaultValue && defaultValue[key] != undefined) {\n                let value = defaultValue[key];\n                this.setShaderData(key, type, value);\n            }\n            else {\n                this.setShaderData(key, type, ShaderDataDefaultValue(type));\n            }\n        });\n    }\n\n    /**\n     * 获得bool属性值\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getBoolByIndex(uniformIndex: number): boolean {\n        return this.shaderData.getBool(uniformIndex);\n    }\n\n    \n    /**\n     * 设置bool值\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setBoolByIndex(uniformIndex: number, value: boolean) {\n        this.shaderData.setBool(uniformIndex, value);\n    }\n\n    /**\n     * 活得bool值\n     * @param name 属性名称\n     * @returns \n     */\n    getBool(name: string): boolean {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getBoolByIndex(uniformIndex);\n    }\n\n    /**\n     * 设置bool值\n     * @param name 属性名称\n     * @param value 值\n     */\n    setBool(name: string, value: boolean) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setBoolByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 获得Float值\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getFloatByIndex(uniformIndex: number): number {\n        return this.shaderData.getNumber(uniformIndex);\n    }\n\n    /**\n     * 设置Float值\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setFloatByIndex(uniformIndex: number, value: number) {\n        this.shaderData.setNumber(uniformIndex, value);\n    }\n\n    /**\n     * 获得Float值\n     * @param name 属性名称\n     * @returns \n     */\n    getFloat(name: string): number {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getFloatByIndex(uniformIndex);\n    }\n\n    /**\n     * 设置Float值\n     * @param name 属性名称\n     * @param value 值\n     */\n    setFloat(name: string, value: number) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setFloatByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 获得Int值\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getIntByIndex(uniformIndex: number): number {\n        return this.shaderData.getInt(uniformIndex);\n    }\n\n    /**\n     * 设置Int值\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setIntByIndex(uniformIndex: number, value: number) {\n        this.shaderData.setInt(uniformIndex, value);\n    }\n\n    /**\n     * 获得Int值\n     * @param name 属性名称\n     * @returns \n     */\n    getInt(name: string): number {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getIntByIndex(uniformIndex);\n    }\n\n    /**\n     * 设置Int值\n     * @param name 属性名称\n     * @param value 值\n     */\n    setInt(name: string, value: number) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setIntByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 获得Vector2\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getVector2ByIndex(uniformIndex: number): Vector2 {\n        return this.shaderData.getVector2(uniformIndex);\n    }\n\n    /**\n     * 设置Vector2\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setVector2ByIndex(uniformIndex: number, value: Vector2) {\n        this.shaderData.setVector2(uniformIndex, value);\n    }\n\n    /**\n     * 获得Vector2\n     * @param name 属性名称\n     * @returns \n     */\n    getVector2(name: string): Vector2 {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getVector2ByIndex(uniformIndex);\n    }\n\n    /**\n     * 设置Vector2\n     * @param name 属性名称\n     * @param value 值\n     */\n    setVector2(name: string, value: Vector2) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setVector2ByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 获得Vector3\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getVector3ByIndex(uniformIndex: number): Vector3 {\n        return this.shaderData.getVector3(uniformIndex);\n    }\n\n    /**\n     * 设置Vector3\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setVector3ByIndex(uniformIndex: number, value: Vector3) {\n        this.shaderData.setVector3(uniformIndex, value);\n    }\n\n    /**\n     * 获得Vector3\n     * @param name 属性名称\n     * @returns \n     */\n    getVector3(name: string) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getVector3ByIndex(uniformIndex);\n    }\n\n    /**\n     * 设置Vector3\n     * @param name 属性名称\n     * @param value 值\n     */\n    setVector3(name: string, value: Vector3) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setVector3ByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 获得Vector4\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setVector4ByIndex(uniformIndex: number, value: Vector4) {\n        this.shaderData.setVector(uniformIndex, value);\n    }\n\n    /**\n     * 设置Vector4\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getVector4ByIndex(uniformIndex: number): Vector4 {\n        return this.shaderData.getVector(uniformIndex);\n    }\n\n    /**\n     * 设置Vector4\n     * @param name 属性名称\n     * @param value 值\n     */\n    setVector4(name: string, value: Vector4) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setVector4ByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 获得Vector4\n     * @param name 属性名称\n     * @returns \n     */\n    getVector4(name: string) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getVector4ByIndex(uniformIndex);\n    }\n\n    /**\n     * 获得Color\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getColorByIndex(uniformIndex: number): Color {\n        return this.shaderData.getColor(uniformIndex);\n    }\n\n    /**\n     * 设置Color\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setColorByIndex(uniformIndex: number, value: Color) {\n        this.shaderData.setColor(uniformIndex, value);\n    }\n\n    /**\n     * 获得Color\n     * @param name 属性名称\n     * @returns \n     */\n    getColor(name: string): Color {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.shaderData.getColor(uniformIndex);\n    }\n\n    /**\n     * 设置Color\n     * @param name 属性名称\n     * @param value 值\n     */\n    setColor(name: string, value: Color) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setColorByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 获得Matrix4x4\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getMatrix4x4ByIndex(uniformIndex: number): Matrix4x4 {\n        return this.shaderData.getMatrix4x4(uniformIndex);\n    }\n    \n    /**\n     * 设置Matrix4x4\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setMatrix4x4ByIndex(uniformIndex: number, value: Matrix4x4) {\n        this.shaderData.setMatrix4x4(uniformIndex, value);\n    }\n\n    /**\n     * 获得Matrix4x4\n     * @param name 属性名称\n     * @returns \n     */\n    getMatrix4x4(name: string): Matrix4x4 {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getMatrix4x4ByIndex(uniformIndex);\n    }\n\n    /**\n     * 设置Matrix4x4\n     * @param name 属性名称\n     * @param value 值\n     */\n    setMatrix4x4(name: string, value: Matrix4x4) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setMatrix4x4ByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 设置纹理\n     * @param uniformIndex 属性索引\n     * @param texture \n     */\n    setTextureByIndex(uniformIndex: number, texture: BaseTexture) {\n        this.shaderData.setTexture(uniformIndex, texture);\n    }\n\n    /**\n     * 获得纹理\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getTextureByIndex(uniformIndex: number) {\n        return this.shaderData.getTexture(uniformIndex);\n    }\n\n    /**\n     * 设置纹理\n     * @param name 属性名称\n     * @param texture \n     */\n    setTexture(name: string, texture: BaseTexture) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setTextureByIndex(uniformIndex, texture);\n    }\n\n    /**\n     * 获得纹理\n     * @param name 属性名称\n     * @returns \n     */\n    getTexture(name: string): BaseTexture {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getTextureByIndex(uniformIndex);\n    }\n\n    /**\n     * 获得Buffer\n     * @param uniformIndex 属性索引\n     * @returns \n     */\n    getBufferByIndex(uniformIndex: number): Float32Array {\n        return this.shaderData.getBuffer(uniformIndex);\n    }\n\n    /**\n     * 设置Buffer\n     * @param uniformIndex 属性索引\n     * @param value 值\n     */\n    setBufferByIndex(uniformIndex: number, value: Float32Array) {\n        this.shaderData.setBuffer(uniformIndex, value);\n    }\n\n    /**\n     * 获得Buffer\n     * @param name 属性名称\n     * @returns \n     */\n    getBuffer(name: string): Float32Array {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getBufferByIndex(uniformIndex);\n    }\n\n    /**\n     * 设置Buffer\n     * @param name 属性名称\n     * @param value 值\n     */\n    setBuffer(name: string, value: Float32Array) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setBufferByIndex(uniformIndex, value);\n    }\n\n    /**\n     * 设置ShaderData的属性值\n     * @param uniformIndex 属性索引\n     * @param type 值类型\n     * @param value 值\n     */\n    setShaderDataByIndex(uniformIndex: number, type: ShaderDataType, value: ShaderDataItem) {\n        this.shaderData.setShaderData(uniformIndex, type, value);\n    }\n\n    /**\n     * 设置ShaderData的属性值\n     * @param name 属性名称\n     * @param type 值类型\n     * @param value 值\n     */\n    setShaderData(name: string, type: ShaderDataType, value: ShaderDataItem) {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        this.setShaderDataByIndex(uniformIndex, type, value);\n    }\n\n    /**\n     * 获得ShaderData的属性值\n     * @param name 属性名称\n     * @param type 值类型\n     * @returns \n     */\n    getShaderData(name: string, type: ShaderDataType): ShaderDataItem {\n        let uniformIndex = Shader3D.propertyNameToID(name);\n        return this.getShaderDataByIndex(uniformIndex, type);\n    }\n\n    /**\n     * 获得ShaderData的属性值\n     * @param uniformIndex 属性索引\n     * @param type 值类型\n     * @returns \n     */\n    getShaderDataByIndex(uniformIndex: number, type: ShaderDataType): ShaderDataItem {\n        return this._shaderValues.getShaderData(uniformIndex, type);\n    }\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        var destBaseMaterial: Material = (<Material>destObject);\n        destBaseMaterial.name = this.name;\n        destBaseMaterial.renderQueue = this.renderQueue;\n        destBaseMaterial.setShaderName(this._shader._name);\n        this._shaderValues.cloneTo(destBaseMaterial._shaderValues);\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: Material = new Material();\n        this.cloneTo(dest);\n        return dest;\n    }\n\n    //--------------------------------------------兼容-------------------------------------------------\n    /**\n     * 设置属性值\n     * @deprecated\n     * @param name \n     * @param value \n     */\n    setShaderPropertyValue(name: string, value: any) {\n        let propertyID = Shader3D.propertyNameToID(name);\n        this.shaderData.setValueData(propertyID, value);\n    }\n\n    /**\n     * 获取属性值\n     * @deprecated\n     * @param name \n     */\n    getShaderPropertyValue(name: string): any {\n        return this.shaderData.getValueData(Shader3D.propertyNameToID(name));\n    }\n\n    get _defineDatas(): DefineDatas {\n        return this._shaderValues._defineDatas;\n    }\n\n    /**\n     * override it\n     */\n    oldparseEndEvent() {\n        //TODO\n    }\n}\n\n\n","import { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Material } from \"./Material\";\n\n\n/**\n * <code>BlinnPhongMaterial</code> 类用于实现Blinn-Phong材质。\n */\nexport class BlinnPhongMaterial extends Material {\n\t/**高光强度数据源_漫反射贴图的Alpha通道。*/\n\tstatic SPECULARSOURCE_DIFFUSEMAPALPHA: number;\n\t/**高光强度数据源_高光贴图的RGB通道。*/\n\tstatic SPECULARSOURCE_SPECULARMAP: number;\n\n\t/**渲染状态_不透明。*/\n\tstatic RENDERMODE_OPAQUE: number = 0;\n\t/**渲染状态_阿尔法测试。*/\n\tstatic RENDERMODE_CUTOUT: number = 1;\n\t/**渲染状态_透明混合。*/\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\n\n\t/**@internal */\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_NORMALMAP: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SPECULARMAP: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ENABLETRANSMISSION: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_THICKNESSMAP: ShaderDefine;\n\t/**@internal */\n\tstatic ALBEDOTEXTURE: number;\n\t/**@internal */\n\tstatic NORMALTEXTURE: number;\n\t/**@internal */\n\tstatic SPECULARTEXTURE: number;\n\t/**@internal */\n\tstatic ALBEDOCOLOR: number;\n\t/**@internal */\n\tstatic MATERIALSPECULAR: number;\n\t/**@internal */\n\tstatic SHININESS: number;\n\t/**@internal */\n\tstatic TILINGOFFSET: number;\n\t/**@internal */\n\tstatic TRANSMISSIONRATE: number;\n\t/**@internal */\n\tstatic IBACKDIFFUSE: number;\n\t/**@internal */\n\tstatic IBACKSCALE: number;\n\t/**@internal */\n\tstatic THINKNESSTEXTURE: number;\n\t/**@internal */\n\tstatic TRANSMISSIONCOLOR: number;\n\t/**@internal */\n\tstatic AlbedoIntensity: number;\n\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: BlinnPhongMaterial;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __initDefine__(): void {\n\t\tBlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\n\t\tBlinnPhongMaterial.SHADERDEFINE_NORMALMAP = Shader3D.getDefineByName(\"NORMALMAP\");\n\t\tBlinnPhongMaterial.SHADERDEFINE_SPECULARMAP = Shader3D.getDefineByName(\"SPECULARMAP\");\n\t\tBlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\n\t\tBlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION = Shader3D.getDefineByName(\"ENABLETRANSMISSION\");\n\t\tBlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP = Shader3D.getDefineByName(\"THICKNESSMAP\");\n\n\t\tBlinnPhongMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_DiffuseTexture\");\n\t\tBlinnPhongMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\n\t\tBlinnPhongMaterial.SPECULARTEXTURE = Shader3D.propertyNameToID(\"u_SpecularTexture\");\n\t\tBlinnPhongMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_DiffuseColor\");\n\t\tBlinnPhongMaterial.MATERIALSPECULAR = Shader3D.propertyNameToID(\"u_MaterialSpecular\");\n\t\tBlinnPhongMaterial.SHININESS = Shader3D.propertyNameToID(\"u_Shininess\");\n\t\tBlinnPhongMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\n\t\tBlinnPhongMaterial.TRANSMISSIONRATE = Shader3D.propertyNameToID(\"u_TransmissionRate\");\n\t\tBlinnPhongMaterial.IBACKDIFFUSE = Shader3D.propertyNameToID(\"u_BackDiffuse\");\n\t\tBlinnPhongMaterial.IBACKSCALE = Shader3D.propertyNameToID(\"u_BackScale\");\n\t\tBlinnPhongMaterial.THINKNESSTEXTURE = Shader3D.propertyNameToID(\"u_ThinknessTexture\");\n\t\tBlinnPhongMaterial.TRANSMISSIONCOLOR = Shader3D.propertyNameToID(\"u_TransmissionColor\");\n\t\tBlinnPhongMaterial.AlbedoIntensity = Shader3D.propertyNameToID(\"u_AlbedoIntensity\");\n\t}\n\n\t/**\n\t * 设置渲染模式。\n\t * @param 渲染模式\n\t */\n\tset renderMode(value: number) {\n\t\tswitch (value) {\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_OPAQUE:\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\n\t\t\t\tthis.depthWrite = true;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\n\t\t\t\tbreak;\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_CUTOUT:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\n\t\t\t\tthis.alphaTest = true;\n\t\t\t\tthis.depthWrite = true;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\n\t\t\t\tbreak;\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_TRANSPARENT:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Material:renderMode value error.\");\n\t\t}\n\t}\n\n\t/**\n\t * 是否支持顶点色。\n\t */\n\tget enableVertexColor(): boolean {\n\t\treturn this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n\t}\n\n\tset enableVertexColor(value: boolean) {\n\t\tif (value)\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n\t\telse\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n\t}\n\n\t/**\n\t * 纹理平铺和偏移。\n\t */\n\tget tilingOffset(): Vector4 {\n\t\treturn (<Vector4>this.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET));\n\t}\n\n\tset tilingOffset(value: Vector4) {\n\t\tif (value) {\n\t\t\tthis.setVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET, value);\n\t\t}\n\t\telse {\n\t\t\tthis.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\n\t\t}\n\t}\n\n\t/**\n\t * 反照率颜色。\n\t */\n\tget albedoColor(): Color {\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR);\n\t}\n\n\tset albedoColor(value: Color) {\n\t\tthis.setColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR, value);//修改值后必须调用此接口,否则NATIVE不生效\n\t}\n\n\t/**\n\t * 反照率强度。\n\t */\n\tget albedoIntensity(): number {\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.AlbedoIntensity);\n\t}\n\n\tset albedoIntensity(value: number) {\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.AlbedoIntensity, value);\n\t}\n\n\t/**\n\t * 高光颜色。\n\t */\n\tget specularColor(): Color {\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR);\n\t}\n\n\tset specularColor(value: Color) {\n\t\tthis.setColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR, value);\n\t}\n\n\t/**\n\t * 高光强度,范围为0到1。\n\t */\n\tget shininess(): number {\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.SHININESS);\n\t}\n\n\tset shininess(value: number) {\n\t\tvalue = Math.max(0.0, Math.min(1.0, value));\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.SHININESS, value);\n\t}\n\n\t/**\n\t * 反照率贴图。\n\t */\n\tget albedoTexture(): BaseTexture {\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE);\n\t}\n\n\tset albedoTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\n\t\telse\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE, value);\n\t}\n\n\t/**\n\t * 法线贴图。\n\t */\n\tget normalTexture(): BaseTexture {\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE);\n\t}\n\n\tset normalTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t{\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\n\t\t\tthis.addDefine(Shader3D.getDefineByName(\"NEEDTBN\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\n\t\t\tthis.removeDefine(Shader3D.getDefineByName(\"NEEDTBN\"));\n\t\t}\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE, value);\n\t}\n\n\t/**\n\t * 高光贴图。\n\t */\n\tget specularTexture(): BaseTexture {\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE);\n\t}\n\n\tset specularTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\n\t\telse\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\n\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE, value);\n\t}\n\t/**\n\t * 是否支持透光色。\n\t */\n\tget enableTransmission(): boolean {\n\t\treturn this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\n\t}\n\n\tset enableTransmission(value: boolean) {\n\t\tif (value)\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\n\t\telse\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\n\t}\n\n\t/**\n\t * 透光率，会影响漫反射以及透光强度\n\t */\n\tget transmissionRata(): number {\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE);\n\t}\n\n\tset transmissionRata(value: number) {\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE, value);\n\t}\n\n\t/**\n\t * 透射影响范围指数\n\t */\n\tget backDiffuse(): number {\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE);\n\t}\n\tset backDiffuse(value: number) {\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE, Math.max(value, 1.0));\n\t}\n\t/**\n\t * 透射光强度\n\t */\n\tget backScale(): number {\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.IBACKSCALE);\n\t}\n\tset backScale(value: number) {\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.IBACKSCALE, value);\n\t}\n\n\t/**\n\t * 厚度贴图，会影响透视光，越厚，透射光越弱\n\t */\n\tget thinknessTexture(): BaseTexture {\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE);\n\t}\n\tset thinknessTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP);\n\t\telse\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP);\n\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE, value);\n\t}\n\n\t/**\n\t * 透光颜色。模拟透光物质内部颜色吸收率\n\t */\n\tget transmissionColor(): Color {\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR);\n\t}\n\tset transmissionColor(value: Color) {\n\t\tthis.setColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR, value);\n\t}\n\n\t/**\n\t * 请使用transmissionRata\n\t * @deprecated\n\t */\n\tget transmissionRate(): number {\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE);\n\t}\n\n\t/**\n\t * 创建一个 <code>BlinnPhongMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"BLINNPHONG\");\n\t\tthis.renderMode = BlinnPhongMaterial.RENDERMODE_OPAQUE;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: BlinnPhongMaterial = new BlinnPhongMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tsuper.cloneTo(destObject);\n\t\tvar destMaterial: BlinnPhongMaterial = (<BlinnPhongMaterial>destObject);\n\t\tdestMaterial.albedoIntensity = this.albedoIntensity;\n\t\tdestMaterial.enableVertexColor = this.enableVertexColor;\n\t\tthis.albedoColor.cloneTo(destMaterial.albedoColor);\n\t}\n\n\n}\n\n\n","import { RenderElement } from \"./RenderElement\";\nimport { Event } from \"../../../events/Event\";\nimport { SubMesh } from \"../../resource/models/SubMesh\";\nimport { GeometryElement } from \"../GeometryElement\";\nimport { Transform3D } from \"../Transform3D\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\n\n\n/**\n * @internal\n */\nexport class SubMeshRenderElement extends RenderElement {\n\n\t/** @internal */\n\tprivate _dynamicWorldPositionNormalNeedUpdate: boolean;\n\n\t/** @internal */\n\tstaticBatchIndexStart: number;\n\t/** @internal */\n\tstaticBatchIndexEnd: number;\n\t/** @internal */\n\tstaticBatchElementList: SingletonList<SubMeshRenderElement>;\n\n\t/** @internal */\n\tinstanceSubMesh: SubMesh;\n\t/** @internal */\n\tinstanceBatchElementList: SingletonList<SubMeshRenderElement>;\n\n\t/** @internal */\n\tvertexBatchElementList: SingletonList<SubMeshRenderElement>;\n\t/** @internal */\n\tvertexBatchVertexDeclaration: VertexDeclaration;\n\n\n\t/**\n\t * 创建一个 <code>SubMeshRenderElement</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\n\t\tthis._canBatch = true;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _onWorldMatrixChanged(): void {\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tsetTransform(transform: Transform3D): void {\n\t\tif (this.transform !== transform) {\n\t\t\t(this.transform) && (this.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\n\t\t\t(transform) && (transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\n\t\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\n\t\t\tthis.transform = transform;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tsetGeometry(geometry: GeometryElement): void {\n\t\tif (this._geometry !== geometry) {\n\t\t\tthis._geometry = geometry;\n\t\t\tthis._renderElementOBJ._geometry = geometry._geometryElementOBj;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tdestroy(): void {\n\t\tif(!this._renderElementOBJ)return;\n\t\t(this.transform) && this.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged);\n\t\tsuper.destroy();\n\t\tthis.staticBatch = null;\n\t\tthis.instanceSubMesh = null;\n\t\tthis.staticBatchElementList && this.staticBatchElementList.destroy();\n\t\tthis.instanceBatchElementList && this.instanceBatchElementList.destroy();\n\t\tthis.vertexBatchElementList && this.vertexBatchElementList.destroy();\n\t\tthis.vertexBatchVertexDeclaration = null;\n\t}\n}\n\n\n","\nimport { Component } from \"../../components/Component\";\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\nimport { Mesh } from \"../resource/models/Mesh\";\nimport { MeshRenderer } from \"./MeshRenderer\";\n\n/**\n * <code>MeshFilter</code> 类用于创建网格过滤器。\n */\nexport class MeshFilter extends Component {\n    /** @internal */\n    static _meshVerticeDefine: Array<ShaderDefine> = [];\n\n    /** @internal */\n    private _sharedMesh: Mesh;\n\n    constructor() {\n        super();\n\n        this.runInEditor = true;\n    }\n\n    /**\n     * @internal\n     */\n    protected _onEnable(): void {\n        const render = this.owner.getComponent(MeshRenderer) as MeshRenderer;\n        render && render._enabled && render._onMeshChange(this._sharedMesh);\n    }\n\n    /**\n     * @internal\n     */\n    protected _onDisable(): void {\n        const render = this.owner.getComponent(MeshRenderer) as MeshRenderer;\n       // render && render._enabled && render._onMeshChange(null);\n    }\n\n    /**\n     * 共享网格。\n     */\n    get sharedMesh(): Mesh {\n        return this._sharedMesh;\n    }\n\n    set sharedMesh(value: Mesh) {\n        if (this._sharedMesh !== value) {\n            //meshReference\n            var lastValue: Mesh = this._sharedMesh;\n            if (lastValue) {\n                lastValue._removeReference();\n            }\n            if (value) {\n                value._addReference();\n            }\n            this._sharedMesh = value;\n\n            const render = this.owner.getComponent(MeshRenderer);\n            if (!render) {\n                return;\n            }\n            // var defineDatas: ShaderData = render._shaderValues;\n            // var lastValue: Mesh = this._sharedMesh;\n            // if (lastValue) {\n            // \tthis._getMeshDefine(lastValue, MeshFilter._meshVerticeDefine);\n            // \tfor (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\n            // \t\tdefineDatas.removeDefine(MeshFilter._meshVerticeDefine[i]);\n            // }\n\n            // if (value) {\n            // \tthis._getMeshDefine(value, MeshFilter._meshVerticeDefine);\n            // \tfor (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\n            // \t\tdefineDatas.addDefine(MeshFilter._meshVerticeDefine[i]);\n            // }\n\n            render._onMeshChange(value);\n            this._sharedMesh = value;\n        }\n    }\n\n    // /**\n    //  * @internal\n    //  * @param mesh \n    //  * @param out \n    //  */\n    // private _getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\n    // \tout.length = 0;\n    // \tvar define: number;\n    // \tfor (var i: number = 0, n: number = mesh._subMeshes.length; i < n; i++) {\n    // \t\tvar subMesh: SubMesh = (<SubMesh>mesh.getSubMesh(i));\n    // \t\tvar vertexElements: any[] = subMesh._vertexBuffer._vertexDeclaration._vertexElements;\n    // \t\tfor (var j: number = 0, m: number = vertexElements.length; j < m; j++) {\n    // \t\t\tvar vertexElement: VertexElement = vertexElements[j];\n    // \t\t\tvar name: number = vertexElement._elementUsage;\n    // \t\t\tswitch (name) {\n    // \t\t\t\tcase VertexMesh.MESH_COLOR0:\n    // \t\t\t\t\tout.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\n    // \t\t\t\t\tbreak\n    // \t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE0:\n    // \t\t\t\t\tout.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\n    // \t\t\t\t\tbreak;\n    // \t\t\t\tcase VertexMesh.MESH_TEXTURECOORDINATE1:\n    // \t\t\t\t\tout.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\n    // \t\t\t\t\tbreak;\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // \treturn define;\n    // }\n\n    protected _onDestroy() {\n        (this._sharedMesh) && (this._sharedMesh._removeReference(), this._sharedMesh = null);\n    }\n\n    /**\n     * @internal\n     * @param dest \n     */\n    _cloneTo(dest: Component): void {\n        let meshfilter = dest as MeshFilter;\n        meshfilter.sharedMesh = this.sharedMesh;\n        super._cloneTo(dest);\n    }\n\n}\n\n\n","import { Mesh } from \"../resource/models/Mesh\"\nimport { Material } from \"./material/Material\"\nimport { BlinnPhongMaterial } from \"./material/BlinnPhongMaterial\"\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\"\nimport { BaseRender } from \"./render/BaseRender\"\nimport { RenderContext3D } from \"./render/RenderContext3D\"\nimport { RenderElement } from \"./render/RenderElement\"\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\"\nimport { RenderableSprite3D } from \"./RenderableSprite3D\"\nimport { Sprite3D } from \"./Sprite3D\"\nimport { Transform3D } from \"./Transform3D\"\nimport { MeshFilter } from \"./MeshFilter\"\nimport { Component } from \"../../components/Component\"\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\"\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\"\nimport { SubMesh } from \"../resource/models/SubMesh\"\nimport { ShaderData, ShaderDataType } from \"../../RenderEngine/RenderShader/ShaderData\"\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\nimport { VertexElement } from \"../../renders/VertexElement\"\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\n\n/**\n * <code>MeshRenderer</code> 类用于网格渲染器。\n */\nexport class MeshRenderer extends BaseRender {\n    /** @internal */\n    protected _revertStaticBatchDefineUV1: boolean = false;\n    /** @internal */\n    protected _projectionViewWorldMatrix: Matrix4x4;\n    /** @internal */\n    protected _mesh: Mesh;\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0 = Shader3D.getDefineByName(\"UV\");\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR = Shader3D.getDefineByName(\"COLOR\");\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1 = Shader3D.getDefineByName(\"UV1\");\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT = Shader3D.getDefineByName(\"TANGENT\");\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE = Shader3D.getDefineByName(\"GPU_INSTANCE\");\n    }\n\n\n    /**\n     * 创建一个新的 <code>MeshRender</code> 实例。\n     */\n    constructor() {\n        super();\n        this._projectionViewWorldMatrix = new Matrix4x4();\n    }\n\n    /**\n     * @internal\n     */\n    _createRenderElement(): RenderElement {\n        return new SubMeshRenderElement();\n    }\n\n    /**\n     * @internal\n     */\n    protected _onEnable(): void {\n        super._onEnable();\n        const filter = this.owner.getComponent(MeshFilter) as MeshFilter;\n        if (filter) filter._enabled && this._onMeshChange(filter.sharedMesh);\n    }\n\n    /**\n     * @internal\n     * @param mesh \n     * @param out \n     */\n    protected _getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\n        out.length = 0;\n        var define: number;\n        for (var i: number = 0, n: number = mesh._subMeshes.length; i < n; i++) {\n            var subMesh: SubMesh = (<SubMesh>mesh.getSubMesh(i));\n            var vertexElements: any[] = subMesh._vertexBuffer._vertexDeclaration._vertexElements;\n            for (var j: number = 0, m: number = vertexElements.length; j < m; j++) {\n                var vertexElement: VertexElement = vertexElements[j];\n                var name: number = vertexElement._elementUsage;\n                switch (name) {\n                    case VertexMesh.MESH_COLOR0:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\n                        break\n                    case VertexMesh.MESH_TEXTURECOORDINATE0:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\n                        break;\n                    case VertexMesh.MESH_TEXTURECOORDINATE1:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\n                        break;\n                    case VertexMesh.MESH_TANGENT0:\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\n                        break;\n                }\n            }\n        }\n        return define;\n    }\n\n    protected _changeVertexDefine(mesh: Mesh) {\n        var defineDatas: ShaderData = this._shaderValues;\n        var lastValue: Mesh = this._mesh;\n        if (lastValue) {\n            this._getMeshDefine(lastValue, MeshFilter._meshVerticeDefine);\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\n                defineDatas.removeDefine(MeshFilter._meshVerticeDefine[i]);\n        }\n        if (mesh) {\n            this._getMeshDefine(mesh, MeshFilter._meshVerticeDefine);\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\n                defineDatas.addDefine(MeshFilter._meshVerticeDefine[i]);\n        }\n\n    }\n\n    /**\n     * @internal\n     */\n    _onMeshChange(mesh: Mesh): void {\n        if (mesh && this._mesh != mesh) {\n            this._changeVertexDefine(mesh);\n            this._mesh = mesh;\n            this.geometryBounds = mesh.bounds;\n            var count: number = mesh.subMeshCount;\n            this._renderElements.length = count;\n            for (var i: number = 0; i < count; i++) {\n                var renderElement: RenderElement = this._renderElements[i];\n                if (!renderElement) {\n                    var material: Material = this.sharedMaterials[i];\n                    renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\n                    this.owner && renderElement.setTransform((this.owner as Sprite3D)._transform);\n                    renderElement.render = this;\n                    renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\n                }\n                renderElement.setGeometry(mesh.getSubMesh(i));\n            }\n\n        } else if (!mesh) {\n            this._renderElements.forEach\n            this._renderElements.forEach(element => {\n                element.destroy();\n            });\n            this._renderElements.length = 0;\n            this._mesh = null;\n            this._changeVertexDefine(null);\n        }\n        this.boundsChange = true;\n        // if (this._octreeNode && this._indexInOctreeMotionList === -1) {\n        // \tthis._octreeNode.getManagerNode().addMotionObject(this);\n        // }\n    }\n\n\n    /**\n     * @internal\n     * 开启多材质 多element模式\n     */\n    updateMulPassRender(): void {\n        const filter = this.owner.getComponent(MeshFilter);\n        if (!filter)\n            return;\n        const mesh = filter.sharedMesh;\n        if (mesh) {\n            var subCount: number = mesh.subMeshCount;\n            var matCount = this._sharedMaterials.length;\n            if (subCount > matCount) {\n                let count = subCount\n                this._renderElements.length = count;\n                for (var i: number = 0; i < count; i++) {\n                    var renderElement: RenderElement = this._renderElements[i];\n                    if (!renderElement) {\n                        var material: Material = this.sharedMaterials[i];\n                        renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\n                        renderElement.setTransform((this.owner as Sprite3D)._transform);\n                        renderElement.render = this;\n                        renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\n                    }\n                    renderElement.setGeometry(mesh.getSubMesh(i));\n                }\n            } else {\n                let count = matCount;\n                this._renderElements.length = count;\n                for (var i: number = 0; i < count; i++) {\n                    var renderElement: RenderElement = this._renderElements[i];\n                    if (!renderElement) {\n                        var material: Material = this.sharedMaterials[i];\n                        renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\n                        renderElement.setTransform((this.owner as Sprite3D)._transform);\n                        renderElement.render = this;\n                        renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\n                    }\n                }\n                renderElement.setGeometry(mesh.getSubMesh(count % subCount));\n            }\n\n        } else {\n            this._renderElements.length = 0;\n        }\n        this.boundsChange = true;\n        // if (this._octreeNode && this._indexInOctreeMotionList === -1) {\n        // \tthis._octreeNode.getManagerNode().addMotionObject(this);\n        // }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    protected _calculateBoundingBox(): void {\n        var sharedMesh: Mesh = this._mesh;\n        if (sharedMesh) {\n            var worldMat: Matrix4x4 = this._transform.worldMatrix;\n            sharedMesh.bounds._tranform(worldMat, this._bounds);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\n        this._applyLightMapParams();\n        this._applyReflection();\n        var element: SubMeshRenderElement = <SubMeshRenderElement>context.renderElement;\n        this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, transform ? transform.worldMatrix : this._transform.worldMatrix);\n        return;\n        switch (0) {\n            case RenderElement.RENDERTYPE_NORMAL:\n                transform && this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, transform.worldMatrix);\n                break;\n            case RenderElement.RENDERTYPE_STATICBATCH:\n                if (transform)\n                    this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, transform.worldMatrix);\n                else\n                    this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, Matrix4x4.DEFAULT);\n                if (!this._shaderValues.hasDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1)) {\n                    this._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\n                    this._revertStaticBatchDefineUV1 = true;\n                }\n                else {\n                    this._revertStaticBatchDefineUV1 = false;\n                }\n                this._setShaderValue(RenderableSprite3D.LIGHTMAPSCALEOFFSET, ShaderDataType.Vector4, BaseRender._defaultLightmapScaleOffset);\n                this._subUniformBufferData && (this._subUniformBufferData._needUpdate = true);//静态合并的时候需要调整lightmapoffest\n                break;\n            case RenderElement.RENDERTYPE_VERTEXBATCH:\n                this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, Matrix4x4.DEFAULT);\n                break;\n        }\n    }\n    /**\n     * @internal\n     * @override\n     */\n    _revertBatchRenderUpdate(context: RenderContext3D): void {\n        var element: SubMeshRenderElement = (<SubMeshRenderElement>context.renderElement);\n        switch (element.renderType) {\n            case RenderElement.RENDERTYPE_STATICBATCH:\n                if (this._revertStaticBatchDefineUV1)\n                    this._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\n                this._shaderValues.setVector(RenderableSprite3D.LIGHTMAPSCALEOFFSET, this.lightmapScaleOffset);\n                break;\n            case RenderElement.RENDERTYPE_INSTANCEBATCH:\n                this._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\n                break;\n        }\n    }\n\n    protected _onDestroy() {\n        super._onDestroy();\n    }\n\n    /**\n     * @override\n     * @param dest \n     */\n    _cloneTo(dest: Component): void {\n        super._cloneTo(dest);\n    }\n}","import { Mesh } from \"../../../resource/models/Mesh\";\nimport { Material } from \"../../material/Material\";\nimport { Command } from \"./Command\";\nimport { CommandBuffer } from \"./CommandBuffer\";\nimport { MeshRenderer } from \"../../../core/MeshRenderer\";\nimport { RenderElement } from \"../RenderElement\";\nimport { Transform3D } from \"../../Transform3D\";\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { Camera } from \"../../Camera\";\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\n/**\n * @internal\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\n */\nexport class DrawMeshCMD extends Command {\n\n    /**@internal */\n    private static _pool: DrawMeshCMD[] = [];\n\n    /**\n     * @internal\n     */\n    static create(mesh: Mesh, matrix: Matrix4x4, material: Material, subMeshIndex: number, subShaderIndex: number, commandBuffer: CommandBuffer): DrawMeshCMD {\n        var cmd: DrawMeshCMD;\n        cmd = DrawMeshCMD._pool.length > 0 ? DrawMeshCMD._pool.pop() : new DrawMeshCMD();\n\n        cmd._matrix = matrix;\n        cmd._transform.worldMatrix = cmd._matrix;\n        cmd.material = material;\n        cmd._subMeshIndex = subMeshIndex;\n        cmd._subShaderIndex = subShaderIndex;\n        cmd.mesh = mesh;\n        cmd._commandBuffer = commandBuffer;\n        return cmd;\n    }\n\n    /**@internal */\n    private _material: Material;\n\n    /**@internal */\n    private _matrix: Matrix4x4;\n\n    /**@internal */\n    private _subMeshIndex: number;\n\n    /**@internal */\n    private _subShaderIndex: number;\n\n    /**@internal */\n    private _mesh: Mesh;\n\n    /**@internal */\n    _renderElemnts: RenderElement[];\n\n    /**@internal */\n    _meshRender: MeshRenderer;\n\n    /**@internal */\n    _transform: Transform3D;\n\n    /**\n     * \n     */\n    constructor() {\n        super();\n        this._transform = LayaGL.renderOBJCreate.createTransform(null);\n        this._meshRender = new MeshRenderer();\n    }\n\n    set material(value: Material) {\n        this._material && this._material._removeReference(1);\n        this._material = value;\n        this._material && this._material._addReference(1);\n    }\n\n    set mesh(value: Mesh) {\n        if (this._mesh == value)\n            return;\n        this._mesh = value;\n        this._meshRender._onMeshChange(this._mesh)\n        this._renderElemnts = this._meshRender._renderElements;\n        this._renderElemnts.forEach(element => {\n            element.material = this._material;\n            element.setTransform(this._transform);\n            element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\n            element._subShaderIndex = this._subShaderIndex;\n        });\n    }\n    /**\n     * @inheritDoc\n     * @override\n     */\n    run(): void {\n        var context = RenderContext3D._instance;\n        context._contextOBJ.applyContext(Camera._updateMark);\n        let submeshs = this._mesh._subMeshes\n        if (this._subMeshIndex == -1) {\n            for (let i = 0, n = submeshs.length; i < n; i++) {\n                let element = this._renderElemnts[i];\n                context.drawRenderElement(element);\n            }\n        } else {\n            let element = this._renderElemnts[this._subMeshIndex];\n            context.drawRenderElement(element);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    recover(): void {\n        DrawMeshCMD._pool.push(this);\n        super.recover();\n        this.material && (this.material = null);\n        this.mesh && (this.mesh = null);\n\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    destroy() {\n        super.destroy();\n        this._renderElemnts.forEach(element => {\n            element.destroy();\n        });\n        this._material && this._material._removeReference(1);\n        this._material = null;\n        this._renderElemnts = null;\n        this._transform = null;\n        this._material = null;\n        this._matrix = null\n    }\n}","import { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { Color } from \"../../../../maths/Color\";\nimport { RenderClearFlag } from \"../../../../RenderEngine/RenderEnum/RenderClearFlag\";\nimport { Command } from \"./Command\";\nimport { CommandBuffer } from \"./CommandBuffer\";\n\n\n/**\n * @internal\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\n */\nexport class ClearRenderTextureCMD extends Command {\n\t/**@internal */\n\tprivate static _pool: any[] = [];\n\t/**@internal */\n\tprivate _clearColor: boolean = false;\n\t/**@internal */\n\tprivate _clearDepth: boolean = false;\n\t/**@internal */\n\tprivate _backgroundColor: Color = new Color();\n\t/**@internal */\n\tprivate _linearbackgroundColor: Color = new Color();\n\t/**@internal */\n\tprivate _depth: number = 1;\n\t/**\n\t * @internal\n\t */\n\tstatic create(clearColor: boolean, clearDepth: boolean, backgroundColor: Color, depth: number = 1, commandBuffer: CommandBuffer): ClearRenderTextureCMD {\n\t\tvar cmd: ClearRenderTextureCMD;\n\t\tcmd = ClearRenderTextureCMD._pool.length > 0 ? ClearRenderTextureCMD._pool.pop() : new ClearRenderTextureCMD();\n\t\tcmd._clearColor = clearColor;\n\t\tcmd._clearDepth = clearDepth;\n\t\tbackgroundColor.cloneTo(cmd._backgroundColor);\n\t\tbackgroundColor.toLinear(cmd._linearbackgroundColor);\n\t\tcmd._depth = depth;\n\t\tcmd._commandBuffer = commandBuffer;\n\t\treturn cmd;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trun(): void {\n\t\tvar flag: number;\n\t\t// var backgroundColor: Color = this._backgroundColor;\n\t\tlet linearBgColor = this._linearbackgroundColor;\n\t\tif (this._clearDepth && this._clearColor) {\n\t\t\tLayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Color | RenderClearFlag.Depth, linearBgColor, this._depth);\n\t\t} else if (this._clearDepth) {\n\t\t\tLayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, linearBgColor, this._depth);\n\t\t} else if (this._clearColor) {\n\t\t\tLayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Color, linearBgColor, this._depth);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trecover(): void {\n\n\t}\n\n}\n\n\n","import { ILaya3D } from \"../../../../../ILaya3D\";\nimport { Camera } from \"../../Camera\";\nimport { Material } from \"../../material/Material\";\nimport { BaseRender } from \"../BaseRender\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { RenderElement } from \"../RenderElement\";\nimport { Command } from \"./Command\";\nimport { CommandBuffer } from \"./CommandBuffer\";\n\nexport class DrawRenderCMD extends Command {\n    /**@internal */\n    private static _pool: any[] = [];\n\n    /**\n     * @internal\n     */\n    static create(render: BaseRender, material: Material, subShaderIndex: number, commandBuffer: CommandBuffer): DrawRenderCMD {\n        var cmd: DrawRenderCMD;\n        cmd = DrawRenderCMD._pool.length > 0 ? DrawRenderCMD._pool.pop() : new DrawRenderCMD();\n        cmd._render = render;\n        cmd.material = material;\n        cmd._subShaderIndex = subShaderIndex;\n        cmd._commandBuffer = commandBuffer;\n        return cmd;\n    }\n\n\n\n    /**@internal */\n    private _material: Material;\n    /**@internal */\n    private _render: BaseRender;\n    /**@internal */\n    private _subShaderIndex: number;\n\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * @internal\n     */\n    private _elementRender(renderElement: RenderElement, context: RenderContext3D): void {\n        renderElement.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);//TODO\n        renderElement.material = this._material;\n        context.drawRenderElement(renderElement);\n    }\n\n    set material(value: Material) {\n        this._material && this._material._removeReference(1);\n        this._material = value;\n        this._material && this._material._addReference(1);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    run(): void {\n        if (!this._material)\n            throw \"This render command material cannot be empty\";\n        this.setContext(this._commandBuffer._context);\n        var context = this._context;\n        context._contextOBJ.applyContext(Camera._updateMark);\n        var renderElements = this._render._renderElements;\n        for (var i: number = 0, n = renderElements.length; i < n; i++) {\n            var renderelement = renderElements[i];\n            //change Material\n            let mat = renderelement.material;\n            this._elementRender(renderelement, context);\n            //Recover Material\n            renderelement.material = mat;\n        }\n    }\n\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    recover(): void {\n        DrawRenderCMD._pool.push(this);\n        super.recover();\n        this._material && this._material._removeReference(1);\n        this._material = null;\n    }\n\n    destroy(): void {\n        super.destroy();\n        this._material && this._material._removeReference(1);\n        this._material = null;\n    }\n\n}","import { Command } from \"./Command\";\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\nimport { CommandBuffer } from \"./CommandBuffer\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { ShaderDataItem, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { Color } from \"../../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\n\n/**\n * @internal\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\n */\nexport class SetGlobalShaderDataCMD extends Command {\n\t/**@internal */\n\tprivate static _pool: any[] = [];\n\t/**@internal */\n\tprivate _nameID: number = 0;\n\t/**@internal */\n\tprivate _value: ShaderDataItem = null;\n\t/**@internal */\n\tprivate _dataType:number = -1;\n\n\t/**\n\t * @internal\n\t */\n\tstatic create(nameID: number, value:any,shaderDataType:ShaderDataType,commandBuffer:CommandBuffer): SetGlobalShaderDataCMD {\n\t\tvar cmd: SetGlobalShaderDataCMD;\n\t\tcmd = SetGlobalShaderDataCMD._pool.length > 0 ? SetGlobalShaderDataCMD._pool.pop() : new SetGlobalShaderDataCMD();\n\t\tcmd._nameID = nameID;\n\t\tcmd._value = value;\n\t\tcmd._dataType = shaderDataType;\n\t\tcmd._commandBuffer = commandBuffer;\n\t\treturn cmd;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trun(): void {\n\t\t//var shaderData:ShaderData = (this._commandBuffer._camera.scene as Scene3D)._shaderValues;\n\t\tlet context = RenderContext3D._instance;\n\t\tlet shaderData = context._contextOBJ.globalShaderData;\n\t\tif(!shaderData)\n\t\tshaderData = context._contextOBJ.globalShaderData = LayaGL.renderOBJCreate.createShaderData(null);\n\t\tswitch(this._dataType){\n\t\t\tcase ShaderDataType.Int:\n\t\t\t\tshaderData.setInt(this._nameID,this._value as number);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Float:\n\t\t\t\tshaderData.setNumber(this._nameID,this._value as number);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Bool:\n\t\t\t\tshaderData.setBool(this._nameID,this._value as boolean);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Matrix4x4:\n\t\t\t\tshaderData.setMatrix4x4(this._nameID,this._value as Matrix4x4);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Texture2D:\n\t\t\t\tshaderData.setTexture(this._nameID,this._value as BaseTexture);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Vector4:\n\t\t\t\tshaderData.setVector(this._nameID,this._value as Vector4);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Vector2:\n\t\t\t\tshaderData.setVector2(this._nameID,this._value as Vector2);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Vector3:\n\t\t\t\tshaderData.setVector3(this._nameID,this._value as Vector3);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Buffer:\n\t\t\t\tshaderData.setBuffer(this._nameID,this._value as Float32Array);\n\t\t\t\tbreak;\n\t\t\tcase ShaderDataType.Color:\n\t\t\t\tshaderData.setColor(this._nameID,this._value as Color);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"no type shaderValue on this CommendBuffer\";\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trecover(): void {\n\t\tSetGlobalShaderDataCMD._pool.push(this);\n\t\tthis._nameID = 0;\n\t\tthis._value = null;\n\t\tthis._dataType = -1;\n\t}\n\n}\n\n\n","import { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { GeometryElement } from \"../core/GeometryElement\";\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\nimport { SubMesh } from \"../resource/models/SubMesh\";\n\n/**\n * @internal\n */\nexport class MeshInstanceGeometry extends GeometryElement {\n    private _subMesh:SubMesh;\n    constructor(subMesh: SubMesh) {\n        super(subMesh?subMesh._geometryElementOBj.mode:MeshTopology.Triangles, DrawType.DrawElementInstance);\n        this._subMesh = subMesh;\n        if(subMesh)\n        this.indexFormat = subMesh._mesh.indexFormat;\n    }\n\n    set subMesh(value:SubMesh){\n        this._subMesh = value;\n        if(value)\n        this.indexFormat = value._mesh.indexFormat;\n        this.mode = value._geometryElementOBj.mode;\n    }\n\n    get subMesh():SubMesh{\n        return this._subMesh\n    }\n\n    /**\n     * @internal\n     * UpdateGeometry Data\n     */\n    _updateRenderParams(state: RenderContext3D): void {\n        this.clearRenderParams();\n\t\tthis.setDrawElemenParams(this._subMesh.indexCount, this._subMesh._indexStart * 2);\n    }\n\n}","import { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { BufferUsage } from \"../../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { VertexBuffer } from \"../../../../RenderEngine/VertexBuffer\";\nimport { VertexBuffer3D } from \"../../../graphics/VertexBuffer3D\";\nimport { Mesh } from \"../../../resource/models/Mesh\";\nimport { Material } from \"../../material/Material\";\nimport { Transform3D } from \"../../Transform3D\";\nimport { Command } from \"./Command\";\nimport { CommandBuffer } from \"./CommandBuffer\";\nimport { MaterialInstancePropertyBlock } from \"./MaterialInstancePropertyBlock\";\nimport { RenderElement } from \"../RenderElement\";\nimport { MeshInstanceGeometry } from \"../../../graphics/MeshInstanceGeometry\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { BaseRender } from \"../../../core/render/BaseRender\";\nimport { MeshSprite3DShaderDeclaration } from \"../../MeshSprite3DShaderDeclaration\";\nimport { Camera } from \"../../Camera\";\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\nimport { BufferState } from \"../../../../webgl/utils/BufferState\";\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\n\n\nexport class DrawMeshInstancedCMD extends Command {\n    /**@internal */\n    private static _pool: DrawMeshInstancedCMD[] = [];\n    /**设置最大DrawInstance数 */\n    static maxInstanceCount = 1024;\n\n    /**\n     * 创建一个命令流\n     * @internal\n     */\n    static create(mesh: Mesh, subMeshIndex: number, matrixs: Matrix4x4[], material: Material, subShaderIndex: number, instanceProperty: MaterialInstancePropertyBlock, drawnums: number, commandBuffer: CommandBuffer): DrawMeshInstancedCMD {\n        var cmd: DrawMeshInstancedCMD;\n        if ((matrixs && matrixs.length > DrawMeshInstancedCMD.maxInstanceCount) || drawnums > DrawMeshInstancedCMD.maxInstanceCount) {\n            throw \"the number of renderings exceeds the maximum number of merges\";\n        }\n        cmd = DrawMeshInstancedCMD._pool.length > 0 ? DrawMeshInstancedCMD._pool.pop() : new DrawMeshInstancedCMD();\n\n\n        cmd._matrixs = matrixs;\n        cmd.material = material;\n        cmd._subMeshIndex = subMeshIndex;\n        cmd._subShaderIndex = subShaderIndex;\n        cmd._commandBuffer = commandBuffer;\n        cmd._instanceProperty = instanceProperty;\n        cmd._drawnums = drawnums;\n        cmd.mesh = mesh;\n        matrixs && cmd._updateWorldMatrixBuffer();\n        cmd._setInstanceBuffer();\n        cmd.setContext(RenderContext3D._instance);\n        return cmd;\n    }\n\n    /**@internal */\n    private _material: Material;\n    /**@internal */\n    private _matrixs: Matrix4x4[];\n    /**@internal */\n    private _subMeshIndex: number;\n    /**@internal */\n    private _subShaderIndex: number = 0;\n    /**@internal */\n    private _mesh: Mesh;\n    /**@internal */\n    private _instanceProperty: MaterialInstancePropertyBlock;\n    /** @internal */\n    private _instanceBufferState: BufferState;\n    /** @internal */\n    private _drawnums: number;\n    /**@internal 世界矩阵数据*/\n    private _instanceWorldMatrixData: Float32Array;\n    /**@internal 世界矩阵buffer*/\n    private _instanceWorldMatrixBuffer: VertexBuffer3D;\n    /**@internal */\n    private _instanceGeometryArray: MeshInstanceGeometry[];\n    /**@internal */\n    private _instanceRenderElementArray: RenderElement[];\n    /**@internal */\n    _byteCount: number;\n    /**@internal */\n    _transform: Transform3D;\n    /**@internal */\n    _instanceRenderElement: RenderElement;\n    /**@internal */\n    _render: BaseRender;\n\n\n    constructor() {\n        super();\n        this._transform = LayaGL.renderOBJCreate.createTransform(null);\n        this._instanceRenderElementArray = [];\n        this._instanceGeometryArray = [];\n        this._instanceWorldMatrixData = new Float32Array(DrawMeshInstancedCMD.maxInstanceCount * 16);\n        this._instanceWorldMatrixBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this._instanceWorldMatrixData.length * 4, BufferUsage.Dynamic, false);\n        this._instanceWorldMatrixBuffer.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\n        this._instanceWorldMatrixBuffer.instanceBuffer = true;\n        this._render = new BaseRender();\n        this._render._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\n\n    }\n\n    set material(value: Material) {\n        this._material && this._material._removeReference(1);\n        this._material = value;\n        this._material && this._material._addReference(1);\n    }\n\n    get bufferState() {\n        return this._instanceWorldMatrixBuffer;\n    }\n\n    set mesh(value: Mesh) {\n\n        if (this._mesh == value)\n            return;\n        BaseRender.changeVertexDefine(this._mesh, value, this._render._shaderValues);\n        this._mesh = value;\n        if (!this._mesh)\n            return;\n        let submeshs = this._mesh._subMeshes;\n        if (this._subMeshIndex == -1) {\n            for (let i = 0, n = submeshs.length; i < n; i++) {\n                let element = this._instanceRenderElementArray[i] = this._instanceRenderElementArray[i] ? this._instanceRenderElementArray[i] : new RenderElement();\n                let geometry = this._instanceGeometryArray[i] = this._instanceGeometryArray[i] ? this._instanceGeometryArray[i] : new MeshInstanceGeometry(submeshs[i]);\n                element.setGeometry(geometry);\n                element.transform = this._transform;\n                element.material = this._material;\n                element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\n                element._subShaderIndex = this._subShaderIndex;\n                element.render = this._render;\n\n                geometry.bufferState = this._instanceBufferState;\n                geometry.instanceCount = this._drawnums;\n            }\n        } else {\n            let element = this._instanceRenderElementArray[0] = this._instanceRenderElementArray[0] ? this._instanceRenderElementArray[0] : new RenderElement();\n            let geometry = this._instanceGeometryArray[0] = this._instanceGeometryArray[0] ? this._instanceGeometryArray[0] : new MeshInstanceGeometry(submeshs[this._subMeshIndex]);\n            element.setGeometry(geometry);\n            element.transform = this._transform;\n            element.material = this._material;\n            element.render = this._render;\n            element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\n            geometry.bufferState = this._instanceBufferState;\n            geometry.instanceCount = this._drawnums;\n        }\n\n    }\n\n    get mesh(): Mesh {\n        return this._mesh;\n    }\n\n    /**\n * @internal\n     */\n    private _setInstanceBuffer(): void {\n        if (!this._instanceBufferState) {\n            this._instanceBufferState = new BufferState();\n        }\n        let instanceBufferState = this._instanceBufferState;\n\n        let vertexArray: Array<VertexBuffer> = [];\n        let meshVertexBuffer = this._mesh._bufferState._vertexBuffers;\n        meshVertexBuffer.forEach(element => {\n            vertexArray.push(element);\n        });\n        vertexArray.push(this._instanceWorldMatrixBuffer);\n        let propertyMap = this._instanceProperty._propertyMap;\n        for (let i in propertyMap) {\n            vertexArray.push(propertyMap[i]._vertexBuffer);\n        }\n        instanceBufferState.applyState(vertexArray, this._mesh._indexBuffer);\n        this._instanceGeometryArray.forEach(element => {\n            element.bufferState = instanceBufferState;\n        });\n    }\n\n    /**\n     * 更新世界矩阵buffer\n     * @internal\n     */\n    private _updateWorldMatrixBuffer() {\n        let worldMatrixData: Float32Array = this._instanceWorldMatrixData;\n        let count: number = this._drawnums;\n        for (let i = 0; i < count; i++) {\n            worldMatrixData.set(this._matrixs[i].elements, i * 16);\n        }\n        let worldBuffer: VertexBuffer3D = this._instanceWorldMatrixBuffer;\n        worldBuffer.orphanStorage();\n        worldBuffer.setData(worldMatrixData.buffer, 0, 0, count * 64);\n    }\n\n    /**\n     * 重置DrawInstance的世界矩阵数组\n     * @param worldMatrixArray \n     */\n    setWorldMatrix(worldMatrixArray: Matrix4x4[]): void {\n        if (worldMatrixArray.length < this._drawnums)\n            throw \"worldMatrixArray length is less then drawnums\";\n        this._matrixs = worldMatrixArray;\n        this._matrixs && this._updateWorldMatrixBuffer();\n    }\n\n    /**\n     * 重置渲染个数\n     * @param drawNums \n     */\n    setDrawNums(drawNums: number): void {\n        if (this._matrixs && this._matrixs.length < drawNums)\n            throw \"worldMatrixArray length is less then drawnums\";\n        this._drawnums = drawNums;\n        let submeshs = this._mesh._subMeshes;\n        if (this._subMeshIndex == -1) {\n            for (let i = 0, n = submeshs.length; i < n; i++) {\n                let geometry = this._instanceGeometryArray[i] ? this._instanceGeometryArray[i] : new MeshInstanceGeometry(submeshs[i]);\n                geometry.instanceCount = this._drawnums;\n            }\n        } else {\n            let geometry = this._instanceGeometryArray[0] ? this._instanceGeometryArray[0] : new MeshInstanceGeometry(submeshs[0]);\n            geometry.instanceCount = this._drawnums;\n        }\n        this._matrixs && this._updateWorldMatrixBuffer();\n    }\n\n    run(): void {\n        //update blockData\n        let context = RenderContext3D._instance;\n        context._contextOBJ.applyContext(Camera._updateMark);\n        let propertyMap = this._instanceProperty._propertyMap;\n        for (let i in propertyMap) {\n            //更新自定义Instancebuffer\n            propertyMap[i].updateVertexBufferData(this._drawnums);\n        }\n\n        let submeshs = this.mesh._subMeshes\n        if (this._subMeshIndex == -1) {\n            for (let i = 0, n = submeshs.length; i < n; i++) {\n                let element = this._instanceRenderElementArray[i];\n                context.drawRenderElement(element);\n            }\n        } else {\n            let element = this._instanceRenderElementArray[0];\n            context.drawRenderElement(element);\n        }\n    }\n\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    recover(): void {\n        DrawMeshInstancedCMD._pool.push(this);\n        super.recover();\n        this._material && this._material._removeReference(1);\n        this._material = null;\n        this._instanceBufferState.destroy();\n        this._instanceBufferState = null;\n        delete this._instanceRenderElementArray;\n        this._instanceRenderElementArray = [];\n        delete this._instanceGeometryArray;\n        this._instanceGeometryArray = [];\n        this.mesh = null;\n\n    }\n\n    destroy(): void {\n        super.destroy();\n        this._material && this._material._removeReference(1);\n        this._material = null;\n        this._instanceBufferState.destroy();\n        this._instanceBufferState = null;\n        delete this._instanceRenderElementArray;\n        this._instanceRenderElementArray = [];\n        delete this._instanceGeometryArray;\n        this._instanceGeometryArray = [];\n        this.mesh = null;\n    }\n\n}","\nimport { Camera } from \"../../Camera\";\nimport { BlitScreenQuadCMD } from \"./BlitScreenQuadCMD\";\nimport { SetRenderTargetCMD } from \"./SetRenderTargetCMD\";\nimport { Command } from \"./Command\";\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\nimport { Mesh } from \"../../../resource/models/Mesh\";\nimport { Material } from \"../../material/Material\";\nimport { SetShaderDataCMD } from \"./SetShaderDataCMD\";\nimport { DrawMeshCMD } from \"./DrawMeshCMD\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { ClearRenderTextureCMD } from \"./ClearRenderTextureCMD\";\nimport { BaseRender } from \"../BaseRender\";\nimport { DrawRenderCMD } from \"./DrawRenderCMD\";\nimport { SetGlobalShaderDataCMD } from \"./SetGlobalShaderDataCMD\";\nimport { DrawMeshInstancedCMD } from \"./DrawMeshInstancedCMD\";\nimport { MaterialInstancePropertyBlock } from \"./MaterialInstancePropertyBlock\";\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { RenderCapable } from \"../../../../RenderEngine/RenderEnum/RenderCapable\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { Stat } from \"../../../../utils/Stat\";\nimport { Color } from \"../../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\n\n/**\n * <code>CommandBuffer</code> 类用于创建命令流。\n */\nexport class CommandBuffer {\n\t/**@internal */\n\t_name: string\n\t/**@internal */\n\tprivate _shadow:boolean = false;\n\t/**@internal */\n\t_camera: Camera = null;\n\t/**@internal */\n\t_context: RenderContext3D;\n\t/**@internal */\n\tprivate _commands: Command[] = [];\n\n\n\t/**\n\t * 创建一个 <code>CommandBuffer</code> 实例。\n\t */\n\tconstructor(name: string = null,shadowCaster:boolean = false) {\n\t\tthis._name = name;\n\t\tthis._shadow = shadowCaster;\n\t}\n\n\tget name(): string {\n\t\treturn this._name;\n\t}\n\n\tget casterShadow(){\n\t\treturn this._shadow;\n\t}\n\t\n\tset context(value:RenderContext3D){\n\t\tthis._context = value;\n\t}\n\n\tget context(){\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * 调用所有渲染指令\n\t */\n\t_apply(): void {\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++)\n\t\t\tthis._commands[i].run();\n\t\tStat.cmdDrawCall+=this._commands.length;\n\t}\n\n\t_applyOne(): boolean {\n\t\tif (this._commands.length) {\n\t\t\tvar cmd = this._commands.shift();\n\t\t\tcmd.run();\n\t\t\tcmd.recover();\n\t\t}\n\t\treturn this._commands.length > 0;\n\t}\n\n\tgetCommandsSize(): number {\n\t\treturn this._commands.length;\n\t}\n\n\t/**\n\t * 设置shader图片数据\n\t * @param shaderData shader数据集合\n\t * @param nameID 图片UniformID\n\t * @param source 图片源\n\t */\n\tsetShaderDataTexture(shaderData: ShaderData, nameID: number, source: BaseTexture): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, source, ShaderDataType.Texture2D, this));\n\t}\n\n\t/**\n\t * 设置全局纹理数据\n\t * @param nameID 图片uniformID\n\t * @param source 图片源\n\t */\n\tsetGlobalTexture(nameID: number, source: BaseTexture) {\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Texture2D, this));\n\t}\n\n\t/**\n\t * 设置shader Vector4数据\n\t * @param shaderData shader数据集合\n\t * @param nameID 数据ID\n\t * @param value 数据\n\t */\n\tsetShaderDataColor(shaderData: ShaderData, nameID: number, value: Color): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Color, this));\n\t}\n\n\t/**\n\t * 设置全局Vector4数据\n\t * @param nameID Vector4数据ID\n\t * @param source 数据\n\t */\n\tsetGlobalColor(nameID: number, source: Color) {\n\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Color, this));\n\t}\n\n\t/**\n\t * 设置shader Vector4数据\n\t * @param shaderData shader数据集合\n\t * @param nameID 数据ID\n\t * @param value 数据\n\t */\n\tsetShaderDataVector(shaderData: ShaderData, nameID: number, value: Vector4): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector4, this));\n\t}\n\n\t/**\n\t * 设置全局Vector4数据\n\t * @param nameID Vector4数据ID\n\t * @param source 数据\n\t */\n\tsetGlobalVector(nameID: number, source: Vector4) {\n\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector4, this));\n\t}\n\n\t/**\n\t * 设置shader Vector3数据\n\t * @param shaderData shader数据集合\n\t * @param nameID 数据ID\n\t * @param value 数据\n\t */\n\tsetShaderDataVector3(shaderData: ShaderData, nameID: number, value: Vector3): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector3, this));\n\t}\n\n\t/**\n\t * 设置全局Vector3数据\n\t * @param nameID 数据ID\n\t * @param source 数据\n\t */\n\tsetGlobalVector3(nameID: number, source: Vector3) {\n\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector3, this));\n\t}\n\n\t/**\n\t * 设置shader Vector2数据\n\t * @param shaderData shader数据集合\n\t * @param nameID 数据ID\n\t * @param value 数据\n\t */\n\tsetShaderDataVector2(shaderData: ShaderData, nameID: number, value: Vector2): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector2, this));\n\t}\n\n\t/**\n\t * 设置全局Vector2数据\n\t * @param nameID 数据ID\n\t * @param source 数据\n\t */\n\tsetGlobalVector2(nameID: number, source: Vector2) {\n\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector2, this));\n\t}\n\n\t/**\n\t * 设置shader Number属性\n\t * @param shaderData shader数据集合\n\t * @param nameID 数据ID\n\t * @param value 数据\n\t */\n\tsetShaderDataNumber(shaderData: ShaderData, nameID: number, value: number): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Float, this));\n\t}\n\n\t/**\n\t * 设置全局number属性\n\t * @param nameID 数据ID\n\t * @param source 数据\n\t */\n\tsetGlobalNumber(nameID: number, source: number) {\n\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Float, this));\n\t}\n\n\t/**\n\t * 设置shader Int属性\n\t * @param shaderData shader数据集合\n\t * @param nameID 数据ID\n\t * @param value 数据\n\t */\n\tsetShaderDataInt(shaderData: ShaderData, nameID: number, value: number): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Int, this));\n\t}\n\n\t/**\n\t * 设置全局int属性\n\t * @param nameID 数据ID\n\t * @param source 数据\n\t */\n\tsetGlobalInt(nameID: number, source: number) {\n\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Int, this));\n\t}\n\n\t/**\n\t * 设置shader Matrix属性\n\t * @param shaderData shader数据集合\n\t * @param nameID 数据ID\n\t * @param value 数据\n\t */\n\tsetShaderDataMatrix(shaderData: ShaderData, nameID: number, value: Matrix4x4): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Matrix4x4, this));\n\t}\n\n\tsetShaderDefine(shaderData: ShaderData, define: string, value: boolean): void {\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, define, value, SetShaderDataCMD.ShaderDataType_define, this));\n\t}\n\n\t/**\n\t * 设置全局Matrix属性\n\t * @param nameID 数据ID\n\t * @param source 数据\n\t */\n\tsetGlobalMatrix(nameID: number, source: number) {\n\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Matrix4x4, this));\n\t}\n\n\n\n\t/**\n\t * 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。\n\t * @param\tsource 源纹理. 如果为null,前渲染结果为原纹理\n\t * @param\tdest  目标纹理. 如果为null，直接渲染到最终画布\n\t * @param\toffsetScale 偏移缩放。\n\t * @param\tshader 着色器,如果为null使用内部拷贝着色器,不做任何处理。\n\t * @param\tshaderData 着色器数据,如果为null只接收sourceTexture。\n\t * @param\tsubShader subShader索引,默认值为0。\n\t */\n\tblitScreenQuad(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_QUAD, this));\n\t}\n\n\t/**\n\t * 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。\n\t * @param source 源纹理 如果为null,前渲染结果为原纹理\n\t * @param dest 目标纹理 如果为null，直接渲染到最终画布\n\t * @param offsetScale 偏移缩放\n\t * @param material 材质\n\t * @param subShader shader索引\n\t */\n\tblitScreenQuadByMaterial(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, material: Material = null, subShader: number = 0): void {\n\t\tvar shader: Shader3D;\n\t\tvar shaderData: ShaderData;\n\t\tif (material) {\n\t\t\tshader = material._shader;\n\t\t\tshaderData = material.shaderData\n\t\t}\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_QUAD, this));\n\t}\n\n\t/**\n\t * 添加一条通过全屏三角形将源纹理渲染到目标渲染纹理指令。\n\t * @param\tsource 源纹理。\n\t * @param\tdest  目标纹理。\n\t * @param\toffsetScale 偏移缩放。\n\t * @param\tshader 着色器,如果为null使用内部拷贝着色器,不做任何处理。\n\t * @param\tshaderData 着色器数据,如果为null只接收sourceTexture。\n\t * @param\tsubShader subShader索引,默认值为0。\n\t */\n\tblitScreenTriangle(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_TRIANGLE, this));\n\t}\n\n\t/**\n\t * 设置指令渲染目标\n\t * @param renderTexture RT渲染目标\n\t */\n\tsetRenderTarget(renderTexture: RenderTexture): void {\n\t\tthis._commands.push(SetRenderTargetCMD.create(renderTexture));\n\t}\n\n\t/**\n\t * clear渲染纹理\n\t * @param clearColor \n\t * @param clearDepth \n\t * @param backgroundColor \n\t * @param depth \n\t */\n\tclearRenderTarget(clearColor: boolean, clearDepth: boolean, backgroundColor: Color, depth: number = 1): void {\n\t\tthis._commands.push(ClearRenderTextureCMD.create(clearColor, clearDepth, backgroundColor, depth, this));\n\t}\n\n\t/**\n\t * 渲染一个Mesh\n\t * @param mesh 原始网格信息\n\t * @param matrix 网格世界矩阵\n\t * @param material 材质\n\t * @param submeshIndex 子网格索引 如果索引为\n\t * @param subShaderIndex 子shader索引 一般为0\n\t */\n\tdrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, subShaderIndex: number): void {\n\t\tthis._commands.push(DrawMeshCMD.create(mesh, matrix, material, submeshIndex, subShaderIndex, this));\n\t}\n\n\t/**\n\t * 渲染一个Render\n\t * @param render 渲染器\n\t * @param material 材质\n\t * @param subShaderIndex 子shader索引 一般为0\n\t */\n\tdrawRender(render: BaseRender, material: Material, subShaderIndex: number): void {\n\t\tthis._commands.push(DrawRenderCMD.create(render, material, subShaderIndex, this));\n\t}\n\n\n\t/**\n\t * 使用instance动态合批的方式渲染一个Mesh\n\t * @param mesh 原始网格信息\n\t * @param subMeshIndex mesh索引\n\t * @param matrixs 渲染的世界矩阵数组，用来描述每个Mesh需要渲染的位置,如果为null，将不创建更新世界矩阵Buffer\n\t * @param material 渲染材质\n\t * @param subShaderIndex 渲染材质shader索引\n\t * @param instanceProperty Instance自定义属性\n\t * @param drawnums 渲染个数\n\t */\n\tdrawMeshInstance(mesh: Mesh, subMeshIndex: number = 0, matrixs: Matrix4x4[], material: Material, subShaderIndex: number = 0, instanceProperty: MaterialInstancePropertyBlock, drawnums: number): any {\n\t\tif (!LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance))\n\t\t\treturn null;\n\t\tvar drawMeshInstancedCMD = DrawMeshInstancedCMD.create(mesh, subMeshIndex, matrixs, material, subShaderIndex, instanceProperty, drawnums, this);\n\t\tthis._commands.push(drawMeshInstancedCMD);\n\t\treturn drawMeshInstancedCMD;\n\t}\n\n\t/**\n\t * add 自定义的渲染命令\n\t * @param command \n\t */\n\taddCustomCMD(command:Command){\n\t\tcommand._commandBuffer = this;\n\t\tthis._commands.push(command);\n\t}\n\n\t/**\n\t *@internal\n\t */\n\tclear(): void {\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++)\n\t\t\tthis._commands[i].recover();\n\t\tthis._commands.length = 0;\n\t}\n\n}","/**\n * <code>PhysicsSettings</code> 类用于创建物理配置信息。\n */\nexport class PhysicsSettings {\n    /**标志集合。*/\n    flags: number = 0;\n\n    /**物理引擎在一帧中用于补偿减速的最大次数。*/\n    maxSubSteps: number = 1;\n\n    /**物理模拟器帧的间隔时间。*/\n    fixedTimeStep: number = 1.0 / 60.0;\n}\n\n\n","import { Light } from \"./Light\";\n\n\n\n/**\n * @internal\n */\nexport class LightQueue<T extends Light> {\n    _length: number = 0;\n    _elements: T[] = [];\n\n    add(light: T): void {\n        let index = this._elements.indexOf(light);\n        if (index !=-1 && index < this._length) {\n            return;\n        }\n        if (this._length === this._elements.length)\n            this._elements.push(light);\n        else\n            this._elements[this._length] = light;\n        this._length++;\n    }\n\n    remove(light: T): void {\n        var index: number = this._elements.indexOf(light);\n        if(index == -1)\n            return;\n        this._length--;\n        if (index !== this._length) {\n            var end: T = this._elements[this._length];\n            this._elements[index] = end;\n        }\n    }\n\n    shift(): T | undefined {\n        this._length--;\n        return this._elements.shift();\n    }\n\n    getBrightestLight(): number | undefined {\n        var maxIntIndex;\n        var maxIntensity: number = -1;\n        var elements: T[] = this._elements;\n        for (var i: number = 0; i < this._length; i++) {\n            var intensity: number = elements[i]._intensity;\n            if (maxIntensity < intensity) {\n                maxIntensity = intensity;\n                maxIntIndex = i;\n            }\n        }\n        return maxIntIndex;\n    }\n    normalLightOrdering(brightestIndex: number) {\n        var firstLight: T = this._elements[0];\n        this._elements[0] = this._elements[brightestIndex];\n        this._elements[brightestIndex] = firstLight;\n    }\n}\n\n\n\n\n/**\n * @internal\n */\nexport class AlternateLightQueue extends LightQueue<Light>{\n\n    remove(light: Light): void {\n        //sort must base added time\n        var index: number = this._elements.indexOf(light);\n        this._elements.splice(index, 1);\n        this._length--;\n    }\n}\n","import { Texture2D } from \"../../../resource/Texture2D\";\n\n/**\n * 光照贴图。\n */\nexport class Lightmap {\n    /** 光照贴图颜色。 */\n    lightmapColor: Texture2D;\n    /** 光照贴图方向。 */\n    lightmapDirection: Texture2D;\n}","import { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\n\n/**\n * @internal\n * 场景宏集合\n */\nexport class Scene3DShaderDeclaration {\n\t/**@internal */\n\tstatic SHADERDEFINE_FOG: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_DIRECTIONLIGHT: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_POINTLIGHT: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SPOTLIGHT: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHADOW: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHADOW_CASCADE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHADOW_SPOT: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH: ShaderDefine;\n\n}","import { Ray } from \"./Ray\";\nimport { CollisionUtils } from \"./CollisionUtils\";\nimport { IClone } from \"../../utils/IClone\"\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * <code>BoundSphere</code> 类用于创建包围球。\n */\nexport class BoundSphere implements IClone {\n\tprivate static _tempVector3: Vector3 = new Vector3();\n\n\t/**包围球的中心。*/\n\t_center: Vector3;\n\t/**包围球的半径。*/\n\t_radius: number;\n\tset center(value: Vector3) {\n\t\tvalue.cloneTo(this._center);\n\t}\n\n\tget center() {\n\t\treturn this._center;\n\t}\n\n\tset radius(value: number) {\n\t\tthis._radius = value;\n\t}\n\n\tget radius(): number {\n\t\treturn this._radius\n\t}\n\t/**\n\t * 创建一个 <code>BoundSphere</code> 实例。\n\t * @param\tcenter 包围球的中心。\n\t * @param\tradius 包围球的半径。\n\t */\n\tconstructor(center: Vector3 = new Vector3, radius: number = 0) {\n\t\tthis._center = center;\n\t\tthis._radius = radius;\n\t}\n\n\ttoDefault(): void {\n\t\tthis._center.toDefault();\n\t\tthis._radius = 0;\n\t}\n\n\t/**\n\t * 从顶点的子队列生成包围球。\n\t * @param\tpoints 顶点的队列。\n\t * @param\tstart 顶点子队列的起始偏移。\n\t * @param\tcount 顶点子队列的顶点数。\n\t * @param\tresult 生成的包围球。\n\t */\n\tstatic createFromSubPoints(points: Vector3[], start: number, count: number, out: BoundSphere): void {\n\t\tif (points == null) {\n\t\t\tthrow new Error(\"points\");\n\t\t}\n\n\t\t// Check that start is in the correct range \n\t\tif (start < 0 || start >= points.length) {\n\t\t\tthrow new Error(\"start\" + start + \"Must be in the range [0, \" + (points.length - 1) + \"]\");\n\t\t}\n\n\t\t// Check that count is in the correct range \n\t\tif (count < 0 || (start + count) > points.length) {\n\t\t\tthrow new Error(\"count\" + count + \"Must be in the range <= \" + points.length + \"}\");\n\t\t}\n\n\t\tvar upperEnd: number = start + count;\n\n\t\t//Find the center of all points. \n\t\tvar center: Vector3 = BoundSphere._tempVector3;\n\t\tcenter.x = 0;\n\t\tcenter.y = 0;\n\t\tcenter.z = 0;\n\t\tfor (var i: number = start; i < upperEnd; ++i) {\n\t\t\tVector3.add(points[i], center, center);\n\t\t}\n\n\t\tvar outCenter: Vector3 = out.center;\n\t\t//This is the center of our sphere. \n\t\tVector3.scale(center, 1 / count, outCenter);\n\n\t\t//Find the radius of the sphere \n\t\tvar radius: number = 0.0;\n\t\tfor (i = start; i < upperEnd; ++i) {\n\t\t\t//We are doing a relative distance comparison to find the maximum distance \n\t\t\t//from the center of our sphere. \n\t\t\tvar distance: number = Vector3.distanceSquared(outCenter, points[i]);\n\n\t\t\tif (distance > radius)\n\t\t\t\tradius = distance;\n\t\t}\n\n\t\t//Find the real distance from the DistanceSquared. \n\t\tout.radius = Math.sqrt(radius);\n\t}\n\n\t/**\n\t * 从顶点队列生成包围球。\n\t * @param\tpoints 顶点的队列。\n\t * @param\tresult 生成的包围球。\n\t */\n\tstatic createfromPoints(points: Vector3[], out: BoundSphere): void {\n\t\tif (points == null) {\n\t\t\tthrow new Error(\"points\");\n\t\t}\n\n\t\tBoundSphere.createFromSubPoints(points, 0, points.length, out);\n\t}\n\n\t/**\n\t * 判断射线是否与碰撞球交叉，并返回交叉距离。\n\t * @param\tray 射线。\n\t * @return 距离交叉点的距离，-1表示不交叉。\n\t */\n\tintersectsRayDistance(ray: Ray): number {\n\t\treturn CollisionUtils.intersectsRayAndSphereRD(ray, this);\n\t}\n\n\t/**\n\t * 判断射线是否与碰撞球交叉，并返回交叉点。\n\t * @param\tray  射线。\n\t * @param\toutPoint 交叉点。\n\t * @return  距离交叉点的距离，-1表示不交叉。\n\t */\n\tintersectsRayPoint(ray: Ray, outPoint: Vector3): number {\n\t\treturn CollisionUtils.intersectsRayAndSphereRP(ray, this, outPoint);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar dest: BoundSphere = (<BoundSphere>destObject);\n\t\tthis._center.cloneTo(dest._center);\n\t\tdest._radius = this._radius;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar dest: BoundSphere = new BoundSphere(new Vector3(), 0);\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n","import { Plane } from \"../math/Plane\";\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { ICameraCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { BoundSphere } from \"../math/BoundSphere\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * @internal\n * 阴影分割数据。\n */\nexport class ShadowSliceData {\n    cameraShaderValue: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\n    position: Vector3 = new Vector3();\n    offsetX: number;\n    offsetY: number;\n    resolution: number;\n    viewMatrix: Matrix4x4 = new Matrix4x4();\n    projectionMatrix: Matrix4x4 = new Matrix4x4();\n    viewProjectMatrix: Matrix4x4 = new Matrix4x4();\n    cullPlanes: Array<Plane> = [new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0)];\n    cullPlaneCount: number;\n    splitBoundSphere: BoundSphere = new BoundSphere(new Vector3(), 0.0);\n    sphereCenterZ: number;\n}\n\n/**\n * @internal\n * 聚光灯阴影数据。\n */\nexport class ShadowSpotData {\n    cameraShaderValue: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\n    position: Vector3 = new Vector3;\n    offsetX: number;\n    offsetY: number;\n    resolution: number;\n    viewMatrix: Matrix4x4 = new Matrix4x4();\n    projectionMatrix: Matrix4x4 = new Matrix4x4();\n    viewProjectMatrix: Matrix4x4 = new Matrix4x4();\n    cameraCullInfo: ICameraCullInfo = LayaGL.renderOBJCreate.createCameraCullInfo();\n\n}\n","import { Plane } from \"../math/Plane\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { ICameraCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { IShadowCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { Bounds } from \"../math/Bounds\";\nimport { ContainmentType } from \"../math/ContainmentType\";\nimport { CollisionUtils } from \"../math/CollisionUtils\";\nimport { Vector3 } from \"../../maths/Vector3\";\n\n/**\n * @internal\n * <code>FrustumCulling</code> 类用于裁剪。\n */\nexport class FrustumCulling {\n\t/**@internal */\n\tstatic _cameraCullInfo: ICameraCullInfo;\n\t/**@internal */\n\tstatic _shadowCullInfo: IShadowCullInfo;\n\t/**@internal */\n\tprivate static _tempV30: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempV31: Vector3 = new Vector3();\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tFrustumCulling._cameraCullInfo = LayaGL.renderOBJCreate.createCameraCullInfo();\n\t\tFrustumCulling._shadowCullInfo = LayaGL.renderOBJCreate.createShadowCullInfo();\n\t}\n\n\t// /**\n\t//  * @internal\n\t//  */\n\t// private static _drawTraversalCullingBound(renderList: SingletonList<ISingletonElement>, debugTool: PixelLineSprite3D): void {\n\t// \tvar renders: ISingletonElement[] = renderList.elements;\n\t// \tfor (var i: number = 0, n: number = renderList.length; i < n; i++) {\n\t// \t\tvar color: Color = FrustumCulling._tempColor0;\n\t// \t\tcolor.r = 0;\n\t// \t\tcolor.g = 1;\n\t// \t\tcolor.b = 0;\n\t// \t\tcolor.a = 1;\n\t// \t\tUtils3D._drawBound(debugTool, ((<BaseRender>renders[i])).bounds._getBoundBox(), color);\n\t// \t}\n\t// }\n\n\n\t/**\n\t * caculate Bounds by ShadowCullInfo\n\t * @param bounds \n\t * @param cullInfo \n\t * @returns \n\t */\n\tstatic cullingRenderBounds(bounds: Bounds, cullInfo: IShadowCullInfo): boolean {\n\t\tvar cullPlaneCount: number = cullInfo.cullPlaneCount;\n\t\tvar cullPlanes: Plane[] = cullInfo.cullPlanes;\n\n\t\tvar min: Vector3 = bounds.getMin();\n\t\tvar max: Vector3 = bounds.getMax();\n\t\tvar minX: number = min.x;\n\t\tvar minY: number = min.y;\n\t\tvar minZ: number = min.z;\n\t\tvar maxX: number = max.x;\n\t\tvar maxY: number = max.y;\n\t\tvar maxZ: number = max.z;\n\t\t//TODO:通过相机裁剪直接pass\n\n\t\tvar pass: boolean = true;\n\t\t// cull by planes\n\t\t// Improve:Maybe use sphre and direction cull can savle the far plane cull\n\t\tfor (var j: number = 0; j < cullPlaneCount; j++) {\n\t\t\tvar plane: Plane = cullPlanes[j];\n\t\t\tvar normal: Vector3 = plane.normal;\n\t\t\tif (plane.distance + (normal.x * (normal.x < 0.0 ? minX : maxX)) + (normal.y * (normal.y < 0.0 ? minY : maxY)) + (normal.z * (normal.z < 0.0 ? minZ : maxZ)) < 0.0) {\n\t\t\t\tpass = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn pass;\n\t}\n\n\t/**\n\t * caculate Bounds by ShadowCullInfo\n\t * @param bounds \n\t * @param cullInfo \n\t * @returns \n\t */\n\tstatic cullingRenderBoundsState(bounds: Bounds, cullInfo: IShadowCullInfo): ContainmentType {\n\t\tvar p: Vector3 = FrustumCulling._tempV30, n: Vector3 = FrustumCulling._tempV31;\n\t\tvar boxMin: Vector3 = bounds.min;\n\t\tvar boxMax: Vector3 = bounds.max;\n\t\tvar result: number = ContainmentType.Contains;\n\t\tfor (var i = 0, nn = cullInfo.cullPlaneCount; i < nn; i++) {\n\t\t\tvar plane: Plane = cullInfo.cullPlanes[i];\n\t\t\tvar planeNor: Vector3 = plane.normal;\n\n\t\t\tif (planeNor.x >= 0) {\n\t\t\t\tp.x = boxMax.x;\n\t\t\t\tn.x = boxMin.x;\n\t\t\t} else {\n\t\t\t\tp.x = boxMin.x;\n\t\t\t\tn.x = boxMax.x;\n\t\t\t}\n\t\t\tif (planeNor.y >= 0) {\n\t\t\t\tp.y = boxMax.y;\n\t\t\t\tn.y = boxMin.y;\n\t\t\t} else {\n\t\t\t\tp.y = boxMin.y;\n\t\t\t\tn.y = boxMax.y;\n\t\t\t}\n\t\t\tif (planeNor.z >= 0) {\n\t\t\t\tp.z = boxMax.z;\n\t\t\t\tn.z = boxMin.z;\n\t\t\t} else {\n\t\t\t\tp.z = boxMin.z;\n\t\t\t\tn.z = boxMax.z;\n\t\t\t}\n\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\n\t\t\t\treturn ContainmentType.Disjoint;\n\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\n\t\t\t\tresult = ContainmentType.Intersects;\n\t\t}\n\t\treturn result;\n\t}\n\n\n}\n\n","/**\n * Shadow Light enum\n */\n export enum ShadowLightType {\n    /**直射光 */\n    DirectionLight,\n    /**聚光 */\n    SpotLight,\n    /**点光 */\n    PointLight\n}","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { BaseCamera } from \"../core/BaseCamera\";\nimport { Camera } from \"../core/Camera\";\nimport { ShadowCascadesMode } from \"../core/light/ShadowCascadesMode\";\nimport { ShadowMode } from \"../core/light/ShadowMode\";\nimport { ShadowMapFormat, ShadowUtils } from \"../core/light/ShadowUtils\";\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\nimport { Scene3D } from \"../core/scene/Scene3D\";\nimport { Scene3DShaderDeclaration } from \"../core/scene/Scene3DShaderDeclaration\";\nimport { Plane } from \"../math/Plane\";\nimport { Light, LightType } from \"../core/light/Light\";\nimport { DirectionLightCom } from \"../core/light/DirectionLightCom\";\nimport { Sprite3D } from \"../core/Sprite3D\";\nimport { SpotLightCom } from \"../core/light/SpotLightCom\";\nimport { Config3D } from \"../../../Config3D\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\nimport { UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\nimport { BoundFrustum } from \"../math/BoundFrustum\";\nimport { ShadowSliceData, ShadowSpotData } from \"./ShadowSliceData\";\nimport { RenderClearFlag } from \"../../RenderEngine/RenderEnum/RenderClearFlag\";\nimport { Viewport } from \"../math/Viewport\";\nimport { IShadowCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { FrustumCulling } from \"../graphics/FrustumCulling\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { Stat } from \"../../utils/Stat\";\nimport { ShadowLightType } from \"./ShadowLightType\";\nimport { DepthCasterData } from \"../depthMap/DepthCasterData\";\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { RenderTexture } from \"../../resource/RenderTexture\";\n\n/**\n * @internal\n * <code>ShadowCasterPass</code> 类用于实现阴影渲染管线\n */\nexport class ShadowCasterPass {\n    /**@internal */\n    private static _tempVector30: Vector3 = new Vector3();\n    /**@internal */\n    private static _tempVector4: Vector4 = new Vector4();\n    /**@internal */\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4();\n    /** @internal */\n    static SHADOW_BIAS: number;\n    /** @internal */\n    static SHADOW_LIGHT_DIRECTION: number;\n    /** @internal */\n    static SHADOW_SPLIT_SPHERES: number;\n    /** @internal */\n    static SHADOW_MATRICES: number;\n    /** @internal */\n    static SHADOW_MAP_SIZE: number;\n    /** @internal */\n    static SHADOW_MAP: number;\n    /** @internal */\n    static SHADOW_PARAMS: number;\n    /** @internal */\n    static SHADOW_SPOTMAP_SIZE: number;\n    /** @internal */\n    static SHADOW_SPOTMAP: number;\n    /** @internal */\n    static SHADOW_SPOTMATRICES: number;\n    /** @internal */\n    private static _maxCascades: number = 4;\n    /**@internal */\n    private static _cascadesSplitDistance: number[] = new Array(ShadowCasterPass._maxCascades + 1);\n    /** @internal */\n    private static _frustumPlanes: Plane[] = new Array();\n\n    /**\n     * @internal\n     * init Scene UniformMap\n     */\n    static __init__() {\n        ShadowCasterPass._frustumPlanes = new Array(new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0));\n        ShadowCasterPass.SHADOW_BIAS = Shader3D.propertyNameToID(\"u_ShadowBias\");\n        ShadowCasterPass.SHADOW_LIGHT_DIRECTION = Shader3D.propertyNameToID(\"u_ShadowLightDirection\");\n        ShadowCasterPass.SHADOW_SPLIT_SPHERES = Shader3D.propertyNameToID(\"u_ShadowSplitSpheres\");\n        ShadowCasterPass.SHADOW_MATRICES = Shader3D.propertyNameToID(\"u_ShadowMatrices\");\n        ShadowCasterPass.SHADOW_MAP_SIZE = Shader3D.propertyNameToID(\"u_ShadowMapSize\");\n        ShadowCasterPass.SHADOW_MAP = Shader3D.propertyNameToID(\"u_ShadowMap\");\n        ShadowCasterPass.SHADOW_PARAMS = Shader3D.propertyNameToID(\"u_ShadowParams\");\n        ShadowCasterPass.SHADOW_SPOTMAP_SIZE = Shader3D.propertyNameToID(\"u_SpotShadowMapSize\");\n        ShadowCasterPass.SHADOW_SPOTMAP = Shader3D.propertyNameToID(\"u_SpotShadowMap\");\n        ShadowCasterPass.SHADOW_SPOTMATRICES = Shader3D.propertyNameToID(\"u_SpotViewProjectMatrix\");\n\n        const sceneUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Scene3D\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_BIAS, \"u_ShadowBias\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, \"u_ShadowLightDirection\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPLIT_SPHERES, \"u_ShadowSplitSpheres\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MATRICES, \"u_ShadowMatrices\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MAP_SIZE, \"u_ShadowMapSize\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MAP, \"u_ShadowMap\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_PARAMS, \"u_ShadowParams\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP_SIZE, \"u_SpotShadowMapSize\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP, \"u_SpotShadowMap\");\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMATRICES, \"u_SpotViewProjectMatrix\");\n        sceneUniformMap.addShaderUniform(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), UniformBufferObject.UBONAME_SHADOW);\n    }\n\n  \n\n    /** @internal */\n    private _shadowBias: Vector4 = new Vector4();\n    /** @internal */\n    private _shadowParams: Vector4 = new Vector4();\n    /** @internal */\n    private _shadowMapSize: Vector4 = new Vector4();\n    /** @internal */\n    private _shadowSpotMapSize: Vector4 = new Vector4();\n    /** @internal */\n    private _shadowMatrices: Float32Array = new Float32Array(16 * (ShadowCasterPass._maxCascades));\n    /** @internal */\n    private _shadowSpotMatrices: Matrix4x4 = new Matrix4x4();\n    /**@internal */\n    private _splitBoundSpheres: Float32Array = new Float32Array(ShadowCasterPass._maxCascades * 4);\n    /** @internal */\n    private _cascadeCount: number = 0;\n    /** @internal */\n    private _shadowMapWidth: number = 0;\n    /** @internal */\n    private _shadowMapHeight: number = 0;\n    /** @internal */\n    private _shadowDirectLightMap: RenderTexture;\n    /** @internal */\n    private _shadowSpotLightMap: RenderTexture;\n    /** @internal */\n    private _shadowSliceDatas: ShadowSliceData[] = [new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData()];\n    /** @internal */\n    private _shadowSpotData: ShadowSpotData = new ShadowSpotData();\n    /**@internal */\n    private _light: Light;\n    /** @internal */\n    private _lightUp: Vector3 = new Vector3();\n    /** @internal */\n    private _lightSide: Vector3 = new Vector3();\n    /** @internal */\n    private _lightForward: Vector3 = new Vector3();\n    /** @internal */\n    _castDepthBufferData: UnifromBufferData;\n    _castDepthBufferOBJ: UniformBufferObject;\n\n    _castDepthCameraBufferData: UnifromBufferData;\n    _castDepthCameraBufferOBJ: UniformBufferObject;\n\n    constructor() {\n        this._shadowSpotData.cameraCullInfo.boundFrustum = new BoundFrustum(new Matrix4x4());\n        if (Config3D._uniformBlock) {\n            this._castDepthBufferData = DepthCasterData.createDepthCasterUniformBlock();\n            this._castDepthBufferOBJ = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SHADOW, 0);\n            if (!this._castDepthBufferOBJ) {\n                this._castDepthBufferOBJ = UniformBufferObject.create(UniformBufferObject.UBONAME_SHADOW, BufferUsage.Dynamic, this._castDepthBufferData.getbyteLength(), true);\n            }\n            BaseCamera.createCameraUniformBlock();\n            this._castDepthCameraBufferData = BaseCamera.CameraUBOData.clone();\n            this._castDepthCameraBufferOBJ = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 1);\n            if (!this._castDepthCameraBufferOBJ) {\n                this._castDepthCameraBufferOBJ = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, this._castDepthCameraBufferData.getbyteLength(), false);\n            }\n        }\n\n    }\n\n    /**\n     * 设置阴影级联数据模式\n     * @internal\n     * @param context 渲染上下文\n     * @param shaderValues 渲染数据\n     * @param shadowSliceData 分级数据\n     * @param LightParam 灯光属性\n     * @param shadowparams 阴影属性\n     * @param shadowBias 阴影偏移\n     * @param lightType 灯光类型\n     */\n    private _setupShadowCasterShaderValues(context: RenderContext3D, shaderValues: ShaderData, shadowSliceData: any, LightParam: Vector3, shadowparams: Vector4, shadowBias: Vector4, lightType: LightType): void {\n        //shaderValues.setVector(ShadowCasterPass.SHADOW_BIAS, shadowBias);\n        shaderValues.setVector(ShadowCasterPass.SHADOW_BIAS, shadowBias);\n        switch (lightType) {\n            case LightType.Directional:\n                shaderValues.setVector3(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, LightParam);\n                //this._setcommandBlockData(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, LightParam);\n                break;\n            case LightType.Spot:\n                shaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, shadowparams);\n                break;\n            case LightType.Point:\n                break;\n        }\n        var cameraSV: ShaderData = shadowSliceData.cameraShaderValue;//TODO:should optimization with shader upload.\n        if (this._castDepthCameraBufferOBJ) {\n            cameraSV._addCheckUBO(UniformBufferObject.UBONAME_CAMERA, this._castDepthCameraBufferOBJ, this._castDepthCameraBufferData);\n            cameraSV.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK, this._castDepthCameraBufferOBJ);\n        }\n\n        cameraSV.setMatrix4x4(BaseCamera.VIEWMATRIX, shadowSliceData.viewMatrix);\n        cameraSV.setMatrix4x4(BaseCamera.PROJECTMATRIX, shadowSliceData.projectionMatrix);\n        cameraSV.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\n        shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\n        context.viewMatrix = shadowSliceData.viewMatrix;\n        context.projectionMatrix = shadowSliceData.projectionMatrix;\n        context.projectionViewMatrix = shadowSliceData.viewProjectMatrix;\n        //this._castDepthBufferOBJ && shaderValues.setUniformBuffer(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), this._castDepthBufferOBJ);\n    }\n\n\n    /**\n     *设置直射光接受阴影的模式\n     * @internal\n     * @param shaderValues 渲染数据\n     */\n    private _setupShadowReceiverShaderValues(shaderValues: ShaderData): void {\n        var light: DirectionLightCom = <DirectionLightCom>this._light;\n        if (light.shadowCascadesMode !== ShadowCascadesMode.NoCascades)\n            shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\n        else\n            shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\n        switch (light.shadowMode) {\n            case ShadowMode.Hard:\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\n                break;\n            case ShadowMode.SoftLow:\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\n                break;\n            case ShadowMode.SoftHigh:\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\n                break;\n        }\n        shaderValues.setTexture(ShadowCasterPass.SHADOW_MAP, this._shadowDirectLightMap);\n        shaderValues.setBuffer(ShadowCasterPass.SHADOW_MATRICES, this._shadowMatrices);\n        shaderValues.setVector(ShadowCasterPass.SHADOW_MAP_SIZE, this._shadowMapSize);\n        shaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, this._shadowParams);\n        shaderValues.setBuffer(ShadowCasterPass.SHADOW_SPLIT_SPHERES, this._splitBoundSpheres);\n    }\n\n    /**\n     * 设置聚光接受阴影的模式\n     * @internal\n     * @param shaderValues 渲染数据\n     */\n    private _setupSpotShadowReceiverShaderValues(shaderValues: ShaderData): void {\n        var spotLight: SpotLightCom = <SpotLightCom>this._light;\n        switch (spotLight.shadowMode) {\n            case ShadowMode.Hard:\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\n                break;\n            case ShadowMode.SoftLow:\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\n                break;\n            case ShadowMode.SoftHigh:\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\n                break;\n        }\n        shaderValues.setTexture(ShadowCasterPass.SHADOW_SPOTMAP, this._shadowSpotLightMap);\n        shaderValues.setMatrix4x4(ShadowCasterPass.SHADOW_SPOTMATRICES, this._shadowSpotMatrices)\n        shaderValues.setVector(ShadowCasterPass.SHADOW_SPOTMAP_SIZE, this._shadowSpotMapSize);\n        shaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, this._shadowParams);\n    }\n\n    // /**\n    //  * set castDepthBuffer data\n    //  */\n    // private _setcommandBlockData(index: number, value: any) {\n    // \tif (this._castDepthBufferData && this._castDepthBufferData._has(index))\n    // \t\tthis._castDepthBufferData._setData(index, value);\n    // }\n\n\n    /**\n     * 更新阴影数据\n     * @internal\n     * @param camera 渲染相机\n     * @param light 灯光\n     * @param lightType 灯光类型\n     */\n    update(camera: Camera, light: Light, lightType: ShadowLightType): void {\n        this.cleanUp();\n        switch (lightType) {\n            case ShadowLightType.DirectionLight:\n                this._light = light;\n                var lightWorld: Matrix4x4 = ShadowCasterPass._tempMatrix0;\n                var lightWorldE: Float32Array = lightWorld.elements;\n                var lightUp: Vector3 = this._lightUp;\n                var lightSide: Vector3 = this._lightSide;\n                var lightForward: Vector3 = this._lightForward;\n                //光的的空间矩阵，旁边 上面 前面\n                Matrix4x4.createFromQuaternion((light.owner as Sprite3D)._transform.rotation, lightWorld);//to remove scale problem\n                lightSide.setValue(lightWorldE[0], lightWorldE[1], lightWorldE[2]);\n                lightUp.setValue(lightWorldE[4], lightWorldE[5], lightWorldE[6]);\n                lightForward.setValue(-lightWorldE[8], -lightWorldE[9], -lightWorldE[10]);\n                //设置分辨率\n                var atlasResolution: number = light._shadowResolution;\n                var cascadesMode: ShadowCascadesMode = (<DirectionLightCom>light)._shadowCascadesMode;\n                var cascadesCount: number;\n                var shadowTileResolution: number;\n                var shadowMapWidth: number, shadowMapHeight: number;\n                if (cascadesMode == ShadowCascadesMode.NoCascades) {\n                    cascadesCount = 1;\n                    shadowTileResolution = atlasResolution;\n                    shadowMapWidth = atlasResolution;\n                    shadowMapHeight = atlasResolution;\n                }\n                else {\n                    cascadesCount = cascadesMode == ShadowCascadesMode.TwoCascades ? 2 : 4;\n                    shadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(atlasResolution, atlasResolution, cascadesCount);\n                    shadowMapWidth = shadowTileResolution * 2;\n                    shadowMapHeight = cascadesMode == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;\n                }\n                this._cascadeCount = cascadesCount;\n                this._shadowMapWidth = shadowMapWidth;\n                this._shadowMapHeight = shadowMapHeight;\n\n                var splitDistance: number[] = ShadowCasterPass._cascadesSplitDistance;\n                var frustumPlanes: Plane[] = ShadowCasterPass._frustumPlanes;\n                var cameraNear: number = camera.nearPlane;\n                var shadowFar: number = Math.min(camera.farPlane, light._shadowDistance);\n                var shadowMatrices: Float32Array = this._shadowMatrices;\n                var boundSpheres: Float32Array = this._splitBoundSpheres;\n                ShadowUtils.getCascadesSplitDistance((<DirectionLightCom>light)._shadowTwoCascadeSplits, (<DirectionLightCom>light)._shadowFourCascadeSplits, cameraNear, shadowFar, camera.fieldOfView * MathUtils3D.Deg2Rad, camera.aspectRatio, cascadesMode, splitDistance);\n                ShadowUtils.getCameraFrustumPlanes(camera.projectionViewMatrix, frustumPlanes);\n                var forward: Vector3 = ShadowCasterPass._tempVector30;\n                camera._transform.getForward(forward);\n                Vector3.normalize(forward, forward);\n                for (var i: number = 0; i < cascadesCount; i++) {\n                    var sliceData: ShadowSliceData = this._shadowSliceDatas[i];\n                    sliceData.sphereCenterZ = ShadowUtils.getBoundSphereByFrustum(splitDistance[i], splitDistance[i + 1], camera.fieldOfView * MathUtils3D.Deg2Rad, camera.aspectRatio, camera._transform.position, forward, sliceData.splitBoundSphere);\n                    ShadowUtils.getDirectionLightShadowCullPlanes(frustumPlanes, i, splitDistance, cameraNear, lightForward, sliceData);\n                    ShadowUtils.getDirectionalLightMatrices(lightUp, lightSide, lightForward, i, light._shadowNearPlane, shadowTileResolution, sliceData, shadowMatrices);\n                    if (cascadesCount > 1)\n                        ShadowUtils.applySliceTransform(sliceData, shadowMapWidth, shadowMapHeight, i, shadowMatrices);\n                }\n                ShadowUtils.prepareShadowReceiverShaderValues((<DirectionLightCom>light), shadowMapWidth, shadowMapHeight, this._shadowSliceDatas, cascadesCount, this._shadowMapSize, this._shadowParams, shadowMatrices, boundSpheres);\n                break;\n            case ShadowLightType.SpotLight:\n                this._light = light;\n                var lightWorld: Matrix4x4 = ShadowCasterPass._tempMatrix0;\n                var lightForward: Vector3 = this._lightForward;\n                var shadowResolution: number = this._light._shadowResolution;\n                this._shadowMapWidth = shadowResolution;\n                this._shadowMapHeight = shadowResolution;\n                var shadowSpotData: ShadowSpotData = this._shadowSpotData;\n                ShadowUtils.getSpotLightShadowData(shadowSpotData, <SpotLightCom>this._light, shadowResolution, this._shadowParams, this._shadowSpotMatrices, this._shadowSpotMapSize);\n                break;\n            case ShadowLightType.PointLight:\n                //TODO:\n                break;\n            default:\n                throw (\"There is no shadow of this type\")\n                break;\n        }\n    }\n\n    /**\n     * 渲染阴影帧缓存\n     * @internal\n     * @param context 渲染上下文\n     * @param scene 3DScene场景\n     * @param lightType 阴影类型\n     */\n    render(context: RenderContext3D, scene: Scene3D, lightType: ShadowLightType, camera: Camera): void {\n        switch (lightType) {\n            case ShadowLightType.DirectionLight:\n                var shaderValues: ShaderData = scene._shaderValues;\n                context.pipelineMode = \"ShadowCaster\";\n                var shadowMap: RenderTexture = this._shadowDirectLightMap = ShadowUtils.getTemporaryShadowTexture(this._shadowMapWidth, this._shadowMapHeight, ShadowMapFormat.bit16);\n                shadowMap._start();\n                context.destTarget = shadowMap;\n                var light: DirectionLightCom = <DirectionLightCom>this._light;\n                for (var i: number = 0, n: number = this._cascadeCount; i < n; i++) {\n                    var sliceData: ShadowSliceData = this._shadowSliceDatas[i];\n                    ShadowUtils.getShadowBias(light, sliceData.projectionMatrix, sliceData.resolution, this._shadowBias);\n                    this._setupShadowCasterShaderValues(context, shaderValues, sliceData, this._lightForward, this._shadowParams, this._shadowBias, LightType.Directional);\n                    var shadowCullInfo: IShadowCullInfo = FrustumCulling._shadowCullInfo;\n                    shadowCullInfo.position = sliceData.position;\n                    shadowCullInfo.cullPlanes = sliceData.cullPlanes;\n                    shadowCullInfo.cullPlaneCount = sliceData.cullPlaneCount;\n                    shadowCullInfo.cullSphere = sliceData.splitBoundSphere;\n                    shadowCullInfo.direction = this._lightForward;\n                    //cull\n                    scene._directLightShadowCull(shadowCullInfo, context);\n                    context.cameraShaderValue = sliceData.cameraShaderValue;\n                    Camera._updateMark++;\n\n                    var resolution: number = sliceData.resolution;\n                    var offsetX: number = sliceData.offsetX;\n                    var offsetY: number = sliceData.offsetY;\n\n                    LayaGL.renderEngine.viewport(offsetX, offsetY, resolution, resolution);\n                    LayaGL.renderEngine.scissor(offsetX, offsetY, resolution, resolution);\n\n                    LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, null, 1);\n                    if (scene._opaqueQueue.elements.length > 0) {// if one cascade have anything to render.\n                        Viewport._tempViewport.set(offsetX, offsetY, resolution, resolution);\n                        ShadowCasterPass._tempVector4.setValue(offsetX + 1, offsetY + 1, resolution - 2, resolution - 2);\n                        context.viewport = Viewport._tempViewport;\n                        context.scissor = ShadowCasterPass._tempVector4;\n                        Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);//阴影均为非透明队列\n                    }\n                    camera._applyCasterPassCommandBuffer(context);\n                }\n                shadowMap._end();\n                this._setupShadowReceiverShaderValues(shaderValues);\n                context.pipelineMode = context.configPipeLineMode;\n                break;\n            case ShadowLightType.SpotLight:\n                var shaderValues: ShaderData = scene._shaderValues;\n                context.pipelineMode = \"ShadowCaster\";\n                var spotlight: SpotLightCom = <SpotLightCom>this._light;\n                var shadowMap: RenderTexture = this._shadowSpotLightMap = ShadowUtils.getTemporaryShadowTexture(this._shadowMapWidth, this._shadowMapHeight, ShadowMapFormat.bit16);\n                shadowMap._start();\n                context.destTarget = shadowMap;\n                var shadowSpotData: ShadowSpotData = this._shadowSpotData;\n                ShadowUtils.getShadowBias(spotlight, shadowSpotData.projectionMatrix, shadowSpotData.resolution, this._shadowBias);\n                this._setupShadowCasterShaderValues(context, shaderValues, shadowSpotData, (this._light.owner as Sprite3D).transform.position, this._shadowParams, this._shadowBias, LightType.Spot);\n                scene._sportLightShadowCull(shadowSpotData.cameraCullInfo, context);\n                context.cameraShaderValue = shadowSpotData.cameraShaderValue;\n                Camera._updateMark++;\n\n                LayaGL.renderEngine.viewport(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\n                LayaGL.renderEngine.scissor(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\n                LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, null, 1);\n\n                if (scene._opaqueQueue.elements.length > 0) {\n                    context.changeViewport(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\n                    context.changeScissor(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\n                    Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);//阴影均为非透明队列\n                }\n                camera._applyCasterPassCommandBuffer(context);\n                shadowMap._end();\n                this._setupSpotShadowReceiverShaderValues(shaderValues);\n                context.pipelineMode = context.configPipeLineMode;\n                break;\n            case ShadowLightType.PointLight:\n                //TODO:\n                break;\n            default:\n                throw (\"There is no shadow of this type\");\n        }\n\n    }\n\n    /**\n     * 清理阴影数据\n     * @internal\n     */\n    cleanUp(): void {\n        this._shadowDirectLightMap && RenderTexture.recoverToPool(this._shadowDirectLightMap);\n        this._shadowSpotLightMap && RenderTexture.recoverToPool(this._shadowSpotLightMap);\n        this._shadowDirectLightMap = null;\n        this._shadowSpotLightMap = null;\n        this._light = null;\n    }\n}\n\n","import { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\nimport { Viewport } from \"../../../math/Viewport\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { ScreenQuad } from \"../ScreenQuad\";\nimport { Command } from \"./Command\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { RenderElement } from \"../RenderElement\";\nimport { Transform3D } from \"../../Transform3D\";\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { Camera } from \"../../Camera\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\nimport { ShaderPass } from \"../../../../RenderEngine/RenderShader/ShaderPass\";\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\n\n\n/**\n * 类用于创建从渲染源输出到渲染目标的指令\n */\nexport class BlitFrameBufferCMD {\n\t/**@internal */\n\tprivate static _pool: any[] = [];\n\t/** @internal */\n\tprivate static _defaultOffsetScale: Vector4 = new Vector4(0, 0, 1, 1);\n\t/** @internal */\n\tstatic shaderdata:ShaderData;\n\t/** @internal */\n\tprivate static GAMMAOUT:ShaderDefine;\n\tstatic __init__(): void {\n\t\tBlitFrameBufferCMD.shaderdata = LayaGL.renderOBJCreate.createShaderData(null);\n\t\tBlitFrameBufferCMD.GAMMAOUT = Shader3D.getDefineByName(\"GAMMAOUT\");\n\t}\n\t/**\n   * 渲染命令集\n   * @param source \n   * @param dest \n   * @param viewport \n   * @param offsetScale \n   * @param shader \n   * @param shaderData \n   * @param subShader \n   */\n\tstatic create(source: BaseTexture, dest: RenderTexture, viewport: Viewport, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0) {\n\t\tvar cmd: BlitFrameBufferCMD;\n\t\tcmd = BlitFrameBufferCMD._pool.length > 0 ? BlitFrameBufferCMD._pool.pop() : new BlitFrameBufferCMD();\n\t\tcmd._source = source;\n\t\tcmd._dest = dest;\n\t\tcmd._offsetScale = offsetScale;\n\t\tcmd.setshader(shader,subShader,shaderData);\n\t\tcmd._source&& cmd._texture_size.setValue(source.width,source.height,1.0/source.width,1.0/source.height);\n\t\t//cmd._shader = shader;\n\t\t//cmd._shaderData = shaderData;\n\t\t//cmd._subShader = subShader;\n\t\tcmd._viewPort = viewport;\n\t\treturn cmd;\n\t}\n\t/**@internal source 原始贴图*/\n\tprivate _source: BaseTexture = null;\n\t/**@internal dest 目标 如果为null，将会默认为主画布*/\n\tprivate _dest: RenderTexture = null;\n\t/**@internal 偏移缩放*/\n\tprivate _offsetScale: Vector4 = null;\n\t/**@internal */\n\t_texture_size:Vector4 = null;\n\t/**@internal 渲染shader*/\n\tprivate _shader: Shader3D = null;\n\t/**@internal 渲染数据*/\n\tprivate _shaderData: ShaderData = null;\n\t/**@internal subshader的节点*/\n\tprivate _subShader: number = 0;\n\t/**@internal 渲染设置*/\n\tprivate _viewPort: Viewport = null;\n\t// /**@internal */\n\t// private _sourceTexelSize: Vector4 = new Vector4();\n\t/**@internal */\n\tprivate _renderElement:RenderElement;\n    /**@internal */\n\tprivate _transform3D:Transform3D;\n\tconstructor(){\n        this._transform3D = LayaGL.renderOBJCreate.createTransform(null);\n        this._renderElement = new RenderElement();\n        this._renderElement.setTransform(this._transform3D);\n\t\tthis._renderElement.setGeometry(ScreenQuad.instance);\n\t\tthis._texture_size = new Vector4();\n    }\n\n\tset shaderData(value:ShaderData){\n        this._shaderData = value||BlitFrameBufferCMD.shaderdata;\n        this._renderElement._renderElementOBJ._materialShaderData = this._shaderData;\n    }\n\n\tsetshader(shader:Shader3D,subShader:number,shaderData:ShaderData){\n        this._shader = shader|| Command._screenShader;\n        this._subShader = subShader||0;\n\t\tthis.shaderData = shaderData;\n        this._renderElement.renderSubShader = this._shader.getSubShaderAt(this._subShader);\n    }\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trun(): void {\n\t\tif (!this._source || !this._viewPort)\n\t\t\treturn;\n\t\tvar source = this._source;\n\t\tvar dest = this._dest;\n\t\tvar shader: Shader3D = this._shader;\n\t\tvar shaderData: ShaderData = this._shaderData;\n\t\tvar viewport = this._viewPort;\n\n\t\tlet vph = RenderContext3D.clientHeight - viewport.y - viewport.height;\n\t\t\n\t\t// LayaGL.renderEngine.viewport(viewport.x, vph, viewport.width, viewport.height);\n\t\t// LayaGL.renderEngine.scissor(viewport.x, vph, viewport.width, viewport.height);\n\t\tlet context = RenderContext3D._instance;\n\t\tcontext.changeViewport(viewport.x, vph, viewport.width, viewport.height);\n        context.changeScissor(viewport.x, vph, viewport.width, viewport.height);\n\n\t\tshaderData.setTexture(Command.SCREENTEXTURE_ID, source);\n\t\tshaderData.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale || BlitFrameBufferCMD._defaultOffsetScale);\n\t\tsource && (shaderData.setVector(Command.MAINTEXTURE_TEXELSIZE_ID,this._texture_size));\n\t\t//this._sourceTexelSize.setValue(1.0 / source.width, 1.0 / source.height, source.width, source.height);\n\t\t(RenderTexture.currentActive) && (RenderTexture.currentActive._end());\n\t\tif(!dest){\n\t\t\tshaderData.addDefine(BlitFrameBufferCMD.GAMMAOUT);\n\t\t}else{\n\t\t\tdest._start();\n\t\t\tshaderData.removeDefine(BlitFrameBufferCMD.GAMMAOUT);\n\t\t}\n\t\t//LayaGL.textureContext.bindRenderTarget(null);\n\t\tvar subShader: SubShader = shader.getSubShaderAt(this._subShader);\n\t\tvar passes: ShaderPass[] = subShader._passes;\n\t\tScreenQuad.instance.invertY =false;\n\n\t\tcontext.destTarget = dest;\n        context._contextOBJ.applyContext(Camera._updateMark);\n\t\tcontext.drawRenderElement(this._renderElement);\n\t\t//RenderContext3D._instance.invertY ? ScreenQuad.instance.renderInvertUV() : ScreenQuad.instance.render();\n\t\t\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\trecover(): void {\n\t\tBlitFrameBufferCMD._pool.push(this);\n\t\tthis._source = null;\n\t\tthis._dest = null;\n\t\tthis._offsetScale = null;\n\t\tthis._shader = null;\n\t\tthis._shaderData = null;\n\t\tthis._viewPort = null;\n\t}\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { BaseRender } from \"../render/BaseRender\";\n\n/**\n * <code>类用来实现场景渲染节点管理<code/>\n */\nexport class SceneRenderManager {\n    /**@internal */\n    protected _sceneManagerOBJ: ISceneRenderManager;\n    \n    /**\n     * 实例化一个场景管理节点\n     */\n    constructor() {\n        this._sceneManagerOBJ = LayaGL.renderOBJCreate.createSceneRenderManager();\n    }\n\n    /**\n     * get RenderList\n     */\n    get list(): SingletonList<BaseRender> {\n        return this._sceneManagerOBJ.list;\n    }\n\n    set list(value: SingletonList<BaseRender>) {\n        this._sceneManagerOBJ.list = value;\n    }\n\n    /**\n     * add Render Node\n     * @param object \n     */\n    addRenderObject(object: BaseRender): void {\n        this._sceneManagerOBJ.addRenderObject(object);\n    }\n\n    /**\n     * remove Render Node\n     * @param object \n     */\n    removeRenderObject(object: BaseRender): void {\n        this._sceneManagerOBJ.removeRenderObject(object);\n    }\n\n    /**\n     * remove motion Object\n     * @param object \n     */\n    removeMotionObject(object: BaseRender): void {\n        this._sceneManagerOBJ.removeMotionObject(object);\n    }\n\n    /**\n     * update All Motion Render Data\n     */\n    updateMotionObjects(): void {\n        this._sceneManagerOBJ.updateMotionObjects();\n    }\n\n    /**\n     * add motion Render Data\n     * @param object \n     */\n    addMotionObject(object: BaseRender): void {\n        this._sceneManagerOBJ.addMotionObject(object);\n    }\n\n    /**\n     * destroy\n     */\n    destroy(): void {\n        this._sceneManagerOBJ.destroy();\n    }\n\n}","import { SingletonList } from \"../../../utils/SingletonList\";\nimport { UI3D } from \"./UI3D\";\n\nexport class UI3DManager{\n    private _UI3Dlist:SingletonList<UI3D> = new SingletonList<UI3D>();\n    constructor(){\n    }\n\n    add(value:UI3D){\n        this._UI3Dlist.add(value);\n    }\n\n    remove(value:UI3D){\n        this._UI3Dlist.remove(value);\n    }\n\n    //需要在\n    update(){\n        for(var i = 0,n = this._UI3Dlist.length;i<n;i++){\n            let elements = this._UI3Dlist.elements;\n            elements[i]._submitRT();\n        }\n    }\n\n    destory(){\n        this._UI3Dlist.destroy();\n    }\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\nimport { IBoundsCell } from \"../../../math/IBoundsCell\";\nimport { BVHSpatialBox } from \"./BVHSpatialBox\";\n\n/**\n * 接受空间分割管理的逻辑对象   容器\n */\nexport class BVHSpatialManager {\n    /**@internal */\n    bvhManager: Map<number, BVHSpatialBox<IBoundsCell>>;\n\n    /**@internal */\n    cellCount: number = 0;\n\n    /**@internal */\n    updateBVHBoxList: SingletonList<BVHSpatialBox<IBoundsCell>>;\n\n    /**\n     * 实例化BVHSpatialManager\n     */\n    constructor() {\n        this.bvhManager = new Map();\n        this.updateBVHBoxList = new SingletonList<BVHSpatialBox<IBoundsCell>>();\n    }\n\n    /**\n     * clear\n     */\n    clear() {\n        this.cellCount = 0;\n        this.updateBVHBoxList.clear();\n    }\n\n    /**\n     * destroy\n     */\n    destroy() {\n        this.bvhManager = null;\n        this.updateBVHBoxList.destroy();\n    }\n}\n\n/**\n * BVHConfig\n */\nexport class BVHSpatialConfig {\n    /**@internal 一个BVH节点最大的cell数，超过这个数会分离*/\n    public max_SpatialCount = 7;\n    /**@internal 最大BVH节点的大小*/\n    public limit_size = 32;\n    /**@internal 最小cellbuild数，如果小于这个数，不会BVH构建*/\n    public Min_BVH_Build_Nums = 10;\n}","import { Vector3 } from \"../../../../maths/Vector3\";\nimport { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { SingletonList } from \"../../../../utils/SingletonList\";\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\nimport { Bounds } from \"../../../math/Bounds\";\nimport { CollisionUtils } from \"../../../math/CollisionUtils\";\nimport { ContainmentType } from \"../../../math/ContainmentType\";\nimport { IBoundsCell } from \"../../../math/IBoundsCell\";\nimport { Plane } from \"../../../math/Plane\";\nimport { BVHSpatialConfig, BVHSpatialManager } from \"./SpatialManager\";\n\n/**\n * BVH子空间\n */\nexport class BVHSpatialBox<T> {\n    private static _tempV3: Vector3 = new Vector3();\n    private static _tempV3_2: Vector3 = new Vector3();\n\n    /**\n     * 包围盒和阴影相机的关系\n     * @param box\n     * @param cullInfo \n     * @returns 0: 不相交，1：包含， 2：相交\n     */\n    static sciContainsBox(box: Bounds, cullInfo: IShadowCullInfo) {\n        const p = BVHSpatialBox._tempV3;\n        const n = BVHSpatialBox._tempV3_2;\n        const boxMin = box.min;\n        const boxMax = box.max;\n        let result = ContainmentType.Contains;\n        for (let i = 0, nn = cullInfo.cullPlaneCount; i < nn; i++) {\n            const plane = cullInfo.cullPlanes[i];\n            const planeNor = plane.normal;\n\n            if (planeNor.x >= 0) {\n                p.x = boxMax.x;\n                n.x = boxMin.x;\n            } else {\n                p.x = boxMin.x;\n                n.x = boxMax.x;\n            }\n            if (planeNor.y >= 0) {\n                p.y = boxMax.y;\n                n.y = boxMin.y;\n            } else {\n                p.y = boxMin.y;\n                n.y = boxMax.y;\n            }\n            if (planeNor.z >= 0) {\n                p.z = boxMax.z;\n                n.z = boxMin.z;\n            } else {\n                p.z = boxMin.z;\n                n.z = boxMax.z;\n            }\n\n            if (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\n                return ContainmentType.Disjoint;\n            if (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\n                result = ContainmentType.Intersects;\n        }\n        return result;\n    }\n\n    /**\n     * 包围盒是否和阴影相机相交\n     * @param box \n     * @param cullInfo \n    */\n    static sciIntersectsBox(box: Bounds, cullInfo: IShadowCullInfo) {\n        const cullPlaneCount = cullInfo.cullPlaneCount;\n        const cullPlanes = cullInfo.cullPlanes;\n\n        const min: Vector3 = box.min;\n        const max: Vector3 = box.max;\n        const minX: number = min.x;\n        const minY: number = min.y;\n        const minZ: number = min.z;\n        const maxX: number = max.x;\n        const maxY: number = max.y;\n        const maxZ: number = max.z;\n\n        let pass: boolean = true;\n        for (let j = 0; j < cullPlaneCount; j++) {\n            const plane = cullPlanes[j];\n            const normal = plane.normal;\n            if (plane.distance + (normal.x * (normal.x < 0.0 ? minX : maxX)) + (normal.y * (normal.y < 0.0 ? minY : maxY)) + (normal.z * (normal.z < 0.0 ? minZ : maxZ)) < 0.0) {\n                pass = false;\n                break;\n            }\n        }\n        return pass;\n    }\n    /**@internal */\n    protected _bounds: Bounds;\n    /**@internal BVH实例数组 */\n    protected _cellList: Array<IBoundsCell>;\n    /**@internal 实例数量 */\n    protected _cellCount: number; //本空间分支下的逻辑对象总数量（包括子空间）\n    /**@internal 父节点 */\n    protected _parent: BVHSpatialBox<T>; //父空间（只有根节点无父空间）\n    /**@internal 子节点 */\n    protected _children0: BVHSpatialBox<T>;\n    protected _children1: BVHSpatialBox<T>;\n    /**此BVH设置 */\n    protected _config: BVHSpatialConfig;\n    /**BVH管理 */\n    protected _bvhmanager: BVHSpatialManager;\n    /**@internal 包围盒标记 */\n    _boundchanged: boolean;\n\n    /**\n     * 创建BVHSpaticalBox实例\n     * @param bvhmanager \n     * @param config \n     */\n    constructor(bvhmanager: BVHSpatialManager, config: BVHSpatialConfig) {\n        this._bounds = new Bounds(new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE));\n        this._cellList = [];\n        this._cellCount = 0;\n        this._bvhmanager = bvhmanager;\n        this._config = config;\n    }\n\n    /**\n     * 父节点\n     */\n    set parent(value: BVHSpatialBox<IBoundsCell>) {\n        this._parent = value;\n    }\n\n    get parent() {\n        return this._parent;\n    }\n\n    /**\n     * 去重\n     * @param cell \n     * @returns \n     */\n    private _isRepeat(cell: IBoundsCell): boolean {\n        return (this._cellList.indexOf(cell) != -1);\n    }\n\n    /**\n     * add one cell to list\n     * @param cell \n     */\n    private _addOneCell(cell: IBoundsCell) {\n        this._cellList.push(cell);\n        this._cellCount++;\n        this._bvhmanager.bvhManager.set(cell.id, this);\n        this._bvhmanager.cellCount++;\n        // this._addBounds(cell);\n    }\n\n    /**\n     * remove one cell to list\n     * @param cell \n     * @returns \n     */\n    private _removeOneCell(cell: IBoundsCell) {\n        let index = this._cellList.indexOf(cell);\n        if (index == -1)\n            return false;\n        this._cellCount--;\n        this._cellList.splice(index, 1);\n        this._bvhmanager.bvhManager.delete(cell.id);\n        this._bvhmanager.cellCount--;\n        return true;\n    }\n\n    /**\n     * 清除队列\n     * TODO 是否要清理bvhmanager\n     */\n    private _clearList() {\n        this._bvhmanager.cellCount -= this._cellCount;\n        this._cellCount = 0;\n        this._cellList = null;\n    }\n\n    /**\n     * 判断Float是否接近\n     * @param x \n     * @param y \n     * @returns \n     */\n    private _isFloatMax(x: number, y: number) {\n        return x - y > 0.0001;//x>y 切\n    }\n\n    /**\n     * 这个包围盒是否影响Box的包围盒大小\n     */\n    private _isBoundsContainedBySpatialBox(cell: IBoundsCell) {\n        let cellMin = cell.bounds.getMin();\n        let cellMax = cell.bounds.getMax();\n        let boxMin = this._bounds.getMin();\n        let boxMax = this._bounds.getMax();\n        //如果cell 包围盒在box包围盒中间,则不影响包围盒改变\n        if (this._isFloatMax(cellMin.x, boxMin.x) && this._isFloatMax(cellMin.y, boxMin.y) && this._isFloatMax(cellMin.z, boxMin.z) &&\n            this._isFloatMax(boxMax.x, cellMax.x) && this._isFloatMax(boxMax.y, cellMax.y) && this._isFloatMax(boxMax.z, cellMax.z)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 给box增加一个Bounds\n     * @param cell \n     */\n    private _addBounds(cell: IBoundsCell) {\n        this._boundchanged = this._isBoundsContainedBySpatialBox(cell);\n    }\n\n    /**\n     * 给box减少一个bounds\n     * @param cell \n     */\n    private _removeBounds(cell: IBoundsCell) {\n        this._boundchanged = this._isBoundsContainedBySpatialBox(cell);\n    }\n\n    /**\n     * fill one Cell\n     * add but dont Split immediately\n     */\n    fillCell(cell: IBoundsCell) {\n        if (this._isRepeat(cell)) {\n            return;\n        }\n        this._addOneCell(cell);\n        this._boundchanged = true;\n        this._bvhmanager.updateBVHBoxList.add(this);\n    }\n\n    /**\n     * fill remove one cell\n     * remove but dont split imediately\n     * @param cell \n     */\n    fillRemove(cell: IBoundsCell) {\n        if (!this._isRepeat(cell)) {\n            return;\n        }\n        this._removeOneCell(cell);\n        this._boundchanged = true;\n        this._bvhmanager.updateBVHBoxList.add(this);\n    }\n\n    /**\n     * add one Cell\n     * @param cell \n     * @returns \n     */\n    addCell(cell: IBoundsCell) {\n        if (this._isRepeat(cell)) {\n            return;\n        }\n        this._addOneCell(cell);\n        this._addBounds(cell);\n    }\n\n    /**\n     * remove one Cell\n     * @param cell \n     */\n    removeCell(cell: IBoundsCell) {\n        if (this._removeOneCell(cell)) {\n            this._removeBounds(cell);\n        }\n    }\n\n    /**\n     * 构建BVHBox\n     * @returns \n     */\n    splitBox() {\n        if (!this.isContentBox()) {\n            this._children0 && this._children0.splitBox();\n            this._children1 && this._children1.splitBox();\n            return;\n        }\n\n        let v1 = this._bounds.getExtent(); //获取包围盒轮廓\n\n        if ((this._config.max_SpatialCount > this._cellCount && this._config.limit_size >= 2 * Math.max(v1.x, v1.y, v1.z)) || this._cellCount <= 1)\n            return;\n\n        //sort方向尺寸大为分割方向\n        if (v1.x > v1.y && v1.x > v1.z)\n            this._cellList.sort((a: IBoundsCell, b: IBoundsCell) => {\n                if (a && b)\n                    return a.bounds.getCenter().x - b.bounds.getCenter().x;\n                else return 0;\n            }); //按照X轴方向分割\n        else if (v1.y > v1.x && v1.y > v1.z) //排序使分割位置更加合理\n            this._cellList.sort((a: IBoundsCell, b: IBoundsCell) => {\n                if (a && b) return a.bounds.getCenter().y - b.bounds.getCenter().y;\n                else return 0;\n            }); //按照Y轴方向分割\n        else if (v1.z > v1.x && v1.z > v1.y) //排序使分割位置更加合理\n            this._cellList.sort((a: IBoundsCell, b: IBoundsCell) => {\n                if (a && b) return a.bounds.getCenter().z - b.bounds.getCenter().z;\n                else return 0;\n            }); //按照Y轴方向分割\n        const mid = this._cellCount / 2 | 0; //找中间位置\n\n        this._children0 = this._creatChildNode();\n        this._children0.parent = this;\n        for (let i = 0; i < mid; i++) { //前一半逻辑对象放入第一个子空间中\n            const cell = this._cellList[i];\n            this._children0.fillCell(cell);\n            Bounds.merge(this._children0._bounds, cell.bounds, this._children0._bounds);\n        }\n        this._children0._boundchanged = false;\n        this._children0.splitBox();\n\n        this._children1 = this._creatChildNode();\n        this._children1.parent = this;\n\n        for (let i = mid; i < this._cellCount; i++) { //后一半逻辑对象放入第二个子空间中\n            const cell = this._cellList[i];\n            this._children1.fillCell(cell);\n            Bounds.merge(this._children1._bounds, cell.bounds, this._children1._bounds);\n        }\n        this._children1._boundchanged = false;\n        this._children1.splitBox();\n\n        this._clearList();\n    }\n\n    /**\n     * 获得最近的Content BVHBox\n     * @param checkPos \n     * @returns \n     */\n    getNearlist(checkPos: Vector3): BVHSpatialBox<T> {\n        if (this.isContentBox())\n            return this;\n        else {\n            let v1 = this._children0._bounds.getCenter();\n            let v2 = this._children1._bounds.getCenter();\n            return Vector3.distanceSquared(v1, checkPos) < Vector3.distanceSquared(v2, checkPos) ? this._children0.getNearlist(checkPos) : this._children1.getNearlist(checkPos);\n        }\n\n    }\n\n    /**\n     * 获得这个节点包含的所有content\n     * @param out \n     */\n    traverseBoundsCell(out: SingletonList<IBoundsCell>) {\n        if (this.isContentBox()) {\n            for (var i = 0; i < this._cellCount; i++) {\n                out.add(this._cellList[i]);\n            }\n        } else {\n            this._children0 && this._children0.traverseBoundsCell(out);\n            this._children1 && this._children1.traverseBoundsCell(out);\n        }\n    }\n\n    /**\n     * Override it\n     * @returns \n     */\n    protected _creatChildNode(): BVHSpatialBox<T> {\n        return new BVHSpatialBox<T>(this._bvhmanager, this._config);\n    }\n\n    /**\n     * 通过CameraCull查找逻辑对象\n     * @override\n     * @param frustum 视锥\n     * @param out 输出逻辑对象组\n     */\n    getItemByCameraCullInfo(cameraCullInfo: ICameraCullInfo, out: SingletonList<IBoundsCell>) {\n        var frustum: BoundFrustum = cameraCullInfo.boundFrustum;\n        const result = frustum.containsBoundBox(this._bounds);\n        if (result == 1) //完全包含\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\n        else if (result == 2) { //部分包含\n            if (this.isContentBox()) {\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\n                    if (frustum.intersects(this._cellList[i].bounds))\n                        out.add(this._cellList[i]);\n                }\n            } else {\n                this._children0.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\n                this._children1.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\n            }\n        }\n    }\n\n    /**\n     * 通过视锥查找逻辑对象\n     * @override\n     * @param frustum 视锥\n     * @param out 输出逻辑对象组\n     */\n    getItemByFrustum(frustum: BoundFrustum, out: SingletonList<IBoundsCell>) {\n        const result = frustum.containsBoundBox(this._bounds);\n        if (result == 1) //完全包含\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\n        else if (result == 2) { //部分包含\n            if (this.isContentBox()) {\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\n                    if (frustum.intersects(this._cellList[i].bounds))\n                        out.add(this._cellList[i]);\n                }\n            } else {\n                this._children0.getItemByFrustum(frustum, out); //处理子空间\n                this._children1.getItemByFrustum(frustum, out); //处理子空间\n            }\n        }\n    }\n\n    /**\n     * 通过阴影裁剪信息查找逻辑对象\n     * @override \n     * @param sci\n     * @param out \n     */\n    getItemBySCI(sci: IShadowCullInfo, out: SingletonList<IBoundsCell>) {\n        const result = BVHSpatialBox.sciContainsBox(this._bounds, sci);\n        if (result == 1) //完全包含\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\n        else if (result == 2) { //部分包含\n            if (this.isContentBox()) {\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\n                    if (BVHSpatialBox.sciIntersectsBox(this._cellList[i].bounds, sci))\n                        out.add(this._cellList[i]);\n                }\n            } else {\n                this._children0.getItemBySCI(sci, out); //处理子空间\n                this._children1.getItemBySCI(sci, out); //处理子空间\n            }\n        }\n    }\n\n    /**\n     * 重算包围盒\n     * null need Update by child\n     * contents need Update by List\n     */\n    recaculateBox() {\n        if (!!this._children0 && !!this._children1) {\n            Bounds.merge(this._children0._bounds, this._children1._bounds, this._bounds);\n        }\n        else if (this._cellList && this._cellList.length >= 1) {\n            this._cellList[0].bounds.cloneTo(this._bounds);\n            for (var i = 0, n = this._cellList.length; i < n; i++) {\n                Bounds.merge(this._cellList[i].bounds, this._bounds, this._bounds);\n            }\n        } else {\n            console.error(\"BVHSpatialBox is illegal\");\n        }\n        this.parent && this.parent.recaculateBox();\n        this._boundchanged = false;\n    }\n\n    /**\n     * 是否是根节点\n     * @returns \n     */\n    isRoot(): boolean {\n        return !this._parent;\n    }\n\n    /**\n     * 是否是叶节点\n     * @returns \n     */\n    isContentBox(): boolean {\n        return this._cellCount != 0;\n    }\n\n    /**\n     * 删除box\n     */\n    destroy() {\n        if (this.isContentBox()) {\n            this._cellList = null;\n        } else {\n            this._children0 && this._children0.destroy();\n            this._children1 && this._children1.destroy();\n            this._children0 = null;\n            this._children1 = null;\n        }\n        this._bounds = null;\n        this._config = null;\n        this._bvhmanager = null;\n    }\n\n}","import { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { SingletonList } from \"../../../../utils/SingletonList\";\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\nimport { IBoundsCell } from \"../../../math/IBoundsCell\";\nimport { BVHSpatialBox } from \"./BVHSpatialBox\";\nimport { BVHSpatialConfig, BVHSpatialManager } from \"./SpatialManager\";\n\n/**\n * BVH系统\n */\nexport class BVHSpatial {\n\n    /**@internal */\n    protected _BVHConfig: BVHSpatialConfig;\n\n    /**@internal */\n    protected _BVHManager: BVHSpatialManager;\n\n    /**@internal */\n    protected _BVHSpatialBox: BVHSpatialBox<IBoundsCell>;\n\n    /**@internal */\n    protected _isBuild: boolean = false;\n\n    /**\n     * Override it\n     * @returns \n     */\n    protected _creatChildNode(): BVHSpatialBox<IBoundsCell> {\n        return new BVHSpatialBox<IBoundsCell>(this._BVHManager, this._BVHConfig);\n    }\n\n    /**\n     * 创建BVH系统实例\n     */\n    constructor(bvhConfig: BVHSpatialConfig = null, bvhManager: BVHSpatialManager = null) {\n        this._BVHConfig = bvhConfig ? bvhConfig : new BVHSpatialConfig();\n        this._BVHManager = bvhManager ? bvhManager : new BVHSpatialManager();\n        this._BVHSpatialBox = this._creatChildNode();\n    }\n\n    /**\n     * 是否合法\n     * @param cell \n     * @returns \n     */\n    cellLegal(cell: IBoundsCell): boolean {\n        let extend = cell.bounds.getExtent();\n        return this._BVHConfig.limit_size > (Math.max(extend.x, extend.y, extend.z) * 2);// too large is cant \n    }\n\n    /**\n     * add one\n     * @param cell \n     */\n    addOne(cell: IBoundsCell) {\n        if (!this.cellLegal(cell)) {\n            return false\n        }\n        if (this._isBuild) {\n            let spatial = this._BVHSpatialBox.getNearlist(cell.bounds.getCenter());\n            spatial.addCell(cell);\n            this._BVHManager.updateBVHBoxList.add(spatial);\n        } else {\n            this._BVHSpatialBox.fillCell(cell);\n        }\n        return true;\n    }\n\n    /**\n     * remove one\n     * @param cell \n     * @returns \n     */\n    removeOne(cell: IBoundsCell) {\n        if (!this._BVHManager.bvhManager.has(cell.id)) {\n            return false;\n        }\n        if (this._isBuild) {\n            let spatial = this._BVHManager.bvhManager.get(cell.id);\n            spatial.removeCell(cell);\n            this._BVHManager.updateBVHBoxList.add(spatial);\n        } else {\n            this._BVHSpatialBox.fillRemove(cell);\n        }\n        return true;\n    }\n\n    /**\n     * remove\n     * @param cell \n     */\n    motionOne(cell: IBoundsCell) {\n        if (this._BVHSpatialBox.getNearlist(cell.bounds.getCenter()) == this._BVHManager.bvhManager.get(cell.id)) {\n            return;\n        } else {\n            this.removeOne(cell);\n            this.addOne(cell);\n        }\n\n    }\n\n    /**\n    * 通过CameraCull查找逻辑对象\n    * @override\n    * @param frustum 视锥\n    * @param out 输出逻辑对象组\n    */\n    getItemByCameraCullInfo(cameraCullInfo: ICameraCullInfo, out: SingletonList<IBoundsCell>) {\n        if (this._BVHManager.updateBVHBoxList.length > 0) {\n            this.update();\n        }\n        if (this._isBuild) {\n            this._BVHSpatialBox.getItemByCameraCullInfo(cameraCullInfo, out);\n        } else {\n            this._BVHSpatialBox.traverseBoundsCell(out);\n        }\n    }\n\n    /**\n     * 通过视锥查找逻辑对象\n     * @override\n     * @param frustum 视锥\n     * @param out 输出逻辑对象组\n     */\n    getItemByFrustum(frustum: BoundFrustum, out: SingletonList<IBoundsCell>) {\n        if (this._BVHManager.updateBVHBoxList.length > 0) {\n            this.update();\n        }\n        if (this._isBuild) {\n            this._BVHSpatialBox.getItemByFrustum(frustum, out);\n        } else {\n            this._BVHSpatialBox.traverseBoundsCell(out);\n        }\n\n    }\n\n    /**\n     * 通过阴影裁剪信息查找逻辑对象\n     * @override \n     * @param sci\n     * @param out \n     */\n    getItemBySCI(sci: IShadowCullInfo, out: SingletonList<IBoundsCell>) {\n        if (this._BVHManager.updateBVHBoxList.length > 0) {\n            this.update();\n        }\n        if (this._isBuild) {\n            this._BVHSpatialBox.getItemBySCI(sci, out);\n        } else {\n            this._BVHSpatialBox.traverseBoundsCell(out);\n        }\n    }\n\n    /**\n     * 帧循环，根据具体需求，选适合频率调用\n     */\n    update() {\n        if (!this._isBuild) {//first build\n            if (this._BVHManager.cellCount > this._BVHConfig.Min_BVH_Build_Nums) {\n                this._BVHSpatialBox.recaculateBox();\n                this._BVHSpatialBox.splitBox();//build\n                this._BVHManager.updateBVHBoxList.remove(this._BVHSpatialBox);\n                this._isBuild = true;\n            }\n            this._BVHManager.updateBVHBoxList.length = 0;\n        } else {\n            let list = this._BVHManager.updateBVHBoxList;\n            for (let i = 0, n = list.length; i < n; i++) {\n                let spatial = list.elements[i];\n                spatial._boundchanged && spatial.recaculateBox();\n                spatial.splitBox();\n            }\n            list.length = 0;\n        }\n    }\n\n    /**\n     * rebuild\n     */\n    rebuild() {\n        if (this._isBuild) {//reBuild\n            let out = new SingletonList<IBoundsCell>();\n            this._BVHSpatialBox.traverseBoundsCell(out);\n            this._BVHSpatialBox.destroy();\n            this._BVHManager.clear();\n            this._isBuild = false;\n            this._BVHSpatialBox = this._creatChildNode();\n            for (let i = 0, n = out.length; i < n; i++) {\n                this.addOne(out.elements[i]);\n            }\n            this._BVHSpatialBox.recaculateBox();\n            this._BVHSpatialBox.splitBox();//build\n        }\n    }\n\n    /**\n     * destroy\n     */\n    destroy() {\n        this._BVHSpatialBox.destroy();\n        this._BVHManager.destroy();\n    }\n}","import { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { SingletonList } from \"../../../../utils/SingletonList\";\nimport { Stat } from \"../../../../utils/Stat\";\nimport { FrustumCulling } from \"../../../graphics/FrustumCulling\";\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\nimport { BaseRender } from \"../../render/BaseRender\";\nimport { RenderContext3D } from \"../../render/RenderContext3D\";\nimport { BVHSpatialBox } from \"../bvh/BVHSpatialBox\";\n\nexport class BVHRenderBox<T> extends BVHSpatialBox<T>{\n\n    /**@internal BVH实例数组 */\n    protected _cellList: Array<BaseRender>;\n\n    /**\n     * Override it\n     * @returns \n     */\n    protected _creatChildNode(): BVHSpatialBox<T> {\n        return new BVHRenderBox<BaseRender>(this._bvhmanager, this._config);\n    }\n\n    /**\n     * 通过CameraCull查找逻辑对象\n     * @override\n     * @param frustum 视锥\n     * @param out 输出逻辑对象组\n     */\n    getItemByCameraCullInfo(cameraCullInfo: ICameraCullInfo, out: SingletonList<BaseRender>) {\n        var frustum: BoundFrustum = cameraCullInfo.boundFrustum;\n        const result = frustum.containsBoundBox(this._bounds);\n        if (result == 1) {\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\n            Stat.frustumCulling++;\n        } //完全包含\n        else if (result == 2) { //部分包含\n            if (this.isContentBox()) {\n                var cullMask: number = cameraCullInfo.cullingMask;\n                let staticMask = cameraCullInfo.staticMask;\n                let context = RenderContext3D._instance;\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\n                    var canPass: boolean;\n                    let render = this._cellList[i]\n                    canPass = (Math.pow(2, render.renderNode.layer) & cullMask) != 0 && render._enabled && (render.renderbitFlag == 0);\n                    canPass = canPass && ((render.renderNode.staticMask & staticMask) != 0);\n                    if (canPass) {\n                        Stat.frustumCulling++;\n                        if (!cameraCullInfo.useOcclusionCulling || render._needRender(frustum, context)) {\n                            out.add(render);\n                        }\n                    }\n                }\n            } else {\n                this._children0.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\n                this._children1.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\n            }\n        }\n    }\n\n    /**\n    * 通过阴影裁剪信息查找逻辑对象\n    * @override\n    * @param sci\n    * @param out \n    */\n    getItemBySCI(sci: IShadowCullInfo, out: SingletonList<BaseRender>) {\n        const result = BVHSpatialBox.sciContainsBox(this._bounds, sci);\n        if (result == 1) //完全包含\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\n        else if (result == 2) { //部分包含\n            if (this.isContentBox()) {\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\n                    var render = this._cellList[i];\n                    var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\n                    if (canPass) {\n                        Stat.frustumCulling++;\n                        let pass = FrustumCulling.cullingRenderBounds(render.bounds, sci);\n                        pass && out.add(render);\n                    }\n                    // if (BVHSpatialBox.sciIntersectsBox(this._cellList[i].bounds, sci))\n                    //     out.add(this._cellList[i]);\n                }\n            } else {\n                this._children0.getItemBySCI(sci, out); //处理子空间\n                this._children1.getItemBySCI(sci, out); //处理子空间\n            }\n        }\n    }\n\n}","import { BaseRender } from \"../../render/BaseRender\";\nimport { StaticFlag } from \"../../Sprite3D\";\nimport { BVHSpatial } from \"../bvh/BVHSpatial\";\nimport { BVHRenderBox } from \"./BVHRenderSpatialBox\";\n\nexport class BVHRenderSpatial extends BVHSpatial {\n    /**\n     * Override it\n     * @returns \n     */\n    protected _creatChildNode(): BVHRenderBox<BaseRender> {\n        return new BVHRenderBox<BaseRender>(this._BVHManager, this._BVHConfig);\n    }\n    \n    /**\n     * 是否合法\n     * @param cell \n     * @returns \n     */\n    cellLegal(cell: BaseRender): boolean {\n        if (cell.renderNode.staticMask == StaticFlag.StaticBatch&&super.cellLegal(cell))\n            return true;\n        return false;\n    }\n}","import { ISceneRenderManager } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { SingletonList } from \"../../../../utils/SingletonList\";\nimport { BaseRender } from \"../../render/BaseRender\";\nimport { BVHSpatialConfig } from \"../bvh/SpatialManager\";\nimport { SceneRenderManager } from \"../SceneRenderManager\";\nimport { BVHRenderSpatial } from \"./BVHRenderSpatial\";\n\nexport class BVHSceneRenderManager extends SceneRenderManager {\n    /**@internal */\n    protected _sceneManagerOBJ: ISceneRenderManager;\n    /**@internal */\n    private _bvhRenderSpatial: BVHRenderSpatial;\n\n    private _allRenderList:SingletonList<BaseRender>;\n\n    /**\n     * 实例化\n     */\n    constructor(bvhConfig:BVHSpatialConfig = null) {\n        super();\n        this._bvhRenderSpatial = new BVHRenderSpatial(bvhConfig);\n        this._allRenderList = new SingletonList<BaseRender>();\n    }\n\n    /**\n    * get RenderList\n    */\n    get list(): SingletonList<BaseRender> {\n        return this._allRenderList;\n    }\n\n    set list(value: SingletonList<BaseRender>) {\n        for(let i = 0,n = value.length;i<n;i++){\n            let render = value.elements[i];\n            this.addRenderObject(render);\n        }\n    }\n\n    get bvhSpatial(){\n        return this._bvhRenderSpatial;\n    }\n\n    get otherList(){\n        return this._sceneManagerOBJ.list;\n    }\n\n    /**\n     * add Render Node\n     * @param object \n     */\n    addRenderObject(object: BaseRender): void {\n        if (!this._bvhRenderSpatial.addOne(object)) {\n            this._sceneManagerOBJ.addRenderObject(object);\n        }\n        this._allRenderList.add(object);\n    }\n\n    /**\n     * remove Render Node\n     * @param object \n     */\n    removeRenderObject(object: BaseRender): void {\n        if (!this._bvhRenderSpatial.removeOne(object))\n            this._sceneManagerOBJ.removeRenderObject(object);\n        this._allRenderList.remove(object);\n    }\n\n    /**\n     * remove motion Object\n     * @param object \n     */\n    removeMotionObject(object: BaseRender): void {\n        this._sceneManagerOBJ.removeMotionObject(object);\n    }\n\n    /**\n     * update All Motion Render Data\n     */\n    updateMotionObjects(): void {\n        this._bvhRenderSpatial.update();\n        this._sceneManagerOBJ.updateMotionObjects();\n\n    }\n\n    /**\n     * add motion Render Data\n     * @param object \n     */\n    addMotionObject(object: BaseRender): void {\n        if (this._bvhRenderSpatial.cellLegal(object)) {\n            this._bvhRenderSpatial.motionOne(object);\n        } else {\n            this._sceneManagerOBJ.addMotionObject(object);\n        }\n    }\n\n    /**\n     * destroy\n     */\n    destroy(): void {\n        this._sceneManagerOBJ.destroy();\n        this._bvhRenderSpatial.destroy();\n        this._allRenderList .destroy();\n    }\n}","import { Vector3 } from \"../../../maths/Vector3\";\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { Stat } from \"../../../utils/Stat\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\n\n\nexport class CullPassBase implements ICullPass {\n    protected _cullList: SingletonList<BaseRender> = new SingletonList();\n\n    get cullList(): SingletonList<BaseRender> {\n        return this._cullList;\n    }\n\n    /**\n     * TODO\n\t * 视距与包围提裁剪\n\t * @param context \n\t * @param render \n\t * @returns \n\t */\n\tstatic cullDistanceVolume(context:RenderContext3D,render:BaseRender):boolean{\n\t\tlet camera = context.camera;\n\t\tif(!camera||!camera.transform) return false;\n\t\tlet bound = render.bounds;\n\t\tlet center = bound.getCenter();\n\t\tlet exten = bound.getExtent();\n\t\tlet dis:number = Vector3.distance(camera.transform.position,center);\n\t\tlet volum:number = Math.max(exten.x,exten.y,exten.z);\n\t\tif(volum/dis<render._ratioIgnor){\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n    cullByCameraCullInfo(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\n        this._cullList.length = 0;\n        var renders = renderManager.list.elements;\n        var boundFrustum: BoundFrustum = cameraCullInfo.boundFrustum;\n        var cullMask: number = cameraCullInfo.cullingMask;\n        let staticMask = cameraCullInfo.staticMask;\n        let context = RenderContext3D._instance;\n        for (var i: number = 0, n: number = renderManager.list.length; i < n; i++) {\n            var render = renders[i];\n            var canPass: boolean;\n            canPass = (Math.pow(2, render.renderNode.layer) & cullMask) != 0 && render._enabled && (render.renderbitFlag == 0);\n            canPass = canPass && (( render.renderNode.staticMask & staticMask) != 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                if (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum, context)) {\n                    this.cullList.add(render);\n                }\n            }\n        }\n    }\n\n    cullByShadowCullInfo(cullInfo: IShadowCullInfo, renderManager: ISceneRenderManager): void {\n        this._cullList.length = 0;\n        var renderList = renderManager.list;\n        var renders = renderList.elements;\n        for (var i: number = 0, n: number = renderList.length; i < n; i++) {\n            var render = renders[i];\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                let pass = FrustumCulling.cullingRenderBounds(render.bounds, cullInfo);\n                pass && this._cullList.add(render);\n                // if (pass) {\n                // \trender.distanceForSort = Vector3.distance(render.bounds.getCenter(), position);//TODO:合并计算浪费,或者合并后取平均值\n                // \tvar elements: RenderElement[] = render._renderElements;\n                // \tfor (var j: number = 0, m: number = elements.length; j < m; j++)\n                // \t\telements[j]._update(scene, context, null, null);\n                // }\n            }\n        }\n    }\n    cullingSpotShadow(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\n        this._cullList.length = 0;\n        let renders = renderManager.list.elements;\n        let boundFrustum: BoundFrustum = cameraCullInfo.boundFrustum;\n        let context = RenderContext3D._instance;\n        for (let i = 0, n = renderManager.list.length; i < n; i++) {\n            let render = renders[i];\n            let canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                if (render._needRender(boundFrustum, context))\n                    this._cullList.add(render);\n            }\n        }\n    }\n\n}","import { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { ISceneRenderManager } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { SingletonList } from \"../../../../utils/SingletonList\";\nimport { Stat } from \"../../../../utils/Stat\";\nimport { FrustumCulling } from \"../../../graphics/FrustumCulling\";\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\nimport { CullPassBase } from \"../../../RenderObjs/RenderObj/CullPass\";\nimport { BaseRender } from \"../../render/BaseRender\";\nimport { RenderContext3D } from \"../../render/RenderContext3D\";\nimport { BVHSceneRenderManager } from \"./BVHSceneRenderManager\";\n\n/**\n * 类实现BVH架构的裁剪Pass\n */\nexport class BVHCullPass extends CullPassBase {\n    protected _cullList: SingletonList<BaseRender> = new SingletonList();\n    /**\n     * 获得裁剪队列\n     */\n    get cullList(): SingletonList<BaseRender> {\n        return this._cullList;\n    }\n\n    /**\n     * 基于相机视锥裁剪\n     * @param cameraCullInfo \n     * @param renderManager \n     */\n    cullByCameraCullInfo(cameraCullInfo: ICameraCullInfo, renderManager: BVHSceneRenderManager): void {\n        this._cullList.length = 0;\n        //BVH\n        renderManager.bvhSpatial.getItemByCameraCullInfo(cameraCullInfo,this._cullList);\n        //Dynamic\n        var renderList = renderManager.otherList;\n        var renders = renderList.elements;\n        var boundFrustum: BoundFrustum = cameraCullInfo.boundFrustum;\n        var cullMask: number = cameraCullInfo.cullingMask;\n        let staticMask = cameraCullInfo.staticMask;\n        let context = RenderContext3D._instance;\n        for (var i: number = 0, n: number = renderList.length; i < n; i++) {\n            var render = renders[i];\n            var canPass: boolean;\n            canPass = (Math.pow(2, render.renderNode.layer) & cullMask) != 0 && render._enabled && (render.renderbitFlag == 0);\n            canPass = canPass && ((render.renderNode.staticMask & staticMask) != 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                if (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum, context)) {\n                    this.cullList.add(render);\n                }\n            }\n        }\n    }\n\n    /**\n     * 基于阴影视锥裁剪\n     * @param cullInfo \n     * @param renderManager \n     */\n    cullByShadowCullInfo(cullInfo: IShadowCullInfo, renderManager: BVHSceneRenderManager): void {\n        this._cullList.length = 0;\n        //BVH\n        renderManager.bvhSpatial.getItemBySCI(cullInfo,this._cullList);\n        //Dynamic\n        var renderList = renderManager.otherList;\n        var renders = renderList.elements;\n        for (var i: number = 0, n: number = renderList.length; i < n; i++) {\n            var render = renders[i];\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                let pass = FrustumCulling.cullingRenderBounds(render.bounds, cullInfo);\n                pass && this._cullList.add(render);\n            }\n        }\n    }\n\n    /**\n     * 基于Spot视锥的裁剪\n     * @param cameraCullInfo \n     * @param renderManager \n     */\n    cullingSpotShadow(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\n        //TODO\n    }\n} ","import { Config3D } from \"../../../../Config3D\";\nimport { ILaya } from \"../../../../ILaya\";\nimport { Sprite } from \"../../../display/Sprite\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Loader } from \"../../../net/Loader\";\nimport { Context } from \"../../../resource/Context\";\nimport { Texture2D } from \"../../../resource/Texture2D\";\nimport { Handler } from \"../../../utils/Handler\";\nimport { Timer } from \"../../../utils/Timer\";\nimport { ISubmit } from \"../../../webgl/submit/ISubmit\";\nimport { SubmitKey } from \"../../../webgl/submit/SubmitKey\";\nimport { Cluster } from \"../../graphics/renderPath/Cluster\";\nimport { SphericalHarmonicsL2 } from \"../../graphics/SphericalHarmonicsL2\";\nimport { Viewport } from \"../../math/Viewport\";\nimport { PhysicsComponent } from \"../../physics/PhysicsComponent\";\nimport { PhysicsSettings } from \"../../physics/PhysicsSettings\";\nimport { PhysicsSimulation } from \"../../physics/PhysicsSimulation\";\nimport { SkyBox } from \"../../resource/models/SkyBox\";\nimport { SkyDome } from \"../../resource/models/SkyDome\";\nimport { SkyRenderer } from \"../../resource/models/SkyRenderer\";\nimport { TextureCube } from \"../../resource/TextureCube\";\nimport { Utils3D } from \"../../utils/Utils3D\";\nimport { BaseCamera } from \"../BaseCamera\";\nimport { Camera, CameraClearFlags } from \"../Camera\";\nimport { AlternateLightQueue, LightQueue } from \"../light/LightQueue\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { RenderElement } from \"../render/RenderElement\";\nimport { Lightmap } from \"./Lightmap\";\nimport { Scene3DShaderDeclaration } from \"./Scene3DShaderDeclaration\";\nimport { ShadowCasterPass } from \"../../shadowMap/ShadowCasterPass\";\nimport { Physics3D } from \"../../Physics3D\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { BlitFrameBufferCMD } from \"../render/command/BlitFrameBufferCMD\";\nimport { DirectionLightCom } from \"../light/DirectionLightCom\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { PointLightCom } from \"../light/PointLightCom\";\nimport { SpotLightCom } from \"../light/SpotLightCom\";\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData, ShaderDataItem, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { UnifromBufferData, UniformBufferParamsType } from \"../../../RenderEngine/UniformBufferData\";\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { WebGL } from \"../../../webgl/WebGL\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { Prefab } from \"../../../resource/HierarchyResource\";\nimport { Stat } from \"../../../utils/Stat\";\nimport { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\nimport { ComponentDriver } from \"../../../components/ComponentDriver\";\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\nimport { LayaEnv } from \"../../../../LayaEnv\";\nimport { SceneRenderManager } from \"./SceneRenderManager\";\nimport { VolumeManager } from \"../../component/Volume/VolumeManager\";\nimport { UI3DManager } from \"../UI3D/UI3DManager\";\nimport { Scene } from \"../../../display/Scene\";\nimport { ReflectionProbe } from \"../../component/Volume/reflectionProbe/ReflectionProbe\";\nimport { AmbientMode } from \"./AmbientMode\";\nimport { BVHSpatialConfig } from \"./bvh/SpatialManager\";\nimport { BVHSceneRenderManager } from \"./BVHSceneRenderManager/BVHSceneRenderManager\";\nimport { BVHCullPass } from \"./BVHSceneRenderManager/BVHCullPass\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\n\n\n/**\n * 用于实现3D场景。\n */\nexport class Scene3D extends Sprite implements ISubmit {\n    /** @internal */\n    private static _lightTexture: Texture2D;\n    /** @internal */\n    private static _lightPixles: Float32Array;\n    /** @internal */\n    static _shadowCasterPass: ShadowCasterPass;\n    /**@internal */\n    static physicsSettings: PhysicsSettings;\n    /** reflection mode */\n    static REFLECTIONMODE_SKYBOX: number = 0;\n    static REFLECTIONMODE_CUSTOM: number = 1;\n    /** RenderQueue mode */\n    static SCENERENDERFLAG_RENDERQPAQUE = 0;\n    static SCENERENDERFLAG_SKYBOX = 1;\n    static SCENERENDERFLAG_RENDERTRANSPARENT = 2;\n    /**Scene3D UniformMap */\n    static sceneUniformMap: CommandUniformMap;\n    /** Scene UniformPropertyID */\n    /** @internal */\n    static FOGCOLOR: number;\n    /** @internal */\n    static FOGSTART: number;\n    /** @internal */\n    static FOGRANGE: number;\n    /** @internal */\n    static DIRECTIONLIGHTCOUNT: number;\n    /** @internal */\n    static LIGHTBUFFER: number;\n    /** @internal */\n    static CLUSTERBUFFER: number;\n    /** @internal */\n    static SUNLIGHTDIRECTION: number;\n    /** @internal */\n    static SUNLIGHTDIRCOLOR: number;\n\n    /** @internal */\n    static AMBIENTCOLOR: number;\n\n    /** @internal */\n    static TIME: number;\n    /**@internal */\n    static GIRotate: number;\n    /** @internal */\n    static sceneID: number;\n\n    static SceneUBOData: UnifromBufferData;\n    /**@internal scene uniform block */\n    static SCENEUNIFORMBLOCK: number;\n    //------------------legacy lighting-------------------------------\n    /** @internal */\n    static LIGHTDIRECTION: number;\n    /** @internal */\n    static LIGHTDIRCOLOR: number;\n    /** @internal */\n    static POINTLIGHTPOS: number;\n    /** @internal */\n    static POINTLIGHTRANGE: number;\n    /** @internal */\n    static POINTLIGHTATTENUATION: number;\n    /** @internal */\n    static POINTLIGHTCOLOR: number;\n    /** @internal */\n    static SPOTLIGHTPOS: number;\n    /** @internal */\n    static SPOTLIGHTDIRECTION: number;\n    /** @internal */\n    static SPOTLIGHTSPOTANGLE: number;\n    /** @internal */\n    static SPOTLIGHTRANGE: number;\n    /** @internal */\n    static SPOTLIGHTCOLOR: number;\n    //------------------legacy lighting-------------------------------\n    /** @internal 场景更新标记*/\n    static __updateMark: number = 0;\n    /** @internal*/\n    static _blitTransRT: RenderTexture;\n    /**@internal */\n    static _blitOffset: Vector4 = new Vector4();\n    /**@internal */\n    static mainCavansViewPort: Viewport = new Viewport(0, 0, 1, 1);\n\n    /**\n     * 场景更新标记\n     */\n    static set _updateMark(value: number) {\n        Scene3D.__updateMark = value;\n    }\n\n    static get _updateMark(): number {\n        return Scene3D.__updateMark;\n    }\n\n    /**\n     * init shaderData\n     */\n    static shaderValueInit() {\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG = Shader3D.getDefineByName(\"FOG\");\n        Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT = Shader3D.getDefineByName(\"DIRECTIONLIGHT\");\n        Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT = Shader3D.getDefineByName(\"POINTLIGHT\");\n        Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT = Shader3D.getDefineByName(\"SPOTLIGHT\");\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW = Shader3D.getDefineByName(\"SHADOW\");\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE = Shader3D.getDefineByName(\"SHADOW_CASCADE\");\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_LOW\");\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_HIGH\");\n\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT = Shader3D.getDefineByName(\"SHADOW_SPOT\");\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_LOW\");\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_HIGH\");\n\n        Scene3D.FOGCOLOR = Shader3D.propertyNameToID(\"u_FogColor\");\n        Scene3D.FOGSTART = Shader3D.propertyNameToID(\"u_FogStart\");\n        Scene3D.FOGRANGE = Shader3D.propertyNameToID(\"u_FogRange\");\n        Scene3D.DIRECTIONLIGHTCOUNT = Shader3D.propertyNameToID(\"u_DirationLightCount\");\n        Scene3D.LIGHTBUFFER = Shader3D.propertyNameToID(\"u_LightBuffer\");\n        Scene3D.CLUSTERBUFFER = Shader3D.propertyNameToID(\"u_LightClusterBuffer\");\n        Scene3D.TIME = Shader3D.propertyNameToID(\"u_Time\");\n        Scene3D.GIRotate = Shader3D.propertyNameToID(\"u_GIRotate\");\n        Scene3D.SCENEUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SCENE);\n\n        let sceneUniformMap: CommandUniformMap = Scene3D.sceneUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Scene3D\");\n        sceneUniformMap.addShaderUniform(Scene3D.FOGCOLOR, \"u_FogColor\");\n        sceneUniformMap.addShaderUniform(Scene3D.FOGSTART, \"u_FogStart\");\n        sceneUniformMap.addShaderUniform(Scene3D.FOGRANGE, \"u_FogRange\");\n        sceneUniformMap.addShaderUniform(Scene3D.DIRECTIONLIGHTCOUNT, \"u_DirationLightCount\");\n        sceneUniformMap.addShaderUniform(Scene3D.LIGHTBUFFER, \"u_LightBuffer\");\n        sceneUniformMap.addShaderUniform(Scene3D.CLUSTERBUFFER, \"u_LightClusterBuffer\");\n        sceneUniformMap.addShaderUniform(Scene3D.TIME, \"u_Time\");\n        sceneUniformMap.addShaderUniform(Scene3D.GIRotate, \"u_GIRotate\")\n        sceneUniformMap.addShaderUniform(Scene3D.SCENEUNIFORMBLOCK, UniformBufferObject.UBONAME_SCENE);\n    }\n\n    /**\n     * legency ShaderData\n     */\n    static legacyLightingValueInit() {\n        Scene3D.LIGHTDIRECTION = Shader3D.propertyNameToID(\"u_DirectionLight.direction\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRECTION, \"u_DirectionLight.direction\");\n        Scene3D.LIGHTDIRCOLOR = Shader3D.propertyNameToID(\"u_DirectionLight.color\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRCOLOR, \"u_DirectionLight.color\");\n        Scene3D.POINTLIGHTPOS = Shader3D.propertyNameToID(\"u_PointLight.position\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTPOS, \"u_PointLight.position\");\n        Scene3D.POINTLIGHTRANGE = Shader3D.propertyNameToID(\"u_PointLight.range\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTRANGE, \"u_PointLight.range\");\n        Scene3D.POINTLIGHTATTENUATION = Shader3D.propertyNameToID(\"u_PointLight.attenuation\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTATTENUATION, \"u_PointLight.attenuation\");\n        Scene3D.POINTLIGHTCOLOR = Shader3D.propertyNameToID(\"u_PointLight.color\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTCOLOR, \"u_PointLight.color\");\n        Scene3D.SPOTLIGHTPOS = Shader3D.propertyNameToID(\"u_SpotLight.position\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTPOS, \"u_SpotLight.position\");\n        Scene3D.SPOTLIGHTDIRECTION = Shader3D.propertyNameToID(\"u_SpotLight.direction\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTDIRECTION, \"u_DirectionLight.direction\");\n        Scene3D.SPOTLIGHTSPOTANGLE = Shader3D.propertyNameToID(\"u_SpotLight.spot\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTSPOTANGLE, \"u_SpotLight.spot\");\n        Scene3D.SPOTLIGHTRANGE = Shader3D.propertyNameToID(\"u_SpotLight.range\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTRANGE, \"u_SpotLight.range\");\n        Scene3D.SPOTLIGHTCOLOR = Shader3D.propertyNameToID(\"u_SpotLight.color\");\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTCOLOR, \"u_SpotLight.color\");\n    }\n\n    /**\n     * create Scene UniformBuffer\n     * @internal\n     * @returns \n     */\n    static createSceneUniformBlock(): UnifromBufferData {\n        if (!Scene3D.SceneUBOData) {\n            let uniformpara: Map<string, UniformBufferParamsType> = new Map<string, UniformBufferParamsType>();\n            // uniformpara.set(\"u_AmbientColor\", UniformBufferParamsType.Vector4);\n            uniformpara.set(\"u_Time\", UniformBufferParamsType.Number);\n            uniformpara.set(\"u_FogStart\", UniformBufferParamsType.Number);\n            uniformpara.set(\"u_FogRange\", UniformBufferParamsType.Number);\n            uniformpara.set(\"u_FogColor\", UniformBufferParamsType.Vector4);\n            let uniformMap = new Map<number, UniformBufferParamsType>();\n            uniformpara.forEach((value, key) => {\n                uniformMap.set(Shader3D.propertyNameToID(key), value);\n            });\n            Scene3D.SceneUBOData = new UnifromBufferData(uniformMap);\n        }\n        return Scene3D.SceneUBOData;\n    }\n\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        var multiLighting: boolean = Config3D._multiLighting;\n        if (multiLighting) {\n            const width = 4;\n            var maxLightCount: number = Config3D.maxLightCount;\n            var clusterSlices: Vector3 = Config3D.lightClusterCount;\n            Cluster.instance = new Cluster(clusterSlices.x, clusterSlices.y, clusterSlices.z, Math.min(Config3D.maxLightCount, Config3D._maxAreaLightCountPerClusterAverage));\n            Scene3D._lightTexture = Utils3D._createFloatTextureBuffer(width, maxLightCount);\n            Scene3D._lightTexture.lock = true;\n            Scene3D._lightPixles = new Float32Array(maxLightCount * width * 4);\n        }\n        Scene3D.shaderValueInit();\n        var configShaderValue: DefineDatas = Shader3D._configDefineValues;\n        if (!Config3D._multiLighting) {\n            (configShaderValue.add(Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING));\n            Scene3D.legacyLightingValueInit()\n        }\n        Scene3D._shadowCasterPass = new ShadowCasterPass();\n        //TODO:\n        if (LayaGL.renderEngine.getCapable(RenderCapable.GRAPHICS_API_GLES3) && WebGL._isWebGL2)\n            configShaderValue.add(Shader3D.SHADERDEFINE_GRAPHICS_API_GLES3);\n        else\n            configShaderValue.add(Shader3D.SHADERDEFINE_GRAPHICS_API_GLES2);\n        //UniformBuffer\n        if (Config3D._uniformBlock)\n            configShaderValue.add(Shader3D.SHADERDEFINE_ENUNIFORMBLOCK);\n\n        Physics3D._bullet && (Scene3D.physicsSettings = new PhysicsSettings());\n    }\n\n    /**\n     * 加载场景,注意:不缓存。\n     * @param url 模板地址。\n     * @param complete 完成回调。\n     */\n    static load(url: string, complete: Handler): void {\n        ILaya.loader.load(url).then((res: Prefab) => {\n            if (complete) {\n                let ret: Scene3D;\n                if (res) {\n                    let scene = res.create();\n                    if (scene instanceof Scene)\n                        ret = scene._scene3D;\n                    else\n                        ret = <Scene3D>scene;\n                }\n                complete.runWith([ret]);\n            }\n        });\n    }\n\n    /**ide配置文件使用 */\n    _reflectionsSource: number = 0;\n    /**ide配置文件使用 */\n    _reflectionsResolution: string = \"256\";\n    /**ide配置文件使用 */\n    _reflectionsIblSamples = 128;\n\n\n\n    /** @internal */\n    private _group: string;\n    /** @internal */\n    public _lightCount: number = 0;\n    /** @internal */\n    public _pointLights: LightQueue<PointLightCom> = new LightQueue();\n    /** @internal */\n    public _spotLights: LightQueue<SpotLightCom> = new LightQueue();\n    /** @internal */\n    public _directionLights: LightQueue<DirectionLightCom> = new LightQueue();\n    /** @internal */\n    public _alternateLights: AlternateLightQueue = new AlternateLightQueue();\n    /** @internal */\n    private _lightmaps: Lightmap[] = [];\n    /** @internal */\n    private _skyRenderer: SkyRenderer = new SkyRenderer();\n    /** @internal */\n    private _enableFog: boolean;\n    /** @internal */\n    private _timer: Timer;\n    /** @internal */\n    private _time: number = 0;\n    private _sceneReflectionProb: ReflectionProbe;\n\n    /**@internal */\n    _sunColor: Color = new Color(1.0, 1.0, 1.0);\n    /**@interanl */\n    _sundir: Vector3 = new Vector3();\n    /**@internal*/\n    _id = Scene3D.sceneID++;\n    /** @internal */\n    _mainDirectionLight: DirectionLightCom;\n    /** @internal */\n    _mainSpotLight: SpotLightCom;\n    /** @internal */\n    _mainPointLight: PointLightCom;//TODO\n    /** @internal */\n    _physicsSimulation: PhysicsSimulation;\n    /**@internal */\n    _physicsdisableSimulation: boolean = false;\n    /** @internal 只读,不允许修改。*/\n    _collsionTestList: number[] = [];\n    /** @internal */\n    _shaderValues: ShaderData;\n    /** @interanl */\n    _sceneUniformData: UnifromBufferData;\n    /** @internal */\n    _sceneUniformObj: UniformBufferObject;\n    /** @internal */\n    _key: SubmitKey = new SubmitKey();\n\n    /** @internal */\n    _opaqueQueue: IRenderQueue = LayaGL.renderOBJCreate.createBaseRenderQueue(false);\n    /** @internal */\n    _transparentQueue: IRenderQueue = LayaGL.renderOBJCreate.createBaseRenderQueue(true);\n    /** @internal */\n    _cameraPool: BaseCamera[] = [];\n\n    /** @internal */\n    _volumeManager: VolumeManager;\n    /**@internal */\n    _UI3DManager: UI3DManager = new UI3DManager();\n    /**@internal */\n    _sceneRenderManager: SceneRenderManager;\n    /**@internal */\n    _cullPass: ICullPass;\n    /** 当前创建精灵所属遮罩层。*/\n    currentCreationLayer: number = Math.pow(2, 0);\n    /** 是否启用灯光。*/\n    enableLight: boolean = true;\n    /**lightShadowMap 更新频率 @internal */\n    _ShadowMapupdateFrequency:number = 1;\n    /** @internal */\n    _nativeObj: any;\n    \n\n\n    /**\n     * set SceneRenderableManager\n     */\n    set sceneRenderableManager(manager: SceneRenderManager) {\n        manager.list = this._sceneRenderManager.list;\n        this._sceneRenderManager = manager;\n    }\n\n    get sceneRenderableManager(): SceneRenderManager {\n        return this._sceneRenderManager;\n    }\n\n    /**\n     * set ICullPass\n     */\n    set cullPass(cullPass: ICullPass) {\n        this._cullPass = cullPass;\n    }\n\n    /**\n     * 是否允许雾化。\n     */\n    get enableFog(): boolean {\n        return this._enableFog;\n    }\n\n    set enableFog(value: boolean) {\n        if (this._enableFog !== value) {\n            this._enableFog = value;\n            if (value) {\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\n            } else\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\n        }\n    }\n\n    /**\n     * 雾化颜色。\n     */\n    get fogColor(): Color {\n        return this._shaderValues.getColor(Scene3D.FOGCOLOR);\n    }\n\n    set fogColor(value: Color) {\n        this._shaderValues.setColor(Scene3D.FOGCOLOR, value);\n    }\n\n    /**\n     * 雾化起始位置。\n     */\n    get fogStart(): number {\n        return this._shaderValues.getNumber(Scene3D.FOGSTART);\n    }\n\n    set fogStart(value: number) {\n        this._shaderValues.setNumber(Scene3D.FOGSTART, value);\n    }\n\n    /**\n     * 雾化范围。\n     */\n    get fogRange(): number {\n        return this._shaderValues.getNumber(Scene3D.FOGRANGE);\n    }\n\n    set fogRange(value: number) {\n        this._shaderValues.setNumber(Scene3D.FOGRANGE, value);\n    }\n\n    //0-2PI\n    set GIRotate(value: number) {\n        this._shaderValues.setNumber(Scene3D.GIRotate, value);\n    }\n\n    get GIRotate() {\n        return this._shaderValues.getNumber(Scene3D.GIRotate);\n    }\n\n    /**\n     * 环境光模式。\n     * 如果值为AmbientMode.SolidColor一般使用ambientColor作为环境光源，如果值为如果值为AmbientMode.SphericalHarmonics一般使用ambientSphericalHarmonics作为环境光源。\n     */\n    get ambientMode(): AmbientMode {\n        return this._sceneReflectionProb.ambientMode;\n    }\n\n    set ambientMode(value: AmbientMode) {\n        this._sceneReflectionProb.ambientMode = value;\n    }\n\n    get sceneReflectionProb(): ReflectionProbe {\n        return this._sceneReflectionProb;\n    }\n\n    /**\n     * @internal\n     */\n    set sceneReflectionProb(value: ReflectionProbe) {\n        this._sceneReflectionProb = value;\n    }\n\n    /**\n     * 固定颜色环境光。\n     */\n    get ambientColor(): Color {\n        return this._sceneReflectionProb.ambientColor;\n    }\n\n    set ambientColor(value: Color) {\n        this._sceneReflectionProb.ambientColor = value;\n    }\n\n\n    /**\n     * 设置环境漫反射的强度\n     */\n    get ambientIntensity(): number {\n        return this._sceneReflectionProb.ambientIntensity;\n    }\n\n    set ambientIntensity(value: number) {\n        this._sceneReflectionProb.ambientIntensity = value;\n    }\n\n    /**\n     * 设置反射探针强度\n     */\n    get reflectionIntensity(): number {\n        return this._sceneReflectionProb.reflectionIntensity;\n    }\n\n    set reflectionIntensity(value: number) {\n        this._sceneReflectionProb.reflectionIntensity = value;\n    }\n\n    /**\n     * ambient sh\n     */\n    public get ambientSH(): Float32Array {\n        return this._sceneReflectionProb.ambientSH;\n    }\n    public set ambientSH(value: Float32Array) {\n        this._sceneReflectionProb.ambientSH = value;\n    }\n    /**\n     * ambient iblTexture\n     */\n    public get iblTex(): TextureCube {\n        return this._sceneReflectionProb.iblTex;\n\n    }\n    public set iblTex(value: TextureCube) {\n        this._sceneReflectionProb.iblTex = value\n    }\n\n    /**\n     * ambient rgbd compress\n     */\n    public get iblTexRGBD(): boolean {\n        return this._sceneReflectionProb.iblTexRGBD;\n    }\n    public set iblTexRGBD(value: boolean) {\n        this._sceneReflectionProb.iblTexRGBD = value;\n    }\n\n    /**\n     * 天空渲染器。\n     */\n    get skyRenderer(): SkyRenderer {\n        return this._skyRenderer;\n    }\n\n    /**\n     * 物理模拟器。\n     */\n    get physicsSimulation(): PhysicsSimulation {\n        return this._physicsSimulation;\n    }\n\n    /**\n     * 场景时钟。\n     * @override\n     */\n    get timer(): Timer {\n        return this._timer;\n    }\n\n    set timer(value: Timer) {\n        this._timer = value;\n    }\n\n    /**\n     * 光照贴图数组,返回值为浅拷贝数组。\n     */\n    get lightmaps(): Lightmap[] {\n        return this._lightmaps.slice();\n    }\n\n    set lightmaps(value: Lightmap[]) {\n        var maps: Lightmap[] = this._lightmaps;\n        if (maps) {\n            for (var i: number = 0, n: number = maps.length; i < n; i++) {\n                var map: Lightmap = maps[i];\n                map.lightmapColor && map.lightmapColor._removeReference();\n                map.lightmapDirection && map.lightmapDirection._removeReference();\n            }\n        }\n        if (value) {\n            var count: number = value.length;\n            maps.length = count;\n            for (i = 0; i < count; i++) {\n                var map: Lightmap = value[i];\n                map.lightmapColor && map.lightmapColor._addReference();\n                map.lightmapDirection && map.lightmapDirection._addReference();\n                maps[i] = map;\n            }\n        } else {\n            maps.length = 0;\n        }\n    }\n\n\t/**\n     * 阴影图更新频率（如果无自阴影，可以加大频率优化性能）\n     */\n    get shadowMapFrequency(){\n        return this._ShadowMapupdateFrequency;\n    }\n\n    set shadowMapFrequency(value:number){\n        this._ShadowMapupdateFrequency = value;\n    }\n\n\n    /**\n     * 创建一个 <code>Scene3D</code> 实例。\n     */\n    constructor() {\n        super();\n\n        this._is3D = true;\n        this._componentDriver = new ComponentDriver();\n        this._timer = ILaya.timer;\n\n        if (LayaEnv.isConch && !(window as any).conchConfig.conchWebGL) {\n            this._nativeObj = new (window as any).conchSubmitScene3D(this.renderSubmit.bind(this));\n        }\n        if (Physics3D._bullet)\n            this._physicsSimulation = new PhysicsSimulation(Scene3D.physicsSettings);\n\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(null);\n        this._shaderValues._defineDatas.addDefineDatas(Shader3D._configDefineValues);\n        if (Config3D._uniformBlock) {\n            //SceneUniformBlock\n            this._sceneUniformObj = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SCENE, 0);\n            this._sceneUniformData = Scene3D.createSceneUniformBlock();\n            if (!this._sceneUniformObj) {\n                this._sceneUniformObj = UniformBufferObject.create(UniformBufferObject.UBONAME_SCENE, BufferUsage.Dynamic, this._sceneUniformData.getbyteLength(), true);\n            }\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_SCENE, this._sceneUniformObj, this._sceneUniformData);\n            this._shaderValues.setUniformBuffer(Scene3D.SCENEUNIFORMBLOCK, this._sceneUniformObj);\n\n            //ShadowUniformBlock\n            //Scene3D._shadowCasterPass\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_SHADOW, Scene3D._shadowCasterPass._castDepthBufferOBJ, Scene3D._shadowCasterPass._castDepthBufferData);\n            this._shaderValues.setUniformBuffer(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), Scene3D._shadowCasterPass._castDepthBufferOBJ);\n        }\n\n        this.enableFog = false;\n        this.fogStart = 300;\n        this.fogRange = 1000;\n        this.fogColor = new Color(0.7, 0.7, 0.7);\n\n        this.GIRotate = 0;\n\n        this._scene = this;\n        if (Config3D.useBVHCull) {\n            let bvhConfig = new BVHSpatialConfig();\n            bvhConfig.Min_BVH_Build_Nums = Config3D.BVH_Min_Build_nums;\n            bvhConfig.limit_size = Config3D.BVH_limit_size;\n            bvhConfig.max_SpatialCount = Config3D.BVH_max_SpatialCount;\n            this._sceneRenderManager = new BVHSceneRenderManager(bvhConfig);\n            this._cullPass = new BVHCullPass();\n        } else {\n            this._sceneRenderManager = new SceneRenderManager();\n            this._cullPass = LayaGL.renderOBJCreate.createCullPass();\n        }\n\n        //this._cullPass = LayaGL.renderOBJCreate.createCullPass();\n\n        // if (Scene3D.octreeCulling)\n        // \tthis._octree = new BoundsOctree(Scene3D.octreeInitialSize, Scene3D.octreeInitialCenter, Scene3D.octreeMinNodeSize, Scene3D.octreeLooseness);\n        if (Config3D.debugFrustumCulling) {\n            // this._debugTool = new PixelLineSprite3D();\n            // var lineMaterial: PixelLineMaterial = new PixelLineMaterial();\n            // lineMaterial.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n            // lineMaterial.alphaTest = false;\n            // lineMaterial.depthWrite = false;\n            // lineMaterial.cull = RenderState.CULL_BACK;\n            // lineMaterial.blend = RenderState.BLEND_ENABLE_ALL;\n            // lineMaterial.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n            // lineMaterial.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n            // lineMaterial.depthTest = RenderState.DEPTHTEST_LESS;\n            // this._debugTool.pixelLineRenderer.sharedMaterial = lineMaterial;\n        }\n\n        this._volumeManager = new VolumeManager();\n        this._UI3DManager = new UI3DManager();\n        this.sceneReflectionProb = this._volumeManager.reflectionProbeManager.sceneReflectionProbe;\n\n        this._sceneReflectionProb.reflectionIntensity = 1.0;\n        this.ambientColor = new Color(0.212, 0.227, 0.259);\n    }\n\n    /**\n     *@internal\n     */\n    protected _update(): void {\n        var delta: number = this.timer._delta / 1000;\n        this._time += delta;\n        this._shaderValues.setNumber(Scene3D.TIME, this._time);\n        //Physics\n        let simulation: PhysicsSimulation = this._physicsSimulation;\n        if (LayaEnv.isPlaying) {\n            if (Physics3D._enablePhysics && !PhysicsSimulation.disableSimulation) {\n                simulation._updatePhysicsTransformFromRender();\n                PhysicsComponent._addUpdateList = false;//物理模拟器会触发_updateTransformComponent函数,不加入更新队列\n                //simulate physics\n                simulation._simulate(delta);\n                //update character sprite3D transforms from physics engine simulation\n                simulation._updateCharacters();\n                PhysicsComponent._addUpdateList = true;\n                //handle frame contacts\n                simulation._updateCollisions();\n                //send contact events\n                simulation.dispatchCollideEvent();\n            }\n        }\n\n        if (this._volumeManager.needreCaculateAllRenderObjects())\n            this._volumeManager.reCaculateAllRenderObjects(this._sceneRenderManager.list);\n        else\n            this._volumeManager.handleMotionlist();\n\n        this._componentDriver.callStart();\n        this._componentDriver.callUpdate();\n\n        this._componentDriver.callLateUpdate();\n        this._componentDriver.callDestroy();\n\n        this._sceneRenderManager.updateMotionObjects();\n\n        this._UI3DManager.update();\n    }\n\n    /**\n     * @internal\n     */\n    private _binarySearchIndexInCameraPool(camera: BaseCamera): number {\n        var start: number = 0;\n        var end: number = this._cameraPool.length - 1;\n        var mid: number;\n        while (start <= end) {\n            mid = Math.floor((start + end) / 2);\n            var midValue: number = this._cameraPool[mid]._renderingOrder;\n            if (midValue == camera._renderingOrder)\n                return mid;\n            else if (midValue > camera._renderingOrder)\n                end = mid - 1;\n            else\n                start = mid + 1;\n        }\n        return start;\n    }\n\n    /**\n     * @internal\n     */\n    _getGroup(): string {\n        return this._group;\n    }\n\n    /**\n     * @internal\n     */\n    _setGroup(value: string): void {\n        this._group = value;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onActive(): void {\n        super._onActive();\n        ILaya.stage._scene3Ds.push(this);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onInActive(): void {\n        super._onInActive();\n        var scenes: any[] = ILaya.stage._scene3Ds;\n        scenes.splice(scenes.indexOf(this), 1);\n    }\n\n    /**\n     * @internal\n     */\n    private _prepareSceneToRender(): void {\n        var shaderValues: ShaderData = this._shaderValues;\n        var multiLighting: boolean = Config3D._multiLighting;\n        if (multiLighting) {\n            var ligTex: Texture2D = Scene3D._lightTexture;\n            var ligPix: Float32Array = Scene3D._lightPixles;\n            const pixelWidth: number = ligTex.width;\n            const floatWidth: number = pixelWidth * 4;\n            var curCount: number = 0;\n            var dirCount: number = this._directionLights._length;\n            var dirElements: DirectionLightCom[] = this._directionLights._elements;\n            if (dirCount > 0) {\n                var sunLightIndex: number = this._directionLights.getBrightestLight();//get the brightest light as sun\n                this._mainDirectionLight = dirElements[sunLightIndex];\n                this._directionLights.normalLightOrdering(sunLightIndex);\n                for (var i: number = 0; i < dirCount; i++, curCount++) {\n                    var dirLight: DirectionLightCom = dirElements[i];\n                    var dir: Vector3 = dirLight._direction;\n                    var intCor: Vector3 = dirLight._intensityColor;\n                    var off: number = floatWidth * curCount;\n                    intCor.x = Color.gammaToLinearSpace(dirLight.color.r);\n                    intCor.y = Color.gammaToLinearSpace(dirLight.color.g);\n                    intCor.z = Color.gammaToLinearSpace(dirLight.color.b);\n                    Vector3.scale(intCor, dirLight._intensity, intCor);\n                    (dirLight.owner as Sprite3D).transform.worldMatrix.getForward(dir);\n                    Vector3.normalize(dir, dir);//矩阵有缩放时需要归一化\n                    ligPix[off] = intCor.x;\n                    ligPix[off + 1] = intCor.y;\n                    ligPix[off + 2] = intCor.z;\n                    ligPix[off + 3] = dirLight._lightmapBakedType;//0: MIX  1:REALTIME\n                    ligPix[off + 4] = dir.x;\n                    ligPix[off + 5] = dir.y;\n                    ligPix[off + 6] = dir.z;\n                    // if (i == 0) {\n                    // \tthis._setShaderValue(Scene3D.SUNLIGHTDIRCOLOR, intCor);\n                    // \tthis._setShaderValue(Scene3D.SUNLIGHTDIRECTION, dir);\n                    // }\n                    if (i == 0) {\n                        this._sunColor = dirLight.color;\n                        this._sundir = dir;\n                    }\n                }\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\n            }\n            else {\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\n            }\n\n            var poiCount: number = this._pointLights._length;\n            if (poiCount > 0) {\n                var poiElements: PointLightCom[] = this._pointLights._elements;\n                var mainPointLightIndex: number = this._pointLights.getBrightestLight();\n                this._mainPointLight = poiElements[mainPointLightIndex];\n                this._pointLights.normalLightOrdering(mainPointLightIndex);\n                for (var i: number = 0; i < poiCount; i++, curCount++) {\n                    var poiLight: PointLightCom = poiElements[i];\n                    var pos: Vector3 = (poiLight.owner as Sprite3D).transform.position;\n                    var intCor: Vector3 = poiLight._intensityColor;\n                    var off: number = floatWidth * curCount;\n                    intCor.x = Color.gammaToLinearSpace(poiLight.color.r);\n                    intCor.y = Color.gammaToLinearSpace(poiLight.color.g);\n                    intCor.z = Color.gammaToLinearSpace(poiLight.color.b);\n                    Vector3.scale(intCor, poiLight._intensity, intCor);\n                    ligPix[off] = intCor.x;\n                    ligPix[off + 1] = intCor.y;\n                    ligPix[off + 2] = intCor.z;\n                    ligPix[off + 3] = poiLight.range;\n                    ligPix[off + 4] = pos.x;\n                    ligPix[off + 5] = pos.y;\n                    ligPix[off + 6] = pos.z;\n                    ligPix[off + 7] = poiLight._lightmapBakedType;//0: MIX  1:REALTIME\n                }\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\n            }\n            else {\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\n            }\n\n            var spoCount: number = this._spotLights._length;\n            if (spoCount > 0) {\n                var spoElements: SpotLightCom[] = this._spotLights._elements;\n                var mainSpotLightIndex: number = this._spotLights.getBrightestLight();\n                this._mainSpotLight = spoElements[mainSpotLightIndex];\n                this._spotLights.normalLightOrdering(mainSpotLightIndex)\n                for (var i: number = 0; i < spoCount; i++, curCount++) {\n                    var spoLight: SpotLightCom = spoElements[i];\n                    var dir: Vector3 = spoLight._direction;\n                    var pos: Vector3 = (spoLight.owner as Sprite3D).transform.position;\n                    var intCor: Vector3 = spoLight._intensityColor;\n                    var off: number = floatWidth * curCount;\n                    intCor.x = Color.gammaToLinearSpace(spoLight.color.r);\n                    intCor.y = Color.gammaToLinearSpace(spoLight.color.g);\n                    intCor.z = Color.gammaToLinearSpace(spoLight.color.b);\n                    Vector3.scale(intCor, spoLight._intensity, intCor);\n                    (spoLight.owner as Sprite3D).transform.worldMatrix.getForward(dir);\n                    Vector3.normalize(dir, dir);\n                    ligPix[off] = intCor.x;\n                    ligPix[off + 1] = intCor.y;\n                    ligPix[off + 2] = intCor.z;\n                    ligPix[off + 3] = spoLight.range;\n                    ligPix[off + 4] = pos.x;\n                    ligPix[off + 5] = pos.y;\n                    ligPix[off + 6] = pos.z;\n                    ligPix[off + 7] = spoLight.spotAngle * Math.PI / 180;\n                    ligPix[off + 8] = dir.x;\n                    ligPix[off + 9] = dir.y;\n                    ligPix[off + 10] = dir.z;\n                    ligPix[off + 11] = spoLight._lightmapBakedType;//0: MIX  1:REALTIME\n                }\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\n            }\n            else {\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\n            }\n\n            (curCount > 0) && (ligTex.setSubPixelsData(0, 0, pixelWidth, curCount, ligPix, 0, false, false, false));\n            shaderValues.setTexture(Scene3D.LIGHTBUFFER, ligTex);\n            shaderValues.setInt(Scene3D.DIRECTIONLIGHTCOUNT, this._directionLights._length);\n            shaderValues.setTexture(Scene3D.CLUSTERBUFFER, Cluster.instance._clusterTexture);\n        }\n        else {\n            if (this._directionLights._length > 0) {\n                var dirLight: DirectionLightCom = this._directionLights._elements[0];\n                this._mainDirectionLight = dirLight;\n                dirLight._intensityColor.x = Color.gammaToLinearSpace(dirLight.color.r);\n                dirLight._intensityColor.y = Color.gammaToLinearSpace(dirLight.color.g);\n                dirLight._intensityColor.z = Color.gammaToLinearSpace(dirLight.color.b);\n                Vector3.scale(dirLight._intensityColor, dirLight._intensity, dirLight._intensityColor);\n\n                (dirLight.owner as Sprite3D).transform.worldMatrix.getForward(dirLight._direction);\n                Vector3.normalize(dirLight._direction, dirLight._direction);\n                shaderValues.setVector3(Scene3D.LIGHTDIRCOLOR, dirLight._intensityColor);\n                shaderValues.setVector3(Scene3D.LIGHTDIRECTION, dirLight._direction);\n                if (i == 0) {\n                    this._sunColor = dirLight.color;\n                    this._sundir = dirLight._direction;\n                }\n                // this._setShaderValue(Scene3D.SUNLIGHTDIRCOLOR, dirLight._intensityColor);\n                // this._setShaderValue(Scene3D.SUNLIGHTDIRECTION, dirLight._direction);\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\n            }\n            else {\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\n            }\n            if (this._pointLights._length > 0) {\n                var poiLight: PointLightCom = this._pointLights._elements[0];\n                this._mainPointLight = poiLight;\n                poiLight._intensityColor.x = Color.gammaToLinearSpace(poiLight.color.r);\n                poiLight._intensityColor.y = Color.gammaToLinearSpace(poiLight.color.g);\n                poiLight._intensityColor.z = Color.gammaToLinearSpace(poiLight.color.b);\n                Vector3.scale(poiLight._intensityColor, poiLight._intensity, poiLight._intensityColor);\n                shaderValues.setVector3(Scene3D.POINTLIGHTCOLOR, poiLight._intensityColor);\n                shaderValues.setVector3(Scene3D.POINTLIGHTPOS, (poiLight.owner as Sprite3D).transform.position);\n                shaderValues.setNumber(Scene3D.POINTLIGHTRANGE, poiLight.range);\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\n            }\n            else {\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\n            }\n            if (this._spotLights._length > 0) {\n                var spotLight: SpotLightCom = this._spotLights._elements[0];\n                this._mainSpotLight = spotLight;\n                spotLight._intensityColor.x = Color.gammaToLinearSpace(spotLight.color.r);\n                spotLight._intensityColor.y = Color.gammaToLinearSpace(spotLight.color.g);\n                spotLight._intensityColor.z = Color.gammaToLinearSpace(spotLight.color.b);\n                Vector3.scale(spotLight._intensityColor, spotLight._intensity, spotLight._intensityColor);\n                shaderValues.setVector3(Scene3D.SPOTLIGHTCOLOR, spotLight._intensityColor);\n                shaderValues.setVector3(Scene3D.SPOTLIGHTPOS, (spotLight.owner as Sprite3D).transform.position);\n                (spotLight.owner as Sprite3D).transform.worldMatrix.getForward(spotLight._direction);\n                Vector3.normalize(spotLight._direction, spotLight._direction);\n                shaderValues.setVector3(Scene3D.SPOTLIGHTDIRECTION, spotLight._direction);\n                shaderValues.setNumber(Scene3D.SPOTLIGHTRANGE, spotLight.range);\n                shaderValues.setNumber(Scene3D.SPOTLIGHTSPOTANGLE, spotLight.spotAngle * Math.PI / 180);\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\n            }\n            else {\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\n            }\n        }\n    }\n\n    private _cullInfoCamera: Camera\n    get cullInfoCamera(): Camera {\n        return this._cullInfoCamera;\n    }\n    /**\n     * scence外的Camera渲染场景,需要设置这个接口\n     * @param camera \n     */\n    _setCullCamera(camera: Camera) {\n        this._cullInfoCamera = camera;\n    }\n\n    /**\n     * 重新计算CullCamera\n     */\n    recaculateCullCamera() {\n        this._cullInfoCamera = this._cameraPool[0] as Camera;\n        this._cameraPool.forEach(element => {\n            if (this.cullInfoCamera.maxlocalYDistance < (element as Camera).maxlocalYDistance) {\n                this._cullInfoCamera = element as Camera;\n            }\n        });\n    }\n\n\n    /**\n     * @internal\n     */\n    _addCamera(camera: BaseCamera): void {\n        var index: number = this._binarySearchIndexInCameraPool(camera);\n        var order: number = camera._renderingOrder;\n        var count: number = this._cameraPool.length;\n        while (index < count && this._cameraPool[index]._renderingOrder <= order)\n            index++;\n        this._cameraPool.splice(index, 0, camera);\n    }\n\n    /**\n     * @internal\n     */\n    _removeCamera(camera: BaseCamera): void {\n        this._cameraPool.splice(this._cameraPool.indexOf(camera), 1);\n    }\n\n    /**\n     * @internal\n     */\n    _preCulling(context: RenderContext3D, camera: Camera): void {\n        this._clearRenderQueue();\n        var cameraCullInfo: ICameraCullInfo = FrustumCulling._cameraCullInfo;\n        var cameraPos = cameraCullInfo.position = camera._transform.position;\n        cameraCullInfo.cullingMask = camera.cullingMask;\n        cameraCullInfo.staticMask = camera.staticMask;\n        cameraCullInfo.boundFrustum = camera.boundFrustum;\n        cameraCullInfo.useOcclusionCulling = camera.useOcclusionCulling;\n        this._cullPass.cullByCameraCullInfo(cameraCullInfo, this.sceneRenderableManager);\n        //addQueue\n        let list = this._cullPass.cullList;\n        let element = list.elements;\n        for (let i: number = 0; i < list.length; i++) {\n            let render = element[i];\n            render.distanceForSort = Vector3.distance(render.bounds.getCenter(), cameraPos);//TODO:合并计算浪费,或者合并后取平均值\n            var elements: RenderElement[] = render._renderElements;\n            for (var j: number = 0, m: number = elements.length; j < m; j++)\n                elements[j]._update(this, context, context.customShader, context.replaceTag);\n        }\n    }\n\n    /**\n     * @internal\n     * @param cullInfo \n     * @param context \n     */\n    _directLightShadowCull(cullInfo: IShadowCullInfo, context: RenderContext3D) {\n        this._clearRenderQueue();\n        const position: Vector3 = cullInfo.position;\n        this._cullPass.cullByShadowCullInfo(cullInfo, this.sceneRenderableManager);\n        let list = this._cullPass.cullList;\n        let element = list.elements;\n        for (let i: number = 0; i < list.length; i++) {\n            let render = element[i];\n            render.distanceForSort = Vector3.distance(render.bounds.getCenter(), position);//TODO:合并计算浪费,或者合并后取平均值\n            var elements: RenderElement[] = render._renderElements;\n            for (var j: number = 0, m: number = elements.length; j < m; j++)\n                elements[j]._update(this, context, null, null);\n        }\n    }\n\n    /**\n     * @internal\n     * @param cameraCullInfo \n     * @param context \n     */\n    _sportLightShadowCull(cameraCullInfo: ICameraCullInfo, context: RenderContext3D) {\n        this._clearRenderQueue();\n        this._cullPass.cullingSpotShadow(cameraCullInfo, this.sceneRenderableManager);\n        let list = this._cullPass.cullList;\n        let element = list.elements;\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\n            var render = element[i];\n            render.distanceForSort = Vector3.distance(render.bounds.getCenter(), cameraCullInfo.position);\n            var elements: RenderElement[] = render._renderElements;\n            for (var j: number = 0, m: number = elements.length; j < m; j++)\n                elements[j]._update(this, context, null, null);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _clear(state: RenderContext3D): void {\n        var viewport: Viewport = state.viewport;\n        var camera: Camera = <Camera>state.camera;\n        var renderTex: RenderTexture = camera._getRenderTexture();\n        var vpX: number, vpY: number;\n        var vpW: number = viewport.width;\n        var vpH: number = viewport.height;\n        let needInternalRT = camera._needInternalRenderTexture();\n\n        if (needInternalRT) {\n            vpX = 0;\n            vpY = 0;\n        }\n        else {\n            if (camera.renderTarget) {\n                vpX = viewport.x;\n                vpY = viewport.y;\n            }\n            else {\n                vpX = viewport.x;\n                vpY = camera._getCanvasHeight() - viewport.y - vpH;\n            }\n        }\n\n        LayaGL.renderEngine.viewport(vpX, vpY, vpW, vpH);\n        LayaGL.renderEngine.scissor(vpX, vpY, vpW, vpH);\n        state.changeViewport(vpX, vpY, vpW, vpH);\n        state.changeScissor(vpX, vpY, vpW, vpH);\n        Camera._context3DViewPortCatch.set(vpX, vpY, vpW, vpH);\n        Camera._contextScissorPortCatch.setValue(vpX, vpY, vpW, vpH);\n\n        var clearFlag: number = camera.clearFlag;\n        if (clearFlag === CameraClearFlags.Sky && !(camera.skyRenderer._isAvailable() || this._skyRenderer._isAvailable()))\n            clearFlag = CameraClearFlags.SolidColor;\n        let clearConst: number = 0;\n        let stencilFlag = renderTex.depthStencilFormat == RenderTargetFormat.DEPTHSTENCIL_24_8 ? RenderClearFlag.Stencil : 0;\n        switch (clearFlag) {\n            case CameraClearFlags.SolidColor:\n                clearConst = RenderClearFlag.Color | RenderClearFlag.Depth | stencilFlag;\n                break;\n            case CameraClearFlags.DepthOnly:\n            case CameraClearFlags.Sky:\n                clearConst = RenderClearFlag.Depth | stencilFlag;\n                break;\n            case CameraClearFlags.Nothing:\n                clearConst = 0;\n                break;\n            case CameraClearFlags.ColorOnly:\n                clearConst = RenderClearFlag.Color;\n                break;\n\n        }\n\n        LayaGL.renderEngine.clearRenderTexture(clearConst, camera._linearClearColor, 1);\n    }\n\n    /**\n     * @internal 渲染Scene的各个管线\n     */\n    _renderScene(context: RenderContext3D, renderFlag: number): void {\n        var camera: Camera = <Camera>context.camera;\n        switch (renderFlag) {\n            case Scene3D.SCENERENDERFLAG_RENDERQPAQUE:\n                Stat.opaqueDrawCall += this._opaqueQueue.renderQueue(context);\n                break;\n            case Scene3D.SCENERENDERFLAG_SKYBOX:\n                if (camera.clearFlag === CameraClearFlags.Sky) {\n                    if (camera.skyRenderer._isAvailable())\n                        camera.skyRenderer._render(context);\n                    else if (this._skyRenderer._isAvailable())\n                        this._skyRenderer._render(context);\n                }\n                break;\n            case Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT:\n                Stat.transDrawCall += this._transparentQueue.renderQueue(context);\n                if (Config3D.debugFrustumCulling) {\n                    // var renderElements: RenderElement[] = this._debugTool._render._renderElements;\n                    // for (var i: number = 0, n: number = renderElements.length; i < n; i++) {\n                    //     context.drawRenderElement(renderElements[i]);\n                    // }\n                }\n                break;\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        var lightMapsData: any[] = data.lightmaps;\n        if (lightMapsData) {\n            var lightMapCount: number = lightMapsData.length;\n            var lightmaps: Lightmap[] = new Array(lightMapCount);\n            for (var i: number = 0; i < lightMapCount; i++) {\n                var lightMap: Lightmap = new Lightmap();\n                var lightMapData: any = lightMapsData[i];\n                if (lightMapData.path) {//兼容\n                    lightMap.lightmapColor = Loader.getTexture2D(lightMapData.path);\n                }\n                else {\n                    lightMap.lightmapColor = Loader.getTexture2D(lightMapData.color.path);\n                    if (lightMapData.direction)\n                        lightMap.lightmapDirection = Loader.getTexture2D(lightMapData.direction.path);\n                }\n                lightmaps[i] = lightMap;\n            }\n            this.lightmaps = lightmaps;\n        }\n        var skyData: any = data.sky;\n        if (skyData) {\n            this._skyRenderer.material = Loader.getRes(skyData.material.path);\n            switch (skyData.mesh) {\n                case \"SkyBox\":\n                    this._skyRenderer.mesh = SkyBox.instance;\n                    break;\n                case \"SkyDome\":\n                    this._skyRenderer.mesh = SkyDome.instance;\n                    break;\n                default:\n                    this.skyRenderer.mesh = SkyBox.instance;\n            }\n        }\n        this.enableFog = data.enableFog;\n        this.fogStart = data.fogStart;\n        this.fogRange = data.fogRange;\n        var fogColorData: any[] = data.fogColor;\n        if (fogColorData) {\n            var fogCol: Color = this.fogColor;\n            fogCol.fromArray(fogColorData);\n            this.fogColor = fogCol;\n        }\n        // 环境光 模式\n        var ambientModeData: AmbientMode = data.ambientMode;\n        // 单颜色\n        var ambientColorData: any[] = data.ambientColor;\n        if (ambientColorData) {\n            var ambCol: Color = this.ambientColor;\n            ambCol.fromArray(ambientColorData);\n            this.ambientColor = ambCol;\n        }\n        if (ambientModeData == AmbientMode.TripleColor) {\n            // 三颜色\n            let ambientSkyColor: number[] = data.ambientSkyColor;\n            let tempV3sky = new Vector3();\n            tempV3sky.fromArray(ambientSkyColor);\n\n            let ambientEquatorColor: number[] = data.ambientEquatorColor;\n            let tempV3Equaltor = new Vector3();\n            tempV3Equaltor.fromArray(ambientEquatorColor);\n\n            let ambientGroundColor: number[] = data.ambientGroundColor;\n            let tempV3Ground = new Vector3();\n            tempV3Ground.fromArray(ambientGroundColor);\n\n            this._sceneReflectionProb.setGradientAmbient(tempV3sky, tempV3Equaltor, tempV3Ground);\n        }\n        // skybox\n        var ambientSphericalHarmonicsData: Array<number> = data.ambientSphericalHarmonics;\n        if (ambientSphericalHarmonicsData) {\n            var ambientSH: SphericalHarmonicsL2 = new SphericalHarmonicsL2();\n            for (var i: number = 0; i < 3; i++) {\n                var off: number = i * 9;\n                ambientSH.setCoefficients(i, ambientSphericalHarmonicsData[off], ambientSphericalHarmonicsData[off + 1], ambientSphericalHarmonicsData[off + 2], ambientSphericalHarmonicsData[off + 3], ambientSphericalHarmonicsData[off + 4], ambientSphericalHarmonicsData[off + 5], ambientSphericalHarmonicsData[off + 6], ambientSphericalHarmonicsData[off + 7], ambientSphericalHarmonicsData[off + 8]);\n            }\n            this._sceneReflectionProb.ambientSphericalHarmonics = ambientSH;\n        }\n        (ambientModeData != undefined) && (this.ambientMode = ambientModeData);\n        var reflectionData: string = data.reflection;\n        (reflectionData != undefined) && (this._sceneReflectionProb.reflectionTexture = Loader.getRes(reflectionData));\n        var reflectionDecodingFormatData: number = data.reflectionDecodingFormat;\n        (reflectionDecodingFormatData != undefined) && (this._sceneReflectionProb.reflectionDecodingFormat = reflectionDecodingFormatData);\n        var ambientSphericalHarmonicsIntensityData: number = data.ambientSphericalHarmonicsIntensity;\n        (ambientSphericalHarmonicsIntensityData != undefined) && (this._sceneReflectionProb.ambientIntensity = ambientSphericalHarmonicsIntensityData);\n        var reflectionIntensityData: number = data.reflectionIntensity;\n        (reflectionIntensityData != undefined) && (this._sceneReflectionProb.reflectionIntensity = reflectionIntensityData);\n    }\n\n    /**\n     * @internal\n     */\n    _addRenderObject(render: any): void {\n        // if (this._octree && render._supportOctree) {\n        // \tthis._octree.addRender(render);\n        // } else {\n        //this._renders.add(render);\n        this._sceneRenderManager.addRenderObject(render);\n        // }\n        render._addReflectionProbeUpdate();\n    }\n\n    /**\n     * @internal\n     */\n    _removeRenderObject(render: any): void {\n        // if (this._octree && render._supportOctree) {\n        // \tthis._octree.removeRender(render);\n        // } else {\n        this._sceneRenderManager.removeRenderObject(render);\n        //this._renders.remove(render);\n        // }\n    }\n\n    /**\n     * @internal\n     */\n    _getRenderQueue(index: number): IRenderQueue {\n        if (index <= 2500)//2500作为队列临界点\n            return this._opaqueQueue;\n        else\n            return this._transparentQueue;\n    }\n\n    /**\n     * @internal\n     */\n    _clearRenderQueue(): void {\n        this._opaqueQueue.clear();\n        this._transparentQueue.clear();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * 删除资源\n     */\n    destroy(destroyChild: boolean = true): void {\n        if (this._destroyed)\n            return;\n        super.destroy(destroyChild);\n        this._nativeObj = null;\n        this._skyRenderer.destroy();\n        this._skyRenderer = null;\n        this._directionLights = null;\n        this._pointLights = null;\n        this._spotLights = null;\n        this._alternateLights = null;\n        this._shaderValues.destroy();\n        this._opaqueQueue.destroy();\n        this._transparentQueue.destroy();\n        (RenderContext3D._instance.scene == this) && (RenderContext3D._instance.scene = null);\n        this._shaderValues = null;\n        this.sceneRenderableManager.destroy();\n        this._sceneRenderManager = null\n        this._cameraPool = null;\n        // this._octree = null;\n        this._physicsSimulation && this._physicsSimulation._destroy();\n        // this._reflection._removeReference();\n        // this._reflection = null;\n        var maps: Lightmap[] = this._lightmaps;\n        if (maps) {\n            for (var i: number = 0, n: number = maps.length; i < n; i++) {\n                var map: Lightmap = maps[i];\n                map.lightmapColor && map.lightmapColor._removeReference();\n                map.lightmapDirection && map.lightmapDirection._removeReference();\n            }\n        }\n        //this._sceneUniformData.destroy();\n        this._lightmaps = null;\n        this._volumeManager.destroy();\n        this._componentDriver.callDestroy();\n\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    render(ctx: Context): void {\n        if (this._children.length > 0) {\n            ctx.addRenderObject3D(this);\n        }\n    }\n\n    /**\n     * 渲染入口\n     */\n    renderSubmit(): number {\n        BufferState._curBindedBufferState && BufferState._curBindedBufferState.unBind();\n        this._prepareSceneToRender();\n        var i: number, n: number, n1: number;\n        Scene3D._updateMark++;\n        // if (this._sceneUniformData) {\n        // \tthis._sceneUniformObj && this._sceneUniformObj.setDataByUniformBufferData(this._sceneUniformData);\n        // }\n        for (i = 0, n = this._cameraPool.length, n1 = n - 1; i < n; i++) {\n            // if (Render.supportWebGLPlusRendering)\n            // \tShaderData.setRuntimeValueMode((i == n1) ? true : false);\n\n            var camera: Camera = (<Camera>this._cameraPool[i]);\n            this._setCullCamera(camera);\n            if (camera.renderTarget)\n                (camera.enableBuiltInRenderTexture = false);//TODO:可能会有性能问题\n            else\n                camera.enableBuiltInRenderTexture = true;\n\n            camera.enableRender && camera.render();\n            Scene3D._blitTransRT = null;\n\n            if (camera.enableRender && !camera.renderTarget) {\n                (Scene3D._blitTransRT = camera._internalRenderTexture);\n                var canvasWidth: number = camera._getCanvasWidth(), canvasHeight: number = camera._getCanvasHeight();\n                Scene3D._blitOffset.setValue(camera.viewport.x / canvasWidth, camera.viewport.y / canvasHeight, camera.viewport.width / canvasWidth, camera.viewport.height / canvasHeight);\n                this.blitMainCanvans(Scene3D._blitTransRT, camera.normalizedViewport, camera);\n            }\n            if (!camera._cacheDepth) {\n                camera.enableRender && camera._needInternalRenderTexture() && (!camera._internalRenderTexture._inPool) && RenderTexture.recoverToPool(camera._internalRenderTexture);\n            }\n\n        }\n        Context.set2DRenderConfig();//还原2D配置\n        RenderTexture.clearPool();\n        return 1;\n    }\n\n    /**\n     * @internal\n     * @param source \n     * @param normalizeViewPort \n     * @param camera \n     * @returns \n     */\n    blitMainCanvans(source: BaseTexture, normalizeViewPort: Viewport, camera: Camera) {\n        if (!source)\n            return;\n        Scene3D.mainCavansViewPort.x = RenderContext3D.clientWidth * normalizeViewPort.x | 0;\n        Scene3D.mainCavansViewPort.y = RenderContext3D.clientHeight * normalizeViewPort.y | 0;\n        Scene3D.mainCavansViewPort.width = RenderContext3D.clientWidth * normalizeViewPort.width | 0;\n        Scene3D.mainCavansViewPort.height = RenderContext3D.clientHeight * normalizeViewPort.height | 0;\n        source.filterMode = FilterMode.Bilinear;\n        if (camera.fxaa)\n            BlitFrameBufferCMD.shaderdata.addDefine(BaseCamera.SHADERDEFINE_FXAA);\n        var cmd = BlitFrameBufferCMD.create(source, null, Scene3D.mainCavansViewPort, null, null, BlitFrameBufferCMD.shaderdata);\n        cmd.run();\n        cmd.recover();\n        BlitFrameBufferCMD.shaderdata.removeDefine(BaseCamera.SHADERDEFINE_FXAA);\n    }\n\n    /**\n     * 获得渲染类型\n     */\n    getRenderType(): number {\n        return 0;\n    }\n\n    /**\n     * 删除渲染\n     */\n    releaseRender(): void {\n    }\n\n    /**\n     * @internal\n     */\n    reUse(context: Context, pos: number): number {\n        return 0;\n    }\n\n    /**\n     * 设置全局渲染数据\n     * @param name 数据对应着色器名字\n     * @param shaderDataType 渲染数据类型\n     * @param value 渲染数据值\n     */\n    setGlobalShaderValue(name: string, type: ShaderDataType, value: ShaderDataItem) {\n        var shaderOffset = Shader3D.propertyNameToID(name);\n        this._shaderValues.setShaderData(shaderOffset, type, value);\n    }\n    //--------------------------------------------------------deprecated------------------------------------------------------------------------\n\n    /**\n     * @deprecated\n     * 设置光照贴图。\n     * @param value 光照贴图。\n     */\n    setlightmaps(value: Texture2D[]): void {\n        var maps: Lightmap[] = this._lightmaps;\n        for (var i: number = 0, n: number = maps.length; i < n; i++)\n            maps[i].lightmapColor._removeReference();\n        if (value) {\n            var count: number = value.length;\n            maps.length = count;\n            for (i = 0; i < count; i++) {\n                var lightMap: Texture2D = value[i];\n                lightMap._addReference();\n                (maps[i]) || (maps[i] = new Lightmap());\n                maps[i].lightmapColor = lightMap;\n            }\n        } else {\n            throw new Error(\"Scene3D: value value can't be null.\");\n        }\n    }\n\n    /**\n     * @deprecated\n     * 获取光照贴图浅拷贝列表。\n     * @return 获取光照贴图浅拷贝列表。\n     */\n    getlightmaps(): Texture2D[] {\n        var lightmapColors: Texture2D[] = new Array(this._lightmaps.length);\n        for (var i: number = 0; i < this._lightmaps.length; i++) {\n            lightmapColors[i] = this._lightmaps[i].lightmapColor;\n        }\n        return lightmapColors;//slice()防止修改数组内容\n    }\n\n\n}","\nimport { Config3D } from \"../../../Config3D\";\nimport { ILaya3D } from \"../../../ILaya3D\";\nimport { Node } from \"../../display/Node\";\nimport { Event } from \"../../events/Event\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { BaseTexture } from \"../../resource/BaseTexture\";\nimport { PostProcess } from \"../component/PostProcess\";\nimport { DepthPass, DepthTextureMode } from \"../depthMap/DepthPass\";\nimport { Cluster } from \"../graphics/renderPath/Cluster\";\nimport { BoundFrustum } from \"../math/BoundFrustum\";\nimport { Ray } from \"../math/Ray\";\nimport { Viewport } from \"../math/Viewport\";\nimport { Picker } from \"../utils/Picker\";\nimport { BaseCamera } from \"./BaseCamera\";\nimport { DirectionLightCom } from \"./light/DirectionLightCom\";\nimport { ShadowMode } from \"./light/ShadowMode\";\nimport { ShadowUtils } from \"./light/ShadowUtils\";\nimport { BlitScreenQuadCMD } from \"./render/command/BlitScreenQuadCMD\";\nimport { CommandBuffer } from \"./render/command/CommandBuffer\";\nimport { RenderContext3D } from \"./render/RenderContext3D\";\nimport { Scene3D } from \"./scene/Scene3D\";\nimport { Scene3DShaderDeclaration } from \"./scene/Scene3DShaderDeclaration\";\nimport { Transform3D } from \"./Transform3D\";\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { RenderCapable } from \"../../RenderEngine/RenderEnum/RenderCapable\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { ILaya } from \"../../../ILaya\";\nimport { ShadowLightType } from \"../shadowMap/ShadowLightType\";\nimport { TextureCube } from \"../resource/TextureCube\";\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\nimport { Texture2D } from \"../../resource/Texture2D\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../maths/Quaternion\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { RenderTexture } from \"../../resource/RenderTexture\";\n\n/**\n * 相机清除标记。\n */\nexport enum CameraClearFlags {\n    /**固定颜色。*/\n    SolidColor,\n    /**天空。*/\n    Sky,\n    /**仅深度。*/\n    DepthOnly,\n    /**不清除。*/\n    Nothing,\n    /**只清理颜色 */\n    ColorOnly,\n}\n\n/**\n * 相机事件标记\n */\nexport enum CameraEventFlags {\n    //BeforeDepthTexture,\n    //AfterDepthTexture,\n    //BeforeDepthNormalsTexture,\n    //AfterDepthNormalTexture,\n    /**在渲染非透明物体之前。*/\n    BeforeForwardOpaque = 0,\n    /**在渲染天空盒之前。*/\n    BeforeSkyBox = 2,\n    /**在渲染透明物体之前。*/\n    BeforeTransparent = 4,\n    /**在后期处理之前。*/\n    BeforeImageEffect = 6,\n    /**所有渲染之后。*/\n    AfterEveryThing = 8,\n}\n\n/**\n * <code>Camera</code> 类用于创建摄像机。\n */\nexport class Camera extends BaseCamera {\n    /** @internal */\n    static _tempVector20: Vector2 = new Vector2();\n    /** @internal*/\n    static _context3DViewPortCatch: Viewport = new Viewport(0, 0, 0, 0);\n    static _contextScissorPortCatch: Vector4 = new Vector4(0, 0, 0, 0);\n\n    /** @internal */\n    static __updateMark: number = 0;\n    static set _updateMark(value: number) {\n        Camera.__updateMark = value;\n    }\n\n    static get _updateMark(): number {\n        return Camera.__updateMark;\n    }\n\n    /** @internal 深度贴图管线*/\n    static depthPass: DepthPass;\n    /**@internal 整体开启关闭后期处理 */\n    static enablePostProcess: boolean = true;//\n\n    /**\n     * 根据相机、scene信息获得scene中某一位置的渲染结果\n     * @param camera 相机\n     * @param scene 需要渲染的场景\n     * @param shader 着色器\n     * @param replacementTag 替换标记。\n     */\n    static drawRenderTextureByScene(camera: Camera, scene: Scene3D, renderTexture: RenderTexture, shader: Shader3D = null, replaceFlag: string = null): RenderTexture {\n        if (!renderTexture) return null;\n        Scene3D._updateMark++;\n        //@ts-ignore\n        scene._prepareSceneToRender();\n        scene._setCullCamera(camera);\n        let recoverTexture = camera.renderTarget;\n        camera.renderTarget = renderTexture;\n\n        var viewport: Viewport = camera.viewport;\n        var needInternalRT: boolean = camera._needInternalRenderTexture();\n        var context: RenderContext3D = RenderContext3D._instance;\n        var scene: Scene3D = context.scene = scene\n        context.pipelineMode = context.configPipeLineMode;\n        context.replaceTag = replaceFlag;\n        context.customShader = shader;\n\n        if (needInternalRT) {\n            camera._internalRenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, camera._getRenderTextureFormat(), camera.depthTextureFormat, false, camera.msaa ? 4 : 1, false, camera._needRenderGamma(camera._getRenderTextureFormat()));\n            camera._internalRenderTexture.filterMode = FilterMode.Bilinear;\n        }\n        else {\n            camera._internalRenderTexture = null;\n        }\n        scene._componentDriver.callPreRender();\n        var needShadowCasterPass: boolean = camera._renderShadowMap(scene, context);\n        camera._preRenderMainPass(context, scene, needInternalRT, viewport);\n        camera._renderMainPass(context, viewport, scene, shader, replaceFlag, needInternalRT);\n        camera._aftRenderMainPass(needShadowCasterPass);\n        camera.renderTarget = recoverTexture;\n        scene.recaculateCullCamera();\n        scene._componentDriver.callPostRender();\n        if (camera._internalRenderTexture)\n            (!camera._internalRenderTexture._inPool) && RenderTexture.recoverToPool(camera._internalRenderTexture);\n        return renderTexture;\n    }\n\n    /**\n     * get PixelTexture\n     * @param texture \n     * @returns \n     */\n    static getTexturePixel(texture: Texture2D): ArrayBufferView {\n        let coverFilter = texture.filterMode;\n        texture.filterMode = FilterMode.Point;\n        let rtFormat = RenderTargetFormat.R8G8B8;\n        let pixelData;\n        let size = texture.width * texture.height;\n        switch (texture.format) {\n            case TextureFormat.R32G32B32A32:\n            case TextureFormat.R16G16B16A16:\n                rtFormat = RenderTargetFormat.R32G32B32A32;\n                pixelData = new Float32Array(size * 4);\n                break;\n            case TextureFormat.R32G32B32:\n            case TextureFormat.R16G16B16:\n                rtFormat = RenderTargetFormat.R32G32B32;\n                pixelData = new Float32Array(size * 3);\n                break;\n            case TextureFormat.R5G6B5:\n            case TextureFormat.R8G8B8:\n                rtFormat = RenderTargetFormat.R8G8B8;\n                pixelData = new Uint8Array(size * 3);\n                break;\n            default:\n                rtFormat = RenderTargetFormat.R8G8B8A8;\n                pixelData = new Uint8Array(size * 4);\n                break;\n        }\n        let rt = new RenderTexture(texture.width, texture.height, rtFormat, RenderTargetFormat.None, false, 0, false);\n        var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(texture, rt);\n        blit.setContext(RenderContext3D._instance);\n        blit.run();\n        blit.recover();\n        texture.filterMode = coverFilter;\n        rt.getData(0, 0, texture.width, texture.height, pixelData);\n        rt.destroy();//删除\n        return pixelData;\n    }\n\n    /**\n     * 根据场景中的位置\n     * @param position \n     * @param scene \n     * @param renderCubeSize \n     * @param format \n     * @returns bake front left right up down\n     */\n    static drawTextureCubePixelByScene(camera: Camera, scene: Scene3D, renderCubeSize: number, format: TextureFormat, cullingMask: number): ArrayBufferView[] {\n        let rtFormat = RenderTargetFormat.R8G8B8;\n        let pixelData;\n        let size = renderCubeSize * renderCubeSize;\n        let bytelength;\n        switch (format) {\n            case TextureFormat.R32G32B32A32:\n            case TextureFormat.R16G16B16A16:\n                rtFormat = RenderTargetFormat.R32G32B32A32;\n                size *= 4;\n                bytelength = 4;\n                break;\n            case TextureFormat.R32G32B32:\n            case TextureFormat.R16G16B16:\n                rtFormat = RenderTargetFormat.R32G32B32;\n                size *= 3;\n                bytelength = 4;\n                break;\n            case TextureFormat.R5G6B5:\n            case TextureFormat.R8G8B8:\n                rtFormat = RenderTargetFormat.R8G8B8;\n                size *= 3;\n                bytelength = 1;\n                break;\n            case TextureFormat.R8G8B8A8:\n                rtFormat = RenderTargetFormat.R8G8B8A8;\n                pixelData = new Uint8Array(size * 4);\n                size *= 4;\n                bytelength = 1;\n                break;\n            default:\n                throw \"Type is not supported\";\n                break;\n        }\n        let rt = new RenderTexture(renderCubeSize, renderCubeSize, rtFormat, RenderTargetFormat.DEPTH_16, false, 0, false, false);\n        camera.fieldOfView = 90;\n        camera.cullingMask = cullingMask;\n        // bake 0,1,0,0\n        //front 0,0,0,1\n        //left 0,0.7071068,0,0.7071068\n        //right 0,0.7071068,0,-0.7071068\n        //up 0,0.7071068,-0.7071068,0\n        //down 0,-0.7071068,-0.7071068,0\n        let pixels: ArrayBufferView[] = [];\n        let quaterionArray = [\n            new Quaternion(0, 1, 0, 0),\n            new Quaternion(0, 0, 0, 1),\n            new Quaternion(0, 0.7071068, 0, 0.7071068),\n            new Quaternion(0, 0.7071068, 0, -0.7071068),\n            new Quaternion(0, 0.7071068, -0.7071068, 0),\n            new Quaternion(0, -0.7071068, -0.7071068, 0),\n        ];\n        for (var i = 0; i < 6; i++) {\n            camera.transform.rotation = quaterionArray[i];\n            this.drawRenderTextureByScene(camera, scene, rt);\n            if (bytelength == 4)\n                pixelData = new Float32Array(size);\n            else\n                pixelData = new Uint8Array(size);\n            pixels[i] = rt.getData(0, 0, renderCubeSize, renderCubeSize, pixelData);\n        }\n        rt.destroy();\n        return pixels;\n    }\n\n    static drawTextureCubeByScene(camera: Camera, position: Vector3, scene: Scene3D, renderCubeSize: number, format: TextureFormat, cullingMask: number = 0): TextureCube {\n        camera.transform.position = position;\n        let pixels = this.drawTextureCubePixelByScene(camera, scene, renderCubeSize, format, cullingMask);\n        let finalformat: TextureFormat;\n        switch (format) {\n            case TextureFormat.R32G32B32A32:\n            case TextureFormat.R16G16B16A16:\n                finalformat = TextureFormat.R32G32B32A32;\n                break;\n            case TextureFormat.R32G32B32:\n            case TextureFormat.R16G16B16:\n                finalformat = TextureFormat.R32G32B32;\n                break;\n            case TextureFormat.R5G6B5:\n            case TextureFormat.R8G8B8:\n                finalformat = TextureFormat.R8G8B8;\n                break;\n            case TextureFormat.R8G8B8A8:\n                finalformat = TextureFormat.R8G8B8A8;\n                break;\n            default:\n                throw \"Type is not supported\";\n        }\n        let textureCube = new TextureCube(renderCubeSize, format, true, false);\n        textureCube.setPixelsData(pixels, false, false);\n        return textureCube;\n    }\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        Camera.depthPass = new DepthPass();\n    }\n\n\n    /** @internal */\n    protected _aspectRatio: number;\n    /** @internal */\n    protected _viewport: Viewport;\n    /** @internal */\n    protected _rayViewport: Viewport;\n    /** @internal */\n    protected _normalizedViewport: Viewport;\n    /** @internal */\n    protected _viewMatrix: Matrix4x4;\n    /** @internal */\n    protected _projectionMatrix: Matrix4x4;\n    /** @internal */\n    protected _projectionViewMatrix: Matrix4x4;\n    /** @internal */\n    protected _boundFrustum: BoundFrustum;\n    /** @internal */\n    private _updateViewMatrix: boolean = true;\n    /** @internal */\n    protected _postProcess: PostProcess = null;\n    /** @internal */\n    protected _enableHDR: boolean = false;\n    /** @internal */\n    private _viewportParams: Vector4 = new Vector4();\n    /** @internal */\n    private _projectionParams: Vector4 = new Vector4();\n    /** @internal*/\n    protected _needBuiltInRenderTexture: boolean = false;\n    /**@internal */\n    protected _msaa: boolean = false;\n    /**@internal */\n    private _fxaa: boolean;\n    /** @internal*/\n    private _depthTextureMode: DepthTextureMode;\n    /** @internal */\n    _offScreenRenderTexture: RenderTexture = null;\n    /** @internal */\n    _internalRenderTexture: RenderTexture = null;\n    /** @internal　是否直接使用渲染深度贴图*/\n    _canBlitDepth: boolean = false;\n    /**@internal */\n    _internalCommandBuffer: CommandBuffer = new CommandBuffer();\n    /**深度贴图模式 */\n    protected _depthTextureFormat: RenderTargetFormat = RenderTargetFormat.DEPTH_16;\n    /** 深度贴图*/\n    private _depthTexture: BaseTexture;\n    /** 深度法线贴图*/\n    private _depthNormalsTexture: RenderTexture;\n\n    /** 非透明物体贴图 */\n    private _opaqueTexture: RenderTexture;\n    /** 是否开启非透明物体通道 */\n    private _opaquePass: boolean;\n\n\n    private _cameraEventCommandBuffer: { [key: string]: CommandBuffer[] } = {};\n    /**@internal 实现CommanBuffer的阴影渲染 */\n    private _shadowCasterCommanBuffer: CommandBuffer[] = [];\n\n    /** @internal */\n    _clusterXPlanes: Vector3[];\n    /** @internal */\n    _clusterYPlanes: Vector3[];\n    /** @internal */\n    _clusterPlaneCacheFlag: Vector2 = new Vector2(-1, -1);\n    /** @internal */\n    _screenOffsetScale: Vector4 = new Vector4();\n\n    /**是否允许渲染。*/\n    enableRender: boolean = true;\n    /**清除标记。*/\n    clearFlag: CameraClearFlags = CameraClearFlags.SolidColor;\n    /**是否缓存上一帧的Depth纹理 */\n    _cacheDepth: boolean\n    /**cache 上一帧纹理 */\n    _cacheDepthTexture: RenderTexture;\n\n    /**\n     * 横纵比。\n     */\n    get aspectRatio(): number {\n        if (this._aspectRatio === 0) {\n            var vp: Viewport = this.viewport;\n            return vp.width / vp.height;\n        }\n        return this._aspectRatio;\n    }\n\n    set aspectRatio(value: number) {\n        if (value < 0)\n            throw new Error(\"Camera: the aspect ratio has to be a positive real number.\");\n        this._aspectRatio = value;\n        this._calculateProjectionMatrix();\n    }\n\n    /**\n     * 获取屏幕像素坐标的视口。\n     */\n    get viewport(): Viewport {//TODO:优化\n        if (this._offScreenRenderTexture)\n            this._calculationViewport(this._normalizedViewport, this._offScreenRenderTexture.width, this._offScreenRenderTexture.height);\n        else\n            this._calculationViewport(this._normalizedViewport, this.clientWidth, this.clientHeight);//屏幕尺寸会动态变化,需要重置\n        return this._viewport;\n    }\n\n    set viewport(value: Viewport) {\n        var width: number;\n        var height: number;\n        if (this._offScreenRenderTexture) {\n            width = this._offScreenRenderTexture.width;\n            height = this._offScreenRenderTexture.height;\n        } else {\n            width = this.clientWidth;\n            height = this.clientHeight;\n        }\n        this._normalizedViewport.x = value.x / width;\n        this._normalizedViewport.y = value.y / height;\n        this._normalizedViewport.width = value.width / width;\n        this._normalizedViewport.height = value.height / height;\n        this._calculationViewport(this._normalizedViewport, width, height);\n        this._calculateProjectionMatrix();\n    }\n\n    get clientWidth(): number {\n        ILaya.stage.needUpdateCanvasSize();\n        if (Config3D.customResolution)\n            return Config3D.pixelRatio * Config3D._resoluWidth | 0;\n        else\n            return RenderContext3D.clientWidth * Config3D.pixelRatio | 0;\n    }\n\n    get clientHeight(): number {\n        ILaya.stage.needUpdateCanvasSize();\n        if (Config3D.customResolution)\n            return Config3D.pixelRatio * Config3D._resoluHeight | 0;\n        else\n            return RenderContext3D.clientHeight * Config3D.pixelRatio | 0;\n    }\n\n\n\n    /**\n     * 多重采样抗锯齿\n     */\n    set msaa(value: boolean) {\n        LayaGL.renderEngine.getCapable(RenderCapable.MSAA) ? this._msaa = value : this._msaa = false;\n    }\n\n\n    get msaa(): boolean {\n        return this._msaa;\n    }\n\n    /**\n     * 空间抗锯齿\n     */\n    set fxaa(value: boolean) {\n        this._fxaa = value;\n    }\n\n    get fxaa(): boolean {\n        return this._fxaa;\n    }\n\n    /**\n     * 裁剪空间的视口。\n     */\n    get normalizedViewport(): Viewport {\n        return this._normalizedViewport;\n    }\n\n    set normalizedViewport(value: Viewport) {\n        var width: number;\n        var height: number;\n        if (this._offScreenRenderTexture) {\n            width = this._offScreenRenderTexture.width;\n            height = this._offScreenRenderTexture.height;\n        } else {\n            width = this.clientWidth;\n            height = this.clientHeight;\n        }\n        if (this._normalizedViewport !== value)\n            value.cloneTo(this._normalizedViewport);\n        this._calculationViewport(value, width, height);\n        this._calculateProjectionMatrix();\n    }\n\n    /**\n     * 获取视图矩阵。\n     */\n    get viewMatrix(): Matrix4x4 {\n        if (this._updateViewMatrix) {\n            var scale: Vector3 = this.transform.getWorldLossyScale();\n            var scaleX: number = scale.x;\n            var scaleY: number = scale.y;\n            var scaleZ: number = scale.z;\n            var viewMatE: Float32Array = this._viewMatrix.elements;\n\n            this.transform.worldMatrix.cloneTo(this._viewMatrix)\n            viewMatE[0] /= scaleX;//忽略缩放\n            viewMatE[1] /= scaleX;\n            viewMatE[2] /= scaleX;\n            viewMatE[4] /= scaleY;\n            viewMatE[5] /= scaleY;\n            viewMatE[6] /= scaleY;\n            viewMatE[8] /= scaleZ;\n            viewMatE[9] /= scaleZ;\n            viewMatE[10] /= scaleZ;\n            this._viewMatrix.invert(this._viewMatrix);\n            this._updateViewMatrix = false;\n        }\n        return this._viewMatrix;\n    }\n\n    /**\n     * 投影矩阵。\n     */\n    get projectionMatrix(): Matrix4x4 {\n        return this._projectionMatrix;\n    }\n\n    set projectionMatrix(value: Matrix4x4) {\n        this._projectionMatrix = value;\n        this._useUserProjectionMatrix = true;\n    }\n\n    /**\n     * 获取视图投影矩阵。\n     */\n    get projectionViewMatrix(): Matrix4x4 {\n        Matrix4x4.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix);\n        return this._projectionViewMatrix;\n    }\n\n    /**\n     * 获取摄像机视锥。\n     */\n    get boundFrustum(): BoundFrustum {\n        this._boundFrustum.matrix = this.projectionViewMatrix;\n        return this._boundFrustum;\n    }\n\n    /**\n     * 自定义渲染场景的渲染目标。\n     */\n    get renderTarget(): RenderTexture {\n        return this._offScreenRenderTexture;\n    }\n\n    set renderTarget(value: RenderTexture) {\n        var lastValue: RenderTexture = this._offScreenRenderTexture;\n        if (lastValue !== value) {\n            (lastValue) && (lastValue._isCameraTarget = false);\n            (value) && (value._isCameraTarget = true);\n            this._offScreenRenderTexture = value;\n            this._calculateProjectionMatrix();\n        }\n    }\n\n    /**\n     * 后期处理。\n     */\n    get postProcess(): PostProcess {\n        return this._postProcess;\n    }\n\n    set postProcess(value: PostProcess) {\n        this._postProcess = value;\n        //if (!value) return;\n        //value && value._init(this);\n    }\n\n    /**\n     * 是否开启HDR。\n     * 开启后对性能有一定影响。\n     */\n    get enableHDR(): boolean {\n        return this._enableHDR;\n    }\n\n    set enableHDR(value: boolean) {\n        if (value && !LayaGL.renderEngine.getCapable(RenderCapable.RenderTextureFormat_R16G16B16A16)) {\n            console.warn(\"Camera:can't enable HDR in this device.\");\n            return;\n        }\n        this._enableHDR = value;\n    }\n\n    /**\n     * 是否使用正在渲染的RenderTexture为CommandBuffer服务，设置为true\n     * 一般和CommandBuffer一起使用\n     */\n    get enableBuiltInRenderTexture(): boolean {\n        return this._needBuiltInRenderTexture;\n    }\n\n    set enableBuiltInRenderTexture(value: boolean) {\n        this._needBuiltInRenderTexture = value;\n    }\n\n    /**\n     * 深度贴图模式\n     */\n    get depthTextureMode(): DepthTextureMode {\n        return this._depthTextureMode;\n    }\n\n    set depthTextureMode(value: DepthTextureMode) {\n        this._depthTextureMode = value;\n    }\n\n    /**\n     * 设置OpaquePass模式\n     */\n    set opaquePass(value: boolean) {\n        if (value == this._opaquePass)\n            return;\n        if (!value) {\n            this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE, null);\n            this._opaqueTexture && RenderTexture.recoverToPool(this._opaqueTexture);\n        }\n        this._opaquePass = value;\n    }\n\n    get opaquePass() {\n        return this._opaquePass;\n    }\n\n    /**\n     * 深度贴图格式\n     */\n    get depthTextureFormat(): RenderTargetFormat {\n        return this._depthTextureFormat;\n    }\n    set depthTextureFormat(value: RenderTargetFormat) {\n        this._depthTextureFormat = value;\n    }\n\n\n    /**\n     * 设置是否使用内置的深度贴图(TODO:如果开启,只可在后期使用深度贴图，不可在渲染流程中使用)\n     */\n    set enableBlitDepth(value: boolean) {\n        if (value == this._canBlitDepth)\n            return;\n        this._canBlitDepth = value;\n        this._cacheDepth = value;\n        if (value)\n            this._internalRenderTexture && (this._internalRenderTexture.generateDepthTexture = true);\n        else {\n            this._internalRenderTexture && (this._internalRenderTexture.generateDepthTexture = false);\n            if (this._cacheDepthTexture)\n                this._cacheDepthTexture._inPool ? RenderTexture.recoverToPool(this._cacheDepthTexture) : 0;\n        }\n\n    }\n    get enableBlitDepth() {\n        return this._canBlitDepth;\n    }\n    get canblitDepth() {\n        return this._canBlitDepth && this._internalRenderTexture && this._internalRenderTexture.depthStencilFormat != null;\n    }\n\n    /**\n     * 创建一个 <code>Camera</code> 实例。\n     * @param\taspectRatio 横纵比。\n     * @param\tnearPlane 近裁面。\n     * @param\tfarPlane 远裁面。\n     */\n    constructor(aspectRatio: number = 0, nearPlane: number = 0.3, farPlane: number = 1000) {\n        super(nearPlane, farPlane);\n        this._viewMatrix = new Matrix4x4();\n        this._projectionMatrix = new Matrix4x4();\n        this._projectionViewMatrix = new Matrix4x4();\n        this._viewport = new Viewport(0, 0, 0, 0);\n        this._normalizedViewport = new Viewport(0, 0, 1, 1);\n        this._rayViewport = new Viewport(0, 0, 0, 0);\n        this._aspectRatio = aspectRatio;\n        this._boundFrustum = new BoundFrustum(new Matrix4x4());\n        this._depthTextureMode = 0;\n        this._calculateProjectionMatrix();\n        ILaya.stage.on(Event.RESIZE, this, this._onScreenSizeChanged);\n        this.transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\n    }\n\n    /**\n     * @internal\n     */\n    private _calculationViewport(normalizedViewport: Viewport, width: number, height: number): void {\n        var lx: number = normalizedViewport.x * width;//不应限制x范围\n        var ly: number = normalizedViewport.y * height;//不应限制y范围\n        var rx: number = lx + Math.max(normalizedViewport.width * width, 0);\n        var ry: number = ly + Math.max(normalizedViewport.height * height, 0);\n\n        var ceilLeftX: number = Math.ceil(lx);\n        var ceilLeftY: number = Math.ceil(ly);\n        var floorRightX: number = Math.floor(rx);\n        var floorRightY: number = Math.floor(ry);\n\n        var pixelLeftX: number = ceilLeftX - lx >= 0.5 ? Math.floor(lx) : ceilLeftX;\n        var pixelLeftY: number = ceilLeftY - ly >= 0.5 ? Math.floor(ly) : ceilLeftY;\n        var pixelRightX: number = rx - floorRightX >= 0.5 ? Math.ceil(rx) : floorRightX;\n        var pixelRightY: number = ry - floorRightY >= 0.5 ? Math.ceil(ry) : floorRightY;\n\n        this._viewport.x = pixelLeftX;\n        this._viewport.y = pixelLeftY;\n        this._viewport.width = pixelRightX - pixelLeftX;\n        this._viewport.height = pixelRightY - pixelLeftY;\n    }\n\n\n\n\n\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    protected _calculateProjectionMatrix(): void {\n        if (!this._useUserProjectionMatrix) {\n            if (this._orthographic) {\n                var halfHeight: number = this.orthographicVerticalSize * 0.5;\n                var halfWidth: number = halfHeight * this.aspectRatio;\n                Matrix4x4.createOrthoOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, this.nearPlane, this.farPlane, this._projectionMatrix);\n            } else {\n                Matrix4x4.createPerspective(3.1416 * this.fieldOfView / 180.0, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);\n            }\n        }\n    }\n\n    /**\n     *\t通过蒙版值获取蒙版是否显示。\n     * \t@param  layer 层。\n     * \t@return 是否显示。\n     */\n    _isLayerVisible(layer: number): boolean {\n        return (Math.pow(2, layer) & this.cullingMask) != 0;\n    }\n\n    /**\n     * @internal\n     */\n    _onTransformChanged(flag: number): void {\n        flag &= Transform3D.TRANSFORM_WORLDMATRIX;//过滤有用TRANSFORM标记\n        (flag) && (this._updateViewMatrix = true);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n        var clearFlagData: any = data.clearFlag;\n        (clearFlagData !== undefined) && (this.clearFlag = clearFlagData);\n        var viewport: any[] = data.viewport;\n        this.normalizedViewport = new Viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n        var enableHDR: boolean = data.enableHDR;\n        (enableHDR !== undefined) && (this.enableHDR = enableHDR);\n    }\n\n    clone(): Camera {\n        let camera = <Camera>super.clone();\n        camera.clearFlag = this.clearFlag;\n        camera.viewport = this.viewport;\n        this.normalizedViewport.cloneTo(camera.normalizedViewport);\n        camera.enableHDR = this.enableHDR;\n        camera.farPlane = this.farPlane;\n        camera.nearPlane = this.nearPlane;\n        camera.fieldOfView = this.fieldOfView;\n        camera.orthographic = this.orthographic;\n        camera._cameraEventCommandBuffer = this._cameraEventCommandBuffer\n        //Object.assign(camera._cameraEventCommandBuffer, this._cameraEventCommandBuffer);\n        return camera;\n    }\n\n    /**\n     * @internal\n     */\n    _getCanvasWidth(): number {\n        if (this._offScreenRenderTexture)\n            return this._offScreenRenderTexture.width;\n        else\n            return this.clientWidth;\n    }\n\n    /**\n     * @internal\n     */\n    _getCanvasHeight(): number {\n        if (this._offScreenRenderTexture)\n            return this._offScreenRenderTexture.height;\n        else\n            return this.clientHeight;\n    }\n\n    /**\n     * @internal\n     */\n    _getRenderTexture(): RenderTexture {\n        return this._internalRenderTexture || this._offScreenRenderTexture;\n    }\n\n    /**\n     * 渲染结果是否是Gamma\n     * @param rt \n     */\n    _needRenderGamma(rt: RenderTargetFormat) {\n        switch (rt) {\n            case RenderTargetFormat.R8G8B8:\n            case RenderTargetFormat.R8G8B8A8:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _needInternalRenderTexture(): boolean {\n        return (this._postProcess && this._postProcess.enable) || this._enableHDR || this._needBuiltInRenderTexture ? true : false;//condition of internal RT\n    }\n\n    /**\n     * @internal\n     */\n    _getRenderTextureFormat(): RenderTargetFormat {\n        if (this._enableHDR)\n            return RenderTargetFormat.R16G16B16A16;\n        else\n            return RenderTargetFormat.R8G8B8A8;\n    }\n\n    /**\n     * update Camera Render\n     * @param context \n     */\n    _updateCameraRenderData(context: RenderContext3D) {\n        this._prepareCameraToRender();\n        this._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\n    }\n\n\n    /**\n     * @override\n     * @internal\n     */\n    _prepareCameraToRender(): void {\n        super._prepareCameraToRender();\n        var vp: Viewport = this.viewport;\n        this._viewportParams.setValue(vp.x, vp.y, vp.width, vp.height);\n        this._projectionParams.setValue(this._nearPlane, this._farPlane, RenderContext3D._instance.invertY ? -1 : 1, 1 / this.farPlane);\n        this._shaderValues.setVector(BaseCamera.VIEWPORT, this._viewportParams);\n        this._shaderValues.setVector(BaseCamera.PROJECTION_PARAMS, this._projectionParams);\n    }\n\n    /**\n     * @internal\n     */\n    _applyViewProject(context: RenderContext3D, viewMat: Matrix4x4, proMat: Matrix4x4): void {\n        var projectView: Matrix4x4;\n        if (context.invertY) {\n            Matrix4x4.multiply(BaseCamera._invertYScaleMatrix, proMat, BaseCamera._invertYProjectionMatrix);\n            Matrix4x4.multiply(BaseCamera._invertYProjectionMatrix, viewMat, BaseCamera._invertYProjectionViewMatrix);\n            proMat = BaseCamera._invertYProjectionMatrix;\n            projectView = BaseCamera._invertYProjectionViewMatrix;\n        }\n        else {\n            Matrix4x4.multiply(proMat, viewMat, this._projectionViewMatrix);\n            projectView = this._projectionViewMatrix;\n        }\n\n        context.viewMatrix = viewMat;\n        context.projectionMatrix = proMat;\n        context.projectionViewMatrix = projectView;\n        this._shaderValues.setMatrix4x4(BaseCamera.VIEWMATRIX, viewMat);\n        this._shaderValues.setMatrix4x4(BaseCamera.PROJECTMATRIX, proMat);\n        this._shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, projectView);\n    }\n\n    /**\n     * @internal\n     */\n    _updateClusterPlaneXY(): void {\n        var fieldOfView: number = this.fieldOfView;\n        var aspectRatio: number = this.aspectRatio;\n        if (this._clusterPlaneCacheFlag.x !== fieldOfView || this._clusterPlaneCacheFlag.y !== aspectRatio) {\n            var clusterCount: Vector3 = Config3D.lightClusterCount;\n            var xSlixe: number = clusterCount.x, ySlice: number = clusterCount.y;\n            var xCount: number = xSlixe + 1, yCount: number = ySlice + 1;\n            var xPlanes: Vector3[] = this._clusterXPlanes, yPlanes: Vector3[] = this._clusterYPlanes;\n\n            if (!xPlanes) {\n                xPlanes = this._clusterXPlanes = new Array(xCount);\n                yPlanes = this._clusterYPlanes = new Array(yCount);\n                for (var i: number = 0; i < xCount; i++)\n                    xPlanes[i] = new Vector3();\n                for (var i: number = 0; i < yCount; i++)\n                    yPlanes[i] = new Vector3();\n            }\n            var halfY = Math.tan((this.fieldOfView / 2) * Math.PI / 180);\n            var halfX = this.aspectRatio * halfY;\n            var yLengthPerCluster = 2 * halfY / ySlice;\n            var xLengthPerCluster = 2 * halfX / xSlixe;\n            for (var i: number = 0; i < xCount; i++) {\n                var angle: number = -halfX + xLengthPerCluster * i;\n                var bigHypot: number = Math.sqrt(1 + angle * angle);\n                var normX: number = 1 / bigHypot;\n                var xPlane: Vector3 = xPlanes[i];\n                xPlane.setValue(normX, 0, -angle * normX);\n            }\n            //start from top is more similar to light pixel data\n            for (var i: number = 0; i < yCount; i++) {\n                var angle: number = halfY - yLengthPerCluster * i;\n                var bigHypot: number = Math.sqrt(1 + angle * angle);\n                var normY: number = -1 / bigHypot;\n                var yPlane: Vector3 = yPlanes[i];\n                yPlane.setValue(0, normY, -angle * normY);\n            }\n\n            this._clusterPlaneCacheFlag.x = fieldOfView;\n            this._clusterPlaneCacheFlag.y = aspectRatio;\n        }\n    }\n\n\n    /**\n     * 调用渲染命令流\n     * @param event \n     * @param renderTarget \n     * @param context \n     */\n    _applyCommandBuffer(event: number, context: RenderContext3D) {\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\n        if (!commandBufferArray || commandBufferArray.length == 0)\n            return;\n        commandBufferArray.forEach(function (value) {\n            value._context = context;\n            value._apply();\n        });\n        (RenderTexture.currentActive) && (RenderTexture.currentActive._end());\n        if (this._internalRenderTexture || this._offScreenRenderTexture)\n            this._getRenderTexture()._start();\n        else {\n            LayaGL.textureContext.bindoutScreenTarget();\n        }\n        LayaGL.renderEngine.viewport(0, 0, context.viewport.width, context.viewport.height);\n    }\n\n    /**\n     * apply \n     * @internal\n     */\n    _applyCasterPassCommandBuffer(context: RenderContext3D) {\n        if (!this._shadowCasterCommanBuffer || this._shadowCasterCommanBuffer.length == 0)\n            return;\n        this._shadowCasterCommanBuffer.forEach(function (value) {\n            value._context = context;\n            value._apply();\n        });\n    }\n\n    /**\n    * @internal\n    */\n    _addCasterShadowCommandBuffer(commandBuffer: CommandBuffer) {\n        if (this._shadowCasterCommanBuffer.indexOf(commandBuffer) < 0)\n            this._shadowCasterCommanBuffer.push(commandBuffer);\n    }\n\n    /**\n     * @internal\n     * @param commandBuffer \n     */\n    _removeCasterShadowCommandBuffer(commandBuffer: CommandBuffer) {\n        var index: number = this._shadowCasterCommanBuffer.indexOf(commandBuffer);\n        if (index != -1) this._shadowCasterCommanBuffer.splice(index, 1);\n    }\n\n    /**\n     * 渲染阴影模式\n     * @internal\n     * @param scene 渲染场景\n     * @param context 渲染上下文\n     */\n    _renderShadowMap(scene: Scene3D, context: RenderContext3D) {\n        if (Scene3D._updateMark % scene._ShadowMapupdateFrequency != 0) {\n            return false;\n        }\n        //render shadowMap\n        var shadowCasterPass;\n        var mainDirectLight: DirectionLightCom = scene._mainDirectionLight;\n        var needShadowCasterPass: boolean = mainDirectLight && mainDirectLight.shadowMode !== ShadowMode.None && ShadowUtils.supportShadow();\n        if (needShadowCasterPass) {\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT)\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\n            shadowCasterPass = ILaya3D.Scene3D._shadowCasterPass;\n            shadowCasterPass.update(this, mainDirectLight, ShadowLightType.DirectionLight);\n            shadowCasterPass.render(context, scene, ShadowLightType.DirectionLight, this);\n        }\n        else {\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\n        }\n        var spotMainLight = scene._mainSpotLight;\n        var spotneedShadowCasterPass: boolean = spotMainLight && spotMainLight.shadowMode !== ShadowMode.None && ShadowUtils.supportShadow();\n        if (spotneedShadowCasterPass) {\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\n            shadowCasterPass = ILaya3D.Scene3D._shadowCasterPass;\n            shadowCasterPass.update(this, spotMainLight, ShadowLightType.SpotLight);\n            shadowCasterPass.render(context, scene, ShadowLightType.SpotLight, this);\n        }\n        else {\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\n        }\n        if (needShadowCasterPass)\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\n        if (spotneedShadowCasterPass)\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\n\n        return needShadowCasterPass || spotneedShadowCasterPass;\n\n    }\n\n    /**\n     * 渲染主流程之前\n     * @internal\n     * @param context 渲染上下文\n     * @param scene 渲染场景\n     * @param needInternalRT 是否需要内部Rendertarget\n     * @param viewport 视口\n     */\n    _preRenderMainPass(context: RenderContext3D, scene: Scene3D, needInternalRT: boolean, viewport: Viewport) {\n        context.camera = this;\n        context.cameraShaderValue = this._shaderValues;\n        Camera._updateMark++;\n\n        //TODO:webgl2 should use blitFramebuffer\n        //TODO:if adjacent camera param can use same internal RT can merge\n        //if need internal RT and no off screen RT and clearFlag is DepthOnly or Nothing, should grab the backBuffer\n        if (needInternalRT && !this._offScreenRenderTexture && (this.clearFlag == CameraClearFlags.DepthOnly || this.clearFlag == CameraClearFlags.Nothing)) {\n            if (RenderTexture.bindCanvasRender) {//解决iOS中使用CopyTexSubImage2D特别慢的bug\n                var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(RenderTexture.bindCanvasRender, this._internalRenderTexture);\n                blit.setContext(context);\n                blit.run();\n                blit.recover();\n            } else {\n                if (this._enableHDR) {//internal RT is HDR can't directly copy\n                    var grabTexture: RenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, RenderTargetFormat.R8G8B8, RenderTargetFormat.DEPTH_16, false, 1);\n                    grabTexture.filterMode = FilterMode.Bilinear;\n                    this._renderEngine.copySubFrameBuffertoTex(grabTexture, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\n                    // this._renderEngine.bindTexture(gl.TEXTURE_2D, grabTexture._getSource());\n                    // gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\n                    var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(grabTexture, this._internalRenderTexture);\n                    blit.setContext(context);\n                    blit.run();\n                    blit.recover();\n                    RenderTexture.recoverToPool(grabTexture);\n                }\n                else {\n                    this._renderEngine.copySubFrameBuffertoTex(this._internalRenderTexture, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\n                    // this._renderEngine.bindTexture(gl.TEXTURE_2D, this._internalRenderTexture._getSource());\n                    // gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\n                }\n            }\n\n        }\n    }\n\n    /**\n     * 渲染主流程\n     * @internal\n     * @param context 渲染上下文\n     * @param viewport 视口\n     * @param scene 场景\n     * @param shader shader\n     * @param replacementTag 替换标签\n     * @param needInternalRT 是否需要内部RT\n     */\n    _renderMainPass(context: RenderContext3D, viewport: Viewport, scene: Scene3D, shader: Shader3D, replacementTag: string, needInternalRT: boolean) {\n        var renderTex: RenderTexture = this._getRenderTexture();//如果有临时renderTexture则画到临时renderTexture,最后再画到屏幕或者离屏画布,如果无临时renderTexture则直接画到屏幕或离屏画布\n        if (renderTex && renderTex._isCameraTarget)//保证反转Y状态正确\n            context.invertY = true;\n        else\n            context.invertY = false;\n        context.viewport = viewport;\n        //设置context的渲染目标\n        context.destTarget = renderTex;\n        this._prepareCameraToRender();\n        var multiLighting: boolean = Config3D._multiLighting;\n        (multiLighting) && (Cluster.instance.update(this, <Scene3D>(scene)));\n\n        context.customShader = shader;\n        context.replaceTag = replacementTag;\n        scene._preCulling(context, this);\n\n        this._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\n        if (this._cameraUniformData) {//需要在Depth之前更新数据\n            this._cameraUniformUBO && this._cameraUniformUBO.setDataByUniformBufferData(this._cameraUniformData);\n        }\n        // if (this.depthTextureMode != 0) {\n        //     //TODO:是否可以不多次\n        this._renderDepthMode(context);\n        // }\n\n        // todo layame temp\n        (renderTex) && (renderTex._start());\n\n\n        scene._clear(context);\n\n        this._applyCommandBuffer(CameraEventFlags.BeforeForwardOpaque, context);\n\n        this.recoverRenderContext3D(context, renderTex);\n        scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERQPAQUE);\n        this._applyCommandBuffer(CameraEventFlags.BeforeSkyBox, context);\n        this._opaquePass && this._createOpaqueTexture(renderTex, context);\n        this.recoverRenderContext3D(context, renderTex);\n        scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_SKYBOX);\n        this._applyCommandBuffer(CameraEventFlags.BeforeTransparent, context);\n\n        this.recoverRenderContext3D(context, renderTex);\n        scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT);\n        scene._componentDriver.callPostRender();//TODO:duo相机是否重复\n        this._applyCommandBuffer(CameraEventFlags.BeforeImageEffect, context);\n        (renderTex) && (renderTex._end());\n\n        if (needInternalRT && Camera.enablePostProcess) {\n            if (this._postProcess && this._postProcess.enable) {\n                this._postProcess.commandContext = context;\n                this._postProcess._render(this);\n                this._postProcess._applyPostProcessCommandBuffers();\n            } else if (this._enableHDR || this._needBuiltInRenderTexture) {\n                var canvasWidth: number = this._getCanvasWidth(), canvasHeight: number = this._getCanvasHeight();\n                if (this._offScreenRenderTexture) {\n                    this._screenOffsetScale.setValue(viewport.x / canvasWidth, (canvasHeight - viewport.y - viewport.height) / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\n                    this._internalCommandBuffer._camera = this;\n                    this._internalCommandBuffer._context = context;\n                    this._internalCommandBuffer.blitScreenQuad(this._internalRenderTexture, this._offScreenRenderTexture, this._screenOffsetScale, null, null, 0);\n                    this._internalCommandBuffer._apply();\n                    this._internalCommandBuffer.clear();\n                }\n            }\n        }\n        if (this._offScreenRenderTexture) {\n            RenderTexture.bindCanvasRender = null;\n        } else\n            RenderTexture.bindCanvasRender = this._internalRenderTexture;\n        this._applyCommandBuffer(CameraEventFlags.AfterEveryThing, context);\n\n        // if (renderTex && renderTex._isCameraTarget)//保证反转Y状态正确\n        //     context.invertY = false;\n    }\n\n    recoverRenderContext3D(context: RenderContext3D, renderTexture: RenderTexture) {\n        const cacheViewPor = Camera._context3DViewPortCatch;\n        const cacheScissor = Camera._contextScissorPortCatch;\n        context.changeViewport(cacheViewPor.x, cacheViewPor.y, cacheViewPor.width, cacheViewPor.height);\n        context.changeScissor(cacheScissor.x, cacheScissor.y, cacheScissor.z, cacheScissor.w);\n        context.destTarget = renderTexture;\n    }\n\n    /**\n     * 根据camera的深度贴图模式更新深度贴图\n     * @internal\n     */\n    _renderDepthMode(context: RenderContext3D) {\n        var cameraDepthMode = this._depthTextureMode;\n        if (this._postProcess && this._postProcess.enable) {\n            cameraDepthMode |= this._postProcess.cameraDepthTextureMode;\n        }\n        if ((cameraDepthMode & DepthTextureMode.Depth) != 0) {\n            // todo\n            if (!this.canblitDepth || !this._internalRenderTexture.depthStencilTexture) {\n                Camera.depthPass.update(this, DepthTextureMode.Depth, this._depthTextureFormat);\n                Camera.depthPass.render(context, DepthTextureMode.Depth);\n            }\n            else {\n                this.depthTexture = this._cacheDepthTexture.depthStencilTexture;\n                //@ts-ignore;\n                Camera.depthPass._depthTexture = this.depthTexture;\n                Camera.depthPass._setupDepthModeShaderValue(DepthTextureMode.Depth, this);\n            }\n        }\n        if ((cameraDepthMode & DepthTextureMode.DepthNormals) != 0) {\n            Camera.depthPass.update(this, DepthTextureMode.DepthNormals, this._depthTextureFormat);\n            Camera.depthPass.render(context, DepthTextureMode.DepthNormals);\n        }\n    }\n\n    /**\n     * @internal\n     * 深度贴图\n     */\n    get depthTexture(): BaseTexture {\n        return this._depthTexture;\n    }\n\n    set depthTexture(value: BaseTexture) {\n        this._depthTexture = value;\n    }\n\n    /**\n     * @internal\n     * 深度法线贴图\n     */\n    get depthNormalTexture(): RenderTexture {\n        return this._depthNormalsTexture;\n    }\n\n    set depthNormalTexture(value: RenderTexture) {\n        this._depthNormalsTexture = value;\n    }\n\n\n    /**\n     * @internal\n     * @param needShadowPass \n     */\n    _aftRenderMainPass(needShadowPass: Boolean) {\n        // if (needShadowPass)\n        //     ILaya3D.Scene3D._shadowCasterPass.cleanUp();\n        if (this._cacheDepth && this._internalRenderTexture) {\n            if (this._cacheDepthTexture)\n                this._cacheDepthTexture._inPool ? RenderTexture.recoverToPool(this._cacheDepthTexture) : 0;\n            this._cacheDepthTexture = this._internalRenderTexture;\n        }\n        Camera.depthPass.cleanUp();\n    }\n\n\n    _createOpaqueTexture(currentTarget: RenderTexture, renderContext: RenderContext3D) {\n        if (!this._opaqueTexture) {\n            let tex = this._getRenderTexture();\n            this._opaqueTexture = RenderTexture.createFromPool(tex.width, tex.height, tex.colorFormat, RenderTargetFormat.None, false, 1, false, true);\n            this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE, this._opaqueTexture);\n        }\n        var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(currentTarget, this._opaqueTexture);\n        blit.setContext(renderContext);\n        blit.run();\n        blit.recover();\n    }\n\n    /**\n     * @override\n     * @param shader 着色器\n     * @param replacementTag 替换标记。\n     */\n    render(shader: Shader3D = null, replacementTag: string = null): void {\n        if (!this.activeInHierarchy) //custom render should protected with activeInHierarchy=true\n            return;\n\n        var viewport: Viewport = this.viewport;\n        var needInternalRT: boolean = this._needInternalRenderTexture();\n        var context: RenderContext3D = RenderContext3D._instance;\n        var scene: Scene3D = context.scene = <Scene3D>this._scene;\n        context.pipelineMode = context.configPipeLineMode;\n        context.replaceTag = replacementTag;\n        context.customShader = shader;\n        let texFormat = this._getRenderTextureFormat();\n\n        if (needInternalRT) {\n            if (this._msaa) {\n                this._internalRenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, texFormat, this._depthTextureFormat, false, 4, this.canblitDepth, this._needRenderGamma(texFormat));\n                this._internalRenderTexture.filterMode = FilterMode.Bilinear;\n            } else {\n                this._internalRenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, texFormat, this._depthTextureFormat, false, 1, this.canblitDepth, this._needRenderGamma(texFormat));\n                this._internalRenderTexture.filterMode = FilterMode.Bilinear;\n            }\n        }\n        else {\n            this._internalRenderTexture = null;\n        }\n        scene._componentDriver.callPreRender();\n        var needShadowCasterPass: boolean = this._renderShadowMap(scene, context);\n        this._preRenderMainPass(context, scene, needInternalRT, viewport);\n        this._renderMainPass(context, viewport, scene, shader, replacementTag, needInternalRT);\n        this._aftRenderMainPass(needShadowCasterPass);\n        scene._componentDriver.callPostRender();\n    }\n\n\n    /**\n     * 计算从屏幕空间生成的射线。\n     * @param point 屏幕空间的位置位置。\n     * @param out  输出射线。\n     */\n    viewportPointToRay(point: Vector2, out: Ray): void {\n        this._rayViewport.x = this.viewport.x;\n        this._rayViewport.y = this.viewport.y;\n        this._rayViewport.width = ILaya.stage._width;\n        this._rayViewport.height = ILaya.stage._height;\n        Picker.calculateCursorRay(point, this._rayViewport, this._projectionMatrix, this.viewMatrix, null, out);\n    }\n\n    /** \n     * 计算从裁切空间生成的射线。\n     * @param point 裁切空间的位置。\n     * @param out  输出射线。\n     */\n    normalizedViewportPointToRay(point: Vector2, out: Ray): void {\n        var finalPoint: Vector2 = Camera._tempVector20;\n        var vp: Viewport = this.normalizedViewport;\n        point.x = point.x * Config3D.pixelRatio;\n        point.y = point.y * Config3D.pixelRatio;\n        finalPoint.x = point.x * vp.width;\n        finalPoint.y = point.y * vp.height;\n\n        Picker.calculateCursorRay(finalPoint, this.viewport, this._projectionMatrix, this.viewMatrix, null, out);\n    }\n\n    /**\n     * 将一个点从世界空间转换到视口空间。\n     * @param position 世界空间的坐标。\n     * @param out  x、y、z为视口空间坐标,w为相对于摄像机的z轴坐标。\n     */\n    worldToViewportPoint(position: Vector3, out: Vector4): void {\n        Matrix4x4.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix);\n        this.viewport.project(position, this._projectionViewMatrix, out);\n        var r = Config3D.pixelRatio;\n        let _wr = (out.x - this.viewport.x) / r;\n        let _hr = (out.y - this.viewport.y) / r;\n        out.x = _wr + this.viewport.x;\n        out.y = _hr + this.viewport.y;\n\n        out.x = (out.x / ILaya.stage.clientScaleX) | 0;\n        out.y = (out.y / ILaya.stage.clientScaleY) | 0;\n    }\n\n    /**\n     * 将一个点从世界空间转换到归一化视口空间。\n     * @param position 世界空间的坐标。\n     * @param out  x、y、z为归一化视口空间坐标,w为相对于摄像机的z轴坐标。\n     */\n    worldToNormalizedViewportPoint(position: Vector3, out: Vector4): void {\n        this.worldToViewportPoint(position, out);\n        out.x = out.x / ILaya.stage.width;\n        out.y = out.y / ILaya.stage.height;\n    }\n\n    /**\n     * 转换2D屏幕坐标系统到3D正交投影下的坐标系统，注:只有正交模型下有效。\n     * @param   source 源坐标。\n     * @param   out 输出坐标。\n     * @return 是否转换成功。\n     */\n    convertScreenCoordToOrthographicCoord(source: Vector3, out: Vector3): boolean {//TODO:是否应该使用viewport宽高\n        if (this._orthographic) {\n            var clientWidth: number = this.clientWidth;\n            var clientHeight: number = this.clientHeight;\n            var ratioX: number = this.orthographicVerticalSize * this.aspectRatio / clientWidth;\n            var ratioY: number = this.orthographicVerticalSize / clientHeight;\n            out.x = (-clientWidth / 2 + source.x * ILaya.stage.clientScaleX) * ratioX;\n            out.y = (clientHeight / 2 - source.y * ILaya.stage.clientScaleY) * ratioY;\n            out.z = (this.nearPlane - this.farPlane) * (source.z + 1) / 2 - this.nearPlane;\n            Vector3.transformCoordinate(out, this.transform.worldMatrix, out);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    destroy(destroyChild: boolean = true): void {\n        this._needInternalRenderTexture() && (!this._internalRenderTexture._inPool) && RenderTexture.recoverToPool(this._internalRenderTexture);\n        this._offScreenRenderTexture = null;\n        this.transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\n        ILaya.stage.off(Event.RESIZE, this, this._onScreenSizeChanged);\n        this._cameraEventCommandBuffer = {};\n        this._shaderValues.destroy();\n        if (RenderContext3D._instance.camera == this) {\n            RenderContext3D._instance.cameraShaderValue = null;\n            RenderContext3D._instance.camera = null;\n        }\n        super.destroy(destroyChild);\n    }\n\n    /**\n     * 增加camera渲染节点渲染缓存\n     * @param event 相机事件标志\n     * @param commandBuffer 渲染命令流\n     */\n    addCommandBuffer(event: CameraEventFlags, commandBuffer: CommandBuffer): void {\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\n        if (!commandBufferArray) commandBufferArray = this._cameraEventCommandBuffer[event] = [];\n        if (commandBufferArray.indexOf(commandBuffer) < 0)\n            commandBufferArray.push(commandBuffer);\n        commandBuffer._camera = this;\n        if (commandBuffer.casterShadow) {\n            this._addCasterShadowCommandBuffer(commandBuffer);\n        }\n    }\n\n    /**\n     * 移除camera渲染节点渲染缓存\n     * @param event 相机事件标志\n     * @param commandBuffer 渲染命令流\n     */\n    removeCommandBuffer(event: CameraEventFlags, commandBuffer: CommandBuffer): void {\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\n        if (commandBufferArray) {\n            var index: number = commandBufferArray.indexOf(commandBuffer);\n            if (index != -1) commandBufferArray.splice(index, 1);\n\n            commandBuffer.casterShadow && this._removeCasterShadowCommandBuffer(commandBuffer);\n        }\n        else\n            throw \"Camera:unknown event.\";\n    }\n\n    /**\n     * 移除camera相机节点的所有渲染缓存\n     * @param event 相机事件标志\n     */\n    removeCommandBuffers(event: CameraEventFlags): void {\n        if (this._cameraEventCommandBuffer[event])\n            this._cameraEventCommandBuffer[event].length = 0;\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Node {\n        return new Camera();\n    }\n\n    /** @internal [NATIVE]*/\n    _boundFrustumBuffer: Float32Array;\n}\n\n","/**\n\t * ...\n\t * @author ...\n\t */\nexport class GradientMode {\n\t/**\n\t * 找到与请求的评估时间相邻的两个键,并线性插值在他们之间,以获得一种混合的颜色。\n\t */\n\tstatic Blend: number = 0;\n\n\t/**\n\t * 返回一个固定的颜色，通过查找第一个键的时间值大于所请求的评估时间。\n\t */\n\tstatic Fixed: number = 1;\n}\n\n","import { GradientMode } from \"./GradientMode\";\nimport { IClone } from \"../../utils/IClone\";\nimport { Color } from \"../../maths/Color\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n\n/**\n * <code>Gradient</code> 类用于创建颜色渐变。\n */\nexport class Gradient implements IClone {\n\tprivate _mode: number = 0;\n\tprivate _maxColorRGBKeysCount: number = 0;\n\tprivate _maxColorAlphaKeysCount: number = 0;\n\tprivate _colorRGBKeysCount: number = 0;\n\tprivate _colorAlphaKeysCount: number = 0;\n\n\t/**\n\t * @internal \n\t * element key range\n\t * x: colorkey min\n\t * y: colorkey max\n\t * z: alphakey min\n\t * w: alphakey max\n\t*/\n\t_keyRanges: Vector4 = new Vector4(1, 0, 1, 0);\n\n\t/**@internal */\n\t_alphaElements: Float32Array = null;\n\t/**@internal */\n\t_rgbElements: Float32Array = null;\n\n\t/**\n\t * 获取梯度模式。\n\t * @return  梯度模式。\n\t */\n\tget mode(): number {\n\t\treturn this._mode;\n\t}\n\n\t/**\n\t * 设置梯度模式。\n\t * @param value 梯度模式。\n\t */\n\tset mode(value: number) {\n\t\tthis._mode = value;\n\t}\n\n\t/**\n\t * 获取颜色RGB数量。\n\t * @return 颜色RGB数量。\n\t */\n\tget colorRGBKeysCount(): number {\n\t\treturn this._colorRGBKeysCount;\n\t}\n\n\t/**\n\t * 获取颜色Alpha数量。\n\t * @return 颜色Alpha数量。\n\t */\n\tget colorAlphaKeysCount(): number {\n\t\treturn this._colorAlphaKeysCount;\n\t}\n\n\t/**\n\t * 获取最大颜色RGB帧数量。\n\t * @return 最大RGB帧数量。\n\t */\n\tget maxColorRGBKeysCount(): number {\n\t\treturn this._maxColorRGBKeysCount;\n\t}\n\n\t/**\n\t * 获取最大颜色Alpha帧数量。\n\t * @return 最大Alpha帧数量。\n\t */\n\tget maxColorAlphaKeysCount(): number {\n\t\treturn this._maxColorAlphaKeysCount;\n\t}\n\n\t/**\n\t * 创建一个 <code>Gradient</code> 实例。\n\t * @param maxColorRGBKeyCount 最大RGB帧个数。\n\t * @param maxColorAlphaKeyCount 最大Alpha帧个数。\n\t */\n\tconstructor(maxColorRGBKeyCount: number, maxColorAlphaKeyCount: number) {\n\t\tthis._maxColorRGBKeysCount = maxColorRGBKeyCount;\n\t\tthis._maxColorAlphaKeysCount = maxColorAlphaKeyCount;\n\t\tthis._rgbElements = new Float32Array(maxColorRGBKeyCount * 4);\n\t\tthis._alphaElements = new Float32Array(maxColorAlphaKeyCount * 2);\n\t}\n\n\t/**\n\t * 增加颜色RGB帧。\n\t * @param\tkey 生命周期，范围为0到1。\n\t * @param\tvalue RGB值。\n\t */\n\taddColorRGB(key: number, value: Color): void {\n\t\tif (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {\n\t\t\tvar offset: number = this._colorRGBKeysCount * 4;\n\t\t\tthis._rgbElements[offset] = key;\n\t\t\tthis._rgbElements[offset + 1] = value.r;\n\t\t\tthis._rgbElements[offset + 2] = value.g;\n\t\t\tthis._rgbElements[offset + 3] = value.b;\n\t\t\tthis._colorRGBKeysCount++;\n\t\t} else {\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorRGBKeysCount);\n\t\t}\n\t}\n\n\t/**\n\t * 增加颜色Alpha帧。\n\t * @param\tkey 生命周期，范围为0到1。\n\t * @param\tvalue Alpha值。\n\t */\n\taddColorAlpha(key: number, value: number): void {\n\t\tif (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {\n\t\t\tvar offset: number = this._colorAlphaKeysCount * 2;\n\t\t\tthis._alphaElements[offset] = key;\n\t\t\tthis._alphaElements[offset + 1] = value;\n\t\t\tthis._colorAlphaKeysCount++;\n\t\t} else {\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorAlphaKeysCount);\n\t\t}\n\t}\n\n\t/**\n\t * 更新颜色RGB帧。\n\t * @param   index 索引。\n\t * @param\tkey 生命周期，范围为0到1。\n\t * @param\tvalue RGB值。\n\t */\n\tupdateColorRGB(index: number, key: number, value: Color): void {//TODO:以key为键自动排序\n\t\tif (index < this._colorRGBKeysCount) {\n\t\t\tvar offset: number = index * 4;\n\t\t\tthis._rgbElements[offset] = key;\n\t\t\tthis._rgbElements[offset + 1] = value.r;\n\t\t\tthis._rgbElements[offset + 2] = value.g;\n\t\t\tthis._rgbElements[offset + 3] = value.b;\n\t\t} else {\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorRGBKeysCount:\" + this._colorRGBKeysCount);\n\t\t}\n\t}\n\n\t/**\n\t * 更新颜色Alpha帧。\n\t * @param   index 索引。\n\t * @param\tkey 生命周期，范围为0到1。\n\t * @param\tvalue Alpha值。\n\t */\n\tupdateColorAlpha(index: number, key: number, value: number): void {\n\t\tif (index < this._colorAlphaKeysCount) {\n\t\t\tvar offset: number = index * 2;\n\t\t\tthis._alphaElements[offset] = key;\n\t\t\tthis._alphaElements[offset + 1] = value;\n\t\t} else {\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorAlphaKeysCount:\" + this._colorAlphaKeysCount);\n\t\t}\n\t}\n\n\t/**\n\t * 通过插值获取RGB颜色。\n\t * @param  lerpFactor 插值因子。\n\t * @param  out 颜色结果。\n\t * @param  开始查找索引。\n\t * @return 结果索引。\n\t */\n\tevaluateColorRGB(lerpFactor: number, out: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\n\n\t\tvar rgbElements: Float32Array = this._rgbElements;\n\t\tvar curIndex: number = startSearchIndex;\n\n\t\tif (reverseSearch) {\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\n\t\t\t\tvar offset: number = i * 4;\n\t\t\t\tvar left: number = rgbElements[offset];\n\t\t\t\tif (lerpFactor === left) {\n\t\t\t\t\tout.r = rgbElements[offset + 1];\n\t\t\t\t\tout.g = rgbElements[offset + 2];\n\t\t\t\t\tout.b = rgbElements[offset + 3];\n\t\t\t\t\treturn curIndex;\n\t\t\t\t}\n\n\t\t\t\tswitch (this._mode) {\n\t\t\t\t\tcase GradientMode.Blend:\n\t\t\t\t\t\tif (lerpFactor > left) {\n\t\t\t\t\t\t\tvar right: number = rgbElements[offset + 4];\n\t\t\t\t\t\t\tif (lerpFactor > right)\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\t\t\t\t\t\t\tvar diff: number = right - left;\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset + 1] + y2 * rgbElements[offset + 5]) / diff;\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset + 2] + y2 * rgbElements[offset + 6]) / diff;\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset + 3] + y2 * rgbElements[offset + 7]) / diff;\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tcase GradientMode.Fixed:\n\t\t\t\t\t\tif (lerpFactor > left) {\n\t\t\t\t\t\t\tif (lerpFactor > rgbElements[offset + 4])\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 5];\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 6];\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 7];\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i: number = 0, n: number = this._rgbElements.length; i < n; i++) {\n\t\t\t\toffset = i * 4;\n\t\t\t\tvar right: number = rgbElements[offset];\n\t\t\t\tif (lerpFactor === right) {\n\t\t\t\t\tout.r = rgbElements[offset + 1];\n\t\t\t\t\tout.g = rgbElements[offset + 2];\n\t\t\t\t\tout.b = rgbElements[offset + 3];\n\t\t\t\t\treturn curIndex;\n\t\t\t\t}\n\n\t\t\t\tswitch (this._mode) {\n\t\t\t\t\tcase GradientMode.Blend:\n\t\t\t\t\t\tif (lerpFactor < right) {\n\t\t\t\t\t\t\tvar left: number = rgbElements[offset - 4];\n\t\t\t\t\t\t\tif (lerpFactor < left)\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\t\t\t\t\t\t\tvar diff: number = right - left;\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset - 3] + y2 * rgbElements[offset + 1]) / diff;\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset - 2] + y2 * rgbElements[offset + 2]) / diff;\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset - 1] + y2 * rgbElements[offset + 3]) / diff;\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tcase GradientMode.Fixed:\n\t\t\t\t\t\tif (lerpFactor < right) {\n\t\t\t\t\t\t\tif (lerpFactor < rgbElements[offset - 4])\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 1];\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 2];\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 3];\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn curIndex;\n\t}\n\n\t/**\n\t * 通过插值获取透明值。\n\t * @param  lerpFactor 插值因子。\n\t * @param  out 颜色结果。\n\t * @param  开始查找索引。\n\t * @return 结果索引 。\n\t */\n\tevaluateColorAlpha(lerpFactor: number, outColor: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\n\t\tvar alphaElements: Float32Array = this._alphaElements;\n\t\tvar curIndex: number = startSearchIndex;\n\n\t\tif (reverseSearch) {\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\n\t\t\t\tvar offset: number = i * 2;\n\t\t\t\tvar left: number = alphaElements[offset];\n\t\t\t\tif (lerpFactor === left) {\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\n\t\t\t\t\treturn curIndex;\n\t\t\t\t}\n\n\t\t\t\tswitch (this._mode) {\n\t\t\t\t\tcase GradientMode.Blend:\n\t\t\t\t\t\tif (lerpFactor > left) {\n\t\t\t\t\t\t\tvar right: number = alphaElements[offset + 2];\n\t\t\t\t\t\t\tif (lerpFactor > right)\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\n\t\t\t\t\t\t\tvar diff: number = right - left;\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset + 1] + x2 * alphaElements[offset + 3]) / diff;\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tcase GradientMode.Fixed:\n\t\t\t\t\t\tif (lerpFactor > left) {\n\t\t\t\t\t\t\tif (lerpFactor > alphaElements[offset + 2])\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 3];\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i: number = curIndex, n: number = this._alphaElements.length; i < n; i++) {\n\t\t\t\tvar offset: number = i * 2;\n\t\t\t\tvar right: number = alphaElements[offset];\n\t\t\t\tif (lerpFactor === right) {\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\n\t\t\t\t\treturn curIndex;\n\t\t\t\t}\n\n\t\t\t\tswitch (this._mode) {\n\t\t\t\t\tcase GradientMode.Blend:\n\t\t\t\t\t\tif (lerpFactor < right) {\n\t\t\t\t\t\t\tvar left: number = alphaElements[offset - 2];\n\t\t\t\t\t\t\tif (lerpFactor < left)\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\t\t\t\t\t\t\tvar diff: number = right - left;\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset - 1] + x2 * alphaElements[offset + 1]) / diff;\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tcase GradientMode.Fixed:\n\t\t\t\t\t\tif (lerpFactor < right) {\n\t\t\t\t\t\t\tif (lerpFactor < alphaElements[offset - 2])\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 1];\n\t\t\t\t\t\t\treturn curIndex;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurIndex++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn curIndex;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientDataColor: Gradient = (<Gradient>destObject);\n\t\tvar i: number, n: number;\n\t\tdestGradientDataColor._colorAlphaKeysCount = this._colorAlphaKeysCount;\n\t\tlet destAlphaElements = destGradientDataColor._alphaElements = new Float32Array(this._alphaElements.length);\n\t\t\n\t\tfor (i = 0, n = this._alphaElements.length; i < n; i++)\n\t\t\tdestAlphaElements[i] = this._alphaElements[i];\n\n\t\tdestGradientDataColor._colorRGBKeysCount = this._colorRGBKeysCount;\n\t\tvar destRGBElements: Float32Array = destGradientDataColor._rgbElements = new Float32Array(this._rgbElements.length);\n\t\tfor (i = 0, n = this._rgbElements.length; i < n; i++)\n\t\t\tdestRGBElements[i] = this._rgbElements[i];\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientDataColor: Gradient = new Gradient(this._maxColorRGBKeysCount, this._maxColorAlphaKeysCount);\n\t\tthis.cloneTo(destGradientDataColor);\n\t\treturn destGradientDataColor;\n\t}\n\n}\n\n\n","import { Scene3D } from \"../scene/Scene3D\";\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\nimport { Light, LightType } from \"./Light\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n\n/**\n * <code>DirectionLight</code> 类用于创建平行光。\n */\nexport class DirectionLightCom extends Light {\n\t/** @internal */\n\t_direction: Vector3 = new Vector3();\n\t/** @internal */\n\t_shadowCascadesMode: ShadowCascadesMode = ShadowCascadesMode.NoCascades;\n\t/** @internal */\n\t_shadowTwoCascadeSplits: number = 1.0 / 3.0;\n\t/** @internal */\n\t_shadowFourCascadeSplits: Vector3 = new Vector3(1.0 / 15, 3.0 / 15.0, 7.0 / 15.0);\n\n\t/**\n\t * 阴影级联数量。\n\t */\n\tget shadowCascadesMode(): ShadowCascadesMode {\n\t\treturn this._shadowCascadesMode;\n\t}\n\n\tset shadowCascadesMode(value: ShadowCascadesMode) {\n\t\tthis._shadowCascadesMode = value;\n\t}\n\n\t/**\n\t * 二级级联阴影分割比例。\n\t */\n\tget shadowTwoCascadeSplits(): number {\n\t\treturn this._shadowTwoCascadeSplits;\n\t}\n\n\tset shadowTwoCascadeSplits(value: number) {\n\t\tthis._shadowTwoCascadeSplits = value;\n\t}\n\n\t/**\n\t * 四级级联阴影分割比例,X、Y、Z依次为其分割比例,Z必须大于Y,Y必须大于X。\n\t */\n\tget shadowFourCascadeSplits(): Vector3 {\n\t\treturn this._shadowFourCascadeSplits;\n\t}\n\n\tset shadowFourCascadeSplits(value: Vector3) {\n\t\tif (value.x > value.y || value.y > value.z || value.z > 1.0)\n\t\t\tthrow \"DiretionLight:Invalid value.\";\n\t\tvalue.cloneTo(this._shadowFourCascadeSplits);\n\t}\n\n\t/**\n\t * 创建一个 <code>DirectionLight</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._lightType = LightType.Directional;\n\t}\n\n\t/**\n\t * @internal\n\t * @override\n\t */\n\tprotected _addToLightQueue(): void {\n\t\t(<Scene3D>this.owner.scene)._directionLights.add(this);\n\t}\n\n\t/**\n\t * @internal\n\t * @override\n\t */\n\tprotected _removeFromLightQueue(): void {\n\t\t(<Scene3D>this.owner.scene)._directionLights.remove(this);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): DirectionLightCom {\n\t\treturn new DirectionLightCom();\n\t}\n}\n\n","import { Node } from \"../../../display/Node\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { ShadowMode } from \"./ShadowMode\";\nimport { Light, LightMode } from \"./Light\";\nimport { Color } from \"../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\n\n/**\n * <code>LightSprite</code> 类用于创建灯光的父类。\n */\nexport class LightSprite extends Sprite3D {\n\t/** @internal */\n\t_light: Light;\n\t/**\n\t * 灯光颜色。\n\t */\n\tget color(): Color {\n\t\treturn this._light.color;\n\t}\n\n\tset color(value: Color) {\n\t\tthis._light.color = value;\n\t}\n\n\tget mode(): LightMode {\n\t\treturn this._light.lightmapBakedType;\n\t}\n\n\tset mode(value: LightMode) {\n\t\tthis._light.lightmapBakedType = value;\n\t}\n\n\t/**\n\t * 灯光强度。\n\t */\n\tget intensity(): number {\n\t\treturn this._light.intensity;\n\t}\n\n\tset intensity(value: number) {\n\t\tthis._light.intensity = value;\n\t}\n\n\t/**\n\t * 阴影模式。\n\t */\n\tget shadowMode(): ShadowMode {\n\t\treturn this._light.shadowMode;\n\t}\n\n\tset shadowMode(value: ShadowMode) {\n\t\tthis._light.shadowMode = value\n\t}\n\n\t/**\n\t * 最大阴影距离。\n\t */\n\tget shadowDistance(): number {\n\t\treturn this._light.shadowDistance;\n\t}\n\n\tset shadowDistance(value: number) {\n\t\tthis._light.shadowDistance = value;\n\t}\n\n\t/**\n\t * 阴影贴图分辨率。\n\t */\n\tget shadowResolution(): number {\n\t\treturn this._light.shadowResolution;\n\t}\n\n\tset shadowResolution(value: number) {\n\t\tthis._light.shadowResolution = value;\n\t}\n\n\t/**\n\t * 阴影深度偏差。\n\t */\n\tget shadowDepthBias(): number {\n\t\treturn this._light.shadowDepthBias;\n\t}\n\n\tset shadowDepthBias(value: number) {\n\t\tthis._light.shadowDepthBias = value;\n\t}\n\n\t/**\n\t * 阴影法线偏差。\n\t */\n\tget shadowNormalBias(): number {\n\t\treturn this._light.shadowNormalBias;\n\t}\n\n\tset shadowNormalBias(value: number) {\n\t\tthis._light.shadowNormalBias = value;\n\t}\n\n\t/**\n\t * 阴影强度。\n\t */\n\tget shadowStrength(): number {\n\t\treturn this._light.shadowStrength;\n\t}\n\n\tset shadowStrength(value: number) {\n\t\tthis._light.shadowStrength = value;\n\t}\n\n\t/**\n\t * 阴影视锥的近裁面。\n\t */\n\tget shadowNearPlane(): number {\n\t\treturn this._light.shadowNearPlane;\n\t}\n\n\tset shadowNearPlane(value: number) {\n\t\tthis._light.shadowNearPlane = value;\n\t}\n\n\t/**\n\t * 灯光烘培类型。\n\t */\n\tget lightmapBakedType(): number {\n\t\treturn this._light.lightmapBakedType;\n\t}\n\n\tset lightmapBakedType(value: number) {\n\t\tthis._light.lightmapBakedType = value;\n\t}\n\n\tget lightWorldMatrix(): Matrix4x4 {\n\t\treturn this._light.lightWorldMatrix;\n\t}\n\n\t/**\n\t * 创建一个 <code>LightSprite</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_parse(data: any, spriteMap: any): void {\n\t\tsuper._parse(data, spriteMap);\n\t\tvar colorData: any[] = data.color;\n\t\tthis.color.r = colorData[0];\n\t\tthis.color.g = colorData[1];\n\t\tthis.color.b = colorData[2];\n\t\tthis.intensity = data.intensity;\n\t\tthis.lightmapBakedType = data.lightmapBakedType;\n\t}\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node) {\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);\n\t\tvar spriteLight = <LightSprite>destObject;\n\t\tspriteLight.color = this.color.clone();\n\t\tspriteLight.intensity = this.intensity;\n\t\tspriteLight.lightmapBakedType = this.lightmapBakedType;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _addToLightQueue(): void {\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _removeFromLightQueue(): void {\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Node {\n\t\treturn new Sprite3D();\n\t}\n}\n\n","import { ShadowCascadesMode } from \"./ShadowCascadesMode\";\nimport { Node } from \"../../../display/Node\";\nimport { DirectionLightCom } from \"./DirectionLightCom\";\nimport { LightSprite } from \"./LightSprite\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>DirectionLight</code> 类用于创建平行光。\n */\nexport class DirectionLight extends LightSprite {\n\n\t/** @internal */\n\t_light: DirectionLightCom;\n\n\t/**\n\t * 阴影级联数量。\n\t */\n\tget shadowCascadesMode(): ShadowCascadesMode {\n\t\treturn this._light._shadowCascadesMode;\n\t}\n\n\tset shadowCascadesMode(value: ShadowCascadesMode) {\n\t\tthis._light._shadowCascadesMode = value;\n\t}\n\n\t/**\n\t * 二级级联阴影分割比例。\n\t */\n\tget shadowTwoCascadeSplits(): number {\n\t\treturn this._light._shadowTwoCascadeSplits;\n\t}\n\n\tset shadowTwoCascadeSplits(value: number) {\n\t\tthis._light._shadowTwoCascadeSplits = value;\n\t}\n\n\t/**\n\t * 四级级联阴影分割比例,X、Y、Z依次为其分割比例,Z必须大于Y,Y必须大于X。\n\t */\n\tget shadowFourCascadeSplits(): Vector3 {\n\t\treturn this._light._shadowFourCascadeSplits;\n\t}\n\n\tset shadowFourCascadeSplits(value: Vector3) {\n\t\tif (value.x > value.y || value.y > value.z || value.z > 1.0)\n\t\t\tthrow \"DiretionLight:Invalid value.\";\n\t\tvalue.cloneTo(this._light._shadowFourCascadeSplits);\n\t}\n\n\t/**\n\t * 创建一个 <code>DirectionLight</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._light = this.addComponent(DirectionLightCom);\n\t}\n\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Node {\n\t\treturn new Sprite3D();\n\t}\n}\n\n","import { Component } from \"../../../components/Component\";\nimport { Light, LightType } from \"./Light\";\n\n\nexport class PointLightCom extends Light {\n    /** @internal */\n    private _range: number;\n\n    /**\n     * 点光的范围。\n     * @return 点光的范围。\n     */\n    get range(): number {\n        return this._range;\n    }\n\n    set range(value: number) {\n        this._range = value;\n    }\n\n    /**\n     * 创建一个 <code>PointLight</code> 实例。\n     */\n    constructor() {\n        super();\n        this._range = 6.0;\n        this._lightType = LightType.Point;\n    }\n\n\n    /**\n     * @internal\n     * @override\n     */\n    protected _addToLightQueue(): void {\n        this.owner.scene._pointLights.add(this);\n    }\n\n    /**\n     * @internal\n     * @override\n     */\n    protected _removeFromLightQueue(): void {\n        this.owner.scene._pointLights.remove(this);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n        this.range = data.range;\n    }\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: PointLightCom): void {\n        super._cloneTo(dest);\n        var pointlight = dest as PointLightCom;\n        pointlight.range = this.range;\n        pointlight._lightType = LightType.Point;\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Component {\n        return new PointLightCom();\n    }\n\n}","import { Node } from \"../../../display/Node\"\nimport { PointLightCom } from \"./PointLightCom\";\nimport { LightSprite } from \"./LightSprite\";\nimport { Sprite3D } from \"../Sprite3D\";\n/**\n * <code>PointLight</code> 类用于创建点光。\n */\nexport class PointLight extends LightSprite {\n\n\t/**@internal */\n\t_light: PointLightCom;\n\n\t/**\n\t * 点光的范围。\n\t * @return 点光的范围。\n\t */\n\tget range(): number {\n\t\treturn this._light.range;\n\t}\n\n\tset range(value: number) {\n\t\tthis._light.range = value;\n\t}\n\n\t/**\n\t * 创建一个 <code>PointLight</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._light = this.addComponent(PointLightCom);\n\t\tthis._light.range = 6.0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_parse(data: any, spriteMap: any): void {\n\t\tsuper._parse(data, spriteMap);\n\t\tthis.range = data.range;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node) {\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Node {\n\t\treturn new Sprite3D();\n\t}\n}\n\n","import { Scene3D } from \"../scene/Scene3D\";\nimport { Light, LightType } from \"./Light\";\nimport { Component } from \"../../../components/Component\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>SpotLight</code> 类用于创建聚光。\n */\nexport class SpotLightCom extends Light {\n\t/** @internal */\n\tprivate _spotAngle: number;\n\t/** @internal */\n\tprivate _range: number;\n\n\t/** @internal */\n\tpublic _direction: Vector3;\n\n\t/**\n\t  * 聚光灯的锥形角度。\n\t  */\n\tget spotAngle(): number {\n\t\treturn this._spotAngle;\n\t}\n\n\tset spotAngle(value: number) {\n\t\tthis._spotAngle = Math.max(Math.min(value, 179), 0);\n\t}\n\n\t/**\n\t * 聚光的范围。\n\t */\n\tget range(): number {\n\t\treturn this._range;\n\t}\n\n\tset range(value: number) {\n\t\tthis._range = value;\n\t}\n\n\t/**\n\t * 创建一个 <code>SpotLight</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._spotAngle = 30.0;\n\t\tthis._range = 10.0;\n\t\tthis._direction = new Vector3();\n\t\tthis._lightType = LightType.Spot;\n\t}\n\n\t/**\n\t * @internal\n\t * @override\n\t */\n\tprotected _addToLightQueue(): void {\n\t\t(<Scene3D>this.owner.scene)._spotLights.add(this);\n\t}\n\n\t/**\n\t * @internal\n\t * @override\n\t */\n\tprotected _removeFromLightQueue(): void {\n\t\t(<Scene3D>this.owner.scene)._spotLights.remove(this);\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_parse(data: any, spriteMap: any): void {\n\t\tsuper._parse(data, spriteMap);\n\t\tthis.range = data.range;\n\t\tthis.spotAngle = data.spotAngle;\n\t}\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_cloneTo(dest: Component): void {\n\t\tsuper._cloneTo(dest);\n\t\tvar spotLight = <SpotLightCom>dest;\n\t\tspotLight.range = this.range;\n\t\tspotLight.spotAngle = this.spotAngle;\n\t}\n\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Component {\n\t\treturn new SpotLightCom();\n\t}\n\n}\n\n\n","import { Node } from \"../../../display/Node\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { LightSprite } from \"./LightSprite\";\nimport { SpotLightCom } from \"./SpotLightCom\";\n\n/**\n * <code>SpotLight</code> 类用于创建聚光。\n */\nexport class SpotLight extends LightSprite {\n\t/**@internal */\n\t_light: SpotLightCom;\n\n\t/**\n\t  * 聚光灯的锥形角度。\n\t  */\n\tget spotAngle(): number {\n\t\treturn this._light.spotAngle;\n\t}\n\n\tset spotAngle(value: number) {\n\t\tthis._light.spotAngle = Math.max(Math.min(value, 179), 0);\n\t}\n\n\t/**\n\t * 聚光的范围。\n\t */\n\tget range(): number {\n\t\treturn this._light.range;\n\t}\n\n\tset range(value: number) {\n\t\tthis._light.range = value;\n\t}\n\n\t/**\n\t * 创建一个 <code>SpotLight</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._light = this.addComponent(SpotLightCom);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_parse(data: any, spriteMap: any): void {\n\t\tsuper._parse(data, spriteMap);\n\t\tthis.range = data.range;\n\t\tthis.spotAngle = data.spotAngle;\n\t}\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node) {\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);\n\t}\n\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Node {\n\t\treturn new Sprite3D();\n\t}\n\n}\n\n\n","import { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Material } from \"./Material\";\n\n/**\n * <code>UnlitMaterial</code> 类用于实现不受光照影响的材质。\n */\nexport class UnlitMaterial extends Material {\n\n\tstatic SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\n\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\n\n\tstatic ALBEDOTEXTURE: number;\n\n\tstatic ALBEDOCOLOR: number;\n\n\tstatic TILINGOFFSET: number;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __initDefine__(): void {\n\t\tUnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\n\t\tUnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\n\n\t\tUnlitMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\n\t\tUnlitMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_AlbedoColor\");\n\t\tUnlitMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\n\t}\n\n\tprivate _albedoIntensity: number;\n\n\t/**\n\t * 反照率颜色。\n\t */\n\tget albedoColor(): Color {\n\t\treturn this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR);\n\t}\n\n\tset albedoColor(value: Color) {\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, value.scale(this._albedoIntensity));\n\t}\n\n\t/**\n\t * 反照率强度。\n\t */\n\tget albedoIntensity(): number {\n\t\treturn this._albedoIntensity;\n\t}\n\n\tset albedoIntensity(value: number) {\n\t\tthis._albedoIntensity = value;\n\t}\n\n\t/**\n\t * 反照率贴图。\n\t */\n\tget albedoTexture(): BaseTexture {\n\t\treturn this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE);\n\t}\n\n\tset albedoTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\n\t\telse\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\n\t\tthis.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE, value);\n\t}\n\n\t/**\n\t * 纹理平铺和偏移。\n\t */\n\tget tilingOffset(): Vector4 {\n\t\treturn (<Vector4>this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET));\n\t}\n\n\tset tilingOffset(value: Vector4) {\n\t\tif (value) {\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, value);\n\t\t}\n\t\telse {\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\n\t\t}\n\t}\n\n\t/**\n\t * 是否支持顶点色。\n\t */\n\tget enableVertexColor(): boolean {\n\t\treturn this.hasDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n\t}\n\n\tset enableVertexColor(value: boolean) {\n\t\tif (value)\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n\t\telse\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n\t}\n\n\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"Unlit\");\n\t\tthis.renderMode = UnlitMaterial.RENDERMODE_OPAQUE;\n\t\tthis.albedoIntensity = 1.0;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: UnlitMaterial = new UnlitMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\n\n\t//----------------deprecated----------------\n\t/**\n\t * @deprecated\n\t * 渲染状态_不透明。\n\t */\n\tstatic RENDERMODE_OPAQUE: number = 0;\n\t/**\n\t * @deprecated\n\t * 渲染状态_阿尔法测试。\n\t*/\n\tstatic RENDERMODE_CUTOUT: number = 1;\n\t/**\n\t * @deprecated\n\t * 渲染状态__透明混合。 \n\t */\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\n\t/**\n\t * @deprecated\n\t * 渲染状态__加色法混合。 \n\t */\n\tstatic RENDERMODE_ADDTIVE: number = 3;\n\t/**\n\t * @deprecated\n\t * 渲染模式。\n\t */\n\tset renderMode(value: number) {\n\t\tswitch (value) {\n\t\t\tcase UnlitMaterial.RENDERMODE_OPAQUE:\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\n\t\t\t\tthis.depthWrite = true;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\n\t\t\t\tbreak;\n\t\t\tcase UnlitMaterial.RENDERMODE_CUTOUT:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\n\t\t\t\tthis.alphaTest = true;\n\t\t\t\tthis.depthWrite = true;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\n\t\t\t\tbreak;\n\t\t\tcase UnlitMaterial.RENDERMODE_TRANSPARENT:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"UnlitMaterial : renderMode value error.\");\n\t\t}\n\t}\n}\n\n","import { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Material } from \"./Material\";\nimport { UnlitMaterial } from \"./UnlitMaterial\";\n\n/**\n * <code>EffectMaterial</code> 类用于实现Mesh特效材质。\n */\nexport class EffectMaterial extends Material {\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: EffectMaterial;\n\n\t\n\n\t/**\n\t * 获取颜色。\n\t */\n\tget color(): Color {\n\t\treturn (<Color>this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR));\n\t}\n\n\tset color(value: Color) {\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, value);\n\t}\n\n\t/**\n\t * 贴图。\n\t */\n\tget texture(): BaseTexture {\n\t\treturn this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE);\n\t}\n\n\tset texture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\n\t\telse\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\n\t\tthis.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE, value);\n\t}\n\n\t/**\n\t * 纹理平铺和偏移。\n\t */\n\tget tilingOffset(): Vector4 {\n\t\treturn (<Vector4>this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET));\n\t}\n\n\tset tilingOffset(value: Vector4) {\n\t\tif (value) {\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, value);\n\t\t}\n\t\telse {\n\t\t\tthis.getVector4ByIndex(UnlitMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\n\t\t}\n\t}\n\n\n\t/**\n\t * 创建一个 <code>EffectMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"Unlit\");\n\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\n\t\tthis.renderMode = EffectMaterial.RENDERMODE_ADDTIVE;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: EffectMaterial = new EffectMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\t//----------------deprecated----------------\n\n\t/**\n\t * @deprecated\n\t * 渲染状态_加色法混合。\n\t */\n\tstatic RENDERMODE_ADDTIVE: number = 0;\n\n\t/**\n\t * @deprecated\n\t * 渲染状态_透明混合。*/\n\tstatic RENDERMODE_ALPHABLENDED: number = 1;\n\n\t/**\n\t * @deprecated\n\t * 设置渲染模式。\n\t * 可以使用新的渲染状态\n\t */\n\t set renderMode(value: number) {\n\t\tswitch (value) {\n\t\t\tcase EffectMaterial.RENDERMODE_ADDTIVE:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\n\t\t\t\tthis.addDefine(Material.SHADERDEFINE_ADDTIVEFOG);\n\t\t\t\tbreak;\n\t\t\tcase EffectMaterial.RENDERMODE_ALPHABLENDED:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\n\t\t\t\tthis.removeDefine(Material.SHADERDEFINE_ADDTIVEFOG);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"MeshEffectMaterial : renderMode value error.\");\n\t\t}\n\t}\n}\n\n","import { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Material } from \"./Material\";\n\n/**\n * ...\n * @author ...\n */\nexport class ExtendTerrainMaterial extends Material {\n\t/**渲染状态_不透明。*/\n\tstatic RENDERMODE_OPAQUE: number = 1;\n\t/**渲染状态_透明混合。*/\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\n\n\t/**@internal */\n\tstatic SPLATALPHATEXTURE: number;\n\t/**@internal */\n\tstatic DIFFUSETEXTURE1: number;\n\t/**@internal */\n\tstatic DIFFUSETEXTURE2: number;\n\t/**@internal */\n\tstatic DIFFUSETEXTURE3: number;\n\t/**@internal */\n\tstatic DIFFUSETEXTURE4: number;\n\t/**@internal */\n\tstatic DIFFUSETEXTURE5: number;\n\t/**@internal */\n\tstatic DIFFUSESCALEOFFSET1: number;\n\t/**@internal */\n\tstatic DIFFUSESCALEOFFSET2: number;\n\t/**@internal */\n\tstatic DIFFUSESCALEOFFSET3: number;\n\t/**@internal */\n\tstatic DIFFUSESCALEOFFSET4: number;\n\t/**@internal */\n\tstatic DIFFUSESCALEOFFSET5: number;\n\n\t/**地形细节宏定义。*/\n\t/**@internal */\n\tstatic SHADERDEFINE_DETAIL_NUM1: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_DETAIL_NUM2: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_DETAIL_NUM3: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_DETAIL_NUM4: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_DETAIL_NUM5: ShaderDefine;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __initDefine__(): void {\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM1\");\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM2\");\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM3\");\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM4\");\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM5\");\n\n\t\tExtendTerrainMaterial.SPLATALPHATEXTURE = Shader3D.propertyNameToID(\"u_SplatAlphaTexture\");\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE1 = Shader3D.propertyNameToID(\"u_DiffuseTexture1\");\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE2 = Shader3D.propertyNameToID(\"u_DiffuseTexture2\");\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE3 = Shader3D.propertyNameToID(\"u_DiffuseTexture3\");\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE4 = Shader3D.propertyNameToID(\"u_DiffuseTexture4\");\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE5 = Shader3D.propertyNameToID(\"u_DiffuseTexture5\");\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET1 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset1\");\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET2 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset2\");\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET3 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset3\");\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET4 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset4\");\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET5 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset5\");\n\t}\n\t/**\n\t * splatAlpha贴图。\n\t */\n\tget splatAlphaTexture(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE);\n\t}\n\n\tset splatAlphaTexture(value: BaseTexture) {\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE, value);\n\t}\n\n\t/**\n\t * 第一层贴图。\n\t */\n\tget diffuseTexture1(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1);\n\t}\n\n\tset diffuseTexture1(value: BaseTexture) {\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1, value);\n\t\tthis._setDetailNum(1);\n\t}\n\n\t/**\n\t * 第二层贴图。\n\t */\n\tget diffuseTexture2(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2);\n\t}\n\n\tset diffuseTexture2(value: BaseTexture) {\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2, value);\n\t\tthis._setDetailNum(2);\n\t}\n\n\t/**\n\t * 第三层贴图。\n\t */\n\tget diffuseTexture3(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3);\n\t}\n\n\tset diffuseTexture3(value: BaseTexture) {\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3, value);\n\t\tthis._setDetailNum(3);\n\t}\n\n\t/**\n\t * 第四层贴图。\n\t */\n\tget diffuseTexture4(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4);\n\t}\n\n\tset diffuseTexture4(value: BaseTexture) {\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4, value);\n\t\tthis._setDetailNum(4);\n\t}\n\n\t/**\n\t * 第五层贴图。\n\t */\n\tget diffuseTexture5(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5);\n\t}\n\n\tset diffuseTexture5(value: BaseTexture) {\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5, value);\n\t\tthis._setDetailNum(5);\n\t}\n\n\n\t/**\n\t * 第一层贴图缩放偏移。\n\t */\n\tset diffuseScaleOffset1(scaleOffset1: Vector4) {\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET1, scaleOffset1);\n\t}\n\n\t/**\n\t * 第二层贴图缩放偏移。\n\t */\n\tset diffuseScaleOffset2(scaleOffset2: Vector4) {\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET2, scaleOffset2);\n\t}\n\n\t/**\n\t * 第三层贴图缩放偏移。\n\t */\n\tset diffuseScaleOffset3(scaleOffset3: Vector4) {\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET3, scaleOffset3);\n\t}\n\n\t/**\n\t * 第四层贴图缩放偏移。\n\t */\n\tset diffuseScaleOffset4(scaleOffset4: Vector4) {\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET4, scaleOffset4);\n\t}\n\n\t/**\n\t * 第五层贴图缩放偏移。\n\t */\n\tset diffuseScaleOffset5(scaleOffset5: Vector4) {\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET5, scaleOffset5);\n\t}\n\n\t/**\n\t * 设置渲染模式。\n\t */\n\tset renderMode(value: number) {\n\t\tswitch (value) {\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_OPAQUE:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\n\t\t\t\tthis.depthWrite = true;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\n\t\t\t\tbreak;\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_TRANSPARENT:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"ExtendTerrainMaterial:renderMode value error.\");\n\t\t}\n\t}\n\n\t/**\n\t * 创建一个 <code>ExtendTerrainMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"ExtendTerrain\");\n\t\tthis.renderMode = ExtendTerrainMaterial.RENDERMODE_OPAQUE;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _setDetailNum(value: number): void {\n\t\tswitch (value) {\n\t\t\tcase 1:\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t* 克隆。\n\t* @return\t 克隆副本。\n\t* @override\n\t*/\n\tclone(): any {\n\t\tvar dest: ExtendTerrainMaterial = new ExtendTerrainMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","/**\n * PBR材质渲染质量。\n */\nexport enum PBRRenderQuality {\n    /**高质量。*/\n    High,\n    /**低质量。*/\n    Low\n}","import { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Material } from \"./Material\";\nimport { PBRRenderQuality } from \"./PBRRenderQuality\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { Texture2D } from \"../../../resource/Texture2D\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\n\n/**\n * 渲染模式。\n */\nexport enum PBRRenderMode {\n    /**不透明。*/\n    Opaque,\n    /**透明裁剪。*/\n    Cutout,\n    /**透明混合_游戏中经常使用的透明。*/\n    Fade,\n    /**透明混合_物理上看似合理的透明。*/\n    Transparent\n}\n\nexport enum PBRMaterialType {\n    Standard,\n    Anisotropy\n}\n\n/**\n * PBR材质的父类,该类为抽象类。\n */\nexport class PBRMaterial extends Material {\n    /** @internal */\n    static SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\n    /** @internal */\n    static SHADERDEFINE_NORMALTEXTURE: ShaderDefine;\n    /** @internal */\n    static SHADERDEFINE_OCCLUSIONTEXTURE: ShaderDefine;\n    /** @internal */\n    static SHADERDEFINE_PARALLAXTEXTURE: ShaderDefine;\n    /** @internal */\n    static SHADERDEFINE_EMISSION: ShaderDefine;\n    /** @internal */\n    static SHADERDEFINE_EMISSIONTEXTURE: ShaderDefine;\n\n    /**@internal */\n    static SHADERDEFINE_ANISOTROPY: ShaderDefine;\n\n    /**@internal */\n    static SHADERDEFINE_DETAILALBEDO: ShaderDefine;\n    /**@internal */\n    static SHADERDEFINE_DETAILNORMAL: ShaderDefine;\n\n    /** @internal */\n    static SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\n\n    /**@internal */\n    static SHADERDEFINE_TANGENTTEXTURE: ShaderDefine;\n\n    /** @internal */\n    static SHADERDEFINE_TRANSPARENTBLEND: ShaderDefine;\n    /**@internal */\n    static SHADERDEFINE_LAYA_PBR_BRDF_HIGH: ShaderDefine;\n    /**@internal */\n    static SHADERDEFINE_LAYA_PBR_BRDF_LOW: ShaderDefine;\n\n    /** @internal */\n    static ALBEDOTEXTURE: number;\n    /** @internal */\n    static ALBEDOCOLOR: number;\n    /** @internal */\n    static TILINGOFFSET: number;\n    /** @internal */\n    static NORMALTEXTURE: number;\n    /** @internal */\n    static NORMALSCALE: number;\n    /** @internal */\n    static SMOOTHNESS: number;\n    /** @internal */\n    static SMOOTHNESSSCALE: number;\n    /** @internal */\n    static OCCLUSIONTEXTURE: number;\n    /** @internal */\n    static OCCLUSIONSTRENGTH: number;\n    /** @internal */\n    static PARALLAXTEXTURE: number;\n    /** @internal */\n    static PARALLAXSCALE: number;\n    /** @internal */\n    static EMISSIONTEXTURE: number;\n    /** @internal */\n    static EMISSIONCOLOR: number;\n    /**@internal */\n    static EMISSIONIntensity: number\n    /** @internal */\n    static ANISOTROPY: number;\n    /** @internal */\n    static TANGENTTEXTURE: number;\n    //Detail\n    /** @internal */\n    static DETAILALBEDOTEXTURE: number;\n    /**@internal */\n    static DETAILNORMALTEXTURE: number;\n    /**@internal */\n    static DETAILTILLINGOFFSET: number;\n    /**@internal */\n    static DETAILNORMALSCALE: number;\n\n    /** 渲染质量。*/\n    static renderQuality: PBRRenderQuality = PBRRenderQuality.High;\n\n    /**\n     * @private\n     */\n    static __init__(): void {\n        PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\n        PBRMaterial.SHADERDEFINE_NORMALTEXTURE = Shader3D.getDefineByName(\"NORMALTEXTURE\");\n        PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE = Shader3D.getDefineByName(\"PARALLAXTEXTURE\");\n        PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE = Shader3D.getDefineByName(\"OCCLUSIONTEXTURE\");\n        PBRMaterial.SHADERDEFINE_EMISSION = Shader3D.getDefineByName(\"EMISSION\");\n        PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE = Shader3D.getDefineByName(\"EMISSIONTEXTURE\");\n        PBRMaterial.SHADERDEFINE_ANISOTROPY = Shader3D.getDefineByName(\"ANISOTROPIC\");\n        PBRMaterial.SHADERDEFINE_TANGENTTEXTURE = Shader3D.getDefineByName(\"TANGENTTEXTURE\");\n        PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND = Shader3D.getDefineByName(\"TRANSPARENTBLEND\");\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_HIGH = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_HIGH\");\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_LOW = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_LOW\");\n        //Detail\n        PBRMaterial.SHADERDEFINE_DETAILALBEDO = Shader3D.getDefineByName(\"DETAILTEXTURE\");\n        PBRMaterial.SHADERDEFINE_DETAILNORMAL = Shader3D.getDefineByName(\"DETAILNORMAL\");\n\n        PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\n\n\n\n        PBRMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\n        PBRMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_AlbedoColor\");\n        PBRMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\n        PBRMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\n        PBRMaterial.NORMALSCALE = Shader3D.propertyNameToID(\"u_NormalScale\");\n        PBRMaterial.SMOOTHNESS = Shader3D.propertyNameToID(\"u_Smoothness\");\n        PBRMaterial.SMOOTHNESSSCALE = Shader3D.propertyNameToID(\"u_SmoothnessScale\");\n        PBRMaterial.OCCLUSIONTEXTURE = Shader3D.propertyNameToID(\"u_OcclusionTexture\");\n        PBRMaterial.OCCLUSIONSTRENGTH = Shader3D.propertyNameToID(\"u_OcclusionStrength\");\n        PBRMaterial.PARALLAXTEXTURE = Shader3D.propertyNameToID(\"u_ParallaxTexture\");\n        PBRMaterial.PARALLAXSCALE = Shader3D.propertyNameToID(\"u_ParallaxScale\");\n        PBRMaterial.EMISSIONTEXTURE = Shader3D.propertyNameToID(\"u_EmissionTexture\");\n        PBRMaterial.EMISSIONCOLOR = Shader3D.propertyNameToID(\"u_EmissionColor\");\n        PBRMaterial.EMISSIONIntensity = Shader3D.propertyNameToID(\"u_EmissionIntensity\");\n        PBRMaterial.ANISOTROPY = Shader3D.propertyNameToID(\"u_Anisotropy\");\n        PBRMaterial.TANGENTTEXTURE = Shader3D.propertyNameToID(\"u_TangentTexture\");\n        //Detail\n        PBRMaterial.DETAILALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_DetailAlbedoTexture\");\n        PBRMaterial.DETAILNORMALTEXTURE = Shader3D.propertyNameToID(\"u_DetailNormalTexture\");\n        PBRMaterial.DETAILTILLINGOFFSET = Shader3D.propertyNameToID(\"u_DetailTillingOffset\");\n        PBRMaterial.DETAILNORMALSCALE = Shader3D.propertyNameToID(\"u_DetailNormalScale\");\n    }\n\n\n    /**\n     * 漫反射颜色。\n     */\n    get albedoColor(): Color {\n        return this._shaderValues.getColor(PBRMaterial.ALBEDOCOLOR);\n    }\n\n    set albedoColor(value: Color) {\n        this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR, value);\n    }\n\n    /**\n     * 漫反射贴图。\n     */\n    get albedoTexture(): BaseTexture {\n        return this._shaderValues.getTexture(PBRMaterial.ALBEDOTEXTURE);\n    }\n\n    set albedoTexture(value: BaseTexture) {\n        if (value)\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\n        else\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\n\n        this._shaderValues.setTexture(PBRMaterial.ALBEDOTEXTURE, value);\n    }\n\n\n\n    /**\n     * 法线贴图。\n     */\n    get normalTexture(): BaseTexture {\n        return this._shaderValues.getTexture(PBRMaterial.NORMALTEXTURE);\n    }\n\n    set normalTexture(value: BaseTexture) {\n        if (value) {\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\n        } else {\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\n        }\n        this._shaderValues.setTexture(PBRMaterial.NORMALTEXTURE, value);\n        this.resetNeedTBN();\n    }\n\n    /**\n     * 法线贴图缩放系数。\n     */\n    get normalTextureScale(): number {\n        return this._shaderValues.getNumber(PBRMaterial.NORMALSCALE);\n    }\n\n    set normalTextureScale(value: number) {\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, value);\n    }\n\n    /**\n     * 视差贴图。\n     */\n    get parallaxTexture(): BaseTexture {\n        return this._shaderValues.getTexture(PBRMaterial.PARALLAXTEXTURE);\n    }\n\n    set parallaxTexture(value: BaseTexture) {\n        if (value)\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\n        else\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\n        this._shaderValues.setTexture(PBRMaterial.PARALLAXTEXTURE, value);\n    }\n\n    /**\n     * 视差贴图缩放系数。\n     */\n    get parallaxTextureScale(): number {\n        return this._shaderValues.getNumber(PBRMaterial.PARALLAXSCALE);\n    }\n\n    set parallaxTextureScale(value: number) {\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, Math.max(0.005, Math.min(0.08, value)));\n    }\n\n    /**\n     * 遮挡贴图。\n     */\n    get occlusionTexture(): BaseTexture {\n        return this._shaderValues.getTexture(PBRMaterial.OCCLUSIONTEXTURE);\n    }\n\n    set occlusionTexture(value: BaseTexture) {\n        if (value)\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\n        else\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\n\n        this._shaderValues.setTexture(PBRMaterial.OCCLUSIONTEXTURE, value);\n    }\n\n    /**\n     * 遮挡贴图强度,范围为0到1。\n     */\n    get occlusionTextureStrength(): number {\n        return this._shaderValues.getNumber(PBRMaterial.OCCLUSIONSTRENGTH);\n    }\n\n    set occlusionTextureStrength(value: number) {\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, Math.max(0.0, Math.min(1.0, value)));\n    }\n\n    /**\n     * 光滑度,范围为0到1。\n     */\n    get smoothness(): number {\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS);\n    }\n\n    set smoothness(value: number) {\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, Math.max(0.0, Math.min(1.0, value)));\n    }\n\n    /**\n     * 光滑度缩放系数,范围为0到1。\n     */\n    get smoothnessTextureScale(): number {\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESSSCALE);\n    }\n\n    set smoothnessTextureScale(value: number) {\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESSSCALE, Math.max(0.0, Math.min(1.0, value)));\n    }\n\n    /**\n      * 是否支持顶点色。\n      */\n    get enableVertexColor(): boolean {\n        return this.hasDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n    }\n\n    set enableVertexColor(value: boolean) {\n        if (value)\n            this.addDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n        else\n            this.removeDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\n    }\n\n    /**\n     * 是否开启自发光。\n     */\n    get enableEmission(): boolean {\n        return this._shaderValues.hasDefine(PBRMaterial.SHADERDEFINE_EMISSION);\n    }\n\n    set enableEmission(value: boolean) {\n        if (value)\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_EMISSION);\n        else\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_EMISSION);\n    }\n\n    /**\n     * 自发光颜色。\n     */\n    get emissionColor(): Color {\n        return this._shaderValues.getColor(PBRMaterial.EMISSIONCOLOR);\n    }\n\n    set emissionColor(value: Color) {\n        this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR, value);\n    }\n\n    set emissionIntensity(value: number) {\n        //u_EmissionIntensity\n        this._shaderValues.setNumber(PBRMaterial.EMISSIONIntensity, value);\n    }\n\n    get emissionIntensity() {\n        return this._shaderValues.getNumber(PBRMaterial.EMISSIONIntensity);\n    }\n\n    /**\n     * 自发光贴图。\n     */\n    get emissionTexture(): BaseTexture {\n        return this._shaderValues.getTexture(PBRMaterial.EMISSIONTEXTURE);\n    }\n\n    set emissionTexture(value: BaseTexture) {\n        if (value)\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\n        else\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\n\n        this._shaderValues.setTexture(PBRMaterial.EMISSIONTEXTURE, value);\n    }\n\n    /**\n     * 纹理平铺和偏移。\n     */\n    get tilingOffset(): Vector4 {\n        return (<Vector4>this._shaderValues.getVector(PBRMaterial.TILINGOFFSET));\n    }\n\n    set tilingOffset(value: Vector4) {\n        if (value) {\n            this._shaderValues.setVector(PBRMaterial.TILINGOFFSET, value);\n        }\n        else {\n            this._shaderValues.getVector(PBRMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\n        }\n    }\n\n\n    /**\n     * 细节贴图。\n     */\n    get detailAlbedoTexture(): BaseTexture {\n        return this._shaderValues.getTexture(PBRMaterial.DETAILALBEDOTEXTURE);\n    }\n\n    set detailAlbedoTexture(value: BaseTexture) {\n        if (value)\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO);\n        else\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO);\n\n        this._shaderValues.setTexture(PBRMaterial.DETAILALBEDOTEXTURE, value);\n    }\n\n\n    /**\n     * 细节法线贴图。\n     */\n    get detailNormalTexture(): BaseTexture {\n        return this._shaderValues.getTexture(PBRMaterial.DETAILNORMALTEXTURE);\n    }\n\n    set detailNormalTexture(value: BaseTexture) {\n        if (value)\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL);\n        else\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL);\n        this._shaderValues.setTexture(PBRMaterial.DETAILNORMALTEXTURE, value);\n        this.resetNeedTBN();\n    }\n\n    /**\n    * 细节图纹理平铺和偏移。\n    */\n    get detailTilingOffset(): Vector4 {\n        return (<Vector4>this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET));\n    }\n\n    set detailTilingOffset(value: Vector4) {\n        if (value) {\n            this._shaderValues.setVector(PBRMaterial.DETAILTILLINGOFFSET, value);\n        }\n        else {\n            this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\n        }\n    }\n\n    /**\n    * 细节法线贴图缩放系数。\n    */\n    get detailNormalScale(): number {\n        return this._shaderValues.getNumber(PBRMaterial.DETAILNORMALSCALE);\n    }\n\n    set detailNormalScale(value: number) {\n        this._shaderValues.setNumber(PBRMaterial.DETAILNORMALSCALE, value);\n    }\n\n\n\n\n    /**\n     * 渲染模式。\n     */\n    set renderMode(value: number) {\n        switch (value) {\n            case PBRRenderMode.Opaque:\n                this.alphaTest = false;\n                this.renderQueue = Material.RENDERQUEUE_OPAQUE;\n                this.depthWrite = true;\n                this.cull = RenderState.CULL_BACK;\n                this.blend = RenderState.BLEND_DISABLE;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\n                break;\n            case PBRRenderMode.Cutout:\n                this.renderQueue = Material.RENDERQUEUE_ALPHATEST;\n                this.alphaTest = true;\n                this.depthWrite = true;\n                this.cull = RenderState.CULL_BACK;\n                this.blend = RenderState.BLEND_DISABLE;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\n                break;\n            case PBRRenderMode.Fade:\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n                this.alphaTest = false;\n                this.depthWrite = false;\n                this.cull = RenderState.CULL_BACK;\n                this.blend = RenderState.BLEND_ENABLE_ALL;\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\n                break;\n            case PBRRenderMode.Transparent:\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n                this.alphaTest = false;\n                this.depthWrite = false;\n                this.cull = RenderState.CULL_BACK;\n                this.blend = RenderState.BLEND_ENABLE_ALL;\n                this.blendSrc = RenderState.BLENDPARAM_ONE;\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n                this.depthTest = RenderState.DEPTHTEST_LESS;\n                this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\n                break;\n            default:\n                throw new Error(\"PBRMaterial:unknown renderMode value.\");\n        }\n    }\n\n    private resetNeedTBN() {\n        if (!!this.normalTexture || !!this.detailNormalTexture || this.materialType == PBRMaterialType.Anisotropy) {\n            this._shaderValues.addDefine(Shader3D.getDefineByName(\"NEEDTBN\"));\n        } else {\n            this._shaderValues.removeDefine(Shader3D.getDefineByName(\"NEEDTBN\"));\n        }\n    }\n\n    public get anisotropy(): number {\n        return this.getFloatByIndex(PBRMaterial.ANISOTROPY);\n    }\n\n    public set anisotropy(value: number) {\n        this.setFloatByIndex(PBRMaterial.ANISOTROPY, Math.min(1, Math.max(-1, value)));\n    }\n\n    public get tangentTexture(): Texture2D {\n        return <Texture2D>this.getTextureByIndex(PBRMaterial.TANGENTTEXTURE);\n    }\n    public set tangentTexture(value: Texture2D) {\n        this.setTextureByIndex(PBRMaterial.TANGENTTEXTURE, value);\n        if (value) {\n            this.addDefine(PBRMaterial.SHADERDEFINE_TANGENTTEXTURE);\n        }\n        else {\n            this.removeDefine(PBRMaterial.SHADERDEFINE_TANGENTTEXTURE);\n        }\n    }\n\n    private _materialType: PBRMaterialType;\n    public get materialType(): PBRMaterialType {\n        return this._materialType;\n    }\n    public set materialType(value: PBRMaterialType) {\n        switch (value) {\n            case PBRMaterialType.Standard:\n                this.removeDefine(PBRMaterial.SHADERDEFINE_ANISOTROPY);\n\n                break;\n            case PBRMaterialType.Anisotropy:\n                this.addDefine(PBRMaterial.SHADERDEFINE_ANISOTROPY);\n\n                break;\n            default:\n                break;\n        }\n        this._materialType = value;\n        this.resetNeedTBN();\n    }\n\n    constructor() {\n        super();\n        this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\n        this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\n        this._shaderValues.setVector(PBRMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, 0.5);\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESSSCALE, 1.0);\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, 1.0);\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, 1.0);\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, 0.001);\n        this._shaderValues.setNumber(Material.ALPHATESTVALUE, 0.5);\n        this.renderMode = PBRRenderMode.Opaque;\n        this.materialType = PBRMaterialType.Standard;\n    }\n}","import { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { PBRMaterial } from \"./PBRMaterial\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\n\n/**\n * 金属度PBR材质光滑度数据源。\n */\nexport enum PBRMetallicSmoothnessSource {\n\t/**金属度贴图的Alpha通道。*/\n\tMetallicGlossTextureAlpha,\n\t/**反射率贴图的Alpha通道。*/\n\tAlbedoTextureAlpha\n}\n\n/**\n * <code>PBRStandardMaterial</code> 类用于实现PBR材质。\n */\nexport class PBRStandardMaterial extends PBRMaterial {\n\t/** @internal */\n\tstatic SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA: ShaderDefine;\n\t/** @internal */\n\tstatic SHADERDEFINE_METALLICGLOSSTEXTURE: ShaderDefine;\n\t/** @internal */\n\tstatic METALLICGLOSSTEXTURE: number;\n\t/** @internal */\n\tstatic METALLIC: number;\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: PBRStandardMaterial;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tPBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE = Shader3D.getDefineByName(\"METALLICGLOSSTEXTURE\");\n\t\tPBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = Shader3D.getDefineByName(\"SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\");\n\t\tPBRStandardMaterial.METALLICGLOSSTEXTURE = Shader3D.propertyNameToID(\"u_MetallicGlossTexture\");\n\t\tPBRStandardMaterial.METALLIC = Shader3D.propertyNameToID(\"u_Metallic\");\n\t\t// var shader: Shader3D = Shader3D.add(\"PBR\", true, true);\n\t\t// var subShader: SubShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(PBRVS, PBRPS, \"Forward\");\n\t\t// subShader.addShaderPass(PBRShadowCasterVS, PBRShadowCasterPS, \"ShadowCaster\");\n\t\t// subShader.addShaderPass(DepthNormalsTextureVS, DepthNormalsTextureFS, \"DepthNormal\");\n\t}\n\n\t/** @internal */\n\tprivate _smoothnessSource: PBRMetallicSmoothnessSource = 0;\n\n\t/**\n\t * 金属光滑度贴图。\n\t */\n\tget metallicGlossTexture(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE);\n\t}\n\n\tset metallicGlossTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\n\t\telse\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\n\n\t\tthis._shaderValues.setTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE, value);\n\t}\n\n\t/**\n\t * 获取金属度,范围为0到1。\n\t */\n\tget metallic(): number {\n\t\treturn this._shaderValues.getNumber(PBRStandardMaterial.METALLIC);\n\t}\n\n\tset metallic(value: number) {\n\t\tthis._shaderValues.setNumber(PBRStandardMaterial.METALLIC, Math.max(0.0, Math.min(1.0, value)));\n\t}\n\n\t/**\n\t * 光滑度数据源,0或1。\n\t */\n\tget smoothnessSource(): PBRMetallicSmoothnessSource {\n\t\treturn this._smoothnessSource;\n\t}\n\n\tset smoothnessSource(value: PBRMetallicSmoothnessSource) {\n\t\tif (value)\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\n\t\telse\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\n\t\tthis._smoothnessSource = value;\n\t}\n\n\t/**\n\t * 创建一个 <code>PBRStandardMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"PBR\");\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: PBRStandardMaterial = new PBRStandardMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n}\n\n\n","import { Color } from \"../../../maths/Color\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { TextureCube } from \"../../resource/TextureCube\";\nimport { Material } from \"./Material\";\n\n/**\n * <code>SkyBoxMaterial</code> 类用于实现SkyBoxMaterial材质。\n */\nexport class SkyBoxMaterial extends Material {\n\tstatic TINTCOLOR: number;\n\tstatic EXPOSURE: number;\n\tstatic ROTATION: number;\n\tstatic TEXTURECUBE: number;\n\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: SkyBoxMaterial;\n\n\t/**\n\t* @internal\n\t*/\n\tstatic __initDefine__(): void {\n\t\tSkyBoxMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_TintColor\");\n\t\tSkyBoxMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\n\t\tSkyBoxMaterial.ROTATION = Shader3D.propertyNameToID(\"u_Rotation\");\n\t\tSkyBoxMaterial.TEXTURECUBE = Shader3D.propertyNameToID(\"u_CubeTexture\");\n\t}\n\n\t/**\n\t * 颜色。\n\t */\n\tget tintColor(): Color {\n\t\treturn this._shaderValues.getColor(SkyBoxMaterial.TINTCOLOR);\n\t}\n\n\tset tintColor(value: Color) {\n\t\tthis._shaderValues.setColor(SkyBoxMaterial.TINTCOLOR, value);\n\t}\n\n\t/**\n\t * 曝光强度。\n\t */\n\tget exposure(): number {\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.EXPOSURE);\n\t}\n\n\tset exposure(value: number) {\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.EXPOSURE, value);\n\t}\n\n\t/**\n\t * 旋转角度。\n\t */\n\tget rotation(): number {\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.ROTATION);\n\t}\n\n\tset rotation(value: number) {\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.ROTATION, value);\n\t}\n\n\t/**\n\t * 天空盒纹理。\n\t */\n\tget textureCube(): TextureCube {\n\t\treturn (<TextureCube>this._shaderValues.getTexture(SkyBoxMaterial.TEXTURECUBE));\n\t}\n\n\tset textureCube(value: TextureCube) {\n\t\tthis._shaderValues.setTexture(SkyBoxMaterial.TEXTURECUBE, value);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: SkyBoxMaterial = new SkyBoxMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\t/**\n\t * 创建一个 <code>SkyBoxMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"SkyBox\");\n\t}\n\n}\n\n\n","import { Texture2D } from \"../../../resource/Texture2D\";\nimport { Material } from \"./Material\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\n\n/**\n * <code>SkyPanoramicMaterial</code> 类用于实现SkyPanoramicMaterial材质。\n */\nexport class SkyPanoramicMaterial extends Material {\n    static TINTCOLOR: number;\n    static EXPOSURE: number;\n    static ROTATION: number;\n    static TEXTURE: number;\n    static TEXTURE_HDR_PARAMS: number;\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n\n        SkyPanoramicMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_TintColor\");\n        SkyPanoramicMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\n        SkyPanoramicMaterial.ROTATION = Shader3D.propertyNameToID(\"u_Rotation\");\n        SkyPanoramicMaterial.TEXTURE = Shader3D.propertyNameToID(\"u_Texture\");\n    }\n    /** @internal */\n    private _textureHDRParams: Vector4 = new Vector4(1.0, 0.0, 0.0, 1.0);\n\n    /**\n     * 颜色。\n     */\n    get tintColor(): Color {\n        return this.getColorByIndex(SkyPanoramicMaterial.TINTCOLOR);\n    }\n\n    set tintColor(value: Color) {\n        this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR, value);\n    }\n\n    /**\n     * 曝光强度。\n     */\n    get exposure(): number {\n        return this.getFloatByIndex(SkyPanoramicMaterial.EXPOSURE);\n    }\n\n    set exposure(value: number) {\n        this.setFloatByIndex(SkyPanoramicMaterial.EXPOSURE, value);\n    }\n\n    /**\n     * 旋转角度。\n     */\n    get rotation(): number {\n        return this.getFloatByIndex(SkyPanoramicMaterial.ROTATION);\n    }\n\n    set rotation(value: number) {\n        this.setFloatByIndex(SkyPanoramicMaterial.ROTATION, value);\n    }\n\n    /**\n     * 全景天空纹理。\n     */\n    get panoramicTexture(): Texture2D {\n        return <Texture2D>this.getTextureByIndex(SkyPanoramicMaterial.TEXTURE);\n    }\n\n    set panoramicTexture(value: Texture2D) {\n        this.setTextureByIndex(SkyPanoramicMaterial.TEXTURE, value);\n    }\n\n    /**\n     * 创建一个 <code>SkyPanoramicMaterial</code> 实例。\n     */\n    constructor() {\n        super();\n        this.setShaderName(\"SkyPanoramic\");\n        this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR, new Color(0.5, 0.5, 0.5, 0.5));\n        this.setFloatByIndex(SkyPanoramicMaterial.ROTATION, 0.0);\n        this.setVector4ByIndex(SkyPanoramicMaterial.TEXTURE_HDR_PARAMS, this._textureHDRParams);\n        this.exposure = 1.3;\n    }\n}","import { Color } from \"../../../maths/Color\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\n\nimport { Material } from \"./Material\";\n\n/**\n * <code>SkyProceduralMaterial</code> 类用于实现SkyProceduralMaterial材质。\n */\nexport class SkyProceduralMaterial extends Material {\n\t/** 太阳_无*/\n\tstatic SUN_NODE: number = 0;\n\t/** 太阳_精简*/\n\tstatic SUN_SIMPLE: number = 1;\n\t/** 太阳_高质量*/\n\tstatic SUN_HIGH_QUALITY: number = 2;\n\n\t/**@internal */\n\tstatic SUNSIZE: number;\n\t/**@internal */\n\tstatic SUNSIZECONVERGENCE: number;\n\t/**@internal */\n\tstatic ATMOSPHERETHICKNESS: number;\n\t/**@internal */\n\tstatic SKYTINT: number;\n\t/**@internal */\n\tstatic GROUNDTINT: number;\n\t/**@internal */\n\tstatic EXPOSURE: number;\n\n\t/**@internal */\n\tstatic SHADERDEFINE_SUN_HIGH_QUALITY: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SUN_SIMPLE: ShaderDefine;\n\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: SkyProceduralMaterial;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __initDefine__(): void {\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY = Shader3D.getDefineByName(\"SUN_HIGH_QUALITY\");\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE = Shader3D.getDefineByName(\"SUN_SIMPLE\");\n\t\tSkyProceduralMaterial.SUNSIZE = Shader3D.propertyNameToID(\"u_SunSize\");\n\t\tSkyProceduralMaterial.SUNSIZECONVERGENCE = Shader3D.propertyNameToID(\"u_SunSizeConvergence\");\n\t\tSkyProceduralMaterial.ATMOSPHERETHICKNESS = Shader3D.propertyNameToID(\"u_AtmosphereThickness\");\n\t\tSkyProceduralMaterial.SKYTINT = Shader3D.propertyNameToID(\"u_SkyTint\");\n\t\tSkyProceduralMaterial.GROUNDTINT = Shader3D.propertyNameToID(\"u_GroundTint\");\n\t\tSkyProceduralMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\n\t}\n\n\t/**@internal */\n\tprivate _sunDisk: number;\n\n\t/**\n\t * 太阳状态。\n\t */\n\tget sunDisk(): number {\n\t\treturn this._sunDisk;\n\t}\n\n\tset sunDisk(value: number) {\n\t\tswitch (value) {\n\t\t\tcase SkyProceduralMaterial.SUN_HIGH_QUALITY:\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\n\t\t\t\tbreak;\n\t\t\tcase SkyProceduralMaterial.SUN_SIMPLE:\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\n\t\t\t\tbreak;\n\t\t\tcase SkyProceduralMaterial.SUN_NODE:\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"SkyBoxProceduralMaterial: unknown sun value.\";\n\t\t}\n\t\tthis._sunDisk = value;\n\t}\n\n\t/**\n\t * 太阳尺寸,范围是0到1。\n\t */\n\tget sunSize(): number {\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZE);\n\t}\n\n\tset sunSize(value: number) {\n\t\tvalue = Math.min(Math.max(0.0, value), 1.0);\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZE, value);\n\t}\n\n\t/**\n\t * 太阳尺寸收缩,范围是0到20。\n\t */\n\tget sunSizeConvergence(): number {\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE);\n\t}\n\n\tset sunSizeConvergence(value: number) {\n\t\tvalue = Math.min(Math.max(0.0, value), 20.0);\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE, value);\n\t}\n\n\t/**\n\t * 大气厚度,范围是0到5。\n\t */\n\tget atmosphereThickness(): number {\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS);\n\t}\n\n\tset atmosphereThickness(value: number) {\n\t\tvalue = Math.min(Math.max(0.0, value), 5.0);\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS, value);\n\t}\n\n\t/**\n\t * 天空颜色。\n\t */\n\tget skyTint(): Color {\n\t\treturn (<Color>this._shaderValues.getColor(SkyProceduralMaterial.SKYTINT));\n\t}\n\n\tset skyTint(value: Color) {\n\t\tthis._shaderValues.setColor(SkyProceduralMaterial.SKYTINT, value);\n\t}\n\n\t/**\n\t * 地面颜色。\n\t */\n\tget groundTint(): Color {\n\t\treturn this._shaderValues.getColor(SkyProceduralMaterial.GROUNDTINT);\n\t}\n\n\tset groundTint(value: Color) {\n\t\tthis._shaderValues.setColor(SkyProceduralMaterial.GROUNDTINT, value);\n\t}\n\n\t/**\n\t * 曝光强度,范围是0到8。\n\t */\n\tget exposure(): number {\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.EXPOSURE);\n\t}\n\n\tset exposure(value: number) {\n\t\tvalue = Math.min(Math.max(0.0, value), 8.0);\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.EXPOSURE, value);\n\t}\n\n\t/**\n\t * 创建一个 <code>SkyProceduralMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"SkyProcedural\");\n\t\tthis.sunDisk = SkyProceduralMaterial.SUN_HIGH_QUALITY;\n\t\tthis.sunSize = 0.04;\n\t\tthis.sunSizeConvergence = 5;\n\t\tthis.atmosphereThickness = 1.0;\n\t\tthis.skyTint = new Color(0.5, 0.5, 0.5, 1.0);\n\t\tthis.groundTint = new Color(0.369, 0.349, 0.341, 1.0);\n\t\tthis.exposure = 1.3;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: SkyProceduralMaterial = new SkyProceduralMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n","import { Vector4 } from \"../../../maths/Vector4\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Material } from \"./Material\";\n\n/**\n * <code>WaterPrimaryMaterial</code> 类用于实现水材质。\n */\nexport class WaterPrimaryMaterial extends Material {\n\n\tstatic HORIZONCOLOR: number;\n\tstatic MAINTEXTURE: number;\n\tstatic NORMALTEXTURE: number;\n\tstatic WAVESCALE: number;\n\tstatic WAVESPEED: number;\n\n\tstatic SHADERDEFINE_MAINTEXTURE: ShaderDefine;\n\tstatic SHADERDEFINE_NORMALTEXTURE: ShaderDefine;\n\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: WaterPrimaryMaterial;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __initDefine__(): void {\n\t\tWaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE = Shader3D.getDefineByName(\"MAINTEXTURE\");\n\t\tWaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE = Shader3D.getDefineByName(\"NORMALTEXTURE\");\n\t\tWaterPrimaryMaterial.HORIZONCOLOR = Shader3D.propertyNameToID(\"u_HorizonColor\");\n\t\tWaterPrimaryMaterial.MAINTEXTURE = Shader3D.propertyNameToID(\"u_MainTexture\");\n\t\tWaterPrimaryMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\n\t\tWaterPrimaryMaterial.WAVESCALE = Shader3D.propertyNameToID(\"u_WaveScale\");\n\t\tWaterPrimaryMaterial.WAVESPEED = Shader3D.propertyNameToID(\"u_WaveSpeed\");\n\t}\n\n\t/**\n\t * 地平线颜色。\n\t */\n\tget horizonColor(): Vector4 {\n\t\treturn (<Vector4>this._shaderValues.getVector(WaterPrimaryMaterial.HORIZONCOLOR));\n\t}\n\n\tset horizonColor(value: Vector4) {\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.HORIZONCOLOR, value);\n\t}\n\n\t/**\n\t * 主贴图。\n\t */\n\tget mainTexture(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(WaterPrimaryMaterial.MAINTEXTURE);\n\t}\n\n\tset mainTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis._shaderValues.addDefine(WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE);\n\t\telse\n\t\t\tthis._shaderValues.removeDefine(WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE);\n\t\tthis._shaderValues.setTexture(WaterPrimaryMaterial.MAINTEXTURE, value);\n\t}\n\n\t/**\n\t * 法线贴图。\n\t */\n\tget normalTexture(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(WaterPrimaryMaterial.NORMALTEXTURE);\n\t}\n\n\tset normalTexture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis._shaderValues.addDefine(WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE);\n\t\telse\n\t\t\tthis._shaderValues.removeDefine(WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE);\n\t\tthis._shaderValues.setTexture(WaterPrimaryMaterial.NORMALTEXTURE, value);\n\t}\n\n\t/**\n\t * 波动缩放系数。\n\t */\n\tget waveScale(): number {\n\t\treturn this._shaderValues.getNumber(WaterPrimaryMaterial.WAVESCALE);\n\t}\n\n\tset waveScale(value: number) {\n\t\tthis._shaderValues.setNumber(WaterPrimaryMaterial.WAVESCALE, value);\n\t}\n\n\t/**\n\t * 波动速率。\n\t */\n\tget waveSpeed(): Vector4 {\n\t\treturn (<Vector4>this._shaderValues.getVector(WaterPrimaryMaterial.WAVESPEED));\n\t}\n\n\tset waveSpeed(value: Vector4) {\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.WAVESPEED, value);\n\t}\n\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"WaterPrimary\");\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.HORIZONCOLOR, new Vector4(0.172, 0.463, 0.435, 0));\n\t\tthis._shaderValues.setNumber(WaterPrimaryMaterial.WAVESCALE, 0.15);\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.WAVESPEED, new Vector4(19, 9, -16, -7));\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: WaterPrimaryMaterial = new WaterPrimaryMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n}\n\n\n","import { RenderableSprite3D } from \"./RenderableSprite3D\";\nimport { MeshFilter } from \"./MeshFilter\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { Material } from \"./material/Material\";\nimport { Mesh } from \"../resource/models/Mesh\"\nimport { Node } from \"../../display/Node\"\nimport { Loader } from \"../../net/Loader\";\nimport { Sprite3D } from \"./Sprite3D\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n/**\n * <code>MeshSprite3D</code> 类用于创建网格。\n */\nexport class MeshSprite3D extends RenderableSprite3D {\n    private _meshFilter: MeshFilter;\n\n    /**\n     * 网格过滤器。\n     */\n    get meshFilter(): MeshFilter {\n        return (<MeshFilter>this._meshFilter);\n    }\n\n    /**\n     * 网格渲染器。\n     */\n    get meshRenderer(): MeshRenderer {\n        return (<MeshRenderer>this._render);\n    }\n\n    /**\n     * 创建一个 <code>MeshSprite3D</code> 实例。\n     * @param mesh 网格,同时会加载网格所用默认材质。\n     * @param name 名字。\n     */\n    constructor(mesh: Mesh = null, name: string = null) {\n        super(name);\n        this._meshFilter = this.addComponent(MeshFilter);\n        this._render = this.addComponent(MeshRenderer);\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n        var render: MeshRenderer = this.meshRenderer;\n        var lightmapIndex: any = data.lightmapIndex;\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\n        (data.meshPath != undefined) && (this.meshFilter.sharedMesh = Loader.getRes(data.meshPath));\n        (data.enableRender != undefined) && (render._enabled = data.enableRender);\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\n        var materials: any[] = data.materials;\n        if (materials) {\n            var sharedMaterials: Material[] = render.sharedMaterials;\n            var materialCount: number = materials.length;\n            sharedMaterials.length = materialCount;\n            for (var i: number = 0; i < materialCount; i++) {\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\n            }\n\n            render.sharedMaterials = sharedMaterials;\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(destObject: any, rootSprite: Node, dstSprite: Node): void {\n        super._cloneTo(destObject, rootSprite, dstSprite);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\n    }\n\n\n    /**\n     * @internal\n     */\n    protected _create(): Node {\n        return new Sprite3D();\n    }\n\n}\n\n","import { IClone } from \"../../../../utils/IClone\"\n\n/**\n * <code>Burst</code> 类用于粒子的爆裂描述。\n */\nexport class Burst implements IClone {\n\t/** 爆裂时间,单位为秒。*/\n\tprivate _time: number;\n\t/** 爆裂的最小数量。*/\n\tprivate _minCount: number;\n\t/** 爆裂的最大数量。*/\n\tprivate _maxCount: number;\n\n\t/**\n\t * 获取爆裂时间,单位为秒。\n\t * @return 爆裂时间,单位为秒。\n\t */\n\tget time(): number {\n\t\treturn this._time;\n\t}\n\n\t/**\n\t * 获取爆裂的最小数量。\n\t * @return 爆裂的最小数量。\n\t */\n\tget minCount(): number {\n\t\treturn this._minCount;\n\t}\n\n\t/**\n\t * 获取爆裂的最大数量。\n\t * @return 爆裂的最大数量。\n\t */\n\tget maxCount(): number {\n\t\treturn this._maxCount;\n\t}\n\n\t/**\n\t * 创建一个 <code>Burst</code> 实例。\n\t * @param time 爆裂时间,单位为秒。\n\t * @param minCount 爆裂的最小数量。\n\t * @param time 爆裂的最大数量。\n\t */\n\tconstructor(time: number = 0, minCount: number = 0, maxCount: number = 0) {\n\t\tthis._time = time;\n\t\tthis._minCount = minCount;\n\t\tthis._maxCount = maxCount;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destBurst: Burst = (<Burst>destObject);\n\t\tdestBurst._time = this._time;\n\t\tdestBurst._minCount = this._minCount;\n\t\tdestBurst._maxCount = this._maxCount;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destBurst: Burst = new Burst(this._time, this._minCount, this._maxCount);\n\t\tthis.cloneTo(destBurst);\n\t\treturn destBurst;\n\t}\n}\n\n","import { Gradient } from \"../../Gradient\"\nimport { IClone } from \"../../../../utils/IClone\"\nimport { Vector4 } from \"../../../../maths/Vector4\";\n\n/**\n * <code>GradientColor</code> 类用于创建渐变颜色。\n */\nexport class GradientColor implements IClone {\n\t/**\n\t * 通过固定颜色创建一个 <code>GradientColor</code> 实例。\n\t * @param constant 固定颜色。\n\t */\n\tstatic createByConstant(constant: Vector4): GradientColor {\n\t\tvar gradientColor: GradientColor = new GradientColor();\n\t\tgradientColor._type = 0;\n\t\tgradientColor._constant = constant;\n\t\treturn gradientColor;\n\t}\n\n\t/**\n\t * 通过渐变颜色创建一个 <code>GradientColor</code> 实例。\n\t * @param gradient 渐变色。\n\t */\n\tstatic createByGradient(gradient: Gradient): GradientColor {\n\t\tvar gradientColor: GradientColor = new GradientColor();\n\t\tgradientColor._type = 1;\n\t\tgradientColor._gradient = gradient;\n\t\treturn gradientColor;\n\t}\n\n\t/**\n\t * 通过随机双固定颜色创建一个 <code>GradientColor</code> 实例。\n\t * @param minConstant 最小固定颜色。\n\t * @param maxConstant 最大固定颜色。\n\t */\n\tstatic createByRandomTwoConstant(minConstant: Vector4, maxConstant: Vector4): GradientColor {\n\t\tvar gradientColor: GradientColor = new GradientColor();\n\t\tgradientColor._type = 2;\n\t\tgradientColor._constantMin = minConstant;\n\t\tgradientColor._constantMax = maxConstant;\n\t\treturn gradientColor;\n\t}\n\n\t/**\n\t * 通过随机双渐变颜色创建一个 <code>GradientColor</code> 实例。\n\t * @param minGradient 最小渐变颜色。\n\t * @param maxGradient 最大渐变颜色。\n\t */\n\tstatic createByRandomTwoGradient(minGradient: Gradient, maxGradient: Gradient): GradientColor {\n\t\tvar gradientColor: GradientColor = new GradientColor();\n\t\tgradientColor._type = 3;\n\t\tgradientColor._gradientMin = minGradient;\n\t\tgradientColor._gradientMax = maxGradient;\n\t\treturn gradientColor;\n\t}\n\n\tprivate _type: number = 0;\n\n\tprivate _constant: Vector4 = null;\n\tprivate _constantMin: Vector4 = null;\n\tprivate _constantMax: Vector4 = null;\n\tprivate _gradient: Gradient = null;\n\tprivate _gradientMin: Gradient = null;\n\tprivate _gradientMax: Gradient = null;\n\n\t/**\n\t *生命周期颜色类型,0为固定颜色模式,1渐变模式,2为随机双固定颜色模式,3随机双渐变模式。\n\t */\n\tget type(): number {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * 固定颜色。\n\t */\n\tget constant(): Vector4 {\n\t\treturn this._constant;\n\t}\n\n\t/**\n\t * 最小固定颜色。\n\t */\n\tget constantMin(): Vector4 {\n\t\treturn this._constantMin;\n\t}\n\n\t/**\n\t * 最大固定颜色。\n\t */\n\tget constantMax(): Vector4 {\n\t\treturn this._constantMax;\n\t}\n\n\t/**\n\t * 渐变颜色。\n\t */\n\tget gradient(): Gradient {\n\t\treturn this._gradient;\n\t}\n\n\t/**\n\t * 最小渐变颜色。\n\t */\n\tget gradientMin(): Gradient {\n\t\treturn this._gradientMin;\n\t}\n\n\t/**\n\t * 最大渐变颜色。\n\t */\n\tget gradientMax(): Gradient {\n\t\treturn this._gradientMax;\n\t}\n\n\t/**\n\t * 创建一个 <code>GradientColor,不允许new，请使用静态创建函数。</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientColor: GradientColor = (<GradientColor>destObject);\n\t\tdestGradientColor._type = this._type;\n\t\tthis._constant.cloneTo(destGradientColor._constant);\n\t\tthis._constantMin.cloneTo(destGradientColor._constantMin);\n\t\tthis._constantMax.cloneTo(destGradientColor._constantMax);\n\t\tthis._gradient.cloneTo(destGradientColor._gradient);\n\t\tthis._gradientMin.cloneTo(destGradientColor._gradientMin);\n\t\tthis._gradientMax.cloneTo(destGradientColor._gradientMax);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientColor: GradientColor = new GradientColor();\n\t\tthis.cloneTo(destGradientColor);\n\t\treturn destGradientColor;\n\t}\n\n}\n\n\n","import { GradientColor } from \"./GradientColor\";\n/**\n * <code>ColorOverLifetime</code> 类用于粒子的生命周期颜色。\n */\nexport class ColorOverLifetime {\n\tprivate _color: GradientColor;\n\n\t/**是否启用。*/\n\tenable: boolean;\n\n\t/**\n\t *获取颜色。\n\t */\n\tget color(): GradientColor {\n\t\treturn this._color;\n\t}\n\n\t/**\n\t * 创建一个 <code>ColorOverLifetime</code> 实例。\n\t */\n\tconstructor(color: GradientColor) {\n\t\tthis._color = color;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destColorOverLifetime: ColorOverLifetime = (<ColorOverLifetime>destObject);\n\t\tthis._color.cloneTo(destColorOverLifetime._color);\n\t\tdestColorOverLifetime.enable = this.enable;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destColor: GradientColor;\n\t\tswitch (this._color.type) {\n\t\t\tcase 0:\n\t\t\t\tdestColor = GradientColor.createByConstant(this._color.constant.clone());\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tdestColor = GradientColor.createByGradient(this._color.gradient.clone());\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tdestColor = GradientColor.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tdestColor = GradientColor.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar destColorOverLifetime: ColorOverLifetime = new ColorOverLifetime(destColor);\n\t\tdestColorOverLifetime.enable = this.enable;\n\t\treturn destColorOverLifetime;\n\t}\n\n}\n\n\n","import { IClone } from \"../../../../utils/IClone\";\nimport { Burst } from \"./Burst\";\n\n/**\n * <code>Emission</code> 类用于粒子发射器。\n */\nexport class Emission implements IClone {\n\t/** @internal */\n\tprivate _destroyed: boolean;\n\t/** @internal */\n\tprivate _emissionRate: number = 10;\n\n\tprivate _emissionRateOverDistance: number = 0;\n\n\t/**@internal 粒子的爆裂,不允许修改。*/\n\t_bursts: Burst[];\n\n\t/**是否启用。*/\n\tenable: boolean;\n\n\t/**\n\t * 设置粒子发射速率。\n\t * @param emissionRate 粒子发射速率 (个/秒)。\n\t */\n\tset emissionRate(value: number) {\n\t\tif (value < 0)\n\t\t\tthrow new Error(\"ParticleBaseShape:emissionRate value must large or equal than 0.\");\n\t\tthis._emissionRate = value;\n\t}\n\n\t/**\n\t * 获取粒子发射速率。\n\t * @return 粒子发射速率 (个/秒)。\n\t */\n\tget emissionRate(): number {\n\t\treturn this._emissionRate;\n\t}\n\n\tget emissionRateOverDistance(): number {\n\t\treturn this._emissionRateOverDistance;\n\t}\n\n\tset emissionRateOverDistance(value: number) {\n\t\tvalue = Math.max(0, value);\n\t\tthis._emissionRateOverDistance = value;\n\t}\n\n\t/**\n\t * 获取是否已销毁。\n\t * @return 是否已销毁。\n\t */\n\tget destroyed(): boolean {\n\t\treturn this._destroyed;\n\t}\n\n\t/**\n\t * 创建一个 <code>Emission</code> 实例。\n\t */\n\tconstructor() {\n\t\tthis._destroyed = false;\n\t\tthis._bursts = [];\n\t}\n\n\t/**\n\t * @private\n\t */\n\tdestroy(): void {\n\t\tthis._bursts = null;\n\t\tthis._destroyed = true;\n\t}\n\n\t/**\n\t * 获取粒子爆裂个数。\n\t * @return 粒子爆裂个数。\n\t */\n\tgetBurstsCount(): number {\n\t\treturn this._bursts.length;\n\t}\n\n\t/**\n\t * 通过索引获取粒子爆裂。\n\t * @param index 爆裂索引。\n\t * @return 粒子爆裂。\n\t */\n\tgetBurstByIndex(index: number): Burst {\n\t\treturn this._bursts[index];\n\t}\n\n\t/**\n\t * 增加粒子爆裂。\n\t * @param burst 爆裂。\n\t */\n\taddBurst(burst: Burst): void {\n\t\tvar burstsCount: number = this._bursts.length;\n\t\tif (burstsCount > 0)\n\t\t\tfor (var i: number = 0; i < burstsCount; i++) {\n\t\t\t\tif (this._bursts[i].time > burst.time)\n\t\t\t\t\tthis._bursts.splice(i, 0, burst);\n\t\t\t}\n\t\tthis._bursts.push(burst);\n\t}\n\n\t/**\n\t * 移除粒子爆裂。\n\t * @param burst 爆裂。\n\t */\n\tremoveBurst(burst: Burst): void {\n\t\tvar index: number = this._bursts.indexOf(burst);\n\t\tif (index !== -1) {\n\t\t\tthis._bursts.splice(index, 1);\n\t\t}\n\t}\n\n\t/**\n\t * 通过索引移除粒子爆裂。\n\t * @param index 爆裂索引。\n\t */\n\tremoveBurstByIndex(index: number): void {\n\t\tthis._bursts.splice(index, 1);\n\t}\n\n\t/**\n\t * 清空粒子爆裂。\n\t */\n\tclearBurst(): void {\n\t\tthis._bursts.length = 0;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destEmission: Emission = (<Emission>destObject);\n\n\t\tvar destBursts: Burst[] = destEmission._bursts;\n\t\tdestBursts.length = this._bursts.length;\n\t\tfor (var i: number = 0, n: number = this._bursts.length; i < n; i++) {\n\t\t\tvar destBurst: Burst = destBursts[i];\n\t\t\tif (destBurst)\n\t\t\t\tthis._bursts[i].cloneTo(destBurst);\n\t\t\telse\n\t\t\t\tdestBursts[i] = this._bursts[i].clone();\n\t\t}\n\n\t\tdestEmission._emissionRate = this._emissionRate;\n\t\tdestEmission._emissionRateOverDistance = this._emissionRateOverDistance;\n\t\tdestEmission.enable = this.enable;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destEmission: Emission = new Emission();\n\t\tthis.cloneTo(destEmission);\n\t\treturn destEmission;\n\t}\n}\n\n\n","import { GradientDataInt } from \"./GradientDataInt\";\nimport { IClone } from \"../../../../utils/IClone\"\n\n\n/**\n * <code>FrameOverTime</code> 类用于创建时间帧。\n */\nexport class FrameOverTime implements IClone {\n\t/**\n\t * 通过固定帧创建一个 <code>FrameOverTime</code> 实例。\n\t * @param\tconstant 固定帧。\n\t * @return 时间帧。\n\t */\n\tstatic createByConstant(constant: number = 0): FrameOverTime {\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\n\t\trotationOverLifetime._type = 0;\n\t\trotationOverLifetime._constant = constant;\n\t\treturn rotationOverLifetime;\n\t}\n\n\t/**\n\t * 通过时间帧创建一个 <code>FrameOverTime</code> 实例。\n\t * @param\toverTime 时间帧。\n\t * @return 时间帧。\n\t */\n\tstatic createByOverTime(overTime: GradientDataInt): FrameOverTime {\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\n\t\trotationOverLifetime._type = 1;\n\t\trotationOverLifetime._overTime = overTime;\n\t\treturn rotationOverLifetime;\n\t}\n\n\t/**\n\t * 通过随机双固定帧创建一个 <code>FrameOverTime</code> 实例。\n\t * @param\tconstantMin 最小固定帧。\n\t * @param\tconstantMax 最大固定帧。\n\t * @return 时间帧。\n\t */\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): FrameOverTime {\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\n\t\trotationOverLifetime._type = 2;\n\t\trotationOverLifetime._constantMin = constantMin;\n\t\trotationOverLifetime._constantMax = constantMax;\n\t\treturn rotationOverLifetime;\n\t}\n\n\t/**\n\t * 通过随机双时间帧创建一个 <code>FrameOverTime</code> 实例。\n\t * @param\tgradientFrameMin 最小时间帧。\n\t * @param\tgradientFrameMax 最大时间帧。\n\t * @return 时间帧。\n\t */\n\tstatic createByRandomTwoOverTime(gradientFrameMin: GradientDataInt, gradientFrameMax: GradientDataInt): FrameOverTime {\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\n\t\trotationOverLifetime._type = 3;\n\t\trotationOverLifetime._overTimeMin = gradientFrameMin;\n\t\trotationOverLifetime._overTimeMax = gradientFrameMax;\n\t\treturn rotationOverLifetime;\n\t}\n\n\tprivate _type: number = 0;\n\n\tprivate _constant: number = 0;\n\n\tprivate _overTime: GradientDataInt = null;\n\n\tprivate _constantMin: number = 0;\n\tprivate _constantMax: number = 0;\n\n\tprivate _overTimeMin: GradientDataInt = null;\n\tprivate _overTimeMax: GradientDataInt = null;\n\n\t/**\n\t *生命周期旋转类型,0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\n\t */\n\tget type(): number {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * 固定帧。\n\t */\n\tget constant(): number {\n\t\treturn this._constant;\n\t}\n\n\t/**\n\t * 时间帧。\n\t */\n\tget frameOverTimeData(): GradientDataInt {\n\t\treturn this._overTime;\n\t}\n\n\t/**\n\t * 最小固定帧。\n\t */\n\tget constantMin(): number {\n\t\treturn this._constantMin;\n\t}\n\n\t/**\n\t * 最大固定帧。\n\t */\n\tget constantMax(): number {\n\t\treturn this._constantMax;\n\t}\n\n\t/**\n\t * 最小时间帧。\n\t */\n\tget frameOverTimeDataMin(): GradientDataInt {\n\t\treturn this._overTimeMin;\n\t}\n\n\t/**\n\t * 最大时间帧。\n\t */\n\tget frameOverTimeDataMax(): GradientDataInt {\n\t\treturn this._overTimeMax;\n\t}\n\n\t/**\n\t * 创建一个 <code>FrameOverTime,不允许new，请使用静态创建函数。</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destFrameOverTime: FrameOverTime = (<FrameOverTime>destObject);\n\t\tdestFrameOverTime._type = this._type;\n\t\tdestFrameOverTime._constant = this._constant;\n\t\t(this._overTime) && (this._overTime.cloneTo(destFrameOverTime._overTime));\n\t\tdestFrameOverTime._constantMin = this._constantMin;\n\t\tdestFrameOverTime._constantMax = this._constantMax;\n\t\t(this._overTimeMin) && (this._overTimeMin.cloneTo(destFrameOverTime._overTimeMin));\n\t\t(this._overTimeMax) && (this._overTimeMax.cloneTo(destFrameOverTime._overTimeMax));\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destFrameOverTime: FrameOverTime = new FrameOverTime();\n\t\tthis.cloneTo(destFrameOverTime);\n\t\treturn destFrameOverTime;\n\t}\n\n}\n\n\n","import { GradientDataNumber } from \"./GradientDataNumber\";\nimport { IClone } from \"../../../../utils/IClone\"\nimport { Vector3 } from \"../../../../maths/Vector3\";\n\n\n/**\n * <code>GradientRotation</code> 类用于创建渐变角速度。\n */\nexport class GradientAngularVelocity implements IClone {\n\t/**\n\t * 通过固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tconstant 固定角速度。\n\t * @return 渐变角速度。\n\t */\n\tstatic createByConstant(constant: number): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 0;\n\t\tgradientAngularVelocity._separateAxes = false;\n\t\tgradientAngularVelocity._constant = constant;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\t/**\n\t * 通过分轴固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tseparateConstant 分轴固定角速度。\n\t * @return 渐变角速度。\n\t */\n\tstatic createByConstantSeparate(separateConstant: Vector3): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 0;\n\t\tgradientAngularVelocity._separateAxes = true;\n\t\tgradientAngularVelocity._constantSeparate = separateConstant;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\t/**\n\t * 通过渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tgradient 渐变角速度。\n\t * @return 渐变角速度。\n\t */\n\tstatic createByGradient(gradient: GradientDataNumber): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 1;\n\t\tgradientAngularVelocity._separateAxes = false;\n\t\tgradientAngularVelocity._gradient = gradient;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\t/**\n\t * 通过分轴渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tgradientX X轴渐变角速度。\n\t * @param\tgradientY Y轴渐变角速度。\n\t * @param\tgradientZ Z轴渐变角速度。\n\t * @return  渐变角速度。\n\t */\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 1;\n\t\tgradientAngularVelocity._separateAxes = true;\n\t\tgradientAngularVelocity._gradientX = gradientX;\n\t\tgradientAngularVelocity._gradientY = gradientY;\n\t\tgradientAngularVelocity._gradientZ = gradientZ;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\t/**\n\t * 通过随机双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tconstantMin 最小固定角速度。\n\t * @param\tconstantMax 最大固定角速度。\n\t * @return 渐变角速度。\n\t */\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 2;\n\t\tgradientAngularVelocity._separateAxes = false;\n\t\tgradientAngularVelocity._constantMin = constantMin;\n\t\tgradientAngularVelocity._constantMax = constantMax;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\t/**\n\t * 通过随机分轴双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tseparateConstantMin  最小分轴固定角速度。\n\t * @param\tseparateConstantMax  最大分轴固定角速度。\n\t * @return  渐变角速度。\n\t */\n\tstatic createByRandomTwoConstantSeparate(separateConstantMin: Vector3, separateConstantMax: Vector3): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 2;\n\t\tgradientAngularVelocity._separateAxes = true;\n\t\tgradientAngularVelocity._constantMinSeparate = separateConstantMin;\n\t\tgradientAngularVelocity._constantMaxSeparate = separateConstantMax;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\t/**\n\t * 通过随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tgradientMin 最小渐变角速度。\n\t * @param\tgradientMax 最大渐变角速度。\n\t * @return  渐变角速度。\n\t */\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 3;\n\t\tgradientAngularVelocity._separateAxes = false;\n\t\tgradientAngularVelocity._gradientMin = gradientMin;\n\t\tgradientAngularVelocity._gradientMax = gradientMax;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\t/**\n\t * 通过分轴随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\n\t * @param\tgradientXMin  最小X轴渐变角速度。\n\t * @param\tgradientXMax  最大X轴渐变角速度。\n\t * @param\tgradientYMin  最小Y轴渐变角速度。\n\t * @param\tgradientYMax  最大Y轴渐变角速度。\n\t * @param\tgradientZMin  最小Z轴渐变角速度。\n\t * @param\tgradientZMax  最大Z轴渐变角速度。\n\t * @return  渐变角速度。\n\t */\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber, gradientWMin: GradientDataNumber, gradientWMax: GradientDataNumber): GradientAngularVelocity {\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tgradientAngularVelocity._type = 3;\n\t\tgradientAngularVelocity._separateAxes = true;\n\t\tgradientAngularVelocity._gradientXMin = gradientXMin;\n\t\tgradientAngularVelocity._gradientXMax = gradientXMax;\n\t\tgradientAngularVelocity._gradientYMin = gradientYMin;\n\t\tgradientAngularVelocity._gradientYMax = gradientYMax;\n\t\tgradientAngularVelocity._gradientZMin = gradientZMin;\n\t\tgradientAngularVelocity._gradientZMax = gradientZMax;\n\t\tgradientAngularVelocity._gradientWMin = gradientWMin;\n\t\tgradientAngularVelocity._gradientWMax = gradientWMax;\n\t\treturn gradientAngularVelocity;\n\t}\n\n\tprivate _type: number = 0;\n\tprivate _separateAxes: boolean = false;\n\n\tprivate _constant: number = 0;\n\tprivate _constantSeparate: Vector3 = null;\n\n\tprivate _gradient: GradientDataNumber = null;\n\tprivate _gradientX: GradientDataNumber = null;\n\tprivate _gradientY: GradientDataNumber = null;\n\tprivate _gradientZ: GradientDataNumber = null;\n\tprivate _gradientW: GradientDataNumber = null;\n\n\tprivate _constantMin: number = 0;\n\tprivate _constantMax: number = 0;\n\tprivate _constantMinSeparate: Vector3 = null;\n\tprivate _constantMaxSeparate: Vector3 = null;\n\n\tprivate _gradientMin: GradientDataNumber = null;\n\tprivate _gradientMax: GradientDataNumber = null;\n\tprivate _gradientXMin: GradientDataNumber = null;\n\tprivate _gradientXMax: GradientDataNumber = null;\n\tprivate _gradientYMin: GradientDataNumber = null;\n\tprivate _gradientYMax: GradientDataNumber = null;\n\tprivate _gradientZMin: GradientDataNumber = null;\n\tprivate _gradientZMax: GradientDataNumber = null;\n\tprivate _gradientWMin: GradientDataNumber = null;\n\tprivate _gradientWMax: GradientDataNumber = null;\n\n\t/**\n\t *生命周期角速度类型,0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\n\t */\n\tget type(): number {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t *是否分轴。\n\t */\n\tget separateAxes(): boolean {\n\t\treturn this._separateAxes;\n\t}\n\n\t/**\n\t * 固定角速度。\n\t */\n\tget constant(): number {\n\t\treturn this._constant;\n\t}\n\n\t/**\n\t * 分轴固定角速度。\n\t */\n\tget constantSeparate(): Vector3 {\n\t\treturn this._constantSeparate;\n\t}\n\n\t/**\n\t * 渐变角速度。\n\t */\n\tget gradient(): GradientDataNumber {\n\t\treturn this._gradient;\n\t}\n\n\t/**\n\t * 渐变角角速度X。\n\t */\n\tget gradientX(): GradientDataNumber {\n\t\treturn this._gradientX;\n\t}\n\n\t/**\n\t * 渐变角速度Y。\n\t */\n\tget gradientY(): GradientDataNumber {\n\t\treturn this._gradientY;\n\t}\n\n\t/**\n\t *渐变角速度Z。\n\t */\n\tget gradientZ(): GradientDataNumber {\n\t\treturn this._gradientZ;\n\t}\n\n\t/**\n\t *渐变角速度Z。\n\t */\n\tget gradientW(): GradientDataNumber {\n\t\treturn this._gradientW;\n\t}\n\n\t/**\n\t * 最小随机双固定角速度。\n\t */\n\tget constantMin(): number {\n\t\treturn this._constantMin;\n\t}\n\n\t/**\n\t * 最大随机双固定角速度。\n\t */\n\tget constantMax(): number {\n\t\treturn this._constantMax;\n\t}\n\n\t/**\n\t * 最小分轴随机双固定角速度。\n\t */\n\tget constantMinSeparate(): Vector3 {\n\t\treturn this._constantMinSeparate;\n\t}\n\n\t/**\n\t * 最大分轴随机双固定角速度。\n\t */\n\tget constantMaxSeparate(): Vector3 {\n\t\treturn this._constantMaxSeparate;\n\t}\n\n\t/**\n\t *最小渐变角速度。\n\t */\n\tget gradientMin(): GradientDataNumber {\n\t\treturn this._gradientMin;\n\t}\n\n\t/**\n\t * 最大渐变角速度。\n\t */\n\tget gradientMax(): GradientDataNumber {\n\t\treturn this._gradientMax;\n\t}\n\n\t/**\n\t * 最小渐变角速度X。\n\t */\n\tget gradientXMin(): GradientDataNumber {\n\t\treturn this._gradientXMin;\n\t}\n\n\t/**\n\t * 最大渐变角速度X。\n\t */\n\tget gradientXMax(): GradientDataNumber {\n\t\treturn this._gradientXMax;\n\t}\n\n\t/**\n\t * 最小渐变角速度Y。\n\t */\n\tget gradientYMin(): GradientDataNumber {\n\t\treturn this._gradientYMin;\n\t}\n\n\t/**\n\t *最大渐变角速度Y。\n\t */\n\tget gradientYMax(): GradientDataNumber {\n\t\treturn this._gradientYMax;\n\t}\n\n\t/**\n\t * 最小渐变角速度Z。\n\t */\n\tget gradientZMin(): GradientDataNumber {\n\t\treturn this._gradientZMin;\n\t}\n\n\t/**\n\t * 最大渐变角速度Z。\n\t */\n\tget gradientZMax(): GradientDataNumber {\n\t\treturn this._gradientZMax;\n\t}\n\n\t/**\n\t * 最小渐变角速度Z。\n\t */\n\tget gradientWMin(): GradientDataNumber {\n\t\treturn this._gradientWMin;\n\t}\n\n\t/**\n\t * 最大渐变角速度Z。\n\t */\n\tget gradientWMax(): GradientDataNumber {\n\t\treturn this._gradientWMax;\n\t}\n\n\t/**\n\t * 创建一个 <code>GradientAngularVelocity,不允许new，请使用静态创建函数。</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = (<GradientAngularVelocity>destObject);\n\t\tdestGradientAngularVelocity._type = this._type;\n\t\tdestGradientAngularVelocity._separateAxes = this._separateAxes;\n\t\tdestGradientAngularVelocity._constant = this._constant;\n\t\tthis._constantSeparate.cloneTo(destGradientAngularVelocity._constantSeparate);\n\t\tthis._gradient.cloneTo(destGradientAngularVelocity._gradient);\n\t\tthis._gradientX.cloneTo(destGradientAngularVelocity._gradientX);\n\t\tthis._gradientY.cloneTo(destGradientAngularVelocity._gradientY);\n\t\tthis._gradientZ.cloneTo(destGradientAngularVelocity._gradientZ);\n\t\tdestGradientAngularVelocity._constantMin = this._constantMin;\n\t\tdestGradientAngularVelocity._constantMax = this._constantMax;\n\t\tthis._constantMinSeparate.cloneTo(destGradientAngularVelocity._constantMinSeparate);\n\t\tthis._constantMaxSeparate.cloneTo(destGradientAngularVelocity._constantMaxSeparate);\n\t\tthis._gradientMin.cloneTo(destGradientAngularVelocity._gradientMin);\n\t\tthis._gradientMax.cloneTo(destGradientAngularVelocity._gradientMax);\n\t\tthis._gradientXMin.cloneTo(destGradientAngularVelocity._gradientXMin);\n\t\tthis._gradientXMax.cloneTo(destGradientAngularVelocity._gradientXMax);\n\t\tthis._gradientYMin.cloneTo(destGradientAngularVelocity._gradientYMin);\n\t\tthis._gradientYMax.cloneTo(destGradientAngularVelocity._gradientYMax);\n\t\tthis._gradientZMin.cloneTo(destGradientAngularVelocity._gradientZMin);\n\t\tthis._gradientZMax.cloneTo(destGradientAngularVelocity._gradientZMax);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\n\t\tthis.cloneTo(destGradientAngularVelocity);\n\t\treturn destGradientAngularVelocity;\n\t}\n\n}\n\n\n","import { IClone } from \"../../../../utils/IClone\"\n\n/**\n * <code>GradientDataInt</code> 类用于创建整形渐变。\n */\nexport class GradientDataInt implements IClone {\n\tprivate _currentLength: number = 0;\n\t/**@internal 开发者禁止修改。*/\n\t_elements: Float32Array;//TODO:是否用int\n\n\t/**整形渐变数量。*/\n\tget gradientCount(): number {\n\t\treturn this._currentLength / 2;\n\t}\n\n\t/**\n\t * 创建一个 <code>GradientDataInt</code> 实例。\n\t */\n\tconstructor() {\n\t\tthis._elements = new Float32Array(8);\n\t}\n\n\t/**\n\t * 增加整形渐变。\n\t * @param\tkey 生命周期，范围为0到1。\n\t * @param\tvalue 整形值。\n\t */\n\tadd(key: number, value: number): void {\n\t\tif (this._currentLength < 8) {\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\n\t\t\t\tkey = 1;\n\t\t\t\tconsole.log(\"Warning:the forth key is  be force set to 1.\");\n\t\t\t}\n\n\t\t\tthis._elements[this._currentLength++] = key;\n\t\t\tthis._elements[this._currentLength++] = value;\n\t\t} else {\n\t\t\tconsole.log(\"Warning:data count must lessEqual than 4\");\n\t\t}\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientDataInt: GradientDataInt = <GradientDataInt>destObject;\n\t\tdestGradientDataInt._currentLength = this._currentLength;\n\t\tvar destElements: Float32Array = destGradientDataInt._elements;\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\n\t\t\tdestElements[i] = this._elements[i];\n\t\t}\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientDataInt: GradientDataInt = new GradientDataInt();\n\t\tthis.cloneTo(destGradientDataInt);\n\t\treturn destGradientDataInt;\n\t}\n\n}\n\n\n","import { IClone } from \"../../../../utils/IClone\"\n\n/**\n * <code>GradientDataNumber</code> 类用于创建浮点渐变。\n */\nexport class GradientDataNumber implements IClone {\n\tprivate _currentLength: number = 0;\n\t/**@internal 开发者禁止修改。*/\n\t_elements: Float32Array;\n\n\t/**渐变浮点数量。*/\n\tget gradientCount(): number {\n\t\treturn this._currentLength / 2;\n\t}\n\n\t/**\n\t * 创建一个 <code>GradientDataNumber</code> 实例。\n\t */\n\tconstructor() {\n\t\tthis._elements = new Float32Array(8);\n\t}\n\n\t/**\n\t * 增加浮点渐变。\n\t * @param\tkey 生命周期，范围为0到1。\n\t * @param\tvalue 浮点值。\n\t */\n\tadd(key: number, value: number): void {\n\t\tif (this._currentLength < 8) {\n\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\n\t\t\t\tkey = 1;\n\t\t\t\tconsole.log(\"GradientDataNumber warning:the forth key is  be force set to 1.\");\n\t\t\t}\n\n\t\t\tthis._elements[this._currentLength++] = key;\n\t\t\tthis._elements[this._currentLength++] = value;\n\t\t} else {\n\t\t\tconsole.log(\"GradientDataNumber warning:data count must lessEqual than 4\");\n\t\t}\n\t}\n\n\t/**\n\t * 通过索引获取键。\n\t * @param\tindex 索引。\n\t * @return\tvalue 键。\n\t */\n\tgetKeyByIndex(index: number): number {\n\t\treturn this._elements[index * 2];\n\t}\n\n\t/**\n\t * 通过索引获取值。\n\t * @param\tindex 索引。\n\t * @return\tvalue 值。\n\t */\n\tgetValueByIndex(index: number): number {\n\t\treturn this._elements[index * 2 + 1];\n\t}\n\n\t/**\n\t * 获取平均值。\n\t */\n\tgetAverageValue(): number {\n\t\tvar total: number = 0;\n\t\tvar count: number = 0;\n\t\tfor (var i: number = 0, n: number = this._currentLength - 2; i < n; i += 2) {\n\t\t\tvar subValue: number = this._elements[i + 1];\n\t\t\tsubValue += this._elements[i + 3];\n\t\t\tsubValue = subValue * (this._elements[i + 2] - this._elements[i]);\n\t\t\ttotal += subValue;\n\t\t\tcount++;\n\t\t}\n\t\treturn total / count;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientDataNumber: GradientDataNumber = <GradientDataNumber>destObject;\n\t\tdestGradientDataNumber._currentLength = this._currentLength;\n\t\tvar destElements: Float32Array = destGradientDataNumber._elements;\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++)\n\t\t\tdestElements[i] = this._elements[i];\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientDataNumber: GradientDataNumber = new GradientDataNumber();\n\t\tthis.cloneTo(destGradientDataNumber);\n\t\treturn destGradientDataNumber;\n\t}\n\n}\n\n\n","import { GradientDataNumber } from \"./GradientDataNumber\";\nimport { IClone } from \"../../../../utils/IClone\"\nimport { Vector3 } from \"../../../../maths/Vector3\";\n\n/**\n * <code>GradientSize</code> 类用于创建渐变尺寸。\n */\nexport class GradientSize implements IClone {\n\t/**\n\t * 通过渐变尺寸创建一个 <code>GradientSize</code> 实例。\n\t * @param\tgradient 渐变尺寸。\n\t * @return  渐变尺寸。\n\t */\n\tstatic createByGradient(gradient: GradientDataNumber): GradientSize {\n\t\tvar gradientSize: GradientSize = new GradientSize();\n\t\tgradientSize._type = 0;\n\t\tgradientSize._separateAxes = false;\n\t\tgradientSize._gradient = gradient;\n\t\treturn gradientSize;\n\t}\n\n\t/**\n\t * 通过分轴渐变尺寸创建一个 <code>GradientSize</code> 实例。\n\t * @param\tgradientX 渐变尺寸X。\n\t * @param\tgradientY 渐变尺寸Y。\n\t * @param\tgradientZ 渐变尺寸Z。\n\t * @return  渐变尺寸。\n\t */\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientSize {\n\t\tvar gradientSize: GradientSize = new GradientSize();\n\t\tgradientSize._type = 0;\n\t\tgradientSize._separateAxes = true;\n\t\tgradientSize._gradientX = gradientX;\n\t\tgradientSize._gradientY = gradientY;\n\t\tgradientSize._gradientZ = gradientZ;\n\t\treturn gradientSize;\n\t}\n\n\t/**\n\t * 通过随机双固定尺寸创建一个 <code>GradientSize</code> 实例。\n\t * @param\tconstantMin 最小固定尺寸。\n\t * @param\tconstantMax 最大固定尺寸。\n\t * @return 渐变尺寸。\n\t */\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientSize {\n\t\tvar gradientSize: GradientSize = new GradientSize();\n\t\tgradientSize._type = 1;\n\t\tgradientSize._separateAxes = false;\n\t\tgradientSize._constantMin = constantMin;\n\t\tgradientSize._constantMax = constantMax;\n\t\treturn gradientSize;\n\t}\n\n\t/**\n\t * 通过分轴随机双固定尺寸创建一个 <code>GradientSize</code> 实例。\n\t * @param\tconstantMinSeparate 分轴最小固定尺寸.\n\t * @param\tconstantMaxSeparate 分轴最大固定尺寸。\n\t * @return   渐变尺寸。\n\t */\n\tstatic createByRandomTwoConstantSeparate(constantMinSeparate: Vector3, constantMaxSeparate: Vector3): GradientSize {\n\t\tvar gradientSize: GradientSize = new GradientSize();\n\t\tgradientSize._type = 1;\n\t\tgradientSize._separateAxes = true;\n\t\tgradientSize._constantMinSeparate = constantMinSeparate;\n\t\tgradientSize._constantMaxSeparate = constantMaxSeparate;\n\t\treturn gradientSize;\n\t}\n\n\t/**\n\t * 通过随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。\n\t * @param\tgradientMin 最小渐变尺寸。\n\t * @param\tgradientMax 最大渐变尺寸。\n\t * @return 渐变尺寸。\n\t */\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientSize {\n\t\tvar gradientSize: GradientSize = new GradientSize();\n\t\tgradientSize._type = 2;\n\t\tgradientSize._separateAxes = false;\n\t\tgradientSize._gradientMin = gradientMin;\n\t\tgradientSize._gradientMax = gradientMax;\n\t\treturn gradientSize;\n\t}\n\n\t/**\n\t * 通过分轴随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。\n\t * @param\tgradientXMin X轴最小渐变尺寸。\n\t * @param\tgradientXMax X轴最大渐变尺寸。\n\t * @param\tgradientYMin Y轴最小渐变尺寸。\n\t * @param\tgradientYMax Y轴最大渐变尺寸。\n\t * @param\tgradientZMin Z轴最小渐变尺寸。\n\t * @param\tgradientZMax Z轴最大渐变尺寸。\n\t * @return  渐变尺寸。\n\t */\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientSize {\n\t\tvar gradientSize: GradientSize = new GradientSize();\n\t\tgradientSize._type = 2;\n\t\tgradientSize._separateAxes = true;\n\t\tgradientSize._gradientXMin = gradientXMin;\n\t\tgradientSize._gradientXMax = gradientXMax;\n\t\tgradientSize._gradientYMin = gradientYMin;\n\t\tgradientSize._gradientYMax = gradientYMax;\n\t\tgradientSize._gradientZMin = gradientZMin;\n\t\tgradientSize._gradientZMax = gradientZMax;\n\t\treturn gradientSize;\n\t}\n\n\tprivate _type: number = 0;\n\tprivate _separateAxes: boolean = false;\n\n\tprivate _gradient: GradientDataNumber = null;\n\tprivate _gradientX: GradientDataNumber = null;\n\tprivate _gradientY: GradientDataNumber = null;\n\tprivate _gradientZ: GradientDataNumber = null;\n\n\n\tprivate _constantMin: number = 0;\n\tprivate _constantMax: number = 0;\n\tprivate _constantMinSeparate: Vector3 = null;\n\tprivate _constantMaxSeparate: Vector3 = null;\n\n\n\tprivate _gradientMin: GradientDataNumber = null;\n\tprivate _gradientMax: GradientDataNumber = null;\n\tprivate _gradientXMin: GradientDataNumber = null;\n\tprivate _gradientXMax: GradientDataNumber = null;\n\tprivate _gradientYMin: GradientDataNumber = null;\n\tprivate _gradientYMax: GradientDataNumber = null;\n\tprivate _gradientZMin: GradientDataNumber = null;\n\tprivate _gradientZMax: GradientDataNumber = null;\n\n\t/**\n\t *生命周期尺寸类型，0曲线模式，1随机双常量模式，2随机双曲线模式。\n\t */\n\tget type(): number {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t *是否分轴。\n\t */\n\tget separateAxes(): boolean {\n\t\treturn this._separateAxes;\n\t}\n\n\t/**\n\t * 渐变尺寸。\n\t */\n\tget gradient(): GradientDataNumber {\n\t\treturn this._gradient;\n\t}\n\n\t/**\n\t * 渐变尺寸X。\n\t */\n\tget gradientX(): GradientDataNumber {\n\t\treturn this._gradientX;\n\t}\n\n\t/**\n\t * 渐变尺寸Y。\n\t */\n\tget gradientY(): GradientDataNumber {\n\t\treturn this._gradientY;\n\t}\n\n\t/**\n\t *渐变尺寸Z。\n\t */\n\tget gradientZ(): GradientDataNumber {\n\t\treturn this._gradientZ;\n\t}\n\n\t/**\n\t *最小随机双固定尺寸。\n\t */\n\tget constantMin(): number {\n\t\treturn this._constantMin;\n\t}\n\n\t/**\n\t * 最大随机双固定尺寸。\n\t */\n\tget constantMax(): number {\n\t\treturn this._constantMax;\n\t}\n\n\t/**\n\t * 最小分轴随机双固定尺寸。\n\t */\n\tget constantMinSeparate(): Vector3 {\n\t\treturn this._constantMinSeparate;\n\t}\n\n\t/**\n\t *  最小分轴随机双固定尺寸。\n\t */\n\tget constantMaxSeparate(): Vector3 {\n\t\treturn this._constantMaxSeparate;\n\t}\n\n\t/**\n\t *渐变最小尺寸。\n\t */\n\tget gradientMin(): GradientDataNumber {\n\t\treturn this._gradientMin;\n\t}\n\n\t/**\n\t * 渐变最大尺寸。\n\t */\n\tget gradientMax(): GradientDataNumber {\n\t\treturn this._gradientMax;\n\t}\n\n\t/**\n\t * 渐变最小尺寸X。\n\t */\n\tget gradientXMin(): GradientDataNumber {\n\t\treturn this._gradientXMin;\n\t}\n\n\t/**\n\t * 渐变最大尺寸X。\n\t */\n\tget gradientXMax(): GradientDataNumber {\n\t\treturn this._gradientXMax;\n\t}\n\n\t/**\n\t * 渐变最小尺寸Y。\n\t */\n\tget gradientYMin(): GradientDataNumber {\n\t\treturn this._gradientYMin;\n\t}\n\n\t/**\n\t *渐变最大尺寸Y。\n\t */\n\tget gradientYMax(): GradientDataNumber {\n\t\treturn this._gradientYMax;\n\t}\n\n\t/**\n\t * 渐变最小尺寸Z。\n\t */\n\tget gradientZMin(): GradientDataNumber {\n\t\treturn this._gradientZMin;\n\t}\n\n\t/**\n\t * 渐变最大尺寸Z。\n\t */\n\tget gradientZMax(): GradientDataNumber {\n\t\treturn this._gradientZMax;\n\t}\n\n\t/**\n\t * 创建一个 <code>GradientSize,不允许new，请使用静态创建函数。</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n\t/**\n\t * 获取最大尺寸。\n\t */\n\tgetMaxSizeInGradient(meshMode: boolean = false): number {\n\t\tvar i: number, n: number;\n\t\tvar maxSize: number = -Number.MAX_VALUE;\n\t\tswitch (this._type) {\n\t\t\tcase 0:\n\t\t\t\tif (this._separateAxes) {\n\t\t\t\t\tfor (i = 0, n = this._gradientX.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientX.getValueByIndex(i));\n\t\t\t\t\tfor (i = 0, n = this._gradientY.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientY.getValueByIndex(i));\n\t\t\t\t\tif (meshMode) {\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZ.gradientCount; i < n; i++) {\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZ.getValueByIndex(i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = 0, n = this._gradient.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradient.getValueByIndex(i));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (this._separateAxes) {\n\t\t\t\t\tmaxSize = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x);\n\t\t\t\t\tmaxSize = Math.max(maxSize, this._constantMinSeparate.y);\n\t\t\t\t\tif (meshMode) {\n\t\t\t\t\t\tmaxSize = maxSize = Math.max(maxSize, this._constantMaxSeparate.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmaxSize = Math.max(this._constantMin, this._constantMax);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (this._separateAxes) {\n\t\t\t\t\tfor (i = 0, n = this._gradientXMin.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMin.getValueByIndex(i));\n\t\t\t\t\tfor (i = 0, n = this._gradientXMax.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMax.getValueByIndex(i));\n\n\t\t\t\t\tfor (i = 0, n = this._gradientYMin.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientYMin.getValueByIndex(i));\n\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\n\t\t\t\t\t\n\t\t\t\t\tif (meshMode) {\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMin.gradientCount; i < n; i++) {\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMin.getValueByIndex(i));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++) {\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = 0, n = this._gradientMin.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMin.getValueByIndex(i));\n\t\t\t\t\tfor (i = 0, n = this._gradientMax.gradientCount; i < n; i++)\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMax.getValueByIndex(i));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn maxSize;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientSize: GradientSize = (<GradientSize>destObject);\n\t\tdestGradientSize._type = this._type;\n\t\tdestGradientSize._separateAxes = this._separateAxes;\n\t\tthis._gradient.cloneTo(destGradientSize._gradient);\n\t\tthis._gradientX.cloneTo(destGradientSize._gradientX);\n\t\tthis._gradientY.cloneTo(destGradientSize._gradientY);\n\t\tthis._gradientZ.cloneTo(destGradientSize._gradientZ);\n\t\tdestGradientSize._constantMin = this._constantMin;\n\t\tdestGradientSize._constantMax = this._constantMax;\n\t\tthis._constantMinSeparate.cloneTo(destGradientSize._constantMinSeparate);\n\t\tthis._constantMaxSeparate.cloneTo(destGradientSize._constantMaxSeparate);\n\t\tthis._gradientMin.cloneTo(destGradientSize._gradientMin);\n\t\tthis._gradientMax.cloneTo(destGradientSize._gradientMax);\n\t\tthis._gradientXMin.cloneTo(destGradientSize._gradientXMin);\n\t\tthis._gradientXMax.cloneTo(destGradientSize._gradientXMax);\n\t\tthis._gradientYMin.cloneTo(destGradientSize._gradientYMin);\n\t\tthis._gradientYMax.cloneTo(destGradientSize._gradientYMax);\n\t\tthis._gradientZMin.cloneTo(destGradientSize._gradientZMin);\n\t\tthis._gradientZMax.cloneTo(destGradientSize._gradientZMax);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientSize: GradientSize = new GradientSize();\n\t\tthis.cloneTo(destGradientSize);\n\t\treturn destGradientSize;\n\t}\n\n}\n\n\n","import { GradientDataNumber } from \"./GradientDataNumber\";\nimport { IClone } from \"../../../../utils/IClone\"\nimport { Vector3 } from \"../../../../maths/Vector3\";\n\n/**\n * <code>GradientVelocity</code> 类用于创建渐变速度。\n */\nexport class GradientVelocity implements IClone {\n\t/**\n\t * 通过固定速度创建一个 <code>GradientVelocity</code> 实例。\n\t * @param\tconstant 固定速度。\n\t * @return 渐变速度。\n\t */\n\tstatic createByConstant(constant: Vector3): GradientVelocity {\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\n\t\tgradientVelocity._type = 0;\n\t\tgradientVelocity._constant = constant;\n\t\treturn gradientVelocity;\n\t}\n\n\t/**\n\t * 通过渐变速度创建一个 <code>GradientVelocity</code> 实例。\n\t * @param\tgradientX 渐变速度X。\n\t * @param\tgradientY 渐变速度Y。\n\t * @param\tgradientZ 渐变速度Z。\n\t * @return  渐变速度。\n\t */\n\tstatic createByGradient(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientVelocity {\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\n\t\tgradientVelocity._type = 1;\n\t\tgradientVelocity._gradientX = gradientX;\n\t\tgradientVelocity._gradientY = gradientY;\n\t\tgradientVelocity._gradientZ = gradientZ;\n\t\treturn gradientVelocity;\n\t}\n\n\t/**\n\t * 通过随机双固定速度创建一个 <code>GradientVelocity</code> 实例。\n\t * @param\tconstantMin 最小固定角速度。\n\t * @param\tconstantMax 最大固定角速度。\n\t * @return 渐变速度。\n\t */\n\tstatic createByRandomTwoConstant(constantMin: Vector3, constantMax: Vector3): GradientVelocity {\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\n\t\tgradientVelocity._type = 2;\n\t\tgradientVelocity._constantMin = constantMin;\n\t\tgradientVelocity._constantMax = constantMax;\n\t\treturn gradientVelocity;\n\t}\n\n\t/**\n\t * 通过随机双渐变速度创建一个 <code>GradientVelocity</code> 实例。\n\t * @param\tgradientXMin X轴最小渐变速度。\n\t * @param\tgradientXMax X轴最大渐变速度。\n\t * @param\tgradientYMin Y轴最小渐变速度。\n\t * @param\tgradientYMax Y轴最大渐变速度。\n\t * @param\tgradientZMin Z轴最小渐变速度。\n\t * @param\tgradientZMax Z轴最大渐变速度。\n\t * @return  渐变速度。\n\t */\n\tstatic createByRandomTwoGradient(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientVelocity {\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\n\t\tgradientVelocity._type = 3;\n\t\tgradientVelocity._gradientXMin = gradientXMin;\n\t\tgradientVelocity._gradientXMax = gradientXMax;\n\t\tgradientVelocity._gradientYMin = gradientYMin;\n\t\tgradientVelocity._gradientYMax = gradientYMax;\n\t\tgradientVelocity._gradientZMin = gradientZMin;\n\t\tgradientVelocity._gradientZMax = gradientZMax;\n\t\treturn gradientVelocity;\n\t}\n\n\tprivate _type: number = 0;\n\tprivate _constant: Vector3 = null;\n\n\t\n\tprivate _gradientX: GradientDataNumber = null;\n\tprivate _gradientY: GradientDataNumber = null;\n\tprivate _gradientZ: GradientDataNumber = null;\n\n\t\n\tprivate _constantMin: Vector3 = null;\n\tprivate _constantMax: Vector3 = null;\n\n\t\n\tprivate _gradientXMin: GradientDataNumber = null;\n\tprivate _gradientXMax: GradientDataNumber = null;\n\tprivate _gradientYMin: GradientDataNumber = null;\n\tprivate _gradientYMax: GradientDataNumber = null;\n\tprivate _gradientZMin: GradientDataNumber = null;\n\tprivate _gradientZMax: GradientDataNumber = null;\n\n\t/**\n\t *生命周期速度类型，0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\n\t */\n\tget type(): number {\n\t\treturn this._type;\n\t}\n\n\t/**固定速度。*/\n\tget constant(): Vector3 {\n\t\treturn this._constant;\n\t}\n\n\t/**\n\t * 渐变速度X。\n\t */\n\tget gradientX(): GradientDataNumber {\n\t\treturn this._gradientX;\n\t}\n\n\t/**\n\t * 渐变速度Y。\n\t */\n\tget gradientY(): GradientDataNumber {\n\t\treturn this._gradientY;\n\t}\n\n\t/**\n\t *渐变速度Z。\n\t */\n\tget gradientZ(): GradientDataNumber {\n\t\treturn this._gradientZ;\n\t}\n\n\t/**最小固定速度。*/\n\tget constantMin(): Vector3 {\n\t\treturn this._constantMin;\n\t}\n\n\t/**最大固定速度。*/\n\tget constantMax(): Vector3 {\n\t\treturn this._constantMax;\n\t}\n\n\t/**\n\t * 渐变最小速度X。\n\t */\n\tget gradientXMin(): GradientDataNumber {\n\t\treturn this._gradientXMin;\n\t}\n\n\t/**\n\t * 渐变最大速度X。\n\t */\n\tget gradientXMax(): GradientDataNumber {\n\t\treturn this._gradientXMax;\n\t}\n\n\t/**\n\t * 渐变最小速度Y。\n\t */\n\tget gradientYMin(): GradientDataNumber {\n\t\treturn this._gradientYMin;\n\t}\n\n\t/**\n\t *渐变最大速度Y。\n\t */\n\tget gradientYMax(): GradientDataNumber {\n\t\treturn this._gradientYMax;\n\t}\n\n\t/**\n\t * 渐变最小速度Z。\n\t */\n\tget gradientZMin(): GradientDataNumber {\n\t\treturn this._gradientZMin;\n\t}\n\n\t/**\n\t * 渐变最大速度Z。\n\t */\n\tget gradientZMax(): GradientDataNumber {\n\t\treturn this._gradientZMax;\n\t}\n\n\t/**\n\t * 创建一个 <code>GradientVelocity,不允许new，请使用静态创建函数。</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientVelocity: GradientVelocity = (<GradientVelocity>destObject);\n\t\tdestGradientVelocity._type = this._type;\n\t\tthis._constant.cloneTo(destGradientVelocity._constant);\n\t\tthis._gradientX.cloneTo(destGradientVelocity._gradientX);\n\t\tthis._gradientY.cloneTo(destGradientVelocity._gradientY);\n\t\tthis._gradientZ.cloneTo(destGradientVelocity._gradientZ);\n\t\tthis._constantMin.cloneTo(destGradientVelocity._constantMin);\n\t\tthis._constantMax.cloneTo(destGradientVelocity._constantMax);\n\t\tthis._gradientXMin.cloneTo(destGradientVelocity._gradientXMin);\n\t\tthis._gradientXMax.cloneTo(destGradientVelocity._gradientXMax);\n\t\tthis._gradientYMin.cloneTo(destGradientVelocity._gradientYMin);\n\t\tthis._gradientYMax.cloneTo(destGradientVelocity._gradientYMax);\n\t\tthis._gradientZMin.cloneTo(destGradientVelocity._gradientZMin);\n\t\tthis._gradientZMax.cloneTo(destGradientVelocity._gradientZMax);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientVelocity: GradientVelocity = new GradientVelocity();\n\t\tthis.cloneTo(destGradientVelocity);\n\t\treturn destGradientVelocity;\n\t}\n\n}\n\n\n","import { GradientAngularVelocity } from \"./GradientAngularVelocity\";\nimport { IClone } from \"../../../../utils/IClone\"\n\n/**\n * <code>RotationOverLifetime</code> 类用于粒子的生命周期旋转。\n */\nexport class RotationOverLifetime implements IClone {\n\tprivate _angularVelocity: GradientAngularVelocity;\n\n\t/**是否启用*/\n\tenable: boolean;\n\n\t/**\n\t *获取角速度。\n\t */\n\tget angularVelocity(): GradientAngularVelocity {\n\t\treturn this._angularVelocity;\n\t}\n\n\t/**\n\t * 创建一个 <code>RotationOverLifetime,不允许new，请使用静态创建函数。</code> 实例。\n\t */\n\tconstructor(angularVelocity: GradientAngularVelocity) {\n\t\tthis._angularVelocity = angularVelocity;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destRotationOverLifetime: RotationOverLifetime = (<RotationOverLifetime>destObject);\n\t\tthis._angularVelocity.cloneTo(destRotationOverLifetime._angularVelocity);\n\t\tdestRotationOverLifetime.enable = this.enable;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destAngularVelocity: GradientAngularVelocity;\n\t\tswitch (this._angularVelocity.type) {\n\t\t\tcase 0:\n\t\t\t\tif (this._angularVelocity.separateAxes)\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstantSeparate(this._angularVelocity.constantSeparate.clone());\n\t\t\t\telse\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstant(this._angularVelocity.constant);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (this._angularVelocity.separateAxes)\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone());\n\t\t\t\telse\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradient(this._angularVelocity.gradient.clone());\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (this._angularVelocity.separateAxes)\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone());\n\t\t\t\telse\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif (this._angularVelocity.separateAxes)\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(), this._angularVelocity.gradientYMin.clone(), this._angularVelocity.gradientZMin.clone(), this._angularVelocity.gradientWMin.clone(), this._angularVelocity.gradientXMax.clone(), this._angularVelocity.gradientYMax.clone(), this._angularVelocity.gradientZMax.clone(), this._angularVelocity.gradientWMax.clone());\n\t\t\t\telse\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar destRotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(destAngularVelocity);\n\t\tdestRotationOverLifetime.enable = this.enable;\n\t\treturn destRotationOverLifetime;\n\t}\n\n}\n\n\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { IClone } from \"../../utils/IClone\"\n\n/**\n * <code>BoundBox</code> 类用于创建包围盒。\n */\nexport class BoundBox implements IClone {\n\t/**@internal */\n\tprivate static _tempVector30: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempVector31: Vector3 = new Vector3();\n\n\t/**最小顶点。*/\n\tmin: Vector3;\n\t/**最大顶点。*/\n\tmax: Vector3;\n\n\t/**\n\t * 创建一个 <code>BoundBox</code> 实例。\n\t * @param\tmin 包围盒的最小顶点。\n\t * @param\tmax 包围盒的最大顶点。\n\t */\n\tconstructor(min: Vector3, max: Vector3) {\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\n\t\tvar extentsX: number = extents.x;\n\t\tvar extentsY: number = extents.y;\n\t\tvar extentsZ: number = extents.z;\n\t\tvar matElements: Float32Array = rotation.elements;\n\t\tout.x = Math.abs(matElements[0] * extentsX) + Math.abs(matElements[4] * extentsY) + Math.abs(matElements[8] * extentsZ);\n\t\tout.y = Math.abs(matElements[1] * extentsX) + Math.abs(matElements[5] * extentsY) + Math.abs(matElements[9] * extentsZ);\n\t\tout.z = Math.abs(matElements[2] * extentsX) + Math.abs(matElements[6] * extentsY) + Math.abs(matElements[10] * extentsZ);\n\t}\n\n\t/**\n\t * 获取包围盒的8个角顶点。\n\t * @param\tcorners 返回顶点的输出队列。\n\t */\n\tgetCorners(corners: Vector3[]): void {\n\t\tcorners.length = 8;\n\t\tvar minX: number = this.min.x;\n\t\tvar minY: number = this.min.y;\n\t\tvar minZ: number = this.min.z;\n\t\tvar maxX: number = this.max.x;\n\t\tvar maxY: number = this.max.y;\n\t\tvar maxZ: number = this.max.z;\n\t\tcorners[0] = new Vector3(minX, maxY, maxZ);\n\t\tcorners[1] = new Vector3(maxX, maxY, maxZ);\n\t\tcorners[2] = new Vector3(maxX, minY, maxZ);\n\t\tcorners[3] = new Vector3(minX, minY, maxZ);\n\t\tcorners[4] = new Vector3(minX, maxY, minZ);\n\t\tcorners[5] = new Vector3(maxX, maxY, minZ);\n\t\tcorners[6] = new Vector3(maxX, minY, minZ);\n\t\tcorners[7] = new Vector3(minX, minY, minZ);\n\t}\n\n\t/**\n\t * 获取中心点。\n\t * @param\tout\n\t */\n\tgetCenter(out: Vector3): void {\n\t\tVector3.add(this.min, this.max, out);\n\t\tVector3.scale(out, 0.5, out);\n\t}\n\n\t/**\n\t * 获取范围。\n\t * @param\tout\n\t */\n\tgetExtent(out: Vector3): void {\n\t\tVector3.subtract(this.max, this.min, out);\n\t\tVector3.scale(out, 0.5, out);\n\t}\n\n\t/**\n\t * 设置中心点和范围。\n\t * @param\tcenter\n\t */\n\tsetCenterAndExtent(center: Vector3, extent: Vector3): void {\n\t\tVector3.subtract(center, extent, this.min);\n\t\tVector3.add(center, extent, this.max);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\ttranform(matrix: Matrix4x4, out: BoundBox): void {\n\t\tvar center: Vector3 = BoundBox._tempVector30;\n\t\tvar extent: Vector3 = BoundBox._tempVector31;\n\t\tthis.getCenter(center);\n\t\tthis.getExtent(extent);\n\t\tVector3.transformCoordinate(center, matrix, center);\n\t\tthis._rotateExtents(extent, matrix, extent);\n\t\tout.setCenterAndExtent(center, extent);\n\t}\n\n\ttoDefault(): void {\n\t\tthis.min.toDefault();\n\t\tthis.max.toDefault();\n\t}\n\n\t/**\n\t * 从顶点生成包围盒。\n\t * @param\tpoints 所需顶点队列。\n\t * @param\tout 生成的包围盒。\n\t */\n\tstatic createfromPoints(points: Vector3[], out: BoundBox): void {\n\t\tif (points == null)\n\t\t\tthrow new Error(\"points\");\n\n\t\tvar min: Vector3 = out.min;\n\t\tvar max: Vector3 = out.max;\n\t\tmin.x = Number.MAX_VALUE;\n\t\tmin.y = Number.MAX_VALUE;\n\t\tmin.z = Number.MAX_VALUE;\n\t\tmax.x = -Number.MAX_VALUE;\n\t\tmax.y = -Number.MAX_VALUE;\n\t\tmax.z = -Number.MAX_VALUE;\n\n\t\tfor (var i: number = 0, n: number = points.length; i < n; ++i) {\n\t\t\tVector3.min(min, points[i], min);\n\t\t\tVector3.max(max, points[i], max);\n\t\t}\n\t}\n\n\t/**\n\t * 合并两个包围盒。\n\t * @param\tbox1 包围盒1。\n\t * @param\tbox2 包围盒2。\n\t * @param\tout 生成的包围盒。\n\t */\n\tstatic merge(box1: BoundBox, box2: BoundBox, out: BoundBox): void {\n\t\tVector3.min(box1.min, box2.min, out.min);\n\t\tVector3.max(box1.max, box2.max, out.max);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: BoundBox): void {\n\t\tvar dest: BoundBox = (<BoundBox>destObject);\n\t\tthis.min.cloneTo(dest.min);\n\t\tthis.max.cloneTo(dest.max);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar dest: BoundBox = new BoundBox(new Vector3(), new Vector3());\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n\n\n","import { Vector2 } from \"../../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../../maths/Vector3\";\nimport { IClone } from \"../../../../../utils/IClone\"\nimport { BoundBox } from \"../../../../math/BoundBox\"\nimport { Rand } from \"../../../../math/Rand\"\n\nexport enum ParticleSystemShapeType {\n\t/**盒体 */\n\tBox = 0,\n\t/**环形 */\n\tCircle = 1,\n\t/**锥体 */\n\tCone = 2,\n\t/**半球体 */\n\tHemisphere = 3,\n\t/**球体 */\n\tSphere = 4\n}\n\n\n/**\n * <code>BaseShape</code> 类用于粒子形状。\n */\nexport class BaseShape implements IClone {\n\t/**是否启用。*/\n\tenable: boolean = true;\n\t/**随机方向。*/\n\trandomDirection: number = 0;\n\n\t/**粒子类型 */\n\tshapeType: ParticleSystemShapeType;\n\n\t/**\n\t * 创建一个 <code>BaseShape</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n\t/**@internal */\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\n\t\tthrow new Error(\"BaseShape: must override it.\");\n\t}\n\n\t/**@internal */\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\n\t\tthrow new Error(\"BaseShape: must override it.\");\n\t}\n\n\t/**\n\t * 用于生成粒子初始位置和方向。\n\t * @param\tposition 粒子位置。\n\t * @param\tdirection 粒子方向。\n\t */\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\n\t\tthrow new Error(\"BaseShape: must override it.\");\n\t}\n\n\t/** \n\t * @internal \n\t */\n\t_calculateProceduralBounds(boundBox: BoundBox, emitterPosScale: Vector3, minMaxBounds: Vector2): void {\n\t\tthis._getShapeBoundBox(boundBox);\n\n\t\tvar min: Vector3 = boundBox.min;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tVector3.multiply(min, emitterPosScale, min);\n\t\tVector3.multiply(max, emitterPosScale, max);\n\n\t\tvar speedBounds: BoundBox = new BoundBox(new Vector3(), new Vector3());\n\t\tif (this.randomDirection/* && (m_Type != kCone) && (m_Type != kConeShell)*/)//TODO:randomDirection应换成0到1\n\t\t{\n\t\t\tspeedBounds.min = new Vector3(-1, -1, -1);\n\t\t\tspeedBounds.max = new Vector3(1, 1, 1);\n\t\t\t//minMaxBounds = Abs(minMaxBounds);\n\t\t}\n\t\telse {\n\t\t\tthis._getSpeedBoundBox(speedBounds);\n\t\t}\n\n\n\t\tvar maxSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\n\t\tvar maxSpeedMin: Vector3 = maxSpeedBound.min;\n\t\tvar maxSpeedMax: Vector3 = maxSpeedBound.max;\n\t\tVector3.scale(speedBounds.min, minMaxBounds.y, maxSpeedMin);\n\t\tVector3.scale(speedBounds.max, minMaxBounds.y, maxSpeedMax);\n\t\tVector3.add(boundBox.min, maxSpeedMin, maxSpeedMin);\n\t\tVector3.add(boundBox.max, maxSpeedMax, maxSpeedMax);\n\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\n\n\n\t\tvar minSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\n\t\tvar minSpeedMin: Vector3 = minSpeedBound.min;\n\t\tvar minSpeedMax: Vector3 = minSpeedBound.max;\n\t\tVector3.scale(speedBounds.min, minMaxBounds.x, minSpeedMin);\n\t\tVector3.scale(speedBounds.max, minMaxBounds.x, minSpeedMax);\n\n\t\tVector3.min(minSpeedBound.min, minSpeedMax, maxSpeedMin);\n\t\tVector3.max(minSpeedBound.min, minSpeedMax, maxSpeedMax);\n\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destShape: BaseShape = (<BaseShape>destObject);\n\t\tdestShape.enable = this.enable;\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destShape: BaseShape = new BaseShape();\n\t\tthis.cloneTo(destShape);\n\t\treturn destShape;\n\t}\n\n}\n\n\n","import { Vector2 } from \"../../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../../maths/Vector3\";\nimport { Rand } from \"../../../../math/Rand\"\n\n/**\n * @internal\n * @author ...\n */\nexport class ShapeUtils {\n\tstatic _randomPointUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\n\t\tvar angle: number;\n\t\tif (rand)\n\t\t\tangle = rand.getFloat() * arc;\n\t\telse\n\t\t\tangle = Math.random() * arc;\n\t\tout.x = Math.cos(angle);\n\t\tout.y = Math.sin(angle);\n\t}\n\n\tstatic _randomPointInsideUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\n\t\tShapeUtils._randomPointUnitArcCircle(arc, out, rand);\n\t\tvar range: number;\n\t\tif (rand)\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\n\t\telse\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\n\t\tout.x = out.x * range;\n\t\tout.y = out.y * range;\n\t}\n\n\tstatic _randomPointUnitCircle(out: Vector2, rand: Rand = null): void {\n\t\tvar angle: number;\n\t\tif (rand)\n\t\t\tangle = rand.getFloat() * Math.PI * 2;\n\t\telse\n\t\t\tangle = Math.random() * Math.PI * 2;\n\t\tout.x = Math.cos(angle);\n\t\tout.y = Math.sin(angle);\n\t}\n\n\tstatic _randomPointInsideUnitCircle(out: Vector2, rand: Rand = null): void {\n\t\tShapeUtils._randomPointUnitCircle(out);\n\t\tvar range: number;\n\t\tif (rand)\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\n\t\telse\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\n\t\tout.x = out.x * range;\n\t\tout.y = out.y * range;\n\t}\n\n\tstatic _randomPointUnitSphere(out: Vector3, rand: Rand = null): void {\n\t\tvar z: number;\n\t\tvar a: number;\n\t\tif (rand) {\n\t\t\tz = out.z = rand.getFloat() * 2 - 1.0;\n\t\t\ta = rand.getFloat() * Math.PI * 2;\n\t\t} else {\n\t\t\tz = out.z = Math.random() * 2 - 1.0;\n\t\t\ta = Math.random() * Math.PI * 2;\n\t\t}\n\n\t\tvar r: number = Math.sqrt(1.0 - z * z);\n\n\t\tout.x = r * Math.cos(a);\n\t\tout.y = r * Math.sin(a);\n\t}\n\n\tstatic _randomPointInsideUnitSphere(out: Vector3, rand: Rand = null): void {\n\t\t;\n\t\tShapeUtils._randomPointUnitSphere(out);\n\t\tvar range: number;\n\t\tif (rand)\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 3.0);\n\t\telse\n\t\t\trange = Math.pow(Math.random(), 1.0 / 3.0);\n\t\tout.x = out.x * range;\n\t\tout.y = out.y * range;\n\t\tout.z = out.z * range;\n\t}\n\n\tstatic _randomPointInsideHalfUnitBox(out: Vector3, rand: Rand = null): void {\n\t\tif (rand) {\n\t\t\tout.x = (rand.getFloat() - 0.5);\n\t\t\tout.y = (rand.getFloat() - 0.5);\n\t\t\tout.z = (rand.getFloat() - 0.5);\n\t\t} else {\n\t\t\tout.x = (Math.random() - 0.5);\n\t\t\tout.y = (Math.random() - 0.5);\n\t\t\tout.z = (Math.random() - 0.5);\n\t\t}\n\t}\n\n\tconstructor() {\n\t}\n\n}\n\n\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { BoundBox } from \"../../../../math/BoundBox\"\nimport { Rand } from \"../../../../math/Rand\"\nimport { Vector3 } from \"../../../../../maths/Vector3\";\n\n/**\n * <code>BoxShape</code> 类用于创建球形粒子形状。\n */\nexport class BoxShape extends BaseShape {\n\t/**发射器X轴长度。*/\n\tx: number;\n\t/**发射器Y轴长度。*/\n\ty: number;\n\t/**发射器Z轴长度。*/\n\tz: number;\n\n\t/**\n\t * 创建一个 <code>BoxShape</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.shapeType = ParticleSystemShapeType.Box;\n\t\tthis.x = 1.0;\n\t\tthis.y = 1.0;\n\t\tthis.z = 1.0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = -this.x * 0.5;\n\t\tmin.y = -this.y * 0.5;\n\t\tmin.z = -this.z * 0.5;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = this.x * 0.5;\n\t\tmax.y = this.y * 0.5;\n\t\tmax.z = this.z * 0.5;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = 0.0;\n\t\tmin.y = 0.0;\n\t\tmin.z = 0.0;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = 0.0;\n\t\tmax.y = 1.0;\n\t\tmax.z = 0.0;\n\t}\n\n\t/**\n\t *  用于生成粒子初始位置和方向。\n\t * @param\tposition 粒子位置。\n\t * @param\tdirection 粒子方向。\n\t * @override\n\t */\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\n\t\tif (rand) {\n\t\t\trand.seed = randomSeeds[16];\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position, rand);\n\t\t\trandomSeeds[16] = rand.seed;\n\t\t} else {\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position);\n\t\t}\n\t\tposition.x = this.x * position.x;\n\t\tposition.y = this.y * position.y;\n\t\tposition.z = this.z * position.z;\n\t\tif (this.randomDirection) {\n\t\t\tif (rand) {\n\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\n\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t} else {\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\n\t\t\t}\n\t\t} else {\n\t\t\tdirection.x = 0.0;\n\t\t\tdirection.y = 0.0;\n\t\t\tdirection.z = 1.0;\n\t\t}\n\t}\n\n\t/**\n\t * @param destObject \n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tsuper.cloneTo(destObject);\n\t\tvar destShape: BoxShape = (<BoxShape>destObject);\n\t\tdestShape.x = this.x;\n\t\tdestShape.y = this.y;\n\t\tdestShape.z = this.z;\n\t\tdestShape.randomDirection = this.randomDirection;\n\t}\n\n\t/**\n\t * @override\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destShape: BoxShape = new BoxShape();\n\t\tthis.cloneTo(destShape);\n\t\treturn destShape;\n\t}\n\n}\n\n\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { BoundBox } from \"../../../../math/BoundBox\"\nimport { Rand } from \"../../../../math/Rand\"\nimport { Vector2 } from \"../../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../../maths/Vector3\";\n\n/**\n * <code>CircleShape</code> 类用于创建环形粒子形状。\n */\nexport class CircleShape extends BaseShape {\n\t/** @internal */\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\n\n\t/**发射器半径。*/\n\tradius: number;\n\t/**环形弧度。*/\n\tarc: number;\n\t/**从边缘发射。*/\n\temitFromEdge: boolean;\n\n\t/**\n\t * 创建一个 <code>CircleShape</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.shapeType = ParticleSystemShapeType.Circle;\n\t\tthis.radius = 1.0;\n\t\tthis.arc = 360.0 / 180.0 * Math.PI;\n\t\tthis.emitFromEdge = false;\n\t}\n\n\t/**\n\t * 发射角度0-360\n\t */\n\tset arcDEG(deg: number) {\n\t\tthis.arc = deg / 180 * Math.PI;\n\t}\n\n\tget arcDEG() {\n\t\treturn this.arc * 180 / Math.PI;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.z = -this.radius;\n\t\tmin.y = 0;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.z = this.radius;\n\t\tmax.y = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.y = -1;\n\t\tmin.z = 0;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.y = 1;\n\t\tmax.z = 0;\n\t}\n\n\t/**\n\t *  用于生成粒子初始位置和方向。\n\t * @param\tposition 粒子位置。\n\t * @param\tdirection 粒子方向。\n\t * @override\n\t */\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\n\t\tvar positionPoint: Vector2 = CircleShape._tempPositionPoint;\n\t\tif (rand) {\n\t\t\trand.seed = randomSeeds[16];\n\t\t\tif (this.emitFromEdge)\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\n\t\t\telse\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\n\t\t\trandomSeeds[16] = rand.seed;\n\t\t} else {\n\t\t\tif (this.emitFromEdge)\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\n\t\t\telse\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\n\t\t}\n\n\t\tposition.x = -positionPoint.x;\n\t\tposition.y = positionPoint.y;\n\t\tposition.z = 0;\n\n\t\tVector3.scale(position, this.radius, position);\n\n\t\tif (this.randomDirection) {\n\t\t\tif (rand) {\n\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\n\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t} else {\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\n\t\t\t}\n\t\t} else {\n\t\t\tposition.cloneTo(direction);\n\t\t}\n\t}\n\n\t/**\n\t * @param destObject \n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tsuper.cloneTo(destObject);\n\t\tvar destShape: CircleShape = (<CircleShape>destObject);\n\t\tdestShape.radius = this.radius;\n\t\tdestShape.arc = this.arc;\n\t\tdestShape.emitFromEdge = this.emitFromEdge;\n\t\tdestShape.randomDirection = this.randomDirection;\n\t}\n\n\t/**\n\t * @override\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destShape: CircleShape = new CircleShape();\n\t\tthis.cloneTo(destShape);\n\t\treturn destShape;\n\t}\n\n}\n\n\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { BoundBox } from \"../../../../math/BoundBox\"\nimport { Rand } from \"../../../../math/Rand\"\nimport { Vector2 } from \"../../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../../maths/Vector3\";\n\n/**\n * <code>ConeShape</code> 类用于创建锥形粒子形状。\n */\nexport class ConeShape extends BaseShape {\n\t/** @internal */\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\n\t/** @internal */\n\tprotected static _tempDirectionPoint: Vector2 = new Vector2();\n\n\t/**发射弧度。*/\n\tangle: number;\n\t/**发射器半径。*/\n\tradius: number;\n\t/**椎体长度。*/\n\tlength: number;\n\t/**发射类型,0为Base,1为BaseShell,2为Volume,3为VolumeShell。*/\n\temitType: number;\n\n\t/**\n\t * 创建一个 <code>ConeShape</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.shapeType = ParticleSystemShapeType.Cone;\n\t\tthis.angle = 25.0 / 180.0 * Math.PI;\n\t\tthis.radius = 1.0;\n\t\tthis.length = 5.0;\n\t\tthis.emitType = 0;\n\n\t}\n\n\t/**\n\t * 发射角度0-360\n\t */\n\tset angleDEG(deg: number) {\n\t\tthis.angle = deg / 180 * Math.PI;\n\t}\n\n\tget angleDEG(){\n\t\treturn this.angle*180/Math.PI;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\n\t\tconst coneRadius2: number = this.radius + this.length * Math.sin(this.angle);\n\t\tconst coneLength: number = this.length * Math.cos(this.angle);\n\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.y = -coneRadius2;\n\t\tmin.z = 0;\n\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.y = coneRadius2;\n\t\tmax.z = coneLength;//TODO:是否为负\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\n\t\tconst sinA: number = Math.sin(this.angle);\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.y = -sinA;\n\t\tmin.z = 0;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.y = sinA;\n\t\tmax.z = 1;\n\t}\n\n\t/**\n\t *  用于生成粒子初始位置和方向。\n\t * @param\tposition 粒子位置。\n\t * @param\tdirection 粒子方向。\n\t * @override\n\t */\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\n\t\tvar positionPointE: Vector2 = ConeShape._tempPositionPoint;\n\t\tvar positionX: number;\n\t\tvar positionY: number;\n\t\tvar directionPointE: Vector2;\n\n\t\tvar dirCosA: number = Math.cos(this.angle);\n\t\tvar dirSinA: number = Math.sin(this.angle);\n\t\tswitch (this.emitType) {\n\t\t\tcase 0:\n\t\t\t\tif (rand) {\n\t\t\t\t\trand.seed = randomSeeds[16];\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\n\t\t\t\t\trandomSeeds[16] = rand.seed;\n\t\t\t\t} else {\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\n\t\t\t\t}\n\t\t\t\tpositionX = positionPointE.x;\n\t\t\t\tpositionY = positionPointE.y;\n\t\t\t\tposition.x = positionX * this.radius;\n\t\t\t\tposition.y = positionY * this.radius;\n\t\t\t\tposition.z = 0;\n\n\t\t\t\tif (this.randomDirection) {\n\t\t\t\t\tif (rand) {\n\t\t\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\n\t\t\t\t\t}\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\n\t\t\t\t} else {\n\t\t\t\t\tdirection.x = positionX * dirSinA;\n\t\t\t\t\tdirection.y = positionY * dirSinA;\n\t\t\t\t}\n\t\t\t\tdirection.z = dirCosA;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (rand) {\n\t\t\t\t\trand.seed = randomSeeds[16];\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\n\t\t\t\t\trandomSeeds[16] = rand.seed;\n\t\t\t\t} else {\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\n\t\t\t\t}\n\t\t\t\tpositionX = positionPointE.x;\n\t\t\t\tpositionY = positionPointE.y;\n\t\t\t\tposition.x = positionX * this.radius;\n\t\t\t\tposition.y = positionY * this.radius;\n\t\t\t\tposition.z = 0;\n\n\t\t\t\tif (this.randomDirection) {\n\t\t\t\t\tif (rand) {\n\t\t\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\n\t\t\t\t\t}\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\n\t\t\t\t} else {\n\t\t\t\t\tdirection.x = positionX * dirSinA;\n\t\t\t\t\tdirection.y = positionY * dirSinA;\n\t\t\t\t}\n\t\t\t\tdirection.z = dirCosA;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (rand) {\n\t\t\t\t\trand.seed = randomSeeds[16];\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\n\n\t\t\t\t} else {\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\n\t\t\t\t}\n\t\t\t\tpositionX = positionPointE.x;\n\t\t\t\tpositionY = positionPointE.y;\n\t\t\t\tposition.x = positionX * this.radius;\n\t\t\t\tposition.y = positionY * this.radius;\n\t\t\t\tposition.z = 0;\n\n\t\t\t\tdirection.x = positionX * dirSinA;\n\t\t\t\tdirection.y = positionY * dirSinA;\n\t\t\t\tdirection.z = dirCosA;\n\n\t\t\t\tVector3.normalize(direction, direction);\n\t\t\t\tif (rand) {\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\n\t\t\t\t\trandomSeeds[16] = rand.seed;\n\t\t\t\t} else {\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\n\t\t\t\t}\n\t\t\t\tVector3.add(position, direction, position);\n\n\t\t\t\tif (this.randomDirection) {\n\t\t\t\t\tif (rand) {\n\t\t\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif (rand) {\n\t\t\t\t\trand.seed = randomSeeds[16];\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\n\t\t\t\t} else {\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\n\t\t\t\t}\n\n\t\t\t\tpositionX = positionPointE.x;\n\t\t\t\tpositionY = positionPointE.y;\n\t\t\t\tposition.x = positionX * this.radius;\n\t\t\t\tposition.y = positionY * this.radius;\n\t\t\t\tposition.z = 0;\n\n\t\t\t\tdirection.x = positionX * dirSinA;\n\t\t\t\tdirection.y = positionY * dirSinA;\n\t\t\t\tdirection.z = dirCosA;\n\n\t\t\t\tVector3.normalize(direction, direction);\n\t\t\t\tif (rand) {\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\n\t\t\t\t\trandomSeeds[16] = rand.seed;\n\t\t\t\t} else {\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\n\t\t\t\t}\n\n\t\t\t\tVector3.add(position, direction, position);\n\n\t\t\t\tif (this.randomDirection) {\n\t\t\t\t\tif (rand) {\n\t\t\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"ConeShape:emitType is invalid.\");\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tsuper.cloneTo(destObject);\n\t\tvar destShape: ConeShape = (<ConeShape>destObject);\n\t\tdestShape.angle = this.angle;\n\t\tdestShape.radius = this.radius;\n\t\tdestShape.length = this.length;\n\t\tdestShape.emitType = this.emitType;\n\t\tdestShape.randomDirection = this.randomDirection;\n\t}\n\n\t/**\n\t * @override\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destShape: ConeShape = new ConeShape();\n\t\tthis.cloneTo(destShape);\n\t\treturn destShape;\n\t}\n\n}\n\n\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { BoundBox } from \"../../../../math/BoundBox\"\nimport { Rand } from \"../../../../math/Rand\"\nimport { Vector3 } from \"../../../../../maths/Vector3\";\n\n\n/**\n * <code>HemisphereShape</code> 类用于创建半球形粒子形状。\n */\nexport class HemisphereShape extends BaseShape {\n\t/**发射器半径。*/\n\tradius: number;\n\t/**从外壳发射。*/\n\temitFromShell: boolean;\n\n\t/**\n\t * 创建一个 <code>HemisphereShape</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.shapeType = ParticleSystemShapeType.Hemisphere;\n\t\tthis.radius = 1.0;\n\t\tthis.emitFromShell = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.y = min.z = -this.radius;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.y = this.radius;\n\t\tmax.z = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.y = -1;\n\t\tmin.z = 0;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.y = max.z = 1;\n\t}\n\n\t/**\n\t *  用于生成粒子初始位置和方向。\n\t * @param\tposition 粒子位置。\n\t * @param\tdirection 粒子方向。\n\t * @override\n\t */\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\n\t\tif (rand) {\n\t\t\trand.seed = randomSeeds[16];\n\t\t\tif (this.emitFromShell)\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\n\t\t\telse\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\n\t\t\trandomSeeds[16] = rand.seed;\n\t\t} else {\n\t\t\tif (this.emitFromShell)\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\n\t\t\telse\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\n\t\t}\n\n\t\tVector3.scale(position, this.radius, position);\n\n\t\tvar z: number = position.z;\n\t\t(z < 0.0) && (position.z = z * -1.0);\n\n\t\tif (this.randomDirection) {\n\t\t\tif (rand) {\n\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\n\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t} else {\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\n\t\t\t}\n\t\t} else {\n\t\t\tposition.cloneTo(direction);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tsuper.cloneTo(destObject);\n\t\tvar destShape: HemisphereShape = (<HemisphereShape>destObject);\n\t\tdestShape.radius = this.radius;\n\t\tdestShape.emitFromShell = this.emitFromShell;\n\t\tdestShape.randomDirection = this.randomDirection;\n\t}\n\n\t/**\n\t * @override\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destShape: HemisphereShape = new HemisphereShape();\n\t\tthis.cloneTo(destShape);\n\t\treturn destShape;\n\t}\n\n}\n\n\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { BoundBox } from \"../../../../math/BoundBox\"\nimport { Rand } from \"../../../../math/Rand\"\nimport { Vector3 } from \"../../../../../maths/Vector3\";\n\n/**\n * <code>SphereShape</code> 类用于创建球形粒子形状。\n */\nexport class SphereShape extends BaseShape {\n\t/**发射器半径。*/\n\tradius: number;\n\t/**从外壳发射。*/\n\temitFromShell: boolean;\n\n\t/**\n\t * 创建一个 <code>SphereShape</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.shapeType = ParticleSystemShapeType.Sphere;\n\t\tthis.radius = 1.0;\n\t\tthis.emitFromShell = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.y = min.z = -this.radius;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.y = max.z = this.radius;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\n\t\tvar min: Vector3 = boundBox.min;\n\t\tmin.x = min.y = min.z = -1;\n\t\tvar max: Vector3 = boundBox.max;\n\t\tmax.x = max.y = max.z = 1;\n\t}\n\n\t/**\n\t *  用于生成粒子初始位置和方向。\n\t * @param\tposition 粒子位置。\n\t * @param\tdirection 粒子方向。\n\t * @override\n\t */\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\n\t\tif (rand) {\n\t\t\trand.seed = randomSeeds[16];\n\t\t\tif (this.emitFromShell)\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\n\t\t\telse\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\n\t\t\trandomSeeds[16] = rand.seed;\n\t\t} else {\n\t\t\tif (this.emitFromShell)\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\n\t\t\telse\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\n\t\t}\n\n\t\tVector3.scale(position, this.radius, position);\n\n\t\tif (this.randomDirection) {\n\t\t\tif (rand) {\n\t\t\t\trand.seed = randomSeeds[17];\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\n\t\t\t\trandomSeeds[17] = rand.seed;\n\t\t\t} else {\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\n\t\t\t}\n\t\t} else {\n\t\t\tposition.cloneTo(direction);\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tcloneTo(destObject: any): void {\n\t\tsuper.cloneTo(destObject);\n\t\tvar destShape: SphereShape = (<SphereShape>destObject);\n\t\tdestShape.radius = this.radius;\n\t\tdestShape.emitFromShell = this.emitFromShell;\n\t\tdestShape.randomDirection = this.randomDirection;\n\t}\n\n\t/**\n\t * @override\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destShape: SphereShape = new SphereShape();\n\t\tthis.cloneTo(destShape);\n\t\treturn destShape;\n\t}\n}\n\n\n","import { GradientSize } from \"./GradientSize\";\nimport { IClone } from \"../../../../utils/IClone\"\n\n/**\n * <code>SizeOverLifetime</code> 类用于粒子的生命周期尺寸。\n */\nexport class SizeOverLifetime implements IClone {\n\tprivate _size: GradientSize;\n\n\t/**是否启用*/\n\tenable: boolean;\n\n\t/**\n\t *获取尺寸。\n\t */\n\tget size(): GradientSize {\n\t\treturn this._size;\n\t}\n\n\t/**\n\t * 创建一个 <code>SizeOverLifetime</code> 实例。\n\t */\n\tconstructor(size: GradientSize) {\n\t\tthis._size = size;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destSizeOverLifetime: SizeOverLifetime = (<SizeOverLifetime>destObject);\n\t\tthis._size.cloneTo(destSizeOverLifetime._size);\n\t\tdestSizeOverLifetime.enable = this.enable;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destSize: GradientSize;\n\t\tswitch (this._size.type) {\n\t\t\tcase 0:\n\t\t\t\tif (this._size.separateAxes)\n\t\t\t\t\tdestSize = GradientSize.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone());\n\t\t\t\telse\n\t\t\t\t\tdestSize = GradientSize.createByGradient(this._size.gradient.clone());\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (this._size.separateAxes)\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone());\n\t\t\t\telse\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (this._size.separateAxes)\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone());\n\t\t\t\telse\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar destSizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(destSize);\n\t\tdestSizeOverLifetime.enable = this.enable;\n\t\treturn destSizeOverLifetime;\n\t}\n\n}\n\n\n","import { IClone } from \"../../../../utils/IClone\"\n\n/**\n * <code>StartFrame</code> 类用于创建开始帧。\n */\nexport class StartFrame implements IClone {\n\t/**\n\t * 通过随机常量旋转创建一个 <code>StartFrame</code> 实例。\n\t * @param\tconstant  固定帧。\n\t * @return 开始帧。\n\t */\n\tstatic createByConstant(constant: number = 0): StartFrame {\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\n\t\trotationOverLifetime._type = 0;\n\t\trotationOverLifetime._constant = constant;\n\t\treturn rotationOverLifetime;\n\t}\n\n\t/**\n\t *  通过随机双常量旋转创建一个 <code>StartFrame</code> 实例。\n\t * @param\tconstantMin 最小固定帧。\n\t * @param\tconstantMax 最大固定帧。\n\t * @return 开始帧。\n\t */\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): StartFrame {\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\n\t\trotationOverLifetime._type = 1;\n\t\trotationOverLifetime._constantMin = constantMin;\n\t\trotationOverLifetime._constantMax = constantMax;\n\t\treturn rotationOverLifetime;\n\t}\n\n\n\tprivate _type: number = 0;\n\tprivate _constant: number = 0;\n\tprivate _constantMin: number = 0;\n\tprivate _constantMax: number = 0;\n\n\t/**\n\t *开始帧类型,0常量模式，1随机双常量模式。\n\t */\n\tget type(): number {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * 固定帧。\n\t */\n\tget constant(): number {\n\t\treturn this._constant;\n\t}\n\n\t/**\n\t * 最小固定帧。\n\t */\n\tget constantMin(): number {\n\t\treturn this._constantMin;\n\t}\n\n\t/**\n\t * 最大固定帧。\n\t */\n\tget constantMax(): number {\n\t\treturn this._constantMax;\n\t}\n\n\t/**\n\t * 创建一个 <code>StartFrame,不允许new，请使用静态创建函数。</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destStartFrame: StartFrame = (<StartFrame>destObject);\n\t\tdestStartFrame._type = this._type;\n\t\tdestStartFrame._constant = this._constant;\n\t\tdestStartFrame._constantMin = this._constantMin;\n\t\tdestStartFrame._constantMax = this._constantMax;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destStartFrame: StartFrame = new StartFrame();\n\t\tthis.cloneTo(destStartFrame);\n\t\treturn destStartFrame;\n\t}\n\n}\n\n\n","import { FrameOverTime } from \"./FrameOverTime\";\nimport { StartFrame } from \"./StartFrame\";\nimport { IClone } from \"../../../../utils/IClone\"\nimport { Vector2 } from \"../../../../maths/Vector2\";\n\n/**\n * <code>TextureSheetAnimation</code> 类用于创建粒子帧动画。\n */\nexport class TextureSheetAnimation implements IClone {\n\t/**@internal */\n\tprivate _frame: FrameOverTime;\n\t/**@internal */\n\tprivate _startFrame: StartFrame;\n\n\t/**纹理平铺。*/\n\ttiles: Vector2;\n\t/**类型,0为whole sheet、1为singal row。*/\n\ttype: number = 0;\n\t/**是否随机行，type为1时有效。*/\n\trandomRow: boolean = false;\n\t/**行索引,type为1时有效。*/\n\trowIndex: number = 0;\n\t/**循环次数。*/\n\tcycles: number = 0;\n\t/**UV通道类型,0为Noting,1为Everything,待补充,暂不支持。*/\n\tenableUVChannels: number = 0;\n\t/**是否启用*/\n\tenable: boolean = false;\n\n\t/**获取时间帧率。*/\n\tget frame(): FrameOverTime {\n\t\treturn this._frame;\n\t}\n\n\t/**获取开始帧率。*/\n\tget startFrame(): StartFrame {\n\t\treturn this._startFrame;\n\t}\n\n\t/**\n\t * 创建一个 <code>TextureSheetAnimation</code> 实例。\n\t * @param frame 动画帧。\n\t * @param  startFrame 开始帧。\n\t */\n\tconstructor(frame: FrameOverTime, startFrame: StartFrame) {\n\t\tthis.tiles = new Vector2(1, 1);\n\t\tthis.type = 0;\n\t\tthis.randomRow = true;\n\t\tthis.rowIndex = 0;\n\t\tthis.cycles = 1;\n\t\tthis.enableUVChannels = 1;//TODO:待补充\n\t\tthis._frame = frame;\n\t\tthis._startFrame = startFrame;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = (<TextureSheetAnimation>destObject);\n\t\tthis.tiles.cloneTo(destTextureSheetAnimation.tiles);\n\t\tdestTextureSheetAnimation.type = this.type;\n\t\tdestTextureSheetAnimation.randomRow = this.randomRow;\n\t\tdestTextureSheetAnimation.rowIndex = this.rowIndex;\n\t\tdestTextureSheetAnimation.cycles = this.cycles;\n\t\tdestTextureSheetAnimation.enableUVChannels = this.enableUVChannels;\n\t\tdestTextureSheetAnimation.enable = this.enable;\n\t\tthis._frame.cloneTo(destTextureSheetAnimation._frame);\n\t\tthis._startFrame.cloneTo(destTextureSheetAnimation._startFrame);\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destFrame: FrameOverTime;\n\t\tswitch (this._frame.type) {\n\t\t\tcase 0:\n\t\t\t\tdestFrame = FrameOverTime.createByConstant(this._frame.constant);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tdestFrame = FrameOverTime.createByOverTime(this._frame.frameOverTimeData.clone());\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar destStartFrame: StartFrame;\n\t\tswitch (this._startFrame.type) {\n\t\t\tcase 0:\n\t\t\t\tdestStartFrame = StartFrame.createByConstant(this._startFrame.constant);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tdestStartFrame = StartFrame.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(destFrame, destStartFrame);\n\t\tthis.cloneTo(destTextureSheetAnimation);\n\t\treturn destTextureSheetAnimation;\n\t}\n\n}\n\n\n","import { IClone } from \"../../../../utils/IClone\";\nimport { GradientVelocity } from \"./GradientVelocity\";\n\n/**\n * <code>VelocityOverLifetime</code> 类用于粒子的生命周期速度。\n */\nexport class VelocityOverLifetime implements IClone {\n\t/**@internal */\n\tprivate _velocity: GradientVelocity;\n\n\t/**是否启用*/\n\tenable: boolean = false;\n\t/**速度空间,0为local,1为world。*/\n\tspace: number = 0;\n\n\t/**\n\t *获取尺寸。\n\t */\n\tget velocity(): GradientVelocity {\n\t\treturn this._velocity;\n\t}\n\n\t/**\n\t * 创建一个 <code>VelocityOverLifetime</code> 实例。\n\t */\n\tconstructor(velocity: GradientVelocity) {\n\t\tthis._velocity = velocity;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = (<VelocityOverLifetime>destObject);\n\t\tthis._velocity.cloneTo(destVelocityOverLifetime._velocity);\n\t\tdestVelocityOverLifetime.enable = this.enable;\n\t\tdestVelocityOverLifetime.space = this.space;\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destVelocity: GradientVelocity;\n\t\tswitch (this._velocity.type) {\n\t\t\tcase 0:\n\t\t\t\tdestVelocity = GradientVelocity.createByConstant(this._velocity.constant.clone());\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tdestVelocity = GradientVelocity.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientZMax.clone());\n\t\t\t\tbreak;\n\t\t}\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(destVelocity);\n\t\tdestVelocityOverLifetime.enable = this.enable;\n\t\tdestVelocityOverLifetime.space = this.space;\n\t\treturn destVelocityOverLifetime;\n\t}\n\n}\n\n\n","\n\n/**\n * @internal\n * @author ...\n */\nexport class VertexShuriKenParticle {\n\t//TODO Attribute\n\tstatic PARTICLE_DIRECTIONTIME: number = 0;\n\tstatic PARTICLE_POSITION0: number = 1;\n\tstatic PARTICLE_COLOR0: number = 2;\n\tstatic PARTICLE_TEXTURECOORDINATE0: number = 3;\n\tstatic PARTICLE_SHAPEPOSITIONSTARTLIFETIME: number = 4;\n\tstatic PARTICLE_CORNERTEXTURECOORDINATE0: number = 5;\n\tstatic PARTICLE_STARTCOLOR0: number = 6;\n\tstatic PARTICLE_ENDCOLOR0: number = 7;\n\tstatic PARTICLE_STARTSIZE: number = 8;\n\tstatic PARTICLE_STARTROTATION: number = 9;\n\tstatic PARTICLE_STARTSPEED: number = 10;\n\tstatic PARTICLE_RANDOM0: number = 11;\n\tstatic PARTICLE_RANDOM1: number = 12;\n\tstatic PARTICLE_SIMULATIONWORLDPOSTION: number = 13;\n\tstatic PARTICLE_SIMULATIONWORLDROTATION: number = 14;\n\tstatic PARTICLE_SIMULATIONUV:number = 15;\n\n\tconstructor() {\n\n\t}\n\n}\n\n\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\n\n/**\n * @internal\n * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\n */\nexport class VertexShurikenParticleBillboard extends VertexShuriKenParticle {\n\t/**@internal */\n\tprivate static _vertexDeclaration: VertexDeclaration;\n\n\tstatic get vertexDeclaration(): VertexDeclaration {\n\t\treturn VertexShurikenParticleBillboard._vertexDeclaration;\n\t}\n\n\tprivate static _vertexInstanceMeshDeclaration: VertexDeclaration;\n\n\tstatic get vertexInstanceMeshDeclaration(): VertexDeclaration {\n\t\treturn VertexShurikenParticleBillboard._vertexInstanceMeshDeclaration;\n\t}\n\n\tprivate static _vertexInstanceParticleDeclaration: VertexDeclaration;\n\n\tstatic get vertexInstanceParticleDeclaration(): VertexDeclaration {\n\t\treturn VertexShurikenParticleBillboard._vertexInstanceParticleDeclaration;\n\t}\n\n\tprivate static _billboardVertexArray: Float32Array;\n\tstatic get billboardVertexArray(): Float32Array {\n\t\treturn VertexShurikenParticleBillboard._billboardVertexArray;\n\t}\n\n\tprivate static _billboardIndexArray: Uint16Array;\n\tstatic get billboardIndexArray(): Uint16Array {\n\t\treturn VertexShurikenParticleBillboard._billboardIndexArray;\n\t}\n\tstatic set billboardIndexArray(value: Uint16Array) {\n\t\tVertexShurikenParticleBillboard._billboardIndexArray = value;\n\t}\n\n\t/**\n\t  * @internal\n\t  */\n\tstatic __init__(): void {\n\t\tVertexShurikenParticleBillboard._vertexDeclaration = new VertexDeclaration(168, [\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0),\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\n\t\t\tnew VertexElement(64, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\n\t\t\tnew VertexElement(88, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\n\t\t\tnew VertexElement(124, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\n\t\t\tnew VertexElement(136, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\n\t\t\tnew VertexElement(152, VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\n\t\t]);\n\n\n\t\tVertexShurikenParticleBillboard._vertexInstanceMeshDeclaration = new VertexDeclaration(16, [\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0)\n\t\t]);\n\n\t\tVertexShurikenParticleBillboard._vertexInstanceParticleDeclaration = new VertexDeclaration(152, [\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\n\t\t\tnew VertexElement(60, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\n\t\t\tnew VertexElement(72, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\n\t\t\tnew VertexElement(120, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\n\t\t\tnew VertexElement(136, VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\n\t\t])\n\n\t\tVertexShurikenParticleBillboard._billboardIndexArray = new Uint16Array([\n\t\t\t0, 2, 1, 0, 3, 2\n\t\t]);\n\n\t\tVertexShurikenParticleBillboard._billboardVertexArray = new Float32Array([\n\t\t\t-0.5, -0.5, 0, 1,\n\t\t\t0.5, -0.5, 1, 1,\n\t\t\t0.5, 0.5, 1, 0,\n\t\t\t-0.5, 0.5, 0, 0\n\t\t]);\n\t}\n\n\t/**@internal */\n\tprivate _cornerTextureCoordinate: Vector4;\n\t/**@internal */\n\tprivate _positionStartLifeTime: Vector4;\n\t/**@internal */\n\tprivate _velocity: Vector3;\n\t/**@internal */\n\tprivate _startColor: Vector4;\n\t/**@internal */\n\tprivate _startSize: Vector3;\n\t/**@internal */\n\tprivate _startRotation0: Vector3;\n\t/**@internal */\n\tprivate _startRotation1: Vector3;\n\t/**@internal */\n\tprivate _startRotation2: Vector3;\n\t/**@internal */\n\tprivate _startLifeTime: number;\n\t/**@internal */\n\tprivate _time: number;\n\t/**@internal */\n\tprivate _startSpeed: number;\n\t/**@internal */\n\tprivate _randoms0: Vector4;\n\t/**@internal */\n\tprivate _randoms1: Vector4;\n\t/**@internal */\n\tprivate _simulationWorldPostion: Vector3;\n\n\tget cornerTextureCoordinate(): Vector4 {\n\t\treturn this._cornerTextureCoordinate;\n\t}\n\n\tget positionStartLifeTime(): Vector4 {\n\t\treturn this._positionStartLifeTime;\n\t}\n\n\tget velocity(): Vector3 {\n\t\treturn this._velocity;\n\t}\n\n\tget startColor(): Vector4 {\n\t\treturn this._startColor;\n\t}\n\n\tget startSize(): Vector3 {\n\t\treturn this._startSize;\n\t}\n\n\tget startRotation0(): Vector3 {\n\t\treturn this._startRotation0;\n\t}\n\n\tget startRotation1(): Vector3 {\n\t\treturn this._startRotation1;\n\t}\n\n\tget startRotation2(): Vector3 {\n\t\treturn this._startRotation2;\n\t}\n\n\tget startLifeTime(): number {\n\t\treturn this._startLifeTime;\n\t}\n\n\tget time(): number {\n\t\treturn this._time;\n\t}\n\n\tget startSpeed(): number {\n\t\treturn this._startSpeed;\n\t}\n\n\tget random0(): Vector4 {\n\t\treturn this._randoms0;\n\t}\n\n\tget random1(): Vector4 {\n\t\treturn this._randoms1;\n\t}\n\n\tget simulationWorldPostion(): Vector3 {\n\t\treturn this._simulationWorldPostion;\n\t}\n\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\n\t\tsuper();\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\n\t\tthis._velocity = velocity;\n\t\tthis._startColor = startColor;\n\t\tthis._startSize = startSize;\n\t\tthis._startRotation0 = startRotation0;\n\t\tthis._startRotation1 = startRotation1;\n\t\tthis._startRotation2 = startRotation2;\n\t\tthis._startLifeTime = ageAddScale;\n\t\tthis._time = time;\n\t\tthis._startSpeed = startSpeed;\n\t\tthis._randoms0 = randoms0;\n\t\tthis._randoms1 = randoms1;\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\n\t}\n\n}\n\n\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\n\n/**\n * @internal\n * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\n */\nexport class VertexShurikenParticleMesh extends VertexShuriKenParticle {\n\t/**@internal */\n\tprivate static _vertexDeclaration: VertexDeclaration;\n\n\t/**\n  * @internal\n  */\n\tstatic __init__(): void {\n\t\tVertexShurikenParticleMesh._vertexDeclaration = new VertexDeclaration(188, [new VertexElement(0, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_POSITION0),\n\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_COLOR0),\n\t\tnew VertexElement(28, VertexElementFormat.Vector2, VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0),\n\t\tnew VertexElement(36, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\n\t\tnew VertexElement(52, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\n\t\tnew VertexElement(68, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\n\t\tnew VertexElement(84, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\n\t\tnew VertexElement(96, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\n\t\tnew VertexElement(108, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\n\t\tnew VertexElement(112, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\n\t\tnew VertexElement(128, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\n\t\tnew VertexElement(144, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\n\t\tnew VertexElement(156, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\n\t\tnew VertexElement(172,VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONUV)]);\n\t\t\n\t\t\n\t\tVertexShurikenParticleMesh._vertexInstanceMeshDeclaration = new VertexDeclaration(36, [\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_POSITION0),\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_COLOR0),\n\t\t\tnew VertexElement(28, VertexElementFormat.Vector2, VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0)\n\t\t]);\n\n\t\tVertexShurikenParticleMesh._vertexInstanceParticleDeclaration = new VertexDeclaration(152, [\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\n\t\t\tnew VertexElement(60, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\n\t\t\tnew VertexElement(72, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\n\t\t\tnew VertexElement(120, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\n\t\t\tnew VertexElement(136,VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\n\t\t]);\n\t}\n\n\tstatic get vertexDeclaration(): VertexDeclaration {\n\t\treturn VertexShurikenParticleMesh._vertexDeclaration;\n\t}\n\n\tprivate static _vertexInstanceMeshDeclaration: VertexDeclaration;\n\tstatic get vertexInstanceMeshDeclaration(): VertexDeclaration {\n\t\treturn VertexShurikenParticleMesh._vertexInstanceMeshDeclaration;\n\t}\n\n\tprivate static _vertexInstanceParticleDeclaration: VertexDeclaration;\n\tstatic get vertexInstanceParticleDeclaration(): VertexDeclaration {\n\t\treturn VertexShurikenParticleMesh._vertexInstanceParticleDeclaration;\n\t}\n\n\t/**@internal */\n\tprivate _cornerTextureCoordinate: Vector4;\n\t/**@internal */\n\tprivate _positionStartLifeTime: Vector4;\n\t/**@internal */\n\tprivate _velocity: Vector3;\n\t/**@internal */\n\tprivate _startColor: Vector4;\n\t/**@internal */\n\tprivate _startSize: Vector3;\n\t/**@internal */\n\tprivate _startRotation0: Vector3;\n\t/**@internal */\n\tprivate _startRotation1: Vector3;\n\t/**@internal */\n\tprivate _startRotation2: Vector3;\n\t/**@internal */\n\tprivate _startLifeTime: number;\n\t/**@internal */\n\tprivate _time: number;\n\t/**@internal */\n\tprivate _startSpeed: number;\n\t/**@internal */\n\tprivate _randoms0: Vector4;\n\t/**@internal */\n\tprivate _randoms1: Vector4;\n\t/**@internal */\n\tprivate _simulationWorldPostion: Vector3;\n\n\tget cornerTextureCoordinate(): Vector4 {\n\t\treturn this._cornerTextureCoordinate;\n\t}\n\n\tget position(): Vector4 {\n\t\treturn this._positionStartLifeTime;\n\t}\n\n\tget velocity(): Vector3 {\n\t\treturn this._velocity;\n\t}\n\n\tget startColor(): Vector4 {\n\t\treturn this._startColor;\n\t}\n\n\tget startSize(): Vector3 {\n\t\treturn this._startSize;\n\t}\n\n\tget startRotation0(): Vector3 {\n\t\treturn this._startRotation0;\n\t}\n\n\tget startRotation1(): Vector3 {\n\t\treturn this._startRotation1;\n\t}\n\n\tget startRotation2(): Vector3 {\n\t\treturn this._startRotation2;\n\t}\n\n\tget startLifeTime(): number {\n\t\treturn this._startLifeTime;\n\t}\n\n\tget time(): number {\n\t\treturn this._time;\n\t}\n\n\tget startSpeed(): number {\n\t\treturn this._startSpeed;\n\t}\n\n\tget random0(): Vector4 {\n\t\treturn this._randoms0;\n\t}\n\n\tget random1(): Vector4 {\n\t\treturn this._randoms1;\n\t}\n\n\tget simulationWorldPostion(): Vector3 {\n\t\treturn this._simulationWorldPostion;\n\t}\n\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\n\t\tsuper();\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\n\t\tthis._velocity = velocity;\n\t\tthis._startColor = startColor;\n\t\tthis._startSize = startSize;\n\t\tthis._startRotation0 = startRotation0;\n\t\tthis._startRotation1 = startRotation1;\n\t\tthis._startRotation2 = startRotation2;\n\t\tthis._startLifeTime = ageAddScale;\n\t\tthis._time = time;\n\t\tthis._startSpeed = startSpeed;\n\t\tthis._randoms0 = randoms0;\n\t\tthis._randoms1 = randoms1;\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\n\t}\n\n}\n\n\n","/**\n\t * <code>Rand</code> 类用于通过32位无符号整型随机种子创建随机数。\n\t */\nexport class Rand {\n\t/**\n\t * 通过无符号32位整形，获取32位浮点随机数。\n\t * @param 无符号32位整形随机数。\n\t * @return 32位浮点随机数。\n\t */\n\tstatic getFloatFromInt(v: number): number {\n\t\t// take 23 bits of integer, and divide by 2^23-1\n\t\treturn (v & 0x007FFFFF) * (1.0 / 8388607.0)\n\t}\n\n\t/**\n\t * 通过无符号32位整形，获取无符号8位字节随机数。\n\t * @param 无符号32位整形随机数。\n\t * @return 无符号8位字节随机数。\n\t */\n\tstatic getByteFromInt(v: number): number {//TODO：待验证函数\n\t\t// take the most significant byte from the 23-bit value\n\t\treturn (v & 0x007FFFFF) >>> 15/*(23-8)*/;\n\t}\n\n\t/**@internal */\n\tprivate _temp: Uint32Array = new Uint32Array(1);\n\n\t/**获取随机种子。*/\n\tseeds: Uint32Array = new Uint32Array(4);\n\n\t/**\n\t * 获取随机种子。\n\t * @return 随机种子。\n\t */\n\tget seed(): number {\n\t\treturn this.seeds[0];\n\t}\n\n\t/**\n\t * 设置随机种子。\n\t * @param\tseed 随机种子。\n\t */\n\tset seed(seed: number) {\n\t\tthis.seeds[0] = seed;\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\n\t}\n\n\t/**\n\t * 创建一个 <code>Rand</code> 实例。\n\t * @param\tseed  32位无符号整型随机种子。\n\t */\n\tconstructor(seed: number) {\n\t\tthis.seeds[0] = seed;\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\n\t}\n\n\t/**\n\t * 获取无符号32位整形随机数。\n\t * @return 无符号32位整形随机数。\n\t */\n\tgetUint(): number {\n\t\tthis._temp[0] = this.seeds[0] ^ (this.seeds[0] << 11);\n\t\tthis.seeds[0] = this.seeds[1];\n\t\tthis.seeds[1] = this.seeds[2];\n\t\tthis.seeds[2] = this.seeds[3];\n\t\tthis.seeds[3] = (this.seeds[3] ^ (this.seeds[3] >>> 19)) ^ (this._temp[0] ^ (this._temp[0] >>> 8));\n\t\treturn this.seeds[3];\n\t}\n\n\t/**\n\t * 获取0到1之间的浮点随机数。\n\t * @return 0到1之间的浮点随机数。\n\t */\n\tgetFloat(): number {\n\t\tthis.getUint();\n\t\treturn (this.seeds[3] & 0x007FFFFF) * (1.0 / 8388607.0);\n\t}\n\n\t/**\n\t * 获取-1到1之间的浮点随机数。\n\t * @return -1到1之间的浮点随机数。\n\t */\n\tgetSignedFloat(): number {\n\t\treturn this.getFloat() * 2.0 - 1.0;\n\t}\n\n}\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\n\n/**\n * @internal\n */\nexport class ShuriKenParticle3DShaderDeclaration {\n\n\t/**@internal */\n\tstatic SHADERDEFINE_RENDERMODE_BILLBOARD: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_COLORKEYCOUNT_8: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_COLOROVERLIFETIME: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_RANDOMCOLOROVERLIFETIME: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMECURVE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_TEXTURESHEETANIMATIONCURVE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIME: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMECURVE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMECURVE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_RENDERMODE_MESH: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_SHAPE: ShaderDefine;\n\n\n\t//Base\n\t/**@internal */\n\tstatic WORLDPOSITION: number;\n\t/**@internal */\n\tstatic WORLDROTATION: number;\n\t/**@internal */\n\tstatic POSITIONSCALE: number;\n\t/**@internal */\n\tstatic SIZESCALE: number;\n\t/**@internal */\n\tstatic SCALINGMODE: number;\n\t/**@internal */\n\tstatic GRAVITY: number;\n\t/**@internal */\n\tstatic THREEDSTARTROTATION: number;\n\t/**@internal */\n\tstatic STRETCHEDBILLBOARDLENGTHSCALE: number;\n\t/**@internal */\n\tstatic STRETCHEDBILLBOARDSPEEDSCALE: number;\n\t/**@internal */\n\tstatic SIMULATIONSPACE: number;\n\t/**@internal */\n\tstatic CURRENTTIME: number;\n\t/**@internal */\n\tstatic DRAG: number;\n\n\t//VelocityOverLifetime\n\t/**@internal */\n\tstatic VOLVELOCITYCONST: number;\n\t/**@internal */\n\tstatic VOLVELOCITYGRADIENTX: number;\n\t/**@internal */\n\tstatic VOLVELOCITYGRADIENTY: number;\n\t/**@internal */\n\tstatic VOLVELOCITYGRADIENTZ: number;\n\t/**@internal */\n\tstatic VOLVELOCITYCONSTMAX: number;\n\t/**@internal */\n\tstatic VOLVELOCITYGRADIENTXMAX: number;\n\t/**@internal */\n\tstatic VOLVELOCITYGRADIENTYMAX: number;\n\t/**@internal */\n\tstatic VOLVELOCITYGRADIENTZMAX: number;\n\t/**@internal */\n\tstatic VOLSPACETYPE: number;\n\n\t//ColorOverLifetime\n\t/**@internal */\n\tstatic COLOROVERLIFEGRADIENTALPHAS: number;\n\t/**@internal */\n\tstatic COLOROVERLIFEGRADIENTCOLORS: number;\n\t/**@internal */\n\tstatic COLOROVERLIFEGRADIENTRANGES: number;\n\t/**@internal */\n\tstatic MAXCOLOROVERLIFEGRADIENTALPHAS: number;\n\t/**@internal */\n\tstatic MAXCOLOROVERLIFEGRADIENTCOLORS: number;\n\t/**@internal */\n\tstatic MAXCOLOROVERLIFEGRADIENTRANGES: number;\n\n\t//SizeOverLifetime\n\t/**@internal */\n\tstatic SOLSIZEGRADIENT: number;\n\t/**@internal */\n\tstatic SOLSIZEGRADIENTX: number;\n\t/**@internal */\n\tstatic SOLSIZEGRADIENTY: number;\n\t/**@internal */\n\tstatic SOLSizeGradientZ: number;\n\t/**@internal */\n\tstatic SOLSizeGradientMax: number;\n\t/**@internal */\n\tstatic SOLSIZEGRADIENTXMAX: number;\n\t/**@internal */\n\tstatic SOLSIZEGRADIENTYMAX: number;\n\t/**@internal */\n\tstatic SOLSizeGradientZMAX: number;\n\n\t//RotationOverLifetime\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYCONST: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYCONSTSEPRARATE: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENT: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTX: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTY: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTZ: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYCONSTMAX: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYCONSTMAXSEPRARATE: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTMAX: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTXMAX: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTYMAX: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTZMAX: number;\n\t/**@internal */\n\tstatic ROLANGULARVELOCITYGRADIENTWMAX: number;\n\n\t//TextureSheetAnimation\n\t/**@internal */\n\tstatic TEXTURESHEETANIMATIONCYCLES: number;\n\t/**@internal */\n\tstatic TEXTURESHEETANIMATIONSUBUVLENGTH: number;\n\t/**@internal */\n\tstatic TEXTURESHEETANIMATIONGRADIENTUVS: number;\n\t/**@internal */\n\tstatic TEXTURESHEETANIMATIONGRADIENTMAXUVS: number;\n\n\n\t/**\n\t * init\n\t */\n\tstatic __init__() {\n\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD = Shader3D.getDefineByName(\"SPHERHBILLBOARD\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = Shader3D.getDefineByName(\"STRETCHEDBILLBOARD\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = Shader3D.getDefineByName(\"HORIZONTALBILLBOARD\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = Shader3D.getDefineByName(\"VERTICALBILLBOARD\");\n\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8 = Shader3D.getDefineByName(\"COLORKEYCOUNT_8\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME = Shader3D.getDefineByName(\"COLOROVERLIFETIME\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = Shader3D.getDefineByName(\"RANDOMCOLOROVERLIFETIME\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMECONSTANT\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMECURVE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMERANDOMCONSTANT\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMERANDOMCURVE\");\n\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = Shader3D.getDefineByName(\"TEXTURESHEETANIMATIONCURVE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = Shader3D.getDefineByName(\"TEXTURESHEETANIMATIONRANDOMCURVE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIME\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMESEPERATE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMECONSTANT\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMECURVE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMERANDOMCONSTANTS\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMERANDOMCURVES\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMECURVE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMECURVESEPERATE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVES\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVESSEPERATE\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH = Shader3D.getDefineByName(\"RENDERMODE_MESH\");\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE = Shader3D.getDefineByName(\"SHAPE\");\n\n\n\n\t\t//Base\n\t\tShuriKenParticle3DShaderDeclaration.WORLDPOSITION = Shader3D.propertyNameToID(\"u_WorldPosition\");\n\t\tShuriKenParticle3DShaderDeclaration.WORLDROTATION = Shader3D.propertyNameToID(\"u_WorldRotation\");\n\t\tShuriKenParticle3DShaderDeclaration.POSITIONSCALE = Shader3D.propertyNameToID(\"u_PositionScale\");\n\t\tShuriKenParticle3DShaderDeclaration.SIZESCALE = Shader3D.propertyNameToID(\"u_SizeScale\");\n\t\tShuriKenParticle3DShaderDeclaration.SCALINGMODE = Shader3D.propertyNameToID(\"u_ScalingMode\");\n\t\tShuriKenParticle3DShaderDeclaration.GRAVITY = Shader3D.propertyNameToID(\"u_Gravity\");\n\t\tShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION = Shader3D.propertyNameToID(\"u_ThreeDStartRotation\");\n\t\tShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE = Shader3D.propertyNameToID(\"u_StretchedBillboardLengthScale\");\n\t\tShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE = Shader3D.propertyNameToID(\"u_StretchedBillboardSpeedScale\");\n\t\tShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE = Shader3D.propertyNameToID(\"u_SimulationSpace\");\n\t\tShuriKenParticle3DShaderDeclaration.CURRENTTIME = Shader3D.propertyNameToID(\"u_CurrentTime\");\n\t\tShuriKenParticle3DShaderDeclaration.DRAG = Shader3D.propertyNameToID(\"u_DragConstanct\");\n\n\t\t//VelocityOverLifetime\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST = Shader3D.propertyNameToID(\"u_VOLVelocityConst\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientX\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY = Shader3D.propertyNameToID(\"u_VOLVelocityGradientY\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ = Shader3D.propertyNameToID(\"u_VOLVelocityGradientZ\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONSTMAX = Shader3D.propertyNameToID(\"u_VOLVelocityConstMax\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxX\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxY\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxZ\");\n\t\tShuriKenParticle3DShaderDeclaration.VOLSPACETYPE = Shader3D.propertyNameToID(\"u_VOLSpaceType\");\n\n\t\t//ColorOverLifetime\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientAlphas\");\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientColors\");\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientRanges\");\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientAlphas\");\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientColors\");\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientRanges\");\n\n\t\t//SizeOverLifetime\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT = Shader3D.propertyNameToID(\"u_SOLSizeGradient\");\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX = Shader3D.propertyNameToID(\"u_SOLSizeGradientX\");\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY = Shader3D.propertyNameToID(\"u_SOLSizeGradientY\");\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ = Shader3D.propertyNameToID(\"u_SOLSizeGradientZ\");\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax = Shader3D.propertyNameToID(\"u_SOLSizeGradientMax\");\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxX\");\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxY\");\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxZ\");\n\n\t\t//RotationOverLifetime\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConst\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstSeprarate\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradient\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientX\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientY\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientZ\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstMax\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAXSEPRARATE = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstMaxSeprarate\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMax\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxX\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxY\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxZ\");\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTWMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxW\");\n\n\t\t//TextureSheetAnimation\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES = Shader3D.propertyNameToID(\"u_TSACycles\");\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH = Shader3D.propertyNameToID(\"u_TSASubUVLength\");\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS = Shader3D.propertyNameToID(\"u_TSAGradientUVs\");\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS = Shader3D.propertyNameToID(\"u_TSAMaxGradientUVs\");\n\n\n\n\n\t\tlet uniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION, 'u_WorldPosition'),\n\t\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDROTATION, 'u_WorldRotation');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, 'u_PositionScale');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIZESCALE, 'u_SizeScale');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SCALINGMODE, 'u_ScalingMode');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.GRAVITY, 'u_Gravity');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION, 'u_ThreeDStartRotation');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE, 'u_StretchedBillboardLengthScale');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE, 'u_StretchedBillboardSpeedScale');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE, 'u_SimulationSpace');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.CURRENTTIME, 'u_CurrentTime');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, 'u_ColorOverLifeGradientAlphas');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, 'u_ColorOverLifeGradientColors');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, 'u_ColorOverLifeGradientRanges');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, 'u_MaxColorOverLifeGradientAlphas');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, 'u_MaxColorOverLifeGradientColors');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES, 'u_MaxColorOverLifeGradientRanges');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, 'u_VOLVelocityConst');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, 'u_VOLVelocityGradientX');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, 'u_VOLVelocityGradientY');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, 'u_VOLVelocityGradientZ');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONSTMAX, 'u_VOLVelocityConstMax');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, 'u_VOLVelocityGradientMaxX');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, 'u_VOLVelocityGradientMaxY');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, 'u_VOLVelocityGradientMaxZ');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE, 'u_VOLSpaceType');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, 'u_SOLSizeGradient');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, 'u_SOLSizeGradientX');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, 'u_SOLSizeGradientY');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, 'u_SOLSizeGradientZ');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, 'u_SOLSizeGradientMax');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, 'u_SOLSizeGradientMaxX');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, 'u_SOLSizeGradientMaxY');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, 'u_SOLSizeGradientMaxZ');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, 'u_ROLAngularVelocityConst');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, 'u_ROLAngularVelocityConstSeprarate');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, 'u_ROLAngularVelocityGradient');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, 'u_ROLAngularVelocityGradientX');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, 'u_ROLAngularVelocityGradientY');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, 'u_ROLAngularVelocityGradientZ');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAX, 'u_ROLAngularVelocityConstMax');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAXSEPRARATE, 'u_ROLAngularVelocityConstMaxSeprarate');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, 'u_ROLAngularVelocityGradientMax');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, 'u_ROLAngularVelocityGradientMaxX');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, 'u_ROLAngularVelocityGradientMaxY');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, 'u_ROLAngularVelocityGradientMaxZ');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTWMAX, 'u_ROLAngularVelocityGradientMaxW');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, 'u_TSACycles');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, 'u_TSASubUVLength');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, 'u_TSAGradientUVs');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, 'u_TSAMaxGradientUVs');\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.DRAG, 'u_DragConstanct');\n\t}\n}","import { MathUtil } from \"../../../maths/MathUtil\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { Rand } from \"../../math/Rand\";\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\nimport { FrameOverTime } from \"./module/FrameOverTime\";\nimport { GradientColor } from \"./module/GradientColor\";\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\nimport { GradientSize } from \"./module/GradientSize\";\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\nimport { StartFrame } from \"./module/StartFrame\";\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\n\n/**\n *  @internal\n */\nexport class ShurikenParticleData {\n\t/**@internal */\n\tprivate static _tempVector30: Vector3 = new Vector3();\n\n\tstatic startLifeTime: number;\n\tstatic startColor: Vector4 = new Vector4();\n\tstatic startSize: Float32Array = new Float32Array(3);\n\tstatic startRotation: Float32Array = new Float32Array(3);\n\tstatic startUVInfo: Float32Array = new Float32Array(4);\n\n\tconstructor() {\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static _getStartLifetimeFromGradient(startLifeTimeGradient: GradientDataNumber, emissionTime: number): number {\n\t\tfor (var i: number = 1, n: number = startLifeTimeGradient.gradientCount; i < n; i++) {\n\t\t\tvar key: number = startLifeTimeGradient.getKeyByIndex(i);\n\t\t\tif (key >= emissionTime) {\n\t\t\t\tvar lastKey: number = startLifeTimeGradient.getKeyByIndex(i - 1);\n\t\t\t\tvar age: number = (emissionTime - lastKey) / (key - lastKey);\n\t\t\t\treturn MathUtil.lerp(startLifeTimeGradient.getValueByIndex(i - 1), startLifeTimeGradient.getValueByIndex(i), age)\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"ShurikenParticleData: can't get value foam startLifeTimeGradient.\");\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static _randomInvertRoationArray(rotatonE: Vector3, outE: Vector3, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): void {\n\t\tvar randDic: number;\n\t\tif (rand) {\n\t\t\trand.seed = randomSeeds[6];\n\t\t\trandDic = rand.getFloat();\n\t\t\trandomSeeds[6] = rand.seed;\n\t\t} else {\n\t\t\trandDic = Math.random();\n\t\t}\n\t\tif (randDic < randomizeRotationDirection) {\n\t\t\toutE.x = -rotatonE.x;\n\t\t\toutE.y = -rotatonE.y;\n\t\t\toutE.z = -rotatonE.z;\n\t\t} else {\n\t\t\toutE.x = rotatonE.x;\n\t\t\toutE.y = rotatonE.y;\n\t\t\toutE.z = rotatonE.z;\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static _randomInvertRoation(rotaton: number, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): number {\n\t\tvar randDic: number;\n\t\tif (rand) {\n\t\t\trand.seed = randomSeeds[6];\n\t\t\trandDic = rand.getFloat();\n\t\t\trandomSeeds[6] = rand.seed;\n\t\t} else {\n\t\t\trandDic = Math.random();\n\t\t}\n\t\tif (randDic < randomizeRotationDirection)\n\t\t\trotaton = -rotaton;\n\t\treturn rotaton;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic create(particleSystem: ShurikenParticleSystem, particleRender: ShurikenParticleRenderer): void {\n\t\tvar autoRandomSeed: boolean = particleSystem.autoRandomSeed;\n\t\tvar rand: Rand = particleSystem._rand;\n\t\tvar randomSeeds: Uint32Array = particleSystem._randomSeeds;\n\n\t\t//StartColor\n\t\tswitch (particleSystem.startColorType) {\n\t\t\tcase 0:\n\t\t\t\tvar constantStartColor: Vector4 = particleSystem.startColorConstant;\n\t\t\t\tShurikenParticleData.startColor.x = constantStartColor.x;\n\t\t\t\tShurikenParticleData.startColor.y = constantStartColor.y;\n\t\t\t\tShurikenParticleData.startColor.z = constantStartColor.z;\n\t\t\t\tShurikenParticleData.startColor.w = constantStartColor.w;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, Math.random(), ShurikenParticleData.startColor);\n\t\t\t\t} else {\n\t\t\t\t\trand.seed = randomSeeds[3];\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, rand.getFloat(), ShurikenParticleData.startColor);\n\t\t\t\t\trandomSeeds[3] = rand.seed;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tvar colorOverLifetime: ColorOverLifetime = particleSystem.colorOverLifetime;\n\t\tif (colorOverLifetime && colorOverLifetime.enable) {\n\t\t\tvar color: GradientColor = colorOverLifetime.color;\n\t\t\tswitch (color.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * color.constant.x;\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * color.constant.y;\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * color.constant.z;\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * color.constant.w;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tvar colorRandom: number;\n\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\tcolorRandom = Math.random();\n\t\t\t\t\t} else {\n\t\t\t\t\t\trand.seed = randomSeeds[10];\n\t\t\t\t\t\tcolorRandom = rand.getFloat();\n\t\t\t\t\t\trandomSeeds[10] = rand.seed;\n\t\t\t\t\t}\n\t\t\t\t\tvar minConstantColor: Vector4 = color.constantMin;\n\t\t\t\t\tvar maxConstantColor: Vector4 = color.constantMax;\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * MathUtil.lerp(minConstantColor.x, maxConstantColor.x, colorRandom);\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * MathUtil.lerp(minConstantColor.y, maxConstantColor.y, colorRandom);\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * MathUtil.lerp(minConstantColor.z, maxConstantColor.z, colorRandom);\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * MathUtil.lerp(minConstantColor.w, maxConstantColor.w, colorRandom);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//StartSize\n\t\tvar particleSize: Float32Array = ShurikenParticleData.startSize;\n\t\tswitch (particleSystem.startSizeType) {\n\t\t\tcase 0:\n\t\t\t\tif (particleSystem.threeDStartSize) {\n\t\t\t\t\tvar startSizeConstantSeparate: Vector3 = particleSystem.startSizeConstantSeparate;\n\t\t\t\t\tparticleSize[0] = startSizeConstantSeparate.x;\n\t\t\t\t\tparticleSize[1] = startSizeConstantSeparate.y;\n\t\t\t\t\tparticleSize[2] = startSizeConstantSeparate.z;\n\t\t\t\t} else {\n\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = particleSystem.startSizeConstant;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (particleSystem.threeDStartSize) {\n\t\t\t\t\tvar startSizeConstantMinSeparate: Vector3 = particleSystem.startSizeConstantMinSeparate;\n\t\t\t\t\tvar startSizeConstantMaxSeparate: Vector3 = particleSystem.startSizeConstantMaxSeparate;\n\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, Math.random());\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, Math.random());\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, Math.random());\n\t\t\t\t\t} else {\n\t\t\t\t\t\trand.seed = randomSeeds[4];\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, rand.getFloat());\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, rand.getFloat());\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, rand.getFloat());\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, Math.random());\n\t\t\t\t\t} else {\n\t\t\t\t\t\trand.seed = randomSeeds[4];\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, rand.getFloat());\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar sizeOverLifetime: SizeOverLifetime = particleSystem.sizeOverLifetime;\n\t\tif (sizeOverLifetime && sizeOverLifetime.enable && sizeOverLifetime.size.type === 1) {\n\t\t\tvar size: GradientSize = sizeOverLifetime.size;\n\t\t\tif (size.separateAxes) {\n\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, Math.random());\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, Math.random());\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, Math.random());\n\t\t\t\t} else {\n\t\t\t\t\trand.seed = randomSeeds[11];\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, rand.getFloat());\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, rand.getFloat());\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, rand.getFloat());\n\t\t\t\t\trandomSeeds[11] = rand.seed;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar randomSize: number;\n\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, Math.random());\n\t\t\t\t} else {\n\t\t\t\t\trand.seed = randomSeeds[11];\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, rand.getFloat());\n\t\t\t\t\trandomSeeds[11] = rand.seed;\n\t\t\t\t}\n\t\t\t\tparticleSize[0] = particleSize[0] * randomSize;\n\t\t\t\tparticleSize[1] = particleSize[1] * randomSize;\n\t\t\t\tparticleSize[2] = particleSize[2] * randomSize;\n\t\t\t}\n\t\t}\n\n\t\t//StartRotation//TODO:renderMode2、3模式都不需要旋转，是否移除。\n\t\tvar renderMode: number = particleRender.renderMode;\n\t\tif (renderMode !== 1) {\n\t\t\tswitch (particleSystem.startRotationType) {\n\t\t\t\tcase 0:\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\n\t\t\t\t\t\tvar startRotationConstantSeparate: Vector3 = particleSystem.startRotationConstantSeparate;\n\t\t\t\t\t\tvar randomRotationE: Vector3 = ShurikenParticleData._tempVector30;\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(startRotationConstantSeparate, randomRotationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = randomRotationE.x;\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = randomRotationE.y;\n\t\t\t\t\t\tif (renderMode !== 4)\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -randomRotationE.z;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = randomRotationE.z;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(particleSystem.startRotationConstant, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = 0;\n\t\t\t\t\t\tShurikenParticleData.startRotation[2] = 0;//需要置0,否则上次缓存影响数据。TODO:mesh模式下使用Z,但是这里为什么是X\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\n\t\t\t\t\t\tvar startRotationConstantMinSeparate: Vector3 = particleSystem.startRotationConstantMinSeparate;\n\t\t\t\t\t\tvar startRotationConstantMaxSeparate: Vector3 = particleSystem.startRotationConstantMaxSeparate;\n\t\t\t\t\t\tvar lerpRoationE: Vector3 = ShurikenParticleData._tempVector30;\n\t\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, Math.random());\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, Math.random());\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, Math.random());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, rand.getFloat());\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, rand.getFloat());\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, rand.getFloat());\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(lerpRoationE, lerpRoationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = lerpRoationE.x;\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = lerpRoationE.y;\n\t\t\t\t\t\tif (renderMode !== 4)\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -lerpRoationE.z;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = lerpRoationE.z;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, Math.random()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, rand.getFloat()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//StartLifetime\n\t\tswitch (particleSystem.startLifetimeType) {\n\t\t\tcase 0:\n\t\t\t\tShurikenParticleData.startLifeTime = particleSystem.startLifetimeConstant;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tShurikenParticleData.startLifeTime = ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradient, particleSystem.emissionTime);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, Math.random());\n\t\t\t\t} else {\n\t\t\t\t\trand.seed = randomSeeds[7];\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, rand.getFloat());\n\t\t\t\t\trandomSeeds[7] = rand.seed;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tvar emissionTime: number = particleSystem.emissionTime;\n\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), Math.random());\n\t\t\t\t} else {\n\t\t\t\t\trand.seed = randomSeeds[7];\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), rand.getFloat());\n\t\t\t\t\trandomSeeds[7] = rand.seed;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\n\t\t//StartUV\n\t\tvar textureSheetAnimation: TextureSheetAnimation = particleSystem.textureSheetAnimation;\n\t\tvar enableSheetAnimation: boolean = textureSheetAnimation && textureSheetAnimation.enable;\n\t\tif (enableSheetAnimation) {\n\t\t\tvar title: Vector2 = textureSheetAnimation.tiles;\n\t\t\tvar titleX: number = title.x, titleY: number = title.y;\n\t\t\tvar subU: number = 1.0 / titleX, subV: number = 1.0 / titleY;\n\n\t\t\tvar startFrameCount: number;\n\t\t\tvar startFrame: StartFrame = textureSheetAnimation.startFrame;\n\t\t\tswitch (startFrame.type) {\n\t\t\t\tcase 0://常量模式\n\t\t\t\t\tstartFrameCount = startFrame.constant;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1://随机双常量模式\n\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, Math.random());\n\t\t\t\t\t} else {\n\t\t\t\t\t\trand.seed = randomSeeds[14];\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, rand.getFloat());\n\t\t\t\t\t\trandomSeeds[14] = rand.seed;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar frame: FrameOverTime = textureSheetAnimation.frame;\n\t\t\tvar cycles: number = textureSheetAnimation.cycles;\n\t\t\tswitch (frame.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tstartFrameCount += frame.constant * cycles;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, Math.random()) * cycles;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trand.seed = randomSeeds[15];\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, rand.getFloat()) * cycles;\n\t\t\t\t\t\trandomSeeds[15] = rand.seed;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar startRow: number = 0;//TODO:case 2 没处理\n\t\t\tswitch (textureSheetAnimation.type) {\n\t\t\t\tcase 0://Whole Sheet\n\t\t\t\t\tstartRow = Math.floor(startFrameCount / titleX);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1://Singal Row\n\t\t\t\t\tif (textureSheetAnimation.randomRow) {\n\t\t\t\t\t\tif (autoRandomSeed) {\n\t\t\t\t\t\t\tstartRow = Math.floor(Math.random() * titleY);\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trand.seed = randomSeeds[13];\n\t\t\t\t\t\t\tstartRow = Math.floor(rand.getFloat() * titleY);\n\t\t\t\t\t\t\trandomSeeds[13] = rand.seed;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartRow = textureSheetAnimation.rowIndex;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar startCol: number = Math.floor(startFrameCount % titleX);\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\n\t\t\tShurikenParticleData.startUVInfo[0] = subU;\n\t\t\tShurikenParticleData.startUVInfo[1] = subV;\n\t\t\tShurikenParticleData.startUVInfo[2] = startCol * subU;\n\t\t\tShurikenParticleData.startUVInfo[3] = startRow * subV;\n\t\t} else {\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\n\t\t\tShurikenParticleData.startUVInfo[0] = 1.0;\n\t\t\tShurikenParticleData.startUVInfo[1] = 1.0;\n\t\t\tShurikenParticleData.startUVInfo[2] = 0.0;\n\t\t\tShurikenParticleData.startUVInfo[3] = 0.0;\n\t\t}\n\n\t}\n\n}\n\n\n","import { MathUtil } from \"../../../maths/MathUtil\";\nimport { Resource } from \"../../../resource/Resource\";\nimport { Stat } from \"../../../utils/Stat\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { VertexShurikenParticleBillboard } from \"../../graphics/Vertex/VertexShurikenParticleBillboard\";\nimport { VertexShurikenParticleMesh } from \"../../graphics/Vertex/VertexShurikenParticleMesh\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Rand } from \"../../math/Rand\";\nimport { Mesh } from \"../../resource/models/Mesh\";\nimport { GeometryElement } from \"../GeometryElement\";\nimport { Gradient } from \"../Gradient\";\nimport { IClone } from \"../../../utils/IClone\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { Scene3D } from \"../scene/Scene3D\";\nimport { Transform3D } from \"../Transform3D\";\nimport { Burst } from \"./module/Burst\";\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\nimport { Emission } from \"./module/Emission\";\nimport { FrameOverTime } from \"./module/FrameOverTime\";\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\nimport { GradientColor } from \"./module/GradientColor\";\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\nimport { GradientSize } from \"./module/GradientSize\";\nimport { GradientVelocity } from \"./module/GradientVelocity\";\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\nimport { BaseShape, ParticleSystemShapeType } from \"./module/shape/BaseShape\";\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\nimport { ShurikenParticleData } from \"./ShurikenParticleData\";\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\nimport { SphereShape } from \"./module/shape/SphereShape\";\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\nimport { ConeShape } from \"./module/shape/ConeShape\";\nimport { CircleShape } from \"./module/shape/CircleShape\";\nimport { BoxShape } from \"./module/shape/BoxShape\";\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\n\n/**\n * <code>ShurikenParticleSystem</code> 类用于创建3D粒子数据模板。\n */\nexport class ShurikenParticleSystem extends GeometryElement implements IClone {\n    /** @internal 0:Burst,1:预留,2:StartDelay,3:StartColor,4:StartSize,5:StartRotation,6:randomizeRotationDirection,7:StartLifetime,8:StartSpeed,9:VelocityOverLifetime,10:ColorOverLifetime,11:SizeOverLifetime,12:RotationOverLifetime,13-15:TextureSheetAnimation,16-17:Shape*/\n    static _RANDOMOFFSET: Uint32Array = new Uint32Array([0x23571a3e, 0xc34f56fe, 0x13371337, 0x12460f3b, 0x6aed452e, 0xdec4aea1, 0x96aa4de3, 0x8d2c8431, 0xf3857f6f, 0xe0fbd834, 0x13740583, 0x591bc05c, 0x40eb95e4, 0xbc524e5f, 0xaf502044, 0xa614b381, 0x1034e524, 0xfc524e5f]);\n\n    /** @internal */\n    protected static halfKSqrtOf2: number = 1.42 * 0.5;\n\n    /** @internal */\n    protected static g: number = 9.8;\n\n    /** @internal */\n    static _maxElapsedTime: number = 1.0 / 3.0;\n\n    /**@internal */\n    protected static _tempVector30: Vector3 = new Vector3();\n    /**@internal */\n    protected static _tempVector31: Vector3 = new Vector3();\n    /**@internal */\n    protected static _tempVector32: Vector3 = new Vector3();\n    /**@internal */\n    protected static _tempVector33: Vector3 = new Vector3();\n    /**@internal */\n    protected static _tempVector34: Vector3 = new Vector3();\n    /**@internal */\n    protected static _tempVector35: Vector3 = new Vector3();\n    /**@internal */\n    protected static _tempVector36: Vector3 = new Vector3();\n    /**@internal */\n    protected static _tempVector37: Vector3 = new Vector3();\n    /** @internal */\n    protected static _tempPosition: Vector3 = new Vector3();\n    /** @internal */\n    protected static _tempDirection: Vector3 = new Vector3();\n\n    /**@internal */\n    protected static _type: number = GeometryElement._typeCounter++;\n    /** @internal */\n    _bounds: Bounds = null;\n    /** @internal 重力影响偏移, 用于计算世界包围盒 */\n    _gravityOffset: Vector2 = new Vector2();\n\n    /** @internal */\n    _customBounds: Bounds = null;\n\n    /** @internal */\n    _useCustomBounds: boolean = false;\n\n    /** @internal */\n    protected _owner: Sprite3D = null;\n    /** @internal */\n    protected _ownerRender: ShurikenParticleRenderer = null;\n    /**@internal */\n    protected _vertices: Float32Array = null;\n    /**@internal */\n    protected _floatCountPerVertex: number = 0;\n    /**@internal */\n    protected _startLifeTimeIndex: number = 0;\n    /**@internal */\n    protected _timeIndex: number = 0;\n    /**@internal */\n    protected _simulationUV_Index: number = 0\n    /**@internal */\n    protected _simulateUpdate: boolean = false;\n\n\n    /**@internal */\n    protected _firstActiveElement: number = 0;\n    /**@internal */\n    protected _firstNewElement: number = 0;\n    /**@internal */\n    protected _firstFreeElement: number = 0;\n    /**@internal */\n    protected _firstRetiredElement: number = 0;\n    /**@internal */\n    protected _drawCounter: number = 0;\n    /**@internal 最大粒子数量*/\n    protected _bufferMaxParticles: number = 0;\n    /**@internal */\n    protected _emission: Emission = null;\n    /**@internal */\n    protected _shape: BaseShape = null;\n\n    /**@internal */\n    protected _isEmitting: boolean = false;\n    /**@internal */\n    protected _isPlaying: boolean = false;\n    /**@internal */\n    protected _isPaused: boolean = false;\n    /**@internal */\n    protected _playStartDelay: number = 0;\n    /**@internal 发射的累计时间。*/\n    protected _frameRateTime: number = 0;\n    /**@internal 一次循环内的累计时间。*/\n    protected _emissionTime: number = 0;\n    /**@internal 用来计算时间是否超过发射延迟时间*/\n    protected _totalDelayTime: number = 0;\n    /** @internal 上次发射到当前的移动总距离，每次根据距离发射粒子后清空 */\n    protected _emissionDistance: number = 0;\n    protected _emissionLastPosition: Vector3 = new Vector3();\n    /**@internal */\n    protected _burstsIndex: number = 0;\n    ///**@internal 发射粒子最小时间间隔。*/\n    //protected var _minEmissionTime:Number;\n    /**@internal */\n    protected _velocityOverLifetime: VelocityOverLifetime = null;\n    /**@internal */\n    protected _colorOverLifetime: ColorOverLifetime = null;\n    /**@internal */\n    protected _sizeOverLifetime: SizeOverLifetime = null;\n    /**@internal */\n    protected _rotationOverLifetime: RotationOverLifetime = null;\n    /**@internal */\n    protected _textureSheetAnimation: TextureSheetAnimation = null;\n    /**@internal */\n    protected _startLifetimeType: number = 0;\n    /**@internal */\n    protected _startLifetimeConstant: number = 0;\n    /**@internal */\n    protected _startLifeTimeGradient: GradientDataNumber = null;\n    /**@internal */\n    protected _startLifetimeConstantMin: number = 0;\n    /**@internal */\n    protected _startLifetimeConstantMax: number = 0;\n    /**@internal */\n    protected _startLifeTimeGradientMin: GradientDataNumber = null;\n    /**@internal */\n    protected _startLifeTimeGradientMax: GradientDataNumber = null;\n    /**@internal */\n    protected _maxStartLifetime: number = 0;\n\n    /** @internal */\n    protected _uvLength: Vector2 = new Vector2();//TODO:\n    /** @internal */\n    protected _vertexStride: number = 0;\n    /** @internal */\n    protected _indexStride: number = 0;\n    /**@internal */\n    protected _vertexBuffer: VertexBuffer3D = null;\n    /**@internal */\n    protected _indexBuffer: IndexBuffer3D = null;\n    /** @internal */\n    protected _bufferState: BufferState = new BufferState();\n\n    /**@internal */\n    protected _updateMask: number = 0;\n\n    /**@internal */\n    _currentTime: number = 0;\n    /**@internal */\n    _startUpdateLoopCount: number = 0;\n    /**@internal */\n    _rand: Rand = null;\n    /**@internal */\n    _randomSeeds: Uint32Array = null;\n\n    /**粒子运行的总时长，单位为秒。*/\n    duration: number = 0;\n    /**是否循环。*/\n    looping: boolean = false;\n    /**是否预热。暂不支持*/\n    prewarm: boolean = false;\n    /**开始延迟类型，0为常量模式,1为随机随机双常量模式，不能和prewarm一起使用。*/\n    startDelayType: number = 0;\n    /**开始播放延迟，不能和prewarm一起使用。*/\n    startDelay: number = 0;\n    /**开始播放最小延迟，不能和prewarm一起使用。*/\n    startDelayMin: number = 0;\n    /**开始播放最大延迟，不能和prewarm一起使用。*/\n    startDelayMax: number = 0;\n\n    /**开始速度模式，0为恒定速度，2为两个恒定速度的随机插值。缺少1、3模式*/\n    startSpeedType: number = 0;\n    /**开始速度,0模式。*/\n    startSpeedConstant: number = 0;\n    /**最小开始速度,1模式。*/\n    startSpeedConstantMin: number = 0;\n    /**最大开始速度,1模式。*/\n    startSpeedConstantMax: number = 0;\n\n    /**阻力模式，0为恒定速度，2为两个恒定速度的随机插值*/\n    dragType: number = 0;\n    /**开始速度,0模式。*/\n    dragConstant: number = 0;\n    /**最小开始速度,1模式。*/\n    dragSpeedConstantMin: number = 0;\n    /**最大开始速度,1模式。*/\n    dragSpeedConstantMax: number = 0;\n\n\n\n    /**开始尺寸是否为3D模式。*/\n    threeDStartSize: boolean = false;\n    /**开始尺寸模式,0为恒定尺寸，2为两个恒定尺寸的随机插值。缺少1、3模式和对应的二种3D模式*/\n    startSizeType: number = 0;\n    /**开始尺寸，0模式。*/\n    startSizeConstant: number = 0;\n    /**开始三维尺寸，0模式。*/\n    startSizeConstantSeparate: Vector3 = null;\n    /**最小开始尺寸，2模式。*/\n    startSizeConstantMin: number = 0;\n    /**最大开始尺寸，2模式。*/\n    startSizeConstantMax: number = 0;\n    /**最小三维开始尺寸，2模式。*/\n    startSizeConstantMinSeparate: Vector3 = null;\n    /**最大三维开始尺寸，2模式。*/\n    startSizeConstantMaxSeparate: Vector3 = null;\n\n    /**3D开始旋转。*/\n    threeDStartRotation: boolean = false;\n    /**开始旋转模式,0为恒定尺寸，2为两个恒定旋转的随机插值,缺少2种模式,和对应的四种3D模式。*/\n    startRotationType: number = 0;\n    /**开始旋转，0模式。*/\n    startRotationConstant: number = 0;\n    /**开始三维旋转，0模式。*/\n    startRotationConstantSeparate: Vector3 = null;\n    /**最小开始旋转，1模式。*/\n    startRotationConstantMin: number = 0;\n    /**最大开始旋转，1模式。*/\n    startRotationConstantMax: number = 0;\n    /**最小开始三维旋转，1模式。*/\n    startRotationConstantMinSeparate: Vector3 = null;\n    /**最大开始三维旋转，1模式。*/\n    startRotationConstantMaxSeparate: Vector3 = null;\n\n    /**随机旋转方向，范围为0.0到1.0*/\n    randomizeRotationDirection: number = 0;\n\n    /**开始颜色模式，0为恒定颜色，2为两个恒定颜色的随机插值,缺少2种模式。*/\n    startColorType: number = 0;\n    /**开始颜色，0模式。*/\n    startColorConstant: Vector4 = new Vector4(1, 1, 1, 1);\n    /**最小开始颜色，1模式。*/\n    startColorConstantMin: Vector4 = new Vector4(0, 0, 0, 0);\n    /**最大开始颜色，1模式。*/\n    startColorConstantMax: Vector4 = new Vector4(1, 1, 1, 1);\n\n    /**重力敏感度。*/\n    gravityModifier: number = 0;\n    /**模拟器空间,0为World,1为Local。暂不支持Custom。*/\n    simulationSpace: number = 0;\n    /**粒子的播放速度。 */\n    simulationSpeed: number = 1.0;\n    /**缩放模式，0为Hiercachy,1为Local,2为World。*/\n    scaleMode: number = 1;\n    /**激活时是否自动播放。*/\n    playOnAwake: boolean = false;\n\n    /**随机种子,注:play()前设置有效。*/\n    randomSeed: Uint32Array = null;\n    /**是否使用随机种子。 */\n    autoRandomSeed: boolean = false;\n\n    /**是否为性能模式,性能模式下会延迟粒子释放。*/\n    isPerformanceMode: boolean = false;\n\n    /**最大粒子数。*/\n    get maxParticles(): number {\n        return this._bufferMaxParticles - 1;\n    }\n\n    set maxParticles(value: number) {//TODO:是否要重置其它参数\n        var newMaxParticles: number = value + 1;\n        if (newMaxParticles !== this._bufferMaxParticles) {\n            this._bufferMaxParticles = newMaxParticles;\n            this._initBufferDatas();\n        }\n\n        this._updateParticlesSimulationRestart(0);\n    }\n\n    /**\n     * 获取发射器。\n     */\n    get emission(): Emission {\n        return this._emission;\n    }\n\n\n    /**\n     * 粒子存活个数。\n     */\n    get aliveParticleCount(): number {\n        if (this._firstNewElement >= this._firstRetiredElement)\n            return this._firstNewElement - this._firstRetiredElement;\n        else\n            return this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;\n    }\n\n    /**\n     * 一次循环内的累计时间。\n     */\n    get emissionTime(): number {\n        return this._emissionTime > this.duration ? this.duration : this._emissionTime;\n    }\n\n    /**\n     * 形状。\n     */\n    get shape(): BaseShape {\n        return this._shape;\n    }\n\n    set shape(value: BaseShape) {\n        if (this._shape !== value) {\n            if (value && value.enable)\n                this._ownerRender._shaderValues.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE);\n            else\n                this._ownerRender._shaderValues.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE);\n            this._shape = value;\n        }\n    }\n\n    /**\n     * 是否存活。\n     */\n    get isAlive(): boolean {\n        if (this._isPlaying || this.aliveParticleCount > 0)//TODO:暂时忽略retired\n            return true;\n\n        return false;\n    }\n\n    /**\n     * 是否正在发射。\n     */\n    get isEmitting(): boolean {\n        return this._isEmitting;\n    }\n\n    /**\n     * 是否正在播放。\n     */\n    get isPlaying(): boolean {\n        return this._isPlaying;\n    }\n\n    /**\n     * 是否已暂停。\n     */\n    get isPaused(): boolean {\n        return this._isPaused;\n    }\n\n    /**\n     * 开始生命周期模式,0为固定时间，1为渐变时间，2为两个固定之间的随机插值,3为两个渐变时间的随机插值。\n     */\n    get startLifetimeType(): number {\n        return this._startLifetimeType;\n    }\n\n    set startLifetimeType(value: number) {\n        //if (value !== _startLifetimeType){\n        var i: number, n: number;\n        switch (this.startLifetimeType) {\n            case 0:\n                this._maxStartLifetime = this.startLifetimeConstant;\n                break;\n            case 1:\n                this._maxStartLifetime = -Number.MAX_VALUE;\n                var startLifeTimeGradient: GradientDataNumber = startLifeTimeGradient;\n                for (i = 0, n = startLifeTimeGradient.gradientCount; i < n; i++)\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradient.getValueByIndex(i));\n                break;\n            case 2:\n                this._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);\n                break;\n            case 3:\n                this._maxStartLifetime = -Number.MAX_VALUE;\n                var startLifeTimeGradientMin: GradientDataNumber = startLifeTimeGradientMin;\n                for (i = 0, n = startLifeTimeGradientMin.gradientCount; i < n; i++)\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMin.getValueByIndex(i));\n                var startLifeTimeGradientMax: GradientDataNumber = startLifeTimeGradientMax;\n                for (i = 0, n = startLifeTimeGradientMax.gradientCount; i < n; i++)\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMax.getValueByIndex(i));\n                break;\n        }\n        this._startLifetimeType = value;\n        //}\n    }\n\n    /**\n     * 开始生命周期，0模式,单位为秒。\n     */\n    get startLifetimeConstant(): number {\n        return this._startLifetimeConstant;\n    }\n\n    set startLifetimeConstant(value: number) {\n        if (this._startLifetimeType === 0)\n            this._maxStartLifetime = value;\n        this._startLifetimeConstant = value;\n    }\n\n    /**\n     * 开始渐变生命周期，1模式,单位为秒。\n     */\n    get startLifeTimeGradient(): GradientDataNumber {\n        return this._startLifeTimeGradient;\n    }\n\n    set startLifeTimeGradient(value: GradientDataNumber) {//无法使用if (_startLifeTimeGradient !== value)过滤，同一个GradientDataNumber可能修改了值,因此所有startLifeTime属性都统一处理\n        if (this._startLifetimeType === 1) {\n            this._maxStartLifetime = -Number.MAX_VALUE;\n            for (var i: number = 0, n: number = value.gradientCount; i < n; i++)\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\n        }\n        this._startLifeTimeGradient = value;\n    }\n\n    /**\n     * 最小开始生命周期，2模式,单位为秒。\n     */\n    get startLifetimeConstantMin(): number {\n        return this._startLifetimeConstantMin;\n    }\n\n    set startLifetimeConstantMin(value: number) {\n        if (this._startLifetimeType === 2)\n            this._maxStartLifetime = Math.max(value, this._startLifetimeConstantMax);\n        this._startLifetimeConstantMin = value;\n    }\n\n\n    /**\n     * 最大开始生命周期，2模式,单位为秒。\n     */\n    get startLifetimeConstantMax(): number {\n        return this._startLifetimeConstantMax;\n    }\n\n    set startLifetimeConstantMax(value: number) {\n        if (this._startLifetimeType === 2)\n            this._maxStartLifetime = Math.max(this._startLifetimeConstantMin, value);\n        this._startLifetimeConstantMax = value;\n    }\n\n\n\n    /**\n     * 开始渐变最小生命周期，3模式,单位为秒。\n     */\n    get startLifeTimeGradientMin(): GradientDataNumber {\n        return this._startLifeTimeGradientMin;\n    }\n\n    set startLifeTimeGradientMin(value: GradientDataNumber) {\n        if (this._startLifetimeType === 3) {\n            var i: number, n: number;\n            this._maxStartLifetime = -Number.MAX_VALUE;\n            for (i = 0, n = value.gradientCount; i < n; i++)\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\n            for (i = 0, n = this._startLifeTimeGradientMax.gradientCount; i < n; i++)\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(i));\n        }\n        this._startLifeTimeGradientMin = value;\n    }\n\n    /**\n     * 开始渐变最大生命周期，3模式,单位为秒。\n     */\n    get startLifeTimeGradientMax(): GradientDataNumber {\n        return this._startLifeTimeGradientMax;\n    }\n\n    set startLifeTimeGradientMax(value: GradientDataNumber) {\n        if (this._startLifetimeType === 3) {\n            var i: number, n: number;\n            this._maxStartLifetime = -Number.MAX_VALUE;\n            for (i = 0, n = this._startLifeTimeGradientMin.gradientCount; i < n; i++)\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(i));\n            for (i = 0, n = value.gradientCount; i < n; i++)\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\n        }\n        this._startLifeTimeGradientMax = value;\n    }\n\n    /**\n     * 生命周期速度,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\n     */\n    get velocityOverLifetime(): VelocityOverLifetime {\n        return this._velocityOverLifetime;\n    }\n\n    set velocityOverLifetime(value: VelocityOverLifetime) {\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\n        if (value) {\n            var velocity: GradientVelocity = value.velocity;\n            var velocityType: number = velocity.type;\n            if (value.enable) {\n                switch (velocityType) {\n                    case 0:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\n                        break;\n                    case 1:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\n                        break;\n                    case 2:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\n                        break;\n                    case 3:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\n                        break;\n                }\n\n            } else {\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\n            }\n\n            switch (velocityType) {\n                case 0:\n                    shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, velocity.constant);\n                    break;\n                case 1:\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientX._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientY._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZ._elements);\n                    break;\n                case 2:\n                    shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, velocity.constantMin);\n                    shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONSTMAX, velocity.constantMax);\n                    break;\n                case 3:\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientXMin._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, velocity.gradientXMax._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientYMin._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, velocity.gradientYMax._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZMin._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, velocity.gradientZMax._elements);\n                    break;\n            }\n            shaDat.setInt(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE, value.space);\n        } else {\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\n        }\n        this._velocityOverLifetime = value;\n    }\n\n    /**\n     * 生命周期颜色,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\n     */\n    get colorOverLifetime(): ColorOverLifetime {\n        return this._colorOverLifetime;\n    }\n\n    set colorOverLifetime(value: ColorOverLifetime) {\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\n        if (value) {\n            var color: GradientColor = value.color;\n            if (value.enable) {\n                switch (color.type) {\n                    case 1:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\n                        break;\n                    case 3:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\n                        break;\n                }\n            } else {\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\n            }\n\n            switch (color.type) {\n                case 1:\n                    var gradientColor: Gradient = color.gradient;\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, gradientColor._alphaElements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, gradientColor._rgbElements);\n                    let ranges = gradientColor._keyRanges;\n                    ranges.setValue(1, 0, 1, 0);\n                    for (let index = 0; index < gradientColor.colorRGBKeysCount; index++) {\n                        let colorKey = gradientColor._rgbElements[index * 4];\n                        ranges.x = Math.min(ranges.x, colorKey);\n                        ranges.y = Math.max(ranges.y, colorKey);\n                    }\n                    for (let index = 0; index < gradientColor.colorAlphaKeysCount; index++) {\n                        let alphaKey = gradientColor._alphaElements[index * 2];\n                        ranges.z = Math.min(ranges.z, alphaKey);\n                        ranges.w = Math.max(ranges.w, alphaKey);\n                    }\n                    shaDat.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, ranges);\n\n                    if (gradientColor.maxColorAlphaKeysCount == 8) {\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\n                    }\n                    else {\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\n                    }\n                    break;\n                case 3:\n                    var minGradientColor: Gradient = color.gradientMin;\n                    var maxGradientColor: Gradient = color.gradientMax;\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, minGradientColor._alphaElements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, minGradientColor._rgbElements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, maxGradientColor._alphaElements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, maxGradientColor._rgbElements);\n\n                    let minRanges = minGradientColor._keyRanges;\n                    minRanges.setValue(1, 0, 1, 0);\n                    for (let index = 0; index < minGradientColor.colorRGBKeysCount; index++) {\n                        let colorKey = minGradientColor._rgbElements[index * 4];\n                        minRanges.x = Math.min(minRanges.x, colorKey);\n                        minRanges.y = Math.max(minRanges.y, colorKey);\n                    }\n                    for (let index = 0; index < minGradientColor.colorAlphaKeysCount; index++) {\n                        let alphaKey = minGradientColor._alphaElements[index * 2];\n                        minRanges.z = Math.min(minRanges.z, alphaKey);\n                        minRanges.w = Math.max(minRanges.w, alphaKey);\n                    }\n                    shaDat.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, minRanges);\n                    let maxRanges = maxGradientColor._keyRanges;\n                    maxRanges.setValue(1, 0, 1, 0);\n                    for (let index = 0; index < maxGradientColor.colorRGBKeysCount; index++) {\n                        let colorKey = maxGradientColor._rgbElements[index * 4];\n                        maxRanges.x = Math.min(maxRanges.x, colorKey);\n                        maxRanges.y = Math.max(maxRanges.y, colorKey);\n                    }\n                    for (let index = 0; index < maxGradientColor.colorAlphaKeysCount; index++) {\n                        let alphaKey = maxGradientColor._alphaElements[index * 2];\n                        maxRanges.z = Math.min(maxRanges.z, alphaKey);\n                        maxRanges.w = Math.max(maxRanges.w, alphaKey);\n                    }\n                    shaDat.setVector(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES, maxRanges);\n\n                    let maxkeyCount = Math.max(minGradientColor.maxColorAlphaKeysCount, maxGradientColor.maxColorAlphaKeysCount);\n                    if (maxkeyCount == 8) {\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\n                    }\n                    else {\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\n                    }\n\n                    break;\n            }\n        } else {\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\n\n            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, gradientColor._alphaElements);\n            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, gradientColor._rgbElements);\n            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, minGradientColor._alphaElements);\n            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, minGradientColor._rgbElements);\n            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, maxGradientColor._alphaElements);\n            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, maxGradientColor._rgbElements);\n        }\n        this._colorOverLifetime = value;\n    }\n\n    /**\n     * 生命周期尺寸,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\n     */\n    get sizeOverLifetime(): SizeOverLifetime {\n        return this._sizeOverLifetime;\n    }\n\n    set sizeOverLifetime(value: SizeOverLifetime) {\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\n        if (value) {\n            var size: GradientSize = value.size;\n            var sizeSeparate: boolean = size.separateAxes;\n            var sizeType: number = size.type;\n            if (value.enable) {\n                switch (sizeType) {\n                    case 0:\n                        if (sizeSeparate)\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\n                        else\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\n                        break;\n                    case 2:\n                        if (sizeSeparate)\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\n                        else\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\n                        break;\n                }\n\n            } else {\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\n            }\n\n            switch (sizeType) {\n                case 0:\n                    if (sizeSeparate) {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientX._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientY._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZ._elements);\n                    } else {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradient._elements);\n                    }\n                    break;\n                case 2:\n                    if (sizeSeparate) {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientXMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, size.gradientXMax._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientYMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, size.gradientYMax._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, size.gradientZMax._elements);\n                    } else {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradientMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, size.gradientMax._elements);\n                    }\n                    break;\n            }\n        } else {\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\n        }\n        this._sizeOverLifetime = value;\n    }\n\n    /**\n     * 生命周期旋转,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\n     */\n    get rotationOverLifetime(): RotationOverLifetime {\n        return this._rotationOverLifetime;\n    }\n\n    set rotationOverLifetime(value: RotationOverLifetime) {\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\n        if (value) {\n            var rotation: GradientAngularVelocity = value.angularVelocity;\n\n            if (!rotation)//TODO:兼容代码，RotationOverLifetime未支持全可能为空\n                return\n\n            var rotationSeparate: boolean = rotation.separateAxes;\n            var rotationType: number = rotation.type;\n            if (value.enable) {\n                if (rotationSeparate) {\n                    shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\n                    shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\n                }\n                else {\n                    shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\n                    shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\n                }\n                switch (rotationType) {\n                    case 0:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\n                        break;\n                    case 1:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\n                        break;\n                    case 2:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\n                        break;\n                    case 3:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\n                        break;\n                }\n            } else {\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\n            }\n\n            switch (rotationType) {\n                case 0:\n                    if (rotationSeparate) {\n                        shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, rotation.constantSeparate);\n                    } else {\n                        shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, rotation.constant);\n                    }\n                    break;\n                case 1:\n                    if (rotationSeparate) {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientX._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientY._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZ._elements);\n                    } else {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradient._elements);\n                    }\n                    break;\n                case 2:\n                    if (rotationSeparate) {\n                        shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, rotation.constantMinSeparate);\n                        shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAXSEPRARATE, rotation.constantMaxSeparate);\n                    } else {\n                        shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, rotation.constantMin);\n                        shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAX, rotation.constantMax);\n                    }\n                    break;\n                case 3:\n                    if (rotationSeparate) {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientXMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, rotation.gradientXMax._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientYMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, rotation.gradientYMax._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, rotation.gradientZMax._elements);\n                        //shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTW, rotation.gradientWMin._elements);\n                        //shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTWMAX, rotation.gradientWMax._elements);\n                    } else {\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradientMin._elements);\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, rotation.gradientMax._elements);\n                    }\n                    break;\n            }\n        } else {\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\n        }\n        this._rotationOverLifetime = value;\n    }\n\n    /**\n     * 生命周期纹理动画,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\n     */\n    get textureSheetAnimation(): TextureSheetAnimation {\n        return this._textureSheetAnimation;\n    }\n\n    set textureSheetAnimation(value: TextureSheetAnimation) {\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\n        if (value) {\n            var frameOverTime: FrameOverTime = value.frame;\n            var textureAniType: number = frameOverTime.type;\n            if (value.enable) {\n                switch (textureAniType) {\n                    case 1:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\n                        break;\n                    case 3:\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\n                        break;\n\n                }\n            } else {\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\n                shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\n            }\n\n            if (textureAniType === 1 || textureAniType === 3) {\n                shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, value.cycles);\n                var title: Vector2 = value.tiles;\n                var _uvLengthE: Vector2 = this._uvLength;\n                _uvLengthE.x = 1.0 / title.x;\n                _uvLengthE.y = 1.0 / title.y;\n                shaDat.setVector2(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);\n            }\n            switch (textureAniType) {\n                case 1:\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeData._elements);\n                    break;\n                case 3:\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeDataMin._elements);\n                    shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, frameOverTime.frameOverTimeDataMax._elements);\n                    break;\n            }\n\n        } else {\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\n            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\n        }\n        this._textureSheetAnimation = value;\n    }\n\n\n\n    constructor(render: ShurikenParticleRenderer, meshTopology: MeshTopology = MeshTopology.Triangles, drawType: DrawType = DrawType.DrawElement) {\n        super(meshTopology, drawType);\n        this.indexFormat = IndexFormat.UInt16;\n\n        this._firstActiveElement = 0;\n        this._firstNewElement = 0;\n        this._firstFreeElement = 0;\n        this._firstRetiredElement = 0;\n\n        this._owner = render.owner as Sprite3D;\n        this._ownerRender = render;\n        this._useCustomBounds = false;\n\n        this._currentTime = 0;\n        this._bounds = new Bounds(new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE));\n        this.bufferState = this._bufferState = new BufferState();\n        this._isEmitting = false;\n        this._isPlaying = false;\n        this._isPaused = false;\n        this._burstsIndex = 0;\n        this._frameRateTime = 0;\n        this._emissionTime = 0;\n        this._totalDelayTime = 0;\n        this._simulateUpdate = false;\n\n        this._bufferMaxParticles = 1;\n        this.duration = 5.0;\n        this.looping = true;\n        this.prewarm = false;\n        this.startDelayType = 0;\n        this.startDelay = 0.0;\n        this.startDelayMin = 0.0;\n        this.startDelayMax = 0.0;\n\n        this._startLifetimeType = 0;\n        this._startLifetimeConstant = 5.0;\n        this._startLifeTimeGradient = new GradientDataNumber();\n        this._startLifetimeConstantMin = 0.0;\n        this._startLifetimeConstantMax = 5.0;\n        this._startLifeTimeGradientMin = new GradientDataNumber();\n        this._startLifeTimeGradientMax = new GradientDataNumber();\n        this._maxStartLifetime = 5.0;//_startLifetimeType默认为0，_startLifetimeConstant为5.0,因此该值为5.0\n\n        this.startSpeedType = 0;\n        this.startSpeedConstant = 5.0;\n        this.startSpeedConstantMin = 0.0;\n        this.startSpeedConstantMax = 5.0;\n\n        //drag\n        this.dragType = 0;\n        this.dragConstant = 0;\n        this.dragSpeedConstantMin = 0;\n        this.dragSpeedConstantMax = 0;\n\n        this.threeDStartSize = false;\n        this.startSizeType = 0;\n        this.startSizeConstant = 1;\n        this.startSizeConstantSeparate = new Vector3(1, 1, 1);\n        this.startSizeConstantMin = 0;\n        this.startSizeConstantMax = 1;\n        this.startSizeConstantMinSeparate = new Vector3(0, 0, 0);\n        this.startSizeConstantMaxSeparate = new Vector3(1, 1, 1);\n\n        this.threeDStartRotation = false;\n        this.startRotationType = 0;\n        this.startRotationConstant = 0;\n        this.startRotationConstantSeparate = new Vector3(0, 0, 0);\n        this.startRotationConstantMin = 0.0;\n        this.startRotationConstantMax = 0.0;\n        this.startRotationConstantMinSeparate = new Vector3(0, 0, 0);\n        this.startRotationConstantMaxSeparate = new Vector3(0, 0, 0);\n\n        this.gravityModifier = 0.0;\n        this.simulationSpace = 1;\n        this.scaleMode = 1;\n        this.playOnAwake = true;\n        this._rand = new Rand(0);\n        this.autoRandomSeed = true;\n        this.randomSeed = new Uint32Array(1);\n        this._randomSeeds = new Uint32Array(ShurikenParticleSystem._RANDOMOFFSET.length);\n        this.isPerformanceMode = true;\n\n        this._emission = new Emission();\n        this._emission.enable = true;\n        //set GeometryElement\n\n    }\n\n    /**\n     * @internal\n     */\n    _getVertexBuffer(index: number = 0): VertexBuffer3D {\n        if (index === 0)\n            return this._vertexBuffer;\n        else\n            return null;\n    }\n\n    /**\n     * @internal\n     */\n    _getIndexBuffer(): IndexBuffer3D {\n        return this._indexBuffer;\n    }\n\n    /**\n     * @internal\n     */\n    _generateBounds(): void {\n        var particleRender: ShurikenParticleRenderer = this._ownerRender;\n        var boundsMin: Vector3 = this._bounds.getMin();\n        var boundsMax: Vector3 = this._bounds.getMax();\n\n        // lifeTime\n        var time: number = 0;\n        switch (this.startLifetimeType) {\n            case 0: // 固定时间\n                time = this._startLifetimeConstant;\n                break;\n            case 2: // 两个固定时间随机值\n                time = this._startLifetimeConstantMax;\n                break;\n            case 1: // 渐变时间\n            case 3: // 两个渐变时间随机值\n            default:\n                // todo 不支持模式\n                break;\n        }\n\n        // speed\n        var speedOrigan: number = 0;\n        switch (this.startSpeedType) {\n            case 0: // 恒定速度\n                speedOrigan = this.startSpeedConstant;\n                break;\n            case 2: // 两个固定值间\n                speedOrigan = this.startSpeedConstantMax;\n                break;\n            case 1:\n            case 3:\n            default:\n                // todo 不支持模式\n                break;\n        }\n\n        // size\n        var maxSizeScale = 0;\n        if (this.threeDStartSize) {\n            switch (this.startSizeType) {\n                case 0: // 恒定尺寸\n                    maxSizeScale = Math.max(this.startSizeConstantSeparate.x, this.startSizeConstantSeparate.y, this.startSizeConstantSeparate.z);\n                    break;\n                case 2: // 两个固定尺寸之间\n                    maxSizeScale = Math.max(this.startSizeConstantMaxSeparate.x, this.startSizeConstantMaxSeparate.y, this.startSizeConstantMaxSeparate.z);\n                    break;\n                case 1:\n                case 3:\n                default:\n                    // todo 不支持模式\n                    break;\n            }\n        }\n        else {\n            switch (this.startSizeType) {\n                case 0: // 恒定尺寸\n                    maxSizeScale = this.startSizeConstant;\n                    break;\n                case 2: // 两个固定尺寸之间\n                    maxSizeScale = this.startSizeConstantMax;\n                    break;\n                case 1:\n                case 3:\n                default:\n                    // todo 不支持模式\n                    break;\n            }\n        }\n\n        // shape\n        var zDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector30;\n        var fDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector31;\n        var zEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector32;\n        var fEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector33;\n\n        zDirectionSpeed.setValue(0, 0, 1);\n        fDirectionSpeed.setValue(0, 0, 0);\n        zEmisionOffsetXYZ.setValue(0, 0, 0);\n        fEmisionOffsetXYZ.setValue(0, 0, 0);\n\n        if (this.shape && this.shape.enable) {\n            switch (this.shape.shapeType) {\n                case ParticleSystemShapeType.Sphere:\n                    var sphere: SphereShape = <SphereShape>this.shape;\n                    zDirectionSpeed.setValue(1, 1, 1);\n                    fDirectionSpeed.setValue(1, 1, 1);\n                    zEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\n                    fEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\n                    break;\n                case ParticleSystemShapeType.Hemisphere:\n                    var hemiShpere: HemisphereShape = <HemisphereShape>this.shape;\n                    zDirectionSpeed.setValue(1, 1, 1);\n                    fDirectionSpeed.setValue(1, 1, 1);\n                    zEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, hemiShpere.radius);\n                    fEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, 0.0);\n                    break;\n                case ParticleSystemShapeType.Cone:\n                    var cone: ConeShape = <ConeShape>this.shape;\n                    // Base || BaseShell\n                    if (cone.emitType == 0 || cone.emitType == 1) {\n                        // todo angle define\n                        // var angle: number = cone.angle * Math.PI / 180;\n                        var angle: number = cone.angle;\n                        var sinAngle: number = Math.sin(angle);\n                        zDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\n                        fDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\n                        zEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\n                        fEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\n                        break;\n                    }\n                    // Volume || VolumeShell\n                    else if (cone.emitType == 2 || cone.emitType == 3) {\n                        // var angle: number = cone.angle * Math.PI / 180;\n                        var angle: number = cone.angle;\n                        var sinAngle: number = Math.sin(angle);\n                        var coneLength: number = cone.length;\n                        zDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\n                        fDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\n                        var tanAngle: number = Math.tan(angle);\n                        var rPLCT: number = cone.radius + coneLength * tanAngle;\n                        zEmisionOffsetXYZ.setValue(rPLCT, rPLCT, coneLength);\n                        fEmisionOffsetXYZ.setValue(rPLCT, rPLCT, 0.0);\n                    }\n                    break;\n                case ParticleSystemShapeType.Box:\n                    var box: BoxShape = <BoxShape>this.shape;\n                    if (this.shape.randomDirection != 0) {\n                        zDirectionSpeed.setValue(1, 1, 1);\n                        fDirectionSpeed.setValue(1, 1, 1);\n                    }\n                    zEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\n                    fEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\n                    break;\n                case ParticleSystemShapeType.Circle:\n                    var circle: CircleShape = <CircleShape>this.shape;\n                    zDirectionSpeed.setValue(1, 1, 1);\n                    fDirectionSpeed.setValue(1, 1, 1);\n                    zEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\n                    fEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // size\n        var meshSize: number = 0;\n        // 是否是 mesh 模式\n        var meshMode: boolean = particleRender.renderMode == 4;\n        switch (particleRender.renderMode) {\n            case 0: // billboard\n            case 1:\n            case 2:\n            case 3:\n                meshSize = ShurikenParticleSystem.halfKSqrtOf2;// Math.sqrt(2) / 2.0;\n                break;\n            case 4: // mesh\n                var meshBounds: Bounds = particleRender.mesh.bounds;\n                meshSize = Math.sqrt(Math.pow(meshBounds.getExtent().x, 2.0) + Math.pow(meshBounds.getExtent().y, 2.0) + Math.pow(meshBounds.getExtent().z, 2.0));\n                break;\n            default:\n                break;\n        }\n\n        var endSizeOffset: Vector3 = ShurikenParticleSystem._tempVector36;\n        endSizeOffset.setValue(1, 1, 1);\n        if (this.sizeOverLifetime && this.sizeOverLifetime.enable) {\n            var gradientSize: GradientSize = this.sizeOverLifetime.size;\n            var maxSize: number = gradientSize.getMaxSizeInGradient(meshMode);\n\n            endSizeOffset.setValue(maxSize, maxSize, maxSize);\n        }\n\n        var offsetSize: number = meshSize * maxSizeScale;\n        Vector3.scale(endSizeOffset, offsetSize, endSizeOffset);\n\n        // var distance: number = speedOrigan * time;\n        var speedZOffset: Vector3 = ShurikenParticleSystem._tempVector34;\n        var speedFOffset: Vector3 = ShurikenParticleSystem._tempVector35;\n\n        if (speedOrigan > 0) {\n            Vector3.scale(zDirectionSpeed, speedOrigan, speedZOffset);\n            Vector3.scale(fDirectionSpeed, speedOrigan, speedFOffset);\n        }\n        else {\n            Vector3.scale(zDirectionSpeed, -speedOrigan, speedFOffset);\n            Vector3.scale(fDirectionSpeed, -speedOrigan, speedZOffset);\n        }\n\n        if (this.velocityOverLifetime && this.velocityOverLifetime.enable) {\n            var gradientVelocity: GradientVelocity = this.velocityOverLifetime.velocity;\n            var velocitySpeedOffset: Vector3 = ShurikenParticleSystem._tempVector37;\n            velocitySpeedOffset.setValue(0, 0, 0);\n            switch (gradientVelocity.type) {\n                case 0: // 常量模式\n                    gradientVelocity.constant.cloneTo(velocitySpeedOffset);\n                    break;\n                case 2: // 随机双常量模式\n                    gradientVelocity.constantMax.cloneTo(velocitySpeedOffset);\n                    break;\n                case 1: // 曲线模式\n                    // todo 获取 曲线最大值\n                    var curveX: number = gradientVelocity.gradientX.getAverageValue();\n                    var curveY: number = gradientVelocity.gradientY.getAverageValue();\n                    var curveZ: number = gradientVelocity.gradientZ.getAverageValue();\n                    velocitySpeedOffset.setValue(curveX, curveY, curveZ);\n                    break;\n                case 3: // 随机双曲线模式\n                    var xMax: number = gradientVelocity.gradientXMax.getAverageValue();\n                    var yMax: number = gradientVelocity.gradientYMax.getAverageValue();\n                    var zMax: number = gradientVelocity.gradientZMax.getAverageValue();\n                    velocitySpeedOffset.setValue(xMax, yMax, zMax);\n                    break;\n                default:\n                    break;\n            }\n\n            // 速度空间 world\n            if (this.velocityOverLifetime.space == 1) {\n                Vector3.transformV3ToV3(velocitySpeedOffset, this._owner.transform.worldMatrix, velocitySpeedOffset);\n            }\n\n            Vector3.add(speedZOffset, velocitySpeedOffset, speedZOffset);\n            Vector3.subtract(speedFOffset, velocitySpeedOffset, speedFOffset);\n\n            Vector3.max(speedZOffset, Vector3.ZERO, speedZOffset);\n            Vector3.max(speedFOffset, Vector3.ZERO, speedFOffset);\n        }\n\n        Vector3.scale(speedZOffset, time, speedZOffset);\n        Vector3.scale(speedFOffset, time, speedFOffset);\n\n        //gravity重力值\n        var gravity: number = this.gravityModifier;\n        if (gravity != 0) {\n            // 记录重力影响偏移\n            var gravityOffset: number = 0.5 * ShurikenParticleSystem.g * gravity * time * time;\n\n            var speedZOffsetY = speedZOffset.y - gravityOffset;\n            var speedFOffsetY = speedFOffset.y + gravityOffset;\n\n            speedZOffsetY = speedZOffsetY > 0 ? speedZOffsetY : 0;\n            speedFOffsetY = speedFOffsetY > 0 ? speedFOffsetY : 0;\n\n            this._gravityOffset.setValue(speedZOffset.y - speedZOffsetY, speedFOffsetY - speedFOffset.y);\n        }\n\n        // speedOrigan * directionSpeed * time + directionoffset + size * maxsizeScale\n        Vector3.add(speedZOffset, endSizeOffset, boundsMax);\n        Vector3.add(boundsMax, zEmisionOffsetXYZ, boundsMax);\n\n        Vector3.add(speedFOffset, endSizeOffset, boundsMin);\n        Vector3.add(boundsMin, fEmisionOffsetXYZ, boundsMin);\n        Vector3.scale(boundsMin, -1, boundsMin);\n\n        this._bounds.setMin(boundsMin);\n        this._bounds.setMax(boundsMax);\n    }\n\n    /**\n     * 设置 自定义 包围盒\n     */\n    get customBounds(): Bounds {\n        return this._customBounds;\n    }\n\n    set customBounds(value: Bounds) {\n        if (value) {\n            this._useCustomBounds = true;\n            if (!this._customBounds) {\n                this._customBounds = new Bounds(new Vector3(), new Vector3());\n                this._ownerRender.geometryBounds = this._customBounds;\n            }\n            this._customBounds = value;\n\n        }\n        else {\n            this._useCustomBounds = false;\n            this._customBounds = null;\n            this._ownerRender.geometryBounds = null;\n        }\n\n\n    }\n\n    /**\n     * @internal\n     */\n    _simulationSupported(): boolean {\n\n        if (this.simulationSpace == 0 && this.emission.emissionRateOverDistance > 0) {\n            return false;\n        }\n\n        // todo other propertys break procedural \n\n        return true;\n    }\n\n    /**\n     * @internal\n     * 计算粒子更新时间\n     */\n    protected _updateEmission(): void {\n        if (!this.isAlive)\n            return;\n        if (this._simulateUpdate) {\n            this._simulateUpdate = false;\n        }\n        else {\n            var elapsedTime: number = ((this._startUpdateLoopCount !== Stat.loopCount && !this._isPaused) && (<Scene3D>this._owner._scene)) ? ((<Scene3D>this._owner._scene)).timer._delta / 1000.0 : 0;\n            elapsedTime = Math.min(ShurikenParticleSystem._maxElapsedTime, elapsedTime * this.simulationSpeed);\n            this._updateParticles(elapsedTime);\n        }\n    }\n\n    /**\n     * @internal\n     * 传入粒子间隔时间，更新粒子状态\n     */\n    protected _updateParticles(elapsedTime: number): void {\n        if (this._ownerRender.renderMode === 4 && !this._ownerRender.mesh)//renderMode=4且mesh为空时不更新\n            return;\n\n        this._currentTime += elapsedTime;//计算目前粒子播放时间啊\n        this._retireActiveParticles();\n        this._freeRetiredParticles();\n\n        //if (_firstActiveElement === _firstFreeElement){\n        //_frameRateTime = 0//TODO:是否一起置零\n        //_currentTime = 0;\n        //}\n        //if (_firstRetiredElement === _firstActiveElement)\n        //_drawCounter = 0;\n\n        this._totalDelayTime += elapsedTime;\n        if (this._totalDelayTime < this._playStartDelay) {\n            return;\n        }\n\n\n        if (this._emission.enable && this._isEmitting && !this._isPaused) {\n            this._advanceTime(elapsedTime, this._currentTime);\n            if (this.emission.emissionRateOverDistance > 0) {\n                this._advanceDistance(this._currentTime);\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    protected _updateParticlesSimulationRestart(time: number): void {\n        this._firstActiveElement = 0;\n        this._firstNewElement = 0;\n        this._firstFreeElement = 0;\n        this._firstRetiredElement = 0;\n\n        this._burstsIndex = 0;\n        this._frameRateTime = time;//TOD0:零还是time待 验证\n        this._emissionTime = 0;\n        this._emissionDistance = 0;\n        this._totalDelayTime = 0;\n        this._currentTime = time;\n\n\n        var delayTime: number = time;\n        if (delayTime < this._playStartDelay) {\n            this._totalDelayTime = delayTime;\n            return;\n        }\n\n        if (this._emission.enable) {\n            this._advanceTime(time, time);//TODO:如果time，time均为零brust无效\n            if (this.emission.emissionRateOverDistance > 0) {\n                this._advanceDistance(this._currentTime);\n            }\n        }\n    }\n\n\n    /**\n     * @internal\n     */\n    protected _retireActiveParticles(): void {\n        const epsilon: number = 0.0001;\n        while (this._firstActiveElement != this._firstNewElement) {\n            var index: number = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride;\n            var timeIndex: number = index + this._timeIndex;//11为Time\n\n            var particleAge: number = this._currentTime - this._vertices[timeIndex];\n            if (particleAge + epsilon < this._vertices[index + this._startLifeTimeIndex]/*_maxLifeTime*/)//7为真实lifeTime,particleAge>0为生命周期为负时\n                break;\n\n            this._vertices[timeIndex] = this._drawCounter;\n            this._firstActiveElement++;\n            if (this._firstActiveElement >= this._bufferMaxParticles)\n                this._firstActiveElement = 0;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    protected _freeRetiredParticles(): void {\n        while (this._firstRetiredElement != this._firstActiveElement) {\n            var age: number = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];//11为Time\n            //TODO这里会有什么bug\n            if (false)\n                if (age < 3)//GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\n                    break;\n\n            this._firstRetiredElement++;\n            if (this._firstRetiredElement >= this._bufferMaxParticles)\n                this._firstRetiredElement = 0;\n        }\n    }\n\n    /**\n     * @internal5\n     * 增加爆炸粒子数量\n     */\n    protected _burst(fromTime: number, toTime: number): number {\n        var totalEmitCount: number = 0;\n        var bursts: Burst[] = this._emission._bursts;\n        for (var n: number = bursts.length; this._burstsIndex < n; this._burstsIndex++) {//TODO:_burstsIndex问题\n            var burst: Burst = bursts[this._burstsIndex];\n            var burstTime: number = burst.time;\n            if (fromTime <= burstTime && burstTime < toTime) {\n                var emitCount: number;\n                if (this.autoRandomSeed) {\n                    emitCount = MathUtil.lerp(burst.minCount, burst.maxCount, Math.random());\n                } else {\n                    this._rand.seed = this._randomSeeds[0];\n                    emitCount = MathUtil.lerp(burst.minCount, burst.maxCount, this._rand.getFloat());\n                    this._randomSeeds[0] = this._rand.seed;\n                }\n                totalEmitCount += emitCount;\n            } else {\n                break;\n            }\n        }\n        return totalEmitCount;\n    }\n\n    /**\n     * @internal\n     */\n    protected _advanceTime(elapsedTime: number, emitTime: number): void {\n        var i: number;\n        var lastEmissionTime: number = this._emissionTime;\n        this._emissionTime += elapsedTime;\n        var totalEmitCount: number = 0;\n        if (this._emissionTime > this.duration) {\n            if (this.looping) {//TODO:有while\n                totalEmitCount += this._burst(lastEmissionTime, this._emissionTime);//使用_emissionTime代替duration，否则无法触发time等于duration的burst //爆裂剩余未触发的//TODO:是否可以用_playbackTime代替计算，不必结束再爆裂一次。//TODO:待确认是否累计爆裂\n                this._emissionTime -= this.duration;\n                this._burstsIndex = 0;\n                totalEmitCount += this._burst(0, this._emissionTime);\n            } else {\n                totalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\n                for (i = 0; i < totalEmitCount; i++)\n                    this.emit(emitTime);\n\n                this._isPlaying = false;\n                this.stop();\n                return;\n            }\n        } else {\n            totalEmitCount += this._burst(lastEmissionTime, this._emissionTime);\n        }\n        //粒子的增加数量，不能超过maxParticles\n        totalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\n        for (i = 0; i < totalEmitCount; i++)\n            this.emit(emitTime);\n        //粒子发射速率\n        var emissionRate: number = this.emission.emissionRate;\n        if (emissionRate > 0) {\n            //每多少秒发射一个粒子\n            var minEmissionTime: number = 1 / emissionRate;\n            this._frameRateTime += minEmissionTime;\n            this._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime;//大于最大声明周期的粒子一定会死亡，所以直接略过,TODO:是否更换机制\n            while (this._frameRateTime <= emitTime) {\n                if (this.emit(this._frameRateTime))\n                    this._frameRateTime += minEmissionTime;\n                else\n                    break;\n            }\n            this._frameRateTime = Math.floor(emitTime / minEmissionTime) * minEmissionTime;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    protected _advanceDistance(emitTime: number): void {\n        let position = this._owner.transform.position;\n        let offsetDistance: number = Vector3.distance(position, this._emissionLastPosition);\n\n        let rateOverDistance = this.emission.emissionRateOverDistance;\n\n        let distance = this._emissionDistance + offsetDistance;\n\n        let ed = 1.0 / rateOverDistance;\n        if (distance > ed) {\n            let emitCount = distance * rateOverDistance;\n            emitCount = Math.floor(emitCount);\n            emitCount = Math.min(this.maxParticles - this.aliveParticleCount, emitCount);\n            for (let index = 0; index < emitCount; index++) {\n                this.emit(emitTime);\n            }\n            // console.log(\"emission distance: \", distance, \", count: \", emitCount);\n\n            this._emissionDistance = 0;\n        }\n        else {\n            this._emissionDistance = distance;\n        }\n\n        position.cloneTo(this._emissionLastPosition);\n    }\n\n    /**\n     * @internal\n     */\n    _initBufferDatas(): void {\n        if (this._vertexBuffer) {//修改了maxCount以及renderMode以及Mesh等需要清空\n            var memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer.indexCount * 2;\n            this._vertexBuffer.destroy();\n            this._indexBuffer.destroy();\n            Resource._addMemory(-memorySize, -memorySize);\n            //TODO:some time use clone will cause this call twice(from 'maxParticleCount' and 'renderMode'),this should optimization rewrite with special clone fun.\n        }\n        var render: ShurikenParticleRenderer = this._ownerRender;\n        var renderMode: number = render.renderMode;\n\n        if (renderMode !== -1 && this.maxParticles > 0) {\n            var indices: Uint16Array, i: number, j: number, m: number, indexOffset: number, perPartOffset: number, vertexDeclaration: VertexDeclaration;\n            var vbMemorySize: number = 0, memorySize: number = 0;\n            var mesh: Mesh = render.mesh;\n            if (renderMode === 4) {\n                if (mesh) {\n                    // var vertexBufferCount: number = mesh._vertexBuffers.length;\n                    // if (vertexBufferCount > 1) {\n                    // \tthrow new Error(\"ShurikenParticleSystem: submesh Count mesh be One or all subMeshes have the same vertexDeclaration.\");\n                    // } else {\n                    vertexDeclaration = VertexShurikenParticleMesh.vertexDeclaration;\n                    this._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\n                    this._simulationUV_Index = vertexDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\n                    this._startLifeTimeIndex = 12;\n                    this._timeIndex = 16;\n                    this._vertexStride = mesh._vertexCount;\n                    var totalVertexCount: number = this._bufferMaxParticles * this._vertexStride;\n                    var vbCount: number = Math.floor(totalVertexCount / 65535) + 1;\n                    var lastVBVertexCount: number = totalVertexCount % 65535;\n                    if (vbCount > 1) {//TODO:随后支持\n                        throw new Error(\"ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.\");\n                    }\n\n                    vbMemorySize = vertexDeclaration.vertexStride * lastVBVertexCount;\n                    this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vbMemorySize, BufferUsage.Dynamic, false);\n                    this._vertexBuffer.vertexDeclaration = vertexDeclaration;\n                    this._vertices = new Float32Array(this._floatCountPerVertex * lastVBVertexCount);\n\n                    // if (render.renderMode == 4) {\n                    // \tthis.initVertexWithMesh(this._vertices, mesh);\n                    // }\n\n                    this._indexStride = mesh._indexBuffer.indexCount;\n                    var indexDatas: Uint16Array = mesh._indexBuffer.getData();\n                    var indexCount: number = this._bufferMaxParticles * this._indexStride;\n                    this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indexCount, BufferUsage.Static, false);\n                    indices = new Uint16Array(indexCount);\n\n                    memorySize = vbMemorySize + indexCount * 2;\n\n                    indexOffset = 0;\n                    for (i = 0; i < this._bufferMaxParticles; i++) {\n                        var indexValueOffset: number = i * this._vertexStride;\n                        for (j = 0, m = indexDatas.length; j < m; j++)\n                            indices[indexOffset++] = indexValueOffset + indexDatas[j];\n                    }\n                    this._indexBuffer.setData(indices);\n                    this._bufferState.applyState([this._vertexBuffer], this._indexBuffer);\n                    this.bufferState = this._bufferState;\n                }\n            } else {\n                vertexDeclaration = VertexShurikenParticleBillboard.vertexDeclaration;\n                this._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\n                this._startLifeTimeIndex = 7;\n                this._simulationUV_Index = vertexDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\n                this._timeIndex = 11;\n                this._vertexStride = 4;\n                vbMemorySize = vertexDeclaration.vertexStride * this._bufferMaxParticles * this._vertexStride;\n                this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vbMemorySize, BufferUsage.Dynamic, false);\n                this._vertexBuffer.vertexDeclaration = vertexDeclaration;\n                this._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride);\n\n\n                for (i = 0; i < this._bufferMaxParticles; i++) {\n                    perPartOffset = i * this._floatCountPerVertex * this._vertexStride;\n                    this._vertices[perPartOffset] = -0.5;\n                    this._vertices[perPartOffset + 1] = -0.5;\n                    this._vertices[perPartOffset + 2] = 0;\n                    this._vertices[perPartOffset + 3] = 1;\n\n                    perPartOffset += this._floatCountPerVertex;\n                    this._vertices[perPartOffset] = 0.5;\n                    this._vertices[perPartOffset + 1] = -0.5;\n                    this._vertices[perPartOffset + 2] = 1;\n                    this._vertices[perPartOffset + 3] = 1;\n\n                    perPartOffset += this._floatCountPerVertex\n                    this._vertices[perPartOffset] = 0.5;\n                    this._vertices[perPartOffset + 1] = 0.5;\n                    this._vertices[perPartOffset + 2] = 1;\n                    this._vertices[perPartOffset + 3] = 0;\n\n                    perPartOffset += this._floatCountPerVertex\n                    this._vertices[perPartOffset] = -0.5;\n                    this._vertices[perPartOffset + 1] = 0.5;\n                    this._vertices[perPartOffset + 2] = 0;\n                    this._vertices[perPartOffset + 3] = 0;\n                }\n\n                this._indexStride = 6;\n                this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, this._bufferMaxParticles * 6, BufferUsage.Static, false);\n                indices = new Uint16Array(this._bufferMaxParticles * 6);\n                for (i = 0; i < this._bufferMaxParticles; i++) {\n                    indexOffset = i * 6;\n                    var firstVertex: number = i * this._vertexStride, secondVertex: number = firstVertex + 2;\n                    indices[indexOffset++] = firstVertex;\n                    indices[indexOffset++] = secondVertex;\n                    indices[indexOffset++] = firstVertex + 1;\n                    indices[indexOffset++] = firstVertex;\n                    indices[indexOffset++] = firstVertex + 3;\n                    indices[indexOffset++] = secondVertex;\n                }\n                this._indexBuffer.setData(indices);\n\n                memorySize = vbMemorySize + this._bufferMaxParticles * 6 * 2;\n                this._bufferState.applyState([this._vertexBuffer], this._indexBuffer);\n                this.bufferState = this._bufferState;\n            }\n\n            Resource._addMemory(memorySize, memorySize);\n        }\n    }\n\n    /**\n     * @internal\n     * @override\n     */\n    destroy(): void {\n        super.destroy();\n        if (this._vertexBuffer) {\n            var memorySize: number = this._vertexBuffer._byteLength;\n            Resource._addMemory(-memorySize, -memorySize);\n            this._vertexBuffer.destroy();\n            this._vertexBuffer = null;\n        }\n        if (this._indexBuffer) {\n            var memorySize: number = this._indexBuffer._byteLength;\n            Resource._addMemory(-memorySize, -memorySize);\n            this._indexBuffer.destroy();\n            this._indexBuffer = null;\n        }\n        this._emission.destroy();\n        this._bounds = null;\n        this._customBounds = null;\n        this._bufferState = null;\n        this._owner = null;\n        this._vertices = null;\n        this._indexBuffer = null;\n        this._emission = null;\n        this._shape = null;\n        this.startLifeTimeGradient = null;\n        this.startLifeTimeGradientMin = null;\n        this.startLifeTimeGradientMax = null;\n        this.startSizeConstantSeparate = null;\n        this.startSizeConstantMinSeparate = null;\n        this.startSizeConstantMaxSeparate = null;\n        this.startRotationConstantSeparate = null;\n        this.startRotationConstantMinSeparate = null;\n        this.startRotationConstantMaxSeparate = null;\n        this.startColorConstant = null;\n        this.startColorConstantMin = null;\n        this.startColorConstantMax = null;\n        this._velocityOverLifetime = null;\n        this._colorOverLifetime = null;\n        this._sizeOverLifetime = null;\n        this._rotationOverLifetime = null;\n        this._textureSheetAnimation = null;\n    }\n\n    /**\n     * 发射一个粒子。\n     */\n    emit(time: number): boolean {\n        var position: Vector3 = ShurikenParticleSystem._tempPosition;\n        var direction: Vector3 = ShurikenParticleSystem._tempDirection;\n        if (this._shape && this._shape.enable) {\n            if (this.autoRandomSeed)\n                this._shape.generatePositionAndDirection(position, direction);\n            else\n                this._shape.generatePositionAndDirection(position, direction, this._rand, this._randomSeeds);\n        } else {\n            position.x = position.y = position.z = 0;\n            direction.x = direction.y = 0;\n            direction.z = 1;\n        }\n\n        return this.addParticle(position, direction, time);//TODO:提前判断优化\n    }\n\n    //增加一个粒子\n    addParticle(position: Vector3, direction: Vector3, time: number): boolean {//TODO:还需优化\n        Vector3.normalize(direction, direction);\n        //下一个粒子\n        var nextFreeParticle: number = this._firstFreeElement + 1;\n        if (nextFreeParticle >= this._bufferMaxParticles)\n            nextFreeParticle = 0;\n\n        if (nextFreeParticle === this._firstRetiredElement)\n            return false;\n\n        var transform: Transform3D = this._owner.transform;\n        ShurikenParticleData.create(this, this._ownerRender);\n\n        var particleAge: number = this._currentTime - time;\n        if (particleAge >= ShurikenParticleData.startLifeTime)//如果时间已大于声明周期，则直接跳过,TODO:提前优化\n            return true;\n\n        var pos: Vector3, rot: Quaternion;\n        if (this.simulationSpace == 0) {\n            pos = transform.position;\n            rot = transform.rotation;\n        }\n\n        //StartSpeed\n        var startSpeed: number;\n        switch (this.startSpeedType) {\n            case 0:\n                startSpeed = this.startSpeedConstant;\n                break;\n            case 2:\n                if (this.autoRandomSeed) {\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random());\n                } else {\n                    this._rand.seed = this._randomSeeds[8];\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat());\n                    this._randomSeeds[8] = this._rand.seed;\n                }\n                break;\n        }\n\n\n        var randomVelocityX: number, randomVelocityY: number, randomVelocityZ: number, randomColor: number, randomSize: number, randomRotation: number, randomTextureAnimation: number;\n        var needRandomVelocity: boolean = this._velocityOverLifetime && this._velocityOverLifetime.enable;\n        if (needRandomVelocity) {\n            var velocityType: number = this._velocityOverLifetime.velocity.type;\n            if (velocityType === 2 || velocityType === 3) {\n                if (this.autoRandomSeed) {\n                    randomVelocityX = Math.random();\n                    randomVelocityY = Math.random();\n                    randomVelocityZ = Math.random();\n                } else {\n                    this._rand.seed = this._randomSeeds[9];\n                    randomVelocityX = this._rand.getFloat();\n                    randomVelocityY = this._rand.getFloat();\n                    randomVelocityZ = this._rand.getFloat();\n                    this._randomSeeds[9] = this._rand.seed;\n                }\n            } else {\n                needRandomVelocity = false;\n            }\n        } else {\n            needRandomVelocity = false;\n        }\n        var needRandomColor: boolean = this._colorOverLifetime && this._colorOverLifetime.enable;\n        if (needRandomColor) {\n            var colorType: number = this._colorOverLifetime.color.type;\n            if (colorType === 3) {\n                if (this.autoRandomSeed) {\n                    randomColor = Math.random();\n                } else {\n                    this._rand.seed = this._randomSeeds[10];\n                    randomColor = this._rand.getFloat();\n                    this._randomSeeds[10] = this._rand.seed;\n                }\n            } else {\n                needRandomColor = false;\n            }\n        } else {\n            needRandomColor = false;\n        }\n        var needRandomSize: boolean = this._sizeOverLifetime && this._sizeOverLifetime.enable;\n        if (needRandomSize) {\n            var sizeType: number = this._sizeOverLifetime.size.type;\n            if (sizeType === 3) {\n                if (this.autoRandomSeed) {\n                    randomSize = Math.random();\n                } else {\n                    this._rand.seed = this._randomSeeds[11];\n                    randomSize = this._rand.getFloat();\n                    this._randomSeeds[11] = this._rand.seed;\n                }\n            } else {\n                needRandomSize = false;\n            }\n        } else {\n            needRandomSize = false;\n        }\n        var needRandomRotation: boolean = this._rotationOverLifetime && this._rotationOverLifetime.enable;\n        if (needRandomRotation) {\n            var rotationType: number = this._rotationOverLifetime.angularVelocity.type;\n            if (rotationType === 2 || rotationType === 3) {\n                if (this.autoRandomSeed) {\n                    randomRotation = Math.random();\n                } else {\n                    this._rand.seed = this._randomSeeds[12];\n                    randomRotation = this._rand.getFloat();\n                    this._randomSeeds[12] = this._rand.seed;\n                }\n            } else {\n                needRandomRotation = false;\n            }\n        } else {\n            needRandomRotation = false;\n        }\n        var needRandomTextureAnimation: boolean = this._textureSheetAnimation && this._textureSheetAnimation.enable;\n        if (needRandomTextureAnimation) {\n            var textureAnimationType: number = this._textureSheetAnimation.frame.type;\n            if (textureAnimationType === 3) {\n                if (this.autoRandomSeed) {\n                    randomTextureAnimation = Math.random();\n                } else {\n                    this._rand.seed = this._randomSeeds[15];\n                    randomTextureAnimation = this._rand.getFloat();\n                    this._randomSeeds[15] = this._rand.seed;\n                }\n            } else {\n                needRandomTextureAnimation = false;\n            }\n        } else {\n            needRandomTextureAnimation = false;\n        }\n\n        var startIndex: number = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride;\n        var subU: number = ShurikenParticleData.startUVInfo[0];\n        var subV: number = ShurikenParticleData.startUVInfo[1];\n        var startU: number = ShurikenParticleData.startUVInfo[2];\n        var startV: number = ShurikenParticleData.startUVInfo[3];\n\n        var meshVertices: Float32Array, meshVertexStride: number, meshPosOffset: number, meshCorOffset: number, meshUVOffset: number, meshVertexIndex: number;\n        var render: ShurikenParticleRenderer = this._ownerRender;\n        if (render.renderMode === 4) {\n            var meshVB: VertexBuffer3D = render.mesh._vertexBuffer;\n            meshVertices = meshVB.getFloat32Data();\n            var meshVertexDeclaration: VertexDeclaration = meshVB.vertexDeclaration;\n            meshPosOffset = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\n            var colorElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\n            meshCorOffset = colorElement ? colorElement._offset / 4 : -1;\n            var uvElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\n            meshUVOffset = uvElement ? uvElement._offset / 4 : -1;\n            meshVertexStride = meshVertexDeclaration.vertexStride / 4;\n            meshVertexIndex = 0;\n        }\n\n        for (var i: number = startIndex, n: number = startIndex + this._floatCountPerVertex * this._vertexStride; i < n; i += this._floatCountPerVertex) {\n            var offset: number;\n            if (render.renderMode === 4) {\n                offset = i;\n                var vertexOffset: number = meshVertexStride * (meshVertexIndex++);\n                var meshOffset: number = vertexOffset + meshPosOffset;\n                this._vertices[offset++] = meshVertices[meshOffset++];\n                this._vertices[offset++] = meshVertices[meshOffset++];\n                this._vertices[offset++] = meshVertices[meshOffset];\n                if (meshCorOffset === -1) {\n                    this._vertices[offset++] = 1.0;\n                    this._vertices[offset++] = 1.0;\n                    this._vertices[offset++] = 1.0;\n                    this._vertices[offset++] = 1.0;\n                }\n                else {\n                    meshOffset = vertexOffset + meshCorOffset;\n                    this._vertices[offset++] = meshVertices[meshOffset++];\n                    this._vertices[offset++] = meshVertices[meshOffset++];\n                    this._vertices[offset++] = meshVertices[meshOffset++];\n                    this._vertices[offset++] = meshVertices[meshOffset];\n                }\n                if (meshUVOffset === -1) {\n                    this._vertices[offset++] = 0.0;\n                    this._vertices[offset++] = 0.0;\n                }\n                else {\n                    meshOffset = vertexOffset + meshUVOffset;\n                    this._vertices[offset++] = meshVertices[meshOffset++];\n                    this._vertices[offset++] = meshVertices[meshOffset];\n                }\n            } else {\n                offset = i + 4;\n            }\n\n            this._vertices[offset++] = position.x;\n            this._vertices[offset++] = position.y;\n            this._vertices[offset++] = position.z;\n\n            this._vertices[offset++] = ShurikenParticleData.startLifeTime;\n\n            this._vertices[offset++] = direction.x;\n            this._vertices[offset++] = direction.y;\n            this._vertices[offset++] = direction.z;\n            this._vertices[offset++] = time;\n\n            this._vertices[offset++] = ShurikenParticleData.startColor.x;\n            this._vertices[offset++] = ShurikenParticleData.startColor.y;\n            this._vertices[offset++] = ShurikenParticleData.startColor.z;\n            this._vertices[offset++] = ShurikenParticleData.startColor.w;\n\n            this._vertices[offset++] = ShurikenParticleData.startSize[0];\n            this._vertices[offset++] = ShurikenParticleData.startSize[1];\n            this._vertices[offset++] = ShurikenParticleData.startSize[2];\n\n            this._vertices[offset++] = ShurikenParticleData.startRotation[0];\n            this._vertices[offset++] = ShurikenParticleData.startRotation[1];\n            this._vertices[offset++] = ShurikenParticleData.startRotation[2];\n\n            //StartSpeed\n            this._vertices[offset++] = startSpeed;\n\n            //this._vertices[offset] = Math.random();\n\n\n            needRandomColor && (this._vertices[offset + 1] = randomColor);\n            needRandomSize && (this._vertices[offset + 2] = randomSize);\n            needRandomRotation && (this._vertices[offset + 3] = randomRotation);\n            needRandomTextureAnimation && (this._vertices[offset + 4] = randomTextureAnimation);\n            if (needRandomVelocity) {\n                this._vertices[offset + 5] = randomVelocityX;\n                this._vertices[offset + 6] = randomVelocityY;\n                this._vertices[offset + 7] = randomVelocityZ;\n            }\n\n            switch (this.simulationSpace) {\n                case 0:\n                    offset += 8;\n                    this._vertices[offset++] = pos.x;\n                    this._vertices[offset++] = pos.y;\n                    this._vertices[offset++] = pos.z;\n                    this._vertices[offset++] = rot.x;\n                    this._vertices[offset++] = rot.y;\n                    this._vertices[offset++] = rot.z;\n                    this._vertices[offset++] = rot.w;\n                    break;\n                case 1:\n                    break;\n                default:\n                    throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\n            }\n            offset = i + this._simulationUV_Index;\n            this._vertices[offset++] = startU;\n            this._vertices[offset++] = startV;\n            this._vertices[offset++] = subU;\n            this._vertices[offset] = subV;\n        }\n\n        this._firstFreeElement = nextFreeParticle;\n        return true;\n    }\n\n    addNewParticlesToVertexBuffer(): void {\n        var start: number;\n        var byteStride: number = this._vertexStride * this._floatCountPerVertex * 4;\n        if (this._firstNewElement < this._firstFreeElement) {\n            start = this._firstNewElement * byteStride;\n            this._vertexBuffer.setData(this._vertices.buffer, start, start, (this._firstFreeElement - this._firstNewElement) * byteStride);\n\n        } else {\n            start = this._firstNewElement * byteStride;\n            this._vertexBuffer.setData(this._vertices.buffer, start, start, (this._bufferMaxParticles - this._firstNewElement) * byteStride);\n\n            if (this._firstFreeElement > 0) {\n                this._vertexBuffer.setData(this._vertices.buffer, 0, 0, this._firstFreeElement * byteStride);\n\n            }\n        }\n        this._firstNewElement = this._firstFreeElement;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    _getType(): number {\n        return ShurikenParticleSystem._type;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _prepareRender(state: RenderContext3D): boolean {\n        if (this._updateMask != Stat.loopCount) {\n            this._updateMask = Stat.loopCount;\n            this._updateEmission();\n            //设备丢失时, setData  here\n            if (this._firstNewElement != this._firstFreeElement)\n                this.addNewParticlesToVertexBuffer();\n            this._drawCounter++;\n        }\n\n\n        if (this._firstActiveElement != this._firstFreeElement)\n            return true;\n        else\n            return false;\n    }\n\n    /**\n     * @internal\n     * @override\n     */\n    _updateRenderParams(state: RenderContext3D): void {\n        //this._bufferState.bind();\n        var indexCount: number;\n        this.clearRenderParams();\n        if (this._firstActiveElement < this._firstFreeElement) {\n            indexCount = (this._firstFreeElement - this._firstActiveElement) * this._indexStride;\n            this.setDrawElemenParams(indexCount, 2 * this._firstActiveElement * this._indexStride);\n            // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 2 * this._firstActiveElement * this._indexStride);\n            // Stat.trianglesFaces += indexCount / 3;\n            // Stat.renderBatches++;\n        } else {\n            indexCount = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride;\n            this.setDrawElemenParams(indexCount, 2 * this._firstActiveElement * this._indexStride);\n            // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 2 * this._firstActiveElement * this._indexStride);\n            // Stat.trianglesFaces += indexCount / 3;\n            // Stat.renderBatches++;\n            if (this._firstFreeElement > 0) {\n                indexCount = this._firstFreeElement * this._indexStride;\n                this.setDrawElemenParams(indexCount, 0);\n                // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 0);\n                // Stat.trianglesFaces += indexCount / 3;\n                // Stat.renderBatches++;\n            }\n        }\n    }\n\n    /**\n     * 开始发射粒子。\n     */\n    play(): void {\n        this._burstsIndex = 0;\n        this._isEmitting = true;\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._emissionTime = 0;\n        this._emissionDistance = 0;\n        this._owner.transform.position.cloneTo(this._emissionLastPosition);\n        this._totalDelayTime = 0;\n\n        if (!this.autoRandomSeed) {\n            for (var i: number = 0, n: number = this._randomSeeds.length; i < n; i++)\n                this._randomSeeds[i] = this.randomSeed[0] + ShurikenParticleSystem._RANDOMOFFSET[i];\n        }\n\n        switch (this.startDelayType) {\n            case 0:\n                this._playStartDelay = this.startDelay;\n                break;\n            case 1:\n                if (this.autoRandomSeed) {\n                    this._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, Math.random());\n                } else {\n                    this._rand.seed = this._randomSeeds[2];\n                    this._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat());\n                    this._randomSeeds[2] = this._rand.seed;\n                }\n                break;\n            default:\n                throw new Error(\"Utils3D: startDelayType is invalid.\");\n        }\n        this._frameRateTime = this._currentTime + this._playStartDelay;//同步频率模式发射时间,更新函数中小于延迟时间不会更新此时间。\n\n        this._startUpdateLoopCount = Stat.loopCount;\n    }\n\n    /**\n     * 暂停发射粒子。\n     */\n    pause(): void {\n        this._isPaused = true;\n    }\n\n    /**\n     * 通过指定时间增加粒子播放进度，并暂停播放。\n     * @param time 进度时间.如果restart为true,粒子播放时间会归零后再更新进度。\n     * @param restart 是否重置播放状态。\n     */\n    simulate(time: number, restart: boolean = true): void {\n        this._simulateUpdate = true;\n\n        if (restart) {\n            this._updateParticlesSimulationRestart(time);\n        }\n        else {\n            this._isPaused = false;//如果当前状态为暂停则无法发射粒子\n            this._updateParticles(time);\n        }\n\n        this.pause();\n    }\n\n    /**\n     * 停止发射粒子。\n     */\n    stop(): void {\n        this._burstsIndex = 0;\n        this._isEmitting = false;\n        this._emissionTime = 0;\n    }\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        var dest: ShurikenParticleSystem = (<ShurikenParticleSystem>destObject);\n\n        dest._useCustomBounds = this._useCustomBounds;\n        (this._customBounds) && (this._customBounds.cloneTo(dest._customBounds));\n\n        dest.duration = this.duration;\n        dest.looping = this.looping;\n        dest.prewarm = this.prewarm;\n        dest.startDelayType = this.startDelayType;\n        dest.startDelay = this.startDelay;\n        dest.startDelayMin = this.startDelayMin;\n        dest.startDelayMax = this.startDelayMax;\n\n        dest._maxStartLifetime = this._maxStartLifetime;\n        dest.startLifetimeType = this.startLifetimeType;\n        dest.startLifetimeConstant = this.startLifetimeConstant;\n        this.startLifeTimeGradient.cloneTo(dest.startLifeTimeGradient);\n        dest.startLifetimeConstantMin = this.startLifetimeConstantMin;\n        dest.startLifetimeConstantMax = this.startLifetimeConstantMax;\n        this.startLifeTimeGradientMin.cloneTo(dest.startLifeTimeGradientMin);\n        this.startLifeTimeGradientMax.cloneTo(dest.startLifeTimeGradientMax);\n\n        dest.startSpeedType = this.startSpeedType;\n        dest.startSpeedConstant = this.startSpeedConstant;\n        dest.startSpeedConstantMin = this.startSpeedConstantMin;\n        dest.startSpeedConstantMax = this.startSpeedConstantMax;\n\n        dest.dragType = this.dragType;\n        dest.dragConstant = this.dragConstant;\n        dest.dragSpeedConstantMax = this.dragSpeedConstantMax;\n        dest.dragSpeedConstantMin = this.dragSpeedConstantMin;\n\n        dest.threeDStartSize = this.threeDStartSize;\n        dest.startSizeType = this.startSizeType;\n        dest.startSizeConstant = this.startSizeConstant;\n        this.startSizeConstantSeparate.cloneTo(dest.startSizeConstantSeparate);\n        dest.startSizeConstantMin = this.startSizeConstantMin;\n        dest.startSizeConstantMax = this.startSizeConstantMax;\n        this.startSizeConstantMinSeparate.cloneTo(dest.startSizeConstantMinSeparate);\n        this.startSizeConstantMaxSeparate.cloneTo(dest.startSizeConstantMaxSeparate);\n\n        dest.threeDStartRotation = this.threeDStartRotation;\n        dest.startRotationType = this.startRotationType;\n        dest.startRotationConstant = this.startRotationConstant;\n        this.startRotationConstantSeparate.cloneTo(dest.startRotationConstantSeparate);\n        dest.startRotationConstantMin = this.startRotationConstantMin;\n        dest.startRotationConstantMax = this.startRotationConstantMax;\n        this.startRotationConstantMinSeparate.cloneTo(dest.startRotationConstantMinSeparate);\n        this.startRotationConstantMaxSeparate.cloneTo(dest.startRotationConstantMaxSeparate);\n\n        dest.randomizeRotationDirection = this.randomizeRotationDirection;\n\n        dest.startColorType = this.startColorType;\n        this.startColorConstant.cloneTo(dest.startColorConstant);\n        this.startColorConstantMin.cloneTo(dest.startColorConstantMin);\n        this.startColorConstantMax.cloneTo(dest.startColorConstantMax);\n\n        dest.gravityModifier = this.gravityModifier;\n        dest.simulationSpace = this.simulationSpace;\n        dest.simulationSpeed = this.simulationSpeed;\n        dest.scaleMode = this.scaleMode;\n        dest.playOnAwake = this.playOnAwake;\n        dest.autoRandomSeed = this.autoRandomSeed;\n        dest.randomSeed[0] = this.randomSeed[0];\n\n        dest.maxParticles = this.maxParticles;\n\n        //TODO:可做更优判断\n        (this._emission) && (dest._emission = this._emission.clone());\n        (this.shape) && (dest.shape = this.shape.clone());\n        (this.velocityOverLifetime) && (dest.velocityOverLifetime = this.velocityOverLifetime.clone());\n        (this.colorOverLifetime) && (dest.colorOverLifetime = this.colorOverLifetime.clone());\n        (this.sizeOverLifetime) && (dest.sizeOverLifetime = this.sizeOverLifetime.clone());\n        (this.rotationOverLifetime) && (dest.rotationOverLifetime = this.rotationOverLifetime.clone());\n        (this.textureSheetAnimation) && (dest.textureSheetAnimation = this.textureSheetAnimation.clone());\n        //\n\n        dest.isPerformanceMode = this.isPerformanceMode;\n\n        dest._isEmitting = this._isEmitting;\n        dest._isPlaying = this._isPlaying;\n        dest._isPaused = this._isPaused;\n        dest._playStartDelay = this._playStartDelay;\n        dest._frameRateTime = this._frameRateTime;\n        dest._emissionTime = this._emissionTime;\n        dest._totalDelayTime = this._totalDelayTime;\n        dest._burstsIndex = this._burstsIndex;\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: ShurikenParticleSystem = new ShurikenParticleSystem(null);\n        this.cloneTo(dest);\n        return dest;\n    }\n}\n\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { MathUtil } from \"../../../maths/MathUtil\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\nimport { VertexShurikenParticleBillboard } from \"../../graphics/Vertex/VertexShurikenParticleBillboard\";\nimport { VertexShurikenParticleMesh } from \"../../graphics/Vertex/VertexShurikenParticleMesh\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Mesh } from \"../../resource/models/Mesh\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { ShurikenParticleData } from \"./ShurikenParticleData\";\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\n\nexport class ShurikenParticleInstanceSystem extends ShurikenParticleSystem {\n\n    private _instanceParticleVertexBuffer: VertexBuffer3D = null;\n    private _instanceVertex: Float32Array = null;\n\n\n    private _meshIndexCount: number;\n    private _meshFloatCountPreVertex: number;\n\n    /**\n     * 每个粒子数据 float 个数\n     */\n    private _floatCountPerParticleData: number;\n\n    constructor(render: ShurikenParticleRenderer) {\n        super(render,MeshTopology.Triangles,DrawType.DrawElementInstance);\n    }\n\n    /***\n     * 重排 mesh vb\n     */\n    private _initMeshVertex(vertex: Float32Array, mesh: Mesh) {\n        let meshVertexBuffer = mesh._vertexBuffer;\n        let meshVertices = meshVertexBuffer.getFloat32Data();\n        let meshVertexDeclaration = meshVertexBuffer.vertexDeclaration;\n\n        let meshPosOffset = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\n\n        let colorElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\n        let meshColorOffset = colorElement ? colorElement._offset / 4 : -1;\n\n        let uvElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\n        let meshUVOffset = uvElement ? uvElement._offset / 4 : -1;\n\n        let meshVertexStride = meshVertexDeclaration.vertexStride / 4;\n        let meshVertexIndex = 0;\n\n        let vertexCount = mesh.vertexCount;\n\n        let perParticleDataCount = this._vertexBuffer.vertexDeclaration.vertexStride / 4;\n        for (let index = 0; index < vertexCount; index++) {\n            let startIndex = index * perParticleDataCount;\n            let indexOffset = startIndex;\n            let vertexOffset = meshVertexStride * meshVertexIndex++;\n\n            // position\n            let positionOffset = vertexOffset + meshPosOffset;\n            vertex[indexOffset++] = meshVertices[positionOffset++];\n            vertex[indexOffset++] = meshVertices[positionOffset++];\n            vertex[indexOffset++] = meshVertices[positionOffset++];\n\n            // color\n            if (meshColorOffset == -1) {\n                vertex[indexOffset++] = 1;\n                vertex[indexOffset++] = 1;\n                vertex[indexOffset++] = 1;\n                vertex[indexOffset++] = 1;\n            }\n            else {\n                let colorOffset = vertexOffset + meshColorOffset;\n                vertex[indexOffset++] = meshVertices[colorOffset++];\n                vertex[indexOffset++] = meshVertices[colorOffset++];\n                vertex[indexOffset++] = meshVertices[colorOffset++];\n                vertex[indexOffset++] = meshVertices[colorOffset++];\n            }\n\n            // uv\n            if (meshUVOffset == -1) {\n                vertex[indexOffset++] = 0;\n                vertex[indexOffset++] = 0;\n            }\n            else {\n                let uvOffset = vertexOffset + meshUVOffset;\n                vertex[indexOffset++] = meshVertices[uvOffset++];\n                vertex[indexOffset++] = meshVertices[uvOffset++];\n            }\n\n        }\n    }\n\n    /**\n     * 初始化 buffer\n     * @returns \n     */\n    _initBufferDatas(): void {\n        // todo  Resource._addMemory\n        if (this._vertexBuffer) {\n            // this._instanceBufferState.destroy();\n            this._vertexBuffer.destroy();\n            this._instanceParticleVertexBuffer.destroy();\n            this._indexBuffer.destroy();\n        }\n        let render: ShurikenParticleRenderer = this._ownerRender;\n        let renderMode: number = render.renderMode;\n\n        if (renderMode == -1 || this.maxParticles <= 0) {\n            return;\n        }\n\n        if (renderMode == 4) {\n            let mesh = render.mesh;\n            if (mesh) {\n                let meshDeclaration = VertexShurikenParticleMesh.vertexInstanceMeshDeclaration;\n                let particleDeclaration = VertexShurikenParticleMesh.vertexInstanceParticleDeclaration;\n\n                this._meshIndexCount = mesh.indexCount;\n                this._simulationUV_Index = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\n                this._floatCountPerParticleData = particleDeclaration.vertexStride / 4;\n                this._startLifeTimeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset / 4 + 3;\n                this._timeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset / 4 + 3;\n\n                let indexCount = mesh.indexCount;\n                this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(mesh.indexFormat, indexCount, BufferUsage.Static,false);\n                this._indexBuffer.setData(mesh._indexBuffer.getData());\n\n                let meshVertexCount = mesh.vertexCount;\n                let vbSize = meshDeclaration.vertexStride * meshVertexCount;\n                this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vbSize, BufferUsage.Static,false);\n                this._vertexBuffer.vertexDeclaration = meshDeclaration;\n                // 重排 mesh 顶点数据 ?\n                // 固定 vertexElement 类型。。。 \n                let meshVertex = new Float32Array(vbSize / 4);\n                this._initMeshVertex(meshVertex, mesh);\n\n                this._vertexBuffer.setData(meshVertex.buffer);\n\n                let particleCount = this._bufferMaxParticles;\n                let particleVbSize = particleCount * particleDeclaration.vertexStride;\n                this._instanceVertex = new Float32Array(particleVbSize / 4);\n                this._instanceParticleVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(particleVbSize, BufferUsage.Dynamic,false);\n                this._instanceParticleVertexBuffer.vertexDeclaration = particleDeclaration;\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer);\n                this._instanceParticleVertexBuffer.instanceBuffer = true;\n                this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer)\n            }\n\n        }\n        else {\n            let billboardDeclaration = VertexShurikenParticleBillboard.vertexInstanceMeshDeclaration;\n            let particleDeclaration = VertexShurikenParticleBillboard.vertexInstanceParticleDeclaration;\n\n            this._meshIndexCount = 6;\n            this._simulationUV_Index = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\n            this._floatCountPerParticleData = particleDeclaration.vertexStride / 4;\n            this._startLifeTimeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset / 4 + 3;\n            this._timeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset / 4 + 3;\n\n            let indexArray = VertexShurikenParticleBillboard.billboardIndexArray;\n            let indexCount = indexArray.length;\n            this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indexCount, BufferUsage.Static,false);\n            this._indexBuffer.setData(indexArray);\n\n            let meshVBSize = this._meshIndexCount * billboardDeclaration.vertexStride;\n            this._vertexBuffer =LayaGL.renderOBJCreate.createVertexBuffer3D(meshVBSize,BufferUsage.Static,false);\n            this._vertexBuffer.vertexDeclaration = billboardDeclaration;\n            this._vertexBuffer.setData(VertexShurikenParticleBillboard.billboardVertexArray.buffer);\n            let particleCount = this._bufferMaxParticles;\n            let particleVbSize = particleCount * particleDeclaration.vertexStride;\n            this._instanceVertex = new Float32Array(particleVbSize / 4);\n            this._instanceParticleVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(particleVbSize, BufferUsage.Dynamic,false);\n            this._instanceParticleVertexBuffer.vertexDeclaration = particleDeclaration;\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer);\n            this._instanceParticleVertexBuffer.instanceBuffer = true;\n            // this._instanceBufferState.bind();\n            // this._instanceBufferState.applyIndexBuffer(this._indexBuffer);\n            // this._instanceBufferState.applyVertexBuffer(this._vertexBuffer);\n            // this._instanceBufferState.applyInstanceVertexBuffer(this._instanceParticleVertexBuffer);\n            // this._instanceBufferState.unBind();\n            this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer);\n        }\n\n        // let memorySize = this._instanceParticleVertexBuffer._byteLength + this._indexBuffer._byteLength + this._vertexBuffer._byteLength;\n\n        // Resource._addMemory(memorySize, memorySize);\n    }\n\n    protected _retireActiveParticles(): void {\n        const epsilon: number = 0.0001;\n        let firstActive = this._firstActiveElement;\n        while (this._firstActiveElement != this._firstNewElement) {\n            let index = this._firstActiveElement * this._floatCountPerParticleData;\n            let timeIndex = index + this._timeIndex;\n\n            let particleAge = this._currentTime - this._instanceVertex[timeIndex];\n            if (particleAge + epsilon < this._instanceVertex[index + this._startLifeTimeIndex]) {\n                break;\n            }\n\n            this._instanceVertex[timeIndex] = this._drawCounter;\n            this._firstActiveElement++;\n            if (this._firstActiveElement >= this._bufferMaxParticles) {\n                this._firstActiveElement = 0;\n            }\n        }\n        \n        if (this._firstActiveElement != firstActive) {\n            let byteStride = this._floatCountPerParticleData * 4;\n            if (this._firstActiveElement < this._firstFreeElement) {\n                let activeStart = this._firstActiveElement * byteStride;\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, activeStart, (this._firstFreeElement - this._firstActiveElement) * byteStride);\n            }\n            else {\n                let start = this._firstActiveElement * byteStride;\n                let a = this._bufferMaxParticles - this._firstActiveElement;\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, a * byteStride);\n\n                if (this._firstFreeElement > 0) {\n                    this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, a * byteStride, 0, this._firstFreeElement * byteStride);\n                }\n            }\n        }\n    }\n\n    protected _freeRetiredParticles(): void {\n        while (this._firstRetiredElement != this._firstActiveElement) {\n            let age = this._drawCounter - this._instanceVertex[this._firstRetiredElement * this._floatCountPerParticleData + this._timeIndex];\n\n            //TODO这里会有什么bug\n            if (false)\n                if (age < 3)//GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\n                    break;\n            this._firstRetiredElement++;\n            if (this._firstRetiredElement >= this._bufferMaxParticles)\n                this._firstRetiredElement = 0;\n        }\n    }\n\n    addParticle(position: Vector3, direction: Vector3, time: number): boolean {\n        Vector3.normalize(direction, direction);\n\n        //下一个粒子\n        let nextFreeParticle = this._firstFreeElement + 1;\n        if (nextFreeParticle >= this._bufferMaxParticles) {\n            nextFreeParticle = 0;\n        }\n\n        if (nextFreeParticle == this._firstRetiredElement) {\n            return false;\n        }\n\n        let transform = this._owner.transform;\n        ShurikenParticleData.create(this, this._ownerRender);\n\n        let particleAge = this._currentTime - time;\n\n        if (particleAge >= ShurikenParticleData.startLifeTime) {\n            return true;\n        }\n\n        let pos: Vector3, rot: Quaternion;\n        if (this.simulationSpace == 0) {\n            pos = transform.position;\n            rot = transform.rotation;\n        }\n\n        //StartSpeed\n        let startSpeed = 0;\n        switch (this.startSpeedType) {\n            case 0:\n                startSpeed = this.startSpeedConstant;\n                break;\n            case 2:\n                if (this.autoRandomSeed) {\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random());\n                } else {\n                    this._rand.seed = this._randomSeeds[8];\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat());\n                    this._randomSeeds[8] = this._rand.seed;\n                }\n                break;\n        }\n\n        let randomVelocityX: number, randomVelocityY: number, randomVelocityZ: number;\n        let needRandomVelocity = this._velocityOverLifetime && this._velocityOverLifetime.enable;\n        if (needRandomVelocity) {\n            let velocityType = this._velocityOverLifetime.velocity.type;\n            if (velocityType == 2 || velocityType == 3) {\n                if (this.autoRandomSeed) {\n                    randomVelocityX = Math.random();\n                    randomVelocityY = Math.random();\n                    randomVelocityZ = Math.random();\n                }\n                else {\n                    this._rand.seed = this._randomSeeds[9];\n                    randomVelocityX = this._rand.getFloat();\n                    randomVelocityY = this._rand.getFloat();\n                    randomVelocityZ = this._rand.getFloat();\n                    this._randomSeeds[9] = this._rand.seed;\n                }\n            }\n            else {\n                needRandomVelocity = false;\n            }\n        }\n        else {\n            needRandomVelocity = false;\n        }\n\n        let randomColor: number;\n        let needRandomColor = this._colorOverLifetime && this._colorOverLifetime.enable;\n        if (needRandomColor) {\n            let colorType = this._colorOverLifetime.color.type;\n            if (colorType == 3) {\n                if (this.autoRandomSeed) {\n                    randomColor = Math.random();\n                }\n                else {\n                    this._rand.seed = this._randomSeeds[10];\n                    randomColor = this._rand.getFloat();\n                    this._randomSeeds[10] = this._rand.seed;\n                }\n            }\n            else {\n                needRandomColor = false;\n            }\n        }\n        else {\n            needRandomColor = false;\n        }\n\n        let randomSize: number;\n        let needRandomSize = this._sizeOverLifetime && this._sizeOverLifetime.enable;\n        if (needRandomSize) {\n            let sizeType = this._sizeOverLifetime.size.type;\n            if (sizeType == 3) {\n                if (this.autoRandomSeed) {\n                    randomSize = Math.random();\n                }\n                else {\n                    this._rand.seed = this._randomSeeds[11];\n                    randomSize = this._rand.getFloat();\n                    this.randomSeed[11] = this._rand.seed;\n                }\n            }\n            else {\n                needRandomSize = false;\n            }\n        }\n        else {\n            needRandomSize = false;\n        }\n\n        let randomRotation: number;\n        let needRandomRotation = this._rotationOverLifetime && this._rotationOverLifetime.enable;\n        if (needRandomRotation) {\n            let rotationType = this._rotationOverLifetime.angularVelocity.type;\n            if (rotationType == 2 || rotationType == 3) {\n                if (this.autoRandomSeed) {\n\n                    randomRotation = Math.random();\n                }\n                else {\n                    this._rand.seed = this._randomSeeds[12];\n                    randomRotation = this._rand.getFloat();\n                    this._randomSeeds[12] = this._rand.seed;\n                }\n            }\n            else {\n                needRandomRotation = false;\n            }\n        }\n        else {\n            needRandomRotation = false;\n        }\n\n        let randomTextureAnimation: number;\n        let needRandomTextureAnimation = this._textureSheetAnimation && this._textureSheetAnimation.enable;\n        if (needRandomTextureAnimation) {\n            let textureAnimationType = this._textureSheetAnimation.frame.type;\n            if (textureAnimationType == 3) {\n                if (this.autoRandomSeed) {\n                    randomTextureAnimation = Math.random();\n                }\n                else {\n                    this._rand.seed = this._randomSeeds[15];\n                    randomTextureAnimation = this._rand.getFloat();\n                    this._randomSeeds[15] = this._rand.seed;\n                }\n            }\n            else {\n                needRandomTextureAnimation = false;\n            }\n        }\n        else {\n            needRandomTextureAnimation = false;\n        }\n\n        // todo uv 动画\n        let subU: number = ShurikenParticleData.startUVInfo[0];\n        let subV: number = ShurikenParticleData.startUVInfo[1];\n        let startU: number = ShurikenParticleData.startUVInfo[2];\n        let startV: number = ShurikenParticleData.startUVInfo[3];\n\n        let render: ShurikenParticleRenderer = this._ownerRender;\n        if (render.renderMode == 4) {\n\n        }\n        else {\n            // todo, quad 动态添加 uv ?\n        }\n\n        // 每个粒子 就一个数据, 不用循环\n        let startIndex = this._firstFreeElement * this._floatCountPerParticleData;\n\n        let offset = startIndex;\n        this._instanceVertex[offset++] = position.x;\n        this._instanceVertex[offset++] = position.y;\n        this._instanceVertex[offset++] = position.z;\n\n        this._instanceVertex[offset++] = ShurikenParticleData.startLifeTime;\n\n        this._instanceVertex[offset++] = direction.x;\n        this._instanceVertex[offset++] = direction.y;\n        this._instanceVertex[offset++] = direction.z;\n        this._instanceVertex[offset++] = time;\n\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.x;\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.y;\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.z;\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.w;\n\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[0];\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[1];\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[2];\n\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[0];\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[1];\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[2];\n\n        //StartSpeed\n        this._instanceVertex[offset++] = startSpeed;\n        needRandomColor && (this._instanceVertex[offset + 1] = randomColor);\n        needRandomSize && (this._instanceVertex[offset + 2] = randomSize);\n        needRandomRotation && (this._instanceVertex[offset + 3] = randomRotation);\n        needRandomTextureAnimation && (this._instanceVertex[offset + 4] = randomTextureAnimation);\n        if (needRandomVelocity) {\n            this._instanceVertex[offset + 5] = randomVelocityX;\n            this._instanceVertex[offset + 6] = randomVelocityY;\n            this._instanceVertex[offset + 7] = randomVelocityZ;\n        }\n\n        switch (this.simulationSpace) {\n            case 0:\n                offset += 8;\n                this._instanceVertex[offset++] = pos.x;\n                this._instanceVertex[offset++] = pos.y;\n                this._instanceVertex[offset++] = pos.z;\n                this._instanceVertex[offset++] = rot.x;\n                this._instanceVertex[offset++] = rot.y;\n                this._instanceVertex[offset++] = rot.z;\n                this._instanceVertex[offset++] = rot.w;\n                break;\n            case 1:\n                break;\n            default:\n                throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\n        }\n        offset = startIndex + this._simulationUV_Index;\n        this._instanceVertex[offset++] = startU;\n        this._instanceVertex[offset++] = startV;\n        this._instanceVertex[offset++] = subU;\n        this._instanceVertex[offset++] = subV;\n\n        this._firstFreeElement = nextFreeParticle;\n        return true;\n    }\n\n    addNewParticlesToVertexBuffer(): void {\n        let byteStride = this._floatCountPerParticleData * 4;\n        // instance buffer 绘制不能偏移, 每次 从 0 更新整个 buffer\n        if (this._firstActiveElement < this._firstFreeElement) {\n            let start = this._firstActiveElement * byteStride;\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, (this._firstFreeElement - this._firstActiveElement) * byteStride);\n        }\n        else {\n            let start = this._firstActiveElement * byteStride;\n            let a = this._bufferMaxParticles - this._firstActiveElement;\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, a * byteStride);\n\n            if (this._firstFreeElement > 0) {\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, a * byteStride, 0, this._firstFreeElement * byteStride);\n            }\n        }\n\n        this._firstNewElement = this._firstFreeElement;\n    }\n\n    _updateRenderParams(stage: RenderContext3D) {\n        //this._instanceBufferState.bind();\n        // instance buffer 每次从 0 更新\n        this.clearRenderParams();\n        if (this._firstActiveElement < this._firstFreeElement) {\n            let indexCount = this._firstFreeElement - this._firstActiveElement;\n            this.setDrawElemenParams(this._meshIndexCount,0);\n            this.instanceCount = indexCount;\n          //  LayaGL.renderDrawConatext.drawElementsInstanced(MeshTopology.Triangles, this._meshIndexCount, IndexFormat.UInt16, 0, indexCount);\n          //  Stat.trianglesFaces += this._meshIndexCount / 3 * indexCount;\n          //  Stat.renderBatches++;\n        }\n        else {\n            let indexCount = this._bufferMaxParticles - this._firstActiveElement;\n            if (this._firstFreeElement > 0) {\n                indexCount += this._firstFreeElement;\n            }\n            this.setDrawElemenParams(this._meshIndexCount,0);\n            this.instanceCount = indexCount;\n            //LayaGL.renderEngine.getDrawContext().drawElementsInstanced(MeshTopology.Triangles, this._meshIndexCount, IndexFormat.UInt16, 0, indexCount);\n            //Stat.trianglesFaces += this._meshIndexCount / 3 * indexCount;\n            //Stat.renderBatches++;\n        }\n    }\n\n    destroy(): void {\n        // todo\n        super.destroy();\n\n        if (this._indexBuffer) {\n            this._indexBuffer.destroy();\n        }\n        if (this._vertexBuffer) {\n            this._vertexBuffer.destroy();\n        }\n        if (this._instanceParticleVertexBuffer) {\n            this._instanceParticleVertexBuffer.destroy();\n        }\n\n        this._instanceVertex = null;\n        this._meshIndexCount = null;\n        this._meshFloatCountPreVertex = null;\n    }\n}\n","import { Material } from \"../material/Material\"\nimport { BaseTexture } from \"../../../resource/BaseTexture\"\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\n\n\n/**\n * <code>ShurikenParticleMaterial</code> 类用于实现粒子材质。\n */\nexport class ShurikenParticleMaterial extends Material {\n\t/**渲染状态_透明混合。*/\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\n\t/**渲染状态_加色法混合。*/\n\tstatic RENDERMODE_ADDTIVE: number = 1;\n\n\t/**@internal */\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\n\t/**@internal */\n\tstatic SHADERDEFINE_TINTCOLOR: ShaderDefine;\n\t/**@interanl */\n\tstatic SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\n\n\t/**@internal */\n\tstatic DIFFUSETEXTURE: number;\n\t/**@internal */\n\tstatic TINTCOLOR: number;\n\t/**@internal */\n\tstatic TILINGOFFSET: number;\n\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: ShurikenParticleMaterial;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __initDefine__(): void {\n\t\tShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\n\t\tShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR = Shader3D.getDefineByName(\"TINTCOLOR\");\n\t\tShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\n\t\tShurikenParticleMaterial.DIFFUSETEXTURE = Shader3D.propertyNameToID(\"u_texture\");\n\t\tShurikenParticleMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_Tintcolor\");\n\t\tShurikenParticleMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\n\t}\n\n\t/**\n\t * 颜色。\n\t */\n\tget color(): Color {\n\t\treturn this._shaderValues.getColor(ShurikenParticleMaterial.TINTCOLOR);\n\t}\n\n\tset color(value: Color) {\n\t\tif (value)\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\n\t\telse\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\n\n\t\tthis._shaderValues.setColor(ShurikenParticleMaterial.TINTCOLOR, value);\n\t}\n\n\n\n\t/**\n\t * 纹理平铺和偏移。\n\t */\n\tget tilingOffset(): Vector4 {\n\t\treturn (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\n\t}\n\n\tset tilingOffset(value: Vector4) {\n\t\tif (value) {\n\t\t\tthis._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET, value);\n\t\t}\n\t\telse {\n\t\t\tthis._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\n\t\t}\n\t}\n\n\t/**\n\t * 漫反射贴图。\n\t */\n\tget texture(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(ShurikenParticleMaterial.DIFFUSETEXTURE);\n\t}\n\n\tset texture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\n\t\telse\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\n\n\t\tthis._shaderValues.setTexture(ShurikenParticleMaterial.DIFFUSETEXTURE, value);\n\t}\n\n\n\t/**\n\t * 创建一个 <code>ShurikenParticleMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"PARTICLESHURIKEN\");\n\t\t// this._shaderValues.setColor(ShurikenParticleMaterial.TINTCOLOR, new Color(0.5, 0.5, 0.5, 0.5));\n\t\t// this._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\n\t\tthis.renderMode = ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED;//默认加色法会自动加上雾化宏定义，导致非加色法从材质读取完后未移除宏定义。\n\t}\n\n\t/**\n\t* 克隆。\n\t* @return\t 克隆副本。\n\t* @override\n\t*/\n\tclone(): any {\n\t\tvar dest: ShurikenParticleMaterial = new ShurikenParticleMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\n\t//----------------deprecated----------------\n\t/**\n\t * @deprecated\n\t * 渲染模式。\n\t */\n\tset renderMode(value: number) {\n\t\tswitch (value) {\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ADDTIVE:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\n\t\t\t\tbreak;\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial : renderMode value error.\");\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated\n\t * 纹理平铺和偏移X分量。\n\t */\n\tget tilingOffsetX(): number {\n\t\treturn this._MainTex_STX;\n\t}\n\n\tset tilingOffsetX(x: number) {\n\t\tthis._MainTex_STX = x;\n\t}\n\n\t/**\n\t * @deprecated\n\t * 纹理平铺和偏移Y分量。\n\t */\n\tget tilingOffsetY(): number {\n\t\treturn this._MainTex_STY;\n\t}\n\n\tset tilingOffsetY(y: number) {\n\t\tthis._MainTex_STY = y;\n\t}\n\n\t/**\n\t * @deprecated\n\t * 纹理平铺和偏移Z分量。\n\t */\n\tget tilingOffsetZ(): number {\n\t\treturn this._MainTex_STZ;\n\t}\n\n\tset tilingOffsetZ(z: number) {\n\t\tthis._MainTex_STZ = z;\n\t}\n\n\t/**\n\t * @deprecated\n\t * 纹理平铺和偏移W分量。\n\t */\n\tget tilingOffsetW(): number {\n\t\treturn this._MainTex_STW;\n\t}\n\n\tset tilingOffsetW(w: number) {\n\t\tthis._MainTex_STW = w;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _TintColor(): Color {\n\t\treturn this.color;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _TintColor(value: Color) {\n\t\tthis.color = value;\n\t}\n\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _TintColorR(): number {\n\t\treturn this.color.r;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _TintColorR(value: number) {\n\t\tthis.color.r = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _TintColorG(): number {\n\t\treturn this.color.g;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _TintColorG(value: number) {\n\t\tthis.color.g = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _TintColorB(): number {\n\t\treturn this.color.b;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _TintColorB(value: number) {\n\t\tthis.color.b = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal \n\t */\n\tget _TintColorA(): number {\n\t\treturn this.color.a;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _TintColorA(value: number) {\n\t\tthis.color.a = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _MainTex_ST(): Vector4 {\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET)\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _MainTex_ST(value: Vector4) {\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\n\t\ttilOff.setValue(value.x, value.y, value.z, value.w);\n\t\tthis.tilingOffset = tilOff;\n\t}\n\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _MainTex_STX(): number {\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).x;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _MainTex_STX(x: number) {\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\n\t\ttilOff.x = x;\n\t\tthis.tilingOffset = tilOff;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _MainTex_STY(): number {\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).y;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _MainTex_STY(y: number) {\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\n\t\ttilOff.y = y;\n\t\tthis.tilingOffset = tilOff;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _MainTex_STZ(): number {\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).z;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _MainTex_STZ(z: number) {\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\n\t\ttilOff.z = z;\n\t\tthis.tilingOffset = tilOff;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tget _MainTex_STW(): number {\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).w;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tset _MainTex_STW(w: number) {\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\n\t\ttilOff.w = w;\n\t\tthis.tilingOffset = tilOff;\n\t}\n\n\n\n\t/**\n\t * @deprecated\n\t * 颜色R分量。\n\t */\n\tget colorR(): number {\n\t\treturn this._TintColorR;\n\t}\n\n\tset colorR(value: number) {\n\t\tthis._TintColorR = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * 颜色G分量。\n\t */\n\tget colorG(): number {\n\t\treturn this._TintColorG;\n\t}\n\n\tset colorG(value: number) {\n\t\tthis._TintColorG = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * 颜色B分量。\n\t */\n\tget colorB(): number {\n\t\treturn this._TintColorB;\n\t}\n\n\tset colorB(value: number) {\n\t\tthis._TintColorB = value;\n\t}\n\n\t/**\n\t * @deprecated\n\t * 颜色Z分量。\n\t */\n\tget colorA(): number {\n\t\treturn this._TintColorA;\n\t}\n\n\tset colorA(value: number) {\n\t\tthis._TintColorA = value;\n\t}\n}\n\n\n","import { BoundFrustum } from \"../../math/BoundFrustum\";\nimport { Mesh } from \"../../resource/models/Mesh\";\nimport { Physics3DUtils } from \"../../utils/Physics3DUtils\";\nimport { BaseRender } from \"../render/BaseRender\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { Transform3D } from \"../Transform3D\";\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { ShurikenParticleInstanceSystem } from \"./ShurikenParticleInstanceSystem\";\nimport { RenderElement } from \"../render/RenderElement\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { ShurikenParticleMaterial } from \"./ShurikenParticleMaterial\";\nimport { Component } from \"../../../components/Component\";\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { Stat } from \"../../../utils/Stat\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { LayaEnv } from \"../../../../LayaEnv\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n\n/**\n * <code>ShurikenParticleRender</code> 类用于创建3D粒子渲染器。\n */\nexport class ShurikenParticleRenderer extends BaseRender {\n    /** @internal */\n    private _finalGravity: Vector3 = new Vector3();\n    private _dragConstant: Vector2 = new Vector2();\n\n\n    /**@internal */\n    private _renderMode: number;\n    /**@internal */\n    private _mesh: Mesh = null;\n\n    /**@interanl */\n    _particleSystem: ShurikenParticleSystem;\n    /**拉伸广告牌模式摄像机速度缩放,暂不支持。*/\n    stretchedBillboardCameraSpeedScale: number = 0;\n    /**拉伸广告牌模式速度缩放。*/\n    stretchedBillboardSpeedScale: number = 0;\n    /**拉伸广告牌模式长度缩放。*/\n    stretchedBillboardLengthScale: number = 2;\n\n    get particleSystem(): ShurikenParticleSystem {\n        return this._particleSystem;\n    }\n\n    ///**排序模式。*/\n    //public var sortingMode:int;\n\n    /**\n     * 获取渲染模式,0为BILLBOARD、1为STRETCHEDBILLBOARD、2为HORIZONTALBILLBOARD、3为VERTICALBILLBOARD、4为MESH。\n     */\n    get renderMode(): number {\n        return this._renderMode;\n    }\n\n    set renderMode(value: number) {\n        if (this._renderMode !== value) {\n            var defineDatas: ShaderData = this._shaderValues;\n            switch (this._renderMode) {\n                case 0:\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\n                    break;\n                case 1:\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\n                    break;\n                case 2:\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\n                    break;\n                case 3:\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\n                    break;\n                case 4:\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\n                    break;\n            }\n            this._renderMode = value;\n            switch (value) {\n                case 0:\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\n                    break;\n                case 1:\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\n                    break;\n                case 2:\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\n                    break;\n                case 3:\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\n                    break;\n                case 4:\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\n                    break;\n                default:\n                    throw new Error(\"ShurikenParticleRender: unknown renderMode Value.\");\n            }\n            var parSys: ShurikenParticleSystem = this._particleSystem;\n            (parSys) && (parSys._initBufferDatas());\n        }\n    }\n\n    /**\n     * 获取网格渲染模式所使用的Mesh,rendderMode为4时生效。\n     */\n    get mesh(): Mesh {\n        return this._mesh;\n    }\n\n    set mesh(value: Mesh) {\n        if (this._mesh !== value) {\n            (this._mesh) && (this._mesh._removeReference());\n            this._mesh = value;\n            (value) && (value._addReference());\n            this._particleSystem._initBufferDatas();\n        }\n    }\n\n    /**\n     * 创建一个 <code>ShurikenParticleRender</code> 实例。\n     */\n    constructor() {\n        super();\n        this.renderMode = 0;\n        this._supportOctree = false;\n    }\n\n    protected _onAdded(): void {\n        super._onAdded();\n        if (!LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance)) {\n            this._particleSystem = new ShurikenParticleSystem(this);\n        } else\n            this._particleSystem = new ShurikenParticleInstanceSystem(this);\n\n        var elements: RenderElement[] = this._renderElements;\n        var element: RenderElement = elements[0] = new RenderElement();\n        element.setTransform((this.owner as Sprite3D)._transform);\n        element.render = this;\n        element.setGeometry(this._particleSystem);\n        element.material = ShurikenParticleMaterial.defaultMaterial;\n    }\n\n    protected _onEnable(): void {\n        super._onEnable();\n\n        Stat.particleRenderNode++;\n        (this._particleSystem.playOnAwake && LayaEnv.isPlaying) && (this._particleSystem.play());\n    }\n\n    protected _onDisable(): void {\n        super._onDisable();\n\n        Stat.particleRenderNode--;\n        (this._particleSystem.isAlive) && (this._particleSystem.simulate(0, true));\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    protected _calculateBoundingBox(): void {\n        var particleSystem: ShurikenParticleSystem = this._particleSystem;\n        var bounds: Bounds;\n        if (particleSystem._useCustomBounds) {\n            bounds = particleSystem.customBounds;\n            bounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\n        }\n        else if (particleSystem._simulationSupported()) {\n            // todo need update Bounds\n            particleSystem._generateBounds();\n            bounds = particleSystem._bounds;\n            bounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\n            // 在世界坐标下考虑重力影响\n            if (particleSystem.gravityModifier != 0) {\n                var max: Vector3 = this._bounds.getMax();\n                var min: Vector3 = this._bounds.getMin();\n                var gravityOffset: Vector2 = particleSystem._gravityOffset;\n                max.y -= gravityOffset.x;\n                min.y -= gravityOffset.y;\n                this._bounds.setMax(max);\n                this._bounds.setMin(min);\n            }\n        }\n        else {\n            var min: Vector3 = this._bounds.getMin();\n            min.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n            this._bounds.setMin(min);\n            var max: Vector3 = this._bounds.getMax();\n            max.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n            this._bounds.setMax(max);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\n        if (boundFrustum) {\n            if (boundFrustum.intersects(this.bounds)) {\n                if (this._particleSystem.isAlive)\n                    return true;\n                else\n                    return false;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _renderUpdate(context: RenderContext3D, transfrom: Transform3D): void {\n        var particleSystem: ShurikenParticleSystem = this._particleSystem;\n        var sv: ShaderData = this._shaderValues;\n        var transform: Transform3D = (this.owner as Sprite3D).transform;\n        switch (particleSystem.simulationSpace) {\n            case 0: //World\n                break;\n            case 1: //Local\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION, transform.position);\n                sv.setShaderData(ShuriKenParticle3DShaderDeclaration.WORLDROTATION, ShaderDataType.Vector4, transform.rotation);\n                break;\n            default:\n                throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\n        }\n\n        switch (particleSystem.scaleMode) {\n            case 0:\n                var scale: Vector3 = transform.getWorldLossyScale();\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, scale);\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, scale);\n                break;\n            case 1:\n                var localScale: Vector3 = transform.localScale;\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, localScale);\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, localScale);\n                break;\n            case 2:\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, transform.getWorldLossyScale());\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, Vector3.ONE);\n                break;\n        }\n\n        switch (particleSystem.dragType) {\n            case 0:\n                this._dragConstant.setValue(particleSystem.dragSpeedConstantMin, particleSystem.dragSpeedConstantMin);\n                sv.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG, this._dragConstant);\n                break;\n            case 2:\n                this._dragConstant.setValue(particleSystem.dragSpeedConstantMin, particleSystem.dragSpeedConstantMax);\n                sv.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG, this._dragConstant);\n                break;\n            default:\n                this._dragConstant.setValue(0, 0);\n                break;\n        }\n\n        Vector3.scale(Physics3DUtils.gravity, particleSystem.gravityModifier, this._finalGravity);\n        sv.setVector3(ShuriKenParticle3DShaderDeclaration.GRAVITY, this._finalGravity);\n        sv.setInt(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE, particleSystem.simulationSpace);\n        sv.setBool(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION, particleSystem.threeDStartRotation);\n        sv.setInt(ShuriKenParticle3DShaderDeclaration.SCALINGMODE, particleSystem.scaleMode);\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale);\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale);\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.CURRENTTIME, particleSystem._currentTime);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    get bounds(): Bounds {\n        if (this.boundsChange) {\n            this._calculateBoundingBox();\n            this.boundsChange = false;\n        }\n        return this._bounds;\n    }\n\n    /**\n     * @internal\n     * @override\n     */\n    _cloneTo(dest: Component): void {\n        let parRender = dest as ShurikenParticleRenderer;\n        this._particleSystem.cloneTo(parRender._particleSystem);\n        parRender.sharedMaterial = this.sharedMaterial;\n        parRender.renderMode = this.renderMode;\n        parRender.mesh = this.mesh;\n        parRender.stretchedBillboardCameraSpeedScale = this.stretchedBillboardCameraSpeedScale;\n        parRender.stretchedBillboardSpeedScale = this.stretchedBillboardSpeedScale;\n        parRender.stretchedBillboardLengthScale = this.stretchedBillboardLengthScale;\n        parRender.sortingFudge = this.sortingFudge;\n    }\n\n    protected _onDestroy() {\n        (this._mesh) && (this._mesh._removeReference(), this._mesh = null);\n        this._particleSystem.destroy();\n        this._particleSystem = null;\n        super._onDestroy();\n    }\n\n}\n\n\n","import { Node } from \"../../../display/Node\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { Loader } from \"../../../net/Loader\";\nimport { Texture } from \"../../../resource/Texture\";\nimport { Gradient } from \"../Gradient\";\nimport { RenderableSprite3D } from \"../RenderableSprite3D\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { Burst } from \"./module/Burst\";\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\nimport { Emission } from \"./module/Emission\";\nimport { FrameOverTime } from \"./module/FrameOverTime\";\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\nimport { GradientColor } from \"./module/GradientColor\";\nimport { GradientDataInt } from \"./module/GradientDataInt\";\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\nimport { GradientSize } from \"./module/GradientSize\";\nimport { GradientVelocity } from \"./module/GradientVelocity\";\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\nimport { BaseShape } from \"./module/shape/BaseShape\";\nimport { BoxShape } from \"./module/shape/BoxShape\";\nimport { CircleShape } from \"./module/shape/CircleShape\";\nimport { ConeShape } from \"./module/shape/ConeShape\";\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\nimport { SphereShape } from \"./module/shape/SphereShape\";\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\nimport { StartFrame } from \"./module/StartFrame\";\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\nimport { ShurikenParticleMaterial } from \"./ShurikenParticleMaterial\";\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\n\n/**\n * <code>ShuriKenParticle3D</code> 3D粒子。\n */\nexport class ShuriKenParticle3D extends RenderableSprite3D {\n\n\t/** @internal */\n\tprivate _particleSystem: ShurikenParticleSystem;\n\n\t/**\n\t * 粒子系统。\n\t */\n\tget particleSystem(): ShurikenParticleSystem {\n\t\treturn this._particleSystem;\n\t}\n\n\t/**\n\t * 粒子渲染器。\n\t */\n\tget particleRenderer(): ShurikenParticleRenderer {\n\t\treturn <ShurikenParticleRenderer>this._render;\n\t}\n\n\t/**\n\t * 创建一个 <code>Particle3D</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper(null);\n\t\tthis._render = this.addComponent(ShurikenParticleRenderer) as ShurikenParticleRenderer;\n\t\tthis._particleSystem = (this._render as ShurikenParticleRenderer)._particleSystem;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_parseModule(module: any, moduleData: any): void {\n\t\tfor (var t in moduleData) {\n\t\t\tswitch (t) {\n\t\t\t\tcase \"bases\":\n\t\t\t\t\tvar bases = moduleData.bases;\n\t\t\t\t\tfor (var k in bases)\n\t\t\t\t\t\tmodule[k] = bases[k];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"vector2s\":\n\t\t\t\t\tvar vector2s = moduleData.vector2s;\n\t\t\t\t\tfor (var k in vector2s) {\n\t\t\t\t\t\tvar vec2: Vector2 = module[k];\n\t\t\t\t\t\tvar vec2Data: number[] = vector2s[k];\n\t\t\t\t\t\tvec2.setValue(vec2Data[0], vec2Data[1]);\n\t\t\t\t\t\tmodule[k] = vec2;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"vector3s\":\n\t\t\t\t\tvar vector3s = moduleData.vector3s;\n\t\t\t\t\tfor (var k in vector3s) {\n\t\t\t\t\t\tvar vec3: Vector3 = module[k];\n\t\t\t\t\t\tvar vec3Data: number[] = vector3s[k];\n\t\t\t\t\t\tvec3.setValue(vec3Data[0], vec3Data[1], vec3Data[2]);\n\t\t\t\t\t\tmodule[k] = vec3;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"vector4s\":\n\t\t\t\t\tvar vector4s = moduleData.vector4s;\n\t\t\t\t\tfor (var k in vector4s) {\n\t\t\t\t\t\tvar vec4: Vector4 = module[k];\n\t\t\t\t\t\tvar vec4Data: number[] = vector4s[k];\n\t\t\t\t\t\tvec4.setValue(vec4Data[0], vec4Data[1], vec4Data[2], vec4Data[3]);\n\t\t\t\t\t\tmodule[k] = vec4;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"gradientDataNumbers\":\n\t\t\t\t\tvar gradientDataNumbers: object = moduleData.gradientDataNumbers;\n\t\t\t\t\tfor (var k in gradientDataNumbers) {\n\t\t\t\t\t\tvar gradientNumber: GradientDataNumber = module[k];\n\t\t\t\t\t\tvar gradientNumberData: any[] = moduleData[k];\n\t\t\t\t\t\tfor (var i: number = 0, n: number = gradientNumberData.length; i < n; i++) {\n\t\t\t\t\t\t\tvar valueData: any = gradientNumberData[i];\n\t\t\t\t\t\t\tgradientNumber.add(valueData.key, valueData.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodule[k] = gradientNumber;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"resources\":\n\t\t\t\t\tvar resources: any = moduleData.resources;\n\t\t\t\t\tfor (var k in resources) {\n\t\t\t\t\t\tlet res = Loader.getRes(resources[k]);\n\t\t\t\t\t\tif (res && (res instanceof Texture)) {\n\t\t\t\t\t\t\tres = res.bitmap;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodule[k] = res;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"bursts\":\n\t\t\t\t\tvar burstsData: any[] = moduleData.bursts;\n\t\t\t\t\tfor (var i: number = 0, n: number = burstsData.length; i < n; i++) {\n\t\t\t\t\t\tvar brust: any = burstsData[i];\n\t\t\t\t\t\tmodule.addBurst(new Burst(brust.time, brust.min, brust.max));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"randomSeed\":\n\t\t\t\t\tmodule.randomSeed[0] = moduleData.randomSeed;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"shapeType\"://TODO:remove in the fulther\n\t\t\t\tcase \"type\":\n\t\t\t\tcase \"color\":\n\t\t\t\tcase \"size\":\n\t\t\t\tcase \"frame\":\n\t\t\t\tcase \"startFrame\":\n\t\t\t\tcase \"angularVelocity\":\n\t\t\t\tcase \"velocity\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow \"ShurikenParticle3D:unknown type.\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_parse(data: any, spriteMap: any): void {\n\t\tsuper._parse(data, spriteMap);\n\t\tif (data.main) {\n\t\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\n\t\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\n\t\t\tthis._parseModule(particleRender, data.renderer);//Renderer\n\t\t\tthis._parseModule(particleSystem, data.main);//particleSystem\n\t\t\tthis._parseModule(particleSystem.emission, data.emission);//Emission\n\n\t\t\t//Shape\n\t\t\tvar shapeData: any = data.shape;\n\t\t\tif (shapeData) {\n\t\t\t\tvar shape: BaseShape;\n\t\t\t\tswitch (shapeData.shapeType) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tshape = new SphereShape();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tshape = new HemisphereShape();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tshape = new ConeShape();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tshape = new BoxShape();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tshape = new CircleShape();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow \"ShuriKenParticle3D:unknown shape type.\";\n\t\t\t\t}\n\t\t\t\tthis._parseModule(shape, shapeData);\n\t\t\t\tparticleSystem.shape = shape;\n\t\t\t}\n\n\t\t\t//VelocityOverLifetime\n\t\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\n\t\t\tif (velocityOverLifetimeData) {\n\t\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\n\t\t\t\tvar velocity: GradientVelocity;\n\t\t\t\tswitch (velocityData.type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tvar constantData: any[] = velocityData.constant;\n\t\t\t\t\t\tvelocity = GradientVelocity.createByConstant(constantData ? new Vector3(constantData[0], constantData[1], constantData[2]) : new Vector3(0, 0, 0));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\n\t\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(constantMinData ? new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]) : new Vector3(0, 0, 0), constantMaxData ? new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]) : new Vector3(0, 0, 0));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\n\t\t\t\tthis._parseModule(velocityOverLifetime, velocityOverLifetimeData);\n\t\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\n\t\t\t}\n\n\t\t\t//ColorOverLifetime\n\t\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\n\n\t\t\tif (colorOverLifetimeData) {\n\t\t\t\tvar colorData: any = colorOverLifetimeData.color;\n\t\t\t\tlet maxKeyCount = colorData.maxKeyCount;\n\t\t\t\tvar color: GradientColor;\n\t\t\t\tswitch (colorData.type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tvar constColorData: any[] = colorData.constant;\n\t\t\t\t\t\tcolor = GradientColor.createByConstant(constColorData ? new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]) : new Vector4(0, 0, 0, 0));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient, maxKeyCount));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\n\t\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(minConstColorData ? new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]) : new Vector4(0, 0, 0, 0), minConstColorData ? new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]) : new Vector4(0, 0, 0, 0));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin, maxKeyCount), this._initParticleColor(colorData.gradientMax, maxKeyCount));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\n\t\t\t\tthis._parseModule(colorOverLifetime, colorOverLifetimeData);\n\t\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\n\t\t\t}\n\n\t\t\t//SizeOverLifetime\n\t\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\n\t\t\tif (sizeOverLifetimeData) {\n\t\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\n\t\t\t\tvar size: GradientSize;\n\t\t\t\tswitch (sizeData.type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tif (sizeData.separateAxes) {\n\t\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif (sizeData.separateAxes) {\n\t\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\n\t\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(constantMinSeparateData ? new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]) : new Vector3(0, 0, 0), constantMaxSeparateData ? new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]) : new Vector3(0, 0, 0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin || 0, sizeData.constantMax || 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tif (sizeData.separateAxes) {\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\n\t\t\t\tthis._parseModule(sizeOverLifetime, sizeOverLifetimeData);\n\t\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\n\t\t\t}\n\n\t\t\t//RotationOverLifetime\n\t\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\n\t\t\tif (rotationOverLifetimeData) {\n\t\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\n\t\t\t\tvar angularVelocity: GradientAngularVelocity;\n\t\t\t\tswitch (angularVelocityData.type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(conSep ? new Vector3(conSep[0], conSep[1], conSep[2]) : new Vector3(0, 0, Math.PI / 4));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant || Math.PI / 4);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\n\t\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(minSep ? new Vector3(minSep[0], minSep[1], minSep[2]) : new Vector3(0, 0, 0), maxSep ? new Vector3(maxSep[0], maxSep[1], maxSep[2]) : new Vector3(0, 0, Math.PI / 4));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin || 0, angularVelocityData.constantMax || Math.PI / 4);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\t\t//TODO:待补充\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\n\t\t\t\tthis._parseModule(rotationOverLifetime, rotationOverLifetimeData);\n\t\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\n\t\t\t}\n\n\t\t\t//TextureSheetAnimation\n\t\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\n\t\t\tif (textureSheetAnimationData) {\n\t\t\t\tvar frameData: any = textureSheetAnimationData.frame;\n\t\t\t\tvar frameOverTime: FrameOverTime;\n\t\t\t\tswitch (frameData.type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\n\t\t\t\tvar startFrame: StartFrame;\n\t\t\t\tswitch (startFrameData.type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\n\t\t\t\tthis._parseModule(textureSheetAnimation, textureSheetAnimationData);\n\t\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\n\t\t\t}\n\t\t}\n\t\telse {//legacy\n\t\t\tthis._parseOld(data);\n\t\t}\n\t}\n\n\t/**\n\t * <p>销毁此对象。</p>\n\t * @param\tdestroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。\n\t * @override\n\t */\n\tdestroy(destroyChild: boolean = true): void {\n\t\tif (this._destroyed)\n\t\t\treturn;\n\t\tsuper.destroy(destroyChild);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Node {\n\t\treturn new Sprite3D();\n\t}\n\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate _parseOld(data: any): void {\n\t\tconst anglelToRad: number = Math.PI / 180.0;\n\t\tvar i: number, n: number;\n\n\t\t//Render\n\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\n\t\tvar material: ShurikenParticleMaterial;\n\n\t\tvar materialData: any = data.material;\n\t\t(materialData) && (material = Loader.getRes(materialData.path));\n\n\t\tparticleRender.sharedMaterial = material;\n\t\tvar meshPath: string = data.meshPath;\n\t\t(meshPath) && (particleRender.mesh = Loader.getRes(meshPath));\n\n\t\tparticleRender.renderMode = data.renderMode;\n\t\tparticleRender.stretchedBillboardCameraSpeedScale = data.stretchedBillboardCameraSpeedScale;\n\t\tparticleRender.stretchedBillboardSpeedScale = data.stretchedBillboardSpeedScale;\n\t\tparticleRender.stretchedBillboardLengthScale = data.stretchedBillboardLengthScale;\n\t\tparticleRender.sortingFudge = data.sortingFudge ? data.sortingFudge : 0.0;\n\n\t\t//particleSystem\n\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\n\t\tparticleSystem.isPerformanceMode = data.isPerformanceMode;\n\n\t\tparticleSystem.duration = data.duration;\n\t\tparticleSystem.looping = data.looping;\n\t\tparticleSystem.prewarm = data.prewarm;\n\n\t\tparticleSystem.startDelayType = data.startDelayType;\n\t\tparticleSystem.startDelay = data.startDelay;\n\t\tparticleSystem.startDelayMin = data.startDelayMin;\n\t\tparticleSystem.startDelayMax = data.startDelayMax;\n\n\t\tparticleSystem.startLifetimeType = data.startLifetimeType;\n\t\tparticleSystem.startLifetimeConstant = data.startLifetimeConstant;\n\t\tparticleSystem.startLifeTimeGradient = ShuriKenParticle3D._initStartLife(data.startLifetimeGradient);\n\t\tparticleSystem.startLifetimeConstantMin = data.startLifetimeConstantMin;\n\t\tparticleSystem.startLifetimeConstantMax = data.startLifetimeConstantMax;\n\t\tparticleSystem.startLifeTimeGradientMin = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMin);\n\t\tparticleSystem.startLifeTimeGradientMax = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMax);\n\n\t\tparticleSystem.startSpeedType = data.startSpeedType;\n\t\tparticleSystem.startSpeedConstant = data.startSpeedConstant;\n\t\tparticleSystem.startSpeedConstantMin = data.startSpeedConstantMin;\n\t\tparticleSystem.startSpeedConstantMax = data.startSpeedConstantMax;\n\n\t\t//parse Drag TODO:\n\n\t\tparticleSystem.threeDStartSize = data.threeDStartSize;\n\t\tparticleSystem.startSizeType = data.startSizeType;\n\t\tparticleSystem.startSizeConstant = data.startSizeConstant;\n\t\tvar startSizeConstantSeparateArray: any[] = data.startSizeConstantSeparate;\n\t\tvar startSizeConstantSeparateElement: Vector3 = particleSystem.startSizeConstantSeparate;\n\t\tstartSizeConstantSeparateElement.x = startSizeConstantSeparateArray[0];\n\t\tstartSizeConstantSeparateElement.y = startSizeConstantSeparateArray[1];\n\t\tstartSizeConstantSeparateElement.z = startSizeConstantSeparateArray[2];\n\t\tparticleSystem.startSizeConstantMin = data.startSizeConstantMin;\n\t\tparticleSystem.startSizeConstantMax = data.startSizeConstantMax;\n\t\tvar startSizeConstantMinSeparateArray: any[] = data.startSizeConstantMinSeparate;\n\t\tvar startSizeConstantMinSeparateElement: Vector3 = particleSystem.startSizeConstantMinSeparate;\n\t\tstartSizeConstantMinSeparateElement.x = startSizeConstantMinSeparateArray[0];\n\t\tstartSizeConstantMinSeparateElement.y = startSizeConstantMinSeparateArray[1];\n\t\tstartSizeConstantMinSeparateElement.z = startSizeConstantMinSeparateArray[2];\n\t\tvar startSizeConstantMaxSeparateArray: any[] = data.startSizeConstantMaxSeparate;\n\t\tvar startSizeConstantMaxSeparateElement: Vector3 = particleSystem.startSizeConstantMaxSeparate;\n\t\tstartSizeConstantMaxSeparateElement.x = startSizeConstantMaxSeparateArray[0];\n\t\tstartSizeConstantMaxSeparateElement.y = startSizeConstantMaxSeparateArray[1];\n\t\tstartSizeConstantMaxSeparateElement.z = startSizeConstantMaxSeparateArray[2];\n\n\t\tparticleSystem.threeDStartRotation = data.threeDStartRotation;\n\t\tparticleSystem.startRotationType = data.startRotationType;\n\t\tparticleSystem.startRotationConstant = data.startRotationConstant * anglelToRad;\n\t\tvar startRotationConstantSeparateArray: any[] = data.startRotationConstantSeparate;\n\t\tvar startRotationConstantSeparateElement: Vector3 = particleSystem.startRotationConstantSeparate;\n\t\tstartRotationConstantSeparateElement.x = startRotationConstantSeparateArray[0] * anglelToRad;\n\t\tstartRotationConstantSeparateElement.y = startRotationConstantSeparateArray[1] * anglelToRad;\n\t\tstartRotationConstantSeparateElement.z = startRotationConstantSeparateArray[2] * anglelToRad;\n\t\tparticleSystem.startRotationConstantMin = data.startRotationConstantMin * anglelToRad;\n\t\tparticleSystem.startRotationConstantMax = data.startRotationConstantMax * anglelToRad;\n\t\tvar startRotationConstantMinSeparateArray: any[] = data.startRotationConstantMinSeparate;\n\t\tvar startRotationConstantMinSeparateElement: Vector3 = particleSystem.startRotationConstantMinSeparate;\n\t\tstartRotationConstantMinSeparateElement.x = startRotationConstantMinSeparateArray[0] * anglelToRad;\n\t\tstartRotationConstantMinSeparateElement.y = startRotationConstantMinSeparateArray[1] * anglelToRad;\n\t\tstartRotationConstantMinSeparateElement.z = startRotationConstantMinSeparateArray[2] * anglelToRad;\n\t\tvar startRotationConstantMaxSeparateArray: any[] = data.startRotationConstantMaxSeparate;\n\t\tvar startRotationConstantMaxSeparateElement: Vector3 = particleSystem.startRotationConstantMaxSeparate;\n\t\tstartRotationConstantMaxSeparateElement.x = startRotationConstantMaxSeparateArray[0] * anglelToRad;\n\t\tstartRotationConstantMaxSeparateElement.y = startRotationConstantMaxSeparateArray[1] * anglelToRad;\n\t\tstartRotationConstantMaxSeparateElement.z = startRotationConstantMaxSeparateArray[2] * anglelToRad;\n\n\t\tparticleSystem.randomizeRotationDirection = data.randomizeRotationDirection;\n\n\t\tparticleSystem.startColorType = data.startColorType;\n\t\tvar startColorConstantArray: any[] = data.startColorConstant;\n\t\tvar startColorConstantElement: Vector4 = particleSystem.startColorConstant;\n\t\tstartColorConstantElement.x = startColorConstantArray[0];\n\t\tstartColorConstantElement.y = startColorConstantArray[1];\n\t\tstartColorConstantElement.z = startColorConstantArray[2];\n\t\tstartColorConstantElement.w = startColorConstantArray[3];\n\t\tvar startColorConstantMinArray: any[] = data.startColorConstantMin;\n\t\tvar startColorConstantMinElement: Vector4 = particleSystem.startColorConstantMin;\n\t\tstartColorConstantMinElement.x = startColorConstantMinArray[0];\n\t\tstartColorConstantMinElement.y = startColorConstantMinArray[1];\n\t\tstartColorConstantMinElement.z = startColorConstantMinArray[2];\n\t\tstartColorConstantMinElement.w = startColorConstantMinArray[3];\n\t\tvar startColorConstantMaxArray: any[] = data.startColorConstantMax;\n\t\tvar startColorConstantMaxElement: Vector4 = particleSystem.startColorConstantMax;\n\t\tstartColorConstantMaxElement.x = startColorConstantMaxArray[0];\n\t\tstartColorConstantMaxElement.y = startColorConstantMaxArray[1];\n\t\tstartColorConstantMaxElement.z = startColorConstantMaxArray[2];\n\t\tstartColorConstantMaxElement.w = startColorConstantMaxArray[3];\n\n\t\tparticleSystem.gravityModifier = data.gravityModifier;\n\n\t\tparticleSystem.simulationSpace = data.simulationSpace;\n\t\t(data.simulationSpeed !== undefined) && (particleSystem.simulationSpeed = data.simulationSpeed);\n\n\t\tparticleSystem.scaleMode = data.scaleMode;\n\n\t\tparticleSystem.playOnAwake = data.playOnAwake;\n\t\tparticleSystem.maxParticles = data.maxParticles;\n\n\t\tvar autoRandomSeed: any = data.autoRandomSeed;\n\t\t(autoRandomSeed != null) && (particleSystem.autoRandomSeed = autoRandomSeed);\n\t\tvar randomSeed: any = data.randomSeed;\n\t\t(randomSeed != null) && (particleSystem.randomSeed[0] = randomSeed);\n\n\t\t//Emission\n\t\tvar emissionData: any = data.emission;\n\t\tvar emission: Emission = particleSystem.emission;\n\t\tif (emissionData) {\n\t\t\temission.emissionRate = emissionData.emissionRate;\n\t\t\tvar burstsData: any[] = emissionData.bursts;\n\t\t\tif (burstsData)\n\t\t\t\tfor (i = 0, n = burstsData.length; i < n; i++) {\n\t\t\t\t\tvar brust: any = burstsData[i];\n\t\t\t\t\temission.addBurst(new Burst(brust.time, brust.min, brust.max));\n\t\t\t\t}\n\t\t\temission.enable = emissionData.enable;\n\t\t} else {\n\t\t\temission.enable = false;\n\t\t}\n\n\t\t//Shape\n\t\tvar shapeData: any = data.shape;\n\t\tif (shapeData) {\n\t\t\tvar shape: BaseShape;\n\t\t\tswitch (shapeData.shapeType) {\n\t\t\t\tcase 0:\n\t\t\t\t\tvar sphereShape: SphereShape;\n\t\t\t\t\tshape = sphereShape = new SphereShape();\n\t\t\t\t\tsphereShape.radius = shapeData.sphereRadius;\n\t\t\t\t\tsphereShape.emitFromShell = shapeData.sphereEmitFromShell;\n\t\t\t\t\tsphereShape.randomDirection = shapeData.sphereRandomDirection;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tvar hemiSphereShape: HemisphereShape;\n\t\t\t\t\tshape = hemiSphereShape = new HemisphereShape();\n\t\t\t\t\themiSphereShape.radius = shapeData.hemiSphereRadius;\n\t\t\t\t\themiSphereShape.emitFromShell = shapeData.hemiSphereEmitFromShell;\n\t\t\t\t\themiSphereShape.randomDirection = shapeData.hemiSphereRandomDirection;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tvar coneShape: ConeShape;\n\t\t\t\t\tshape = coneShape = new ConeShape();\n\t\t\t\t\tconeShape.angle = shapeData.coneAngle * anglelToRad;\n\t\t\t\t\tconeShape.radius = shapeData.coneRadius;\n\t\t\t\t\tconeShape.length = shapeData.coneLength;\n\t\t\t\t\tconeShape.emitType = shapeData.coneEmitType;\n\t\t\t\t\tconeShape.randomDirection = shapeData.coneRandomDirection;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tvar boxShape: BoxShape;\n\t\t\t\t\tshape = boxShape = new BoxShape();\n\t\t\t\t\tboxShape.x = shapeData.boxX;\n\t\t\t\t\tboxShape.y = shapeData.boxY;\n\t\t\t\t\tboxShape.z = shapeData.boxZ;\n\t\t\t\t\tboxShape.randomDirection = shapeData.boxRandomDirection;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\tvar circleShape: CircleShape;\n\t\t\t\t\tshape = circleShape = new CircleShape();\n\t\t\t\t\tcircleShape.radius = shapeData.circleRadius;\n\t\t\t\t\tcircleShape.arc = shapeData.circleArc * anglelToRad;\n\t\t\t\t\tcircleShape.emitFromEdge = shapeData.circleEmitFromEdge;\n\t\t\t\t\tcircleShape.randomDirection = shapeData.circleRandomDirection;\n\t\t\t\t\tbreak;\n\t\t\t\t/**\n\t\t\t\t * ------------------------临时调整，待日后完善-------------------------------------\n\t\t\t\t */\n\t\t\t\tdefault:\n\t\t\t\t\tvar tempShape: CircleShape;\n\t\t\t\t\tshape = tempShape = new CircleShape();\n\t\t\t\t\ttempShape.radius = shapeData.circleRadius;\n\t\t\t\t\ttempShape.arc = shapeData.circleArc * anglelToRad;\n\t\t\t\t\ttempShape.emitFromEdge = shapeData.circleEmitFromEdge;\n\t\t\t\t\ttempShape.randomDirection = shapeData.circleRandomDirection;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tshape.enable = shapeData.enable;\n\t\t\tparticleSystem.shape = shape;\n\t\t}\n\n\t\t//VelocityOverLifetime\n\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\n\t\tif (velocityOverLifetimeData) {\n\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\n\t\t\tvar velocity: GradientVelocity;\n\t\t\tswitch (velocityData.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tvar constantData: any[] = velocityData.constant;\n\t\t\t\t\tvelocity = GradientVelocity.createByConstant(new Vector3(constantData[0], constantData[1], constantData[2]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\n\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]), new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\n\t\t\tvelocityOverLifetime.space = velocityOverLifetimeData.space;\n\t\t\tvelocityOverLifetime.enable = velocityOverLifetimeData.enable;\n\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\n\t\t}\n\n\t\t//ColorOverLifetime\n\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\n\t\tif (colorOverLifetimeData) {\n\t\t\tvar colorData: any = colorOverLifetimeData.color;\n\t\t\tvar color: GradientColor;\n\t\t\tswitch (colorData.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tvar constColorData: any[] = colorData.constant;\n\t\t\t\t\tcolor = GradientColor.createByConstant(new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\n\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]), new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin), this._initParticleColor(colorData.gradientMax));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\n\t\t\tcolorOverLifetime.enable = colorOverLifetimeData.enable;\n\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\n\t\t}\n\n\t\t//SizeOverLifetime\n\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\n\t\tif (sizeOverLifetimeData) {\n\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\n\t\t\tvar size: GradientSize;\n\t\t\tswitch (sizeData.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tif (sizeData.separateAxes) {\n\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tif (sizeData.separateAxes) {\n\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\n\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]), new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin, sizeData.constantMax);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tif (sizeData.separateAxes) {\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\n\t\t\tsizeOverLifetime.enable = sizeOverLifetimeData.enable;\n\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\n\t\t}\n\n\t\t//RotationOverLifetime\n\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\n\t\tif (rotationOverLifetimeData) {\n\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\n\t\t\tvar angularVelocity: GradientAngularVelocity;\n\t\t\tswitch (angularVelocityData.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(new Vector3(conSep[0] * anglelToRad, conSep[1] * anglelToRad, conSep[2] * anglelToRad));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant * anglelToRad);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\n\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(new Vector3(minSep[0] * anglelToRad, minSep[1] * anglelToRad, minSep[2] * anglelToRad), new Vector3(maxSep[0] * anglelToRad, maxSep[1] * anglelToRad, maxSep[2] * anglelToRad));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin * anglelToRad, angularVelocityData.constantMax * anglelToRad);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\n\t\t\t\t\t\t//TODO:待补充\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\n\t\t\trotationOverLifetime.enable = rotationOverLifetimeData.enable;\n\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\n\t\t}\n\n\t\t//TextureSheetAnimation\n\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\n\t\tif (textureSheetAnimationData) {\n\t\t\tvar frameData: any = textureSheetAnimationData.frame;\n\t\t\tvar frameOverTime: FrameOverTime;\n\t\t\tswitch (frameData.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\n\t\t\tvar startFrame: StartFrame;\n\t\t\tswitch (startFrameData.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\n\t\t\ttextureSheetAnimation.enable = textureSheetAnimationData.enable;\n\t\t\tvar tilesData: any[] = textureSheetAnimationData.tiles;\n\t\t\ttextureSheetAnimation.tiles = new Vector2(tilesData[0], tilesData[1]);\n\t\t\ttextureSheetAnimation.type = textureSheetAnimationData.type;\n\t\t\ttextureSheetAnimation.randomRow = textureSheetAnimationData.randomRow;\n\t\t\tvar rowIndex: any = textureSheetAnimationData.rowIndex;\n\t\t\t(rowIndex !== undefined) && (textureSheetAnimation.rowIndex = rowIndex);\n\t\t\ttextureSheetAnimation.cycles = textureSheetAnimationData.cycles;\n\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate _initParticleColor(gradientColorData: any, maxkeyCount: number = 4): Gradient {\n\t\tvar gradientColor: Gradient = new Gradient(maxkeyCount, maxkeyCount);\n\t\tif (!gradientColorData) {\n\t\t\tgradientColor.addColorAlpha(0, 1);\n\t\t\tgradientColor.addColorAlpha(1, 1);\n\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\n\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\n\t\t}\n\t\telse {\n\t\t\tvar alphasData: any[] = gradientColorData.alphas;\n\t\t\tvar i: number, n: number;\n\t\t\tif (!alphasData) {//兼容默认值\n\t\t\t\tgradientColor.addColorAlpha(0, 1);\n\t\t\t\tgradientColor.addColorAlpha(1, 1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (i = 0, n = alphasData.length; i < n; i++) {\n\t\t\t\t\tif (i == maxkeyCount - 1 && n > maxkeyCount) {\n\t\t\t\t\t\ti = n - 1;\n\t\t\t\t\t\tconsole.warn(`GradientDataColor warning:alpha data length is large than ${maxkeyCount}, will ignore the middle data.`);\n\t\t\t\t\t}\n\t\t\t\t\tvar alphaData: any = alphasData[i];\n\t\t\t\t\tgradientColor.addColorAlpha(alphaData.key, alphaData.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar rgbsData: any[] = gradientColorData.rgbs;\n\t\t\tif (!rgbsData) {//兼容默认值\n\t\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\n\t\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (i = 0, n = rgbsData.length; i < n; i++) {\n\t\t\t\t\tif (i == maxkeyCount - 1 && n > maxkeyCount) {\n\t\t\t\t\t\ti = n - 1;\n\t\t\t\t\t\tconsole.warn(`GradientDataColor warning:rgb data length is large than ${maxkeyCount}, will ignore the middle data.`);\n\t\t\t\t\t}\n\t\t\t\t\tvar rgbData: any = rgbsData[i];\n\t\t\t\t\tvar rgbValue: any[] = rgbData.value;\n\t\t\t\t\tgradientColor.addColorRGB(rgbData.key, new Color(rgbValue[0], rgbValue[1], rgbValue[2], 1.0));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn gradientColor;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate _initParticleFrame(overTimeFramesData: any): GradientDataInt {\n\t\tvar overTimeFrame: GradientDataInt = new GradientDataInt();\n\t\tif (overTimeFramesData) {\n\t\t\tvar framesData: any[] = overTimeFramesData.frames;\n\t\t\tfor (var i: number = 0, n: number = framesData.length; i < n; i++) {\n\t\t\t\tvar frameData: any = framesData[i];\n\t\t\t\toverTimeFrame.add(frameData.key, frameData.value);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\toverTimeFrame.add(0, 0);\n\t\t\toverTimeFrame.add(1, 1);\n\t\t}\n\n\t\treturn overTimeFrame;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate static _initStartLife(gradientData: any): GradientDataNumber {\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\n\t\tvar startLifetimesData: any[] = gradientData.startLifetimes;\n\t\tfor (var i: number = 0, n: number = startLifetimesData.length; i < n; i++) {\n\t\t\tvar valueData: any = startLifetimesData[i];\n\t\t\tgradient.add(valueData.key, valueData.value);\n\t\t}\n\t\treturn gradient\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate _initParticleVelocity(gradientData: any): GradientDataNumber {\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\n\t\tvar velocitysData: any[] = gradientData.velocitys;\n\t\tfor (var i: number = 0, n: number = velocitysData.length; i < n; i++) {\n\t\t\tvar valueData: any = velocitysData[i];\n\t\t\tgradient.add(valueData.key, valueData.value);\n\t\t}\n\t\treturn gradient;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate _initParticleSize(gradientSizeData: any): GradientDataNumber {\n\t\tvar gradientSize: GradientDataNumber = new GradientDataNumber();\n\t\tif (gradientSizeData) {\n\t\t\tvar sizesData: any[] = gradientSizeData.sizes;\n\t\t\tfor (var i: number = 0, n: number = sizesData.length; i < n; i++) {\n\t\t\t\tvar valueData: any = sizesData[i];\n\t\t\t\tgradientSize.add(valueData.key, valueData.value);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tgradientSize.add(0, 0);\n\t\t\tgradientSize.add(1, 1);\n\t\t}\n\t\treturn gradientSize;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @internal\n\t */\n\tprivate _initParticleRotation(gradientData: any): GradientDataNumber {\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\n\t\tvar angularVelocitysData: any[] = gradientData.angularVelocitys;\n\t\tfor (var i: number = 0, n: number = angularVelocitysData.length; i < n; i++) {\n\t\t\tvar valueData: any = angularVelocitysData[i];\n\t\t\tgradient.add(valueData.key, valueData.value / 180.0 * Math.PI);\n\t\t}\n\t\treturn gradient;\n\t}\n\n}\n\n\n","import { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\n\nexport class SkinnedMeshSprite3DShaderDeclaration {\n\t/**精灵级着色器宏定义,蒙皮动画。*/\n\tstatic SHADERDEFINE_BONE: ShaderDefine;\n\tstatic SHADERDEFINE_SIMPLEBONE:ShaderDefine;\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { SkinRenderElementOBJ } from \"../../RenderObjs/RenderObj/SkinRenderElementOBJ\";\nimport { SkinnedMeshRenderer } from \"../SkinnedMeshRenderer\";\nimport { RenderElement } from \"./RenderElement\"\n/**\n * @internal\n */\nexport class SkinRenderElement extends RenderElement{\n\t/**\n\t * 可提交底层的渲染节点\n\t */\n\t_renderElementOBJ:SkinRenderElementOBJ;\n\n\n    /**@internal */\n\tset render(value:SkinnedMeshRenderer){\n\t\tthis._baseRender = value;\n\t\tthis._renderElementOBJ._renderShaderData = value._shaderValues;\n\t}\n\n    get render():SkinnedMeshRenderer{\n\t\treturn this._baseRender as SkinnedMeshRenderer;\n\t}\n\n    setSkinData(value:Float32Array[]){\n        this._renderElementOBJ.skinnedData = value;\n    }\n\n    constructor(){\n        super();\n    }\n\n    protected _createRenderElementOBJ(){\n\t\tthis._renderElementOBJ = LayaGL.renderOBJCreate.createSkinRenderElement() as SkinRenderElementOBJ;\n\t}\n\n    _render(context:IRenderContext3D): void {\n\t\tthis._renderElementOBJ._render(context);\n    }\n}","import { Event } from \"../../events/Event\";\nimport { Stat } from \"../../utils/Stat\";\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\";\nimport { SubMesh } from \"../resource/models/SubMesh\";\nimport { Utils3D } from \"../utils/Utils3D\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { Sprite3D } from \"./Sprite3D\";\nimport { Transform3D } from \"./Transform3D\";\nimport { RenderContext3D } from \"./render/RenderContext3D\";\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\nimport { Component } from \"../../components/Component\";\nimport { SkinRenderElement } from \"./render/SkinRenderElement\";\nimport { Material } from \"./material/Material\";\nimport { BlinnPhongMaterial } from \"./material/BlinnPhongMaterial\";\nimport { Scene3D } from \"./scene/Scene3D\";\nimport { Bounds } from \"../math/Bounds\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\n/**\n * <code>SkinMeshRenderer</code> 类用于蒙皮渲染器。\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n\n    /**@internal */\n    protected _cacheMesh: Mesh;\n\n    _bones: Sprite3D[] = [];\n\n    /**@internal */\n    _renderElements: SkinRenderElement[];\n    /** @internal */\n    _skinnedData: any[];\n    /** @internal */\n    private _skinnedDataLoopMarks: Uint32Array;\n    /**@internal */\n    protected _localBounds: Bounds;\n    // /**@internal */\n    // protected _cacheAnimator: Animator;\n    /**@internal */\n    protected _cacheRootBone: Sprite3D;\n\n    /**@internal */\n    protected _inverseBindPosesBufferForNative: Float32Array = null;\n\n    /**@internal */\n    protected _skinnedMatrixCachesBufferForNative: Int32Array = null;\n    /**@internal */\n    protected _bonesTransformForNative: Transform3D[] = null;\n    /**\n     * 局部边界。\n     */\n    get localBounds(): Bounds {\n        return this._localBounds;\n    }\n\n    set localBounds(value: Bounds) {\n        this._localBounds = value;\n        this.geometryBounds = this._localBounds;\n    }\n\n    /**\n     * 根节点。\n     */\n    get rootBone(): Sprite3D {\n        return this._cacheRootBone;\n    }\n\n    set rootBone(value: Sprite3D) {\n        if (this._cacheRootBone != value) {\n            if (this._cacheRootBone)\n                this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\n            else\n                (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\n\n            if (value)\n                value.transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\n            else\n                (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\n\n            this._cacheRootBone = value;\n            this._onWorldMatNeedChange(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE);\n\n            let count = this._renderElements.length;\n            for (var i: number = 0; i < count; i++) {\n                var renderElement: SkinRenderElement = this._renderElements[i];\n                renderElement.setTransform(value.transform);\n            }\n        }\n    }\n\n    /**\n     * 用于蒙皮的骨骼。\n     */\n    get bones(): Sprite3D[] {\n        return this._bones;\n    }\n\n    /**\n     * 创建一个 <code>SkinnedMeshRender</code> 实例。\n     */\n    constructor() {\n        super();\n        this._localBounds = new Bounds(Vector3.ZERO, Vector3.ZERO);\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\n    }\n\n\n\n\n    protected _computeSkinnedData(): void {\n        if (this._cacheMesh) {\n            var bindPoses: Matrix4x4[] = this._cacheMesh._inverseBindPoses;\n            var pathMarks: skinnedMatrixCache[] = this._cacheMesh._skinnedMatrixCaches;\n            for (var i: number = 0, n: number = this._cacheMesh.subMeshCount; i < n; i++) {\n                var subMeshBoneIndices: Uint16Array[] = ((<SubMesh>this._cacheMesh.getSubMesh(i)))._boneIndicesList;\n                var subData: Float32Array[] = this._skinnedData[i];\n                for (var j: number = 0, m: number = subMeshBoneIndices.length; j < m; j++) {\n                    var boneIndices: Uint16Array = subMeshBoneIndices[j];\n                    this._computeSubSkinnedData(bindPoses, boneIndices, subData[j], pathMarks);\n                }\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _computeSubSkinnedData(bindPoses: Matrix4x4[], boneIndices: Uint16Array, data: Float32Array, matrixCaches: skinnedMatrixCache[]): void {\n        for (let k: number = 0, q: number = boneIndices.length; k < q; k++) {\n            let index: number = boneIndices[k];\n            if (this._skinnedDataLoopMarks[index] === Stat.loopCount) {\n                let c: skinnedMatrixCache = matrixCaches[index];\n                let preData: Float32Array = this._skinnedData[c.subMeshIndex][c.batchIndex];\n                let srcIndex: number = c.batchBoneIndex * 16;\n                let dstIndex: number = k * 16;\n                for (let d: number = 0; d < 16; d++)\n                    data[dstIndex + d] = preData[srcIndex + d];\n            } else {\n                let bone = this._bones[index];\n                if (bone)\n                    Utils3D._mulMatrixArray(bone.transform.worldMatrix.elements, bindPoses[index].elements, 0, data, k * 16);\n                this._skinnedDataLoopMarks[index] = Stat.loopCount;\n            }\n        }\n    }\n\n    protected _computeSkinnedDataForNative(): void {\n        if (this._cacheMesh) {\n            var bindPoses: Matrix4x4[] = this._cacheMesh._inverseBindPoses;\n            var pathMarks: skinnedMatrixCache[] = this._cacheMesh._skinnedMatrixCaches;\n            if (this._inverseBindPosesBufferForNative == null) {\n                this._inverseBindPosesBufferForNative = new Float32Array(bindPoses.length * 16);\n                var offset: number = 0;\n                for (var i: number = 0, n: number = bindPoses.length; i < n; i++) {\n                    this._inverseBindPosesBufferForNative.set(bindPoses[i].elements, offset);\n                    offset += 16;\n                }\n            }\n            if (this._skinnedMatrixCachesBufferForNative == null) {\n                this._skinnedMatrixCachesBufferForNative = new Int32Array(pathMarks.length * 3);\n                var j: number = 0;\n                for (var i: number = 0, n: number = pathMarks.length; i < n; i++) {\n                    if (!pathMarks[i]) {\n                        break;\n                    }\n                    this._skinnedMatrixCachesBufferForNative[j] = pathMarks[i].subMeshIndex;\n                    this._skinnedMatrixCachesBufferForNative[j + 1] = pathMarks[i].batchIndex;\n                    this._skinnedMatrixCachesBufferForNative[j + 2] = pathMarks[i].batchBoneIndex;\n                    j += 3;\n                }\n            }\n            if (this._bonesTransformForNative == null) {\n                this._bonesTransformForNative = [];\n                for (var i: number = 0, n: number = this._bones.length; i < n; i++) {\n                    let bone = this._bones[i]; \n                    if (bone) {\n                        this._bonesTransformForNative[i] = (bone.transform as any)._nativeObj;\n                    }\n                    else {\n                        this._bonesTransformForNative[i] = null;\n                    }\n                } \n            }\n        \n            for (var i: number = 0, n: number = this._cacheMesh.subMeshCount; i < n; i++) {\n                var subMeshBoneIndices: Uint16Array[] = ((<SubMesh>this._cacheMesh.getSubMesh(i)))._boneIndicesList;\n                var subData: Float32Array[] = this._skinnedData[i];\n                for (var j: number = 0, m: number = subMeshBoneIndices.length; j < m; j++) {\n                    var boneIndices: Uint16Array = subMeshBoneIndices[j];\n                    (window as any).conch.computeSubSkinnedDataForNative(this._inverseBindPosesBufferForNative, boneIndices, subData[j], this._skinnedMatrixCachesBufferForNative, this._bonesTransformForNative, this._skinnedDataLoopMarks, this._skinnedData);\n                }\n            }\n        }\n    }\n\n    /**\n     *@inheritDoc\n     *@override\n     *@internal\n     */\n    _createRenderElement(): SkinRenderElement {\n        let renderelement = new SkinRenderElement();\n        return renderelement;\n    }\n    /**\n     * @internal\n     */\n    _onSkinMeshChange(mesh: Mesh): void {\n        if (mesh && this._mesh != mesh) {\n            this._changeVertexDefine(mesh);\n            this._mesh = mesh;\n            var count: number = mesh.subMeshCount;\n            this._renderElements.length = count;\n            for (var i: number = 0; i < count; i++) {\n                var renderElement: SkinRenderElement = this._renderElements[i];\n                if (!renderElement) {\n                    var material: Material = this.sharedMaterials[i];\n                    renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\n                    if (this._cacheRootBone) {\n                        renderElement.setTransform(this._cacheRootBone._transform);\n                    } else {\n                        renderElement.setTransform((this.owner as Sprite3D)._transform);\n                    }\n                    renderElement.render = this;\n                    renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\n                }\n                renderElement.setGeometry(mesh.getSubMesh(i));\n            }\n        } else if (!mesh) {\n            this._renderElements.length = 0;\n            this._mesh = null;\n            this._changeVertexDefine(null);\n        }\n        this.boundsChange = true;\n        // if (this._octreeNode && this._indexInOctreeMotionList === -1) {\n        // \tthis._octreeNode.getManagerNode().addMotionObject(this);\n        // }\n    }\n    /**\n    *@inheritDoc\n    *@override\n    *@internal\n    */\n    _onMeshChange(value: Mesh): void {\n        this._onSkinMeshChange(value);\n        if (!value)\n            return;\n        this._cacheMesh = (<Mesh>value);\n\n        var subMeshCount: number = value.subMeshCount;\n        this._skinnedData = [];\n        this._skinnedDataLoopMarks = new Uint32Array(value._inverseBindPoses.length);\n        for (var i: number = 0; i < subMeshCount; i++) {\n            var subBoneIndices: Uint16Array[] = ((<SubMesh>value.getSubMesh(i)))._boneIndicesList;\n            var subCount: number = subBoneIndices.length;\n            var subData: Float32Array[] = this._skinnedData[i] = [];\n            for (var j: number = 0; j < subCount; j++)\n                subData[j] = new Float32Array(subBoneIndices[j].length * 16);\n            this._renderElements[i].setSkinData(subData);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    protected _calculateBoundingBox(): void {//TODO:是否可直接在boundingSphere属性计算优化\n        if (this._cacheRootBone)\n            this._localBounds._tranform(this._cacheRootBone.transform.worldMatrix, this._bounds);\n        else\n            this._localBounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\n    }\n\n    _setBelongScene(scene: Scene3D): void {\n        super._setBelongScene(scene);\n        Stat.skinRenderNode++;\n    }\n\n    /**\n     * @internal\n     */\n    _setUnBelongScene() {\n        super._setUnBelongScene();\n        Stat.skinRenderNode--;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\n        if (this.bones.length > 0) {\n            this._computeSkinnedData();\n            this._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\n        } else {\n            this._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, transform.worldMatrix);\n        }\n    }\n\n    // /**\n    //  * @inheritDoc\n    //  * @override\n    //  * @internal\n    //  */\n    // _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\n    // \tvar projectionView: Matrix4x4 = context.projectionViewMatrix;\n    // \tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, projectionView);\n    // }\n\n    /**\n     * @override\n     * @param dest \n     */\n    _cloneTo(dest: Component): void {\n        let render = (dest as SkinnedMeshRenderer);\n\n        render._inverseBindPosesBufferForNative = null;\n        render._skinnedMatrixCachesBufferForNative = null;\n        render._bonesTransformForNative = null;\n\n        //get common parent\n        let getCommomParent = (rootNode: Sprite3D, rootCheckNode: Sprite3D): Sprite3D => {\n            let nodeArray: Sprite3D[] = [];\n            let node = rootNode;\n            while (!!node) {\n                if (node instanceof Sprite3D)\n                    nodeArray.push(node);\n                node = node.parent as Sprite3D;\n            }\n            let checkNode: Sprite3D = rootCheckNode;\n            while (!!checkNode && nodeArray.indexOf(checkNode) == -1) {\n                checkNode = checkNode.parent as Sprite3D;\n            }\n            return checkNode;\n        }\n        let cloneHierachFun = (rootNode: Sprite3D, rootCheckNode: Sprite3D, destNode: Sprite3D): Sprite3D => {\n            let rootparent: Sprite3D = getCommomParent(rootNode, rootCheckNode);\n            if (!rootparent)\n                return null;\n            let path: number[] = [];\n            Utils3D._getHierarchyPath(rootparent, rootNode, path);\n            let pathcheck: number[] = [];\n            Utils3D._getHierarchyPath(rootparent, rootCheckNode, pathcheck);\n            let destParent = Utils3D._getParentNodeByHierarchyPath(destNode, path);\n            if (!destParent)\n                return null;\n            return Utils3D._getNodeByHierarchyPath(destParent, pathcheck) as Sprite3D;\n        }\n        //rootBone Clone\n        var rootBone: Sprite3D = this.rootBone;\n        if (rootBone) {\n            let node = cloneHierachFun(this.owner as Sprite3D, this.rootBone as Sprite3D, render.owner as Sprite3D);\n            if (node)\n                render.rootBone = node;\n            else\n                render.rootBone = rootBone;\n        }\n        //BonesClone\n        var bones: Sprite3D[] = this.bones;\n        var destBone: Sprite3D[] = render.bones;\n        let n = destBone.length = bones.length;\n        for (var i = 0; i < n; i++) {\n            let ceckNode = bones[i];\n            destBone[i] = cloneHierachFun(this.owner as Sprite3D, ceckNode, render.owner as Sprite3D);\n        }\n        //bounds\n        var lbb: Bounds = this.localBounds;\n        (lbb) && (lbb.cloneTo(render.localBounds));\n        (render.localBounds) && (render.localBounds = render.localBounds);\n        super._cloneTo(dest);\n    }\n\n    protected _onDestroy() {\n        if (this._cacheRootBone)\n            (!this._cacheRootBone._destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\n        else\n            (this.owner && !this.owner._destroyed) && ((this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\n        super._onDestroy();\n    }\n}\n\n","import { Event } from \"../../events/Event\";\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\nimport { RenderContext3D } from \"./render/RenderContext3D\";\nimport { Transform3D } from \"./Transform3D\";\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\";\nimport { Sprite3D } from \"./Sprite3D\";\nimport { RenderElement } from \"./render/RenderElement\";\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\nimport { Mesh } from \"../resource/models/Mesh\";\nimport { Texture2D } from \"../../resource/Texture2D\";\nimport { Component } from \"../../components/Component\";\nimport { ShaderDataType } from \"../../RenderEngine/RenderShader/ShaderData\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\nexport class SimpleSkinnedMeshRenderer extends SkinnedMeshRenderer {\n    /**@internal 解决循环引用 */\n    static SIMPLE_SIMPLEANIMATORTEXTURE: number;\n    /**@internal 解决循环引用*/\n    static SIMPLE_SIMPLEANIMATORPARAMS: number;\n    /**@internal 解决循环引用*/\n    static SIMPLE_SIMPLEANIMATORTEXTURESIZE: number;\n\n    /**@internal */\n    private _simpleAnimatorTexture: Texture2D;\n    /**@internal */\n    _simpleAnimatorParams: Vector4;\n    /**@internal */\n    private _simpleAnimatorTextureSize: number;\n    /**@internal  x simpleAnimation offset,y simpleFrameOffset*/\n    private _simpleAnimatorOffset: Vector2;\n    /**@internal */\n    _bonesNums: number;\n\n    /**\n     * @internal\n     * 设置动画帧贴图\n     */\n    get simpleAnimatorTexture(): Texture2D {\n        return this._simpleAnimatorTexture;\n    }\n\n    /**\n     * @internal\n     */\n    set simpleAnimatorTexture(value: Texture2D) {\n        this._simpleAnimatorTexture = value;\n        this._simpleAnimatorTextureSize = value.width;\n        this._shaderValues.setTexture(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE, value);\n        value._addReference();\n        this._shaderValues.setNumber(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE, this._simpleAnimatorTextureSize);\n    }\n\n    /**\n     * @internal\n     * 设置动画帧数参数\n     */\n    get simpleAnimatorOffset(): Vector2 {\n        return this._simpleAnimatorOffset;\n    }\n\n    /**\n     * @internal\n     */\n    set simpleAnimatorOffset(value: Vector2) {\n        value.cloneTo(this._simpleAnimatorOffset);\n    }\n\n\n    /**\n     * 创建一个 <code>SkinnedMeshRender</code> 实例。\n     */\n    constructor() {\n        super();\n        this._simpleAnimatorParams = new Vector4();\n        this._simpleAnimatorOffset = new Vector2();\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE);\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\n    }\n\n    /**\n     *@inheritDoc\n     *@override\n     *@internal\n     */\n    _createRenderElement() {\n        let renderelement = new SubMeshRenderElement();\n        return renderelement as any;\n    }\n\n    /**\n     * @internal\n     */\n    _computeAnimatorParamsData(): void {\n        if (this._cacheMesh) {\n            this._simpleAnimatorParams.x = this._simpleAnimatorOffset.x;\n            this._simpleAnimatorParams.y = Math.round(this._simpleAnimatorOffset.y) * this._bonesNums * 4;\n        }\n    }\n\n    /**\n    *@inheritDoc\n    *@override\n    *@internal\n    */\n    _onMeshChange(value: Mesh): void {\n        this._onSkinMeshChange(value);\n        if (!value)\n            return;\n        this._cacheMesh = (<Mesh>value);\n\n    }\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\n        var element: SubMeshRenderElement = <SubMeshRenderElement>context.renderElement;\n        switch (element.renderType) {\n            case RenderElement.RENDERTYPE_NORMAL:\n                if (this.rootBone) {\n                    var worldMat: Matrix4x4 = (this.rootBone as Sprite3D).transform.worldMatrix;\n                    if (this._subUniformBufferData) {\n                        let oriMat = this._shaderValues.getMatrix4x4(Sprite3D.WORLDMATRIX);\n                        this._subUniformBufferData._needUpdate = oriMat ? !oriMat.equalsOtherMatrix(worldMat) : true;\n                    }\n                    this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, worldMat);\n                } else {\n                    this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, transform.worldMatrix);\n                }\n                this._computeAnimatorParamsData();\n                this._shaderValues.setVector(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS, this._simpleAnimatorParams);\n                break;\n        }\n    }\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\n    }\n\n    _cloneTo(dest: Component): void {\n        let render = dest as SimpleSkinnedMeshRenderer;\n        render.simpleAnimatorOffset = this.simpleAnimatorOffset;\n        render.simpleAnimatorTexture = this.simpleAnimatorTexture;\n        render._bonesNums = this._bonesNums;\n        super._cloneTo(dest);\n    }\n\n    /**\n     * 删除节点\n     */\n    protected _onDestroy() {\n        if (this._cacheRootBone)\n            (!this._cacheRootBone._destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\n        (this._simpleAnimatorTexture) && this._simpleAnimatorTexture._removeReference();\n        this._simpleAnimatorTexture = null;\n        super._onDestroy();\n    }\n}","import { Node } from \"../../display/Node\";\nimport { Loader } from \"../../net/Loader\";\nimport { Mesh } from \"../resource/models/Mesh\";\nimport { MeshFilter } from \"./MeshFilter\";\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\nimport { Sprite3D } from \"./Sprite3D\";\nimport { Material } from \"./material/Material\";\nimport { SimpleSkinnedMeshRenderer } from \"./SimpleSkinnedMeshRenderer\";\nimport { Texture2D } from \"../../resource/Texture2D\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n\n\n/**\n * <code>SkinnedMeshSprite3D</code> 类用于创建网格。\n */\nexport class SimpleSkinnedMeshSprite3D extends RenderableSprite3D {\n    /**@internal */\n    static _tempArray0: any[] = [];\n\n    /** */\n    static SIMPLE_SIMPLEANIMATORTEXTURE: number;\n    static SIMPLE_SIMPLEANIMATORPARAMS: number;\n    static SIMPLE_SIMPLEANIMATORTEXTURESIZE: number;\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS;\n        SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE;\n        SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE;\n\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTexture\");\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS = Shader3D.propertyNameToID(\"u_SimpleAnimatorParams\");\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTextureSize\");\n\n        const commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE, \"u_SimpleAnimatorTexture\");\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS, \"u_SimpleAnimatorParams\");\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE, \"u_SimpleAnimatorTextureSize\");\n    }\n\n    /** @internal */\n    private _meshFilter: MeshFilter;\n\n    /**\n     * 网格过滤器。\n     */\n    get meshFilter(): MeshFilter {\n        return this._meshFilter;\n    }\n\n    /**\n     * 网格渲染器。\n     */\n    get simpleSkinnedMeshRenderer(): SimpleSkinnedMeshRenderer {\n        return (<SimpleSkinnedMeshRenderer>this._render);\n    }\n\n    /**\n     * 创建一个 <code>MeshSprite3D</code> 实例。\n     * @param mesh 网格,同时会加载网格所用默认材质。\n     * @param name 名字。\n     */\n    constructor(mesh: Mesh = null, name: string = null) {\n        super(name);\n        this._meshFilter = this.addComponent(MeshFilter);\n        this._render = this.addComponent(SimpleSkinnedMeshRenderer);\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n        var render: SimpleSkinnedMeshRenderer = this.simpleSkinnedMeshRenderer;\n        var lightmapIndex: any = data.lightmapIndex;\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\n        (data.enableRender != undefined) && (render.enabled = data.enableRender);\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\n        var meshPath: string;\n        meshPath = data.meshPath;\n        if (meshPath) {\n            var mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\n            (mesh) && (this.meshFilter.sharedMesh = mesh);\n        }\n\n        var materials: any[] = data.materials;\n        if (materials) {\n            var sharedMaterials: Material[] = render.sharedMaterials;\n            var materialCount: number = materials.length;\n            sharedMaterials.length = materialCount;\n            for (var i: number = 0; i < materialCount; i++) {\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\n            }\n            render.sharedMaterials = sharedMaterials;\n        }\n\n        var boundBox: any = data.boundBox;\n        var min: any[] = boundBox.min;\n        var max: any[] = boundBox.max;\n        render.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\n        render.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\n        render.localBounds = render.localBounds;\n        if (spriteMap) {\n            var rootBoneData: number = data.rootBone;\n            render.rootBone = spriteMap[rootBoneData];\n            var bonesData: any[] = data.bones;\n            var n: number;\n            for (i = 0, n = bonesData.length; i < n; i++)\n                render.bones.push(spriteMap[bonesData[i]]);\n\n            render._bonesNums = data.bonesNums ? data.bonesNums : render.bones.length;\n        }\n        // else {//[兼容代码]\n        // \t(data.rootBone) && (render._setRootBone(data.rootBone));//[兼容性]\n        // }\n        var animatorTexture: string = data.animatorTexture;\n        if (animatorTexture) {\n            var animatortexture: Texture2D = Loader.getRes(animatorTexture);\n            (render as SimpleSkinnedMeshRenderer).simpleAnimatorTexture = animatortexture;\n        }\n    }\n\n    // /**\n    //  * @inheritDoc\n    //  * @override\n    //  * @internal\n    //  */\n    // protected _changeHierarchyAnimator(animator: Animator): void {\n    // \tsuper._changeHierarchyAnimator(animator);\n    // \tthis.simpleSkinnedMeshRenderer._setCacheAnimator(animator);\n    // }\n\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\n        // var meshSprite3D: MeshSprite3D = (<MeshSprite3D>destObject);\n        // meshSprite3D.meshFilter.sharedMesh = this.meshFilter.sharedMesh;\n        // var meshRender: SimpleSkinnedMeshRenderer = (<SimpleSkinnedMeshRenderer>this._render);\n        // var destMeshRender: SimpleSkinnedMeshRenderer = (<SimpleSkinnedMeshRenderer>meshSprite3D._render);\n        // destMeshRender.enabled = meshRender.enabled;\n        // destMeshRender.sharedMaterials = meshRender.sharedMaterials;\n        // destMeshRender.castShadow = meshRender.castShadow;\n        // var lightmapScaleOffset: Vector4 = meshRender.lightmapScaleOffset;\n        // lightmapScaleOffset && (destMeshRender.lightmapScaleOffset = lightmapScaleOffset.clone());\n        // destMeshRender.receiveShadow = meshRender.receiveShadow;\n        // destMeshRender.sortingFudge = meshRender.sortingFudge;\n        // //destMeshRender._rootBone = meshRender._rootBone;\n\n        // var bones: Sprite3D[] = meshRender.bones;\n        // var destBones: Sprite3D[] = destMeshRender.bones;\n        // var bonesCount: number = bones.length;\n        // destBones.length = bonesCount;\n\n        // var rootBone: Sprite3D = meshRender.rootBone;\n        // if (rootBone) {\n        // \tvar pathes: any[] = Utils3D._getHierarchyPath(srcRoot, rootBone, SimpleSkinnedMeshSprite3D._tempArray0);\n        // \tif (pathes)\n        // \t\tdestMeshRender.rootBone = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\n        // \telse\n        // \t\tdestMeshRender.rootBone = rootBone;\n        // }\n\n        // for (var i: number = 0; i < bones.length; i++) {\n        // \tpathes = Utils3D._getHierarchyPath(srcRoot, bones[i], SimpleSkinnedMeshSprite3D._tempArray0);\n        // \tif (pathes)\n        // \t\tdestBones[i] = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\n        // \telse\n        // \t\tdestBones[i] = bones[i];\n        // }\n\n        // var lbb: Bounds = meshRender.localBounds;\n        // (lbb) && (lbb.cloneTo(destMeshRender.localBounds));\n\n\n        // destMeshRender.simpleAnimatorOffset = meshRender.simpleAnimatorOffset;\n        // destMeshRender.simpleAnimatorTexture = meshRender.simpleAnimatorTexture;\n        // destMeshRender._bonesNums = meshRender._bonesNums;\n\n        super._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    destroy(destroyChild: boolean = true): void {\n        if (this._destroyed)\n            return;\n        super.destroy(destroyChild);\n        this._meshFilter.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Node {\n        return new Sprite3D();\n    }\n\n}\n\n","import { Node } from \"../../display/Node\";\nimport { Loader } from \"../../net/Loader\";\nimport { Mesh } from \"../resource/models/Mesh\";\nimport { MeshFilter } from \"./MeshFilter\";\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\nimport { Sprite3D } from \"./Sprite3D\";\nimport { Material } from \"./material/Material\";\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\n\n/**\n * <code>SkinnedMeshSprite3D</code> 类用于绑点骨骼节点精灵。\n */\nexport class SkinnedMeshSprite3D extends RenderableSprite3D {\n    /**@internal */\n    static _tempArray0: any[] = [];\n\n    /**着色器变量名，蒙皮动画。*/\n    static BONES: number;\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE = Shader3D.getDefineByName(\"BONE\");\n        SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE = Shader3D.getDefineByName(\"SIMPLEBONE\");\n        const commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Custom\");\n        SkinnedMeshSprite3D.BONES = Shader3D.propertyNameToID(\"u_Bones\");\n        commandUniform.addShaderUniform(SkinnedMeshSprite3D.BONES, \"u_Bones\");\n    }\n\n    /** @internal */\n    private _meshFilter: MeshFilter;\n\n    /**\n     * 网格过滤器。\n     */\n    get meshFilter(): MeshFilter {\n        return this._meshFilter;\n    }\n\n    /**\n     * 网格渲染器。\n     */\n    get skinnedMeshRenderer(): SkinnedMeshRenderer {\n        return (<SkinnedMeshRenderer>this._render);\n    }\n\n    /**\n     * 创建一个 <code>MeshSprite3D</code> 实例。\n     * @param mesh 网格,同时会加载网格所用默认材质。\n     * @param name 名字。\n     */\n    constructor(mesh: Mesh = null, name: string = null) {\n        super(name);\n        this._meshFilter = this.addComponent(MeshFilter);\n        this._render = this.addComponent(SkinnedMeshRenderer);\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n        var render: SkinnedMeshRenderer = this.skinnedMeshRenderer;\n        var lightmapIndex: any = data.lightmapIndex;\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\n        (data.enableRender != undefined) && (render.enabled = data.enableRender);\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\n        var meshPath: string;\n        meshPath = data.meshPath;\n        if (meshPath) {\n            var mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\n            (mesh) && (this.meshFilter.sharedMesh = mesh);\n        }\n\n        var materials: any[] = data.materials;\n        if (materials) {\n            var sharedMaterials: Material[] = render.sharedMaterials;\n            var materialCount: number = materials.length;\n            sharedMaterials.length = materialCount;\n            for (var i: number = 0; i < materialCount; i++) {\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\n            }\n            render.sharedMaterials = sharedMaterials;\n        }\n\n        var boundBox: any = data.boundBox;\n        var min: any[] = boundBox.min;\n        var max: any[] = boundBox.max;\n        render.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\n        render.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\n        render.localBounds = render.localBounds;\n        if (spriteMap) {\n            var rootBoneData: number = data.rootBone;\n            render.rootBone = spriteMap[rootBoneData];\n            var bonesData: any[] = data.bones;\n            var n: number;\n            for (i = 0, n = bonesData.length; i < n; i++)\n                (render as SkinnedMeshRenderer).bones.push(spriteMap[bonesData[i]]);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\n        super._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    destroy(destroyChild: boolean = true): void {\n        if (this._destroyed)\n            return;\n        super.destroy(destroyChild);\n        this._meshFilter.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Node {\n        return new Sprite3D();\n    }\n\n}\n\n","\nexport class TrailTextureMode {\n\t/**\n\t * 拉伸模式。\n\t */\n\tstatic Stretch: number = 0;\n\n\t/**\n\t * 平铺模式。\n\t */\n\tstatic Tile: number = 1;\n\n}\n\n\n","export enum TrailAlignment {\n    /** 使拖尾面向摄像机。*/\n    View,\n    /** 使拖尾的与组件的方向对齐*/\n    TransformZ\n}\n","import { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\nimport { IVertex } from \"../../graphics/IVertex\"\n/**\n * <code>VertexTrail</code> 类用于创建拖尾顶点结构。\n * @internal\n */\nexport class VertexTrail implements IVertex {\n\t/**@internal */\n\tstatic TRAIL_POSITION0: number = 0;\n\t/**@internal */\n\tstatic TRAIL_OFFSETVECTOR: number = 1;\n\t/**@internal */\n\tstatic TRAIL_TIME0: number = 2;\n\t/**@internal */\n\tstatic TRAIL_TEXTURECOORDINATE0Y: number = 3;\n\t/**@internal */\n\tstatic TRAIL_TEXTURECOORDINATE0X: number = 4;\n\t/**@internal */\n\tstatic TRAIL_COLOR: number = 5;\n\n\t/**@internal */\n\tprivate static _vertexDeclaration1: VertexDeclaration;\n\t/**@internal */\n\tprivate static _vertexDeclaration2: VertexDeclaration;\n\n\t/**\n\t * @internal\n\t */\n\tstatic get vertexDeclaration1(): VertexDeclaration {\n\t\treturn VertexTrail._vertexDeclaration1;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic get vertexDeclaration2(): VertexDeclaration {\n\t\treturn VertexTrail._vertexDeclaration2;\n\t}\n\n\tget vertexDeclaration(): VertexDeclaration {\n\t\treturn VertexTrail._vertexDeclaration1;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tVertexTrail._vertexDeclaration1 = new VertexDeclaration(32,\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexTrail.TRAIL_POSITION0),\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexTrail.TRAIL_OFFSETVECTOR),\n\t\t\tnew VertexElement(24, VertexElementFormat.Single, VertexTrail.TRAIL_TIME0),\n\t\t\tnew VertexElement(28, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0Y)]);\n\t\tVertexTrail._vertexDeclaration2 = new VertexDeclaration(20,\n\t\t\t[new VertexElement(0, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0X),\n\t\t\tnew VertexElement(4, VertexElementFormat.Color, VertexTrail.TRAIL_COLOR)]);\n\t}\n}\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Color } from \"../../../maths/Color\";\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { Resource } from \"../../../resource/Resource\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { Camera } from \"../Camera\";\nimport { GeometryElement } from \"../GeometryElement\";\nimport { Gradient } from \"../Gradient\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { TrailTextureMode } from \"../TrailTextureMode\";\nimport { TrailAlignment } from \"./TrailAlignment\";\nimport { TrailFilter } from \"./TrailFilter\";\nimport { VertexTrail } from \"./VertexTrail\";\n\n/**\n * <code>TrailGeometry</code> 类用于创建拖尾渲染单元。\n */\nexport class TrailGeometry extends GeometryElement {\n\t/** 轨迹准线_面向摄像机。*/\n\tstatic ALIGNMENT_VIEW: number = 0;\n\t/** 轨迹准线_面向运动方向。*/\n\tstatic ALIGNMENT_TRANSFORM_Z: number = 1;\n\n\t/**@internal */\n\tprivate static _tempVector30: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempVector31: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempVector32: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempVector33: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempVector34: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempVector35: Vector3 = new Vector3();\n\t/**@internal */\n\tprivate static _tempVector36: Vector3 = new Vector3();\n\n\t/**@internal */\n\tprivate static _type: number = GeometryElement._typeCounter++;\n\n\t/**@internal */\n\tprivate _floatCountPerVertices1: number = 8;\n\t/**@internal */\n\tprivate _floatCountPerVertices2: number = 5;\n\t/**@internal */\n\tprivate _increaseSegementCount: number = 16;\n\t/**@internal */\n\tprivate _activeIndex: number = 0;\n\t/**@internal */\n\tprivate _endIndex: number = 0;\n\t/**@internal */\n\tprivate _needAddFirstVertex: boolean = false;\n\t/**@internal */\n\tprivate _isTempEndVertex: boolean = false;\n\t/**@internal */\n\tprivate _subBirthTime: Float32Array;\n\t/**@internal */\n\tprivate _subDistance: Float64Array;\n\t/**@internal */\n\tprivate _segementCount: number;\n\t/**@internal */\n\tprivate _vertices1: Float32Array = null;\n\t/**@internal */\n\tprivate _vertices2: Float32Array = null;\n\t/**@internal */\n\tprivate _vertexBuffer1: VertexBuffer3D;\n\t/**@internal */\n\tprivate _vertexBuffer2: VertexBuffer3D;\n\t/**@internal */\n\tprivate _lastFixedVertexPosition: Vector3 = new Vector3();\n\t/**@internal */\n\tprotected _owner: TrailFilter;\n\n\tprivate tmpColor: Color = new Color();\n\t/** @private */\n\tprivate _disappearBoundsMode: Boolean = false;\n\n\tconstructor(owner: TrailFilter) {\n\t\tsuper(MeshTopology.TriangleStrip, DrawType.DrawArray);\n\t\tthis._owner = owner;\n\t\t//初始化_segementCount\n\t\tthis.bufferState = new BufferState();\n\t\tthis._segementCount = this._increaseSegementCount;\n\n\t\tthis._resizeData(this._segementCount, this.bufferState);\n\t\t// var bounds: Bounds = this._owner._owner.trailRenderer.bounds;\n\t\t// var sprite3dPosition: Vector3 = this._owner._owner.transform.position;\n\t\t// bounds.setMin(sprite3dPosition);\n\t\t// bounds.setMax(sprite3dPosition);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _resizeData(segementCount: number, bufferState: BufferState): void {\n\t\tthis._subBirthTime = new Float32Array(segementCount);\n\t\tthis._subDistance = new Float64Array(segementCount);\n\n\t\tvar vertexCount: number = segementCount * 2;\n\t\tvar vertexDeclaration1: VertexDeclaration = VertexTrail.vertexDeclaration1;\n\t\tvar vertexDeclaration2: VertexDeclaration = VertexTrail.vertexDeclaration2;\n\t\tvar vertexBuffers: VertexBuffer3D[] = [];\n\t\tvar vertexbuffer1Size: number = vertexCount * vertexDeclaration1.vertexStride;\n\t\tvar vertexbuffer2Size: number = vertexCount * vertexDeclaration2.vertexStride;\n\t\tvar memorySize: number = vertexbuffer1Size + vertexbuffer2Size;\n\t\tthis._vertices1 = new Float32Array(vertexCount * this._floatCountPerVertices1);\n\t\tthis._vertices2 = new Float32Array(vertexCount * this._floatCountPerVertices2);\n\t\tthis._vertexBuffer1 = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexbuffer1Size, BufferUsage.Dynamic, false);\n\t\tthis._vertexBuffer1.vertexDeclaration = vertexDeclaration1;\n\t\tthis._vertexBuffer2 = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexbuffer2Size, BufferUsage.Dynamic, false);\n\t\tthis._vertexBuffer2.vertexDeclaration = vertexDeclaration2;\n\n\t\tvertexBuffers.push(this._vertexBuffer1);\n\t\tvertexBuffers.push(this._vertexBuffer2);\n\t\t// bufferState.bind();\n\t\t// bufferState.applyVertexBuffers(vertexBuffers);\n\t\t// bufferState.unBind();\n\t\tbufferState.applyState(vertexBuffers, null);\n\t\tResource._addMemory(memorySize, memorySize);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _resetData(): void {\n\t\tvar count: number = this._endIndex - this._activeIndex;\n\t\t//提前取出旧数据，否则_resizeData会覆盖\n\t\tvar oldVertices1: Float32Array = new Float32Array(this._vertices1.buffer, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count);\n\t\tvar oldVertices2: Float32Array = new Float32Array(this._vertices2.buffer, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count);\n\t\tvar oldSubDistance: Float64Array = new Float64Array(this._subDistance.buffer, this._activeIndex * 8, count);//修改距离数据\n\t\tvar oldSubBirthTime: Float32Array = new Float32Array(this._subBirthTime.buffer, this._activeIndex * 4, count);//修改出生时间数据\n\n\t\tif (count === this._segementCount) {//当前count=_segementCount表示已满,需要扩充\n\t\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\n\t\t\tResource._addMemory(-memorySize, -memorySize);\n\t\t\tthis._vertexBuffer1.destroy();\n\t\t\tthis._vertexBuffer2.destroy();\n\t\t\tthis._segementCount += this._increaseSegementCount;\n\t\t\tthis._resizeData(this._segementCount, this.bufferState);\n\t\t}\n\n\t\tthis._vertices1.set(oldVertices1, 0);\n\t\tthis._vertices2.set(oldVertices2, 0);\n\t\tthis._subDistance.set(oldSubDistance, 0);\n\t\tthis._subBirthTime.set(oldSubBirthTime, 0);\n\n\t\tthis._endIndex = count;\n\t\tthis._activeIndex = 0;\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, 0, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count * 4);\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, 0, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count * 4);\n\t}\n\n\t/**\n\t * @internal\n\t * 更新Trail数据\n\t */\n\t_updateTrail(camera: Camera, lastPosition: Vector3, position: Vector3): void {\n\t\tif (!Vector3.equals(lastPosition, position)) {//位置不变不产生分段\n\t\t\tif ((this._endIndex - this._activeIndex) === 0)\n\t\t\t\tthis._addTrailByFirstPosition(camera, position);//当前分段全部消失时,需要添加一个首分段\n\t\t\telse\n\t\t\t\tthis._addTrailByNextPosition(camera, position);\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t * 通过起始位置添加TrailRenderElement起始数据\n\t */\n\tprivate _addTrailByFirstPosition(camera: Camera, position: Vector3): void {\n\t\t(this._endIndex === this._segementCount) && (this._resetData());\n\t\tthis._subDistance[this._endIndex] = 0;\n\t\tthis._subBirthTime[this._endIndex] = this._owner._curtime;\n\t\tthis._endIndex++;\n\t\tposition.cloneTo(this._lastFixedVertexPosition);\n\t\tthis._needAddFirstVertex = true;\n\t}\n\n\t/**\n\t * @internal\n\t * 通过位置更新TrailRenderElement数据\n\t */\n\tprivate _addTrailByNextPosition(camera: Camera, position: Vector3): void {\n\t\tvar delVector3: Vector3 = TrailGeometry._tempVector30;\n\t\tvar pointAtoBVector3: Vector3 = TrailGeometry._tempVector31;\n\t\tswitch (this._owner.alignment) {\n\t\t\tcase TrailAlignment.View:\n\t\t\t\tvar cameraMatrix: Matrix4x4 = camera.viewMatrix;\n\t\t\t\tVector3.transformCoordinate(position, cameraMatrix, TrailGeometry._tempVector33);\n\t\t\t\tVector3.transformCoordinate(this._lastFixedVertexPosition, cameraMatrix, TrailGeometry._tempVector34);\n\t\t\t\tVector3.subtract(TrailGeometry._tempVector33, TrailGeometry._tempVector34, delVector3);\n\t\t\t\tVector3.cross(TrailGeometry._tempVector33, delVector3, pointAtoBVector3);\n\t\t\t\tbreak;\n\t\t\tcase TrailAlignment.TransformZ:\n\t\t\t\tVector3.subtract(position, this._lastFixedVertexPosition, delVector3);\n\t\t\t\tvar forward: Vector3 = TrailGeometry._tempVector32;\n\t\t\t\t(this._owner._ownerRender.owner as Sprite3D).transform.getForward(forward);\n\t\t\t\tVector3.cross(delVector3, forward, pointAtoBVector3);//实时更新模式需要和view一样根据当前forward重新计算\n\t\t\t\tbreak;\n\t\t}\n\n\t\tVector3.normalize(pointAtoBVector3, pointAtoBVector3);\n\t\tVector3.scale(pointAtoBVector3, this._owner.widthMultiplier / 2, pointAtoBVector3);\n\n\t\tvar delLength: number = Vector3.scalarLength(delVector3);\n\t\tvar tempEndIndex: number;\n\t\tvar offset: number;\n\n\t\tif (this._needAddFirstVertex) {\n\t\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, this._endIndex - 1);//延迟更新首分段数据\n\t\t\tthis._needAddFirstVertex = false;\n\t\t}\n\n\t\tif (delLength - this._owner.minVertexDistance >= MathUtils3D.zeroTolerance) {//大于最小距离产生新分段\n\t\t\tif (this._isTempEndVertex) {\n\t\t\t\ttempEndIndex = this._endIndex - 1;\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\n\t\t\t} else {\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\n\t\t\t\tthis._owner._totalLength += delLength;\n\t\t\t\tthis._endIndex++;\n\t\t\t}\n\t\t\tposition.cloneTo(this._lastFixedVertexPosition);\n\t\t\tthis._isTempEndVertex = false;\n\t\t} else {\n\t\t\tif (this._isTempEndVertex) {\n\t\t\t\ttempEndIndex = this._endIndex - 1;\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\n\t\t\t} else {\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\n\t\t\t\tthis._owner._totalLength += delLength;\n\t\t\t\tthis._endIndex++;\n\t\t\t}\n\t\t\tthis._isTempEndVertex = true;\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t * 通过位置更新顶点数据\n\t */\n\tprivate _updateVerticesByPositionData(position: Vector3, pointAtoBVector3: Vector3, index: number): void {\n\t\tvar vertexOffset: number = this._floatCountPerVertices1 * 2 * index;\n\t\tvar curtime: number = this._owner._curtime;\n\t\tthis._vertices1[vertexOffset] = position.x;\n\t\tthis._vertices1[vertexOffset + 1] = position.y;\n\t\tthis._vertices1[vertexOffset + 2] = position.z;\n\t\tthis._vertices1[vertexOffset + 3] = -pointAtoBVector3.x;\n\t\tthis._vertices1[vertexOffset + 4] = -pointAtoBVector3.y;\n\t\tthis._vertices1[vertexOffset + 5] = -pointAtoBVector3.z;\n\t\tthis._vertices1[vertexOffset + 6] = curtime;\n\t\tthis._vertices1[vertexOffset + 7] = 1.0;\n\n\t\tthis._vertices1[vertexOffset + 8] = position.x;\n\t\tthis._vertices1[vertexOffset + 9] = position.y;\n\t\tthis._vertices1[vertexOffset + 10] = position.z;\n\t\tthis._vertices1[vertexOffset + 11] = pointAtoBVector3.x;\n\t\tthis._vertices1[vertexOffset + 12] = pointAtoBVector3.y;\n\t\tthis._vertices1[vertexOffset + 13] = pointAtoBVector3.z;\n\t\tthis._vertices1[vertexOffset + 14] = curtime;\n\t\tthis._vertices1[vertexOffset + 15] = 0.0;\n\n\t\t//添加新的顶点时，需要更新包围盒\n\t\tvar bounds: Bounds = this._owner._ownerRender.bounds;\n\t\tvar min: Vector3 = bounds.getMin();\n\t\tvar max: Vector3 = bounds.getMax();\n\t\tvar up: Vector3 = TrailGeometry._tempVector35;\n\t\tvar down: Vector3 = TrailGeometry._tempVector36;\n\t\tvar out: Vector3 = TrailGeometry._tempVector32;\n\t\tVector3.add(position, pointAtoBVector3, up);\n\t\tVector3.subtract(position, pointAtoBVector3, down);\n\n\t\tVector3.min(down, up, out);\n\t\tVector3.min(min, out, min);\n\t\tbounds.setMin(min);\n\n\t\tVector3.max(up, down, out);\n\t\tVector3.max(max, out, max);\n\t\tbounds.setMax(max);\n\n\n\t\tvar floatCount: number = this._floatCountPerVertices1 * 2;\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, vertexOffset * 4, vertexOffset * 4, floatCount * 4);\n\t}\n\n\t/**\n\t * @internal\n\t * 通过位置更新顶点数据、距离、出生时间\n\t */\n\tprivate _updateVerticesByPosition(position: Vector3, pointAtoBVector3: Vector3, delDistance: number, index: number): void {\n\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, index);\n\t\tthis._subDistance[index] = delDistance;\n\t\tthis._subBirthTime[index] = this._owner._curtime;\n\t}\n\n\t/**\n\t * @internal\n\t * 更新VertexBuffer2数据\n\t */\n\t_updateVertexBufferUV(): void {\n\t\tvar bounds: Bounds;\n\t\tvar min: Vector3, max: Vector3;\n\t\tif (this._disappearBoundsMode) {//如果有顶点消失时候，需要重新计算包围盒\n\t\t\tbounds = this._owner._ownerRender.bounds;\n\t\t\tvar sprite3dPosition: Vector3 = (this._owner._ownerRender.owner as Sprite3D).transform.position;\n\t\t\tbounds.setMin(sprite3dPosition);\n\t\t\tbounds.setMax(sprite3dPosition);\n\t\t\tmin = bounds.getMin();\n\t\t\tmax = bounds.getMax();\n\t\t}\n\t\tvar vertexCount: number = this._endIndex;\n\t\tvar curLength: number = 0;\n\n\t\tvar gradient: Gradient = this._owner.colorGradient;\n\t\tvar startAlphaIndex: number = gradient.colorAlphaKeysCount - 1;\n\t\tvar startColorIndex: number = gradient.colorRGBKeysCount - 1;\n\n\t\tvar totalLength: number = this._owner._totalLength;\n\t\tvar stride: number = this._floatCountPerVertices2 * 2;\n\t\tfor (var i: number = this._activeIndex; i < vertexCount; i++) {\n\t\t\t(i !== this._activeIndex) && (curLength += this._subDistance[i]);\n\t\t\tvar uvX: number;\n\t\t\tvar lerpFactor: number;\n\t\t\tif (this._owner.textureMode == TrailTextureMode.Stretch) {\n\t\t\t\tuvX = 1.0 - curLength / totalLength;\n\t\t\t\tlerpFactor = uvX;\n\t\t\t} else {\n\t\t\t\tlerpFactor = 1.0 - curLength / totalLength;\n\t\t\t\tuvX = 1.0 - (totalLength - curLength);\n\t\t\t}\n\n\t\t\tstartColorIndex = gradient.evaluateColorRGB(lerpFactor, this.tmpColor, startColorIndex, true);\n\t\t\tstartAlphaIndex = gradient.evaluateColorAlpha(lerpFactor, this.tmpColor, startAlphaIndex, true);\n\n\t\t\tvar index: number = i * stride;\n\t\t\tthis._vertices2[index + 0] = uvX;\n\t\t\tthis._vertices2[index + 1] = this.tmpColor.r;\n\t\t\tthis._vertices2[index + 2] = this.tmpColor.g;\n\t\t\tthis._vertices2[index + 3] = this.tmpColor.b;\n\t\t\tthis._vertices2[index + 4] = this.tmpColor.a;\n\n\t\t\tthis._vertices2[index + 5] = uvX;\n\t\t\tthis._vertices2[index + 6] = this.tmpColor.r;\n\t\t\tthis._vertices2[index + 7] = this.tmpColor.g;\n\t\t\tthis._vertices2[index + 8] = this.tmpColor.b;\n\t\t\tthis._vertices2[index + 9] = this.tmpColor.a;\n\n\t\t\tif (this._disappearBoundsMode) {\n\t\t\t\tvar posOffset = this._floatCountPerVertices1 * 2 * i;\n\t\t\t\tvar pos: Vector3 = TrailGeometry._tempVector32;\n\t\t\t\tvar up: Vector3 = TrailGeometry._tempVector33;\n\t\t\t\tvar side: Vector3 = TrailGeometry._tempVector34;\n\n\t\t\t\tpos.setValue(this._vertices1[posOffset + 0], this._vertices1[posOffset + 1], this._vertices1[posOffset + 2]);\n\t\t\t\tup.setValue(this._vertices1[posOffset + 3], this._vertices1[posOffset + 4], this._vertices1[posOffset + 5]);\n\n\t\t\t\tVector3.add(pos, up, side);\n\t\t\t\tVector3.min(side, min, min);\n\t\t\t\tVector3.max(side, max, max);\n\t\t\t\tVector3.subtract(pos, up, side);\n\t\t\t\tVector3.min(side, min, min);\n\t\t\t\tVector3.max(side, max, max);\n\t\t\t}\n\t\t}\n\t\tif (this._disappearBoundsMode) {\n\t\t\tbounds.setMin(min);\n\t\t\tbounds.setMax(max);\n\t\t\tthis._disappearBoundsMode = false;\n\t\t}\n\t\tvar offset: number = this._activeIndex * stride;\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, offset * 4, offset * 4, (vertexCount * stride - offset) * 4);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_updateDisappear(): void {\n\t\tvar count: number = this._endIndex;\n\t\tfor (var i: number = this._activeIndex; i < count; i++) {\n\t\t\tif (this._owner._curtime - this._subBirthTime[i] >= this._owner.time + MathUtils3D.zeroTolerance) {\n\t\t\t\tvar nextIndex: number = i + 1;\n\t\t\t\tif (nextIndex !== count)\n\t\t\t\t\tthis._owner._totalLength -= this._subDistance[nextIndex];//移除分段要减去下一分段到当前分段的距离\n\n\t\t\t\tif (this._isTempEndVertex && (nextIndex === count - 1)) {//如果只剩最后一分段要将其转化为固定分段\n\t\t\t\t\tvar fixedPos: Vector3 = this._lastFixedVertexPosition;\n\t\t\t\t\tfixedPos.x = this._vertices1[0];\n\t\t\t\t\tfixedPos.y = this._vertices1[1];\n\t\t\t\t\tfixedPos.z = this._vertices1[2];\n\t\t\t\t\tthis._isTempEndVertex = false;\n\t\t\t\t}\n\t\t\t\tthis._activeIndex++;\n\t\t\t\tthis._disappearBoundsMode = true;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\t_getType(): number {\n\t\treturn TrailGeometry._type;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @internal\n\t * @override\n\t */\n\t_prepareRender(state: RenderContext3D): boolean {\n\t\treturn this._endIndex - this._activeIndex > 1;//当前分段为0或1时不渲染\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @internal\n\t * @override\n\t */\n\t_updateRenderParams(state: RenderContext3D): void {\n\t\t//this._bufferState.bind();\n\t\tthis.clearRenderParams();\n\t\tvar start: number = this._activeIndex * 2;\n\t\tvar count: number = this._endIndex * 2 - start;\n\t\tthis.setDrawArrayParams(start, count);\n\t\t// LayaGL.renderDrawConatext.drawArrays(MeshTopology.TriangleStrip,start,count);\n\t\t// Stat.trianglesFaces += count - 2;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tdestroy(): void {\n\t\tsuper.destroy();\n\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\n\t\tResource._addMemory(-memorySize, -memorySize);\n\t\tthis.bufferState.destroy();\n\t\tthis._vertexBuffer1.destroy();\n\t\tthis._vertexBuffer2.destroy();\n\n\t\tthis.bufferState = null;\n\t\tthis._vertices1 = null;\n\t\tthis._vertexBuffer1 = null;\n\t\tthis._vertices2 = null;\n\t\tthis._vertexBuffer2 = null;\n\t\tthis._subBirthTime = null;\n\t\tthis._subDistance = null;\n\t\tthis._lastFixedVertexPosition = null;\n\t\tthis._disappearBoundsMode = false;\n\t}\n\n\tclear(): void {\n\t\tthis._activeIndex = 0;\n\t\tthis._endIndex = 0;\n\t\tthis._disappearBoundsMode = false;\n\t\tthis._subBirthTime.fill(0);\n\t\tthis._subDistance.fill(0);\n\t\tthis._segementCount = 0;\n\t\tthis._isTempEndVertex = false;\n\t\tthis._needAddFirstVertex = false;\n\t\tthis._lastFixedVertexPosition.setValue(0, 0, 0);\n\t}\n}\n\n","import { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Material, MaterialRenderMode } from \"../material/Material\";\n\n/**\n * <code>TrailMaterial</code> 类用于实现拖尾材质。\n */\nexport class TrailMaterial extends Material {\n\n\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: TrailMaterial;\n\t/**@internal */\n\tstatic MAINTEXTURE: number;\n\t/**@internal */\n\tstatic TINTCOLOR: number;\n\t/**@internal */\n\tstatic TILINGOFFSET: number;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __initDefine__(): void {\n\t\tTrailMaterial.MAINTEXTURE = Shader3D.propertyNameToID(\"u_MainTexture\");\n\t\tTrailMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_MainColor\");\n\t\tTrailMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\n\t}\n\n\t/**\n\t * 获取颜色。\n\t * @return 颜色。\n\t */\n\tget color(): Color {\n\t\treturn (<Color>this._shaderValues.getColor(TrailMaterial.TINTCOLOR));\n\t}\n\n\t/**\n\t * 设置颜色。\n\t * @param value 颜色。\n\t */\n\tset color(value: Color) {\n\t\tthis._shaderValues.setColor(TrailMaterial.TINTCOLOR, value);\n\t}\n\n\t/**\n\t * 获取贴图。\n\t * @return 贴图。\n\t */\n\tget texture(): BaseTexture {\n\t\treturn this._shaderValues.getTexture(TrailMaterial.MAINTEXTURE);\n\t}\n\n\t/**\n\t * 设置贴图。\n\t * @param value 贴图。\n\t */\n\tset texture(value: BaseTexture) {\n\t\tif (value)\n\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\n\t\telse\n\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\n\t\tthis._shaderValues.setTexture(TrailMaterial.MAINTEXTURE, value);\n\t}\n\n\t/**\n\t * 获取纹理平铺和偏移。\n\t * @return 纹理平铺和偏移。\n\t */\n\tget tilingOffset(): Vector4 {\n\t\treturn (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\n\t}\n\n\t/**\n\t * 设置纹理平铺和偏移。\n\t * @param value 纹理平铺和偏移。\n\t */\n\tset tilingOffset(value: Vector4) {\n\t\tif (value) {\n\t\t\tthis._shaderValues.setVector(TrailMaterial.TILINGOFFSET, value);\n\t\t}\n\t\telse {\n\t\t\tthis._shaderValues.getVector(TrailMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\n\t\t}\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"Trail\");\n\t\tthis.materialRenderMode = MaterialRenderMode.RENDERMODE_ALPHABLENDED;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t * @override\n\t */\n\tclone(): any {\n\t\tvar dest: TrailMaterial = new TrailMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n\t//----------------deprecated----------------\n\t/**\n\t * @deprecated\n\t * 渲染状态_透明混合。\n\t */\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\n\n\t/**\n\t* @deprecated\n\t* 渲染状态_加色法混合。\n\t*/\n\tstatic RENDERMODE_ADDTIVE: number = 1;\n\n\t/**\n\t * @deprecated\n\t * 渲染模式。现在可以直接使用materialRenderMode\n\t */\n\tset renderMode(value: number) {\n\t\tswitch (value) {\n\t\t\tcase TrailMaterial.RENDERMODE_ADDTIVE:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\n\t\t\t\tbreak;\n\t\t\tcase TrailMaterial.RENDERMODE_ALPHABLENDED:\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\n\t\t\t\tthis.depthWrite = false;\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n\t\t\t\tthis.alphaTest = false;\n\t\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial : renderMode value error.\");\n\t\t}\n\t}\n}\n\n","import { Camera } from \"../Camera\";\nimport { FloatKeyframe } from \"../FloatKeyframe\";\nimport { GeometryElement } from \"../GeometryElement\";\nimport { Gradient } from \"../Gradient\";\nimport { GradientMode } from \"../GradientMode\";\nimport { BaseRender } from \"../render/BaseRender\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { RenderElement } from \"../render/RenderElement\";\nimport { TrailGeometry } from \"./TrailGeometry\";\nimport { TrailMaterial } from \"./TrailMaterial\";\nimport { TrailRenderer } from \"./TrailRenderer\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { TrailAlignment } from \"./TrailAlignment\";\nimport { TrailTextureMode } from \"../TrailTextureMode\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n\n/**\n * <code>TrailFilter</code> 类用于创建拖尾过滤器。\n */\nexport class TrailFilter {\n\tstatic CURTIME: number ;\n\tstatic LIFETIME: number ;\n\tstatic WIDTHCURVE: number ;\n\tstatic WIDTHCURVEKEYLENGTH: number ;\n\n\tstatic __init__() {\n\t\tTrailFilter.CURTIME = Shader3D.propertyNameToID(\"u_CurTime\");\n\t\tTrailFilter.LIFETIME = Shader3D.propertyNameToID(\"u_LifeTime\");\n\t\tTrailFilter.WIDTHCURVE = Shader3D.propertyNameToID(\"u_WidthCurve\");\n\t\tTrailFilter.WIDTHCURVEKEYLENGTH = Shader3D.propertyNameToID(\"u_WidthCurveKeyLength\");\n\n\t\tconst spriteParms = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\n\t\tspriteParms.addShaderUniform(TrailFilter.CURTIME, \"u_CurTime\");\n\t\tspriteParms.addShaderUniform(TrailFilter.LIFETIME, \"u_LifeTime\");\n\t\tspriteParms.addShaderUniform(TrailFilter.WIDTHCURVE, \"u_WidthCurve\");\n\t\tspriteParms.addShaderUniform(TrailFilter.WIDTHCURVEKEYLENGTH, \"u_WidthCurveKeyLength\");\n\n\n\t}\n\n\t/**@internal */\n\tprivate _minVertexDistance: number;\n\t/**@internal */\n\tprivate _widthMultiplier: number;\n\t/**@internal */\n\tprivate _time: number;\n\t/**@internal */\n\tprivate _widthCurve: FloatKeyframe[];\n\t/**@internal */\n\tprivate _colorGradient: Gradient;\n\t/**@internal */\n\tprivate _textureMode: TrailTextureMode = TrailTextureMode.Stretch;\n\t/**@internal */\n\tprivate _trialGeometry: GeometryElement;\n\t/**@internal 拖尾总长度*/\n\t_totalLength: number = 0;\n\n\t_ownerRender: TrailRenderer;\n\t_lastPosition: Vector3 = new Vector3();\n\n\t_curtime: number = 0;\n\n\t/**轨迹准线。*/\n\talignment: TrailAlignment = TrailAlignment.View;\n\n\t/**\n\t * 获取淡出时间。\n\t * @return  淡出时间。\n\t */\n\tget time(): number {\n\t\treturn this._time;\n\t}\n\n\t/**\n\t * 设置淡出时间。\n\t * @param value 淡出时间。\n\t */\n\tset time(value: number) {\n\t\tthis._time = value;\n\t\tthis._ownerRender._shaderValues.setNumber(TrailFilter.LIFETIME, value);\n\t}\n\n\t/**\n\t * 获取新旧顶点之间最小距离。\n\t * @return  新旧顶点之间最小距离。\n\t */\n\tget minVertexDistance(): number {\n\t\treturn this._minVertexDistance;\n\t}\n\n\t/**\n\t * 设置新旧顶点之间最小距离。\n\t * @param value 新旧顶点之间最小距离。\n\t */\n\tset minVertexDistance(value: number) {\n\t\tthis._minVertexDistance = value;\n\t}\n\n\t/**\n\t * 获取宽度倍数。\n\t * @return  宽度倍数。\n\t */\n\tget widthMultiplier(): number {\n\t\treturn this._widthMultiplier;\n\t}\n\n\t/**\n\t * 设置宽度倍数。\n\t * @param value 宽度倍数。\n\t */\n\tset widthMultiplier(value: number) {\n\t\tthis._widthMultiplier = value;\n\t}\n\n\t/**\n\t * 获取宽度曲线。\n\t * @return  宽度曲线。\n\t */\n\tget widthCurve(): FloatKeyframe[] {\n\t\treturn this._widthCurve;\n\t}\n\n\t/**\n\t * 设置宽度曲线。最多10个\n\t * @param value 宽度曲线。\n\t */\n\tset widthCurve(value: FloatKeyframe[]) {\n\t\tthis._widthCurve = value;\n\t\tvar widthCurveFloatArray: Float32Array = new Float32Array(value.length * 4);\n\t\tvar i: number, j: number, index: number = 0;\n\t\tfor (i = 0, j = value.length; i < j; i++) {\n\t\t\twidthCurveFloatArray[index++] = value[i].time;\n\t\t\twidthCurveFloatArray[index++] = value[i].inTangent;\n\t\t\twidthCurveFloatArray[index++] = value[i].outTangent;\n\t\t\twidthCurveFloatArray[index++] = value[i].value;\n\t\t}\n\t\tthis._ownerRender._shaderValues.setBuffer(TrailFilter.WIDTHCURVE, widthCurveFloatArray);\n\t\tthis._ownerRender._shaderValues.setInt(TrailFilter.WIDTHCURVEKEYLENGTH, value.length);\n\t}\n\n\t/**\n\t * 获取颜色梯度。\n\t * @return  颜色梯度。\n\t */\n\tget colorGradient(): Gradient {\n\t\treturn this._colorGradient;\n\t}\n\n\t/**\n\t * 设置颜色梯度。\n\t * @param value 颜色梯度。\n\t */\n\tset colorGradient(value: Gradient) {\n\t\tthis._colorGradient = value;\n\t}\n\n\t/**\n\t * 获取纹理模式。\n\t * @return  纹理模式。\n\t */\n\tget textureMode(): TrailTextureMode {\n\t\treturn this._textureMode;\n\t}\n\n\t/**\n\t * 设置纹理模式。\n\t * @param value 纹理模式。\n\t */\n\tset textureMode(value: TrailTextureMode) {\n\t\tthis._textureMode = value;\n\t}\n\n\tconstructor(owner: TrailRenderer) {\n\t\tthis._ownerRender = owner;\n\t\tthis._initDefaultData();\n\t\tthis.addRenderElement();\n\t}\n\n\n\n\t/**\n\t * @internal\n\t */\n\taddRenderElement(): void {\n\t\tvar render: TrailRenderer = (<TrailRenderer>this._ownerRender);\n\t\tvar elements: RenderElement[] = render._renderElements;\n\t\tvar material: TrailMaterial = (<TrailMaterial>render.sharedMaterials[0]);\n\t\t(material) || (material = TrailMaterial.defaultMaterial);\n\t\tvar element: RenderElement = new RenderElement();\n\t\telement.setTransform((this._ownerRender.owner as Sprite3D)._transform);\n\t\telement.render = render;\n\t\telement.material = material;\n\t\tthis._trialGeometry = new TrailGeometry(this);\n\t\telement.setGeometry(this._trialGeometry);\n\t\telements.push(element);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_update(state: RenderContext3D): void {\n\t\tvar render: BaseRender = this._ownerRender;\n\t\tconst scene = this._ownerRender.owner.scene\n\t\tif(!scene)\n\t\t\treturn;\n\t\tthis._curtime += scene.timer._delta / 1000;\n\t\t//设置颜色\n\t\trender._shaderValues.setNumber(TrailFilter.CURTIME, this._curtime);\n\t\t//现在的位置记录\n\t\tvar curPos: Vector3 = (this._ownerRender.owner as Sprite3D).transform.position;\n\t\tvar element: TrailGeometry = (<TrailGeometry>render._renderElements[0]._geometry);\n\t\telement._updateDisappear();\n\t\telement._updateTrail((<Camera>state.camera), this._lastPosition, curPos);\n\t\telement._updateVertexBufferUV();\n\t\t//克隆到lastPosition\n\t\tcurPos.cloneTo(this._lastPosition);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_initDefaultData(): void {\n\t\tthis.time = 5.0;\n\t\tthis.minVertexDistance = 0.1;\n\t\tthis.widthMultiplier = 1;\n\t\tthis.textureMode = TrailTextureMode.Stretch;\n\n\t\tvar widthKeyFrames: FloatKeyframe[] = [];\n\t\tvar widthKeyFrame1: FloatKeyframe = new FloatKeyframe();\n\t\twidthKeyFrame1.time = 0;\n\t\twidthKeyFrame1.inTangent = 0;\n\t\twidthKeyFrame1.outTangent = 0;\n\t\twidthKeyFrame1.value = 1;\n\t\twidthKeyFrames.push(widthKeyFrame1);\n\t\tvar widthKeyFrame2: FloatKeyframe = new FloatKeyframe();\n\t\twidthKeyFrame2.time = 1;\n\t\twidthKeyFrame2.inTangent = 0;\n\t\twidthKeyFrame2.outTangent = 0;\n\t\twidthKeyFrame2.value = 1;\n\t\twidthKeyFrames.push(widthKeyFrame2);\n\t\tthis.widthCurve = widthKeyFrames;\n\n\t\tvar gradient: Gradient = new Gradient(2, 2);\n\t\tgradient.mode = GradientMode.Blend;\n\t\tgradient.addColorRGB(0, Color.WHITE);\n\t\tgradient.addColorRGB(1, Color.WHITE);\n\t\tgradient.addColorAlpha(0, 1);\n\t\tgradient.addColorAlpha(1, 1);\n\t\tthis.colorGradient = gradient;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tdestroy(): void {\n\t\tthis._trialGeometry.destroy();\n\t\tthis._trialGeometry = null;\n\t\tthis._widthCurve = null;\n\t\tthis._colorGradient = null;\n\t}\n\n\tclear(): void {\n\t\t(<TrailGeometry>this._trialGeometry).clear();\n\t\tthis._lastPosition.setValue(0, 0, 0);\n\t\tthis._curtime = 0;\n\t\tthis._totalLength = 0;\n\t}\n}\n\n","import { Sprite3D } from \"../Sprite3D\"\nimport { Transform3D } from \"../Transform3D\"\nimport { BaseRender } from \"../render/BaseRender\"\nimport { RenderContext3D } from \"../render/RenderContext3D\"\nimport { TrailFilter } from \"./TrailFilter\";\nimport { FloatKeyframe } from \"../FloatKeyframe\";\nimport { Gradient } from \"../Gradient\";\nimport { Component } from \"../../../components/Component\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { TrailTextureMode } from \"../TrailTextureMode\"\nimport { TrailAlignment } from \"./TrailAlignment\"\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\n\n/**\n * <code>TrailRenderer</code> 类用于创建拖尾渲染器。\n */\nexport class TrailRenderer extends BaseRender {\n\n    /**@internal */\n    _trailFilter: TrailFilter;\n\n    protected _projectionViewWorldMatrix: Matrix4x4 = new Matrix4x4();\n\n    /**\n     * \n     */\n    constructor() {\n        super();\n        this._supportOctree = false;\n\n    }\n\n    protected _onAdded(): void {\n        this._trailFilter = new TrailFilter(this);\n    }\n\n    /**\n     * 获取淡出时间。单位s\n     * @return  淡出时间。\n     */\n    get time(): number {\n        return this._trailFilter.time;\n    }\n\n    /**\n     * 设置淡出时间。单位s\n     * @param value 淡出时间。\n     */\n    set time(value: number) {\n        this._trailFilter.time = value;\n    }\n\n    /**\n     * 获取新旧顶点之间最小距离。\n     * @return  新旧顶点之间最小距离。\n     */\n    get minVertexDistance(): number {\n        return this._trailFilter.minVertexDistance;\n    }\n\n    /**\n     * 设置新旧顶点之间最小距离。\n     * @param value 新旧顶点之间最小距离。\n     */\n    set minVertexDistance(value: number) {\n        this._trailFilter.minVertexDistance = value;\n    }\n\n    /**\n     * 获取宽度倍数。\n     * @return  宽度倍数。\n     */\n    get widthMultiplier(): number {\n        return this._trailFilter.widthMultiplier;\n    }\n\n    /**\n     * 设置宽度倍数。\n     * @param value 宽度倍数。\n     */\n    set widthMultiplier(value: number) {\n        this._trailFilter.widthMultiplier = value;\n    }\n\n    /**\n     * 获取宽度曲线。\n     * @return  宽度曲线。\n     */\n    get widthCurve(): FloatKeyframe[] {\n        return this._trailFilter.widthCurve;\n    }\n\n    /**\n     * 设置宽度曲线。最多10个\n     * @param value 宽度曲线。\n     */\n    set widthCurve(value: FloatKeyframe[]) {\n        this._trailFilter.widthCurve = value;\n    }\n\n    /**\n     * 获取颜色梯度。\n     * @return  颜色梯度。\n     */\n    get colorGradient(): Gradient {\n        return this._trailFilter.colorGradient;\n    }\n\n    /**\n     * 设置颜色梯度。\n     * @param value 颜色梯度。\n     */\n    set colorGradient(value: Gradient) {\n        this._trailFilter.colorGradient = value;\n    }\n\n    /**\n     * 获取纹理模式。\n     * @return  纹理模式。\n     */\n    get textureMode(): TrailTextureMode {\n        return this._trailFilter.textureMode;\n    }\n\n    /**\n     * 设置纹理模式。\n     * @param value 纹理模式。\n     */\n    set textureMode(value: TrailTextureMode) {\n        this._trailFilter.textureMode = value;\n    }\n\n    get alignment(): TrailAlignment {\n        return this._trailFilter.alignment;\n    }\n\n    set alignment(value: TrailAlignment) {\n        this._trailFilter.alignment = value;\n    }\n\n    protected _onEnable(): void {\n        super._onEnable();\n\n        (this.owner as Sprite3D)._transform.position.cloneTo(this._trailFilter._lastPosition);//激活时需要重置上次位置\n    }\n\n    onUpdate(): void {\n        this._calculateBoundingBox();\n    }\n\n    /**\n     * 包围盒,只读,不允许修改其值。\n     */\n    get bounds(): Bounds {\n        return this._bounds;\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    protected _calculateBoundingBox(): void {\n        let context = RenderContext3D._instance;\n        this.boundsChange = false;\n        this._trailFilter._update(context);\n\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _renderUpdate(state: RenderContext3D, transform: Transform3D): void {\n        super._renderUpdate(state, transform);\n    }\n\n    clear(): void {\n        this._trailFilter.clear();\n    }\n\n    /**\n     * @internal\n     */\n    protected _onDestroy() {\n        this._trailFilter.destroy();\n        super._onDestroy();\n    }\n\n    _cloneTo(dest: Component): void {\n        super._cloneTo(dest);\n        let render = dest as TrailRenderer;\n        render.time = this.time;\n        render.minVertexDistance = this.minVertexDistance;\n        //render.widthCurve = this.widthCurve;\n        var widthCurve: FloatKeyframe[] = [];\n        var widthCurveData: any[] = this.widthCurve;\n        for (let i = 0, n = this.widthCurve.length; i < n; i++) {\n            widthCurve.push(widthCurveData[i].clone());\n        }\n        render.widthCurve = widthCurve;\n        render.colorGradient = this.colorGradient.clone();\n        render.textureMode = this.textureMode;\n        render.alignment = this.alignment;\n    }\n\n}\n\n","import { TrailFilter } from \"./TrailFilter\";\nimport { TrailRenderer } from \"./TrailRenderer\";\nimport { FloatKeyframe } from \"../FloatKeyframe\"\nimport { Gradient } from \"../Gradient\"\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\nimport { Material } from \"../material/Material\"\nimport { Node } from \"../../../display/Node\"\nimport { Loader } from \"../../../net/Loader\"\nimport { Sprite3D } from \"../Sprite3D\";\nimport { Color } from \"../../../maths/Color\";\n\n/**\n * <code>TrailSprite3D</code> 类用于创建拖尾渲染精灵。\n */\nexport class TrailSprite3D extends RenderableSprite3D {\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {}\n\n\t/** @internal */\n\tprivate _geometryFilter: TrailFilter;\n\n\t/**\n\t * Trail过滤器。\n\t */\n\tget trailFilter(): TrailFilter {\n\t\treturn (<TrailFilter>this._geometryFilter);\n\t}\n\n\t/**\n\t * Trail渲染器。\n\t */\n\tget trailRenderer(): TrailRenderer {\n\t\treturn (<TrailRenderer>this._render);\n\t}\n\n\tconstructor(name: string = null) {\n\t\tsuper(name);\n\t\tthis._render = this.addComponent(TrailRenderer);\n\t\tthis._geometryFilter = (this._render as TrailRenderer)._trailFilter;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_parse(data: any, spriteMap: any): void {\n\t\tsuper._parse(data, spriteMap);\n\t\tvar render: TrailRenderer = (<TrailRenderer>this._render);\n\t\tvar filter: TrailFilter = (<TrailFilter>this._geometryFilter);\n\t\tvar i: number, j: number;\n\t\tvar materials: any[] = data.materials;\n\t\tif (materials) {\n\t\t\tvar sharedMaterials: Material[] = render.sharedMaterials;\n\t\t\tvar materialCount: number = materials.length;\n\t\t\tsharedMaterials.length = materialCount;\n\t\t\tfor (i = 0; i < materialCount; i++)\n\t\t\t\tsharedMaterials[i] = Loader.getRes(materials[i].path);\n\t\t\trender.sharedMaterials = sharedMaterials;\n\t\t}\n\t\t//时间\n\t\tfilter.time = data.time;\n\t\t//最小顶点距离\n\t\tfilter.minVertexDistance = data.minVertexDistance;\n\t\tfilter.widthMultiplier = data.widthMultiplier;\n\t\tfilter.textureMode = data.textureMode;\n\t\t(data.alignment != null) && (filter.alignment = data.alignment);\n\t\t//widthCurve\n\t\tvar widthCurve: FloatKeyframe[] = [];\n\t\tvar widthCurveData: any[] = data.widthCurve;\n\t\tfor (i = 0, j = widthCurveData.length; i < j; i++) {\n\t\t\tvar trailkeyframe: FloatKeyframe = new FloatKeyframe();\n\t\t\ttrailkeyframe.time = widthCurveData[i].time;\n\t\t\ttrailkeyframe.inTangent = widthCurveData[i].inTangent;\n\t\t\ttrailkeyframe.outTangent = widthCurveData[i].outTangent;\n\t\t\ttrailkeyframe.value = widthCurveData[i].value;\n\t\t\twidthCurve.push(trailkeyframe);\n\t\t}\n\t\tfilter.widthCurve = widthCurve;\n\t\t//colorGradient\n\t\tvar colorGradientData: any = data.colorGradient;\n\t\tvar colorKeys: any[] = colorGradientData.colorKeys;\n\t\tvar alphaKeys: any[] = colorGradientData.alphaKeys;\n\t\tvar colorGradient: Gradient = new Gradient(colorKeys.length, alphaKeys.length);\n\t\tcolorGradient.mode = colorGradientData.mode;\n\n\t\tfor (i = 0, j = colorKeys.length; i < j; i++) {\n\t\t\tvar colorKey: any = colorKeys[i];\n\t\t\tcolorGradient.addColorRGB(colorKey.time, new Color(colorKey.value[0], colorKey.value[1], colorKey.value[2], 1.0));\n\t\t}\n\n\t\tfor (i = 0, j = alphaKeys.length; i < j; i++) {\n\t\t\tvar alphaKey: any = alphaKeys[i];\n\t\t\tcolorGradient.addColorAlpha(alphaKey.time, alphaKey.value);\n\t\t}\n\t\tfilter.colorGradient = colorGradient;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_cloneTo(destObject: any, srcSprite: Node, dstSprite: Node): void {\n\t\tsuper._cloneTo(destObject, srcSprite, dstSprite);\n\t}\n\n\tclear(): void {\n\t\t(this._render as TrailRenderer).clear();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprotected _create(): Node {\n\t\treturn new Sprite3D();\n\t}\n}\n\n","import { ILaya3D } from \"../../../../ILaya3D\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { MeshInstanceGeometry } from \"../../graphics/MeshInstanceGeometry\";\nimport { InstanceRenderElementOBJ } from \"../../RenderObjs/RenderObj/InstanceRenderElementOBJ\";\nimport { Mesh } from \"../../resource/models/Mesh\";\nimport { Camera } from \"../Camera\";\nimport { MeshSprite3DShaderDeclaration } from \"../MeshSprite3DShaderDeclaration\";\nimport { SimpleSkinnedMeshRenderer } from \"../SimpleSkinnedMeshRenderer\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { Transform3D } from \"../Transform3D\";\nimport { BaseRender } from \"./BaseRender\";\nimport { RenderContext3D } from \"./RenderContext3D\";\nimport { RenderElement } from \"./RenderElement\";\n\nexport class InstanceRenderElement extends RenderElement {\n    /** @internal */\n    static maxInstanceCount: number = 1024;\n    /**@internal */\n    private static _pool: InstanceRenderElement[] = [];\n\n    static create(): InstanceRenderElement {\n        let elemet = InstanceRenderElement._pool.length > 0 ? InstanceRenderElement._pool.pop() : new InstanceRenderElement();\n        elemet._isInPool = false;\n        elemet.clear();\n        return elemet;\n    }\n    /**@internal */\n    _instanceBatchElementList: SingletonList<RenderElement>\n    /**@internal */\n    _isInPool: boolean;\n    /**判断是否需要更新数据 */\n    _isUpdataData: boolean;\n    /**@internal recover renderData*/\n    private oriRendertype: number;\n\n\n    constructor() {\n        super();\n        this.setGeometry(new MeshInstanceGeometry(null));\n        this._instanceBatchElementList = new SingletonList();\n        this._isUpdataData = true;\n    }\n\n    /**\n     * @internal\n     */\n    getInvertFront(): boolean {\n        return false;\n    }\n\n    protected _createRenderElementOBJ() {\n        this._renderElementOBJ = LayaGL.renderOBJCreate.createInstanceRenderElement();\n    }\n\n    compileShader(context: IRenderContext3D) {\n        var passes: ShaderPass[] = this._subShader._passes;\n        this._renderElementOBJ._clearShaderInstance();\n        for (var j: number = 0, m: number = passes.length; j < m; j++) {\n            var pass: ShaderPass = passes[j];\n            //NOTE:this will cause maybe a shader not render but do prepare before，but the developer can avoide this manual,for example shaderCaster=false.\n            if (pass._pipelineMode !== context.pipelineMode)\n                continue;\n            var comDef: DefineDatas = RenderElement._compileDefine;\n            context.sceneShaderData._defineDatas.cloneTo(comDef);\n            this.render && comDef.addDefineDatas(this.render._shaderValues._defineDatas);\n\n            comDef.addDefineDatas(this._renderElementOBJ._materialShaderData._defineDatas);\n            //add Instance Define\n            comDef.add(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\n\n            var shaderIns: ShaderInstance = pass.withCompile(comDef);\n            this._renderElementOBJ._addShaderInstance(shaderIns);\n        }\n    }\n\n\n    _renderUpdatePre(context: RenderContext3D) {\n        var sceneMark: number = ILaya3D.Scene3D._updateMark;\n        var transform: Transform3D = this.transform;\n        context.renderElement = this;\n        //model local\n        var modelDataRender: boolean = (!!this.render) ? (sceneMark !== this.render._sceneUpdateMark || this.renderType !== this.render._updateRenderType) : false;\n        if (modelDataRender) {\n            this.render._renderUpdate(context, transform);\n            this.render._sceneUpdateMark = sceneMark;\n        }\n        //camera\n        var updateMark: number = Camera._updateMark;\n        if (true) {//此处处理更新为裁剪和合并后的，可避免浪费\n            this.render._renderUpdateWithCamera(context, transform);\n            this.oriRendertype = this.render._updateRenderType\n            this.render._updateMark = updateMark;\n            this.render._updateRenderType = this.renderType;\n            if (this._isUpdataData) {\n                let mesh = (this._geometry as MeshInstanceGeometry).subMesh._mesh;\n                this.updateInstanceData(mesh);\n                this._isUpdataData = false;\n            }\n        }\n\n        const subUbo = (!!this.render) ? this.render._subUniformBufferData : false;\n        if (subUbo) {\n            subUbo._needUpdate && BaseRender._transLargeUbO.updateSubData(subUbo);\n        }\n        this._renderElementOBJ._isRender = this._geometry._prepareRender(context);\n        this._geometry._updateRenderParams(context);\n        this.compileShader(context._contextOBJ);\n        this._geometry.instanceCount = this._instanceBatchElementList.length;\n        this._renderElementOBJ._invertFront = this.getInvertFront();\n    }\n\n    updateInstanceData(mesh: Mesh) {\n        mesh._setInstanceBuffer();\n        (this._renderElementOBJ as InstanceRenderElementOBJ).clear();\n        this._geometry.bufferState = mesh._instanceBufferState;\n        switch (mesh._instanceBufferStateType) {\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:\n                //worldMatrix\n                var worldMatrixData: Float32Array = (this._renderElementOBJ as InstanceRenderElementOBJ).getUpdateData(0, 16 * InstanceRenderElement.maxInstanceCount);\n                (this._renderElementOBJ as InstanceRenderElementOBJ).addUpdateBuffer(mesh._instanceWorldVertexBuffer, 16);\n                var insBatches = this._instanceBatchElementList;\n                var elements = insBatches.elements;\n                var count: number = insBatches.length;\n                (this._renderElementOBJ as InstanceRenderElementOBJ).drawCount = count;\n                let bone = (elements[0].render as SimpleSkinnedMeshRenderer).rootBone;\n                if (bone) {\n                    for (var i: number = 0; i < count; i++) {\n                        var mat: Matrix4x4 = (((elements[i].render) as SimpleSkinnedMeshRenderer).rootBone as Sprite3D)._transform.worldMatrix;\n                        worldMatrixData.set(mat.elements, i * 16);\n                    }\n                }\n                else {\n                    for (var i: number = 0; i < count; i++)\n                        worldMatrixData.set(elements[i].transform.worldMatrix.elements, i * 16);\n                }\n                //simpleAnimationData\n                var simpleAnimatorData: Float32Array = (this._renderElementOBJ as InstanceRenderElementOBJ).getUpdateData(1, 4 * InstanceRenderElement.maxInstanceCount);\n                if (bone) {\n                    for (var i: number = 0; i < count; i++) {\n                        var render: SimpleSkinnedMeshRenderer = (elements[i].render) as SimpleSkinnedMeshRenderer;\n                        render._computeAnimatorParamsData();\n                        var simpleAnimatorParams: Vector4 = render._simpleAnimatorParams;\n                        var offset: number = i * 4;\n                        simpleAnimatorData[offset] = simpleAnimatorParams.x;\n                        simpleAnimatorData[offset + 1] = simpleAnimatorParams.y;\n                    }\n                }\n                else {\n                    for (var i: number = 0; i < count; i++) {\n                        simpleAnimatorData[offset] = 0;\n                        simpleAnimatorData[offset + 1] = 0;\n                    }\n                }\n                (this._renderElementOBJ as InstanceRenderElementOBJ).addUpdateBuffer(mesh._instanceSimpleAniVertexBuffer, 4)\n                break;\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL:\n\n                var worldMatrixData: Float32Array = (this._renderElementOBJ as InstanceRenderElementOBJ).getUpdateData(0, 16 * InstanceRenderElement.maxInstanceCount);\n                (this._renderElementOBJ as InstanceRenderElementOBJ).addUpdateBuffer(mesh._instanceWorldVertexBuffer, 16);\n                var insBatches = this._instanceBatchElementList;\n                var elements: RenderElement[] = insBatches.elements;\n                var count: number = insBatches.length;\n                (this._renderElementOBJ as InstanceRenderElementOBJ).drawCount = count;\n                for (var i: number = 0; i < count; i++)\n                    worldMatrixData.set(elements[i].transform.worldMatrix.elements, i * 16);\n                break;\n        }\n    }\n\n    clear() {\n        this._instanceBatchElementList.length = 0;\n    }\n    recover(): void {\n        InstanceRenderElement._pool.push(this);\n        this.render._updateRenderType = this.oriRendertype;\n        this._isInPool = true;\n    }\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { GeometryElement } from \"../../core/GeometryElement\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Mesh } from \"./Mesh\";\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { SkinnedMeshRenderer } from \"../../core/SkinnedMeshRenderer\";\n\n\n/**\n * <code>SubMesh</code> 类用于创建子网格数据模板。\n */\nexport class SubMesh extends GeometryElement {\n\n\t/**@internal */\n\tprivate static _type: number = GeometryElement._typeCounter++;\n\n\t/** @internal */\n\t_mesh: Mesh;\n\n\t/** @internal */\n\t_boneIndicesList: Uint16Array[];\n\t/** @internal */\n\t_subIndexBufferStart: number[];\n\t/** @internal */\n\t_subIndexBufferCount: number[];\n\n\t/** @internal */\n\t_indexInMesh: number;\n\n\t/** @internal */\n\t_vertexStart: number;\n\t/** @internal */\n\t_indexStart: number;\n\t/** @internal */\n\t_indexCount: number;\n\t/** @internal */\n\t_indices: Uint16Array | Uint32Array;\n\t/**@internal [只读]*/\n\t_vertexBuffer: VertexBuffer3D;\n\t/**@internal [只读]*/\n\t_indexBuffer: IndexBuffer3D;\n\n\t/**\n\t * 获取索引数量。\n\t */\n\tget indexCount(): number {\n\t\treturn this._indexCount;\n\t}\n\n\t/**\n\t * 创建一个 <code>SubMesh</code> 实例。\n\t * @param\tmesh  网格数据模板。\n\t */\n\tconstructor(mesh: Mesh) {\n\t\tsuper(MeshTopology.Triangles, DrawType.DrawElement);\n\t\tthis.indexFormat = mesh.indexFormat;\n\t\tif (mesh.indexFormat === IndexFormat.UInt32 && !LayaGL.renderEngine.getCapable(RenderCapable.Element_Index_Uint32)) {\n\t\t\tconsole.warn(\"SubMesh:this device do not support IndexFormat.UInt32.\");\n\t\t\treturn;\n\t\t}\n\t\tthis._mesh = mesh;\n\t\tthis._boneIndicesList = [];\n\t\tthis._subIndexBufferStart = [];\n\t\tthis._subIndexBufferCount = [];\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setIndexRange(indexStart: number, indexCount: number, indexFormat: IndexFormat = IndexFormat.UInt16): void {\n\t\tthis._indexStart = indexStart;\n\t\tthis._indexCount = indexCount;\n\t\tif (this._indexBuffer.canRead) {\n\t\t\tif (indexFormat == IndexFormat.UInt16) {\n\t\t\t\tthis._indices = new Uint16Array(this._indexBuffer.getData().buffer, indexStart * 2, indexCount);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._indices = new Uint32Array(this._indexBuffer.getData().buffer, indexStart * 4, indexCount);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t * @override\n\t */\n\t_getType(): number {\n\t\treturn SubMesh._type;\n\t}\n\n\n\t/**\n\t * @internal\n\t * @override\n\t */\n\t_prepareRender(state: RenderContext3D): boolean {\n\t\tthis._mesh._uploadVerticesData();\n\t\treturn true;\n\t}\n\n\t/**\n\t * @internal\n\t * @override\n\t */\n\t_updateRenderParams(state: RenderContext3D): void {\n\t\tvar mesh: Mesh = this._mesh;\n\n\t\tvar skinnedDatas: any[] = (state.renderElement && !!(state.renderElement.render)) ? (<SkinnedMeshRenderer>state.renderElement.render)._skinnedData : null;\n\t\tvar byteCount: number;\n\t\tswitch (mesh.indexFormat) {\n\t\t\tcase IndexFormat.UInt32:\n\t\t\t\tbyteCount = 4;\n\t\t\t\tbreak;\n\t\t\tcase IndexFormat.UInt16:\n\t\t\t\tbyteCount = 2;\n\t\t\t\tbreak;\n\t\t\tcase IndexFormat.UInt8:\n\t\t\t\tbyteCount = 1;\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.clearRenderParams();\n\t\tthis.bufferState = mesh._bufferState;\n\t\tif (skinnedDatas) {\n\t\t\tfor (var i: number = 0, n: number = this._boneIndicesList.length; i < n; i++) {\n\t\t\t\tthis.setDrawElemenParams(this._subIndexBufferCount[i], this._subIndexBufferStart[i] * byteCount);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setDrawElemenParams(this._indexCount, this._indexStart * byteCount);\n\t\t}\n\t}\n\n\n\t/**\n\t * 拷贝并获取子网格索引数据的副本。\n\t */\n\tgetIndices(): Uint16Array | Uint32Array {\n\t\tif (this._mesh._isReadable)\n\t\t\treturn this._indices.slice();\n\t\telse\n\t\t\tthrow \"SubMesh:can't get indices on subMesh,mesh's isReadable must be true.\";\n\t}\n\n\t/**\n\t * 设置子网格索引。\n\t * @param indices \n\t */\n\tsetIndices(indices: Uint16Array): void {\n\t\tthis._indexBuffer.setData(indices, this._indexStart, 0, this._indexCount);\n\t}\n\n\t/**\n\t * {@inheritDoc GeometryElement.destroy}\n\t * @override\n\t */\n\tdestroy(): void {\n\t\tif (this._destroyed)\n\t\t\treturn;\n\t\tsuper.destroy();\n\t\tthis._indexBuffer.destroy();\n\t\tthis._indexBuffer = null;\n\t\tthis._mesh = null;\n\t\tthis._boneIndicesList = null;\n\t\tthis._subIndexBufferStart = null;\n\t\tthis._subIndexBufferCount = null;\n\t}\n}\n\n","import { ILaya } from \"../../../../ILaya\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Loader } from \"../../../net/Loader\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { Resource } from \"../../../resource/Resource\";\nimport { Handler } from \"../../../utils/Handler\";\nimport { IClone } from \"../../../utils/IClone\";\nimport { InstanceRenderElement } from \"../../core/render/InstanceRenderElement\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { Physics3D } from \"../../Physics3D\";\nimport { Utils3D } from \"../../utils/Utils3D\";\nimport { SubMesh } from \"./SubMesh\";\nimport { Color } from \"../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n/**\n * @internal\n */\nexport class skinnedMatrixCache {\n    readonly subMeshIndex: number;\n    readonly batchIndex: number;\n    readonly batchBoneIndex: number;\n    constructor(subMeshIndex: number, batchIndex: number, batchBoneIndex: number) {\n        this.subMeshIndex = subMeshIndex;\n        this.batchIndex = batchIndex;\n        this.batchBoneIndex = batchBoneIndex;\n    }\n}\n\n/**\n * <code>Mesh</code> 类用于创建文件网格数据模板。\n */\nexport class Mesh extends Resource implements IClone {\n\n    static MESH_INSTANCEBUFFER_TYPE_NORMAL: number = 0;\n\n    static MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR: number = 1;\n\n    /** @internal */\n    private _tempVector30: Vector3 = new Vector3()\n    /** @internal */\n    private _tempVector31: Vector3 = new Vector3();\n    /** @internal */\n    private _tempVector32: Vector3 = new Vector3();\n    /** @internal */\n    private static _nativeTempVector30: number;\n    /** @internal */\n    private static _nativeTempVector31: number;\n    /** @internal */\n    private static _nativeTempVector32: number;\n\n    /**\n      * @internal\n      */\n    static __init__(): void {\n        var physics3D: any = Physics3D._bullet;\n        if (physics3D) {\n            Mesh._nativeTempVector30 = physics3D.btVector3_create(0, 0, 0);\n            Mesh._nativeTempVector31 = physics3D.btVector3_create(0, 0, 0);\n            Mesh._nativeTempVector32 = physics3D.btVector3_create(0, 0, 0);\n        }\n    }\n\n\n    /**\n     * 加载网格模板。\n     * @param url 模板地址。\n     * @param complete 完成回调。\n     */\n    static load(url: string, complete: Handler): void {\n        ILaya.loader.load(url, complete, null, Loader.MESH);\n    }\n\n    /** @internal */\n    private _btTriangleMesh: number;\n    /** @internal */\n    private _minVerticesUpdate: number = -1;\n    /** @internal */\n    private _maxVerticesUpdate: number = -1;\n    /** @internal */\n    private _needUpdateBounds: boolean = true;\n    /** @internal */\n    private _bounds: Bounds;\n\n    /** @internal */\n    _isReadable: boolean;\n    /** @internal */\n    _bufferState: BufferState = new BufferState();\n    /** @internal */\n    _instanceBufferState: BufferState;\n    /** @internal */\n    _instanceBufferStateType: number = 0;\n    /**@internal */\n    _instanceWorldVertexBuffer: VertexBuffer3D\n    /**@internal */\n    _instanceSimpleAniVertexBuffer: VertexBuffer3D\n    /** @internal */\n    _subMeshes: SubMesh[];\n    /** @internal */\n    _vertexBuffer: VertexBuffer3D = null;\n    /** @internal */\n    _indexBuffer: IndexBuffer3D = null;\n\n    /** @internal */\n    _boneNames: string[];\n    /** @internal */\n    _inverseBindPoses: Matrix4x4[];\n    /** @internal */\n    _skinnedMatrixCaches: skinnedMatrixCache[] = [];\n    /** @internal */\n    _vertexCount: number = 0;\n    /** @internal */\n    _indexFormat: IndexFormat = IndexFormat.UInt16;\n\n    /** @internal */\n    instanceWorldMatrixData: Float32Array;\n    /** @internal */\n    instanceSimpleAnimatorData: Float32Array;\n\n    /** @internal */\n    _width: number;\n\n    /** @internal */\n    _height: number;\n\n    /**\n     * 网格的全局默认绑定动作逆矩阵。\n     */\n    get inverseAbsoluteBindPoses(): Matrix4x4[] {\n        return this._inverseBindPoses;\n    }\n\n    /**\n     * 获取顶点个数。\n     */\n    get vertexCount(): number {\n        return this._vertexCount;\n    }\n\n    /**\n     * 获取索引个数。\n     */\n    get indexCount(): number {\n        return this._indexBuffer.indexCount;\n    }\n\n    /**\n     * SubMesh的个数。\n     */\n    get subMeshCount(): number {\n        return this._subMeshes.length;\n    }\n\n    /**\n     * 边界。\n     */\n    get bounds(): Bounds {\n        return this._bounds;\n    }\n\n    set bounds(value: Bounds) {\n        if (this._bounds !== value)\n            value.cloneTo(this._bounds);\n    }\n\n    /**\n     * 索引格式。\n     */\n    get indexFormat(): IndexFormat {\n        return this._indexFormat;\n    }\n\n\n    /**\n     * 设置indexformat\n     */\n    set indexFormat(value: IndexFormat) {\n        this._indexFormat = value\n        this._subMeshes.forEach(element => {\n            element.indexFormat = value;\n        });\n    }\n\n    /**\n     * 创建一个 <code>Mesh</code> 实例,禁止使用。\n     * @param isReadable 是否可读。\n     */\n    constructor(isReadable: boolean = true) {\n        super();\n        this._bounds = new Bounds(new Vector3(), new Vector3());\n        this._isReadable = isReadable;\n        this._subMeshes = [];\n        this.destoryedImmediately = false;\n    }\n\n    /**\n     * @internal\n     */\n    private _getPositionElement(vertexBuffer: VertexBuffer3D): VertexElement {\n        var vertexElements: any[] = vertexBuffer.vertexDeclaration._vertexElements;\n        for (var i: number = 0, n: number = vertexElements.length; i < n; i++) {\n            var vertexElement: VertexElement = vertexElements[i];\n            if (vertexElement._elementFormat === VertexElementFormat.Vector3 && vertexElement._elementUsage === VertexMesh.MESH_POSITION0)\n                return vertexElement;\n        }\n        return null;\n    }\n\n\n    /**\n     * @internal\n     */\n    private _getVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\n        data.length = this._vertexCount;\n        var verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\n        var element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\n        if (element) {\n            var uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\n            var floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\n            var uint8VerStr: number = verDec.vertexStride;\n            var floatVerStr: number = uint8VerStr / 4;\n            var uint8EleOffset: number = element._offset;\n            var floatEleOffset: number = uint8EleOffset / 4;\n\n            switch (elementUsage) {\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\n                    for (var i: number = 0; i < this._vertexCount; i++) {\n                        var offset: number = floatVerStr * i + floatEleOffset;\n                        data[i] = new Vector2(floatVertices[offset], floatVertices[offset + 1]);\n                    }\n                    break;\n                case VertexMesh.MESH_POSITION0:\n                case VertexMesh.MESH_NORMAL0:\n                    for (var i: number = 0; i < this._vertexCount; i++) {\n                        var offset: number = floatVerStr * i + floatEleOffset;\n                        data[i] = new Vector3(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2]);\n                    }\n                    break;\n                case VertexMesh.MESH_TANGENT0:\n                case VertexMesh.MESH_BLENDWEIGHT0:\n                    for (var i: number = 0; i < this._vertexCount; i++) {\n                        var offset: number = floatVerStr * i + floatEleOffset;\n                        data[i] = new Vector4(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\n                    }\n                    break;\n                case VertexMesh.MESH_COLOR0:\n                    for (var i: number = 0; i < this._vertexCount; i++) {\n                        var offset: number = floatVerStr * i + floatEleOffset;\n                        data[i] = new Color(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\n                    }\n                    break;\n                case VertexMesh.MESH_BLENDINDICES0:\n                    for (var i: number = 0; i < this._vertexCount; i++) {\n                        var offset: number = uint8VerStr * i + uint8EleOffset;\n                        data[i] = new Vector4(uint8Vertices[offset], uint8Vertices[offset + 1], uint8Vertices[offset + 2], uint8Vertices[offset + 3]);\n                    }\n                    break;\n                default:\n                    throw \"Mesh:Unknown elementUsage.\";\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _setVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\n        var verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\n        var element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\n        if (element) {\n            var uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\n            var floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\n            var uint8VerStr: number = verDec.vertexStride;\n            var float8VerStr: number = uint8VerStr / 4;\n            var uint8EleOffset: number = element._offset;\n            var floatEleOffset: number = uint8EleOffset / 4;\n            switch (elementUsage) {\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\n                        var offset: number = float8VerStr * i + floatEleOffset;\n                        var vec2: Vector2 = <Vector2>data[i];\n                        floatVertices[offset] = vec2.x;\n                        floatVertices[offset + 1] = vec2.y;\n                    }\n                    break;\n                case VertexMesh.MESH_POSITION0:\n                case VertexMesh.MESH_NORMAL0:\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\n                        var offset: number = float8VerStr * i + floatEleOffset;\n                        var vec3: Vector3 = <Vector3>data[i];\n                        floatVertices[offset] = vec3.x;\n                        floatVertices[offset + 1] = vec3.y;\n                        floatVertices[offset + 2] = vec3.z;\n                    }\n                    break;\n                case VertexMesh.MESH_TANGENT0:\n                case VertexMesh.MESH_BLENDWEIGHT0:\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\n                        var offset: number = float8VerStr * i + floatEleOffset;\n                        var vec4: Vector4 = <Vector4>data[i];\n                        floatVertices[offset] = vec4.x;\n                        floatVertices[offset + 1] = vec4.y;\n                        floatVertices[offset + 2] = vec4.z;\n                        floatVertices[offset + 3] = vec4.w;\n                    }\n                    break;\n                case VertexMesh.MESH_COLOR0:\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\n                        var offset: number = float8VerStr * i + floatEleOffset;\n                        var cor: Color = <Color>data[i];\n                        floatVertices[offset] = cor.r;\n                        floatVertices[offset + 1] = cor.g;\n                        floatVertices[offset + 2] = cor.b;\n                        floatVertices[offset + 3] = cor.a;\n                    }\n                    break;\n                case VertexMesh.MESH_BLENDINDICES0:\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\n                        var offset: number = uint8VerStr * i + uint8EleOffset;\n                        var vec4: Vector4 = <Vector4>data[i];\n                        uint8Vertices[offset] = vec4.x;\n                        uint8Vertices[offset + 1] = vec4.y;\n                        uint8Vertices[offset + 2] = vec4.z;\n                        uint8Vertices[offset + 3] = vec4.w;\n                    }\n                    break;\n                default:\n                    throw \"Mesh:Unknown elementUsage.\";\n            }\n            this._minVerticesUpdate = 0;\n            this._maxVerticesUpdate = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            console.warn(\"Mesh: the mesh don't have  this VertexElement.\");\n            //TODO:vertexBuffer结构发生变化\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _disposeResource(): void {\n        for (var i: number = 0, n: number = this._subMeshes.length; i < n; i++)\n            this._subMeshes[i].destroy();\n        this._btTriangleMesh && Physics3D._bullet.btStridingMeshInterface_destroy(this._btTriangleMesh);\n        this._vertexBuffer && this._vertexBuffer.destroy();\n        this._indexBuffer && this._indexBuffer.destroy();\n        this._bufferState.destroy();\n        this._instanceBufferState && this._instanceBufferState.destroy();\n        this._instanceWorldVertexBuffer && this._instanceWorldVertexBuffer.destroy();\n        this._instanceSimpleAniVertexBuffer && this._instanceSimpleAniVertexBuffer.destroy();\n        this.instanceWorldMatrixData && (this.instanceWorldMatrixData = null);\n        this.instanceSimpleAnimatorData && (this.instanceSimpleAnimatorData = null);\n        this._setCPUMemory(0);\n        this._setGPUMemory(0);\n        this._bufferState = null;\n        this._instanceBufferState = null;\n        this._vertexBuffer = null;\n        this._indexBuffer = null;\n        this._subMeshes = null;\n        this._btTriangleMesh = null;\n        this._indexBuffer = null;\n        this._boneNames = null;\n        this._inverseBindPoses = null;\n    }\n\n    /**\n     *@internal\n     */\n    _setSubMeshes(subMeshes: SubMesh[]): void {\n        this._subMeshes = subMeshes\n        for (var i: number = 0, n: number = subMeshes.length; i < n; i++)\n            subMeshes[i]._indexInMesh = i;\n    }\n\n\n    /**\n     * @internal\n     */\n    _setBuffer(vertexBuffer: VertexBuffer3D, indexBuffer: IndexBuffer3D): void {\n        var bufferState: BufferState = this._bufferState;\n        // bufferState.bind();\n        // bufferState.applyVertexBuffer(vertexBuffer);\n        // bufferState.applyIndexBuffer(indexBuffer);\n        // bufferState.unBind();\n        bufferState.applyState([vertexBuffer], indexBuffer);\n    }\n\n    /**\n     * @internal\n     */\n    _setInstanceBuffer() {\n        if (this._instanceBufferState)\n            return;\n        var instanceBufferState: BufferState = this._instanceBufferState = new BufferState();\n        var instanceBufferStateType = this._instanceBufferStateType;\n        let vertexArray = [];\n        vertexArray.push(this._vertexBuffer);\n        //new Instance VertexBuffer3D\n        let instanceBuffer3D: VertexBuffer3D = this._instanceWorldVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(InstanceRenderElement.maxInstanceCount * 16 * 4, BufferUsage.Dynamic, false);;\n        instanceBuffer3D.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\n        instanceBuffer3D.instanceBuffer = true;\n        vertexArray.push(instanceBuffer3D);\n        this.instanceWorldMatrixData = new Float32Array(InstanceRenderElement.maxInstanceCount * 16);\n        switch (instanceBufferStateType) {\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:\n                //new SimpleVertexBuffer3D\n                let instanceSimpleAnimatorBuffer = this._instanceSimpleAniVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(InstanceRenderElement.maxInstanceCount * 4 * 4, BufferUsage.Dynamic, false);\n                instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\n                instanceSimpleAnimatorBuffer.instanceBuffer = true;\n                this.instanceSimpleAnimatorData = new Float32Array(InstanceRenderElement.maxInstanceCount * 4);\n                vertexArray.push(instanceSimpleAnimatorBuffer);\n                break;\n        }\n        instanceBufferState.applyState(vertexArray, this._indexBuffer);\n    }\n\n    /**\n     * @internal\n     */\n    _getPhysicMesh(): any {\n        //if (!this._btTriangleMesh) {//TODO 去掉共享物理Mesh\n        var bt: any = Physics3D._bullet;\n        var triangleMesh: number = bt.btTriangleMesh_create();//TODO:独立抽象btTriangleMesh,增加内存复用\n        var nativePositio0: number = Mesh._nativeTempVector30;\n        var nativePositio1: number = Mesh._nativeTempVector31;\n        var nativePositio2: number = Mesh._nativeTempVector32;\n        var position0: Vector3 = this._tempVector30;\n        var position1: Vector3 = this._tempVector31;\n        var position2: Vector3 = this._tempVector32;\n\n        var vertexBuffer: VertexBuffer3D = this._vertexBuffer;\n        var positionElement: VertexElement = this._getPositionElement(vertexBuffer);\n        var verticesData: Float32Array = vertexBuffer.getFloat32Data();\n        var floatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\n        var posOffset: number = positionElement._offset / 4;\n\n        var indices: Uint16Array = this._indexBuffer.getData();//TODO:API修改问题\n        for (var i: number = 0, n: number = indices.length; i < n; i += 3) {\n            var p0Index: number = indices[i] * floatCount + posOffset;\n            var p1Index: number = indices[i + 1] * floatCount + posOffset;\n            var p2Index: number = indices[i + 2] * floatCount + posOffset;\n            position0.setValue(verticesData[p0Index], verticesData[p0Index + 1], verticesData[p0Index + 2]);\n            position1.setValue(verticesData[p1Index], verticesData[p1Index + 1], verticesData[p1Index + 2]);\n            position2.setValue(verticesData[p2Index], verticesData[p2Index + 1], verticesData[p2Index + 2]);\n\n            Utils3D._convertToBulletVec3(position0, nativePositio0);\n            Utils3D._convertToBulletVec3(position1, nativePositio1);\n            Utils3D._convertToBulletVec3(position2, nativePositio2);\n            bt.btTriangleMesh_addTriangle(triangleMesh, nativePositio0, nativePositio1, nativePositio2, false);\n        }\n        this._btTriangleMesh = triangleMesh;\n        //}\n        return this._btTriangleMesh;\n    }\n\n    /**\n     * @internal\n     */\n    _uploadVerticesData(): void {\n        var min: number = this._minVerticesUpdate;\n        var max: number = this._maxVerticesUpdate;\n        if (min !== -1 && max !== -1) {\n            var offset: number = min;\n            this._vertexBuffer.setData(this._vertexBuffer.getUint8Data().buffer, offset, offset, max - min);\n            this._minVerticesUpdate = -1;\n            this._maxVerticesUpdate = -1;\n        }\n    }\n\n    /**\n     * 根据获取子网格。\n     * @param index 索引。\n     */\n    getSubMesh(index: number): SubMesh {\n        return this._subMeshes[index];\n    }\n\n    /**\n     * 拷贝并填充位置数据至数组。\n     * @param positions 位置数组。\n     * @remark 该方法为拷贝操作，比较耗费性能。\n     */\n    getPositions(positions: Vector3[]): void {\n        if (this._isReadable)\n            this._getVerticeElementData(positions, VertexMesh.MESH_POSITION0);\n        else\n            throw \"Mesh:can't get positions on mesh,isReadable must be true.\";\n    }\n\n    /**\n     * 设置位置数据。\n     * @param positions 位置。\n     */\n    setPositions(positions: Vector3[]): void {\n        if (this._isReadable) {\n            this._setVerticeElementData(positions, VertexMesh.MESH_POSITION0);\n            this._needUpdateBounds = true;\n        }\n        else {\n            throw \"Mesh:setPosition() need isReadable must be true or use setVertices().\";\n        }\n    }\n\n    /**\n     * 拷贝并填充颜色数据至数组。\n     * @param colors 颜色数组。\n     * @remark 该方法为拷贝操作，比较耗费性能。\n     */\n    getColors(colors: Color[]): void {\n        if (this._isReadable)\n            this._getVerticeElementData(colors, VertexMesh.MESH_COLOR0);\n        else\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\n    }\n\n    /**\n     * 设置颜色数据。\n     * @param colors  颜色。\n     */\n    setColors(colors: Color[]): void {\n        if (this._isReadable)\n            this._setVerticeElementData(colors, VertexMesh.MESH_COLOR0);\n        else\n            throw \"Mesh:setColors() need isReadable must be true or use setVertices().\";\n    }\n\n    /**\n     * 拷贝并填充纹理坐标数据至数组。\n     * @param uvs 纹理坐标数组。\n     * @param channel 纹理坐标通道。\n     * @remark 该方法为拷贝操作，比较耗费性能。\n     */\n    getUVs(uvs: Vector2[], channel: number = 0): void {\n        if (this._isReadable) {\n            switch (channel) {\n                case 0:\n                    this._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\n                    break;\n                case 1:\n                    this._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\n                    break;\n                default:\n                    throw \"Mesh:Invalid channel.\";\n            }\n        }\n        else {\n            throw \"Mesh:can't get uvs on mesh,isReadable must be true.\";\n        }\n    }\n\n    /**\n     * 设置纹理坐标数据。\n     * @param uvs 纹理坐标。\n     * @param channel 纹理坐标通道。\n     */\n    setUVs(uvs: Vector2[], channel: number = 0): void {\n        if (this._isReadable) {\n            switch (channel) {\n                case 0:\n                    this._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\n                    break;\n                case 1:\n                    this._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\n                    break;\n                default:\n                    throw \"Mesh:Invalid channel.\";\n            }\n        }\n        else {\n            throw \"Mesh:setUVs() need isReadable must be true or use setVertices().\";\n        }\n    }\n\n    /**\n     * 拷贝并填充法线数据至数组。\n     * @param normals 法线数组。\n     * @remark 该方法为拷贝操作，比较耗费性能。\n     */\n    getNormals(normals: Vector3[]): void {\n        if (this._isReadable)\n            this._getVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\n        else\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\n    }\n\n    /**\n     * 设置法线数据。\n     * @param normals 法线。 \n     */\n    setNormals(normals: Vector3[]): void {\n        if (this._isReadable)\n            this._setVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\n        else\n            throw \"Mesh:setNormals() need must be true or use setVertices().\";\n    }\n\n    /**\n     * 拷贝并填充切线数据至数组。\n     * @param tangents 切线。\n     */\n    getTangents(tangents: Vector4[]): void {\n        if (this._isReadable)\n            this._getVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\n        else\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\n    }\n\n    /**\n     * 设置切线数据。\n     * @param tangents 切线。\n     */\n    setTangents(tangents: Vector4[]): void {\n        if (this._isReadable)\n            this._setVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\n        else\n            throw \"Mesh:setTangents() need isReadable must be true or use setVertices().\";\n    }\n\n    /**\n    * 获取骨骼权重。\n    * @param boneWeights 骨骼权重。\n    */\n    getBoneWeights(boneWeights: Vector4[]): void {\n        if (this._isReadable)\n            this._getVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\n        else\n            throw \"Mesh:can't get boneWeights on mesh,isReadable must be true.\";\n    }\n\n    /**\n    * 拷贝并填充骨骼权重数据至数组。\n    * @param boneWeights 骨骼权重。\n    */\n    setBoneWeights(boneWeights: Vector4[]): void {\n        if (this._isReadable)\n            this._setVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\n        else\n            throw \"Mesh:setBoneWeights() need isReadable must be true or use setVertices().\";\n    }\n\n    /**\n    * 获取骨骼索引。\n    * @param boneIndices 骨骼索引。\n    */\n    getBoneIndices(boneIndices: Vector4[]): void {\n        if (this._isReadable)\n            this._getVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\n        else\n            throw \"Mesh:can't get boneIndices on mesh,isReadable must be true.\";\n    }\n\n    /**\n    * 拷贝并填充骨骼索引数据至数组。\n    * @param boneWeights 骨骼索引。\n    */\n    setBoneIndices(boneIndices: Vector4[]): void {\n        if (this._isReadable)\n            this._setVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\n        else\n            throw \"Mesh:setBoneIndices() need isReadable must be true or use setVertices().\";\n    }\n\n\n    /**\n     * 将Mesh标记为不可读,可减少内存，标记后不可再调用相关读取方法。\n     */\n    markAsUnreadbale(): void {\n        this._uploadVerticesData();\n        this._vertexBuffer.markAsUnreadbale();\n        this._isReadable = false;\n    }\n\n    /**\n     * 获取顶点声明。\n     */\n    getVertexDeclaration(): VertexDeclaration {\n        return this._vertexBuffer._vertexDeclaration;\n    }\n\n    /**\n    * 拷贝并获取顶点数据的副本。\n    * @return 顶点数据。\n    */\n    getVertices(): ArrayBuffer {\n        if (this._isReadable)\n            return this._vertexBuffer.getUint8Data().buffer.slice(0);\n        else\n            throw \"Mesh:can't get vertices on mesh,isReadable must be true.\";\n    }\n\n    /**\n    * 设置顶点数据。\n    * @param vertices 顶点数据。\n    */\n    setVertices(vertices: ArrayBuffer): void {\n        this._vertexBuffer.setData(vertices);\n        this._needUpdateBounds = true;\n    }\n\n    /**\n     * 拷贝并获取网格索引的副本。\n     * @return 网格索引。\n     */\n    getIndices(): Uint8Array | Uint16Array | Uint32Array {\n        if (this._isReadable)\n            return this._indexBuffer.getData().slice();\n        else\n            throw \"Mesh:can't get indices on subMesh,mesh's isReadable must be true.\";\n    }\n\n    /**\n     * 设置网格索引。\n     * @param indices 网格索引。\n     */\n    setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\n        var format: IndexFormat;\n        if (indices instanceof Uint32Array)\n            format = IndexFormat.UInt32;\n        else if (indices instanceof Uint16Array)\n            format = IndexFormat.UInt16;\n        else if (indices instanceof Uint8Array)\n            format = IndexFormat.UInt8;\n\n        var indexBuffer: IndexBuffer3D = this._indexBuffer;\n        if (this._indexFormat !== format || indexBuffer.indexCount !== indices.length) {//format chang and length chang will recreate the indexBuffer\n            indexBuffer.destroy();\n            this._indexBuffer = indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(format, indices.length, BufferUsage.Static, this._isReadable);\n        }\n        indexBuffer.setData(indices);\n        this.indexFormat = format;\n\n    }\n\n\n    /**\n     * 从模型位置数据生成包围盒。\n     */\n    calculateBounds(): void {\n        if (this._isReadable) {\n            if (this._needUpdateBounds) {\n                var min: Vector3 = this._tempVector30;\n                var max: Vector3 = this._tempVector31;\n                min.x = min.y = min.z = Number.MAX_VALUE;\n                max.x = max.y = max.z = -Number.MAX_VALUE;\n\n                var vertexBuffer: VertexBuffer3D = this._vertexBuffer;\n                var positionElement: VertexElement = this._getPositionElement(vertexBuffer);\n                var verticesData: Float32Array = vertexBuffer.getFloat32Data();\n                var floatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\n                var posOffset: number = positionElement._offset / 4;\n                for (var j: number = 0, m: number = verticesData.length; j < m; j += floatCount) {\n                    var ofset: number = j + posOffset;\n                    var pX: number = verticesData[ofset];\n                    var pY: number = verticesData[ofset + 1];\n                    var pZ: number = verticesData[ofset + 2];\n                    min.x = Math.min(min.x, pX);\n                    min.y = Math.min(min.y, pY);\n                    min.z = Math.min(min.z, pZ);\n                    max.x = Math.max(max.x, pX);\n                    max.y = Math.max(max.y, pY);\n                    max.z = Math.max(max.z, pZ);\n                }\n                this._bounds.setMin(min);\n                this._bounds.setMax(max);\n                this._needUpdateBounds = false;\n            }\n        }\n        else {\n            throw \"Mesh:can't calculate bounds on subMesh,mesh's isReadable must be true.\";\n        }\n    }\n\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {//[实现IClone接口]\n        var destMesh: Mesh = <Mesh>destObject;\n        var vb: VertexBuffer3D = this._vertexBuffer;\n        var destVB: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vb._byteLength, vb.bufferUsage, vb.canRead);\n        destVB.vertexDeclaration = vb.vertexDeclaration;\n        destVB.setData(vb.getUint8Data().slice().buffer);\n        destMesh._vertexBuffer = destVB;\n        destMesh._vertexCount = this._vertexCount;\n        var ib: IndexBuffer3D = this._indexBuffer;\n        var destIB: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, ib.indexCount, ib.bufferUsage, ib.canRead);\n        destIB.setData(ib.getData().slice());\n        destMesh._indexBuffer = destIB;\n\n        destMesh._setBuffer(destMesh._vertexBuffer, destIB);\n        destMesh._instanceBufferStateType = this._instanceBufferStateType;\n\n        destMesh._setCPUMemory(this.cpuMemory);\n        destMesh._setGPUMemory(this.gpuMemory);\n\n        var i: number;\n        var boneNames: string[] = this._boneNames;\n        if (boneNames) {\n            var destBoneNames: string[] = destMesh._boneNames = [];\n            for (i = 0; i < boneNames.length; i++)\n                destBoneNames[i] = boneNames[i];\n        }\n\n        var inverseBindPoses: Matrix4x4[] = this._inverseBindPoses;\n        if (inverseBindPoses) {\n            var destInverseBindPoses: Matrix4x4[] = destMesh._inverseBindPoses = [];\n            for (i = 0; i < inverseBindPoses.length; i++)\n                destInverseBindPoses[i] = inverseBindPoses[i];\n        }\n\n        var cacheLength: number = this._skinnedMatrixCaches.length;\n        destMesh._skinnedMatrixCaches.length = cacheLength;\n        for (i = 0; i < cacheLength; i++) {\n            var skinnedCache: skinnedMatrixCache = this._skinnedMatrixCaches[i];\n            if (skinnedCache)\n                destMesh._skinnedMatrixCaches[i] = new skinnedMatrixCache(skinnedCache.subMeshIndex, skinnedCache.batchIndex, skinnedCache.batchBoneIndex);\n        }\n\n        for (i = 0; i < this.subMeshCount; i++) {\n            var subMesh: SubMesh = this._subMeshes[i];\n            var subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\n            var subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\n            var boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\n            var destSubmesh: SubMesh = new SubMesh(destMesh);\n\n            destSubmesh._subIndexBufferStart.length = subIndexBufferStart.length;\n            destSubmesh._subIndexBufferCount.length = subIndexBufferCount.length;\n            destSubmesh._boneIndicesList.length = boneIndicesList.length;\n\n            for (var j: number = 0; j < subIndexBufferStart.length; j++)\n                destSubmesh._subIndexBufferStart[j] = subIndexBufferStart[j];\n            for (j = 0; j < subIndexBufferCount.length; j++)\n                destSubmesh._subIndexBufferCount[j] = subIndexBufferCount[j];\n            for (j = 0; j < boneIndicesList.length; j++)\n                destSubmesh._boneIndicesList[j] = new Uint16Array(boneIndicesList[j]);\n\n            destSubmesh._indexBuffer = destIB;\n            destSubmesh._indexStart = subMesh._indexStart;\n            destSubmesh._indexCount = subMesh._indexCount;\n            destSubmesh._indices = new Uint16Array(destIB.getData().buffer, subMesh._indexStart * 2, subMesh._indexCount);\n            var vertexBuffer: VertexBuffer3D = destMesh._vertexBuffer;\n            destSubmesh._vertexBuffer = vertexBuffer;\n            destMesh._subMeshes.push(destSubmesh);\n        }\n        destMesh._setSubMeshes(destMesh._subMeshes);\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {//[实现IClone接口]\n        var dest: Mesh = new Mesh();\n        this.cloneTo(dest);\n        return dest;\n    }\n\n\n\n    //------------------------------------------NATIVE----------------------------------------------------\n    /** @internal */\n    _inverseBindPosesBuffer: ArrayBuffer;\n}\n\n\n\n","import { Component } from \"../../../components/Component\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Light, LightMode, LightType } from \"./Light\";\nexport enum AreaShape {\n    rectangle,\n    ellipse,\n}\n/**\n * <code>LightSprite</code> 类用于创建灯光的父类。\n */\nexport class AreaLightCom extends Light {\n    /**@internal */\n    private _areaShape: AreaShape;\n\n    /**@internal */\n    private _power: number;\n\n    /**@internal */\n    private _size: Vector2;\n\n    /**@internal */\n    private _spread: number;\n\n    /**@internal */\n    private _maxBounces: number;\n    /**\n     * 创建一个 <code>AreaLightCoponent</code> 实例。\n     */\n    constructor() {\n        super();\n        this._lightType = LightType.Area;\n        this._lightmapBakedType = LightMode.bakeOnly;\n        this._spread = 90;\n        this._maxBounces = 1024;\n        this._size = new Vector2(1, 1);\n        this._areaShape = AreaShape.rectangle;\n        this._power = 100;\n    }\n\n    /**\n      * 灯光烘培类型。\n      */\n    get lightmapBakedType(): LightMode {\n        return LightMode.bakeOnly;\n    }\n\n    set lightmapBakedType(value: LightMode) {\n        this._lightmapBakedType = LightMode.bakeOnly;\n    }\n\n\n    /**\n     * 面光类型\n     */\n    get shape(): AreaShape {\n        return this._areaShape;\n    }\n\n    set shape(value: AreaShape) {\n        this._areaShape = value;\n    }\n\n    /**\n     * 光照强度\n     */\n    set power(value: number) {\n        this._power = value;\n    }\n\n    get power() {\n        return this._power;\n    }\n\n    /**\n     * 面光大小\n     */\n    set size(value: Vector2) {\n        value && value.cloneTo(this._size);\n    }\n\n    get size() {\n        return this._size;\n    }\n\n    /**\n     * 面光辐射角度\n     */\n    set spread(value: number) {\n        this._spread = Math.min((Math.max(0, value)), 180);\n    }\n\n    get spread(): number {\n        return this._spread;\n    }\n\n    /**\n     * 最大反弹数\n     */\n    set maxBounces(value: number) {\n        this._maxBounces = value;\n    }\n\n    get maxBounces() {\n        return this._maxBounces;\n    }\n\n\n    /**\n     * @internal\n     * @override\n     */\n    protected _addToLightQueue(): void {\n    }\n\n    /**\n     * @internal\n     * @override\n     */\n    protected _removeFromLightQueue(): void {\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any, spriteMap: any): void {\n        super._parse(data, spriteMap);\n        //this.range = data.range;\n    }\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _cloneTo(dest: AreaLightCom): void {\n        super._cloneTo(dest);\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Component {\n        return new AreaLightCom();\n    }\n}\n\n","import { Component } from \"../../components/Component\";\nimport { Camera } from \"../core/Camera\";\nimport { BaseRender, RenderBitFlag } from \"../core/render/BaseRender\";\nimport { Scene3D } from \"../core/scene/Scene3D\";\nimport { Sprite3D } from \"../core/Sprite3D\";\nimport { Bounds } from \"../math/Bounds\";\nimport { Event } from \"../../events/Event\";\nimport { Utils3D } from \"../utils/Utils3D\";\nimport { IBoundsCell } from \"../math/IBoundsCell\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Tab } from \"../../ui/Tab\";\n\nconst tempVec = new Vector3();\nconst tempVec1 = new Vector3();\n\n/**\n * 此类描述Lod数据\n */\nexport class LODInfo {\n    /**@internal */\n    _mincullRate: number;//裁剪比例 0-1\n\n    /**@internal */\n    _renders: BaseRender[];//此LOD显示的渲染节点\n\n    /**@internal */\n    _cachSprite3D: Sprite3D[];\n\n    /**@internal */\n    _lodIndex: number;\n\n    /**@internal */\n    private _group: LODGroup;\n\n\n    \n    /**\n     * 实例化一个LODInfo\n     * @param mincullRate \n     */\n    constructor(mincullRate: number) {\n        this._mincullRate = mincullRate;\n        this._renders = [];\n        this._cachSprite3D = [];\n    }\n\n    /**\n     * 设置最小通过率\n     */\n    set mincullRate(value: number) {\n        this._mincullRate = value;\n    }\n\n    get mincullRate() {\n        return this._mincullRate;\n    }\n\n    /**\n     * @internal\n     * 设置LODGroup\n     */\n    set group(value: LODGroup) {\n        if (value == this._group)\n            return;\n        if (this._group) {//remove old event\n            // this._renders.forEach(element => {\n            //     (element.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\n            //     element._LOD = -1;\n            // })\n            for (let i = 0, n = this._renders.length; i < n; i++) {\n                let element = this._renders[i];\n                (element.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\n                element._LOD = -1;\n            }\n        }\n        this._group = value;\n        for (let i = 0, n = this._renders.length; i < n; i++) {\n            let element = this._renders[i];\n            (element.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this._group, this._group._updateRecaculateFlag);\n            element._LOD = this._lodIndex;\n        }\n    }\n\n    /**\n     * 设置LODInfo的节点信息\n     */\n    set renders(value: Sprite3D[]) {\n        this._cachSprite3D = value;\n        for (var i = 0, n = value.length; i < n; i++) {\n            this.addNode(value[i]);\n        }\n    }\n\n    get renders(): Sprite3D[] {\n        return this._cachSprite3D;\n    }\n\n    /**\n     * 在lodInfo中增加渲染节点\n     * @param node \n     */\n    addNode(node: Sprite3D) {\n        if (!node)\n            return;\n        let ren = node;\n        if (ren._isRenderNode > 0) {\n            let components = ren.components;\n            for (let comp of components) {\n                if ((comp instanceof BaseRender) && this._renders.indexOf(comp) == -1)\n                    this._renders.push(comp);\n            }\n            this._group && node.transform.on(Event.TRANSFORM_CHANGED, this._group, this._group._updateRecaculateFlag);\n        }\n        for (var i = 0, n = node.numChildren; i < n; i++) {\n            this.addNode(node.getChildAt(i) as Sprite3D);\n        }\n    }\n\n    /**\n     * 删除某个lod节点\n     * @param node \n     */\n    removeNode(node: Sprite3D) {\n        let ren = node;\n        if (ren._isRenderNode > 0) {\n            let components = ren.components;\n            let index: number;\n            for (let comp of components) {\n                if ((comp instanceof BaseRender) && (index = this._renders.indexOf(comp)) == -1) {\n                    this._renders.splice(index, 1);\n                    comp.setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\n                    this._group && node.transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\n                }\n            }\n        }\n        for (var i = 0, n = node.numChildren; i < n; i++) {\n            this.removeNode(node.getChildAt(i) as Sprite3D);\n        }\n    }\n\n    /**\n     * 释放所有的渲染节点cull标记\n     */\n    removeAllRender() {\n        this._renders.forEach(element => {\n            element.setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\n        })\n    }\n}\n\n/**\n * <code>SpotLight</code> 类用于构建LOD组件\n */\nexport class LODGroup extends Component implements IBoundsCell {\n\n    /**\n     * 是否需要重新计算_lodBoundsRadius，和_bounds\n     * 在LOD值里面位置有相对改动的时候是需要重新计算的\n     */\n    private _needcaculateBounds: boolean = false;\n\n    /**     \n     * lodGroup所有的渲染节点的包围盒计算\n     */\n    private _bounds: Bounds;\n\n    /**\n     * size\n     */\n    private _size: number;\n\n    /**\n     * 包围盒中心位置\n     */\n    private _lodPosition: Vector3;\n\n    /**\n     * lod等级数量\n     */\n    private _lodCount: number;\n\n    /**\n     * lod等级信息\n     */\n    private _lods: LODInfo[] = [];\n\n    /**\n     * 显示节点\n     */\n    private _visialIndex = -1;\n\n    /**\n     * lod节点比例\n     */\n    private _nowRate : number;\n\n    /**\n     * 实例化一个LODGroup\n     */\n    constructor() {\n        super();\n        this._bounds = new Bounds();\n        this._lodPosition = new Vector3();\n        this.runInEditor = true;\n    }\n\n    /**\n    * get LODInfo 数组\n    * @returns \n    */\n    get lods(): LODInfo[] {\n        return this._lods;\n    }\n\n    /**\n     * 设置 LODInfo 数组\n     * @param data \n     */\n    set lods(data: LODInfo[]) {\n        this._lods = data;\n        for (var i = 0, n = this._lods.length; i < n; i++) {\n            let element = this._lods[i]\n            element._lodIndex = i;\n            element.group = this;\n            this._setLODinvisible(i);\n        }\n        this._updateRecaculateFlag();\n        this._visialIndex = -1;\n        //this.recalculateBounds();\n        this._lodCount = this._lods.length;\n    }\n\n    /**\n     * 获得LOD包围盒\n     */\n    get bounds() {\n        this.recalculateBounds();\n        return this._bounds;\n    }\n\n    /**\n     * @internal\n     */\n    protected _onEnable(): void {\n        super._onEnable();\n        //this.onPreRender();\n    }\n\n    /**\n     * @internal\n     */\n    protected _onDisable(): void {\n        super._onDisable();\n        this._lods.forEach(element => {\n            element.removeAllRender();\n        })\n    }\n\n    /**\n     * 设置显示隐藏组\n     * @param rate \n     * @returns \n     */\n    private _applyVisibleRate(rate: number) {\n        for (var i = 0; i < this._lodCount; i++) {\n            let lod = this._lods[i];\n            if (rate > lod.mincullRate) {\n                if (i == -1) {\n                    this._setLODvisible(i);\n                    this._visialIndex = i;\n                    return;\n                }\n                if (i == this._visialIndex)\n                    return;\n                else {\n                    (this._visialIndex != -1) && this._setLODinvisible(this._visialIndex);\n                    this._setLODvisible(i);\n                    this._visialIndex = i;\n                    return;\n                }\n            }\n        }\n        //cull\n        if (this._visialIndex != -1) {\n            this._setLODinvisible(this._visialIndex);\n            this._visialIndex = -1;\n        }\n    }\n\n    /**\n     * 设置某一级LOD显示\n     * @param index \n     */\n    private _setLODvisible(index: number): void {\n        let lod = this._lods[index];\n        for (var i = 0, n = lod._renders.length; i < n; i++) {\n            lod._renders[i].setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\n        }\n    }\n\n    /**\n     * 设置某一级LOD不显示\n     * @param index \n     */\n    private _setLODinvisible(index: number) {\n        let lod = this._lods[index];\n        for (var i = 0, n = lod._renders.length; i < n; i++) {\n            lod._renders[i].setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, true);\n        }\n    }\n\n    /**\n     * @internal\n     * 删除\n     */\n    onDestroy() {\n        this._lods.forEach(element => {\n            let renderarray = element._renders;\n            for (var i = 0; i < renderarray.length; i++) {\n                element.removeNode(renderarray[i].owner as Sprite3D);\n            }\n        })\n    }\n\n    /**\n     * @internal\n     */\n    _updateRecaculateFlag() {\n        this._needcaculateBounds = true;\n    }\n\n    /**\n     * @internal\n     * @param lodGroup \n     */\n    _cloneTo(lodGroup: LODGroup) {\n        super._cloneTo(lodGroup);\n        //get common parent\n        let getCommomParent = (rootNode: Sprite3D, rootCheckNode: Sprite3D): Sprite3D => {\n            let nodeArray: Sprite3D[] = [];\n            let node = rootNode;\n            while (!!node) {\n                if (node instanceof Sprite3D)\n                    nodeArray.push(node);\n                node = node.parent as Sprite3D;\n            }\n            let checkNode: Sprite3D = rootCheckNode;\n            while (!!checkNode && nodeArray.indexOf(checkNode) == -1) {\n                checkNode = checkNode.parent as Sprite3D;\n            }\n            return checkNode;\n        }\n        let cloneHierachFun = (rootNode: Sprite3D, rootCheckNode: Sprite3D, destNode: Sprite3D): Sprite3D => {\n            let rootparent: Sprite3D = getCommomParent(rootNode, rootCheckNode);\n            if (!rootparent)\n                return null;\n            let path: number[] = [];\n            Utils3D._getHierarchyPath(rootparent, rootNode, path);\n            let pathcheck: number[] = [];\n            Utils3D._getHierarchyPath(rootparent, rootCheckNode, pathcheck);\n            let destParent = Utils3D._getParentNodeByHierarchyPath(destNode, path);\n            if (!destParent)\n                return null;\n            return Utils3D._getNodeByHierarchyPath(destParent, pathcheck) as Sprite3D;\n        }\n        let lodArray: LODInfo[] = [];\n        for (let i = 0, n = this._lodCount; i < n; i++) {\n            let lod = this._lods[i];\n            let cloneLOD = new LODInfo(lod.mincullRate);\n            lodArray.push(cloneLOD);\n            lod._renders.forEach(element => {\n                let node = cloneHierachFun(this.owner as Sprite3D, element.owner as Sprite3D, lodGroup.owner as Sprite3D);\n                if (node)\n                    cloneLOD.addNode(node);\n            });\n        }\n        lodGroup.lods = lodArray;\n    }\n\n    /**\n     * @internal\n     * 重新计算包围盒\n     */\n    recalculateBounds() {\n        if (!this._needcaculateBounds) {\n            return;\n        }\n        let firstBounds = true;\n        for (let i = 0, n = this._lods.length; i < n; i++) {\n            let lod = this._lods[i];\n            lod._renders.forEach(element => {\n                if (firstBounds) {\n                    element.bounds.cloneTo(this._bounds);\n                    firstBounds = false;\n                }\n                else\n                    Bounds.merge(this._bounds, element.bounds, this._bounds);\n            });\n        }\n        this._lodPosition = this._bounds.getCenter();\n        let extend = this._bounds.getExtent();\n        this._size = 2 * Math.max(extend.x, extend.y, extend.z);\n        this._needcaculateBounds = false;\n    }\n\n    /**\n     * @internal\n     * 渲染之前的更新\n     */\n    onPreRender() {\n        this.recalculateBounds();\n        //查看相机的距离\n        let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\n        let maxYDistance = checkCamera.maxlocalYDistance;\n        let cameraFrustum = checkCamera.boundFrustum;\n        Vector3.subtract(this._lodPosition, checkCamera.transform.position, tempVec);\n        //大于farplane,或者不在视锥内.不做lod操作\n        let length = tempVec.length();\n        if (length > checkCamera.farPlane || cameraFrustum.containsPoint(this._lodPosition) == 0) {\n            return;\n        }\n        checkCamera.transform.worldMatrix.getForward(tempVec1);\n        Vector3.normalize(tempVec, tempVec);\n        Vector3.normalize(tempVec1, tempVec1);\n        let rateYDistance = length * Math.abs(Vector3.dot(tempVec, tempVec1)) / checkCamera.farPlane * maxYDistance;\n        let rate = (this._size / rateYDistance);\n        this._nowRate = rate;\n        this._applyVisibleRate(rate);\n    }\n}\n","import { Color } from \"../../../maths/Color\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>PixelLineData</code> 类用于表示线数据。\n */\nexport class PixelLineData {\n\t/**线开始位置 */\n\tstartPosition: Vector3 = new Vector3();\n\t/**线结束位置 */\n\tendPosition: Vector3 = new Vector3();\n\t/**线开始颜色 */\n\tstartColor: Color = new Color();\n\t/**线结束颜色 */\n\tendColor: Color = new Color();\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: PixelLineData): void {\n\t\tthis.startPosition.cloneTo(destObject.startPosition);\n\t\tthis.endPosition.cloneTo(destObject.endPosition);\n\t\tthis.startColor.cloneTo(destObject.startColor);\n\t\tthis.endColor.cloneTo(destObject.endColor);\n\t}\n}\n\n","import { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\n/**\n * @internal\n * @author \n */\nexport class PixelLineVertex {\n\tprivate static _vertexDeclaration: VertexDeclaration;\n\n\tstatic get vertexDeclaration(): VertexDeclaration {\n\t\treturn PixelLineVertex._vertexDeclaration;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tPixelLineVertex._vertexDeclaration = new VertexDeclaration(28,\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexMesh.MESH_COLOR0)]);\n\t}\n\n\tget vertexDeclaration(): VertexDeclaration {\n\t\treturn PixelLineVertex._vertexDeclaration;\n\t}\n\n\tconstructor() {\n\n\t}\n\n}\n\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { GeometryElement } from \"../GeometryElement\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { PixelLineData } from \"./PixelLineData\";\nimport { PixelLineRenderer } from \"./PixelLineRenderer\";\nimport { PixelLineVertex } from \"./PixelLineVertex\";\n\n/**\n * <code>PixelLineFilter</code> 类用于线过滤器。\n */\nexport class PixelLineFilter extends GeometryElement {\n\t/** @private */\n\tprivate static _tempVector0: Vector3 = new Vector3();\n\t/** @private */\n\tprivate static _tempVector1: Vector3 = new Vector3();\n\n\t/**@internal */\n\tprivate static _type: number = GeometryElement._typeCounter++;\n\n\t/** @internal */\n\tprivate _floatCountPerVertices: number = 7;\n\n\n\t/** @internal */\n\tprivate _vertexBuffer: VertexBuffer3D;\n\t/** @internal */\n\tprivate _vertices: Float32Array;\n\t/** @internal */\n\tprivate _minUpdate: number = Number.MAX_VALUE;\n\t/** @internal */\n\tprivate _maxUpdate: number = Number.MIN_VALUE;\n\t/** @internal */\n\tprivate _floatBound: Float32Array = new Float32Array(6);\n\t/** @internal */\n\tprivate _calculateBound: boolean = false;\n\n\t/** @internal */\n\t_ownerRender: PixelLineRenderer;\n\t/** @internal */\n\t_bounds: Bounds;\n\t/** @internal */\n\t_maxLineCount: number = 0;\n\t/** @internal */\n\t_lineCount: number = 0;\n\n\t/**\n\t * 创建一个PixelLineFilter实例\n\t * @param owner 渲染精灵节点 \n\t * @param maxLineCount 最大线长\n\t */\n\tconstructor(owner: PixelLineRenderer, maxLineCount: number) {\n\t\tsuper(MeshTopology.Lines, DrawType.DrawArray);\n\t\tvar pointCount: number = maxLineCount * 2;\n\t\tthis._ownerRender = owner;\n\t\tthis._maxLineCount = maxLineCount;\n\t\tthis._vertices = new Float32Array(pointCount * this._floatCountPerVertices);\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, BufferUsage.Static, false);\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\n\n\t\tvar bufferState = new BufferState();\n\t\tthis.bufferState = bufferState;\n\t\tthis.bufferState.applyState([this._vertexBuffer], null);\n\n\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\n\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\n\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\t\tthis._bounds = new Bounds(min, max);\n\t}\n\n\t/**\n\t *\t{@inheritDoc PixelLineFilter._getType}\n\t *\t@override\n\t *  @internal\n\t */\n\t_getType(): number {\n\t\treturn PixelLineFilter._type;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_resizeLineData(maxCount: number): void {\n\t\tvar pointCount: number = maxCount * 2;\n\t\tvar lastVertices: Float32Array = this._vertices;\n\n\t\tthis._vertexBuffer.destroy();\n\t\tthis._maxLineCount = maxCount;\n\n\t\tvar vertexCount: number = pointCount * this._floatCountPerVertices;\n\t\tthis._vertices = new Float32Array(vertexCount);\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, BufferUsage.Static, false);\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\n\n\t\tif (vertexCount < lastVertices.length) {//取最小长度,拷贝旧数据\n\t\t\tthis._vertices.set(new Float32Array(lastVertices.buffer, 0, vertexCount));\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, vertexCount * 4);\n\t\t} else {\n\t\t\tthis._vertices.set(lastVertices);\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, lastVertices.length * 4);\n\t\t}\n\n\t\tthis.bufferState.applyState([this._vertexBuffer], null);\n\n\t\tthis._minUpdate = Number.MAX_VALUE;\n\t\tthis._maxUpdate = Number.MIN_VALUE;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate _updateLineVertices(offset: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n\t\tif (startPosition) {\n\t\t\tthis._vertices[offset + 0] = startPosition.x;\n\t\t\tthis._vertices[offset + 1] = startPosition.y;\n\t\t\tthis._vertices[offset + 2] = startPosition.z;\n\t\t}\n\n\t\tif (startColor) {\n\t\t\tthis._vertices[offset + 3] = startColor.r;\n\t\t\tthis._vertices[offset + 4] = startColor.g;\n\t\t\tthis._vertices[offset + 5] = startColor.b;\n\t\t\tthis._vertices[offset + 6] = startColor.a;\n\t\t}\n\n\t\tif (endPosition) {\n\t\t\tthis._vertices[offset + 7] = endPosition.x;\n\t\t\tthis._vertices[offset + 8] = endPosition.y;\n\t\t\tthis._vertices[offset + 9] = endPosition.z;\n\t\t}\n\n\t\tif (endColor) {\n\t\t\tthis._vertices[offset + 10] = endColor.r;\n\t\t\tthis._vertices[offset + 11] = endColor.g;\n\t\t\tthis._vertices[offset + 12] = endColor.b;\n\t\t\tthis._vertices[offset + 13] = endColor.a;\n\t\t}\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + this._floatCountPerVertices * 2);\n\n\t\t//expand bound\n\t\tvar bounds: Bounds = this._bounds;\n\t\tvar floatBound: Float32Array = this._floatBound;\n\t\tvar min: Vector3 = bounds.getMin(), max: Vector3 = bounds.getMax();\n\t\tVector3.min(min, startPosition, min);\n\t\tVector3.min(min, endPosition, min);\n\t\tVector3.max(max, startPosition, max);\n\t\tVector3.max(max, endPosition, max);\n\t\tbounds.setMin(min);\n\t\tbounds.setMax(max);\n\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\n\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\n\t\tthis._ownerRender.boundsChange = true;\n\t}\n\n\n\t/**\n\t * @internal\n\t */\n\t_reCalculateBound(): void {\n\t\tif (this._calculateBound) {\n\t\t\tvar vertices: Float32Array = this._vertices;\n\t\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\n\t\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\n\t\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n\t\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\t\t\tfor (var i: number = 0; i < this._lineCount * 2; ++i) {\n\t\t\t\tvar offset: number = this._floatCountPerVertices * i;\n\t\t\t\tvar x: number = vertices[offset + 0], y: number = vertices[offset + 1], z: number = vertices[offset + 2];\n\t\t\t\tmin.x = Math.min(x, min.x);\n\t\t\t\tmin.y = Math.min(y, min.y);\n\t\t\t\tmin.z = Math.min(z, min.z);\n\t\t\t\tmax.x = Math.max(x, max.x);\n\t\t\t\tmax.y = Math.max(y, max.y);\n\t\t\t\tmax.z = Math.max(z, max.z);\n\t\t\t}\n\t\t\tthis._bounds.setMin(min);\n\t\t\tthis._bounds.setMax(max);\n\t\t\tvar floatBound: Float32Array = this._floatBound;\n\t\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\n\t\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\n\t\t\tthis._calculateBound = false;\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_removeLineData(index: number): void {\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\n\t\tvar nextIndex: number = index + 1;\n\t\tvar offset: number = index * floatCount;\n\n\t\tvar vertices: Float32Array = this._vertices;\n\t\tvar rightPartVertices: Float32Array = new Float32Array(vertices.buffer, nextIndex * floatCount * 4, (this._lineCount - nextIndex) * floatCount);\n\t\tvertices.set(rightPartVertices, offset);\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + rightPartVertices.length);\n\t\tthis._lineCount--;\n\n\t\tvar floatBound: Float32Array = this._floatBound;\n\t\tvar startX: number = vertices[offset], startY: number = vertices[offset + 1], startZ: number = vertices[offset + 2];\n\t\tvar endX: number = vertices[offset + 7], endY: number = vertices[offset + 8], endZ: number = vertices[offset + 9];\n\t\tvar minX: number = floatBound[0], minY: number = floatBound[1], minZ: number = floatBound[2];\n\t\tvar maxX: number = floatBound[3], maxY: number = floatBound[4], maxZ: number = floatBound[5];\n\n\t\tif ((startX === minX) || (startX === maxX) || (startY === minY) || (startY === maxY) || (startZ === minZ) || (startZ === maxZ) ||\n\t\t\t(endX === minX) || (endX === maxX) || (endY === minY) || (endY === maxY) || (endZ === minZ) || (endZ === maxZ))\n\t\t\tthis._calculateBound = true;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_updateLineData(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\n\t\tthis._updateLineVertices(index * floatCount, startPosition, endPosition, startColor, endColor);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_updateLineDatas(index: number, data: PixelLineData[]): void {\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\n\t\tvar count: number = data.length;\n\t\tfor (var i: number = 0; i < count; i++) {\n\t\t\tvar line: PixelLineData = data[i];\n\t\t\tthis._updateLineVertices((index + i) * floatCount, line.startPosition, line.endPosition, line.startColor, line.endColor);\n\t\t}\n\t}\n\n\t/**\n\t * 获取线段数据\n\t * @return 线段数据。\n\t */\n\t_getLineData(index: number, out: PixelLineData): void {\n\t\tvar startPosition: Vector3 = out.startPosition;\n\t\tvar startColor: Color = out.startColor;\n\t\tvar endPosition: Vector3 = out.endPosition;\n\t\tvar endColor: Color = out.endColor;\n\n\t\tvar vertices: Float32Array = this._vertices;\n\t\tvar offset: number = index * this._floatCountPerVertices * 2;\n\n\t\tstartPosition.x = vertices[offset + 0];\n\t\tstartPosition.y = vertices[offset + 1];\n\t\tstartPosition.z = vertices[offset + 2];\n\t\tstartColor.r = vertices[offset + 3];\n\t\tstartColor.g = vertices[offset + 4];\n\t\tstartColor.b = vertices[offset + 5];\n\t\tstartColor.a = vertices[offset + 6];\n\n\t\tendPosition.x = vertices[offset + 7];\n\t\tendPosition.y = vertices[offset + 8];\n\t\tendPosition.z = vertices[offset + 9];\n\t\tendColor.r = vertices[offset + 10];\n\t\tendColor.g = vertices[offset + 11];\n\t\tendColor.b = vertices[offset + 12];\n\t\tendColor.a = vertices[offset + 13];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_prepareRender(state: RenderContext3D): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\t_updateRenderParams(state: RenderContext3D): void {\n\t\tthis.clearRenderParams();\n\t\tif (this._minUpdate !== Number.MAX_VALUE && this._maxUpdate !== Number.MIN_VALUE) {\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, this._minUpdate * 4, this._minUpdate * 4, (this._maxUpdate - this._minUpdate) * 4);\n\t\t\tthis._minUpdate = Number.MAX_VALUE;\n\t\t\tthis._maxUpdate = Number.MIN_VALUE;\n\t\t}\n\t\tif (this._lineCount > 0) {\n\t\t\tthis.setDrawArrayParams(0, this._lineCount * 2);\n\t\t\t// LayaGL.renderDrawConatext.drawArrays(MeshTopology.Lines, 0, this._lineCount * 2);\n\t\t\t// Stat.renderBatches++;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * 删除\n\t */\n\tdestroy(): void {\n\t\tif (this._destroyed)\n\t\t\treturn;\n\t\tsuper.destroy();\n\t\tthis.bufferState.destroy();\n\t\tthis._vertexBuffer.destroy();\n\t\tthis.bufferState = null;\n\t\tthis._vertexBuffer = null;\n\t\tthis._vertices = null;\n\t}\n}\n\n","import { Vector4 } from \"../../../maths/Vector4\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { Material } from \"../material/Material\";\n\n/**\n * <code>PixelLineMaterial</code> 类用于实现像素线材质。\n */\nexport class PixelLineMaterial extends Material {\n\t/**@internal */\n\tstatic COLOR: number;\n\n\t/** 默认材质，禁止修改*/\n\tstatic defaultMaterial: PixelLineMaterial;\n\n\t/**\n\t* @internal\n\t*/\n\tstatic __initDefine__(): void {\n\t\tPixelLineMaterial.COLOR = Shader3D.propertyNameToID(\"u_Color\");\n\t}\n\n\t/**\n\t * 获取颜色。\n\t * @return 颜色。\n\t */\n\tget color(): Vector4 {\n\t\treturn (<Vector4>this._shaderValues.getVector(PixelLineMaterial.COLOR));\n\t}\n\n\t/**\n\t * 设置颜色。\n\t * @param value 颜色。\n\t */\n\tset color(value: Vector4) {\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, value);\n\t}\n\n\t/**\n\t *  创建一个 <code>PixelLineMaterial</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.setShaderName(\"LineShader\");\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\n\t}\n\n\t/**\n\t * @internal\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar dest: PixelLineMaterial = new PixelLineMaterial();\n\t\tthis.cloneTo(dest);\n\t\treturn dest;\n\t}\n\n}\n\n","import { Component } from \"../../../components/Component\";\nimport { Color } from \"../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { Material } from \"../material/Material\";\nimport { MeshSprite3DShaderDeclaration } from \"../MeshSprite3DShaderDeclaration\";\nimport { BaseRender } from \"../render/BaseRender\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { RenderElement } from \"../render/RenderElement\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { Transform3D } from \"../Transform3D\";\nimport { PixelLineData } from \"./PixelLineData\";\nimport { PixelLineFilter } from \"./PixelLineFilter\";\nimport { PixelLineMaterial } from \"./PixelLineMaterial\";\n\n\n/**\n * <code>PixelLineRenderer</code> 类用于线渲染器。\n */\nexport class PixelLineRenderer extends BaseRender {\n    /** @internal */\n    protected _projectionViewWorldMatrix: Matrix4x4;\n\n    /**@internal */\n    _pixelLineFilter: PixelLineFilter;\n    /** @private 是否调用active */\n    private _isRenderActive: Boolean = false;\n    /** @private 是否加入渲染队列*/\n    private _isInRenders: Boolean = false;\n\n    private _needUpdatelines: boolean = false;\n    /**\n     * 创建一个PixelLineRenderer实例\n     * @param owner 线渲染精灵\n     */\n    constructor() {\n        super();\n        this._projectionViewWorldMatrix = new Matrix4x4();\n        this._pixelLineFilter = new PixelLineFilter(this, 20);\n        this._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\n    }\n\n    private _lines: PixelLineData[] = [];\n\n    get pixelLinesDatas() {\n        if (this._needUpdatelines) {\n            this._updateLineDatas();\n        }\n        return this._lines;\n    }\n\n    set pixelLinesDatas(value: PixelLineData[]) {\n        this.clear();\n        this.addLines(value);\n    }\n\n    /**\n     * 最大线数量\n     */\n    get maxLineCount(): number {\n        return this._pixelLineFilter._maxLineCount;\n    }\n\n    set maxLineCount(value: number) {\n        this._pixelLineFilter._resizeLineData(value);\n        this._pixelLineFilter._lineCount = Math.min(this._pixelLineFilter._lineCount, value);\n    }\n\n    /**\n     * 获取线数量。\n     */\n    get lineCount(): number {\n        return this._pixelLineFilter._lineCount;\n    }\n\n    protected _onAdded(): void {\n        super._onAdded();\n        this._changeRenderObjects(0, PixelLineMaterial.defaultMaterial);\n    }\n\n    protected _onEnable(): void {\n        this._isRenderActive = true;\n        if (this._pixelLineFilter._lineCount != 0) {\n            (this.owner.scene)._addRenderObject(this);\n            this._isInRenders = true;\n        }\n        this._setBelongScene(this.owner.scene);\n    }\n\n    protected _onDisable(): void {\n        if (this._pixelLineFilter && this._pixelLineFilter._lineCount != 0 && this._isRenderActive) {\n            this.owner.scene._removeRenderObject(this);\n            this._isInRenders = false;\n        }\n        this._isRenderActive = false;\n        this._setUnBelongScene();\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    protected _calculateBoundingBox(): void {\n        var worldMat: Matrix4x4 = (this.owner as Sprite3D).transform.worldMatrix;\n        var lineFilter: PixelLineFilter = this._pixelLineFilter;\n        lineFilter._reCalculateBound();\n        lineFilter._bounds._tranform(worldMat, this._bounds);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {//TODO:整理_renderUpdate\n        var projectionView: Matrix4x4 = context.projectionViewMatrix;\n        var sv: ShaderData = this._shaderValues;\n        if (transform) {\n            var worldMat: Matrix4x4 = transform.worldMatrix;\n            sv.setMatrix4x4(Sprite3D.WORLDMATRIX, worldMat);\n            //Matrix4x4.multiply(projectionView, worldMat, this._projectionViewWorldMatrix);\n            //sv.setMatrix4x4(Sprite3D.MVPMATRIX, this._projectionViewWorldMatrix);\n        } else {\n            sv.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\n            //sv.setMatrix4x4(Sprite3D.MVPMATRIX, projectionView);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    _changeRenderObjects(index: number, material: Material): void {\n        var renderObjects: RenderElement[] = this._renderElements;\n        (material) || (material = PixelLineMaterial.defaultMaterial);\n        var renderElement: RenderElement = renderObjects[index];\n        (renderElement) || (renderElement = renderObjects[index] = new RenderElement());\n        renderElement.setTransform((this.owner as Sprite3D)._transform);\n        renderElement.setGeometry(this._pixelLineFilter);\n        renderElement.render = this;\n        renderElement.material = material;\n    }\n\n    /**\n     * 增加一条线。\n     * @param\tstartPosition  初始点位置\n     * @param\tendPosition\t   结束点位置\n     * @param\tstartColor\t   初始点颜色\n     * @param\tendColor\t   结束点颜色\n     */\n    addLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n        if (this._pixelLineFilter._lineCount !== this._pixelLineFilter._maxLineCount)\n            this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++, startPosition, endPosition, startColor, endColor);\n        else\n            throw \"PixelLineSprite3D: lineCount has equal with maxLineCount.\";\n        if (this._isRenderActive && !this._isInRenders && this._pixelLineFilter._lineCount > 0) {\n            this.owner.scene && this.owner.scene._addRenderObject(this);\n            this._isInRenders = true;\n        }\n        this._needUpdatelines = true;\n    }\n\n    /**\n     * 添加多条线段。\n     * @param\tlines  线段数据\n     */\n    addLines(lines: PixelLineData[]): void {\n        var lineCount: number = this._pixelLineFilter._lineCount;\n        var addCount: number = lines.length;\n        if (lineCount + addCount > this._pixelLineFilter._maxLineCount) {\n            throw \"PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.\";\n        } else {\n            this._pixelLineFilter._updateLineDatas(lineCount, lines);\n            this._pixelLineFilter._lineCount += addCount;\n        }\n        if (this._isRenderActive && !this._isInRenders && this._pixelLineFilter._lineCount > 0) {\n            this.owner.scene && this.owner.scene._addRenderObject(this);\n            this._isInRenders = true;\n        }\n        this._needUpdatelines = true;\n    }\n\n    /**\n     * 移除一条线段。\n     * @param index 索引。\n     */\n    removeLine(index: number): void {\n        if (index < this._pixelLineFilter._lineCount)\n            this._pixelLineFilter._removeLineData(index);\n        else\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\n        if (this._isRenderActive && this._isInRenders && this._pixelLineFilter._lineCount == 0) {\n            this.owner.scene && this.owner.scene._removeRenderObject(this);\n            this._isInRenders = false;\n        }\n        this._needUpdatelines = true;\n    }\n\n    /**\n     * 更新线\n     * @param\tindex  \t\t   索引\n     * @param\tstartPosition  初始点位置\n     * @param\tendPosition\t   结束点位置\n     * @param\tstartColor\t   初始点颜色\n     * @param\tendColor\t   结束点颜色\n     */\n    setLine(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n        if (index < this._pixelLineFilter._lineCount) {\n            this._pixelLineFilter._updateLineData(index, startPosition, endPosition, startColor, endColor);\n            let pixeldata = this._lines[index];\n            if (pixeldata) {\n                startColor.cloneTo(pixeldata.startColor);\n                endColor.cloneTo(pixeldata.endColor);\n                startPosition.cloneTo(pixeldata.startPosition);\n                endPosition.cloneTo(pixeldata.endPosition);\n            }\n        }\n\n        else\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\n    }\n\n    /**\n     * 获取线段数据\n     * @param out 线段数据。\n     */\n    getLine(index: number, out: PixelLineData): void {\n        if (index < this.lineCount)\n            this._pixelLineFilter._getLineData(index, out);\n        else\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\n    }\n\n    /**\n     * @internal\n     */\n    private _updateLineDatas() {\n        let n = this.lineCount;\n        this._lines = [];\n        for (let i = 0; i < n; i++) {\n            let pixelLineDatas = new PixelLineData();\n            this.getLine(i, pixelLineDatas);\n            this._lines.push(pixelLineDatas);\n        }\n        this._needUpdatelines = false;\n    }\n\n    /**\n     * 清除所有线段。\n     */\n    clear(): void {\n        this._pixelLineFilter._lineCount = 0;\n        if (this._isRenderActive && this._isInRenders) {\n            this.owner.scene && this.owner.scene._removeRenderObject(this);\n            this._isInRenders = false;\n        }\n    }\n\n    protected _onDestroy() {\n        this._pixelLineFilter.destroy();\n        this._pixelLineFilter = null;\n        super._onDestroy();\n    }\n\n    /**\n     * @override\n     * @param dest \n     */\n    _cloneTo(dest: Component): void {\n        super._cloneTo(dest);\n        let render = dest as PixelLineRenderer;\n        render.maxLineCount = this.maxLineCount;\n        const lineCount = this.lineCount;\n        let linedata = new PixelLineData();\n        for (let i = 0, n = lineCount; i < n; i++) {\n            this.getLine(i, linedata);\n            render.addLine(linedata.startPosition, linedata.endPosition, linedata.startColor, linedata.endColor);\n        }\n    }\n\n}\n\n\n","import { AnimatorState } from \"./AnimatorState\";\n\n/**\n * <code>AnimatorPlayState</code> 类用于创建动画播放状态信息。\n */\nexport class AnimatorPlayState {\n\t/**@internal */\n\t_finish: boolean;\n\t/**@internal */\n\t_startPlayTime: number;\n\t/**@internal */\n\t_lastElapsedTime: number;\n\t/**@internal 动画播放时间*/\n\t_elapsedTime: number;\n\t/**@internal 播放状态的归一化时间,整数为循环次数，小数为单次播放时间。*/\n\t_normalizedTime: number;\n\t/**@internal 单词播放归一化时间 */\n\t_normalizedPlayTime: number;\n\t/**@internal */\n\t_duration: number;\n\t/**@internal */\n\t_playEventIndex: number;\n\t/**@internal */\n\t_lastIsFront: boolean;\n\t/**@internal */\n\t_currentState: AnimatorState|null = null;\n\n\t/**\n\t * 播放状态的归一化时间,整数为循环次数，小数为单次播放时间。\n\t */\n\tget normalizedTime(): number {\n\t\treturn this._normalizedTime;\n\t}\n\n\t/**\n\t * 当前动画的持续时间，以秒为单位。\n\t */\n\tget duration(): number {\n\t\treturn this._duration;\n\t}\n\n\t/**\n\t * 动画状态机。\n\t */\n\tget animatorState(): AnimatorState {\n\t\treturn this._currentState!;\n\t}\n\n\t/**\n\t * 创建一个 <code>AnimatorPlayState</code> 实例。\n\t */\n\tconstructor() {\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_resetPlayState(startTime: number,clipDuration:number): void {\n\t\tthis._finish = false;\n\t\tthis._startPlayTime = startTime;\n\t\tthis._elapsedTime = startTime;\n\t\tthis._playEventIndex = 0;\n\t\tthis._lastIsFront = true;\n\t\tthis._normalizedTime = this._elapsedTime/clipDuration;\n\t\tvar playTime = this._normalizedTime % 1.0;\n\t\tthis._normalizedPlayTime = playTime < 0 ? playTime + 1.0 : playTime;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_cloneTo(dest: AnimatorPlayState): void {\n\t\tdest._finish = this._finish;\n\t\tdest._startPlayTime = this._startPlayTime;\n\t\tdest._elapsedTime = this._elapsedTime;\n\t\tdest._normalizedTime = this._normalizedTime;\n\t\tdest._normalizedPlayTime = this._normalizedPlayTime;\n\t\tdest._playEventIndex = this._playEventIndex;\n\t\tdest._lastIsFront = this._lastIsFront;\n\t}\n\n}\n\n\n","import { IClone } from \"../../../utils/IClone\";\nimport { AnimationClip } from \"../../animation/AnimationClip\";\nimport { Animator } from \"./Animator\";\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AvatarMask } from \"./AvatarMask\";\nimport { KeyframeNodeOwner } from \"./KeyframeNodeOwner\";\n\n\n/**\n * <code>AnimatorControllerLayer</code> 类用于创建动画控制器层。\n */\nexport class AnimatorControllerLayer implements IClone {\n    /**混合模式_覆盖。 */\n    static BLENDINGMODE_OVERRIDE: number = 0;\n    /**混合模式_叠加。 */\n    static BLENDINGMODE_ADDTIVE: number = 1;\n\n    /**@internal */\n    private _defaultState: AnimatorState | null;\n    /**@internal */\n    private _referenceCount: number = 0;\n\n    /**@internal 0:常规播放、1:动态融合播放、2:固定融合播放*/\n    _playType: number = -1;\n    /**@internal */\n    _crossDuration: number = -1;\n    /**@internal */\n    _crossPlayState: AnimatorState;\n    /**@internal */\n    _crossMark: number = 0;\n    /**@internal */\n    _crossNodesOwnersCount: number = 0;\n    /**@internal */\n    _crossNodesOwners: KeyframeNodeOwner[] = [];\n    /**@internal */\n    _crossNodesOwnersIndicesMap: any = {};\n    /**@internal */\n    _srcCrossClipNodeIndices: number[] = [];\n    /**@internal */\n    _destCrossClipNodeIndices: number[] = [];\n\n    /**@internal */\n    _animator: Animator;\n    /**@internal */\n    _states: AnimatorState[] = [];\n    /**@internal */\n    _playStateInfo: AnimatorPlayState | null = new AnimatorPlayState();\n    /**@internal */\n    _crossPlayStateInfo: AnimatorPlayState | null = new AnimatorPlayState();\n    /**@internal */\n    _avatarMask: AvatarMask;\n    /** 层的名称。*/\n    name: string;\n    /** 混合模式。*/\n    blendingMode: number = AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\n    /** 默认权重。*/\n    defaultWeight: number = 1.0;\n    /**\t激活时是否自动播放。*/\n    playOnWake: boolean = true;\n    /** 是否开启 */\n    enable: boolean = true;\n\n    /**\n     * 默认动画状态机。\n     */\n    get defaultState(): AnimatorState {\n        return this._defaultState!;\n    }\n\n    set defaultState(value: AnimatorState) {\n        this._defaultState = value;\n    }\n\n    /**\n     * 骨骼遮罩\n     */\n    get avatarMask(): AvatarMask {\n        return this._avatarMask;\n    }\n\n    set avatarMask(value: AvatarMask) {\n        this._avatarMask = value;\n    }\n\n    //@internal\n    public get defaultStateName() {\n        if (!this._defaultState) {\n            return null;\n        }\n        return this._defaultState.name;\n    }\n\n    private _defaultStateNameCatch: string;\n    //@internal\n    public set defaultStateName(value: string) {\n        this._defaultState = this.getAnimatorState(value);\n        if (null == this._defaultState) {\n            if (0 == this._states.length) {\n                this._defaultStateNameCatch = value;\n            } else {\n                for (var i = this._states.length - 1; i >= 0; i--) {\n                    if (this._states[i].name == value) {\n                        this._defaultState = this._states[i];\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    //@internal\n    public get states(): ReadonlyArray<AnimatorState> {\n        return this._states;\n    }\n\n    //@internal\n    public set states(states: ReadonlyArray<AnimatorState>) {\n        if (this._states === states)\n            return;\n\n        if (this._states.length > 0) {\n            let removed = this._states.filter(s => states.indexOf(s) == -1);\n            for (let state of removed)\n                this.removeState(state);\n        }\n\n        if (states.length > 0) {\n            let newAdded = states.filter(s => this._states.indexOf(s) == -1);\n            for (let state of newAdded)\n                this.addState(state);\n        }\n\n        this._states.length = 0;\n        this._states.push(...states);\n    }\n\n    /**\n     * 创建一个 <code>AnimatorControllerLayer</code> 实例。\n     * @param 动画层名称\n     */\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    /**\n     * @internal\n     */\n    private _removeClip(clipStateInfos: AnimatorState[], index: number, state: AnimatorState): void {\n        var clip: AnimationClip = state._clip!;\n        var clipStateInfo: AnimatorState = clipStateInfos[index];\n\n        clipStateInfos.splice(index, 1);\n\n        if (this._animator) {\n            var frameNodes = clip._nodes;\n            var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\n            clip._removeReference();\n            for (var i: number = 0, n: number = frameNodes!.count; i < n; i++)\n                this._animator._removeKeyframeNodeOwner(nodeOwners, frameNodes!.getNodeByIndex(i));\n        }\n    }\n\n    _getReferenceCount(): number {\n        return this._referenceCount;\n    }\n\n    _addReference(count: number = 1): void {\n        for (var i: number = 0, n: number = this._states.length; i < n; i++)\n            this._states[i]._addReference(count);\n        this._referenceCount += count;\n    }\n\n    _removeReference(count: number = 1): void {\n        for (var i: number = 0, n: number = this._states.length; i < n; i++)\n            this._states[i]._removeReference(count);\n        this._referenceCount -= count;\n    }\n\n    _clearReference(): void {\n        this._removeReference(-this._referenceCount);\n    }\n\n    /**\n     * 获取当前的播放状态。\n     * @return 动画播放状态。\n     */\n    getCurrentPlayState(): AnimatorPlayState {\n        return this._playStateInfo!;\n    }\n\n    /**\n     * 获取动画状态。\n     * @return 动画状态。\n     */\n    getAnimatorState(name: string): AnimatorState | null {\n        var state: AnimatorState;;\n        for (let i = 0; i < this._states.length; i++) {\n            if (this._states[i].name == name) {\n                state = this._states[i];\n                break;\n            }\n        }\n        return state ? state : null;\n    }\n\n    /**\n     * 添加动画状态。\n     * @param\tstate 动画状态。\n     * @param   layerIndex 层索引。\n     */\n    addState(state: AnimatorState): void {\n        var stateName: string = state.name;\n        if (this.getAnimatorState(stateName)) {\n            throw \"AnimatorControllerLayer:this stat's name has exist.\";\n        } else {\n            this._states.push(state);\n            if (stateName == this._defaultStateNameCatch) {\n                this._defaultState = state;\n                this._defaultStateNameCatch = null;\n            }\n\n            if (this._animator) {\n                (state._clip) && (state._clip!._addReference());\n                this._animator._getOwnersByClip(state);\n            }\n        }\n    }\n\n    /**\n     * 移除动画状态。\n     * @param\tstate 动画状态。\n     * @param   layerIndex 层索引。\n     */\n    removeState(state: AnimatorState): void {\n        var states: AnimatorState[] = this._states;\n        var index: number = -1;\n        for (var i: number = 0, n: number = states.length; i < n; i++) {\n            if (states[i] === state) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== -1)\n            this._removeClip(states, index, state);\n    }\n\n    /**\n     * 销毁。\n     */\n    destroy(): void {\n        this._clearReference();\n        this._states = [];\n        this._playStateInfo = null;\n        this._crossPlayStateInfo = null;\n        this._defaultState = null;\n    }\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        var dest: AnimatorControllerLayer = (<AnimatorControllerLayer>destObject);\n        dest.name = this.name;\n        dest.blendingMode = this.blendingMode;\n        dest.defaultWeight = this.defaultWeight;\n        dest.playOnWake = this.playOnWake;\n        this.avatarMask && (dest.avatarMask = this._avatarMask.clone());\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: AnimatorControllerLayer = new AnimatorControllerLayer(this.name);\n        this.cloneTo(dest);\n        return dest;\n    }\n\n}\n\n\n","import { Component } from \"../../../components/Component\";\nimport { ClassUtils } from \"../../../utils/ClassUtils\";\nimport { SimpleSkinnedMeshRenderer } from \"../../core/SimpleSkinnedMeshRenderer\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\n\n\nexport class AnimatorResource {\n    static getAnimatorResource(sprite: Sprite3D, propertyKey: string): Component {\n        switch (propertyKey) {\n            case \"simpleSkinnedMeshRenderer\":\n                return sprite.getComponent(SimpleSkinnedMeshRenderer);\n            default:\n                return sprite.getComponent(ClassUtils.getClass(propertyKey));\n                break;\n        }\n        return null;\n    }\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { IClone } from \"../../../utils/IClone\";\nimport { AnimationClip } from \"../../animation/AnimationClip\";\nimport { AnimatorStateScript } from \"../../animation/AnimatorStateScript\";\nimport { KeyframeNodeList } from \"../../animation/KeyframeNodeList\";\nimport { AnimatorParams } from \"./Animator\";\nimport { AnimatorTransition } from \"./AnimatorTransition\";\nimport { KeyframeNodeOwner, KeyFrameValueType } from \"./KeyframeNodeOwner\";\n\n/**\n * <code>AnimatorState</code> 类用于创建动作状态。\n */\nexport class AnimatorState extends EventDispatcher implements IClone {\n    /**\n     * 动画事件 开始时调用\n     */\n    static EVENT_OnStateEnter = \"OnStartEnter\";\n    /**\n     * 动画事件 更新时调用\n     */\n    static EVENT_OnStateUpdate = \"OnStateUpdate\";\n    /**\n     * 动画事件 离开时调用\n     */\n    static EVENT_OnStateExit = \"OnStateExit\";\n    \n    /** @internal */\n    private _referenceCount: number = 0;\n\n    /** @internal */\n    _clip: AnimationClip | null = null;\n    \n    /** @internal */\n    _nodeOwners: KeyframeNodeOwner[] = [];//TODO:提出去\n    \n    /** @internal */\n    _currentFrameIndices: Int16Array | null = null;\n    \n    /**\n     * @internal\n     * to avoid data confused,must put realtime datas in animatorState,can't be in animationClip,\n     * for example use crossFade() with different animatorState but the sample clip source.\n     */\n    _realtimeDatas: Array<number | Vector3 | Quaternion> = [];\n    \n    /** @internal */\n    _scripts: AnimatorStateScript[] | null = null;\n    \n    /**@internal 过渡列表*/\n    _transitions: AnimatorTransition[] = [];\n    \n    /**@internal 优先过渡列表only play this transition */\n    _soloTransitions: AnimatorTransition[] = [];\n\n    /**名称。*/\n    name: string;\n    \n    /**动画播放速度,1.0为正常播放速度。*/\n    speed: number = 1.0;\n    \n    /**动作播放起始时间。*/\n    clipStart: number = 0.0;\n    \n    /**动作播放结束时间。*/\n    clipEnd: number = 1.0;\n\n    /**\n     * 动作。\n     */\n    get clip(): AnimationClip | null {\n        return this._clip;\n    }\n\n    set clip(value: AnimationClip | null) {\n        if (this._clip !== value) {\n            if (this._clip)\n                (this._referenceCount > 0) && (this._clip._removeReference(this._referenceCount));\n            if (value) {\n                var realtimeDatas: Array<number | Vector3 | Quaternion | Vector2 | Vector4> = this._realtimeDatas;\n                var clipNodes: KeyframeNodeList = value._nodes!;\n                var count: number = clipNodes.count;\n                this._currentFrameIndices = new Int16Array(count);\n                this._resetFrameIndices();\n                (this._referenceCount > 0) && (value._addReference(this._referenceCount));\n                this._realtimeDatas.length = count;\n                for (var i: number = 0; i < count; i++) {\n                    switch (clipNodes.getNodeByIndex(i).type) {\n                        case KeyFrameValueType.Float:\n                            break;\n                        case KeyFrameValueType.Position:\n                        case KeyFrameValueType.Scale:\n                        case KeyFrameValueType.RotationEuler:\n                        case KeyFrameValueType.Vector3:\n                            realtimeDatas[i] = new Vector3();\n                            break;\n                        case KeyFrameValueType.Rotation:\n                            realtimeDatas[i] = new Quaternion();\n                            break;\n                        case KeyFrameValueType.Vector2:\n                            realtimeDatas[i] = new Vector2();\n                            break;\n                        case KeyFrameValueType.Vector4:\n                        case KeyFrameValueType.Color:\n                            realtimeDatas[i] = new Vector4();\n                            break;\n                        default:\n                            throw \"AnimationClipParser04:unknown type.\";\n                    }\n                }\n            }\n            this._clip = value;\n        }\n    }\n\n    /**\n     * IDE\n     */\n    get transitions() {\n        return this._transitions;\n    }\n\n    set transitions(value: AnimatorTransition[]) {\n        this._transitions = value;\n    }\n\n    /**\n     * IDE\n     */\n    get soloTransitions() {\n        return this._soloTransitions;\n    }\n\n    set soloTransitions(value: AnimatorTransition[]) {\n        this._soloTransitions = value\n    }\n\n\n\n    /**\n     * 创建一个 <code>AnimatorState</code> 实例。\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * @internal\n     */\n    _eventStart() {\n        this.event(AnimatorState.EVENT_OnStateEnter);\n        if (this._scripts) {\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++)\n                this._scripts[i].onStateEnter();\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _eventExit() {\n        this.event(AnimatorState.EVENT_OnStateExit);\n        if (this._scripts) {\n            for (let i = 0, n = this._scripts.length; i < n; i++) {\n                this._scripts[i].onStateExit();\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _eventStateUpdate(value: number) {\n        this.event(AnimatorState.EVENT_OnStateUpdate, value);\n        if (this._scripts) {\n            for (var i = 0, n = this._scripts.length; i < n; i++)\n                this._scripts[i].onStateUpdate(value);\n        }\n    }\n\n    /**\n     * 派发过渡事件\n     * @internal\n     * @param normalizeTime \n     * @param paramsMap \n     */\n    _eventtransition(normalizeTime: number, paramsMap: AnimatorParams): AnimatorTransition {\n        let soloNums = this._soloTransitions.length;\n        if (soloNums > 0) {\n            for (var i = 0; i < soloNums; i++) {\n                if (this._soloTransitions[i].check(normalizeTime, paramsMap))\n                    return this._soloTransitions[i];\n            }\n            return null;\n        }\n        let transNums = this._transitions.length;\n        for (var i = 0; i < transNums; i++) {\n            if (this._transitions[i].check(normalizeTime, paramsMap))\n                return this._transitions[i];\n        }\n        return null;\n    }\n\n\n\n    /**\n     * @internal\n     */\n    _getReferenceCount(): number {\n        return this._referenceCount;\n    }\n\n    /**\n     * @internal\n     * @param count \n     */\n    _addReference(count: number = 1): void {\n        (this._clip) && (this._clip._addReference(count));\n        this._referenceCount += count;\n    }\n\n    /**\n     * @internal\n     * @param count \n     */\n    _removeReference(count: number = 1): void {\n        (this._clip) && (this._clip._removeReference(count));\n        this._referenceCount -= count;\n    }\n\n    /**\n     * @internal\n     */\n    _clearReference(): void {\n        this._removeReference(-this._referenceCount);\n    }\n\n    /**\n     * @internal\n     */\n    _resetFrameIndices(): void {\n        for (var i: number = 0, n: number = this._currentFrameIndices!.length; i < n; i++)\n            this._currentFrameIndices![i] = -1;//-1表示没到第0帧,首帧时间可能大于\n    }\n\n    /**\n     * 添加脚本。\n     * @param\ttype  组件类型。\n     * @return 脚本。\n     *\n     */\n    addScript(type: typeof AnimatorStateScript): AnimatorStateScript {\n        var script: AnimatorStateScript = new type();\n        this._scripts = this._scripts || [];\n        this._scripts.push(script);\n        return script;\n    }\n\n    /**\n     * 获取脚本。\n     * @param\ttype  组件类型。\n     * @return 脚本。\n     *\n     */\n    getScript(type: typeof AnimatorStateScript): AnimatorStateScript | null {\n        if (this._scripts) {\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\n                var script: AnimatorStateScript = this._scripts[i];\n                if (script instanceof type)\n                    return script;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 获取脚本集合。\n     * @param\ttype  组件类型。\n     * @return 脚本集合。\n     */\n    getScripts(type: typeof AnimatorStateScript): AnimatorStateScript[] | null {\n        var coms: AnimatorStateScript[] | null = null;\n        if (this._scripts) {\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\n                var script: AnimatorStateScript = this._scripts[i];\n                if (script instanceof type) {\n                    coms = coms || [];\n                    coms.push(script);\n                }\n            }\n        }\n        return coms;\n    }\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        var dest: AnimatorState = <AnimatorState>destObject;\n        dest.name = this.name;\n        dest.speed = this.speed;\n        dest.clipStart = this.clipStart;\n        dest.clipEnd = this.clipEnd;\n        dest.clip = this._clip;\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: AnimatorState = new AnimatorState();\n        this.cloneTo(dest);\n        return dest;\n    }\n\n}","/**\n * 用来描述动画层遮罩\n */\nexport class AvatarMask {\n    /**@internal */\n    private _avatarPathMap: Record<string, boolean>;\n\n    /**\n     * 创建一个<code>AvatarMask</code>实例\n     */\n    constructor(data?: Record<string, boolean>) {\n        this._avatarPathMap = data || {};\n    }\n\n    /**\n     * 查找节点路径遮罩\n     * @param path \n     * @returns \n     */\n    getTransformActive(path: string): boolean {\n        return this._avatarPathMap[path];\n    }\n\n    /**\n     * 设置\n     * @param path \n     * @param value \n     */\n    setTransformActive(path: string, value: boolean) {\n        this._avatarPathMap[path] = value;\n    }\n\n    /**\n     * 获得遮罩信息\n     * @returns \n     */\n    getAllTranfromPath() {\n        return this._avatarPathMap;\n    }\n\n    /**\n   * 克隆。\n   * @return\t 克隆副本。\n   */\n    clone(): any {\n        var dest: AvatarMask = new AvatarMask();\n        this.cloneTo(dest);\n        return dest;\n    }\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        var dest: AvatarMask = (<AvatarMask>destObject);\n        for (var key in this._avatarPathMap) {\n            dest.setTransformActive(key, this._avatarPathMap[key]);\n        }\n\n    }\n\n}","\nimport { Component } from \"../../../components/Component\";\nimport { NodeFlags } from \"../../../Const\";\nimport { Loader } from \"../../../net/Loader\";\nimport { Stat } from \"../../../utils/Stat\";\nimport { AnimationClip } from \"../../animation/AnimationClip\";\nimport { AnimatorStateScript } from \"../../animation/AnimatorStateScript\";\nimport { KeyframeNode } from \"../../animation/KeyframeNode\";\nimport { KeyframeNodeList } from \"../../animation/KeyframeNodeList\";\nimport { Material } from \"../../core/material/Material\";\nimport { RenderableSprite3D } from \"../../core/RenderableSprite3D\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Utils3D } from \"../../utils/Utils3D\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\nimport { AnimatorResource } from \"./AnimatorResource\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AvatarMask } from \"./AvatarMask\";\nimport { KeyframeNodeOwner, KeyFrameValueType } from \"./KeyframeNodeOwner\";\nimport { AnimationEvent } from \"../../animation/AnimationEvent\";\nimport { AnimatorTransition } from \"./AnimatorTransition\";\nimport { AnimatorController } from \"./AnimatorController\";\nimport { Color } from \"../../../maths/Color\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { AnimatorUpdateMode } from \"../../../components/AnimatorUpdateMode\";\nimport { AnimatorStateCondition } from \"../../../components/AnimatorStateCondition\";\n\nexport type AnimatorParams = { [key: number]: number | boolean };\n\n\n/**\n * <code>Animator</code> 类用于创建动画组件。\n */\nexport class Animator extends Component {\n    /**@internal */\n    private static _tempVector31: Vector3 = new Vector3();\n    /**@internal */\n    private static _tempColor: Color = new Color();\n    /**@internal */\n    private static _tempQuaternion1: Quaternion = new Quaternion();\n\n    /** 裁剪模式_始终播放动画。*/\n    static CULLINGMODE_ALWAYSANIMATE: number = 0;\n    /** 裁剪模式_不可见时完全不播放动画。*/\n    static CULLINGMODE_CULLCOMPLETELY: number = 2;\n\n    /**@internal */\n    private _speed: number;\n    /**@internal */\n    private _keyframeNodeOwnerMap: any;\n    /**@internal */\n    private _keyframeNodeOwners: KeyframeNodeOwner[] = [];\n    /**@internal */\n    private _updateMark: number;\n    /**@internal */\n    private _controllerLayers: AnimatorControllerLayer[];\n    /**@internal 更新模式*/\n    private _updateMode: AnimatorUpdateMode = AnimatorUpdateMode.Normal;\n    /**@internal 降低更新频率调整值*/\n    private _lowUpdateDelty: number = 20;\n    /**@internal */\n    private _animatorParams: AnimatorParams = {};\n    // /**@internal */\n    // _linkSprites: any;\n    /**@internal\t*/\n    _avatarNodeMap: any;\n    /**@internal */\n    _linkAvatarSpritesData: any = {};\n    /**@internal */\n    _linkAvatarSprites: Sprite3D[] = [];\n    /**@internal */\n    _renderableSprites: RenderableSprite3D[] = [];\n\n    /**\t裁剪模式*/\n    cullingMode: number = Animator.CULLINGMODE_CULLCOMPLETELY;\n\n    /**@internal\t[NATIVE]*/\n    _animationNodeLocalPositions: Float32Array;\n    /**@internal\t[NATIVE]*/\n    _animationNodeLocalRotations: Float32Array;\n    /**@internal\t[NATIVE]*/\n    _animationNodeLocalScales: Float32Array;\n    /**@internal\t[NATIVE]*/\n    _animationNodeWorldMatrixs: Float32Array;\n    /**@internal\t[NATIVE]*/\n    _animationNodeParentIndices: Int16Array;\n\n\n\n    _controller: AnimatorController;\n\n\n    set controller(val: AnimatorController) {\n        this._controller = val;\n        if (this._controller) {\n            this._controller.updateTo(this);\n        }\n\n    }\n    get controller() {\n        return this._controller;\n    }\n\n\n\n    /**\n     * 动画的播放速度,1.0为正常播放速度。\n     */\n    get speed(): number {\n        return this._speed;\n    }\n\n\n    set speed(value: number) {\n        this._speed = value;\n    }\n\n\n\n\n\n    /**\n     * 设置更新模式\n     */\n    set updateMode(value: AnimatorUpdateMode) {\n        this._updateMode = value;\n    }\n\n    /**\n     * 低更新模式\n     */\n    set lowUpdateDelty(value: number) {\n        this._lowUpdateDelty = value;\n    }\n\n    get controllerLayerCount(): number {\n        return this._controllerLayers.length;\n    }\n\n    /**\n     * 状态机参数map\n     */\n    set animatorParams(values: AnimatorParams) {\n        this._animatorParams = values;\n    }\n\n    get animatorParams() {\n        return this._animatorParams;\n    }\n\n\n\n    /**\n     * 创建一个 <code>Animation</code> 实例。\n     */\n    constructor() {\n        super();\n        this._controllerLayers = [];\n        //this._linkSprites = {};\n        this._speed = 1.0;\n        this._keyframeNodeOwnerMap = {};\n        this._updateMark = 0;\n    }\n\n    /**\n     * @internal\n     */\n    private _addKeyframeNodeOwner(clipOwners: KeyframeNodeOwner[], node: KeyframeNode, propertyOwner: any): void {\n        var nodeIndex = node._indexInList;\n        var fullPath = node.fullPath;\n        var keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\n        let mat = false;\n        if (keyframeNodeOwner) {\n            keyframeNodeOwner.referenceCount++;\n            clipOwners[nodeIndex] = keyframeNodeOwner;\n        } else {\n            var property = propertyOwner;\n            for (var i = 0, n = node.propertyCount; i < n; i++) {\n                property = property[node.getPropertyByIndex(i)];\n                if (property instanceof Material) {\n                    mat = true\n                }\n                if (!property)\n                    break;\n            }\n\n            keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath] = new KeyframeNodeOwner();\n            keyframeNodeOwner.isMaterial = mat;\n            keyframeNodeOwner.fullPath = fullPath;\n            keyframeNodeOwner.indexInList = this._keyframeNodeOwners.length;\n            keyframeNodeOwner.referenceCount = 1;\n            keyframeNodeOwner.propertyOwner = propertyOwner;\n            keyframeNodeOwner.nodePath = node.nodePath;\n            var propertyCount = node.propertyCount;\n            var propertys: string[] = [];\n            for (i = 0; i < propertyCount; i++)\n                propertys[i] = node.getPropertyByIndex(i);\n            keyframeNodeOwner.property = propertys;\n            keyframeNodeOwner.type = node.type;\n\n            if (property) {//查询成功后赋默认值\n                if (node.type === 0) {\n                    keyframeNodeOwner.defaultValue = property;\n                } else {\n                    var defaultValue = new property.constructor();\n                    property.cloneTo(defaultValue);\n                    keyframeNodeOwner.defaultValue = defaultValue;\n                    keyframeNodeOwner.value = new property.constructor();\n                    keyframeNodeOwner.crossFixedValue = new property.constructor();\n                }\n            }\n\n            this._keyframeNodeOwners.push(keyframeNodeOwner);\n            clipOwners[nodeIndex] = keyframeNodeOwner;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _removeKeyframeNodeOwner(nodeOwners: (KeyframeNodeOwner | null)[], node: KeyframeNode): void {\n        var fullPath = node.fullPath;\n        var keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\n        if (keyframeNodeOwner) {//TODO:Avatar中没该节点,但动画文件有,不会保存_keyframeNodeOwnerMap在中,移除会出BUG,例如动画节点下的SkinnedMeshRender有动画帧，但Avatar中忽略了\n            keyframeNodeOwner.referenceCount--;\n            if (keyframeNodeOwner.referenceCount === 0) {\n                delete this._keyframeNodeOwnerMap[fullPath];\n                this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(keyframeNodeOwner), 1);\n            }\n            nodeOwners[node._indexInList] = null;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _getOwnersByClip(clipStateInfo: AnimatorState): void {\n        if (!clipStateInfo._clip)\n            return;\n\n        var frameNodes = clipStateInfo._clip!._nodes;\n        var frameNodesCount = frameNodes!.count;\n        var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\n        nodeOwners.length = frameNodesCount;\n        for (var i: number = 0; i < frameNodesCount; i++) {\n            var node: KeyframeNode = frameNodes!.getNodeByIndex(i);\n            //var property: any = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name!] : this.owner;//如果有avatar需使用克隆节点\n            var property: any = this.owner;\n            for (var j: number = 0, m: number = node.ownerPathCount; j < m; j++) {\n                var ownPat: string = node.getOwnerPathByIndex(j);\n                if (ownPat === \"\") {//TODO:直接不存\n                    break;\n                } else {\n                    property = property.getChildByName(ownPat);\n                    if (!property)\n                        break;\n                }\n            }\n\n            if (property) {\n                var propertyOwner: string = node.propertyOwner;\n                const oriProperty = property;\n                (propertyOwner) && (property = property[propertyOwner]);\n                if (!property) {\n                    property = AnimatorResource.getAnimatorResource(oriProperty, propertyOwner);\n                }\n                property && this._addKeyframeNodeOwner(nodeOwners, node, property);\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _updatePlayer(animatorState: AnimatorState, playState: AnimatorPlayState, elapsedTime: number, islooping: boolean, layerIndex: number): void {\n        var clipDuration: number = animatorState._clip!._duration * (animatorState.clipEnd - animatorState.clipStart);\n        var lastElapsedTime: number = playState._elapsedTime;\n        var elapsedPlaybackTime: number = lastElapsedTime + elapsedTime;\n        playState._lastElapsedTime = lastElapsedTime;\n        playState._elapsedTime = elapsedPlaybackTime;\n        var normalizedTime: number = elapsedPlaybackTime / clipDuration;//TODO:时候可以都统一为归一化时间\n        playState._normalizedTime = normalizedTime;\n        var playTime: number = normalizedTime % 1.0;\n        playState._normalizedPlayTime = playTime < 0 ? playTime + 1.0 : playTime;\n        playState._duration = clipDuration;\n        if ((!islooping && elapsedPlaybackTime >= clipDuration)) {\n            playState._finish = true;\n            playState._elapsedTime = clipDuration;\n            playState._normalizedPlayTime = 1.0;\n            return;\n        }\n\n        animatorState._eventStateUpdate(playState._normalizedPlayTime);\n        this._applyTransition(layerIndex, animatorState._eventtransition(playState._normalizedPlayTime, this.animatorParams));\n    }\n\n    /**\n     * 启用过渡\n     * @param layerindex \n     * @param transition \n     * @returns \n     */\n    private _applyTransition(layerindex: number, transition: AnimatorTransition) {\n        if (!transition)\n            return;\n        this.crossFade(transition.destState.name, transition.transduration, layerindex, transition.transstartoffset);\n    }\n\n    /**\n     * @internal\n     * @param animatorState \n     * @param playState \n     */\n    private _updateStateFinish(animatorState: AnimatorState, playState: AnimatorPlayState): void {\n        if (playState._finish) {\n            animatorState._eventExit();//派发播放完成的事件\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _eventScript(events: AnimationEvent[], eventIndex: number, endTime: number, front: boolean): number {\n        let scripts = this.owner.components;\n        if (front) {\n            for (let n = events.length; eventIndex < n; eventIndex++) {\n                let event = events[eventIndex];\n                if (event.time <= endTime) {\n                    for (let j = 0, m = scripts.length; j < m; j++) {\n                        let script = scripts[j];\n                        if (script._isScript()) {\n                            let fun: Function = (script as any)[event.eventName];\n                            (fun) && (fun.apply(script, event.params));\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        } else {\n            for (; eventIndex >= 0; eventIndex--) {\n                let event = events[eventIndex];\n                if (event.time >= endTime) {\n                    for (let j = 0, m = scripts.length; j < m; j++) {\n                        let script = scripts[j];\n                        if (script._isScript()) {\n                            let fun = (script as any)[event.eventName];\n                            (fun) && (fun.apply(script, event.params));\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n        return eventIndex;\n    }\n\n    /**\n     * @internal\n     */\n    private _updateEventScript(stateInfo: AnimatorState, playStateInfo: AnimatorPlayState): void {\n        if (!this.owner._getBit(NodeFlags.HAS_SCRIPT))\n            return;\n\n        let clip = stateInfo._clip;\n        let events = clip!._animationEvents;\n        let clipDuration = clip!._duration;\n        let elapsedTime = playStateInfo._elapsedTime;\n        let time = elapsedTime % clipDuration;\n        let loopCount = Math.abs(Math.floor(elapsedTime / clipDuration) - Math.floor(playStateInfo._lastElapsedTime / clipDuration));//backPlay可能为负数\n\n        let frontPlay = playStateInfo._elapsedTime >= playStateInfo._lastElapsedTime;\n        if (playStateInfo._lastIsFront !== frontPlay) {\n            if (frontPlay)\n                playStateInfo._playEventIndex++;\n            else\n                playStateInfo._playEventIndex--;\n            playStateInfo._lastIsFront = frontPlay;\n        }\n        let preEventIndex = playStateInfo._playEventIndex;\n        if (frontPlay) {\n            let newEventIndex = this._eventScript(events, playStateInfo._playEventIndex, loopCount > 0 ? clipDuration : time, true);\n            (preEventIndex === playStateInfo._playEventIndex) && (playStateInfo._playEventIndex = newEventIndex);//这里打个补丁，在event中调用Play 需要重置eventindex，不能直接赋值\n            for (let i = 0, n = loopCount - 1; i < n; i++)\n                this._eventScript(events, 0, clipDuration, true);\n            (loopCount > 0 && time > 0) && (playStateInfo._playEventIndex = this._eventScript(events, 0, time, true));//if need cross loop,'time' must large than 0\n        } else {\n            let newEventIndex = this._eventScript(events, playStateInfo._playEventIndex, loopCount > 0 ? 0 : time, false);\n            (preEventIndex === playStateInfo._playEventIndex) && (playStateInfo._playEventIndex = newEventIndex);//这里打个补丁，在event中调用Play 需要重置eventindex，不能直接赋值\n            let eventIndex = events.length - 1;\n            for (let i = 0, n = loopCount - 1; i < n; i++)\n                this._eventScript(events, eventIndex, 0, false);\n            (loopCount > 0 && time > 0) && (playStateInfo._playEventIndex = this._eventScript(events, eventIndex, time, false));//if need cross loop,'time' must large than 0\n        }\n    }\n\n    /**\n     * 更新clip数据\n     * @internal\n     */\n    private _updateClipDatas(animatorState: AnimatorState, addtive: boolean, playStateInfo: AnimatorPlayState, animatorMask: AvatarMask = null): void {\n        var clip = animatorState._clip;\n        var clipDuration = clip!._duration;\n\n        var curPlayTime = animatorState.clipStart * clipDuration + playStateInfo._normalizedPlayTime * playStateInfo._duration;\n        var currentFrameIndices = animatorState._currentFrameIndices;\n        var frontPlay = playStateInfo._elapsedTime > playStateInfo._lastElapsedTime;\n        clip!._evaluateClipDatasRealTime(clip!._nodes!, curPlayTime, currentFrameIndices!, addtive, frontPlay, animatorState._realtimeDatas, animatorMask);\n    }\n\n    /**\n     * @internal\n     */\n    private _applyFloat(defaultValue: number, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: number): number {\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                defaultValue += weight * data;\n            } else {\n                var oriValue: number = defaultValue;\n                defaultValue = oriValue + weight * (data - oriValue);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive)\n                    defaultValue = nodeOwner.defaultValue + data;\n                else\n                    defaultValue = data;\n            } else {\n                if (additive) {\n                    defaultValue = nodeOwner.defaultValue + weight * (data);\n                } else {\n                    var defValue: number = nodeOwner.defaultValue;\n                    defaultValue = defValue + weight * (data - defValue);\n                }\n            }\n        }\n        return defaultValue;\n    }\n\n    private _applyVec2(defaultValue: Vector2, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector2): Vector2 {\n        if (!defaultValue) return null;\n\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                defaultValue.x += weight * data.x;\n                defaultValue.y += weight * data.y;\n            } else {\n                var oriValue = defaultValue;\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive) {\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\n                }\n                else\n                    data.cloneTo(defaultValue);\n            } else {\n                if (additive) {\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\n                } else {\n                    var defValue: Vector2 = nodeOwner.defaultValue;\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\n                }\n            }\n        }\n        return defaultValue;\n    }\n\n    private _applyVec3(defaultValue: Vector3, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector3) {\n        if (!defaultValue) return null;\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                defaultValue.x += weight * data.x;\n                defaultValue.y += weight * data.y;\n                defaultValue.z += weight * data.z;\n            } else {\n                var oriValue = defaultValue;\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\n                defaultValue.z = oriValue.z + weight * (data.z - oriValue.z);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive) {\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\n                    defaultValue.z = nodeOwner.defaultValue.z + data.z;\n                }\n                else\n                    data.cloneTo(defaultValue);\n            } else {\n                if (additive) {\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\n                    defaultValue.z = nodeOwner.defaultValue.z + weight * (data.z);\n                } else {\n                    var defValue: Vector3 = nodeOwner.defaultValue;\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\n                    defaultValue.z = defValue.z + weight * (data.z - defValue.z);\n                }\n            }\n        }\n        return defaultValue;\n    }\n\n    private _applyVec4(defaultValue: Vector4, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector4) {\n        if (!defaultValue) return null;\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                defaultValue.x += weight * data.x;\n                defaultValue.y += weight * data.y;\n                defaultValue.z += weight * data.z;\n                defaultValue.w += weight * data.w;\n            } else {\n                var oriValue = defaultValue;\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\n                defaultValue.z = oriValue.z + weight * (data.z - oriValue.z);\n                defaultValue.w = oriValue.w + weight * (data.w - oriValue.w);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive) {\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\n                    defaultValue.z = nodeOwner.defaultValue.z + data.z;\n                    defaultValue.w = nodeOwner.defaultValue.w + data.w;\n                }\n                else\n                    data.cloneTo(defaultValue);\n            } else {\n                if (additive) {\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\n                    defaultValue.z = nodeOwner.defaultValue.z + weight * (data.z);\n                    defaultValue.w = nodeOwner.defaultValue.w + weight * (data.w);\n                } else {\n                    var defValue: Vector4 = nodeOwner.defaultValue;\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\n                    defaultValue.z = defValue.z + weight * (data.z - defValue.z);\n                    defaultValue.w = defValue.w + weight * (data.w - defValue.w);\n                }\n            }\n        }\n        return defaultValue;\n    }\n\n    private _applyColor(defaultValue: Color, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector4) {\n        if (!defaultValue) return null;\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                defaultValue.r += weight * data.x;\n                defaultValue.g += weight * data.y;\n                defaultValue.b += weight * data.z;\n                defaultValue.a += weight * data.w;\n            } else {\n                var oriValue = defaultValue;\n                defaultValue.r = oriValue.r + weight * (data.x - oriValue.r);\n                defaultValue.g = oriValue.g + weight * (data.y - oriValue.g);\n                defaultValue.b = oriValue.b + weight * (data.z - oriValue.b);\n                defaultValue.a = oriValue.a + weight * (data.w - oriValue.a);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive) {\n                    defaultValue.r = nodeOwner.defaultValue.r + data.x;\n                    defaultValue.g = nodeOwner.defaultValue.g + data.y;\n                    defaultValue.b = nodeOwner.defaultValue.b + data.z;\n                    defaultValue.a = nodeOwner.defaultValue.a + data.w;\n                }\n                else {\n                    //data.cloneTo(defaultValue);\n                    defaultValue.setValue(data.x, data.y, data.z, data.w);\n                }\n\n            } else {\n                if (additive) {\n                    defaultValue.r = nodeOwner.defaultValue.r + weight * (data.x);\n                    defaultValue.g = nodeOwner.defaultValue.g + weight * (data.y);\n                    defaultValue.b = nodeOwner.defaultValue.b + weight * (data.z);\n                    defaultValue.a = nodeOwner.defaultValue.a + weight * (data.w);\n                } else {\n                    var defValue: Color = nodeOwner.defaultValue;\n                    defaultValue.r = defValue.r + weight * (data.x - defValue.r);\n                    defaultValue.g = defValue.g + weight * (data.y - defValue.g);\n                    defaultValue.b = defValue.b + weight * (data.z - defValue.b);\n                    defaultValue.a = defValue.a + weight * (data.w - defValue.a);\n                }\n            }\n        }\n        return defaultValue;\n    }\n\n    /**\n     * @internal\n     */\n    private _applyPositionAndRotationEuler(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector3, out: Vector3): void {\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                out.x += weight * data.x;\n                out.y += weight * data.y;\n                out.z += weight * data.z;\n            } else {\n                var oriX: number = out.x;\n                var oriY: number = out.y;\n                var oriZ: number = out.z;\n                out.x = oriX + weight * (data.x - oriX);\n                out.y = oriY + weight * (data.y - oriY);\n                out.z = oriZ + weight * (data.z - oriZ);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive) {\n                    var defValue: Vector3 = nodeOwner.defaultValue;\n                    out.x = defValue.x + data.x;\n                    out.y = defValue.y + data.y;\n                    out.z = defValue.z + data.z;\n                } else {\n                    out.x = data.x;\n                    out.y = data.y;\n                    out.z = data.z;\n                }\n            } else {\n                defValue = nodeOwner.defaultValue;\n                if (additive) {\n                    out.x = defValue.x + weight * data.x;\n                    out.y = defValue.y + weight * data.y;\n                    out.z = defValue.z + weight * data.z;\n                } else {\n                    var defX: number = defValue.x;\n                    var defY: number = defValue.y;\n                    var defZ: number = defValue.z;\n                    out.x = defX + weight * (data.x - defX);\n                    out.y = defY + weight * (data.y - defY);\n                    out.z = defZ + weight * (data.z - defZ);\n                }\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _applyRotation(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipRot: Quaternion, localRotation: Quaternion): void {\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                var tempQuat: Quaternion = Animator._tempQuaternion1;//使用临时四元数_tempQuaternion1，避免引用错乱\n                Utils3D.quaternionWeight(clipRot, weight, tempQuat);\n                tempQuat.normalize(tempQuat);\n                Quaternion.multiply(localRotation, tempQuat, localRotation);\n            } else {\n                Quaternion.lerp(localRotation, clipRot, weight, localRotation);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive) {\n                    var defaultRot: Quaternion = nodeOwner.defaultValue;\n                    Quaternion.multiply(defaultRot, clipRot, localRotation);\n                } else {\n                    localRotation.x = clipRot.x;\n                    localRotation.y = clipRot.y;\n                    localRotation.z = clipRot.z;\n                    localRotation.w = clipRot.w;\n                }\n            } else {\n                defaultRot = nodeOwner.defaultValue;\n                if (additive) {\n                    tempQuat = Animator._tempQuaternion1;\n                    Utils3D.quaternionWeight(clipRot, weight, tempQuat);\n                    tempQuat.normalize(tempQuat);\n                    Quaternion.multiply(defaultRot, tempQuat, localRotation);\n                } else {\n                    Quaternion.lerp(defaultRot, clipRot, weight, localRotation);\n                }\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _applyScale(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipSca: Vector3, localScale: Vector3): void {\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\n            if (additive) {\n                var scale: Vector3 = Animator._tempVector31;\n                Utils3D.scaleWeight(clipSca, weight, scale);\n                localScale.x = localScale.x * scale.x;\n                localScale.y = localScale.y * scale.y;\n                localScale.z = localScale.z * scale.z;\n            } else {\n                Utils3D.scaleBlend(localScale, clipSca, weight, localScale);\n            }\n        } else {\n            if (isFirstLayer) {\n                if (additive) {\n                    var defaultSca: Vector3 = nodeOwner.defaultValue;\n                    localScale.x = defaultSca.x * clipSca.x;\n                    localScale.y = defaultSca.y * clipSca.y;\n                    localScale.z = defaultSca.z * clipSca.z;\n                } else {\n                    localScale.x = clipSca.x;\n                    localScale.y = clipSca.y;\n                    localScale.z = clipSca.z;\n                }\n            } else {\n                defaultSca = nodeOwner.defaultValue;\n                if (additive) {\n                    scale = Animator._tempVector31;\n                    Utils3D.scaleWeight(clipSca, weight, scale);\n                    localScale.x = defaultSca.x * scale.x;\n                    localScale.y = defaultSca.y * scale.y;\n                    localScale.z = defaultSca.z * scale.z;\n                } else {\n                    Utils3D.scaleBlend(defaultSca, clipSca, weight, localScale);\n                }\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _applyCrossData(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, srcValue: any, desValue: any, crossWeight: number): void {\n        var pro: any = nodeOwner.propertyOwner;\n        if (pro) {\n            switch (nodeOwner.type) {\n                case KeyFrameValueType.Float: //Float\n                    var proPat: string[] = nodeOwner.property!;\n                    var m: number = proPat.length - 1;\n                    for (var j: number = 0; j < m; j++) {\n                        pro = pro[proPat[j]];\n                        if (!pro)//属性可能或被置空\n                            break;\n                    }\n\n                    var crossValue: number = srcValue + crossWeight * (desValue - srcValue);\n                    nodeOwner.value = crossValue;\n                    const lastpro = proPat[m];\n                    if (!nodeOwner.isMaterial) {\n                        pro && (pro[lastpro] = this._applyFloat(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, crossValue));\n                    } else {\n                        pro && (pro as Material).setFloat(lastpro, this._applyFloat((pro as Material).getFloat(lastpro), nodeOwner, additive, weight, isFirstLayer, crossValue));\n                    }\n                    break;\n                case KeyFrameValueType.Position: //Position\n                    var localPos: Vector3 = pro.localPosition;\n                    var position: Vector3 = nodeOwner.value;\n                    var srcX: number = srcValue.x, srcY: number = srcValue.y, srcZ: number = srcValue.z;\n                    position.x = srcX + crossWeight * (desValue.x - srcX);\n                    position.y = srcY + crossWeight * (desValue.y - srcY);\n                    position.z = srcZ + crossWeight * (desValue.z - srcZ);\n                    this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, position, localPos);\n                    pro.localPosition = localPos;\n                    break;\n                case KeyFrameValueType.Rotation: //Rotation\n                    var localRot: Quaternion = pro.localRotation;\n                    var rotation: Quaternion = nodeOwner.value;\n                    Quaternion.lerp(srcValue, desValue, crossWeight, rotation);\n                    this._applyRotation(nodeOwner, additive, weight, isFirstLayer, rotation, localRot);\n                    pro.localRotation = localRot;\n                    break;\n                case KeyFrameValueType.Scale: //Scale\n                    var localSca: Vector3 = pro.localScale;\n                    var scale: Vector3 = nodeOwner.value;\n                    Utils3D.scaleBlend(srcValue, desValue, crossWeight, scale);\n                    this._applyScale(nodeOwner, additive, weight, isFirstLayer, scale, localSca);\n                    pro.localScale = localSca;\n                    break;\n                case KeyFrameValueType.RotationEuler: //RotationEuler\n                    var localEuler: Vector3 = pro.localRotationEuler;\n                    var rotationEuler: Vector3 = nodeOwner.value;\n                    srcX = srcValue.x, srcY = srcValue.y, srcZ = srcValue.z;\n                    rotationEuler.x = srcX + crossWeight * (desValue.x - srcX);\n                    rotationEuler.y = srcY + crossWeight * (desValue.y - srcY);\n                    rotationEuler.z = srcZ + crossWeight * (desValue.z - srcZ);\n                    this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, rotationEuler, localEuler);\n                    pro.localRotationEuler = localEuler;\n                    break;\n                case KeyFrameValueType.Color:\n                    //TODO\n                    break;\n                case KeyFrameValueType.Vector2:\n                    //TODO\n                    break;\n                case KeyFrameValueType.Vector4:\n                    //TODO\n                    break;\n                case KeyFrameValueType.Vector3:\n                    //TODO\n                    break;\n            }\n            nodeOwner.updateMark = this._updateMark;\n        }\n    }\n\n    /**\n     * 赋值Node数据\n     * @param stateInfo 动画状态\n     * @param additive 是否为addtive\n     * @param weight state权重\n     * @param isFirstLayer 是否是第一层\n     */\n    private _setClipDatasToNode(stateInfo: AnimatorState, additive: boolean, weight: number, isFirstLayer: boolean, controllerLayer: AnimatorControllerLayer = null): void {\n        var realtimeDatas: Array<number | Vector3 | Quaternion | Vector2 | Vector4 | Color> = stateInfo._realtimeDatas;\n        var nodes: KeyframeNodeList = stateInfo._clip!._nodes!;\n        var nodeOwners: KeyframeNodeOwner[] = stateInfo._nodeOwners;\n        for (var i: number = 0, n: number = nodes.count; i < n; i++) {\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\n            if (nodeOwner) {//骨骼中没有该节点\n                var node = nodes.getNodeByIndex(i);\n                if (controllerLayer.avatarMask && (!controllerLayer.avatarMask.getTransformActive(node.nodePath))) {\n                    continue;\n                }\n                var pro: any = nodeOwner.propertyOwner;\n                let value: string;\n                if (pro) {\n                    switch (nodeOwner.type) {\n                        case KeyFrameValueType.Float: //Float\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            //pro && this._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]);\n                            let lastpro = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[lastpro] = this._applyFloat(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]));\n                            } else {\n                                pro && (pro as Material).setFloat(lastpro, this._applyFloat(0, nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]));\n                            }\n                            break;\n                        case KeyFrameValueType.Position: //Position\n                            var localPos: Vector3 = pro.localPosition;\n                            this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localPos);\n                            pro.localPosition = localPos;\n                            break;\n                        case KeyFrameValueType.Rotation: //Rotation\n                            var localRot: Quaternion = pro.localRotation;\n                            this._applyRotation(nodeOwner, additive, weight, isFirstLayer, <Quaternion>realtimeDatas[i], localRot);\n                            pro.localRotation = localRot;\n                            break;\n                        case KeyFrameValueType.Scale: //Scale\n                            var localSca: Vector3 = pro.localScale;\n                            this._applyScale(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localSca);\n                            pro.localScale = localSca;\n                            break;\n                        case KeyFrameValueType.RotationEuler: //RotationEuler\n                            var localEuler: Vector3 = pro.localRotationEuler;\n                            this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localEuler);\n                            pro.localRotationEuler = localEuler;\n                            break;\n                        case KeyFrameValueType.Vector2://vec2\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = this._applyVec2(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector2>realtimeDatas[i]));\n                            } else {\n                                pro && pro.getVector2(value) && (pro as Material).setVector2(value, this._applyVec2(pro.getVector2(value), nodeOwner, additive, weight, isFirstLayer, <Vector2>realtimeDatas[i]));\n                            }\n                            break;\n                        case KeyFrameValueType.Vector3://vec3\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = this._applyVec3(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i]));\n                            } else {\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, this._applyVec3(pro.getVector3(value), nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i]));\n                            }\n                            break;\n                        case KeyFrameValueType.Vector4://vec4\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = this._applyVec4(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\n                            } else {\n                                pro && pro.getVector4(value) && (pro as Material).setVector4(value, this._applyVec4(pro.getVector4(value), nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\n                            }\n                            break;\n                        case KeyFrameValueType.Color://Color\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = this._applyColor(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\n                            } else {\n                                pro && pro.getColor(value) && (pro as Material).setColor(value, this._applyColor(pro.getColor(value), nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\n                            }\n                            break;\n                    }\n                    nodeOwner.updateMark = this._updateMark;\n                }\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _setCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, srcState: AnimatorState, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\n        var nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\n        var ownerCount: number = controllerLayer._crossNodesOwnersCount;\n        var additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\n        var weight: number = controllerLayer.defaultWeight;\n\n        var destRealtimeDatas: Array<number | Vector3 | Quaternion> = destState._realtimeDatas;\n        var destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\n        var destNodeOwners: KeyframeNodeOwner[] = destState._nodeOwners;\n        var srcRealtimeDatas: Array<number | Vector3 | Quaternion> = srcState._realtimeDatas;\n        var srcDataIndices: number[] = controllerLayer._srcCrossClipNodeIndices;\n        var srcNodeOwners: KeyframeNodeOwner[] = srcState._nodeOwners;\n\n        for (var i: number = 0; i < ownerCount; i++) {\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\n            if (nodeOwner) {\n                var srcIndex: number = srcDataIndices[i];\n                var destIndex: number = destDataIndices[i];\n                var srcValue: any = srcIndex !== -1 ? srcRealtimeDatas[srcIndex] : destNodeOwners[destIndex].defaultValue;\n                var desValue: any = destIndex !== -1 ? destRealtimeDatas[destIndex] : srcNodeOwners[srcIndex].defaultValue;\n                if(!desValue){\n                    desValue = srcNodeOwners[srcIndex].defaultValue;\n                }\n                if (!controllerLayer.avatarMask || controllerLayer.avatarMask.getTransformActive(nodeOwner.nodePath)) {\n                    this._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * @internal\n     */\n    private _setFixedCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\n        var nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\n        var ownerCount: number = controllerLayer._crossNodesOwnersCount;\n        var additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\n        var weight: number = controllerLayer.defaultWeight;\n        var destRealtimeDatas: Array<number | Vector3 | Quaternion> = destState._realtimeDatas;\n        var destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\n\n        for (var i: number = 0; i < ownerCount; i++) {\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\n            if (nodeOwner) {\n                var destIndex: number = destDataIndices[i];\n                var srcValue: any = nodeOwner.crossFixedValue;\n                var desValue;\n                if (destIndex == -1 || !destRealtimeDatas[destIndex]) {\n                    desValue = nodeOwner.defaultValue;\n                } else {\n                    desValue = destRealtimeDatas[destIndex];\n                }\n                this._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\n            }\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private _revertDefaultKeyframeNodes(clipStateInfo: AnimatorState): void {\n        var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\n        for (var i: number = 0, n: number = nodeOwners.length; i < n; i++) {\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\n            if (nodeOwner) {\n                var pro: any = nodeOwner.propertyOwner;\n                let value: string;\n                if (pro) {\n                    switch (nodeOwner.type) {\n                        case KeyFrameValueType.Float:\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            //pro && this._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]);\n                            let lastpro = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[lastpro] = nodeOwner.defaultValue);\n                            } else {\n                                pro && (pro as Material).setFloat(lastpro, nodeOwner.defaultValue);\n                            }\n                            break;\n                        case KeyFrameValueType.Position:\n                            var locPos: Vector3 = pro.localPosition;\n                            var def: Vector3 = nodeOwner.defaultValue;\n                            locPos.x = def.x;\n                            locPos.y = def.y;\n                            locPos.z = def.z;\n                            pro.localPosition = locPos;\n                            break;\n                        case KeyFrameValueType.Rotation:\n                            var locRot: Quaternion = pro.localRotation;\n                            var defQua: Quaternion = nodeOwner.defaultValue;\n                            locRot.x = defQua.x;\n                            locRot.y = defQua.y;\n                            locRot.z = defQua.z;\n                            locRot.w = defQua.w;\n                            pro.localRotation = locRot;\n                            break;\n                        case KeyFrameValueType.Scale:\n                            var locSca: Vector3 = pro.localScale;\n                            def = nodeOwner.defaultValue;\n                            locSca.x = def.x;\n                            locSca.y = def.y;\n                            locSca.z = def.z;\n                            pro.localScale = locSca;\n                            break;\n                        case KeyFrameValueType.RotationEuler:\n                            var locEul: Vector3 = pro.localRotationEuler;\n                            def = nodeOwner.defaultValue;\n                            locEul.x = def.x;\n                            locEul.y = def.y;\n                            locEul.z = def.z;\n                            pro.localRotationEuler = locEul;\n                            break;\n                        case KeyFrameValueType.Vector2:\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = nodeOwner.defaultValue);\n                            } else {\n                                pro && pro.getVector2(value) && (pro as Material).setVector2(value, nodeOwner.defaultValue);\n                            }\n                            break;\n                        case KeyFrameValueType.Vector3:\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = nodeOwner.defaultValue);\n                            } else {\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, nodeOwner.defaultValue);\n                            }\n                            break;\n                        case KeyFrameValueType.Vector4:\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = nodeOwner.defaultValue);\n                            } else {\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, nodeOwner.defaultValue);\n                            }\n                            break;\n                        case KeyFrameValueType.Color:\n                            var proPat: string[] = nodeOwner.property!;\n                            var m: number = proPat.length - 1;\n                            for (var j: number = 0; j < m; j++) {\n                                pro = pro[proPat[j]];\n                                if (!pro)//属性可能或被置空\n                                    break;\n                            }\n                            value = proPat[m];\n                            let tempColor = Animator._tempColor;\n                            tempColor.r = nodeOwner.defaultValue.x;\n                            tempColor.g = nodeOwner.defaultValue.y;\n                            tempColor.b = nodeOwner.defaultValue.z;\n                            tempColor.a = nodeOwner.defaultValue.w;\n                            if (!nodeOwner.isMaterial) {\n                                pro && (pro[value] = tempColor);\n                            } else {\n                                pro && pro.getColor(value) && (pro as Material).setColor(value, tempColor);\n                            }\n                            break;\n                        default:\n                            throw \"Animator:unknown type.\";\n                    }\n\n                }\n            }\n        }\n    }\n\n    /** @internal */\n    onAfterDeserialize(): void {\n        let arr = (<any>this).controllerLayers;\n        if (!arr || null != this.controller)\n            return;\n        delete (<any>this).controllerLayers;\n        this._controllerLayers.length = 0;\n        for (let layer of arr) {\n            this.addControllerLayer(layer);\n        }\n    }\n\n    protected _onEnable(): void {\n        for (let i = 0, n = this._controllerLayers.length; i < n; i++) {\n            if (this._controllerLayers[i].playOnWake) {\n                let defaultClip: AnimatorState = this.getDefaultState(i);\n                (defaultClip) && (this.play(null, i, 0));\n            }\n        }\n    }\n\n    protected _onDestroy() {\n        for (let i = 0, n = this._controllerLayers.length; i < n; i++)\n            this._controllerLayers[i]._removeReference();\n    }\n\n    private _applyUpdateMode(delta: number): number {\n        let ret;\n        switch (this._updateMode) {\n            case AnimatorUpdateMode.Normal:\n                ret = delta;\n                break;\n            case AnimatorUpdateMode.LowFrame:\n                ret = (Stat.loopCount % this._lowUpdateDelty == 0) ? delta * this._lowUpdateDelty : 0;\n                break;\n            case AnimatorUpdateMode.UnScaleTime:\n                ret = 0;\n                break;\n        }\n        return ret;\n    }\n\n    /**\n     * @internal\n     */\n    _handleSpriteOwnersBySprite(isLink: boolean, path: string[], sprite: Sprite3D): void {\n        for (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\n            if (!this._controllerLayers[i].enable)\n                continue;\n            var clipStateInfos: AnimatorState[] = this._controllerLayers[i]._states;\n            for (var j: number = 0, m: number = clipStateInfos.length; j < m; j++) {\n                var clipStateInfo: AnimatorState = clipStateInfos[j];\n                var clip: AnimationClip = clipStateInfo._clip!;\n                var nodePath: string = path.join(\"/\");\n                var ownersNodes: KeyframeNode[] = clip._nodesMap[nodePath];\n                if (ownersNodes) {\n                    var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\n                    for (var k: number = 0, p: number = ownersNodes.length; k < p; k++) {\n                        if (isLink)\n                            this._addKeyframeNodeOwner(nodeOwners, ownersNodes[k], sprite);\n                        else\n                            this._removeKeyframeNodeOwner(nodeOwners, ownersNodes[k]);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _parse(data: any): void {\n        var play: any = data.playOnWake;\n        var layersData: any[] = data.layers;\n        for (var i: number = 0; i < layersData.length; i++) {\n            var layerData: any = layersData[i];\n            var animatorLayer: AnimatorControllerLayer = new AnimatorControllerLayer(layerData.name);\n            if (i === 0)\n                animatorLayer.defaultWeight = 1.0;//TODO:\n            else\n                animatorLayer.defaultWeight = layerData.weight;\n\n            var blendingModeData: any = layerData.blendingMode;\n            (blendingModeData) && (animatorLayer.blendingMode = blendingModeData);\n            this.addControllerLayer(animatorLayer);\n            var states: any[] = layerData.states;\n            for (var j: number = 0, m: number = states.length; j < m; j++) {\n                var state: any = states[j];\n                var clipPath: string = state.clipPath;\n                if (clipPath) {\n                    var name: string = state.name;\n                    var motion: AnimationClip;\n                    motion = Loader.getRes(clipPath);\n                    if (motion) {//加载失败motion为空\n                        var animatorState: AnimatorState = new AnimatorState();\n                        animatorState.name = name;\n                        animatorState.clip = motion;\n                        state.speed && (animatorState.speed = state.speed);\n                        animatorLayer.addState(animatorState);\n                        (j === 0) && (this.getControllerLayer(i).defaultState = animatorState);\n                    }\n                }\n            }\n            (play !== undefined) && (animatorLayer.playOnWake = play);\n            //avatarMask\n            let layerMaskData = layerData.avatarMask;\n            if (layerMaskData) {\n                let avaMask = new AvatarMask();\n                animatorLayer.avatarMask = avaMask;\n                for (var bips in layerMaskData) {\n                    avaMask.setTransformActive(bips, layerMaskData[bips]);\n                }\n            }\n        }\n        var cullingModeData: any = data.cullingMode;\n        (cullingModeData !== undefined) && (this.cullingMode = cullingModeData);\n    }\n\n    /**\n     * @internal\n     */\n    onUpdate(): void {\n        let timer = this.owner._scene.timer;\n        let delta = timer._delta / 1000.0;//Laya.timer.delta已结包含Laya.timer.scale\n        delta = this._applyUpdateMode(delta);\n        if (this._speed === 0 || delta === 0)//delta为0无需更新,可能造成crossWeight计算值为NaN\n            return;\n        var needRender = true;//TODO:有渲染节点才可将needRender变为true\n        var i, n;\n        this._updateMark++;\n        for (i = 0, n = this._controllerLayers.length; i < n; i++) {\n            var controllerLayer: AnimatorControllerLayer = this._controllerLayers[i];\n            if (!controllerLayer.enable)\n                continue;\n            var playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo!;\n            var crossPlayStateInfo: AnimatorPlayState = controllerLayer._crossPlayStateInfo!;\n            addtive = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\n            switch (controllerLayer._playType) {\n                case 0:\n                    var animatorState: AnimatorState = playStateInfo._currentState!;\n                    var clip: AnimationClip = animatorState._clip!;\n                    var speed: number = this._speed * animatorState.speed;\n                    var finish: boolean = playStateInfo._finish;//提前取出finish,防止最后一帧跳过\n                    finish || this._updatePlayer(animatorState, playStateInfo, delta * speed, clip.islooping, i);\n                    if (needRender) {\n                        var addtive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\n                        this._updateClipDatas(animatorState, addtive, playStateInfo, controllerLayer.avatarMask);//clipDatas为逐动画文件,防止两个使用同一动画文件的Animator数据错乱,即使动画停止也要updateClipDatas\n                        this._setClipDatasToNode(animatorState, addtive, controllerLayer.defaultWeight, i === 0, controllerLayer);//多层动画混合时即使动画停止也要设置数据\n                        finish || this._updateEventScript(animatorState, playStateInfo);\n                    }\n                    finish || this._updateStateFinish(animatorState, playStateInfo);\n                    break;\n                case 1:\n                    animatorState = playStateInfo._currentState!;\n                    clip = animatorState._clip!;\n                    var crossState: AnimatorState = controllerLayer._crossPlayState;\n                    var crossClip: AnimationClip = crossState._clip!;\n                    var crossDuratuion: number = controllerLayer._crossDuration;\n                    var startPlayTime: number = crossPlayStateInfo._startPlayTime;\n                    var crossClipDuration: number = crossClip._duration - startPlayTime;\n                    var crossScale: number = crossDuratuion > crossClipDuration ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\n                    var crossSpeed: number = this._speed * crossState.speed;\n                    this._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossClip.islooping, i);\n                    var crossWeight: number = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\n                    var needUpdateFinishcurrentState = false;\n                    if (crossWeight >= 1.0) {\n                        if (needRender) {\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\n                            this._setClipDatasToNode(crossState, addtive, controllerLayer.defaultWeight, i === 0, controllerLayer);\n\n                            controllerLayer._playType = 0;//完成融合,切换到正常播放状态\n                            playStateInfo._currentState = crossState;\n                            crossPlayStateInfo._cloneTo(playStateInfo);\n                        }\n                    } else {\n                        if (!playStateInfo._finish) {\n                            speed = this._speed * animatorState.speed;\n                            needUpdateFinishcurrentState = true;\n                            this._updatePlayer(animatorState, playStateInfo, delta * speed, clip.islooping, i);\n                            if (needRender)\n                                this._updateClipDatas(animatorState, addtive, playStateInfo, controllerLayer.avatarMask);\n                        }\n                        if (needRender) {\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\n                            this._setCrossClipDatasToNode(controllerLayer, animatorState, crossState, crossWeight, i === 0);\n                        }\n                    }\n                    if (needRender) {\n                        this._updateEventScript(animatorState, playStateInfo);\n                        this._updateEventScript(crossState, crossPlayStateInfo);\n                    }\n                    this._updateStateFinish(crossState, crossPlayStateInfo);\n                    needUpdateFinishcurrentState && this._updateStateFinish(playStateInfo._currentState, playStateInfo);\n                    break;\n                case 2:\n                    crossState = controllerLayer._crossPlayState;\n                    crossClip = crossState._clip!;\n                    crossDuratuion = controllerLayer._crossDuration;\n                    startPlayTime = crossPlayStateInfo._startPlayTime;\n                    crossClipDuration = crossClip._duration - startPlayTime;\n                    crossScale = crossDuratuion > crossClipDuration ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\n                    crossSpeed = this._speed * crossState.speed;\n                    this._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossClip.islooping, i);\n                    if (needRender) {\n                        crossWeight = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\n                        if (crossWeight >= 1.0) {\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\n                            this._setClipDatasToNode(crossState, addtive, 1.0, i === 0, controllerLayer);\n                            controllerLayer._playType = 0;//完成融合,切换到正常播放状态\n                            playStateInfo._currentState = crossState;\n                            crossPlayStateInfo._cloneTo(playStateInfo);\n                        } else {\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\n                            this._setFixedCrossClipDatasToNode(controllerLayer, crossState, crossWeight, i === 0);\n                        }\n                        this._updateEventScript(crossState, crossPlayStateInfo);\n                    }\n                    this._updateStateFinish(crossState, crossPlayStateInfo);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @internal\n     * @override\n     */\n    _cloneTo(dest: Component): void {\n        var animator: Animator = (<Animator>dest);\n        animator.cullingMode = this.cullingMode;\n\n        for (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\n            var controllLayer: AnimatorControllerLayer = this._controllerLayers[i];\n            animator.addControllerLayer(controllLayer.clone());\n            var animatorStates: AnimatorState[] = controllLayer._states;\n            for (var j: number = 0, m: number = animatorStates.length; j < m; j++) {\n                var state: AnimatorState = animatorStates[j].clone();\n                var cloneLayer: AnimatorControllerLayer = animator.getControllerLayer(i);\n                cloneLayer.addState(state);\n                (j == 0) && (cloneLayer.defaultState = state);\n            }\n        }\n    }\n\n    /**\n     * 获取默认动画状态。\n     * @param\tlayerIndex 层索引。\n     * @return 默认动画状态。\n     */\n    getDefaultState(layerIndex: number = 0): AnimatorState {\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\n        return controllerLayer.defaultState;\n    }\n\n    /**\n     * 添加动画状态。\n     * @param\tstate 动画状态。\n     * @param   layerIndex 层索引。\n     */\n    addState(state: AnimatorState, layerIndex: number = 0): void {\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\n        controllerLayer.addState(state);\n        console.warn(\"Animator:this function is discard,please use animatorControllerLayer.addState() instead.\");\n    }\n\n    /**\n     * 移除动画状态。\n     * @param\tstate 动画状态。\n     * @param   layerIndex 层索引。\n     */\n    removeState(state: AnimatorState, layerIndex: number = 0): void {\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\n        controllerLayer.removeState(state);\n        console.warn(\"Animator:this function is discard,please use animatorControllerLayer.removeState() instead.\");\n    }\n\n    /**\n     * 添加控制器层。\n     */\n    addControllerLayer(controllderLayer: AnimatorControllerLayer): void {\n        this._controllerLayers.push(controllderLayer);\n        controllderLayer._animator = this;//TODO:可以复用,不应该这么设计\n        controllderLayer._addReference();\n        var states: AnimatorState[] = controllderLayer._states;\n        for (var i: number = 0, n: number = states.length; i < n; i++)\n            this._getOwnersByClip(states[i]);\n    }\n\n    /**\n     * 获取控制器层。\n     */\n    getControllerLayer(layerInex: number = 0): AnimatorControllerLayer {\n        return this._controllerLayers[layerInex];\n    }\n\n    /**\n     * 播放动画。\n     * @param\tname 如果为null则播放默认动画，否则按名字播放动画片段。\n     * @param\tlayerIndex 层索引。\n     * @param\tnormalizedTime 归一化的播放起始时间。\n     */\n    play(name: string | null = null, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\n        if (controllerLayer) {\n            var defaultState: AnimatorState = controllerLayer.defaultState;\n            if (!name && !defaultState)\n                throw new Error(\"Animator:must have default clip value,please set clip property.\");\n            var playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo!;\n            var curPlayState: AnimatorState = playStateInfo._currentState!;\n\n\n            var animatorState: AnimatorState = name ? controllerLayer.getAnimatorState(name) : defaultState;\n            if (!animatorState._clip)\n                return;\n\n            var clipDuration: number = animatorState._clip!._duration;\n            var calclipduration = animatorState._clip!._duration * (animatorState.clipEnd - animatorState.clipStart);\n            if (curPlayState !== animatorState) {\n                if (normalizedTime !== Number.NEGATIVE_INFINITY)\n                    playStateInfo._resetPlayState(clipDuration * normalizedTime, calclipduration);\n                else\n                    playStateInfo._resetPlayState(0.0, calclipduration);\n                (curPlayState !== null && curPlayState !== animatorState) && (this._revertDefaultKeyframeNodes(curPlayState));\n                controllerLayer._playType = 0;\n                playStateInfo._currentState = animatorState;\n            } else {\n                if (normalizedTime !== Number.NEGATIVE_INFINITY) {\n                    playStateInfo._resetPlayState(clipDuration * normalizedTime, calclipduration);\n                    controllerLayer._playType = 0;\n                }\n            }\n            var scripts: AnimatorStateScript[] = animatorState._scripts!;\n            animatorState._eventStart();\n\n        }\n        else {\n            console.warn(\"Invalid layerIndex \" + layerIndex + \".\");\n        }\n        if (this.owner._scene) {\n            this.onUpdate();\n        }\n    }\n\n    /**\n     * 在当前动画状态和目标动画状态之间进行融合过渡播放。\n     * @param\tname 目标动画状态。\n     * @param\ttransitionDuration 过渡时间,该值为当前动画状态的归一化时间，值在0.0~1.0之间。\n     * @param\tlayerIndex 层索引。\n     * @param\tnormalizedTime 归一化的播放起始时间。\n     */\n    crossFade(name: string, transitionDuration: number, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\n        var controllerLayer = this._controllerLayers[layerIndex];\n        if (controllerLayer) {\n            var destAnimatorState = controllerLayer.getAnimatorState(name);\n            if (destAnimatorState) {\n                var playType = controllerLayer._playType;\n                if (playType === -1) {//如果未曾调用过play则回滚到play方法\n                    this.play(name, layerIndex, normalizedTime);\n                    return;\n                }\n\n                var crossPlayStateInfo = controllerLayer._crossPlayStateInfo;\n                var crossNodeOwners = controllerLayer._crossNodesOwners;\n                var crossNodeOwnerIndicesMap = controllerLayer._crossNodesOwnersIndicesMap;\n\n                var srcAnimatorState = controllerLayer._playStateInfo!._currentState;\n                var destNodeOwners = destAnimatorState._nodeOwners;\n                var destCrossClipNodeIndices = controllerLayer._destCrossClipNodeIndices;\n                var destClip = destAnimatorState._clip;\n                var destNodes = destClip._nodes!;\n                var destNodesMap = destClip._nodesDic;\n                var crossCount = 0;\n                switch (playType) {\n                    case 0:\n                        var srcNodeOwners = srcAnimatorState!._nodeOwners;\n                        var scrCrossClipNodeIndices = controllerLayer._srcCrossClipNodeIndices;\n                        var srcClip = srcAnimatorState!._clip;\n                        var srcNodes = srcClip!._nodes!;\n                        var srcNodesMap = srcClip!._nodesDic;\n                        controllerLayer._playType = 1;\n\n                        var crossMark = ++controllerLayer._crossMark;\n                        crossCount = controllerLayer._crossNodesOwnersCount = 0;\n\n                        for (var i = 0, n = srcNodes.count; i < n; i++) {\n                            var srcNode = srcNodes.getNodeByIndex(i);\n                            var srcIndex = srcNode._indexInList;\n                            var srcNodeOwner = srcNodeOwners[srcIndex];\n                            if (srcNodeOwner) {\n                                var srcFullPath = srcNode.fullPath;\n                                scrCrossClipNodeIndices[crossCount] = srcIndex;\n                                var destNode = destNodesMap[srcFullPath];\n                                if (destNode)\n                                    destCrossClipNodeIndices[crossCount] = destNode._indexInList;\n                                else\n                                    destCrossClipNodeIndices[crossCount] = -1;\n\n                                crossNodeOwnerIndicesMap[srcFullPath] = crossMark;\n                                crossNodeOwners[crossCount] = srcNodeOwner;\n                                crossCount++;\n                            }\n                        }\n\n                        for (i = 0, n = destNodes.count; i < n; i++) {\n                            destNode = destNodes.getNodeByIndex(i);\n                            var destIndex = destNode._indexInList;\n                            var destNodeOwner = destNodeOwners[destIndex];\n                            if (destNodeOwner) {\n                                var destFullPath = destNode.fullPath;\n                                if (!srcNodesMap[destFullPath]) {\n                                    scrCrossClipNodeIndices[crossCount] = -1;\n                                    destCrossClipNodeIndices[crossCount] = destIndex;\n\n                                    crossNodeOwnerIndicesMap[destFullPath] = crossMark;\n                                    crossNodeOwners[crossCount] = destNodeOwner;\n                                    crossCount++;\n                                }\n                            }\n                        }\n                        break;\n                    case 1:\n                    case 2:\n                        controllerLayer._playType = 2;\n                        for (i = 0, n = crossNodeOwners.length; i < n; i++) {\n                            var nodeOwner = crossNodeOwners[i];\n                            nodeOwner.saveCrossFixedValue();\n                            destNode = destNodesMap[nodeOwner.fullPath!];\n                            if (destNode)\n                                destCrossClipNodeIndices[i] = destNode._indexInList;\n                            else\n                                destCrossClipNodeIndices[i] = -1;\n                        }\n\n                        crossCount = controllerLayer._crossNodesOwnersCount;\n                        crossMark = controllerLayer._crossMark;\n                        for (i = 0, n = destNodes.count; i < n; i++) {\n                            destNode = destNodes.getNodeByIndex(i);\n                            destIndex = destNode._indexInList;\n                            destNodeOwner = destNodeOwners[destIndex];\n                            if (destNodeOwner) {\n                                destFullPath = destNode.fullPath;\n                                if (crossNodeOwnerIndicesMap[destFullPath] !== crossMark) {\n                                    destCrossClipNodeIndices[crossCount] = destIndex;\n\n                                    crossNodeOwnerIndicesMap[destFullPath] = crossMark;\n                                    nodeOwner = destNodeOwners[destIndex];\n                                    crossNodeOwners[crossCount] = nodeOwner;\n                                    nodeOwner.saveCrossFixedValue();\n                                    crossCount++;\n                                }\n                            }\n                        }\n                        break;\n                    default:\n                }\n                controllerLayer._crossNodesOwnersCount = crossCount;\n                controllerLayer._crossPlayState = destAnimatorState;\n                controllerLayer._crossDuration = srcAnimatorState!._clip!._duration * transitionDuration;\n                if (normalizedTime !== Number.NEGATIVE_INFINITY)\n                    crossPlayStateInfo!._resetPlayState(destClip._duration * normalizedTime, controllerLayer._crossDuration);\n                else\n                    crossPlayStateInfo!._resetPlayState(0.0, controllerLayer._crossDuration);\n                destAnimatorState._eventStart();\n            }\n            else {\n                console.warn(\"Invalid name \" + layerIndex + \".\");\n            }\n        }\n        else {\n            console.warn(\"Invalid layerIndex \" + layerIndex + \".\");\n        }\n    }\n\n    /**\n     * set params value\n     * @param name \n     */\n    setParamsTrigger(name: number): void;\n    setParamsTrigger(name: string): void;\n    setParamsTrigger(name: string | number) {\n        let id;\n        if (typeof name == \"number\")\n            id = name;\n        else\n            id = AnimatorStateCondition.conditionNameToID(name);\n        this._animatorParams[id] = true;\n    }\n\n    /**\n     * set params value\n     * @param name \n     */\n    setParamsNumber(name: number, value: number): void;\n    setParamsNumber(name: string, value: number): void;\n    setParamsNumber(name: string | number, value: number) {\n        let id;\n        if (typeof name == \"number\")\n            id = name;\n        else\n            id = AnimatorStateCondition.conditionNameToID(name);\n        this._animatorParams[id] = value;\n    }\n\n    /**\n     * set params value\n     * @param name \n     */\n    setParamsBool(name: number, value: boolean): void;\n    setParamsBool(name: string, value: boolean): void;\n    setParamsBool(name: string | number, value: boolean) {\n        let id;\n        if (typeof name == \"number\")\n            id = name;\n        else\n            id = AnimatorStateCondition.conditionNameToID(name);\n        this._animatorParams[id] = value;\n    }\n\n    /**\n     * get params value\n     * @param name \n     */\n    getParamsvalue(name: number): number | boolean;\n    getParamsvalue(name: string): number | boolean;\n    getParamsvalue(name: string | number): number | boolean {\n        let id;\n        if (typeof name == \"number\")\n            id = name;\n        else\n            id = AnimatorStateCondition.conditionNameToID(name);\n        return this._animatorParams[id];\n    }\n\n\n    /**\n     * @deprecated 请使用animator.getControllerLayer(layerIndex).getCurrentPlayState()替换。use animator.getControllerLayer(layerIndex).getCurrentPlayState() instead\n     * 获取当前的播放状态。\n     * @param   layerIndex 层索引。\n     * @return  动画播放状态。\n     */\n    getCurrentAnimatorPlayState(layerInex: number = 0): AnimatorPlayState {\n        return this._controllerLayers[layerInex]._playStateInfo!;\n    }\n}\n\n\n","import { Camera } from \"../Camera\"\nimport { CommandBuffer } from \"./command/CommandBuffer\"\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\n\n/**\n * * <code>PostProcessRenderContext</code> 类用于创建后期处理渲染上下文。\n */\nexport class PostProcessRenderContext {\n\t/** origan RenderTexture 原始渲染RT,禁止改变此RT*/\n\tsource: RenderTexture | null = null;\n\t/** forward effect target 上个后期处理的结果*/\n\tindirectTarget:RenderTexture|null = null;\n\t/** dest RenderTexture 需要将处理后的结果画入此RT*/\n\tdestination: RenderTexture | null = null;\n\t/** 渲染相机。*/\n\tcamera: Camera | null = null;\n\t/** 合成着色器数据。*/\n\tcompositeShaderData: ShaderData | null = null;\n\t/** 后期处理指令流。*/\n\tcommand: CommandBuffer | null = null;\n\t/** 临时纹理数组。可以将创建的纹理放入此,也可以从这里选取要用的RT来节省显存*/\n\tdeferredReleaseTextures: RenderTexture[] = [];\n\n\t/**\n\t * 从回收的RT中选择一个RT 用来节省内存\n\t */\n\tcreateRTByContextReleaseTexture(width: number, height: number, colorFormat: RenderTargetFormat, depthFormat: RenderTargetFormat, mipmap: boolean = false, multiSamples: number = 1, depthTexture: boolean = false, sRGB: boolean = false){\n\t\tlet n =this.deferredReleaseTextures.length\n\t\tfor (let index = 0; index <n ; index++) {\n            let rt = this.deferredReleaseTextures[index];\n            if (rt.width == width && rt.height == height && rt.colorFormat == colorFormat && rt.depthStencilFormat == depthFormat && rt._generateMipmap == mipmap && rt.multiSamples == multiSamples && rt.generateDepthTexture == depthTexture && rt._gammaSpace == sRGB) {\n                rt._inPool = false;\n                let end = this.deferredReleaseTextures[n - 1];\n                this.deferredReleaseTextures[index] = end;\n                this.deferredReleaseTextures.length -= 1;\n                return rt;\n            }\n        }\n\t\treturn null;\n\t}\n\n}\n\n\n","import { PostProcess } from \"../../component/PostProcess\";\nimport { PostProcessRenderContext } from \"./PostProcessRenderContext\";\n/**\n\t * <code>PostProcessEffect</code> 类用于创建后期处理渲染效果。\n\t */\nexport class PostProcessEffect {\n\n\t/**@internal */\n\tprotected _active:boolean;\n\t/**@internal */\n\tprotected _singleton:boolean;\n\n\t/**\n\t * 创建一个 <code>PostProcessEffect</code> 实例。\n\t */\n\tconstructor() {\n\t\tthis._active = true;\n\t\tthis._singleton = true;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tset singleton(value:boolean){\n\t\tthis._singleton = value;\n\t}\n\n\tget singleton(){\n\t\treturn this._singleton;\n\t}\n\n\t/**\n\t * 是否开启\n\t */\n\tget active(){\n\t\treturn this._active;\n\t}\n\n\tset active(value:boolean){\n\t\tthis._active = value;\n\t}\n\n\t/**\n\t * 根据后期处理设置cameraDepthTextureMode\n\t * @inheritDoc\n\t * @override\n\t * @returns \n\t */\n\tgetCameraDepthTextureModeFlag() {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * 添加到后期处理栈时,会调用\n\t * @inheritDoc\n\t * @override\n\t */\n\teffectInit(postprocess:PostProcess) {\n\t\treturn;\n\t}\n\n\t/**\n\t * 释放Effect\n\t * @inheritDoc\n\t * @override\n\t */\n\trelease(postprocess:PostProcess){\n\t\t\n\t}\n\n\t/**\n\t * 渲染\n\t * @internal\n\t */\n\trender(context: PostProcessRenderContext): void {\n\n\t}\n}\n\n\n","#define SHADER_NAME BlitVS\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    gl_Position = vec4(u_OffsetScale.x * 2.0 - 1.0 + (a_PositionTexcoord.x + 1.0) * u_OffsetScale.z, (1.0 - ((u_OffsetScale.y * 2.0 - 1.0 + (-a_PositionTexcoord.y + 1.0) * u_OffsetScale.w) + 1.0) / 2.0) * 2.0 - 1.0, 0.0, 1.0);\n\n    v_Texcoord0 = a_PositionTexcoord.zw;\n}","#define SHADER_NAME BlitLUTFS\n\n#include \"Color.glsl\";\n\n#include \"ColorGrading.glsl\";\n#include \"LUT.glsl\";\n\nuniform sampler2D u_Lut;\nuniform vec4 u_LutParams;//w postExposure\n\n    #ifdef CUSTOMLUT\nuniform sampler2D u_CustomLut;\nuniform vec4 u_CustomLutParams;\n    #endif // CUSTOMLUT\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\n    vec3 color = gl_FragColor.rgb;\n    // gl_FragColor.rgb = applyLut(color, 1.0, u_Lut, u_LutParams);\n    color *= u_LutParams.w;\n    color = applyLut(u_Lut, linearToLogC(color), u_LutParams.xyz);\n\n    #ifdef CUSTOMLUT\n\n    float contrib = u_CustomLutParams.w;\n    vec3 gamma = linearToGamma(color);\n    vec3 userLut = applyLut(u_CustomLut, gamma, u_CustomLutParams);\n    gamma = mix(gamma, userLut, contrib);\n    color = gammaToLinear(gamma);\n\n    #endif // CUSTOMLUT\n\n    gl_FragColor.rgb = color;\n\n    #ifdef GAMMAOUT\n        gl_FragColor = linearToGamma(gl_FragColor);\n    #endif\n}\n","import { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { WrapMode } from \"../../../../RenderEngine/RenderEnum/WrapMode\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\nimport { Material } from \"../../material/Material\";\nimport { CommandBuffer } from \"../command/CommandBuffer\";\nimport { PostProcessEffect } from \"../PostProcessEffect\";\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\nimport BlitVS from \"../../../../d3/shader/postprocess/BlitScreen.vs\";\nimport BlitLUTShader from \"../../../../d3/shader/postprocess/BlitLUTScreen.fs\";\nimport { RenderState } from \"../../../../RenderEngine/RenderShader/RenderState\";\nimport { Texture2D } from \"../../../../resource/Texture2D\";\nimport { RenderContext3D } from \"../RenderContext3D\";\nimport { Color } from \"../../../../maths/Color\";\nimport { PostProcess } from \"../../../component/PostProcess\";\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\n\nexport enum ToneMappingType {\n\tNone,\n\tACES\n}\n\n/**\n * <code>ColorGradEffect</code> 类用于创建调色Effect\n */\nexport class ColorGradEffect extends PostProcessEffect {\n\tstatic SHADERDEFINE_ACES: ShaderDefine;\n\tstatic SHADERDEFINE_CUSTOMLUT: ShaderDefine;\n\n\tstatic SHADERVALUE_LUT: number;\n\tstatic SHADERVALUE_LUTPARAMS: number;\n\tstatic SHADERVALUE_CUSTOMLUT: number;\n\tstatic SHADERVALUE_CUSTOMLUTPARAMS: number;\n\n\t/**\n\t * bloom resource init\n\t */\n\tstatic init() {\n\t\tColorGradEffect.__initDefine__();\n\t\tlet attributeMap: { [name: string]: [number, ShaderDataType] } = {\n\t\t\t\"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n\t\t};\n\n\t\tlet uniformMap = {\n\t\t\t\"u_OffsetScale\": ShaderDataType.Vector4,\n\t\t\t\"u_MainTex\": ShaderDataType.Texture2D,\n\t\t\t\"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\n\t\t};\n\t\tlet shader = Shader3D.add(\"blitLUTShader\");\n\t\tlet subShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tlet pass = subShader.addShaderPass(BlitVS, BlitLUTShader);\n\t\tpass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\tpass.renderState.depthWrite = false;\n\t\tpass.renderState.cull = RenderState.CULL_NONE;\n\t\tpass.renderState.blend = RenderState.BLEND_DISABLE;\n\t}\n\n\tstatic __initDefine__() {\n\t\tColorGradEffect.SHADERDEFINE_ACES = Shader3D.getDefineByName(\"ACES\");\n\t\tColorGradEffect.SHADERDEFINE_CUSTOMLUT = Shader3D.getDefineByName(\"CUSTOMLUT\");\n\n\n\t\tColorGradEffect.SHADERVALUE_LUT = Shader3D.propertyNameToID(\"u_Lut\");\n\t\tColorGradEffect.SHADERVALUE_LUTPARAMS = Shader3D.propertyNameToID(\"u_LutParams\");\n\t\tColorGradEffect.SHADERVALUE_CUSTOMLUT = Shader3D.propertyNameToID(\"u_CustomLut\");\n\t\tColorGradEffect.SHADERVALUE_CUSTOMLUTPARAMS = Shader3D.propertyNameToID(\"u_CustomLutParams\");\n\t}\n\n\tprivate _needBuildLUT: boolean = false;\n\n\tprivate _lutCommond: CommandBuffer;\n\t_lutTex: RenderTexture;\n\tprivate _lutBuilderMat = new Material();\n\n\n\tprivate _LUTShader: Shader3D;\n\tprivate _lutShaderData: ShaderData;\n\tprivate _blitlutParams: Vector4;\n\n\t/**color Tone */\n\t/**@internal */\n\tprivate _toneMapping: ToneMappingType;\n\t/**@internal lut height size */\n\tprivate _lutSize = 32;\n\n\t// split toning\n\t/**@internal */\n\tprivate _enableSplitTone: boolean = false;\n\tprivate _splitShadow: Vector3 = new Vector3(0.5, 0.5, 0.5);\n\tprivate _splitBalance: number = 0;//-1-1\n\tprivate _splithighlights: Vector3 = new Vector3(0.5, 0.5, 0.5);\n\tprivate _u_SplitShadow: Vector4 = new Vector4(0,0,0);\n\n\t// shadows, midtones, highlights\n\tprivate _enableSMH: boolean = false;\n\t/**@internal */\n\tprivate _shadows: Vector3 = new Vector3(1, 1, 1);//0-5\n\t/**@internal */\n\tprivate _midtones: Vector3 = new Vector3(1, 1, 1);//0-5\n\t/**@internal */\n\tprivate _highlights: Vector3 = new Vector3(1, 1, 1);//0-5\n\t/**@internal */\n\tprivate _limits: Vector4 = new Vector4(0, 0.33, 0.55, 1);\n\n\t//lift gamma gain\n\tprivate _enableLiftGammaGain: boolean = false;\n\t/**@internal */\n\tprivate _lift: Vector3 = new Vector3(0, 0, 0);//-1-1\n\t/**@internal */\n\tprivate _gamma: Vector3 = new Vector3(1, 1, 1);//999-0.5\n\t/**@internal */\n\tprivate _gain: Vector3 = new Vector3(1, 1, 1);//0-2\n\n\t//white balance\n\tprivate _enableBalance: boolean = false;\n\t/**@internal tint,temperature */\n\tprivate _balance: Vector3 = new Vector3();\n\tprivate _tint: number = 0;//-100-100\n\tprivate _temperature: number = 0;//-100-1\n\n\t//Color Adjustments\n\t/**@internal */\n\tprivate _enableColorAdjust: boolean = false;\n\t/**@internal */\n\tprivate _postExposure = 1;//自动曝光,默认值是1\n\t/**@internal */\n\tprivate _contrast = 1;//range 0-2//对比度HueSatCon.z\n\t/**@internal */\n\tprivate _colorFilter = new Color(1, 1, 1);//正片叠底\n\t/**@internal */\n\tprivate _HueShift = 0;//-0.5-0.5 色相HueSatCon.x\n\t\n\t/**@internal */\n\tprivate _saturation = 1;//0-2饱和度HueSatCon.y\n\t\n\t/**@internal _HueShift,_saturation,_contrast*/\n\tprivate _HueSatCon: Vector4 = new Vector4(0, 1, 1, 0);\n\n\t/**\n\t * Tone Map色彩空间\n\t */\n\tpublic get toneMapping(): ToneMappingType {\n\t\treturn this._toneMapping;\n\t}\n\n\tpublic set toneMapping(value: ToneMappingType) {\n\t\tif (value == this._toneMapping)\n\t\t\treturn\n\t\tthis._needBuildLUT = true;\n\t\tthis._toneMapping = value;\n\t}\n\n\t// split toning\n\t/**\n\t * 是否开启Split Tone\n\t */\n\tpublic get enableSplitTone() {\n\t\treturn this._enableSplitTone;\n\t}\n\n\tpublic set enableSplitTone(value: boolean) {\n\t\tthis._enableSplitTone = value;\n\t\tthis._needBuildLUT = true;\n\t}\n\n\t/**\n\t * split shadow\n\t */\n\tpublic get splitShadow(): Vector3 {\n\t\treturn this._splitShadow;\n\t}\n\n\tpublic set splitShadow(value: Vector3) {\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._splitShadow);\n\t}\n\n\t/**\n\t * split hightLight\n\t */\n\tpublic get splithighlights(): Vector3 {\n\t\treturn this._splithighlights;\n\t}\n\tpublic set splithighlights(value: Vector3) {\n\t\tif (this._splithighlights.equal(value))\n\t\t\treturn;\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._splithighlights);\n\t}\n\n\t/**\n\t * split balance\n\t */\n\tpublic get splitBalance(): number {\n\t\treturn this._splitBalance;\n\t}\n\n\tpublic set splitBalance(value: number) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._splitBalance = value;\n\t}\n\n\t// shadows, midtones, highlights\n\tpublic get enableSMH(): boolean {\n\t\treturn this._enableSMH;\n\t}\n\n\tpublic set enableSMH(value: boolean) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._enableSMH = value;\n\t}\n\n\t/**\n\t * shadows 0-5\n\t */\n\tpublic get shadows(): Vector3 {\n\t\treturn this._shadows;\n\t}\n\n\tpublic set shadows(value: Vector3) {\n\t\tif (this._shadows.equal(value))\n\t\t\treturn;\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._shadows);\n\t}\n\n\t/**\n\t * midtones 0-5\n\t */\n\tpublic get midtones(): Vector3 {\n\t\treturn this._midtones;\n\t}\n\tpublic set midtones(value: Vector3) {\n\t\tif (this._midtones.equal(value))\n\t\t\treturn;\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._midtones);\n\t}\n\n\t/**\n\t * highlights 0-5\n\t */\n\tpublic get highlights(): Vector3 {\n\t\treturn this._highlights;\n\t}\n\tpublic set highlights(value: Vector3) {\n\t\tif (this._highlights.equal(value))\n\t\t\treturn;\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._highlights);\n\t}\n\n\t/**\n\t * shadow limit start 0-1\n\t */\n\tpublic get shadowLimitStart(): number {\n\t\treturn this._limits.x;\n\t}\n\n\tpublic set shadowLimitStart(value: number) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._limits.x = Math.min(value, this.shadowLimitEnd);\n\t}\n\n\t/**\n\t * shadow limit end 0-1\n\t */\n\tpublic get shadowLimitEnd(): number {\n\t\treturn this._limits.y;\n\t}\n\n\tpublic set shadowLimitEnd(value: number) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._limits.y = Math.max(value, this.shadowLimitStart);\n\t}\n\n\n\t/**\n\t * high Light limit start 0-1\n\t */\n\tpublic get highLightLimitStart(): number {\n\t\treturn this._limits.z;\n\t}\n\n\tpublic set highLightLimitStart(value: number) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._limits.z = Math.min(value, this.highLightLimitEnd);\n\t}\n\n\t/**\n\t * high Light limit end 0-1\n\t */\n\tpublic get highLightLimitEnd(): number {\n\t\treturn this._limits.w;\n\t}\n\n\tpublic set highLightLimitEnd(value: number) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._limits.w = Math.max(this.highLightLimitStart, value);\n\t}\n\n\n\t//lift gamma gain\n\tpublic get enableLiftGammaGain() {\n\t\treturn this._enableLiftGammaGain;\n\t}\n\n\tpublic set enableLiftGammaGain(value: boolean) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._enableLiftGammaGain = value;\n\t}\n\n\t/**\n\t * lift -1-1\n\t */\n\tpublic get lift(): Vector3 {\n\t\treturn this._lift;\n\t}\n\n\tpublic set lift(value: Vector3) {\n\t\tif (this.lift.equal(value))\n\t\t\treturn;\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._lift);\n\t}\n\n\n\t/**\n\t * gamma 999-0.5\n\t */\n\tpublic get gamma(): Vector3 {\n\t\treturn this._gamma;\n\t}\n\n\tpublic set gamma(value: Vector3) {\n\t\tif (this._gamma.equal(value))\n\t\t\treturn;\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._gamma);\n\t}\n\n\t/**\n\t * gain 0-2\n\t */\n\tpublic get gain(): Vector3 {\n\t\treturn this._gain;\n\t}\n\n\tpublic set gain(value: Vector3) {\n\t\tif (this._gain.equal(value))\n\t\t\treturn;\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._gain);\n\t}\n\n\tprivate _StandardIlluminantY(x: number) {\n\t\treturn 2.87 * x - 3 * x * x - 0.27509507;\n\t};\n\n\tprivate _CIExyToLMS(x: number, y: number) {\n\t\tlet Y = 1;\n\t\tlet X = Y * x / y;\n\t\tlet Z = Y * (1 - x - y) / y;\n\n\t\tlet L = 0.7328 * X + 0.4296 * Y - 0.1624 * Z;\n\t\tlet M = -0.7036 * X + 1.6975 * Y + 0.0061 * Z;\n\t\tlet S = 0.0030 * X + 0.0136 * Y + 0.9834 * Z;\n\n\t\treturn new Vector3(L, M, S);\n\t}\n\n\t// Converts white balancing parameter to LMS coefficients.\n\tprivate _ColorBalanceToLMSCoeffs(temperature: number, tint: number) {\n\n\t\t// Range ~[-1.5;1.5] works best\n\t\tlet t1 = temperature / 65.0;\n\t\tlet t2 = tint / 65.0;\n\n\t\t// Get the CIE xy chromaticity of the reference white point.\n\t\t// Note: 0.31271 = x value on the D65 white point\n\t\tlet x = 0.31271 - t1 * (t1 < 0 ? 0.1 : 0.05);\n\t\tlet y = this._StandardIlluminantY(x) + t2 * 0.05;\n\n\t\t// Calculate the coefficients in the LMS space.\n\t\tlet w1 = new Vector3(0.949237, 1.03542, 1.08728);\n\t\tlet w2 = this._CIExyToLMS(x, y);\n\n\t\tthis._balance.set(w1.x / w2.x, w1.y / w2.y, w1.z / w2.z);\n\t}\n\n\t//balance\n\tpublic get enableBalance() {\n\t\treturn this._enableBalance;\n\t}\n\n\tpublic set enableBalance(value: boolean) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._enableBalance = value;\n\t}\n\n\t/**\n\t * tint -100 - 100\n\t */\n\tpublic get tint(): number {\n\t\treturn this._tint;\n\t}\n\n\n\tpublic set tint(value: number) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._tint = value;\n\t\tthis._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\n\t}\n\n\t/**\n\t * temperature -100-100\n\t */\n\tpublic get temperature(): number {\n\t\treturn this._temperature;\n\t}\n\n\tpublic set temperature(value: number) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._temperature = value;\n\t\tthis._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\n\t}\n\n\t//Color Adjustments\n\tpublic get enableColorAdjust() {\n\t\treturn this._enableColorAdjust;\n\t}\n\n\tpublic set enableColorAdjust(value: boolean) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._enableColorAdjust = value;\n\t}\n\n\t/**\n\t * 曝光\n\t */\n\tpublic get postExposure() {\n\t\treturn this._postExposure;\n\t}\n\n\tpublic set postExposure(value) {\n\t\tthis._postExposure = value;\n\t}\n\n\t/**\n\t * contrast颜色对比度range 0-2\n\t */\n\tpublic get contrast() {\n\t\treturn this._contrast;\n\t}\n\n\tpublic set contrast(value) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._contrast = value;\n\t}\n\n\t/**\n\t * 正片叠底\n\t */\n\tpublic get colorFilter() {\n\t\treturn this._colorFilter;\n\t}\n\n\tpublic set colorFilter(value:Color) {\n\t\tthis._needBuildLUT = true;\n\t\tvalue.cloneTo(this._colorFilter);\n\t}\n\n\t/**色相 -0.5-0.5*/\n\tpublic get HueShift() {\n\t\treturn this._HueShift;\n\t}\n\tpublic set HueShift(value) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._HueShift = value;\n\t}\n\n\t/**\n\t * 饱和度\n\t */\n\tpublic get saturation() {\n\t\treturn this._saturation;\n\t}\n\tpublic set saturation(value) {\n\t\tthis._needBuildLUT = true;\n\t\tthis._saturation = value;\n\t}\n\n\n\n\t/**\n\t * 创建一个 <code>BloomEffect</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.singleton = true;\n\t\tthis.active = true;\n\t\tthis._needBuildLUT = true;\n\t\tthis._toneMapping = ToneMappingType.None;\n\t\tthis._blitlutParams = new Vector4();\n\t\tthis._lutShaderData = LayaGL.renderOBJCreate.createShaderData(null);\n\t\tthis.lutSize = 32;\n\t\tthis._lutCommond = new CommandBuffer();\n\t\tthis._lutBuilderMat = new Material();\n\t}\n\n\n\n\tprivate get lutSize() {\n\t\treturn this._lutSize;\n\t}\n\tprivate set lutSize(value) {\n\t\tif (value > 32)//64*6 = 4096\n\t\t\treturn\n\t\tthis._lutSize = value;\n\t\tif (this._lutTex)\n\t\t\tthis._lutTex.destroy();\n\t\tthis._lutTex = new RenderTexture(this._lutSize * this._lutSize, this._lutSize, RenderTargetFormat.R16G16B16A16, null, false, 1, false, false);\n\t\tthis._lutTex.anisoLevel = 1;\n\t\tthis._lutTex.wrapModeU = WrapMode.Clamp;\n\t\tthis._lutTex.wrapModeV = WrapMode.Clamp;\n\t\tthis._lutTex.filterMode = FilterMode.Bilinear;\n\t}\n\n\n\n\tprivate default_balance = new Vector3(1,1,1);\n\tprivate default_splitShadow = new Vector4(0.5,0.5,0.5,0.0);\n\tprivate default_splithighlights = new Vector3(0.5,0.5,0.5);\n\tprivate default_shadow = new Vector3(1,1,1);\n\tprivate default_midtones = new Vector3(1,1,1);\n\tprivate default_highlight = new Vector3(1,1,1);\n\tprivate default_limint = new Vector4(0.0,0.3,0.55,1.0);\n\tprivate default_lift = new Vector3(0,0,0);\n\tprivate default_gamma = new Vector3(1,1,1);\n\tprivate default_gain = new Vector3(1,1,1);\n\tprivate default_ColorFilter = new Color(1,1,1,1);\n\tprivate default_HueSatCon = new Vector4(0,1,1,0);\n\t/**\n\t * @internal\n\t * 生成LUT纹理\n\t */\n\t_buildLUT() {\n\t\tif (!this._needBuildLUT)\n\t\t\treturn;\n\t\tlet lutHeight = this.lutSize;\n\t\tlet lutWidth = this.lutSize * this.lutSize;\n\t\tlet lutParams = new Vector4(lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeight / (lutHeight - 1));\n\t\tthis._lutBuilderMat.setVector4(\"u_LutParams\", lutParams);\n\t\t\n\t\tif(this.enableBalance){\n\t\t\tthis._ColorBalanceToLMSCoeffs(this.temperature,this.tint);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_ColorBalance\", this._balance);\n\t\t}else{\n\t\t\tthis._lutBuilderMat.setVector3(\"u_ColorBalance\", this.default_balance);\n\t\t}\n\n\t\tif(this.enableSplitTone){\n\t\t\tthis._u_SplitShadow.setValue(this._splitShadow.x,this._splitShadow.y,this._splitShadow.z,this.splitBalance);\n\t\t\tthis._lutBuilderMat.setVector4(\"u_SplitShadows\", this._u_SplitShadow);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Splithighlights\", this._splithighlights);\n\t\t}else{\n\t\t\tthis._lutBuilderMat.setVector4(\"u_SplitShadows\", this.default_splitShadow);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Splithighlights\", this.default_splithighlights);\n\t\t}\n\n\t\tif(this.enableSMH){\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Shadows\", this._shadows);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Midtones\", this._midtones);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Highlights\", this._highlights);\n\t\t\tthis._lutBuilderMat.setVector4(\"u_Limits\", this._limits);\n\t\t}else{\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Shadows\", this.default_shadow);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Midtones\", this.default_midtones);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Highlights\", this.default_highlight);\n\t\t\tthis._lutBuilderMat.setVector4(\"u_Limits\", this.default_limint);\n\t\t}\n\t\tif(this._enableLiftGammaGain){\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Lift\", this._lift);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gamma\", this._gamma);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gain\", this._gain);\n\t\t}else{\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Lift\", this.default_lift);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gamma\", this.default_gamma);\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gain\", this.default_gain);\n\t\t}\n\t\tif(this.enableColorAdjust){\n\t\t\t//_HueShift,_saturation,_contrast\n\t\t\tthis._HueSatCon.setValue(this._HueShift,this.saturation,this._contrast,0.0);\n\t\t\tthis._lutBuilderMat.setColor(\"u_ColorFilter\",this._colorFilter);\n\t\t\tthis._lutBuilderMat.setVector4(\"u_HueSatCon\",this._HueSatCon);\n\t\t}else{\n\t\t\tthis._lutBuilderMat.setColor(\"u_ColorFilter\",this.default_ColorFilter);\n\t\t\tthis._lutBuilderMat.setVector4(\"u_HueSatCon\",this.default_HueSatCon);\n\t\t}\n\n\t\t\n\t\t\n\t\tif (this._toneMapping == ToneMappingType.ACES) {\n\t\t\tthis._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_ACES);\n\t\t} else {\n\t\t\tthis._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_ACES);\n\t\t}\n\t\tthis._lutCommond.blitScreenQuadByMaterial(Texture2D.whiteTexture, this._lutTex, null, this._lutBuilderMat);\n\t\tthis._lutCommond.context = RenderContext3D._instance;\n\t\tthis._lutCommond._apply();\n\t\tthis._lutCommond.clear();\n\t}\n\n\t/**\n\t * 添加到后期处理栈时,会调用\n\t */\n\teffectInit(postprocess:PostProcess) {\n\t\tsuper.effectInit(postprocess);\n\t\tthis._lutBuilderMat.setShaderName(\"LUTBuilder\");\n\t\tthis._LUTShader = Shader3D.find(\"blitLUTShader\");\n\t\tpostprocess._enableColorGrad = true;\n\t\tpostprocess._ColorGradEffect = this;\n\t\t// this._shader = Shader3D.find(\"PostProcessBloom\");\n\t\t// this._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\n\t}\n\n\t/**\n\t * 释放Effect\n\t */\n\trelease(postprocess:PostProcess) {\n\t\tsuper.release(postprocess);\n\t\tpostprocess._enableColorGrad = false;\n\t\tpostprocess._ColorGradEffect = null;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\trender(context: PostProcessRenderContext): void {\n\t\tlet cmd: CommandBuffer = context.command;\n\t\tlet source: RenderTexture = context.indirectTarget;\n\t\tif (true) {\n\t\t\tthis._blitlutParams.setValue(1 / this._lutTex.width, 1 / this._lutTex.height, this._lutTex.height - 1,this.enableColorAdjust?this._postExposure:1);\n\t\t\tthis._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\n\t\t\tthis._lutShaderData.setTexture(ColorGradEffect.SHADERVALUE_LUT, this._lutTex);\n\t\t\tthis._lutShaderData.setVector(ColorGradEffect.SHADERVALUE_LUTPARAMS, this._blitlutParams);\n\t\t}\n\t\telse {\n\t\t\t//TODO:CustomLUT\n\t\t\tthis._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\n\n\t\t}\n\t\tcmd.blitScreenTriangle(source, context.destination, null, this._LUTShader, this._lutShaderData);\n\t}\n\n}\n\n\n\n\n","import { ILaya } from \"../../../ILaya\"\nimport { Texture2D } from \"../../resource/Texture2D\"\nimport { Camera } from \"../core/Camera\"\nimport { CommandBuffer } from \"../core/render/command/CommandBuffer\"\nimport { PostProcessEffect } from \"../core/render/PostProcessEffect\"\nimport { PostProcessRenderContext } from \"../core/render/PostProcessRenderContext\"\nimport { Viewport } from \"../math/Viewport\"\nimport { RenderContext3D } from \"../core/render/RenderContext3D\"\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\"\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\"\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\"\nimport { LayaGL } from \"../../layagl/LayaGL\"\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\"\nimport { DepthTextureMode } from \"../depthMap/DepthPass\"\nimport { RenderTexture } from \"../../resource/RenderTexture\"\nimport { ColorGradEffect } from \"../core/render/PostEffect/ColorGradEffect\"\n\n/**\n * <code>PostProcess</code> 类用于创建后期处理组件。\n */\nexport class PostProcess {\n\n    /**@internal */\n    static SHADERDEFINE_BLOOM_LOW: ShaderDefine;\n\n    /**@internal */\n    static SHADERDEFINE_BLOOM: ShaderDefine;\n\n    /**@internal */\n    static SHADERDEFINE_FINALPASS: ShaderDefine;\n\n    /**@internal */\n    static SHADERVALUE_MAINTEX: number;\n\n    /**@internal */\n    static SHADERVALUE_BLOOMTEX: number;\n\n    /**@internal */\n    static SHADERVALUE_AUTOEXPOSURETEX: number;\n\n    /**@internal */\n    static SHADERVALUE_BLOOM_DIRTTEX: number;\n\n    /**@internal */\n    static SHADERVALUE_BLOOMTEX_TEXELSIZE: number;\n\n    /**@internal */\n    static SHADERVALUE_BLOOM_DIRTTILEOFFSET: number;\n\n    /**@internal */\n    static SHADERVALUE_BLOOM_SETTINGS: number;\n\n    /**@internal */\n    static SHADERVALUE_BLOOM_COLOR: number;\n\n    /**\n     * @internal\n     */\n    static __init__(): void {\n        PostProcess.SHADERDEFINE_BLOOM_LOW = Shader3D.getDefineByName(\"BLOOM_LOW\");\n        PostProcess.SHADERDEFINE_BLOOM = Shader3D.getDefineByName(\"BLOOM\");\n        PostProcess.SHADERDEFINE_FINALPASS = Shader3D.getDefineByName(\"FINALPASS\");\n        PostProcess.SHADERVALUE_MAINTEX = Shader3D.propertyNameToID(\"u_MainTex\");\n        PostProcess.SHADERVALUE_BLOOMTEX = Shader3D.propertyNameToID(\"u_BloomTex\");\n        PostProcess.SHADERVALUE_AUTOEXPOSURETEX = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\n        PostProcess.SHADERVALUE_BLOOM_DIRTTEX = Shader3D.propertyNameToID(\"u_Bloom_DirtTex\");\n        PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE = Shader3D.propertyNameToID(\"u_BloomTex_TexelSize\");\n        PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET = Shader3D.propertyNameToID(\"u_Bloom_DirtTileOffset\");\n        PostProcess.SHADERVALUE_BLOOM_SETTINGS = Shader3D.propertyNameToID(\"u_Bloom_Settings\");\n        PostProcess.SHADERVALUE_BLOOM_COLOR = Shader3D.propertyNameToID(\"u_Bloom_Color\");\n    }\n\n    /**@internal */\n    private _compositeShader: Shader3D = Shader3D.find(\"PostProcessComposite\");\n\n    /**@internal */\n    private _compositeShaderData: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\n\n    /**@internal */\n    private _effects: PostProcessEffect[] = [];\n\n    /**@internal */\n    private _enable: boolean = true;\n\n    /**@internal */\n    private _depthtextureFlag: DepthTextureMode;\n    /**@internal 调色Effect*/\n    _ColorGradEffect: ColorGradEffect;\n    /**@internal 是否开启调色Effect*/\n    _enableColorGrad: boolean = false;\n\n    /**@internal */\n    _context: PostProcessRenderContext | null = null;\n\n    /**\n     * 重新计算CameraFlag\n     */\n    private recaculateCameraFlag() {\n        this._depthtextureFlag = DepthTextureMode.None;\n        let n = this.effects.length;\n        for (let i = 0; i < n; i++) {\n            this._depthtextureFlag |= this.effects[i].getCameraDepthTextureModeFlag();\n        }\n    }\n\n    /**\n     * 创建一个 <code>PostProcess</code> 实例。\n     */\n    constructor() {\n        this._context = new PostProcessRenderContext();\n        this._context.compositeShaderData = this._compositeShaderData;\n        this._context.command = new CommandBuffer();\n        this._depthtextureFlag = 0;\n    }\n\n    /**\n     * 开启属性\n     */\n    get enable(): boolean {\n        return this._enable;\n    }\n\n    set enable(value: boolean) {\n        this._enable = value;\n    }\n\n    /**\n     * 设置渲染状态\n     * @internal\n     */\n    set commandContext(oriContext: RenderContext3D) {\n        this._context.command._context = oriContext;\n    }\n\n    /**\n     * IDEmain\n     * 设置后期Effect数组\n     */\n    set effects(value: PostProcessEffect[]) {\n        this.clearEffect();\n        for (var i = 0, n = value.length; i < n; i++) {\n            if (value[i])\n                this.addEffect(value[i]);\n        }\n    }\n\n    get effects(): PostProcessEffect[] {\n        return this._effects;\n    }\n\n    /**\n     * 根据后期处理的需要,设置值\n     */\n    get cameraDepthTextureMode() {\n        return this._depthtextureFlag;\n    }\n\n    /**\n     *@internal\n     */\n    _init(camera: Camera): void {\n        this._context!.camera = camera;\n        this._context!.command!._camera = camera;\n    }\n\n    /**\n     * @internal\n     */\n    _render(camera: Camera): void {\n        this._init(camera);\n        var camera = this._context!.camera;\n        var viewport: Viewport = camera!.viewport;\n        var cameraTarget: RenderTexture = camera!._internalRenderTexture;\n        var screenTexture: RenderTexture = RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true);\n        var Indirect: RenderTexture[] = [RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true), RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true)];\n        //var screenTexture: RenderTexture = cameraTarget;\n        this._context!.command!.clear();\n        this._context!.source = screenTexture;\n        this._context!.indirectTarget = screenTexture;\n        this._context!.destination = this._effects.length == 2 ? Indirect[0] : cameraTarget;\n        this._context!.compositeShaderData!.clearDefine();\n\n        this._context.command.blitScreenTriangle(cameraTarget, screenTexture);\n\n        this._context!.compositeShaderData!.setTexture(PostProcess.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);//TODO:\n        if (this._enableColorGrad) {\n            this._ColorGradEffect._buildLUT();\n        }\n        for (var i: number = 0, n: number = this._effects.length; i < n; i++) {\n            if (this._effects[i].active) {\n                this._effects[i].render(this._context!);\n                if (i == n - 2) {//last effect:destination RenderTexture is CameraTarget\n                    this._context.indirectTarget = this._context.destination;\n                    this._context.destination = cameraTarget;\n                } else {\n                    this._context.indirectTarget = this._context.destination;\n                    this._context.destination = Indirect[(i + 1) % 2];\n                }\n            } else if (i == n - 1) {//兼容最后一个Effect Active为false\n                this._context.command.blitScreenTriangle(this._context.indirectTarget, cameraTarget);\n            }\n        }\n\n        this._compositeShaderData.addDefine(PostProcess.SHADERDEFINE_FINALPASS);\n\n        var offScreenTex: RenderTexture = camera!._offScreenRenderTexture;\n        var dest = offScreenTex ? offScreenTex : null;//TODO:如果不画到RenderTarget上,最后一次为null直接画到屏幕上\n        this._context!.destination = dest;\n        var canvasWidth: number = camera!._getCanvasWidth(), canvasHeight: number = camera!._getCanvasHeight();\n        if (dest) {\n            camera!._screenOffsetScale.setValue(viewport.x / canvasWidth, (canvasHeight - viewport.y - viewport.height) / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\n            this._context!.command!.blitScreenTriangle(cameraTarget, dest, camera!._screenOffsetScale, null, this._compositeShaderData, 0);\n        }\n\n        //释放临时纹理\n        RenderTexture.recoverToPool(screenTexture);\n        RenderTexture.recoverToPool(Indirect[0]);\n        RenderTexture.recoverToPool(Indirect[1]);\n        var tempRenderTextures: RenderTexture[] = this._context!.deferredReleaseTextures;\n        for (i = 0, n = tempRenderTextures.length; i < n; i++)\n            RenderTexture.recoverToPool(tempRenderTextures[i]);\n        tempRenderTextures.length = 0;\n    }\n\n    /**\n     * 添加后期处理效果。\n     */\n    addEffect(effect: PostProcessEffect): void {\n        if (effect.singleton && this.getEffect((effect as any).constructor)) {\n            console.error(\"无法增加已经存在的Effect\");\n            return;\n        }\n        if (!this._enableColorGrad || effect instanceof ColorGradEffect) {\n            this._effects.push(effect);\n        } else {\n            this._effects.splice(this._effects.length - 1, 0, effect);\n        }\n\n        this.recaculateCameraFlag();\n        effect.effectInit(this);\n    }\n\n    /**\n     * 根据类型获得后期处理实例\n     * @param classReg \n     * @returns \n     */\n    getEffect(classReg: any): any {\n        let size: number = this._effects.length;\n        for (let i = 0; i < size; i++) {\n            let element = this._effects[i];\n            if (element instanceof classReg) {\n                return element;\n            }\n        }\n        return null\n    }\n\n    /**\n     * 移除后期处理效果。\n     */\n    removeEffect(effect: PostProcessEffect): void {\n        var index: number = this._effects.indexOf(effect);\n        if (index !== -1) {\n            this._effects.splice(index, 1);\n            effect.release(this);\n            this.recaculateCameraFlag();\n        }\n    }\n\n    /**\n     * 清理所有后期处理\n     */\n    clearEffect(): void {\n        let i = this.effects.length - 1;\n        for (; i >= 0; i--) {\n            this.removeEffect(this.effects[i]);\n        }\n    }\n\n    /**\n     * 调用指令集\n     * @internal\n     */\n    _applyPostProcessCommandBuffers(): void {\n        this._context!.command!._apply();\n    }\n}\n\n\n","#define SHADER_NAME BloomVS\nvarying vec2 v_Texcoord0;\nvec4 remapPositionZ(vec4 position)\n{\n    position.z = position.z * 2.0 - position.w;\n    return position;\n}\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapPositionZ(gl_Position);\n}","#define SHADER_NAME BloomDownSample13FS\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid fragDownsample13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = color;\n}\n\nvoid main() {\n\tfragDownsample13();\n}","#define SHADER_NAME BloomDownSample4FS\n\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid fragDownsample4() {\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = color;\n}\n\nvoid main() {\n\tfragDownsample4();\n}","#define SHADER_NAME BloomPreFilter13FS\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter13();\n}","#define SHADER_NAME BloomPreFilter4FS\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter4() {\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter4();\n}","#define SHADER_NAME BloomUpSampleBoxFS\n\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\n\treturn bloom + color;\n}\n\nvoid fragUpsampleBox() {\n\tmediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n\tgl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main() {\n\tfragUpsampleBox();\n}","#define SHADER_NAME BloomUpSampleTentFS\n\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\n\treturn bloom + color;\n}\n\nvoid fragUpsampleTent() {\n\tmediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n\tgl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main() {\n\tfragUpsampleTent();\n}","#define SHADER_NAME CompositeFS\n\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, v_Texcoord0).r;\n\tmediump vec4 color=vec4(0.0);\n\tcolor = texture2D(u_MainTex, v_Texcoord0);\n\t\n\t//color = sRGBToLinear(color);\n\tcolor.rgb *= autoExposure;\n\t\n\t#if defined(BLOOM)||defined(BLOOM_LOW)\n\t\t#ifdef BLOOM\n\t\t\tmediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\n\t\t#else\n\t\t\tmediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\n\t\t#endif\n\n\t\t// UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\n\t\t// but considering we use a cover-style scale on the dirt texture the difference\n\t\t// isn't massive so we chose to save a few ALUs here instead in case lens distortion\n\t\t// is active\n\t\tmediump vec4 dirt =vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\n\n\t\t// Additive bloom (artist friendly)\n\t\tbloom *= u_Bloom_Settings.y;\n\t\tdirt *= u_Bloom_Settings.z;\n\t\tmediump vec4 bloomColor=vec4(u_Bloom_Color, 1.0);\n\t\tcolor += bloom * bloomColor;\n\t\tcolor += dirt * bloom;\n\t#endif\n\t\n\tmediump vec4 finalColor = color;\n\t//finalColor = linearToSRGB(finalColor);\n\t//finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\n\tgl_FragColor = finalColor;\n}","#define SHADER_NAME CompositeVS\nvarying vec2 v_Texcoord0;\nvec4 remapPositionZ(vec4 position)\n{\n    position.z = position.z * 2.0 - position.w;\n    return position;\n}\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapPositionZ(gl_Position);\n}","// Better, temporally stable box filtering\n// [Jimenez14] http://goo.gl/eomGso\n// . . . . . . .\n// . A . B . C .\n// . . D . E . .\n// . F . G . H .\n// . . I . J . .\n// . K . L . M .\n// . . . . . . .\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    mediump vec4 A = texture2D(tex, uv + texelSize * vec2(-1.0, -1.0));\n    mediump vec4 B = texture2D(tex, uv + texelSize * vec2( 0.0, -1.0));\n    mediump vec4 C = texture2D(tex, uv + texelSize * vec2( 1.0, -1.0));\n    mediump vec4 D = texture2D(tex, uv + texelSize * vec2(-0.5, -0.5));\n    mediump vec4 E = texture2D(tex, uv + texelSize * vec2( 0.5, -0.5));\n    mediump vec4 F = texture2D(tex, uv + texelSize * vec2(-1.0,  0.0));\n    mediump vec4 G = texture2D(tex, uv);\n    mediump vec4 H = texture2D(tex, uv + texelSize * vec2( 1.0,  0.0));\n    mediump vec4 I = texture2D(tex, uv + texelSize * vec2(-0.5,  0.5));\n    mediump vec4 J = texture2D(tex, uv + texelSize * vec2( 0.5,  0.5));\n    mediump vec4 K = texture2D(tex, uv + texelSize * vec2(-1.0,  1.0));\n    mediump vec4 L = texture2D(tex, uv + texelSize * vec2( 0.0,  1.0));\n    mediump vec4 M = texture2D(tex, uv + texelSize * vec2( 1.0,  1.0));\n\n\tmediump vec2 scale= vec2(0.5, 0.125);\n    mediump vec2 div = (1.0 / 4.0) * scale;\n\n    mediump vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n\n    return o;\n}\n\n// Standard box filtering\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.xw);\n    s += texture2D(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}\n\n// 9-tap bilinear upsampler (tent filter)\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\n// . 2 . 4 . 2 .\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\n\n    mediump vec4 s =  texture2D(tex, uv - d.xy);\n    s += texture2D(tex, uv - d.wy) * 2.0;\n    s += texture2D(tex, uv - d.zy);\n\n    s += texture2D(tex, uv + d.zw) * 2.0;\n    s += texture2D(tex, uv) * 4.0;\n    s += texture2D(tex,\tuv + d.xw) * 2.0;\n\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.wy) * 2.0;\n    s += texture2D(tex, uv + d.xy);\n\n    return s * (1.0 / 16.0);\n}\n\n// Standard box filtering\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\n\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.xw);\n    s += texture2D(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}","#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\n\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nmediump vec4 safeHDR(mediump vec4 c)\n{\n    return min(c, HALF_MAX);\n}\n\nfloat max3(float a, float b, float c)\n{\n    return max(max(a, b), c);\n}\n\nvec3 positivePow(vec3 base, vec3 power)\n{\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\n}","#include \"StdLib.glsl\";\n\n#define EPSILON 1.0e-4\n\n// Quadratic color thresholding\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\n\t// Pixel brightness\n\tmediump float br = max3(color.r, color.g, color.b);\n\n\t// Under-threshold part: quadratic curve\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\n\trq = curve.z * rq * rq;\n\n\t// Combine and apply the brightness response curve.\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\n\n\treturn color;\n}\n\n\n\n//\n// sRGB transfer functions\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\n//\n// mediump vec3 sRGBToLinear(mediump vec3 c) {\n// \t#ifdef USE_VERY_FAST_SRGB\n// \t\treturn c * c;\n// \t#elif defined(USE_FAST_SRGB)\n// \t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\n// \t#else\n// \t\tmediump vec3 linearRGBLo = c / 12.92;\n// \t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\n// \t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\n// \t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\n// \t\treturn linearRGB;\n// \t#endif\n// }\n\n// mediump vec4 sRGBToLinear(mediump vec4 c){\n//     return vec4(sRGBToLinear(c.rgb), c.a);\n// }\n\n\n\n// mediump vec3 linearToSRGB(mediump vec3 c) {\n// \t#ifdef USE_VERY_FAST_SRGB\n// \t\treturn sqrt(c);\n// \t#elif defined(USE_FAST_SRGB)\n// \t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\n// \t#else\n// \t\tmediump vec3 sRGBLo = c * 12.92;\n// \t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\n// \t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\n// \t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\n// \t\treturn sRGB;\n// \t#endif\n// }\n\n// mediump vec4 linearToSRGB(mediump vec4 c){\n//     return vec4(linearToSRGB(c.rgb), c.a);\n// }","\nimport BloomVS from \"../../../shader/files/postProcess/Bloom/Bloom.vs\";\nimport BloomDownsample13PS from \"../../../shader/files/postProcess/Bloom/BloomDownsample13.fs\";\nimport BloomDownsample4PS from \"../../../shader/files/postProcess/Bloom/BloomDownsample4.fs\";\nimport BloomPrefilter13PS from \"../../../shader/files/postProcess/Bloom/BloomPrefilter13.fs\";\nimport BloomPrefilter4PS from \"../../../shader/files/postProcess/Bloom/BloomPrefilter4.fs\";\nimport BloomUpsampleBoxPS from \"../../../shader/files/postProcess/Bloom/BloomUpsampleBox.fs\";\nimport BloomUpsampleTentPS from \"../../../shader/files/postProcess/Bloom/BloomUpsampleTent.fs\";\nimport CompositePS from \"../../../shader/files/postProcess/Bloom/Composite.fs\";\nimport CompositeVS from \"../../../shader/files/postProcess/Bloom/Composite.vs\";\nimport SamplingGLSL from \"../../../shader/files/postProcess/Sampling.glsl\";\nimport StdLibGLSL from \"../../../shader/files/postProcess/StdLib.glsl\";\nimport ColorsGLSL from \"../../../shader/files/postProcess/Colors.glsl\";\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType, ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { Texture2D } from \"../../../../resource/Texture2D\";\nimport { PostProcess } from \"../../../component/PostProcess\";\nimport { Viewport } from \"../../../math/Viewport\";\nimport { CommandBuffer } from \"../command/CommandBuffer\";\nimport { PostProcessEffect } from \"../PostProcessEffect\";\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\nimport { Color } from \"../../../../maths/Color\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\nimport { RenderState } from \"../../../../RenderEngine/RenderShader/RenderState\";\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\n\n/**\n * <code>BloomEffect</code> 类用于创建泛光效果。\n */\nexport class BloomEffect extends PostProcessEffect {\n\t/** @internal */\n\tstatic SHADERVALUE_MAINTEX: number;\n\t/**@internal */\n\tstatic SHADERVALUE_AUTOEXPOSURETEX: number;\n\t/**@internal */\n\tstatic SHADERVALUE_SAMPLESCALE: number;\n\t/**@internal */\n\tstatic SHADERVALUE_THRESHOLD: number;\n\t/**@internal */\n\tstatic SHADERVALUE_PARAMS: number;\n\t/**@internal */\n\tstatic SHADERVALUE_BLOOMTEX: number;\n\n\t/**@internal */\n\tstatic SUBSHADER_PREFILTER13: number = 0;\n\t/**@internal */\n\tstatic SUBSHADER_PREFILTER4: number = 1;\n\t/**@internal */\n\tstatic SUBSHADER_DOWNSAMPLE13: number = 2;\n\t/**@internal */\n\tstatic SUBSHADER_DOWNSAMPLE4: number = 3;\n\t/**@internal */\n\tstatic SUBSHADER_UPSAMPLETENT: number = 4;\n\t/**@internal */\n\tstatic SUBSHADER_UPSAMPLEBOX: number = 5;\n\n\t/**@internal */\n\tprivate static MAXPYRAMIDSIZE: number = 16; // Just to make sure we handle 64k screens... Future-proof!\n\n\t/**\n\t * bloom resource init\n\t */\n\tstatic init() {\n\t\tShader3D.addInclude(\"StdLib.glsl\", StdLibGLSL);\n\t\tShader3D.addInclude(\"Colors.glsl\", ColorsGLSL);\n\t\tShader3D.addInclude(\"Sampling.glsl\", SamplingGLSL);\n\t\tvar attributeMap: any = {\n\t\t\t'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n\t\t};\n\n\t\tvar uniformMap: any = {\n\t\t\t\"u_MainTex\": ShaderDataType.Texture2D,\n\t\t\t\"u_MainTex_TexelSize\": ShaderDataType.Vector4,\n\t\t\t\"u_AutoExposureTex\": ShaderDataType.Texture2D,\n\t\t\t\"u_Threshold\": ShaderDataType.Vector4,\n\t\t\t\"u_Params\": ShaderDataType.Vector4,\n\t\t\t\"u_BloomTex\": ShaderDataType.Texture2D,\n\t\t\t\"u_SampleScale\": ShaderDataType.Float,\n\t\t};\n\t\tvar shader = Shader3D.add(\"PostProcessBloom\");\n\t\t//subShader0\n\t\tvar subShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tvar shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter13PS);\n\t\tvar renderState: RenderState = shaderPass.renderState;\n\t\trenderState = shaderPass.renderState;\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\trenderState.depthWrite = false;\n\t\trenderState.cull = RenderState.CULL_NONE;\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\n\t\t//subShader1\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter4PS);\n\t\trenderState = shaderPass.renderState;\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\trenderState.depthWrite = false;\n\t\trenderState.cull = RenderState.CULL_NONE;\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\n\t\t//subShader2\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample13PS);\n\t\trenderState = shaderPass.renderState;\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\trenderState.depthWrite = false;\n\t\trenderState.cull = RenderState.CULL_NONE;\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\n\t\t//subShader3\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample4PS);\n\t\trenderState = shaderPass.renderState;\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\trenderState.depthWrite = false;\n\t\trenderState.cull = RenderState.CULL_NONE;\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\n\t\t//subShader4\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleTentPS);\n\t\trenderState = shaderPass.renderState;\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\trenderState.depthWrite = false;\n\t\trenderState.cull = RenderState.CULL_NONE;\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\n\t\t//subShader5\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleBoxPS);\n\t\trenderState = shaderPass.renderState;\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\trenderState.depthWrite = false;\n\t\trenderState.cull = RenderState.CULL_NONE;\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\n\t\tBloomEffect.CompositeInit();\n\t\tBloomEffect.__initDefine__();\n\t}\n\n\tstatic CompositeInit() {\n\t\t//PostProcessComposite\n\t\tlet attributeMap: any = {\n\t\t\t'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\n\t\t};\n\t\tlet uniformMap = {\n\t\t\t'u_MainTex': ShaderDataType.Texture2D,\n\t\t\t'u_BloomTex': ShaderDataType.Texture2D,\n\t\t\t'u_AutoExposureTex': ShaderDataType.Texture2D,\n\t\t\t'u_Bloom_DirtTex': ShaderDataType.Texture2D,\n\t\t\t'u_BloomTex_TexelSize': ShaderDataType.Vector4,\n\t\t\t'u_Bloom_DirtTileOffset': ShaderDataType.Vector4,\n\t\t\t'u_Bloom_Settings': ShaderDataType.Vector3,\n\t\t\t'u_Bloom_Color': ShaderDataType.Vector3,\n\t\t};\n\t\tlet shader = Shader3D.add(\"PostProcessComposite\");\n\n\t\tlet subShader = new SubShader(attributeMap, uniformMap);\n\t\tshader.addSubShader(subShader);\n\t\tlet shaderPass = subShader.addShaderPass(CompositeVS, CompositePS);\n\t\tlet renderState = shaderPass.renderState;\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\trenderState.depthWrite = false;\n\t\trenderState.cull = RenderState.CULL_NONE;\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\n\t}\n\n\tstatic __initDefine__() {\n\t\tBloomEffect.SHADERVALUE_MAINTEX = Shader3D.propertyNameToID(\"u_MainTex\");\n\t\tBloomEffect.SHADERVALUE_AUTOEXPOSURETEX = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\n\t\tBloomEffect.SHADERVALUE_SAMPLESCALE = Shader3D.propertyNameToID(\"u_SampleScale\");\n\t\tBloomEffect.SHADERVALUE_THRESHOLD = Shader3D.propertyNameToID(\"u_Threshold\");\n\t\tBloomEffect.SHADERVALUE_PARAMS = Shader3D.propertyNameToID(\"u_Params\");\n\t\tBloomEffect.SHADERVALUE_BLOOMTEX = Shader3D.propertyNameToID(\"u_BloomTex\");\n\t}\n\n\t/**@internal */\n\tprivate _shader: Shader3D = null;\n\t/**@internal */\n\tprivate _shaderData: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\n\t/**@internal */\n\tprivate _linearColor: Color = new Color();\n\t/**@internal */\n\tprivate _bloomTextureTexelSize: Vector4 = new Vector4();\n\n\t/**@internal */\n\tprivate _shaderThreshold: Vector4 = new Vector4();\n\t/**@internal */\n\tprivate _shaderParams: Vector4 = new Vector4();\n\t/**@internal */\n\tprivate _pyramid: any[] = null;\n\t/**@internal */\n\tprivate _intensity: number = 0.0;\n\t/**@internal */\n\tprivate _threshold: number = 1.0;\n\t/**@internal */\n\tprivate _softKnee: number = 0.5;\n\t/**@internal */\n\tprivate _diffusion: number = 7.0;\n\t/**@internal */\n\tprivate _anamorphicRatio: number = 0.0;\n\t/**@internal */\n\tprivate _dirtIntensity: number = 0.0;\n\t/**@internal */\n\tprivate _shaderSetting: Vector4 = new Vector4();\n\t/**@internal */\n\tprivate _dirtTileOffset: Vector4 = new Vector4();\n\n\t/**@internal*/\n\tprivate _clamp: number;\n\n\t/**泛光颜色。*/\n\tprivate _color: Color;\n\n\t/**是否开启快速模式。该模式通过降低质量来提升性能。*/\n\tprivate _fastMode: boolean = false;\n\n\t/**镜头污渍纹路,用于为泛光特效增加污渍灰尘效果*/\n\tprivate _dirtTexture: BaseTexture = null;\n\n\t/**\n\t * 泛光像素的数量,该值在伽马空间\n\t */\n\tget clamp(): number {\n\t\treturn this._clamp;\n\t}\n\n\tset clamp(value: number) {\n\t\tthis._clamp = value;\n\t}\n\n\t/**\n\t * 泛光颜色。\n\t */\n\tget color(): Color {\n\t\treturn this._color;\n\t}\n\n\tset color(value: Color) {\n\t\tthis._color = value;\n\t}\n\n\t/**\n\t * 快速模式\n\t */\n\tget fastMode(): boolean {\n\t\treturn this._fastMode;\n\t}\n\n\tset fastMode(value: boolean) {\n\t\tthis._fastMode = value;\n\t}\n\n\t/**\n\t * 脏迹贴图\n\t */\n\tget dirtTexture() {\n\t\treturn this._dirtTexture;\n\t}\n\n\tset dirtTexture(value: BaseTexture) {\n\t\tthis._dirtTexture && this._dirtTexture._removeReference(1);\n\t\tthis._dirtTexture = value;\n\t\tthis._dirtTexture && this._dirtTexture._addReference(1);\n\t}\n\n\t/**\n\t * 获取泛光过滤器强度,最小值为0。\n\t * @return 强度。\n\t */\n\tget intensity(): number {\n\t\treturn this._intensity;\n\t}\n\n\t/**\n\t * 设置泛光过滤器强度,最小值为0。\n\t * @param value 强度。\n\t */\n\tset intensity(value: number) {\n\t\tthis._intensity = Math.max(value, 0.0);\n\t}\n\n\t/**\n\t * 设置泛光阈值,在该阈值亮度以下的像素会被过滤掉,该值在伽马空间。\n\t * @return 阈值。\n\t */\n\tget threshold(): number {\n\t\treturn this._threshold;\n\t}\n\n\t/**\n\t * 获取泛光阈值,在该阈值亮度以下的像素会被过滤掉,该值在伽马空间。\n\t * @param value 阈值。\n\t */\n\tset threshold(value: number) {\n\t\tthis._threshold = Math.max(value, 0.0);\n\t}\n\n\t/**\n\t * 获取软膝盖过渡强度,在阈值以下进行渐变过渡(0为完全硬过度,1为完全软过度)。\n\t * @return 软膝盖值。\n\t */\n\tget softKnee(): number {\n\t\treturn this._softKnee;\n\t}\n\n\t/**\n\t * 设置软膝盖过渡强度,在阈值以下进行渐变过渡(0为完全硬过度,1为完全软过度)。\n\t * @param value 软膝盖值。\n\t */\n\tset softKnee(value: number) {\n\t\tthis._softKnee = Math.min(Math.max(value, 0.0), 1.0);\n\t}\n\n\t/**\n\t * 获取扩散值,改变泛光的扩散范围,最好使用整数值保证效果,该值会改变内部的迭代次数,范围是1到10。\n\t * @return 光晕的扩散范围。\n\t */\n\tget diffusion(): number {\n\t\treturn this._diffusion;\n\t}\n\n\t/**\n\t * 设置扩散值,改变泛光的扩散范围,最好使用整数值保证效果,该值会改变内部的迭代次数,范围是1到10。\n\t * @param value 光晕的扩散范围。\n\t */\n\tset diffusion(value: number) {\n\t\tthis._diffusion = Math.min(Math.max(value, 1), 10);\n\t}\n\n\t/**\n\t * 获取形变比,通过扭曲泛光产生视觉上形变,负值为垂直扭曲,正值为水平扭曲。-1 - 1\n\t * @return 形变比。\n\t */\n\tget anamorphicRatio(): number {\n\t\treturn this._anamorphicRatio;\n\t}\n\n\t/**\n\t * 设置形变比,通过扭曲泛光产生视觉上形变,负值为垂直扭曲,正值为水平扭曲。-1 - 1\n\t * @param value 形变比。\n\t */\n\tset anamorphicRatio(value: number) {\n\t\tthis._anamorphicRatio = Math.min(Math.max(value, -1.0), 1.0);\n\t}\n\n\t/**\n\t * 获取污渍强度。\n\t * @return 污渍强度。\n\t */\n\tget dirtIntensity(): number {\n\t\treturn this._dirtIntensity;\n\t}\n\n\t/**\n\t * 设置污渍强度。0-1\n\t * @param value 污渍强度。\n\t */\n\tset dirtIntensity(value: number) {\n\t\tthis._dirtIntensity = Math.max(value, 0.0);\n\t}\n\n\t/**\n\t * 创建一个 <code>BloomEffect</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.singleton = true;\n\t\tthis.active = true;\n\t\tthis.intensity = 1.0;\n\t\tthis.threshold = 1.0;\n\t\tthis.softKnee = 0.5;\n\t\tthis.clamp = 65472;\n\t\tthis.diffusion = 7;\n\t\tthis.anamorphicRatio = 0;\n\t\tthis.color = new Color(1.0,1.0,1.0,1.0);\n\n\t}\n\n\t/**\n\t * 添加到后期处理栈时,会调用\n\t */\n\teffectInit(postprocess:PostProcess) {\n\t\tsuper.effectInit(postprocess);\n\t\tthis._shader = Shader3D.find(\"PostProcessBloom\");\n\t\tthis._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\n\t}\n\n\t/**\n\t * 根据后期处理设置cameraDepthTextureMode\n\t * @inheritDoc\n\t * @override\n\t * @returns \n\t */\n\tgetCameraDepthTextureModeFlag() {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * 释放Effect\n\t */\n\trelease(postprocess:PostProcess) {\n\t\tsuper.release(postprocess);\n\t\tthis._shader = null;\n\t\tthis._pyramid = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @internal\n\t */\n\trender(context: PostProcessRenderContext): void {\n\t\tvar cmd: CommandBuffer = context.command;\n\t\tvar viewport: Viewport = context.camera.viewport;\n\n\t\t//应用自动曝光调整纹理\n\t\tthis._shaderData.setTexture(BloomEffect.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);\n\n\t\t//获取垂直扭曲和水平扭曲宽高\n\t\tvar ratio: number = this._anamorphicRatio;\n\t\tvar rw: number = ratio < 0 ? -ratio : 0;\n\t\tvar rh: number = ratio > 0 ? ratio : 0;\n\n\t\t//半分辨率模糊,性效比较高\n\t\tvar tw: number = Math.floor(viewport.width / (2 - rw));\n\t\tvar th: number = Math.floor(viewport.height / (2 - rh));\n\n\t\t//计算迭代次数\n\t\tvar s: number = Math.max(tw, th);\n\t\tvar logs: number;\n\t\tlogs = Math.log2(s) + this._diffusion - 10;\n\t\tvar logsInt: number = Math.floor(logs);\n\t\tvar iterations: number = Math.min(Math.max(logsInt, 1), BloomEffect.MAXPYRAMIDSIZE);\n\t\tvar sampleScale: number = 0.5 + logs - logsInt;\n\t\tthis._shaderData.setNumber(BloomEffect.SHADERVALUE_SAMPLESCALE, sampleScale);\n\n\t\t//预过滤参数\n\t\tvar lthresh: number = Color.gammaToLinearSpace(this.threshold);\n\t\tvar knee: number = lthresh * this._softKnee + 1e-5;\n\t\tthis._shaderThreshold.setValue(lthresh, lthresh - knee, knee * 2, 0.25 / knee);\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_THRESHOLD, this._shaderThreshold);\n\t\tvar lclamp: number = Color.gammaToLinearSpace(this.clamp);\n\n\t\tthis._shaderParams.setValue(lclamp, 0, 0, 0);\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_PARAMS, this._shaderParams);\n\n\t\tvar qualityOffset: number = this.fastMode ? 1 : 0;\n\n\t\t// Downsample\n\t\tvar lastDownTexture: RenderTexture = context.indirectTarget;\n\t\tfor (var i: number = 0; i < iterations; i++) {\n\t\t\tvar downIndex: number = i * 2;\n\t\t\tvar upIndex: number = downIndex + 1;\n\t\t\tvar subShader: number = i == 0 ? BloomEffect.SUBSHADER_PREFILTER13 + qualityOffset : BloomEffect.SUBSHADER_DOWNSAMPLE13 + qualityOffset;\n\n\t\t\tvar mipDownTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8, RenderTargetFormat.None, false, 1);\n\t\t\tmipDownTexture.filterMode = FilterMode.Bilinear;\n\t\t\tthis._pyramid[downIndex] = mipDownTexture;\n\n\t\t\tif (i !== iterations - 1) {\n\t\t\t\tvar mipUpTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8, RenderTargetFormat.None, false, 1);\n\t\t\t\tmipUpTexture.filterMode = FilterMode.Bilinear;\n\t\t\t\tthis._pyramid[upIndex] = mipUpTexture;\n\t\t\t}\n\n\t\t\tcmd.blitScreenTriangle(lastDownTexture, mipDownTexture, null, this._shader, this._shaderData, subShader);\n\n\t\t\tlastDownTexture = mipDownTexture;\n\t\t\ttw = Math.max(Math.floor(tw / 2), 1);\n\t\t\tth = Math.max(Math.floor(th / 2), 1);\n\t\t}\n\t\t// Upsample\n\t\tvar lastUpTexture: RenderTexture = this._pyramid[(iterations - 1) * 2];//down\n\t\tfor (i = iterations - 2; i >= 0; i--) {\n\t\t\tdownIndex = i * 2;\n\t\t\tupIndex = downIndex + 1;\n\t\t\tmipDownTexture = this._pyramid[downIndex];\n\t\t\tmipUpTexture = this._pyramid[upIndex];\n\t\t\tcmd.setShaderDataTexture(this._shaderData, BloomEffect.SHADERVALUE_BLOOMTEX, mipDownTexture);//通过指令延迟设置\n\t\t\tcmd.blitScreenTriangle(lastUpTexture, mipUpTexture, null, this._shader, this._shaderData, BloomEffect.SUBSHADER_UPSAMPLETENT + qualityOffset);\n\t\t\tlastUpTexture = mipUpTexture;\n\t\t}\n\n\t\tvar linearColor: Color = this._linearColor;\n\t\tthis.color.toLinear(linearColor);\n\t\tvar intensity: number = Math.pow(2, this._intensity / 10.0) - 1.0;\n\t\tvar shaderSettings: Vector4 = this._shaderSetting;\n\t\tthis._shaderSetting.setValue(sampleScale, intensity, this._dirtIntensity, iterations);\n\n\t\t//镜头污渍\n\t\t//需要保证污渍纹理不变型\n\t\tvar usedirtTexture = this._dirtTexture ? this._dirtTexture : Texture2D.blackTexture;\n\n\t\tvar dirtRatio: number = usedirtTexture.width / usedirtTexture.height;\n\t\tvar screenRatio: number = viewport.width / viewport.height;\n\t\tvar dirtTileOffset: Vector4 = this._dirtTileOffset;\n\t\tif (dirtRatio > screenRatio)\n\t\t\tdirtTileOffset.setValue(screenRatio / dirtRatio, 1.0, (1.0 - dirtTileOffset.x) * 0.5, 0.0);\n\t\telse if (dirtRatio < screenRatio)\n\t\t\tdirtTileOffset.setValue(1.0, dirtRatio / screenRatio, 0.0, (1.0 - dirtTileOffset.y) * 0.5);\n\n\t\t//合成Shader属性\n\t\tvar compositeShaderData: ShaderData = context.compositeShaderData;\n\t\tif (this.fastMode)\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM_LOW);\n\t\telse\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM);\n\n\t\tthis._bloomTextureTexelSize.setValue(1.0 / lastUpTexture.width, 1.0 / lastUpTexture.height, lastUpTexture.width, lastUpTexture.height);\n\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET, dirtTileOffset);\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_SETTINGS, shaderSettings);\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_COLOR, new Vector4(linearColor.r, linearColor.g, linearColor.b, linearColor.a));//TODO:需要Color支持\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOM_DIRTTEX, usedirtTexture);\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOMTEX, lastUpTexture);\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE, this._bloomTextureTexelSize);\n\n\t\tlet _compositeShader: Shader3D = Shader3D.find(\"PostProcessComposite\");\n\n\t\tcmd.blitScreenTriangle(context.indirectTarget, context.destination, context.camera._screenOffsetScale, _compositeShader, compositeShaderData, 0);\n\n\n\t\t//释放渲染纹理\n\t\tfor (i = 0; i < iterations; i++) {\n\t\t\tdownIndex = i * 2;\n\t\t\tupIndex = downIndex + 1;\n\t\t\tRenderTexture.recoverToPool(this._pyramid[downIndex]);\n\t\t\t(i !== 0 && i !== iterations - 1) && (RenderTexture.recoverToPool(this._pyramid[upIndex]));//i==0为lastUpTexture,需延迟释放,i==iterations - 1,不存在\n\t\t}\n\n\t\tcontext.deferredReleaseTextures.push(lastUpTexture);//TODO:是否需要改机制\n\t}\n\n}\n\n\n","#define SHADER_NAME SCREENVS\n\nvarying vec2 v_Texcoord0;\n\nvec4 remapPositionZ(vec4 position)\n{\n    position.z = position.z * 2.0 - position.w;\n    return position;\n}\n\nvoid main() {\t\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapPositionZ(gl_Position);\n}\n","#define SHADER_NAME COCFS\n\n#ifdef CAMERA_NORMALDEPTH\n    uniform sampler2D u_CameraDepthNormalTexture;\n#else\n    uniform sampler2D u_CameraDepthTexture;\n#endif\n\n\nvarying vec2 v_Texcoord0;\n\n// Z buffer to linear 0..1 depth\nfloat Linear01Depth(float z,vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\n}\n\n// Z buffer to linear depth\nfloat LinearEyeDepth(float z,vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\n}\n\nfloat DecodeFloatRG(vec2 enc )\n{\n    vec2 kDecodeDot = vec2(1.0, 1.0/255.0);\n    return dot( enc, kDecodeDot );\n}\n\nvoid DecodeDepthNormal(vec4 enc, out float depth)\n{\n    depth = DecodeFloatRG (enc.zw);\n}\n\nvoid main() {\n\n    #ifdef CAMERA_NORMALDEPTH\n        vec4 depthNormal = texture2D(u_CameraDepthNormalTexture, v_Texcoord0);\n        float depth = 0.0;\n        DecodeDepthNormal(depthNormal, depth);\n        depth = ((1.0 / depth) - u_ZBufferParams.y) * (1.0 / u_ZBufferParams.x);\n    #else\n        float depth = texture2D(u_CameraDepthTexture, v_Texcoord0).x;\n    #endif\n\n    depth = LinearEyeDepth(depth, u_ZBufferParams);\n    float farStart = u_CoCParams.x;\n    float farEnd = u_CoCParams.y;\n\n    float coc = (depth - farStart) / (farEnd - farStart);\n    coc = clamp(coc, 0.0, 1.0);\n    gl_FragColor = vec4(coc, coc, coc, 1.0);\n}\n","#define SHADER_NAME PrefilterFS\n\nvarying vec2 v_Texcoord0;\n\nconst int kCount = 5;\nvec2 kTaps[5];\n\nvoid main () {\n\n    kTaps[0] = vec2( 0.0,  0.0);\n    kTaps[1] = vec2( 0.9, -0.4);\n    kTaps[2] = vec2(-0.9,  0.4);\n    kTaps[3] = vec2( 0.4,  0.9);\n    kTaps[4] = vec2(-0.4, -0.9);\n\n    vec3 colorAcc = vec3(0.0);\n    float farCoCAcc = 0.0;\n    for (int i = 0; i < kCount; i++) {\n        vec2 uv = u_MainTex_TexelSize.xy * kTaps[i] + v_Texcoord0;\n        vec3 tapColor = texture2D(u_MainTex, uv).rgb;\n        float coc = texture2D(u_FullCoCTex, uv).r;\n\n        colorAcc += tapColor * coc;\n        farCoCAcc += coc;\n    }\n    vec3 color = colorAcc * (1.0 / float(kCount));\n    float farCoC = farCoCAcc * (1.0 / float(kCount));\n\n    // float farCoC = texture2D(u_FullCoCTex, v_Texcoord0).x;\n    // vec3 color = texture2D(u_MainTex, v_Texcoord0).rgb;\n    // color *= farCoC;\n\n    gl_FragColor = vec4(color, farCoC);\n}","#define SHADER_NAME BlurVFS\n\nvarying vec2 v_Texcoord0;\n\n// todo 3 & 5\nconst int kTapCount = 3;\nfloat kOffsets[3];\nfloat kCoeffs[3];\n\n\nvec4 Blur(vec2 dir, float premultiply) {\n\n    kOffsets[0] = -1.33333333;\n    kOffsets[1] = 0.00000000;\n    kOffsets[2] = 1.33333333;\n\n    kCoeffs[0] = 0.35294118;\n    kCoeffs[1] = 0.29411765;\n    kCoeffs[2] = 0.3529411;\n\n    vec2 uv = v_Texcoord0;\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\n\n    vec4 halfColor = texture2D(u_MainTex, uv);\n    float samp0CoC = halfColor.a;\n\n    float maxRadius = u_CoCParams.z;\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\n\n    vec4 acc = vec4(0.0);\n\n    for (int i = 0; i < kTapCount; i++) {\n        vec2 sampCoord = uv + kOffsets[i] * offset;\n        vec4 samp = texture2D(u_MainTex, sampCoord);\n        float sampCoC = samp.w;\n        vec3 sampColor = samp.xyz;\n\n        float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\n        acc += vec4(sampColor, 1.0) * kCoeffs[i] * weight;\n    }\n\n    acc.xyz /= acc.w + 1e-4;\n    return vec4(acc.xyz, 1.0);\n}\n\nvoid main() {\n    gl_FragColor = Blur(vec2(0.0, 1.0), 0.0);\n    // gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\n}\n","#define SHADER_NAME BlurHFS\n\nvarying vec2 v_Texcoord0;\n\nconst int kTapCount = 3;\nfloat kOffsets[3];\nfloat kCoeffs[3];\n\nvec4 Blur(vec2 dir, float premultiply) {\n\n    kOffsets[0] = -1.33333333;\n    kOffsets[1] = 0.00000000;\n    kOffsets[2] = 1.33333333;\n\n    kCoeffs[0] = 0.35294118;\n    kCoeffs[1] = 0.29411765;\n    kCoeffs[2] = 0.3529411;\n\n    vec2 uv = v_Texcoord0;\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\n\n    vec4 halfColor = texture2D(u_MainTex, uv);\n    float samp0CoC = halfColor.a;\n\n    float maxRadius = u_CoCParams.z;\n    vec2 offset = u_SourceSize.zw  * dir * samp0CoC * maxRadius;\n\n    vec4 acc = vec4(0.0);\n\n    for (int i = 0; i < kTapCount; i++) {\n        vec2 sampCoord = uv + kOffsets[i] * offset;\n        vec4 samp = texture2D(u_MainTex, sampCoord);\n        float sampCoC = samp.a;\n        vec3 sampColor = samp.rgb;\n\n        float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\n        acc += vec4(sampColor, sampCoC) * kCoeffs[i] * weight;\n    }\n\n    acc.xyz /= acc.w + 1e-4;\n    return vec4(acc.xyz, samp0CoC);\n}\n\nvoid main() {\n    gl_FragColor = Blur(vec2(1.0, 0.0), 1.0);\n}","#define SHADER_NAME CompositeFS\n\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\n    vec3 baseColor = texture2D(u_MainTex, v_Texcoord0).rgb;\n    vec4 samplevalue = texture2D(u_BlurCoCTex, v_Texcoord0);\n    vec3 farColor = samplevalue.rgb;\n    float coc = texture2D(u_FullCoCTex, v_Texcoord0).r;\n\n    vec3 dstColor = vec3(0.0);\n    float dstAlpha = 1.0;\n\n    float blend = sqrt(coc * 3.14 * 2.0);\n    dstColor = farColor * clamp(blend, 0.0, 1.0);\n    dstAlpha = clamp(1.0 - blend, 0.0, 1.0);\n\n\n    gl_FragColor = vec4(baseColor * dstAlpha + dstColor, 1.0);\n\n}","import FullScreenVert from \"../../../shader/files/postProcess/GaussianDoF/FullScreenVert.vs\";\nimport CoCFS from \"../../../shader/files/postProcess/GaussianDoF/CoC.fs\";\nimport PrefilterFS from \"../../../shader/files/postProcess/GaussianDoF/Prefilter.fs\";\nimport BlurVFS from \"../../../shader/files/postProcess/GaussianDoF/BlurV.fs\";\nimport BlurHFS from \"../../../shader/files/postProcess/GaussianDoF/BlurH.fs\";\nimport CompositeFS from \"../../../shader/files/postProcess/GaussianDoF/Composite.fs\";\nimport { Camera } from \"../../../core/Camera\";\nimport { CommandBuffer } from \"../../../core/render/command/CommandBuffer\";\nimport { PostProcessEffect } from \"../../../core/render/PostProcessEffect\";\nimport { PostProcessRenderContext } from \"../../../core/render/PostProcessRenderContext\";\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { DepthTextureMode } from \"../../../depthMap/DepthPass\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\n\n/**\n *  <code>BloomEffect</code> 类用于创建环境光遮罩效果。\n *  Gaussian DoF\n *  * 只支持 远景模糊\n *  - start: 开始远景模糊的深度\n *  - end: 达到最大模糊半径的远景深度\n *  - maxRadius: 远景模糊最大半径\n */\nexport class GaussianDoF extends PostProcessEffect {\n    /**@internal */\n    static SOURCESIZE: number;\n\n    /**@internal */\n    static ZBUFFERPARAMS: number;\n\n    /**@internal */\n    static COCPARAMS: number;\n\n    /**@internal */\n    static DEPTHTEXTURE: number;\n\n    /**@internal */\n    static NORMALDEPTHTEXTURE: number;\n\n    /**@internal */\n    static FULLCOCTEXTURE: number;\n\n    /**@internal */\n    static DOWNSAMPLESCALE: number;\n\n    /**@internal */\n    static BLURCOCTEXTURE: number;\n\n    /**@internal */\n    static SHADERDEFINE_DEPTHNORMALTEXTURE: ShaderDefine;\n\n    /**\n     * GaussianDOF resource init\n     */\n    static init() {\n        GaussianDoF.SOURCESIZE = Shader3D.propertyNameToID(\"u_SourceSize\");\n        GaussianDoF.ZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\n        GaussianDoF.COCPARAMS = Shader3D.propertyNameToID(\"u_CoCParams\");\n        GaussianDoF.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\n        GaussianDoF.NORMALDEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalTexture\");\n        GaussianDoF.FULLCOCTEXTURE = Shader3D.propertyNameToID(\"u_FullCoCTex\");\n        GaussianDoF.DOWNSAMPLESCALE = Shader3D.propertyNameToID(\"u_DownSampleScale\");\n        GaussianDoF.BLURCOCTEXTURE = Shader3D.propertyNameToID(\"u_BlurCoCTex\");\n        GaussianDoF.SHADERDEFINE_DEPTHNORMALTEXTURE = Shader3D.getDefineByName(\"CAMERA_NORMALDEPTH\");\n\n        let attributeMap: any = {\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\n        };\n\n        let uniformMap: any = {\n            \"u_MainTex\": ShaderDataType.Texture2D,\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4,\n            \"u_OffsetScale\": ShaderDataType.Vector4,\n            \"u_ZBufferParams\": ShaderDataType.Vector4,\n            \"u_CoCParams\": ShaderDataType.Vector3,\n            \"u_FullCoCTex\": ShaderDataType.Texture2D,\n            \"u_SourceSize\": ShaderDataType.Vector4,\n            \"u_DownSampleScale\": ShaderDataType.Vector4,\n            \"u_BlurCoCTex\": ShaderDataType.Texture2D,\n        };\n        let shader: Shader3D = Shader3D.add(\"GaussianDoF\");\n\n        /**\n         * CoC pass\n         * 根据 FarStart 与 FarEnd， 将深度值映射到 0 - 1\n         * \n         * Camera nearPlane---------FarStart---------FarEnd---------Camera farplane\n         *       0         ---------   0    ---------   1  ---------      1\n         */\n        let cocSubShader: SubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(cocSubShader);\n        cocSubShader.addShaderPass(FullScreenVert, CoCFS);\n\n        /**\n         * Prefilter pass\n         * \n         */\n        let prefilterSubShader: SubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(prefilterSubShader);\n        prefilterSubShader.addShaderPass(FullScreenVert, PrefilterFS);\n\n        // blur\n        /**\n         * blurH pass\n         */\n        let blurHSubShader: SubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(blurHSubShader);\n        blurHSubShader.addShaderPass(FullScreenVert, BlurHFS);\n\n        /**\n         * blurV pass\n         */\n        let blurVSubShader: SubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(blurVSubShader);\n        blurVSubShader.addShaderPass(FullScreenVert, BlurVFS);\n\n        /**\n         * Composite pass\n         */\n        let compositeSubShader: SubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(compositeSubShader);\n        compositeSubShader.addShaderPass(FullScreenVert, CompositeFS);\n\n    }\n\n    /**@internal */\n    private _shader: Shader3D;\n\n    /**@internal */\n    private _shaderData: ShaderData;\n\n    /**@internal */\n    private _zBufferParams: Vector4;\n\n    /**@internal */\n    private _sourceSize: Vector4;\n\n    /**@internal */\n    private _dowmSampleScale: Vector4;\n\n    /**\n     * 实例化一个高斯DOF效果类\n     */\n    constructor() {\n        super();\n        this._shader = Shader3D.find(\"GaussianDoF\");\n        this._shaderData = LayaGL.renderOBJCreate.createShaderData(null);\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, new Vector3(10, 30, 1));\n        this._zBufferParams = new Vector4();\n        this._sourceSize = new Vector4();\n        this._dowmSampleScale = new Vector4();\n    }\n\n    /**\n     * 开始远景模糊的深度\n     */\n    set farStart(value: number) {\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\n        cocParams.x = value;\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\n    }\n\n    get farStart(): number {\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).x;\n    }\n\n    /**\n     * 达到最大模糊半径的远景深度\n     */\n    set farEnd(value: number) {\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\n        cocParams.y = Math.max(cocParams.x, value);\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\n    }\n\n    get farEnd(): number {\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).y;\n    }\n\n    /**\n     * 最大模糊半径\n     */\n    set maxRadius(value: number) {\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\n        cocParams.z = Math.min(value, 2);\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\n    }\n\n    get maxRadius(): number {\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).z;\n    }\n\n    /**\n     * @internal\n     * @param context \n     */\n    private _setupShaderValue(context: PostProcessRenderContext): void {\n        let camera: Camera = context.camera;\n        this._dowmSampleScale.setValue(0.5, 0.5, 2.0, 2.0);\n        this._shaderData.setVector(GaussianDoF.DOWNSAMPLESCALE, this._dowmSampleScale);\n        let far = camera.farPlane;\n        let near = camera.nearPlane;\n        this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\n        this._shaderData.setVector(GaussianDoF.ZBUFFERPARAMS, this._zBufferParams);\n    }\n\n\n    /**\n     * @internal\n     * @override\n     */\n    getCameraDepthTextureModeFlag() {\n        return DepthTextureMode.Depth;\n    }\n\n    /**\n    * @override\n    * @param context \n    */\n    render(context: PostProcessRenderContext): void {\n        let cmd: CommandBuffer = context.command;\n        this._setupShaderValue(context);\n\n        let source: RenderTexture = context.source;\n\n        let shader: Shader3D = this._shader;\n        let shaderData: ShaderData = this._shaderData;\n\n        let dataTexFormat: RenderTargetFormat = RenderTargetFormat.R16G16B16A16;\n        // todo fullCoC format: R16\n        let fullCoC: RenderTexture = RenderTexture.createFromPool(source.width, source.height, dataTexFormat, RenderTargetFormat.None, false, 1);\n        // coc pass\n        cmd.blitScreenTriangle(source, fullCoC, null, shader, shaderData, 0);\n        // Prefilter pass\n        fullCoC.filterMode = FilterMode.Bilinear;\n        this._shaderData.setTexture(GaussianDoF.FULLCOCTEXTURE, fullCoC);\n        let prefilterTex: RenderTexture = RenderTexture.createFromPool(source.width / 2, source.height / 2, dataTexFormat, RenderTargetFormat.None, false, 1);\n        cmd.blitScreenTriangle(source, prefilterTex, null, shader, shaderData, 1);\n        // blur\n        prefilterTex.filterMode = FilterMode.Bilinear;\n        this._sourceSize.setValue(prefilterTex.width, prefilterTex.height, 1.0 / prefilterTex.width, 1.0 / prefilterTex.height);\n        this._shaderData.setShaderData(GaussianDoF.SOURCESIZE, ShaderDataType.Vector4, this._sourceSize);\n        // blur H\n        let blurHTex: RenderTexture = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\n        cmd.blitScreenTriangle(prefilterTex, blurHTex, null, this._shader, this._shaderData, 2);\n        // blur V\n        let blurVTex: RenderTexture = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\n        cmd.blitScreenTriangle(blurHTex, blurVTex, null, this._shader, this._shaderData, 3);\n        // composite\n        blurVTex.filterMode = FilterMode.Bilinear;\n        blurVTex.anisoLevel = 1;\n        fullCoC.filterMode = FilterMode.Point;\n        this._shaderData.setTexture(GaussianDoF.BLURCOCTEXTURE, blurVTex);\n        let finalTex: RenderTexture = RenderTexture.createFromPool(source.width, source.height, source.colorFormat, source.depthStencilFormat, false, 1);\n        cmd.blitScreenTriangle(source, context.destination, null, this._shader, this._shaderData, 4);\n        //context.source = finalTex;\n        // recover render texture\n        RenderTexture.recoverToPool(fullCoC);\n        RenderTexture.recoverToPool(prefilterTex);\n        RenderTexture.recoverToPool(blurHTex);\n        RenderTexture.recoverToPool(blurVTex);\n        context.deferredReleaseTextures.push(finalTex);\n    }\n}\n","#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#define SHADER_NAME OcclusionEstimation:FS\n\n#include \"DepthNormalUtil.glsl\";\n\n#include \"AmbientOcclusion.glsl\";\n\n#define FIX_SAMPLING_PATTERN\n\n// Check if the camera is perspective.\n// (returns 1.0 when orthographic)\nfloat CheckPerspective(float x)\n{   \n    // todo ortho\n    return mix(x, 1.0, 0.0);\n}\n\nvec3 ReconstructViewPos(vec2 uv, float depth, vec2 p11_22, vec2 p13_31)\n{\n    return vec3((uv * 2.0 - 1.0 - p13_31) / p11_22 * CheckPerspective(depth), depth);\n}\n\n// Pseudo random number generator with 2D coordinates\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\nfloat UVRandom(float u, float v) {\n    float f = dot(vec2(12.9898, 78.233), vec2(u, v));\n    return fract(43758.5453 * sin(f));\n}\n\nvec2 CosSin(float theta)\n{\n    // float sn, cs;\n    // sincos(theta, sn, cs);\n    float sn = sin(theta);\n    float cs = cos(theta);\n    return vec2(cs, sn);\n}\n\nfloat GradientNoise(vec2 uv)\n{\n    uv = floor(uv * u_MainTex_TexelSize.zw);\n    float f = dot(vec2(0.06711056, 0.00583715), uv);\n    return fract(52.9829189 * fract(f));\n}\n\n// Sample point picker\nvec3 PickSamplePoint(vec2 uv, float index) \n{\n    #if defined(FIX_SAMPLING_PATTERN)\n        float gn = GradientNoise(uv * DOWNSAMPLE);\n        float u = fract(UVRandom(0.0, index + uv.x * 1e-10) + gn) * 2.0 - 1.0;\n        float theta = (UVRandom(1.0, index + uv.x * 1e-10) + gn) * TWO_PI;\n    #else\n        float u = UVRandom(uv.x + u_PlugTime.x, uv.y + index) * 2.0 - 1.0;\n        float theta = UVRandom(-uv.x - u_PlugTime.x, uv.y + index) * TWO_PI;\n    #endif\n\n    vec3 v = vec3(CosSin(theta) * sqrt(1.0 - u * u), u);\n    float l = sqrt((index + 1.0) / float(SAMPLE_COUNT)) * RADIUS;\n    return v * l;\n}\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n\n    mat3 proj = mat3(u_Projection);\n    vec2 p11_22 = vec2(u_Projection[0][0], u_Projection[1][1]);\n    vec2 p13_31 = vec2(u_Projection[2][0], u_Projection[2][1]);\n\n    vec3 norm_o;\n    float depth_o = SampleDepthNormal(uv, norm_o);\n\n    // Reconstruct the view-space position.\n    vec3 vpos_o = ReconstructViewPos(uv, depth_o, p11_22, p13_31);\n\n    float ao = 0.0;\n\n    for (int s = 0; s < int(SAMPLE_COUNT); s++) {\n        float s_float = float(s);\n        vec3 v_s1 = PickSamplePoint(uv, s_float);\n\n        v_s1 = faceforward(v_s1, -norm_o, v_s1);\n        vec3 vpos_s1 = vpos_o + v_s1;\n\n        // Reproject the sample point\n        vec3 spos_s1 = proj * vpos_s1;\n        vec2 uv_s1_01 = (spos_s1.xy / CheckPerspective(vpos_s1.z) + 1.0) * 0.5;\n\n        float depth_s1 = SampleDepth(uv_s1_01);\n\n        vec3 vpos_s2 = ReconstructViewPos(uv_s1_01, depth_s1, p11_22, p13_31);\n        vec3 v_s2 = vpos_s2 - vpos_o;\n\n        float a1 = max(dot(v_s2, norm_o) - kBeta * depth_o, 0.0);\n        float a2 = dot(v_s2, v_s2) + EPSILON;\n\n        ao += a1 / a2;\n    }\n\n    ao *= RADIUS;\n\n    ao = PositivePow(ao * INTENSITY / float(SAMPLE_COUNT), kContrast);\n\n    gl_FragColor = PackAONormal(ao, norm_o);\n}\n\n/**\n    0.8741,     0,          0,          0, \n    0,          1.7320,     0,          0, \n    0,          0,          -1.0152,    -1, \n    0,          0,          -0.3046,    0\n**/","#if defined(GL_FRAGMENT_PRECISION_HIGH)\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n\n#define SHADER_NAME AOBlurHorizontal\n//质量\n#define BLUR_HIGH_QUALITY 0\n\n\nvarying vec2 v_Texcoord0;\n\n// uniform vec2 u_Delty;\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\n\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(0.8, 1.0, dot(d1, d2));\n}\n\nfloat GetPackedAO(vec4 p)\n{\n    return p.r;\n}\n\nvec4 PackAONormal(float ao, vec3 normal) {\n    return vec4(ao, normal * 0.5 + 0.5);\n}\n\nvoid main() {\n\t vec2 delta = vec2(u_MainTex_TexelSize.x * 2.0*u_Delty.x,u_Delty.y*u_MainTex_TexelSize.y*2.0);\n\t vec2 uv = v_Texcoord0;\n\n\n#if defined(BLUR_HIGH_QUALITY)\n\n    // High quality 7-tap Gaussian with adaptive sampling\n\tvec2 uvtran = uv;\n    vec4 p0  = texture2D(u_MainTex,uv);\n\tuvtran = uv-delta;\n    vec4 p1a = texture2D(u_MainTex,uvtran);\n\tuvtran = uv+delta;\n    vec4 p1b = texture2D(u_MainTex,uvtran);\n\tuvtran = uv-delta*2.0;\n    vec4 p2a =  texture2D(u_MainTex,uvtran);\n\tuvtran = uv+delta*2.0;\n    vec4 p2b =  texture2D(u_MainTex,uvtran);\n\tuvtran = uv-delta * 3.2307692308;\n    vec4 p3a =  texture2D(u_MainTex,uvtran);;\n\tuvtran = uv+delta * 3.2307692308;\n    vec4 p3b =  texture2D(u_MainTex,uvtran);;\n\n    vec3 n0 = GetPackedNormal(p0);\n    \n\n    float w0  = 0.37004405286;\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.31718061674;\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.31718061674;\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.19823788546;\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.19823788546;\n    float w3a = CompareNormal(n0, GetPackedNormal(p3a)) * 0.11453744493;\n    float w3b = CompareNormal(n0, GetPackedNormal(p3b)) * 0.11453744493;\n\n    float s;\n    s  = GetPackedAO(p0)  * w0;\n    s += GetPackedAO(p1a) * w1a;\n    s += GetPackedAO(p1b) * w1b;\n    s += GetPackedAO(p2a) * w2a;\n    s += GetPackedAO(p2b) * w2b;\n    s += GetPackedAO(p3a) * w3a;\n    s += GetPackedAO(p3b) * w3b;\n\n    s /= w0 + w1a + w1b + w2a + w2b + w3a + w3b;\n\n#else\n\n    // Fater 5-tap Gaussian with linear sampling\n    vec4 p0  = texture2D(u_MainTex, sampler_MainTex, i.texcoordStereo);\n    vec4 p1a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 1.3846153846));\n    vec4 p1b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 1.3846153846));\n    vec4 p2a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 3.2307692308));\n    vec4 p2b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 3.2307692308));\n\n\tvec2 uvtran = uv;\n    vec4 p0  = texture2D(u_MainTex,uv);\n\tuvtran = uv-delta * 1.3846153846;\n    vec4 p1a = texture2D(u_MainTex,uvtran);\n\tuvtran = uv+delta * 1.3846153846;\n    vec4 p1b = texture2D(u_MainTex,uvtran);\n\tuvtran = uv-delta*3.2307692308;\n    vec4 p2a =  texture2D(u_MainTex,uvtran);\n\tuvtran = uv+delta*3.2307692308;\n    vec4 p2b =  texture2D(u_MainTex,uvtran);\n\n \tvec3 n0 = GetPackedNormal(p0);\n\n    float w0  = 0.2270270270;\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.3162162162;\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.3162162162;\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.0702702703;\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.0702702703;\n\n    float s;\n    s  = GetPackedAO(p0)  * w0;\n    s += GetPackedAO(p1a) * w1a;\n    s += GetPackedAO(p1b) * w1b;\n    s += GetPackedAO(p2a) * w2a;\n    s += GetPackedAO(p2b) * w2b;\n\n    s /= w0 + w1a + w1b + w2a + w2b;\n\n#endif\n\n    gl_FragColor = PackAONormal(s, n0);;\n}","#if defined(GL_FRAGMENT_PRECISION_HIGH)\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#define SHADER_NAME AOComposition\n#define BLUR_HIGH_QUALITY 0\n\n\nvarying vec2 v_Texcoord0;\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(0.8, 1.0, dot(d1, d2));\n}\nfloat GetPackedAO(vec4 p)\n{\n    return p.r;\n}\n\n// Geometry-aware bilateral filter (single pass/small kernel)\nfloat BlurSmall(sampler2D tex, vec2 uv, vec2 delta)\n{\n    vec4 p0 = texture2D(tex,uv);\n    vec2 uvtran =uv+vec2(-delta.x,-delta.y) ;\n    vec4 p1 = texture2D(tex,uvtran);\n    uvtran =uv+vec2(delta.x,-delta.y);\n    vec4 p2 = texture2D(tex, uvtran);\n    uvtran =uv+vec2(-delta.x,delta.y) ;\n    vec4 p3 = texture2D(tex, uvtran);\n    uvtran =uv+delta;\n    vec4 p4 = texture2D(tex, uvtran);\n\n    vec3 n0 = GetPackedNormal(p0);\n\n    float w0 = 1.0;\n    float w1 = CompareNormal(n0, GetPackedNormal(p1));\n    float w2 = CompareNormal(n0, GetPackedNormal(p2));\n    float w3 = CompareNormal(n0, GetPackedNormal(p3));\n    float w4 = CompareNormal(n0, GetPackedNormal(p4));\n\n    float s;\n    s  = GetPackedAO(p0) * w0;\n    s += GetPackedAO(p1) * w1;\n    s += GetPackedAO(p2) * w2;\n    s += GetPackedAO(p3) * w3;\n    s += GetPackedAO(p4) * w4;\n\n    return s / (w0 + w1 + w2 + w3 + w4);\n}\n\nvoid main() {\n    vec2 uv = v_Texcoord0;\n    vec2 delty = u_MainTex_TexelSize.xy;\n    float ao = BlurSmall(u_compositionAoTexture,uv,delty);\n    vec4 albedo = texture2D(u_MainTex,uv);\n    vec4 aocolor = vec4(ao*u_AOColor.rgb,ao);\n    albedo.rgb = albedo.rgb*(1.0-ao)+ao*u_AOColor.rgb*ao;\n    gl_FragColor = albedo;\n\n\n}","#include \"Camera.glsl\";\n// const \n#define TWO_PI 6.2831852\n\n#define EPSILON         1.0e-4\n#define FLT_EPSILON     1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nconst float kContrast = 0.6;\nconst float kGeometryCoeff = 0.8;\nconst float kBeta = 0.002;\n\n\n// varying\nvarying vec2 v_Texcoord0;\n\n#if defined(AO_High)\n\t#define SAMPLE_COUNT 12\n#elif defined(AO_MEDIUM)\n\t#define SAMPLE_COUNT 8\n#else\n\t#define SAMPLE_COUNT 4\n#endif\n\n#ifdef AOLOWEST\n#define SAMPLE_COUNT 8\n#endif\n\n#ifdef AOLOWEST\n#define SAMPLE_COUNT 8\n#endif\n\n\n#define INTENSITY u_AOParams.x\n#define RADIUS u_AOParams.y\n#define DOWNSAMPLE u_AOParams.z\n\nfloat PositivePow(float base, float power)\n{\n    return pow(max(abs(base), float(FLT_EPSILON)), power);\n}\n\n\n// Boundary check for depth sampler\n// (returns a very large value if it lies out of bounds)\nfloat CheckBounds(vec2 uv, float d) \n{\n    float ob = 0.0;\n    // todo\n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) \n    {\n        ob = 1.0;\n    }\n    if (d <= 0.00001) {\n        ob += 1.0;\n    }\n\n    return ob * 1e8;\n}\n\nfloat SampleDepth(vec2 uv) \n{\n    float depthTex_Depth = SAMPLE_DEPTH_TEXTURE(u_CameraDepthTexture, uv);\n    float depthTex_Linear01Depth = Linear01Depth(depthTex_Depth, u_ZBufferParams);\n    return  depthTex_Linear01Depth * u_ProjectionParams.y + CheckBounds(uv, depthTex_Linear01Depth);\n}\n\nvec3 SampleNormal(vec2 uv) \n{\n    vec4 col = texture2D(u_CameraDepthNormalsTexture, uv);\n    vec3 depthNormal_Normal = DecodeViewNormalStereo(col);\n    return depthNormal_Normal * vec3(1.0, 1.0, -1.0);\n}\n\nfloat SampleDepthNormal(vec2 uv, out vec3 normal) \n{\n    normal = SampleNormal(uv);\n    return SampleDepth(uv);\n}\n\n// Normal vector comparer (for geometry-aware weighting)\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(kGeometryCoeff, 1.0, dot(d1, d2));\n}\n\n// Accessors for packed AO/normal buffer\nvec4 PackAONormal(float ao, vec3 n) \n{\n    return vec4(ao, n * 0.5 + 0.5);\n}\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\n\nfloat GetPackAO(vec4 p)\n{\n    return p.r;\n}\n\n\n","\n\nimport BlitScreenVS from \"../../../shader/postprocess/BlitScreen.vs\";\nimport FragAO from \"../../../shader/files/postProcess/ScalableAO/FragAO.fs\";\nimport AoBlurHorizontal from \"../../../shader/files/postProcess/ScalableAO/AoBlurHorizontal.fs\";\nimport AOComposition from \"../../../shader/files/postProcess/ScalableAO/AOComposition.fs\";\nimport AmbientOcclusion from \"../../../shader/files/postProcess/ScalableAO/AmbientOcclusion.glsl\";\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { WrapMode } from \"../../../../RenderEngine/RenderEnum/WrapMode\";\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType, ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\nimport { DepthTextureMode } from \"../../../depthMap/DepthPass\";\nimport { Viewport } from \"../../../math/Viewport\";\nimport { Camera } from \"../../Camera\";\nimport { CommandBuffer } from \"../command/CommandBuffer\";\nimport { PostProcessEffect } from \"../PostProcessEffect\";\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\nimport { BaseCamera } from \"../../BaseCamera\";\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { Color } from \"../../../../maths/Color\";\nimport { Vector2 } from \"../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\n\n/**\n * AO质量\n */\nexport enum AOQUALITY{\n    /**高 */\n    High,\n    /**中 */\n    MEDIUM,\n    /**低 */\n    LOWEST\n}\n\n/**\n * <code>BloomEffect</code> 类用于创建环境光遮罩效果。\n */\nexport class ScalableAO extends PostProcessEffect {\n\n    /**@internal */\n    static SHADERDEFINE_AOHigh: ShaderDefine;\n\n    /**@internal */\n    static SHADERDEFINE_AOMEDIUM: ShaderDefine;\n\n    /**@internal */\n    static SHADERDEFINE_LOWEST: ShaderDefine;\n\n    /**@internal */\n    static BlurDelty: number;\n\n    /**@internal */\n    static AOColor: number;\n\n    /**@internal */\n    static aoTexture: number;\n\n    /**@internal */\n    static AOParams: number;\n\n    /**@internal */\n    static SourceTex: number;\n\n    /**@internal */\n    static deltyHorizontal: Vector2 = new Vector2(1.0, 0.0);\n\n    /**@internal */\n    static deltyVector: Vector2 = new Vector2(0.0, 1.0);\n\n    /**\n     * scaleAO resource init\n     */\n    static init() {\n        ScalableAO.BlurDelty = Shader3D.propertyNameToID(\"u_Delty\");\n        ScalableAO.AOColor = Shader3D.propertyNameToID(\"u_AOColor\");\n        ScalableAO.aoTexture = Shader3D.propertyNameToID(\"u_compositionAoTexture\");\n\n        ScalableAO.AOParams = Shader3D.propertyNameToID('u_AOParams');\n        ScalableAO.SourceTex = Shader3D.propertyNameToID('u_SourceTex');\n        ScalableAO.SHADERDEFINE_AOHigh =Shader3D.getDefineByName(\"AO_High\");\n        ScalableAO.SHADERDEFINE_AOMEDIUM =Shader3D.getDefineByName(\"AO_MEDIUM\");\n        ScalableAO.SHADERDEFINE_LOWEST =Shader3D.getDefineByName(\"AO_LOWEST\");\n        Shader3D.addInclude(\"AmbientOcclusion.glsl\", AmbientOcclusion);\n        //scalableAoShader\n        let attributeMap: any = {\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n        let uniformMap: any = {\n            'u_OffsetScale': ShaderDataType.Vector4,\n            'u_MainTex': ShaderDataType.Texture2D,\n            'u_MainTex_TexelSize': ShaderDataType.Vector4,\n            'u_Delty': ShaderDataType.Vector2,\n            'u_PlugTime': ShaderDataType.Vector4,\n            'u_AOParams': ShaderDataType.Vector4,\n            'u_BlurVector': ShaderDataType.Vector2,\n            'u_AOColor': ShaderDataType.Color,\n            'u_compositionAoTexture': ShaderDataType.Texture2D\n\n        }\n        let shader: Shader3D = Shader3D.add(\"ScalableAO\");\n        let subShader: SubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        subShader.addShaderPass(BlitScreenVS, FragAO);\n        //BlurShader\n        shader = Shader3D.add(\"AOBlurHorizontal\");\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        subShader.addShaderPass(BlitScreenVS, AoBlurHorizontal);\n\n        //Composition\n        shader = Shader3D.add(\"AOComposition\");\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        subShader.addShaderPass(BlitScreenVS, AOComposition);\n    }\n\n    /*@internal scalable AO shader*/\n    private _shader: Shader3D;\n\n    /**@internal shader data */\n    private _shaderData: ShaderData;\n\n    /*@internal blurHorizontal Ao Shader */\n    private _aoBlurHorizontalShader: Shader3D;\n\n    /**@internal */\n    private _aoComposition: Shader3D;\n\n    /**@internal */\n    private _aoParams: Vector3 = new Vector3();\n\n    private _aoQuality:AOQUALITY = AOQUALITY.MEDIUM;\n\n    /**\n     * 实例化一个AO效果类\n     */\n    constructor() {\n        super();\n        this._shader = Shader3D.find(\"ScalableAO\");\n        this._shaderData = LayaGL.renderOBJCreate.createShaderData(null);\n        this._aoParams = new Vector3(0.12, 0.15, 1);\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\n        this._shaderData.setVector(BaseCamera.DEPTHZBUFFERPARAMS, new Vector4());\n        this._aoBlurHorizontalShader = Shader3D.find(\"AOBlurHorizontal\");\n        this._aoComposition = Shader3D.find(\"AOComposition\");\n        this.aoQuality = AOQUALITY.MEDIUM;\n    }\n\n\n\n    /**\n     * ao Color\n     */\n    set aoColor(value: Color) {\n        this._shaderData.setColor(ScalableAO.AOColor, value);\n    }\n\n    get aoColor() {\n        return this._shaderData.getColor(ScalableAO.AOColor);\n    }\n\n    /**\n     * ao intensity\n     */\n    set intensity(value: number) {\n        this._aoParams.x = value;\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\n    }\n\n    get intensity() {\n        return this._aoParams.x;\n    }\n\n    /**\n     * ao影响半径\n     */\n    set radius(value: number) {\n        this._aoParams.y = value;\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\n    }\n\n    get radius() {\n        return this._aoParams.y;\n    }\n\n    /**\n     * ao质量\n     */\n    get aoQuality(){\n        return this._aoQuality;\n    }\n\n    set aoQuality(value:AOQUALITY){\n        this._aoQuality = value;\n        switch(value){\n            case AOQUALITY.High:\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOHigh);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\n                break;\n            case AOQUALITY.MEDIUM:\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\n                break;\n            case AOQUALITY.LOWEST:\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_LOWEST);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\n                break;\n        }\n    }\n    \n    /**\n     * @override\n     */\n    getCameraDepthTextureModeFlag() {\n        return DepthTextureMode.DepthAndDepthNormals;\n    }\n\n    /**\n     * @override\n     * @param context \n     */\n    render(context: PostProcessRenderContext): void {\n        let cmd: CommandBuffer = context.command;\n        let viewport: Viewport = context.camera.viewport;\n        let camera: Camera = context.camera;\n\n        // camera rendermode\n        camera.depthTextureMode |= DepthTextureMode.DepthNormals;\n        camera.depthTextureMode |= DepthTextureMode.Depth;\n\n        let depthNormalTexture: RenderTexture = camera.depthNormalTexture;\n        let depthTexture = camera.depthTexture;\n\n        if (!depthNormalTexture || !depthTexture) {\n            return;\n        }\n\n        depthNormalTexture.wrapModeU = WrapMode.Clamp;\n        depthNormalTexture.wrapModeV = WrapMode.Clamp;\n\n        let source: RenderTexture = context.source;\n        let width = source.width;\n        let height = source.height;\n        let textureFormat: RenderTargetFormat = source.colorFormat;\n        let depthFormat: RenderTargetFormat = RenderTargetFormat.None;\n\n        let finalTex: RenderTexture = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\n\n        let shader: Shader3D = this._shader;\n        let shaderData: ShaderData = this._shaderData;\n        //depthTexture;\n        //depthNormalTexture;\n        cmd.blitScreenTriangle(null, finalTex, null, shader, shaderData, 0);\n        //context.source = finalTex;\n        let blurTex: RenderTexture = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\n        //blur horizontal\n        cmd.blitScreenTriangle(finalTex, blurTex, null, this._aoBlurHorizontalShader, shaderData, 0);\n        //blur Vec\n        cmd.setShaderDataVector2(shaderData, ScalableAO.BlurDelty, ScalableAO.deltyVector);\n        cmd.blitScreenTriangle(blurTex, finalTex, null, this._aoBlurHorizontalShader, this._shaderData, 0);\n        //blur Composition\n        cmd.setShaderDataTexture(shaderData, ScalableAO.aoTexture, finalTex);\n        cmd.blitScreenTriangle(context.source, context.destination, null, this._aoComposition, this._shaderData, 0);\n        //context.source = blurTex;\n        context.deferredReleaseTextures.push(finalTex);\n        context.deferredReleaseTextures.push(blurTex);\n    }\n\n}","import { AniStateConditionType } from \"../../../components/AnimatorControllerParse\";\nimport { AnimatorStateCondition } from \"../../../components/AnimatorStateCondition\";\nimport { AnimatorState } from \"./AnimatorState\";\n\nexport class AnimatorTransition {\n    \n    /**\n     * @internal\n     */\n    private _name: string;\n\n    /**\n     * @internal\n     */\n    private _mute: boolean;//can,t play on this transition\n\n    /**\n     * @internal\n     */\n    private _exitTime: number;//退出时间\n\n    /**\n     * @internal\n     */\n    private _exitByTime: boolean;//是否设置生效时间\n\n    /**\n     * @internal\n     */\n    private _transstartoffset: number;//归一化的时间的下一个state播放位置\n\n    /**\n     * @internal\n     */\n    private _transduration: number;//归一化过度时间 0-1\n\n    /**\n     * @internal\n     */\n    private _conditions: AnimatorStateCondition[];//\n\n    /**\n     * @internal\n     */\n    private _destState: AnimatorState;\n\n    /**\n     * 创建一个新的Animatortransition\n     */\n    constructor() {\n        this._conditions = [];\n        this._exitByTime = true;\n        this._exitTime = 0.85;\n        this._transduration = 0.15;\n        this._transstartoffset = 0;\n        this._mute = false;\n    }\n\n    /**\n     * 设置过渡名字\n     */\n    get name() {\n        return this._name;\n    }\n\n    set name(value: string) {\n        this._name = value;\n    }\n\n    /**\n     * 禁用\n     */\n    get mute() {\n        return this._mute;\n    }\n\n    set mute(value: boolean) {\n        this._mute = value;\n    }\n\n    /**\n     * 目标状态\n     */\n    get destState() {\n        return this._destState;\n    }\n\n    set destState(value: AnimatorState) {\n        this._destState = value;\n    }\n\n    /**\n     * 设置condition数组\n     * IDE\n     */\n    get conditions() {\n        return this._conditions;\n    }\n\n    set conditions(value: AnimatorStateCondition[]) {\n        for (var i = this._conditions.length - 1; i >= 0; i--) {\n            this.removeCondition(this._conditions[i]);\n        }\n\n        for (var i = 0; i < value.length; i++) {\n            this.addCondition(value[i]);\n        }\n    }\n\n    /**\n     * 时间触发\n     */\n    get exitByTime() {\n        return this._exitByTime;\n    }\n\n    set exitByTime(value: boolean) {\n        this._exitByTime = value;\n    }\n\n    /**\n     * 过度归一化时间（相对于目标State）\n     */\n    set transduration(value: number) {\n        this._transduration = Math.max(0, Math.min(value, 1.0));\n    }\n\n    get transduration() {\n        return this._transduration;\n    }\n\n\n    /**\n    * 目标State播放时间偏移（归一化时间）\n    */\n    set transstartoffset(value: number) {\n        this._transstartoffset = Math.max(0, Math.min(value, 1.0));\n    }\n\n    get transstartoffset() {\n        return this._transstartoffset;\n    }\n\n    /**\n    * 触发时间（归一化时间）\n    */\n    set exitTime(value: number) {\n        this._exitTime = Math.max(0, Math.min(value, 1.0));\n    }\n\n    get exitTime() {\n        return this._exitTime;\n    }\n\n    /**\n     * 增加一个条件\n     * @param condition \n     */\n    addCondition(condition: AnimatorStateCondition): void {\n        if (this._conditions.indexOf(condition) == -1) {\n            this._conditions.push(condition);\n        }\n    }\n\n    /**\n     * 删除一个条件\n     * @param condition \n     */\n    removeCondition(condition: AnimatorStateCondition): void {\n        let index = this._conditions.indexOf(condition);\n        if (index != -1) {\n            this._conditions.splice(index, 0);\n        }\n    }\n\n    /**\n     * 是否启用过渡\n     * @param normalizeTime \n     * @param paramsMap \n     */\n    check(normalizeTime: number, paramsMap: { [key: number]: number | boolean }): boolean {\n        if (this._mute) {\n            return false;\n        }\n        if (this._conditions.length == 0) {\n            if(normalizeTime>this._exitTime)\n                return true;\n        } else {\n            if (this._exitByTime && normalizeTime < this._exitTime) {\n                return false;\n            }\n            for (var i = 0; i < this._conditions.length; i++) {\n                let con = this._conditions[i];\n                let out = con.checkState(paramsMap[con.id]);\n                if (out) {\n                    if (con.type == AniStateConditionType.Trigger)\n                        paramsMap[con.id] = false;\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}","import { AnimatorControllerParse, AniParmType, TypeAnimatorConditions, TypeAnimatorControllerData, TypeAnimatorParams, TypeAnimatorState, TypeAnimatorTransition } from \"../../../components/AnimatorControllerParse\";\nimport { AnimatorStateCondition, AnimatorStateBoolCondition, AnimatorStateNumberCondition, AnimatorStateTriggerCondition } from \"../../../components/AnimatorStateCondition\";\nimport { Resource } from \"../../../resource/Resource\";\nimport { ClassUtils } from \"../../../utils/ClassUtils\";\nimport { Animator } from \"./Animator\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorTransition } from \"./AnimatorTransition\";\n\n/**\n * @internal\n */\nexport class AnimatorController extends Resource {\n    data: TypeAnimatorControllerData;\n    clipsID: string[];\n    constructor(data: any) {\n        super();\n        let obj = AnimatorControllerParse.parse(data);\n\n\n        this.data = obj.ret;\n        this.clipsID = obj.clipsID;\n    }\n\n    private getLayers() {\n        let layers = this.data.controllerLayers;\n\n\n\n        let lArr: AnimatorControllerLayer[] = [];\n\n        for (let i = layers.length - 1; i >= 0; i--) {\n            let l = layers[i];\n            let acl = new AnimatorControllerLayer(l.name);\n            lArr.unshift(acl);\n\n\n            for (let k in l) {\n                if (\"name\" == k || \"states\" == k || null == (l as any)[k]) {\n                    continue;\n                }\n                try {\n                    (acl as any)[k] = (l as any)[k];\n                } catch (err: any) { }\n            }\n            this.getState(l.states, acl, this.data);\n\n        }\n        return lArr;\n    }\n\n\n    updateTo(a: Animator) {\n        let currLayer = (a as any)._controllerLayers;\n\n        for (let i = 0, len = currLayer.length; i < len; i++) {\n            currLayer[i]._removeReference();\n        }\n        currLayer.length = 0;\n\n        let layers = this.getLayers();\n\n        for (let i = 0, len = layers.length; i < len; i++) {\n            a.addControllerLayer(layers[i]);\n        }\n        let parms = this.data.animatorParams;\n        if (parms) {\n            for (let i = parms.length - 1; i >= 0; i--) {\n                let p = parms[i];\n                if (AniParmType.Bool == p.type) {\n                    a.setParamsBool(p.name, Boolean(p.val));\n                } else if (AniParmType.Float == p.type) {\n                    let val = Number(p.val);\n                    if (isNaN(val)) {\n                        val = 0;\n                    }\n                    a.setParamsNumber(p.name, val);\n                } else if (AniParmType.Trigger == p.type) {\n                    if (p.val) {\n                        a.setParamsTrigger(p.name);\n                    }\n                }\n            }\n        }\n\n    }\n\n\n\n    private createState(states: TypeAnimatorState[], idCatch: Record<string, AnimatorState>, acl: AnimatorControllerLayer) {\n        if (!states) return null;\n        let ret: Record<string, AnimatorState> = {};\n        let defID: string = null;\n        for (let i = states.length - 1; i >= 0; i--) {\n            let obj = states[i];\n\n            let childStates = obj.states;\n\n            if (childStates) {\n                let groupRet = this.createState(childStates, idCatch, acl);\n\n                if (groupRet) {\n                    idCatch[obj.id] = groupRet.states[groupRet.id];\n                }\n\n\n                continue;\n            }\n\n\n\n\n\n            if (0 > Number(obj.id)) {\n                if (\"-1\" == obj.id) {\n                    let transitions = obj.soloTransitions;\n                    if (transitions && 0 < transitions.length) {\n                        defID = transitions[0].id;\n                    }\n                }\n\n\n                continue;\n            }\n\n\n            let state = new AnimatorState();\n            idCatch[obj.id] = state;\n\n            ret[obj.id] = state;\n\n            for (let k in obj) {\n                try {\n                    if (\"scripts\" == k) {\n                        let scripts: string[] = obj[k];\n                        if (scripts && Array.isArray(scripts)) {\n                            for (let k = scripts.length - 1; k >= 0; k--) {\n                                let uuid = scripts[k];\n                                let c = ClassUtils.getClass(uuid);\n                                if (c) {\n                                    state.addScript(c);\n                                }\n                            }\n                        }\n                        continue;\n                    } else if (\"soloTransitions\" == k) {\n                        continue;\n                    } else if (null != (obj as any)[k]) {\n                        (state as any)[k] = (obj as any)[k];\n                    }\n                } catch (err: any) { }\n            }\n\n            acl.addState(state);\n        }\n        return { id: defID, states: ret };\n    }\n\n\n    private setExitTransition(exitRet: Record<string, TypeAnimatorTransition[]>, transitions: TypeAnimatorTransition[], idCatch: Record<string, AnimatorState>, data: TypeAnimatorControllerData, pExitRet: Record<string, TypeAnimatorTransition[]>) {\n        for (let id in exitRet) {\n            let state = idCatch[id];\n            if (state) {\n\n                let ats: AnimatorTransition[] = state.transitions;\n                let sts: AnimatorTransition[] = state.soloTransitions;\n\n                let linArr = exitRet[id];\n                for (let i = transitions.length - 1; i >= 0; i--) {\n                    let t = transitions[i];\n                    if (\"-3\" == t.id) {\n                        if (null == pExitRet[id]) {\n                            pExitRet[id] = [];\n                        }\n                        pExitRet[id].push(t);\n                        continue;\n                    }\n\n\n                    for (let j = linArr.length - 1; j >= 0; j--) {\n                        let t2 = linArr[j];\n\n\n                        let ato = new AnimatorTransition();\n                        ato.destState = idCatch[t.id];\n\n                        if (t.conditions) {\n                            this.addConditions(t.conditions, ato, data);\n                        }\n\n                        if (t2.conditions) {\n                            this.addConditions(t2.conditions, ato, data);\n                        }\n\n\n                        for (let k in t) {\n                            if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\n                                continue;\n                            } else {\n                                (ato as any)[k] = (t as any)[k];\n                            }\n                        }\n\n                        if (t.solo) {\n                            sts.unshift(ato);\n                        } else {\n                            ats.unshift(ato);\n                        }\n\n\n\n                    }\n                }\n\n\n\n\n\n            }\n        }\n    }\n\n\n    private setTransitions(states: TypeAnimatorState[], idCatch: Record<string, AnimatorState>, acl: AnimatorControllerLayer, data: TypeAnimatorControllerData, pState?: TypeAnimatorState) {\n        if (!states) return null;\n\n        let exitRet: Record<string, TypeAnimatorTransition[]> = {};\n\n        for (let i = states.length - 1; i >= 0; i--) {\n            let obj = states[i];\n\n            if (obj.states) {\n                let exitTransition = this.setTransitions(obj.states, idCatch, acl, data, obj);\n                if (exitTransition) {\n                    let transitions = obj.soloTransitions;\n                    if (transitions) {\n                        this.setExitTransition(exitTransition, transitions, idCatch, data, exitRet);\n                    }\n                }\n            }\n        }\n\n\n        for (let i = states.length - 1; i >= 0; i--) {\n            let obj = states[i];\n\n            if (obj.states) {\n                continue;\n            }\n\n\n\n\n            if (\"-1\" == obj.id) {\n                if (obj.soloTransitions && 0 < obj.soloTransitions.length) {\n                    if (null == pState) {\n                        acl.defaultState = idCatch[obj.soloTransitions[0].id];\n                    } else {\n                        idCatch[pState.id] = idCatch[obj.soloTransitions[0].id];\n                    }\n                    continue;\n                }\n            } else if (\"-2\" == obj.id) {\n                let transitions = obj.soloTransitions;\n                if (transitions) {\n                    for (let j = transitions.length - 1; j >= 0; j--) {\n                        let o = transitions[j];\n                        let destState = idCatch[o.id];\n                        if (destState) {\n                            for (let idk in idCatch) {\n                                let state = idCatch[idk];\n                                let ato = new AnimatorTransition();\n                                ato.destState = destState;\n                                if (o.conditions) {\n                                    this.addConditions(o.conditions, ato, data);\n                                }\n\n                                for (let k in o) {\n                                    if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\n                                        continue;\n                                    } else {\n                                        (ato as any)[k] = (o as any)[k];\n                                    }\n                                }\n\n                                if (o.solo) {\n                                    state.soloTransitions.unshift(ato);\n                                } else {\n                                    state.transitions.unshift(ato);\n                                }\n\n\n\n\n                            }\n                        }\n\n                    }\n                }\n                continue;\n            } else if (\"-3\" == obj.id) {\n                continue;\n            }\n\n            let soloTransitions = obj.soloTransitions;\n            if (soloTransitions && idCatch[obj.id]) {\n\n                let ats: AnimatorTransition[] = idCatch[obj.id].transitions;\n                let sts: AnimatorTransition[] = idCatch[obj.id].soloTransitions;\n\n\n\n                for (let j = soloTransitions.length - 1; j >= 0; j--) {\n                    let o = soloTransitions[j];\n                    if (\"-3\" == o.id) {\n                        if (null == exitRet[obj.id]) {\n                            exitRet[obj.id] = [];\n                        }\n                        exitRet[obj.id].push(o);\n                        continue;\n                    }\n\n                    let ato = new AnimatorTransition();\n\n                    if (idCatch[o.id]) {\n                        ato.destState = idCatch[o.id];\n                    }\n                    if (o.conditions) {\n                        this.addConditions(o.conditions, ato, data);\n                    }\n\n\n                    for (let k in o) {\n                        if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\n                            continue;\n                        } else {\n                            (ato as any)[k] = (o as any)[k];\n                        }\n                    }\n                    if (o.solo) {\n                        sts.unshift(ato);\n                    } else {\n                        ats.unshift(ato);\n                    }\n                }\n            }\n\n\n        }\n\n        return exitRet;\n    }\n\n\n\n    private getState(states: TypeAnimatorState[], acl: AnimatorControllerLayer, data: TypeAnimatorControllerData) {\n        //let ret:\n        if (states) {\n            let idCatch: Record<string, AnimatorState> = {};\n\n            this.createState(states, idCatch, acl);\n\n\n\n            this.setTransitions(states, idCatch, acl, data);\n\n            //acl.defaultState = \n\n\n\n\n\n\n\n\n\n\n        }\n    }\n\n    private addConditions(arr: TypeAnimatorConditions[], ato: AnimatorTransition, data: TypeAnimatorControllerData) {\n        let parms = data.animatorParams;\n        if (null == parms || 0 == parms.length) return;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            let o = arr[i];\n            let parm: TypeAnimatorParams = null;\n            for (let j = parms.length - 1; j >= 0; j--) {\n                if (parms[j].id == o.id) {\n                    parm = parms[j];\n                    break;\n                }\n            }\n            if (null == parm) {\n                return;\n            }\n            let c: AnimatorStateCondition;\n            if (parm.type == AniParmType.Bool) {\n                let b = new AnimatorStateBoolCondition(o.name);\n                b.compareFlag = Boolean(o.checkValue);\n                c = b;\n            } else if (parm.type == AniParmType.Float) {\n                let n = new AnimatorStateNumberCondition(o.name);\n                n.numberValue = Number(o.checkValue);\n                n.compareFlag = o.type;\n                c = n;\n            } else if (parm.type == AniParmType.Trigger) {\n                let t = new AnimatorStateTriggerCondition(o.name);\n                c = t;\n            }\n\n\n            ato.addCondition(c);\n        }\n    }\n\n\n\n}","/**\n * @internal\n */\nexport class BatchMark {\n\t/**@internal */\n\tupdateMark: number = -1;\n\t/**@internal */\n\tindexInList: number = -1;\n\t/**@internal */\n\tbatched: boolean = false;\n}\n\n","import { BatchMark } from \"../../core/render/BatchMark\";\n/**\n * @internal\n */\nexport class InstanceBatchManager {\n    /** @internal */\n    static instance = new InstanceBatchManager();\n    /**@internal */\n    private _instanceBatchOpaqueMarks: any[] = [];\n    /**@internal [只读]*/\n    updateCountMark: number = 0;\n    constructor() {\n    }\n\n    /**\n     * get batch index\n     */\n    private _getData<T>(key: boolean | number, data: any, cls?: new () => T): T {\n        if (null == cls) {\n            cls = Array as any;\n        }\n        if (\"boolean\" == typeof key) {\n            return (data[key ? 0 : 1]) || (data[key ? 0 : 1] = new cls());\n        } else {\n            return data[key] || (data[key] = new cls());\n        }\n    }\n\n    /**\n     * get batchMark by render property\n     * @param receiveShadow \n     * @param materialID \n     * @param subMeshID \n     * @param invertFace \n     * @returns \n     */\n    getInstanceBatchOpaquaMark(receiveShadow: boolean, materialID: number, subMeshID: number, invertFace: boolean,reflectionprob:number):BatchMark{\n        var data = this._getData(receiveShadow, this._instanceBatchOpaqueMarks);\n        data = this._getData(materialID, data);\n        data = this._getData(subMeshID, data);\n        data =this._getData(invertFace, data);\n        return this._getData(reflectionprob,data,BatchMark);\n        \n    }\n}","import { Vector3 } from \"../../../../maths/Vector3\";\nimport { SingletonList } from \"../../../../utils/SingletonList\";\nimport { Camera } from \"../../../core/Camera\";\nimport { BaseRender, RenderBitFlag } from \"../../../core/render/BaseRender\";\nimport { InstanceRenderElement } from \"../../../core/render/InstanceRenderElement\";\nimport { Scene3D } from \"../../../core/scene/Scene3D\";\nconst tempVec = new Vector3();\nconst tempVec1 = new Vector3();\n/**\n * 类用来描述合批的渲染节点\n */\nexport class BatchRender extends BaseRender {\n    /**@internal */\n    protected _checkLOD: boolean;\n    protected _lodCount: number;\n    protected _lodRateArray: number[];\n    protected _batchList: SingletonList<BaseRender>;\n    protected _batchbit: RenderBitFlag;\n    protected _RenderBitFlag: RenderBitFlag;\n    protected _lodInstanceRenderElement: { [key: number]: InstanceRenderElement[] } = {};\n    protected _lodsize: number;\n    private _cacheLod: number;\n\n    /**\n     * 创建一个 <code>BatchRender</code> 实例。\n     */\n    constructor() {\n        super();\n        this._RenderBitFlag = RenderBitFlag.RenderBitFlag_Batch;\n        this._renderElements = [];\n        this._lodInstanceRenderElement[-1] = [];\n        this._batchList = new SingletonList<BaseRender>();\n    }\n\n    /**\n     * 是否根据lod来合批\n     */\n    get checkLOD() {\n        return this._checkLOD;\n    }\n\n    set checkLOD(value: boolean) {\n        this._checkLOD = value;\n    }\n\n    /**\n     * lod裁剪过滤\n     */\n    set lodCullRateArray(value: number[]) {\n        if (!this._checkLOD) {\n            return;\n        }\n        value.sort((a, b) => b - a);\n        this._lodRateArray = value;\n    }\n\n    get lodCullRateArray() {\n        return this._lodRateArray;\n    }\n\n\n    /**\n     * Overrid it\n     *  是否满足batch条件\n     */\n    protected _canBatch(render: BaseRender): boolean {\n        if (render._batchRender) {\n            return false;\n        }\n        return false;\n    }\n\n    protected _onEnable(): void {\n        super._onEnable();\n        if (this._batchList) {\n            for (let i = 0, n = this._batchList.length; i < n; i++) {\n                this._batchList.elements[i].setRenderbitFlag(this._RenderBitFlag, true);\n            }\n        }\n    }\n\n    protected _onDisable(): void {\n        super._onDisable();\n        if (this._batchList) {\n            for (let i = 0, n = this._batchList.length; i < n; i++) {\n                this._batchList.elements[i].setRenderbitFlag(this._RenderBitFlag, false);\n            }\n        }\n    }\n\n    /**\n     * 根据lod的改变\n     */\n    protected _changeLOD(lod: number) {\n        if (this._cacheLod == lod) {\n            return;\n        }\n\n        if(this._cacheLod == this.lodCullRateArray.length - 1)\n        {\n            lod = -1;\n        }\n        \n        this._renderElements = this._lodInstanceRenderElement[lod];\n        if (this._lodInstanceRenderElement[lod] && lod != -1) {\n            this._renderElements || (this._renderElements = []);\n            this._renderElements = this._renderElements.concat(this._lodInstanceRenderElement[-1]);\n        } else {\n            this._renderElements = this._lodInstanceRenderElement[-1];\n        }\n\n    }\n\n    onPreRender() {\n        if (!this.checkLOD || !this._lodRateArray || this._lodRateArray.length < 1) {\n            this._changeLOD(0);\n        } else {\n            let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\n            let maxYDistance = checkCamera.maxlocalYDistance;\n            let cameraFrustum = checkCamera.boundFrustum;\n            Vector3.subtract(this._bounds.getCenter(), checkCamera.transform.position, tempVec);\n            //大于farplane,或者不在视锥内.不做lod操作\n            let length = tempVec.length();\n            checkCamera.transform.worldMatrix.getForward(tempVec1);\n            Vector3.normalize(tempVec, tempVec);\n            Vector3.normalize(tempVec1, tempVec1);\n            let rateYDistance = length * Math.abs(Vector3.dot(tempVec, tempVec1)) / checkCamera.farPlane * maxYDistance;\n            let rate = (this._lodsize / rateYDistance);\n            for (let i = 0; i < this._lodRateArray.length; i++) {\n                if (rate < this._lodRateArray[i])\n                    continue;\n                this._changeLOD(i);\n                break;\n            }\n        }\n    }\n\n    /**\n     * @param render \n     */\n    _batchOneRender(render: BaseRender): boolean {\n        //TODO\n        return false\n    }\n\n    /**\n     * @param render \n     */\n    _removeOneRender(render: BaseRender) {\n        //TODO\n    }\n\n    /**\n     * @param render \n     */\n    _updateOneRender(render: BaseRender) {\n        //TODO\n    }\n\n    /**\n     * 合批队列传入\n     * @param renderNodes \n     */\n    addList(renderNode: BaseRender[]) {\n        for (var i = 0, n = renderNode.length; i < n; i++) {\n            let baseRender = renderNode[i];\n            if (this._canBatch(baseRender)) {\n                this._batchList.add(baseRender);\n            }\n        }\n    }\n\n    /**\n     * 根据_batchList合批\n     */\n    reBatch() {\n        let renderNums = this._batchList.length;\n        let renders = this._batchList.elements;\n        for (var i = 0; i < renderNums; i++) {\n            let render = renders[i];\n            this._batchOneRender(render);\n        }\n    }\n\n    /**\n     * Restoring the Batch Render State\n     */\n    _restorRenderNode() {\n        for (let i = 0, n = this._batchList.length; i < n; i++) {\n            this._removeOneRender(this._batchList.elements[i]);\n        }\n    }\n\n    _clear() {\n        this._restorRenderNode();\n        this._renderElements = [];\n        this._batchList.destroy();\n        this._batchList = new SingletonList<BaseRender>();\n        this._lodInstanceRenderElement = {};\n        this._lodInstanceRenderElement[-1] = [];\n\n    }\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\nimport { BaseRender, RenderBitFlag } from \"../../../core/render/BaseRender\";\nimport { BatchMark } from \"../../../core/render/BatchMark\";\nimport { InstanceRenderElement } from \"../../../core/render/InstanceRenderElement\";\nimport { RenderElement } from \"../../../core/render/RenderElement\";\nimport { InstanceBatchManager } from \"../../../graphics/Batch/InstanceBatchManager\";\nimport { MeshInstanceGeometry } from \"../../../graphics/MeshInstanceGeometry\";\nimport { Bounds } from \"../../../math/Bounds\";\nimport { SubMesh } from \"../../../resource/models/SubMesh\";\nimport { BatchRender } from \"./BatchRender\";\n\n/**\n * <code>StaticInstanceBatchRender</code> 类用于创建动作状态。\n */\nexport class StaticInstanceBatchRender extends BatchRender {\n\n    /**@internal instanceBatchManager*/\n    private _batchManager: InstanceBatchManager;\n\n    /**@internal  记录每个BatchMask对应的Instance的数量*/\n    private _insBatchMarksNums: number[] = [];\n\n    /**@interal */\n    private _insElementMarksArray: InstanceRenderElement[] = [];\n\n    /**@interal batch rule:Batch min count*/\n    private _instanceBatchminNums: number = 10;\n\n    /**@interal cache udpate element*/\n    private _updateChangeElement: InstanceRenderElement[] = [];\n\n    /**\n     * 创建一个 <code>StaticInstanceBatchRender</code> 实例。\n     */\n    constructor() {\n        super();\n        this.checkLOD = true;\n        this._batchManager = new InstanceBatchManager();\n        this._RenderBitFlag = RenderBitFlag.RenderBitFlag_InstanceBatch;\n    }\n\n    /**\n     * 判断这个Render是否支持InstanceBatch\n     * @param render \n     * @returns \n     */\n    private _isRenderNodeAllCanInstanceBatch(render: BaseRender): boolean {\n        let elements = render._renderElements;\n        for (var i = 0, n = elements.length; i < n; i++) {\n            let element = elements[i];\n            if (!element.material._shader._enableInstancing || element.render.lightmapIndex > 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 计算Instance合并数量\n     * @param render \n     */\n    private _sumInstanceBatch(render: BaseRender) {\n        let elements = render._renderElements;\n        for (var i = 0, n = elements.length; i < n; i++) {\n            let element = elements[i];\n            var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\n            if (insBatchMarks.indexInList == -1) {\n                insBatchMarks.indexInList = this._insBatchMarksNums.length;\n                this._insBatchMarksNums.push(0);\n            }\n            this._insBatchMarksNums[insBatchMarks.indexInList] += 1;\n        }\n    }\n\n    /**\n     * batch one element\n     * @param element \n     * @param render \n     * @returns \n     */\n    private _batchOneElement(element: RenderElement, render: BaseRender) {\n        var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\n        if (insBatchMarks.indexInList == -1)\n            return;\n        let instanceelement: InstanceRenderElement = this._insElementMarksArray[insBatchMarks.indexInList];\n        if (!instanceelement) {\n            instanceelement = this._createInstanceElement(element, render, insBatchMarks);\n        }\n        let list = instanceelement._instanceBatchElementList;\n        if (list.length == InstanceRenderElement.maxInstanceCount) {\n            this._insBatchMarksNums.push(this._insBatchMarksNums[insBatchMarks.indexInList]);\n            insBatchMarks.indexInList = this._insBatchMarksNums.length - 1;\n            instanceelement = this._createInstanceElement(element, render, insBatchMarks);\n            list = instanceelement._instanceBatchElementList;\n        }\n        if (list.indexof(element) == -1) {\n            list.add(element);\n            instanceelement._isUpdataData = true;\n            (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\n            element._batchElement = instanceelement;\n        }\n    }\n\n    /**\n     * remove one element\n     * @param element \n     * @param render \n     * @returns \n     */\n    private _removeOneElement(element: RenderElement, render: BaseRender) {\n        var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\n        if (insBatchMarks.indexInList == -1)\n            return;\n        let instanceelement: InstanceRenderElement = element._batchElement as InstanceRenderElement;\n        if (!instanceelement || this._renderElements.indexOf(instanceelement) == -1) {\n            return;\n        }\n        let list = instanceelement._instanceBatchElementList;\n        if (list.indexof(element) != -1) {\n            list.remove(element);\n            instanceelement._isUpdataData = true;\n            (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\n            element._batchElement = null;\n        }\n    }\n\n    /**\n     * update one element\n     * @param element \n     * @param render \n     * @returns \n     */\n    private _updateOneElement(element: RenderElement, render: BaseRender) {\n        let instanceelement: InstanceRenderElement = element._batchElement as InstanceRenderElement;\n        if (!instanceelement || this._renderElements.indexOf(instanceelement) == -1) {\n            return;\n        }\n        let list = instanceelement._instanceBatchElementList;\n        if (list.indexof(element) != -1) {\n            instanceelement._isUpdataData = true;\n            (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\n        }\n    }\n\n    /**\n     * create instanceElement\n     * @param element \n     * @param render \n     * @param batchMark \n     * @returns \n     */\n    private _createInstanceElement(element: RenderElement, render: BaseRender, batchMark: BatchMark) {\n        let instanceRenderElement = new InstanceRenderElement();\n        instanceRenderElement.render = render;\n        instanceRenderElement.renderType = RenderElement.RENDERTYPE_INSTANCEBATCH;\n        //Geometry updaste\n        (instanceRenderElement._geometry as MeshInstanceGeometry).subMesh = (element._geometry as SubMesh);\n        instanceRenderElement.material = element.material;\n        instanceRenderElement.setTransform(null);\n        instanceRenderElement.renderSubShader = element.renderSubShader;\n        let list = instanceRenderElement._instanceBatchElementList;\n        list.length = 0;\n        list.add(element);\n        this._insElementMarksArray[batchMark.indexInList] = instanceRenderElement;\n        batchMark.batched = true;\n        if (!this._lodInstanceRenderElement[render._LOD]) {\n            this._lodInstanceRenderElement[render._LOD] = [];\n        }\n        this._lodInstanceRenderElement[render._LOD].push(instanceRenderElement);\n        return instanceRenderElement;\n    }\n\n    /**\n     * 是否满足batch条件\n     * @override\n     * @param render \n     * @returns \n     */\n    protected _canBatch(render: BaseRender): boolean {\n        let elements = render._renderElements;\n        for (var i = 0, n = elements.length; i < n; i++) {\n            let element = elements[i];\n            var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\n            if (this._insBatchMarksNums[insBatchMarks.indexInList] < this._instanceBatchminNums || element.material.renderQueue >= 3000) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @override\n     * @internal\n     * 重新计算包围盒\n     */\n    protected _calculateBoundingBox() {\n        let bound = this._bounds;\n        for (let i = 0, n = this._batchList.length; i < n; i++) {\n            if (i == 0) {\n                this._batchList.elements[i].bounds.cloneTo(bound);\n            } else {\n                Bounds.merge(bound, this._batchList.elements[i].bounds, bound);\n            }\n        }\n        let extend = this._bounds.getExtent();\n        this._lodsize = 2 * Math.max(extend.x, extend.y, extend.z);\n        return this._bounds;\n    }\n\n    /**\n     * destroy\n     */\n    protected _onDestroy() {\n        super._onDestroy();\n    }\n\n    /**\n     * 添加合批到render\n     * @param render \n     * @internal\n     * @returns \n     */\n    _batchOneRender(render: BaseRender) {\n        if (!this._canBatch(render)) return false;\n        this.boundsChange = true;\n        let elements = render._renderElements;\n        for (let i = 0, n = elements.length; i < n; i++) {\n            let renderelement = elements[i];\n            this._batchOneElement(renderelement, render);\n        }\n        render._batchRender = this;\n        render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_InstanceBatch, true);\n        return true;\n    }\n\n    /**\n     * 删除合批\n     * @Override\n     * @internal\n     * @param render \n     * @returns \n     */\n    _removeOneRender(render: BaseRender) {\n        if (!this._canBatch(render)) return;\n        if (this._batchList.indexof(render) != -1) {\n            this.boundsChange = true;\n            let elements = render._renderElements;\n            for (let i = 0, n = elements.length; i < n; i++) {\n                let renderelement = elements[i];\n                this._removeOneElement(renderelement, render);\n            }\n            render._batchRender = null;\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_InstanceBatch, false);\n        }\n    }\n\n    /**\n     * 合批过的更新数据\n     * @override\n     * @internal\n     * @param render \n     * @returns \n     */\n    _updateOneRender(render: BaseRender) {\n        if (!this._canBatch(render)) return;\n        if (this._batchList.indexof(render) != -1) {\n            this.boundsChange = true;\n            let elements = render._renderElements;\n            for (let i = 0, n = elements.length; i < n; i++) {\n                let renderelement = elements[i];\n                this._updateOneElement(renderelement, render);\n            }\n        }\n    }\n\n    /**\n     * @internal\n     * 清理所有渲染\n     */\n    _clear() {\n        super._clear();\n        this._insElementMarksArray.forEach(element => {\n            element && element.destroy();\n        });\n        \n        this._insElementMarksArray = [];\n        this._updateChangeElement = [];\n        this._insBatchMarksNums = [];\n    }\n\n\n\n    /**\n    * 合批队列传入\n    * @param renderNodes\n    */\n    addList(renderNodes: BaseRender[]) {\n        if (!this._batchList) {\n            this._batchList = new SingletonList<BaseRender>();\n        }\n        let renders: BaseRender[] = [];\n        for (var i = 0; i < renderNodes.length; i++) {\n            let baseRender = renderNodes[i];\n            if (baseRender._batchRender) {\n                continue;\n            }\n            if (this._isRenderNodeAllCanInstanceBatch(baseRender)) {\n                // this._batchList.add(baseRender);\n                renders.push(baseRender);\n                this._sumInstanceBatch(baseRender);\n            }\n        }\n        for (var i = 0, n = renders.length; i < n; i++) {\n            let baseRender = renders[i];\n            if (this._canBatch(baseRender)) {\n                this._batchList.add(baseRender);\n            }\n        }\n    }\n    /**\n     * 根据_batchList合批\n     */\n    reBatch() {\n        let renderNums = this._batchList.length;\n        let renders = this._batchList.elements;\n        for (var i = 0; i < renderNums; i++) {\n            let render = renders[i];\n            this._batchOneRender(render);\n        }\n    }\n\n}","import { BaseRender } from \"../../../core/render/BaseRender\";\nimport { BatchRender } from \"./BatchRender\";\n\nexport class StatiVertexMergeBatchRender extends BatchRender {\n    \n    //TODO 好像基类不需要\n    _addList(renderNodes: BaseRender[]) {\n        //TODO  add list\n    }\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\nimport { BaseRender } from \"../../../core/render/BaseRender\";\nimport { Sprite3D, StaticFlag } from \"../../../core/Sprite3D\";\nimport { Volume } from \"../Volume\";\nimport { BatchRender } from \"./BatchRender\";\nimport { StaticInstanceBatchRender } from \"./StaticInstanceBatchRender\";\nimport { StatiVertexMergeBatchRender } from \"./StatiVertexMergeBatchRender\";\n\n/**\n * 类用来描述一个可合并渲染节点的体积\n */\nexport class StaticBatchVolume extends Volume {\n\n    /**@internal 缓存可以合并的*/\n    private _cacheRender: SingletonList<BaseRender>;\n\n    /**@internal 已经合并了的BaseRender */\n    private _batchRender: SingletonList<BaseRender>;\n\n    /**@internal 是否根据LOD属性优化 */\n    private _checkLOD: boolean;//是否考虑LOD\n\n    /** StaticInstanceBatch */\n    /**@internal 是否开启静态物体Instance的合批 */\n    private _enableStaticInstanceBatch: boolean;\n\n    /**@internal 内置静态物体Instance合批 */\n    private _instanceBatchRender: StaticInstanceBatchRender;\n\n    /**StaticVertexMergeBatch */\n    /**@internal 是否开启顶点静态合批 TODO */\n    private _enableStaticVertexMergeBatch: boolean;\n\n    /**@internal 顶点静态合批  TODO*/\n    private _vertexMergeBatchRender: StatiVertexMergeBatchRender;\n\n    /**@internal CustomBatch自定义的batch流程*/\n    private _enableCustomBatch: boolean;\n\n    /**@internal */\n    private _customBatchs: BatchRender[] = [];\n\n    /**\n     * @internal\n     * @returns \n     */\n    private _getStaticInstanceBatchRender(): StaticInstanceBatchRender {\n        let render = (this.owner as Sprite3D).getComponent(StaticInstanceBatchRender);\n        if (!render) {\n            render = (this.owner as Sprite3D).addComponent(StaticInstanceBatchRender) as StaticInstanceBatchRender;\n        }\n        return render;\n    }\n\n    /**\n     * @internal\n     * @returns \n     */\n    private _getStatiVertexMergeBatchRender(): StatiVertexMergeBatchRender {\n        let render = (this.owner as Sprite3D).getComponent(StatiVertexMergeBatchRender);\n        if (!render) {\n            render = (this.owner as Sprite3D).addComponent(StatiVertexMergeBatchRender) as StatiVertexMergeBatchRender;\n        }\n        return render;\n    }\n\n    /**\n     * 合批是否考虑LOD\n     */\n    get checkLOD(): boolean {\n        return this._checkLOD;\n    }\n\n    set checkLOD(value: boolean) {\n        this._checkLOD = value;\n        if (this._enableStaticInstanceBatch) {\n            this._instanceBatchRender.checkLOD = value;\n        }\n        if (this._enableStaticVertexMergeBatch) {\n            this._vertexMergeBatchRender.checkLOD = value;\n        }\n        if (this._enableCustomBatch) {\n            this._customBatchs.forEach(element => {\n                element.checkLOD = value;\n            });\n        }\n    }\n\n    /**\n     * 开启静态Instance实例合批\n     */\n    get enableStaticInstanceBatchRender(): boolean {\n        return this._enableStaticInstanceBatch;\n    }\n\n    set enableStaticInstanceBatchRender(value: boolean) {\n        if (!this._instanceBatchRender && value) {\n            this._instanceBatchRender = this._getStaticInstanceBatchRender();\n        }\n        if (value == this._enableStaticInstanceBatch)\n            return;\n        if (value) {\n            this._instanceBatchRender.enabled = true;\n        } else {\n            this._instanceBatchRender.enabled = false;\n        }\n        this._enableStaticInstanceBatch = value;\n    }\n\n    /**\n     * 开启静态顶点合批\n     */\n    get enableMergeBatchRender() {\n        return this._enableStaticVertexMergeBatch;\n    }\n\n    set enableMergeBatchRender(value: boolean) {\n        if (!this._vertexMergeBatchRender && value) {\n            this._vertexMergeBatchRender = this._getStatiVertexMergeBatchRender();\n        }\n        if (value == this._enableStaticVertexMergeBatch)\n            return;\n        if (value) {\n            this._vertexMergeBatchRender.enabled = true;\n        } else {\n            this._vertexMergeBatchRender.enabled = false;\n        }\n        this._enableStaticVertexMergeBatch = value;\n    }\n\n    /**\n     * 开启自定义合批\n     */\n    get enableCustomBatchRender() {\n        return this._enableCustomBatch;\n    }\n\n    set enableCustomBatchRender(value: boolean) {\n        this._enableCustomBatch = value;\n        this._customBatchs.forEach(element => {\n            element.enabled = value;\n        });\n    }\n\n    /**\n     * 设置自定义的合批方案BatchRender\n     */\n    set customBatchRenders(value: BatchRender[]) {\n        if (this._customBatchs) {\n            this._customBatchs.forEach(element => {\n                (this.owner as Sprite3D)._destroyComponent(element);\n            });\n        }\n        this._customBatchs = value;\n        this._customBatchs.forEach(element => {\n            (this.owner as Sprite3D).addComponentInstance(element);\n        });\n        this.enableCustomBatchRender = this._enableCustomBatch;\n    }\n\n    get customBatchRenders() {\n        return this._customBatchs;\n    }\n\n    /**\n     * 创建一个<code>BatchVolume</code>实例\n     */\n    constructor() {\n        super();\n        this.checkLOD = true;\n        this._enableStaticInstanceBatch = false;\n        this._enableStaticVertexMergeBatch = false;\n        this._cacheRender = new SingletonList<BaseRender>();\n        this._batchRender = new SingletonList<BaseRender>();\n        this._enableCustomBatch = false;\n    }\n\n    /**     \n     * Restoring the Batch Render State\n     */\n    private _restorRenderNode() {\n        if (this.enableCustomBatchRender) {\n            this._customBatchs.forEach(element => {\n                element._clear();\n            });\n        }\n        if (this._enableStaticInstanceBatch) {\n            this._instanceBatchRender._clear();\n        }\n        if (this.enableCustomBatchRender) {\n            this._vertexMergeBatchRender._clear();\n        }\n    }\n\n    /**\n     * add one RenderNode\n     * @param renderNode \n     * @returns \n     */\n    private __addRenderNodeToBatch(renderNode: BaseRender) {\n        //动态增加合并批次\n        if (this.enableCustomBatchRender) {\n            this._customBatchs.forEach(element => {\n                if (element._batchOneRender(renderNode)) return;\n            });\n        }\n        if (this._enableStaticInstanceBatch) {\n            if (this._instanceBatchRender._batchOneRender(renderNode)) return;\n        }\n        if (this.enableCustomBatchRender) {\n            if (this._vertexMergeBatchRender._batchOneRender(renderNode)) return;\n        }\n    }\n\n    /**\n     * remove one RenderNode\n     * @param renderNode \n     */\n    private __removeRenderNodeFromBatch(renderNode: BaseRender) {\n        //动态删除合并批次\n        renderNode._batchRender._removeOneRender(renderNode);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onEnable(): void {\n        super._onEnable();\n        if (this._enableStaticInstanceBatch)\n            this._instanceBatchRender && (this._instanceBatchRender.enabled = true);\n        if (this._enableStaticVertexMergeBatch)\n            this._vertexMergeBatchRender && (this._vertexMergeBatchRender.enabled = true);\n        if (this.enableCustomBatchRender) {\n            this._customBatchs.forEach(element => {\n                element.enabled = true;\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    protected _onDisable(): void {\n        super._onDisable();\n        if (this._enableStaticInstanceBatch)\n            this._instanceBatchRender && (this._instanceBatchRender.enabled = false);\n        if (this._enableStaticVertexMergeBatch)\n            this._vertexMergeBatchRender && (this._vertexMergeBatchRender.enabled = false);\n        if (this.enableCustomBatchRender) {\n            this._customBatchs.forEach(element => {\n                element.enabled = false;\n            });\n        }\n    }\n\n    /**\n     * 当一个渲染节点进入体积\n     * @internal\n     * @override\n     * @param renderNode \n     */\n    _addRenderNode?(renderNode: BaseRender): void {\n        if (renderNode.renderNode.staticMask == StaticFlag.StaticBatch) {\n            if (this._cacheRender.indexof(renderNode) != -1) {\n                return;\n            }\n            this._cacheRender.add(renderNode);\n            if (this._batchRender.length > 0) {//if batch exited\n                this.__addRenderNodeToBatch(renderNode);\n            }\n        }\n    }\n\n    /**\n     * 当一个渲染节点移除体积\n     * @internal\n     * @override\n     * @param renderNode    \n     */\n    _removeRenderNode(renderNode: BaseRender): void {\n        if (renderNode.renderNode.staticMask == StaticFlag.StaticBatch) {\n            if (this._batchRender.indexof(renderNode) != -1) {\n                this.__removeRenderNodeFromBatch(renderNode);\n                this._batchRender.remove(renderNode);\n            }\n        }\n    }\n\n    /**\n     * @internal\n     * Volume change\n     */\n    _VolumeChange() {\n        super._VolumeChange();\n        this._cacheRender.clear();\n    }\n\n    /**\n     * @internal\n     */\n    onStart() {\n        this.reBatch();\n    }\n\n    /**\n     * 重新合批,将清理前面状态\n     * 必要时需要手动调用,根据Volume里面的值,进行合批\n     */\n    reBatch() {\n        this._cacheRender.elements.length = this._cacheRender.length;\n        this._batchRender.clear();\n        this._restorRenderNode();\n        if (this.enableCustomBatchRender) {\n            this._customBatchs.forEach(element => {\n                element.addList(this._cacheRender.elements);\n                element.reBatch();\n            });\n        }\n        if (this._enableStaticInstanceBatch) {\n            this._instanceBatchRender.addList(this._cacheRender.elements);\n            this._instanceBatchRender.reBatch();\n        }\n        if (this.enableCustomBatchRender) {\n            this._vertexMergeBatchRender.addList(this._cacheRender.elements);\n            this._vertexMergeBatchRender.reBatch();\n        }\n        //UpdateBatch Render\n        for (var i = 0, n = this._cacheRender.length; i < n; i++) {\n            (this._cacheRender.elements[i]._batchRender) && this._batchRender.add(this._cacheRender.elements[i]);\n        }\n    }\n}","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\nimport { AnimationClip } from \"../animation/AnimationClip\";\n\nclass AnimationClipLoader implements IResourceLoader {\n    load(task: ILoadTask) {\n        return task.loader.fetch(task.url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\n            if (!data)\n                return null;\n\n            return AnimationClip._parse(data);\n        });\n    }\n}\n\nLoader.registerLoader([\"lani\"], AnimationClipLoader, Loader.ANIMATIONCLIP);","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\nimport { URL } from \"../../net/URL\";\nimport { KTXTextureInfo } from \"../../RenderEngine/KTXTextureInfo\";\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\nimport { TextureDimension } from \"../../RenderEngine/RenderEnum/TextureDimension\";\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\nimport { AssetDb } from \"../../resource/AssetDb\";\nimport { Resource } from \"../../resource/Resource\";\nimport { Byte } from \"../../utils/Byte\";\nimport { Utils } from \"../../utils/Utils\";\nimport { TextureCube } from \"../resource/TextureCube\";\n\nvar internalResources: Record<string, TextureCube>;\n\nclass CubemapLoader implements IResourceLoader {\n    constructor() {\n        if (!internalResources) {\n            internalResources = {\n                \"WhiteTextureCube.ltc\": TextureCube.whiteTexture,\n                \"BlackTextureCube.ltc\": TextureCube.blackTexture,\n                \"GrayTextureCube.ltc\": TextureCube.grayTexture,\n            };\n        }\n    }\n\n    load(task: ILoadTask) {\n        if (task.url.indexOf(\"internal/\") != -1) {\n            let tex = internalResources[Utils.getBaseName(task.url)];\n            if (tex)\n                return Promise.resolve(tex);\n        }\n\n        if (task.ext == \"ktx\" || task.ext == \"cubemap\") {\n            let url = task.url;\n            if (task.ext == \"cubemap\")\n                url = AssetDb.inst.getSubAssetURL(url, task.uuid, \"0\", \"ktx\");\n\n            return task.loader.fetch(url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\n                if (!data)\n                    return null;\n\n                let ktxInfo = KTXTextureInfo.getKTXTextureInfo(data);\n                if (ktxInfo.dimension != TextureDimension.Cube) {\n                    console.warn(\"ktxInfo.dimension != TextureDimension.Cube! \" + task.url);\n                    return null;\n                }\n\n                let tex = new TextureCube(ktxInfo.width, ktxInfo.format, ktxInfo.mipmapCount > 1, ktxInfo.sRGB);\n                tex.setKTXData(ktxInfo);\n\n                let obsoluteInst = task.obsoluteInst;\n                if (obsoluteInst && (obsoluteInst instanceof TextureCube))\n                    tex = this.move(obsoluteInst, tex);\n\n                return tex;\n            });\n        }\n        else if (task.ext == \"ltcb\" || task.ext == \"ltcb.ls\") {\n            return task.loader.fetch(task.url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\n                if (!data)\n                    return null;\n\n                let byte: Byte = new Byte(data);\n                let version: string = byte.readUTFString();\n                if (version !== \"LAYATEXTURECUBE:0000\") {\n                    console.warn(`CubemapBinLoader: unknow version. ${version}`);\n                    return null;\n                }\n                let format: TextureFormat = <TextureFormat>byte.readUint8();\n                let mipCount: number = byte.getUint8();\n                let size: number = byte.readUint16();\n                let filterMode: FilterMode = <FilterMode>byte.getUint8();\n                let wrapModeU: WrapMode = <WrapMode>byte.getUint8();\n                let wrapModev: WrapMode = <WrapMode>byte.getUint8();\n                let anisoLevel: FilterMode = byte.getUint8();\n\n                let tex: TextureCube = new TextureCube(size, format, mipCount > 1 ? true : false);\n                tex.setPixelsData(null, false, false);\n                tex.filterMode = filterMode;\n                tex.wrapModeU = wrapModeU;\n                tex.wrapModeV = wrapModev;\n                tex.anisoLevel = anisoLevel;\n                let pos: number = byte.pos;\n                let mipSize: number = size;\n                for (let i = 0; i < mipCount; i++) {\n                    let uint8Arrays: Array<Uint8Array> = new Array<Uint8Array>(6);\n                    let mipPixelLength: number = mipSize * mipSize * tex._getFormatByteCount();\n                    for (let j = 0; j < 6; j++) {\n                        uint8Arrays[j] = new Uint8Array(data, pos, mipPixelLength);\n                        pos += mipPixelLength;\n                    }\n                    // todo  自动生成 mipmap 与 手动设置 mipmap\n                    tex.updateSubPixelsData(uint8Arrays, 0, 0, mipSize, mipSize, i, false, false, false);\n                    mipSize /= 2;\n                }\n\n                let obsoluteInst = task.obsoluteInst;\n                if (obsoluteInst && (obsoluteInst instanceof TextureCube))\n                    tex = this.move(obsoluteInst, tex);\n                return tex;\n            });\n        }\n        else {\n            return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\n                if (!data)\n                    return null;\n\n                let ltcBasePath: string = URL.getPath(task.url);\n                let urls: any[] = [\n                    URL.join(ltcBasePath, data.front),\n                    URL.join(ltcBasePath, data.back),\n                    URL.join(ltcBasePath, data.left),\n                    URL.join(ltcBasePath, data.right),\n                    URL.join(ltcBasePath, data.up),\n                    URL.join(ltcBasePath, data.down)\n                ];\n\n                return Promise.all(urls.map(url => {\n                    if (url)\n                        return task.loader.fetch(url, \"image\", task.progress.createCallback(), task.options);\n                    else\n                        return Promise.resolve(null);\n                })).then(images => {\n                    let constructParams = task.options.constructParams;\n                    let size = constructParams ? constructParams[0] : ((images[0]?.width) ?? 1);\n                    let format = constructParams ? constructParams[1] : TextureFormat.R8G8B8A8;\n                    let mipmap = constructParams ? constructParams[3] : false;\n                    let srgb = constructParams ? constructParams[5] : true;\n                    let tex = new TextureCube(size, format, mipmap, srgb);\n                    tex.setImageData(images, false, false);\n\n                    let obsoluteInst = task.obsoluteInst;\n                    if (obsoluteInst && (obsoluteInst instanceof TextureCube))\n                        tex = this.move(obsoluteInst, tex);\n                    return tex;\n                });\n            });\n        }\n    }\n\n    private move(obsoluteInst: TextureCube, tex: TextureCube) {\n        obsoluteInst._texture = tex._texture;\n        obsoluteInst.width = tex.width;\n        obsoluteInst.height = tex.height;\n        obsoluteInst.obsolute = false;\n        delete Resource._idResourcesMap[tex.id];\n        return obsoluteInst;\n    }\n}\n\nLoader.registerLoader([\"ltc\", \"ltcb\", \"ltcb.ls\", \"cubemap\"], CubemapLoader, Loader.TEXTURECUBE);","import { Color } from \"../../maths/Color\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { ILoadURL, Loader } from \"../../net/Loader\";\nimport { URL } from \"../../net/URL\";\nimport { BlendEquationSeparate } from \"../../RenderEngine/RenderEnum/BlendEquationSeparate\";\nimport { BlendFactor } from \"../../RenderEngine/RenderEnum/BlendFactor\";\nimport { CompareFunction } from \"../../RenderEngine/RenderEnum/CompareFunction\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\nimport { ClassUtils } from \"../../utils/ClassUtils\";\nimport { Material } from \"../core/material/Material\";\n\nexport class MaterialParser {\n\n    static parse(data: any): Material {\n        let props: any = data.props;\n\n        switch (data.version) {\n            case \"LAYAMATERIAL:01\":\n            case \"LAYAMATERIAL:02\":\n            case \"LAYAMATERIAL:03\":\n                 let mat = MaterialParser.parseLegacy(data);\n                 mat.oldparseEndEvent();\n                 return mat;\n            case \"LAYAMATERIAL:04\":\n                break;\n            default:\n                console.error(\"Material:unkonwn version.\");\n                return null;\n        }\n\n        let mat = new Material();\n        mat.setShaderName(props.type);\n\n        for (let key in props) {\n            switch (key) {\n                case \"type\":\n                case \"name\":\n                    break;\n                case \"defines\":\n                    let defineNames: any[] = props[key];\n                    for (let i = 0, n = defineNames.length; i < n; i++) {\n                        let define: ShaderDefine = Shader3D.getDefineByName(defineNames[i]);//TODO:是否取消defines\n                        mat._shaderValues.addDefine(define);\n                    }\n                    break;\n                case \"textures\":\n                    let textures: any[] = props[key];\n                    for (let i = 0, n = textures.length; i < n; i++) {\n                        let texture: any = textures[i];\n                        let path: string = texture.path;\n                        (path) && (mat._shaderValues.setTexture(Shader3D.propertyNameToID(texture.name), Loader.getBaseTexture(path)));\n                    }\n                    break;\n                case \"renderQueue\":\n                    mat.renderQueue = props[key];\n                    break;\n                case \"alphaTest\":\n                    mat.alphaTest = props[key];\n                    break;\n                case \"materialRenderMode\":\n                    mat.materialRenderMode = props[key];\n                    break;\n                default:\n                    let property = props[key];\n                    let uniName = Shader3D.propertyNameToID(key);\n\n                    switch (uniName) {\n                        case Material.CULL:\n                            mat.cull = property;\n                            break;\n                        case Material.BLEND:\n                            mat.blend = property;\n                            break;\n                        case Material.BLEND_SRC:\n                            mat.blendSrc = property;\n                            break;\n                        case Material.BLEND_DST:\n                            mat.blendDst = property;\n                            break;\n                        case Material.DEPTH_TEST:\n                            mat.depthTest = property;\n                            break;\n                        case Material.DEPTH_WRITE:\n                            mat.depthWrite = !!props[key];\n                            break;\n                        default:\n                            if (!property.length) {\n                                mat._shaderValues.setNumber(uniName, props[key]);\n                            } else {\n                                var vectorValue = property;\n                                switch (vectorValue.length) {\n                                    case 2:\n                                        mat._shaderValues.setVector2(uniName, new Vector2(vectorValue[0], vectorValue[1]));\n                                        break;\n                                    case 3:\n                                        mat._shaderValues.setVector3(uniName, new Vector3(vectorValue[0], vectorValue[1], vectorValue[2]));\n                                        break;\n                                    case 4:\n                                        if (mat._shaderValues.getColor(uniName)) {\n                                            mat._shaderValues.setColor(uniName, new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\n                                        } else\n                                            mat._shaderValues.setVector(uniName, new Vector4(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\n                                        break;\n                                    default:\n                                        mat._shaderValues.setBuffer(uniName, vectorValue);\n                                }\n                            }\n                            break;\n                    }\n            }\n        }\n\n        return mat;\n    }\n\n    static collectLinks(data: any, basePath: string) {\n        let urls: ILoadURL[] = [];\n        let textures: any[] = data.props.textures;\n        if (textures) {\n            for (let i = 0, n = textures.length; i < n; i++) {\n                let tex2D: any = textures[i];\n                let tex2DPath: string = tex2D.path;\n                if (tex2DPath) {\n                    tex2D.path = URL.join(basePath, tex2DPath);\n                    urls.push({ url: tex2D.path, type: Loader.TEXTURE2D, constructParams: tex2D.constructParams, propertyParams: tex2D.propertyParams });\n                }\n            }\n        }\n        return urls;\n    }\n\n\n    /**\n     * @deprecated\n     * @inheritDoc\n     */\n    static parseLegacy(data: any): Material {\n        let jsonData: any = data;\n        let props: any = jsonData.props;\n\n        let mat: Material;\n        let classType: string = props.type;\n        let clas: any = ClassUtils.getClass(classType);\n        if (!clas && classType && classType.startsWith(\"Laya.\"))\n            clas = ClassUtils.getClass(classType.substring(5));\n        if (clas)\n            mat = new clas();\n        else {\n            mat = new Material();\n            mat.setShaderName(classType);\n        }\n\n        switch (jsonData.version) {\n            case \"LAYAMATERIAL:01\":\n            case \"LAYAMATERIAL:02\":\n                for (let key in props) {\n                    switch (key) {\n                        case \"type\":\n                            break;\n                        case \"vectors\":\n                            let vectors = props[key];\n                            for (let i = 0, n = vectors.length; i < n; i++) {\n                                let vector = vectors[i];\n                                let vectorValue = vector.value;\n                                switch (vectorValue.length) {\n                                    case 2:\n                                        (<any>mat)[vector.name] = new Vector2(vectorValue[0], vectorValue[1]);\n                                        break;\n                                    case 3:\n                                        if ((<any>mat)[vector.name] instanceof Color) {\n                                            (<any>mat)[vector.name] = new Color(vectorValue[0], vectorValue[1], vectorValue[2], 1.0);\n                                        } else\n                                            (<any>mat)[vector.name] = new Vector3(vectorValue[0], vectorValue[1], vectorValue[2]);\n                                        break;\n                                    case 4:\n                                        if ((<any>mat)[vector.name] instanceof Color) {\n                                            (<any>mat)[vector.name] = new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]);\n                                        } else\n                                            (<any>mat)[vector.name] = new Vector4(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]);\n                                        break;\n                                    default:\n                                        throw new Error(\"Material:unkonwn color length.\");\n                                }\n                            }\n                            break;\n                        case \"colors\":\n                            let colors = props[key];\n                            for (let i = 0, n = colors.length; i < n; i++) {\n                                let color = colors[i];\n                                let vectorValue = color.value;\n                                (<any>mat)[color.name] = new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3])\n                            }\n                            break;\n                        case \"textures\":\n                            let textures: any[] = props[key];\n                            for (let i = 0, n = textures.length; i < n; i++) {\n                                let texture: any = textures[i];\n                                let path: string = texture.path;\n                                (path) && ((<any>mat)[texture.name] = Loader.getBaseTexture(path));\n                            }\n                            break;\n                        case \"defines\":\n                            let defineNames: any[] = props[key];\n                            for (let i = 0, n = defineNames.length; i < n; i++) {\n                                let define: ShaderDefine = Shader3D.getDefineByName(defineNames[i]);//TODO:是否取消defines\n                                mat._shaderValues.addDefine(define);\n                            }\n                            break;\n                        case \"renderStates\"://\"LAYAMATERIAL:02\" \n                            let renderStatesData: any[] = props[key];\n                            let renderStateData: any = renderStatesData[0];\n                            mat.blend = renderStateData.blend;\n                            mat.cull = this._getRenderStateParams(renderStateData.cull);\n                            mat.depthTest = this._getRenderStateParams(renderStateData.depthTest);\n                            mat.depthWrite = renderStateData.depthWrite;\n                            mat.blendSrc = this._getRenderStateParams(renderStateData.srcBlend);\n                            mat.blendDst = this._getRenderStateParams(renderStateData.dstBlend);\n                            break;\n                        case \"cull\"://\"LAYAMATERIAL:01\"\n                            mat.cull = this._getRenderStateParams(props[key]);\n                            break;\n                        case \"blend\"://\"LAYAMATERIAL:01\"\n                            mat.blend = this._getRenderStateParams(props[key]);\n                            break;\n                        case \"depthWrite\"://\"LAYAMATERIAL:01\" \n                            mat.depthWrite = !!props[key];\n                            break;\n                        case \"srcBlend\"://\"LAYAMATERIAL:01\" \n                            mat.blendSrc = this._getRenderStateParams(props[key]);\n                            break;\n                        case \"dstBlend\"://\"LAYAMATERIAL:01\" \n                            mat.blendDst = this._getRenderStateParams(props[key]);\n                            break;\n                        case \"depthTest\":\n                            mat.depthTest = this._getRenderStateParams(props[key]);\n                            break;\n                        case \"blendDst\":\n                            mat.blendDst = this._getRenderStateParams(props[key]);\n                            break;\n                        case \"blendSrc\":\n                            mat.blendSrc = this._getRenderStateParams(props[key]);\n                            break;\n                        default:\n                            (<any>mat)[key] = props[key];\n                    }\n                }\n                break;\n            case \"LAYAMATERIAL:03\":\n                for (let key in props) {\n                    switch (key) {\n                        case \"type\":\n                        case \"name\":\n                            break;\n                        case \"defines\":\n                            let defineNames: any[] = props[key];\n                            for (let i = 0, n = defineNames.length; i < n; i++) {\n                                let define: ShaderDefine = Shader3D.getDefineByName(defineNames[i]);//TODO:是否取消defines\n                                mat._shaderValues.addDefine(define);\n                            }\n                            break;\n                        case \"textures\":\n                            let textures: any[] = props[key];\n                            for (let i = 0, n = textures.length; i < n; i++) {\n                                let texture: any = textures[i];\n                                let path: string = texture.path;\n                                (path) && (mat._shaderValues.setTexture(Shader3D.propertyNameToID(texture.name), Loader.getBaseTexture(path)));\n                            }\n                            break;\n                        case \"renderQueue\":\n                            mat.renderQueue = props[key];\n                            break;\n                        default:\n                            let property = props[key];\n                            let uniName = Shader3D.propertyNameToID(key);\n\n                            switch (uniName) {\n                                case Material.CULL:\n                                    mat.cull = this._getRenderStateParams(property);\n                                    break;\n                                case Material.BLEND:\n                                    mat.blend = this._getRenderStateParams(property);\n                                    break;\n                                case Material.BLEND_SRC:\n                                    mat.blendSrc = this._getRenderStateParams(property);\n                                    break;\n                                case Material.BLEND_DST:\n                                    mat.blendDst = this._getRenderStateParams(property);\n                                    break;\n                                case Material.DEPTH_TEST:\n                                    mat.depthTest = this._getRenderStateParams(property);\n                                    break;\n                                case Material.DEPTH_WRITE:\n                                    mat.depthWrite = !!props[key];\n                                    break;\n                                default:\n                                    if (!property.length) {\n                                        mat._shaderValues.setNumber(uniName, props[key]);\n                                    } else {\n                                        var vectorValue = property;\n                                        switch (vectorValue.length) {\n                                            case 2:\n                                                mat._shaderValues.setVector2(uniName, new Vector2(vectorValue[0], vectorValue[1]));\n                                                break;\n                                            case 3:\n                                                mat._shaderValues.setVector3(uniName, new Vector3(vectorValue[0], vectorValue[1], vectorValue[2]));\n                                                break;\n                                            case 4:\n                                                if (mat._shaderValues.getColor(uniName)) {\n                                                    mat._shaderValues.setColor(uniName, new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\n                                                } else\n                                                    mat._shaderValues.setVector(uniName, new Vector4(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\n                                                break;\n                                            default:\n                                                throw new Error(\"Material:unkonwn color length.\");\n                                        }\n                                    }\n                                    break;\n                            }\n\n\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Material:unkonwn version.\");\n        }\n        return mat;\n    }\n\n\n    /**\n        * @deprecated\n        * 兼容Blend数据\n        */\n    private static _getRenderStateParams(type: number) {\n        switch (type) {\n            case 0x0300:\n                return BlendFactor.SourceColor;\n            case 0x0301:\n                return BlendFactor.OneMinusSourceColor;\n            case 0x0306:\n                return BlendFactor.DestinationColor;\n            case 0x0307:\n                return BlendFactor.OneMinusDestinationColor;\n            case 0x0302:\n                return BlendFactor.SourceAlpha;\n            case 0x0303:\n                return BlendFactor.OneMinusSourceAlpha;\n            case 0x0304:\n                return BlendFactor.DestinationAlpha;\n            case 0x0305:\n                return BlendFactor.OneMinusDestinationAlpha;\n            case 0x0308:\n                return BlendFactor.SourceAlphaSaturate;\n            case 0x8006:\n                return BlendEquationSeparate.ADD;\n            case 0x800A:\n                return BlendEquationSeparate.SUBTRACT;\n            case 0x800B:\n                return BlendEquationSeparate.REVERSE_SUBTRACT;\n            case 0x0200:\n                return CompareFunction.Never;\n            case 0x0201:\n                return CompareFunction.Less;\n            case 0x0202:\n                return CompareFunction.Equal;\n            case 0x0203:\n                return CompareFunction.LessEqual;\n            case 0x0204:\n                return CompareFunction.Greater;\n            case 0x0205:\n                return CompareFunction.NotEqual;\n            case 0x0206:\n                return CompareFunction.GreaterEqual;\n            case 0x0207:\n                return CompareFunction.Always;\n            default:\n                return type;\n        }\n    }\n}","import { IResourceLoader, ILoadTask, Loader, ILoadURL } from \"../../net/Loader\";\nimport { URL } from \"../../net/URL\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { AssetDb } from \"../../resource/AssetDb\";\nimport { Material } from \"../core/material/Material\";\nimport { MaterialParser } from \"./MaterialParser\";\n\nclass MaterialLoader implements IResourceLoader {\n    load(task: ILoadTask) {\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.3), task.options).then(data => {\n            if (!data)\n                return null;\n\n            let basePath = URL.getPath(task.url);\n            let urls: Array<ILoadURL | string> = MaterialParser.collectLinks(data, basePath);\n\n            if (data.version === \"LAYAMATERIAL:04\") {\n                let shaderName = data.props.type;\n                if (!Shader3D.find(shaderName)) {\n                    let url = AssetDb.inst.shaderName_to_URL(shaderName);\n                    if (url)\n                        urls.push(url);\n                    else {\n                        let promise = AssetDb.inst.shaderName_to_URL_async(shaderName);\n                        if (promise) {\n                            return promise.then(url => {\n                                if (url)\n                                    urls.push(url);\n                                return this.load2(task, data, urls);\n                            });\n                        }\n                        else if (data.props.shaderPath) {\n                            urls.push(URL.join(basePath, data.props.shaderPath));\n                        }\n                    }\n                }\n            }\n\n            return this.load2(task, data, urls);\n        });\n    }\n\n    private load2(task: ILoadTask, data: any, urls: Array<any>): Promise<any> {\n        if (urls.length == 0) {\n            let mat = MaterialParser.parse(data);\n            let obsoluteInst = <Material>task.obsoluteInst;\n            if (obsoluteInst)\n                mat = this.move(obsoluteInst, mat);\n            return Promise.resolve(mat);\n        }\n\n        return task.loader.load(urls, task.options, task.progress.createCallback()).then(() => {\n            let mat = MaterialParser.parse(data);\n\n            let obsoluteInst = <Material>task.obsoluteInst;\n            if (task.obsoluteInst)\n                mat = this.move(obsoluteInst, mat);\n            return mat;\n        });\n    }\n\n    private move(obsoluteInst: Material, mat: Material) {\n        obsoluteInst._shaderValues.reset();\n        obsoluteInst.setShaderName(mat._shader.name);\n        mat._shaderValues.cloneTo(obsoluteInst._shaderValues);\n        obsoluteInst.renderQueue = mat.renderQueue;\n        obsoluteInst.obsolute = false;\n        mat.destroy();\n        return obsoluteInst;\n    }\n}\n\nLoader.registerLoader([\"lmat\"], MaterialLoader, Loader.MATERIAL);","\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\nimport { SubMesh } from \"../resource/models/SubMesh\"\nimport { Byte } from \"../../utils/Byte\"\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\"\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\"\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\"\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\n\n/**\n * @internal\n * <code>LoadModel</code> 类用于模型加载。\n */\nexport class LoadModelV04 {\n\n\t/**@internal */\n\tprivate static _BLOCK: any = { count: 0 };\n\t/**@internal */\n\tprivate static _DATA: any = { offset: 0, size: 0 };\n\n\t/**@internal */\n\tprivate static _strings: any[] = [];\n\t/**@internal */\n\tprivate static _readData: Byte;\n\t/**@internal */\n\tprivate static _version: string;\n\t/**@internal */\n\tprivate static _mesh: Mesh;\n\t/**@internal */\n\tprivate static _subMeshes: SubMesh[];\n\n\t/**\n\t * @internal\n\t */\n\tstatic parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\n\t\tLoadModelV04._mesh = mesh;\n\t\tLoadModelV04._subMeshes = subMeshes;\n\t\tLoadModelV04._version = version;\n\t\tLoadModelV04._readData = readData;\n\t\tLoadModelV04.READ_DATA();\n\t\tLoadModelV04.READ_BLOCK();\n\t\tLoadModelV04.READ_STRINGS();\n\t\tfor (var i: number = 0, n: number = LoadModelV04._BLOCK.count; i < n; i++) {\n\t\t\tLoadModelV04._readData.pos = LoadModelV04._BLOCK.blockStarts[i];\n\t\t\tvar index: number = LoadModelV04._readData.getUint16();\n\t\t\tvar blockName: string = LoadModelV04._strings[index];\n\t\t\tvar fn: Function = (LoadModelV04 as any)[\"READ_\" + blockName];\n\t\t\tif (fn == null)\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\n\t\t\telse\n\t\t\t\tfn.call(null);\n\t\t}\n\t\tLoadModelV04._strings.length = 0;\n\t\tLoadModelV04._readData = null;\n\t\tLoadModelV04._version = null;\n\t\tLoadModelV04._mesh = null;\n\t\tLoadModelV04._subMeshes = null;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static _readString(): string {\n\t\treturn LoadModelV04._strings[LoadModelV04._readData.getUint16()];\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static READ_DATA(): void {\n\t\tLoadModelV04._DATA.offset = LoadModelV04._readData.getUint32();\n\t\tLoadModelV04._DATA.size = LoadModelV04._readData.getUint32();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static READ_BLOCK(): void {\n\t\tvar count: number = LoadModelV04._BLOCK.count = LoadModelV04._readData.getUint16();\n\t\tvar blockStarts: any[] = LoadModelV04._BLOCK.blockStarts = [];\n\t\tvar blockLengths: any[] = LoadModelV04._BLOCK.blockLengths = [];\n\t\tfor (var i: number = 0; i < count; i++) {\n\t\t\tblockStarts.push(LoadModelV04._readData.getUint32());\n\t\t\tblockLengths.push(LoadModelV04._readData.getUint32());\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static READ_STRINGS(): void {\n\t\tvar offset: number = LoadModelV04._readData.getUint32();\n\t\tvar count: number = LoadModelV04._readData.getUint16();\n\t\tvar prePos: number = LoadModelV04._readData.pos;\n\t\tLoadModelV04._readData.pos = offset + LoadModelV04._DATA.offset;\n\n\t\tfor (var i: number = 0; i < count; i++)\n\t\t\tLoadModelV04._strings[i] = LoadModelV04._readData.readUTFString();\n\n\t\tLoadModelV04._readData.pos = prePos;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static READ_MESH(): boolean {\n\t\tvar name: string = LoadModelV04._readString();\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\n\t\tvar i: number;\n\n\t\tvar memorySize: number = 0;\n\t\tvar vertexBufferCount: number = LoadModelV04._readData.getInt16();\n\t\tvar offset: number = LoadModelV04._DATA.offset;\n\t\tfor (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\n\t\t\tvar vbStart: number = offset + LoadModelV04._readData.getUint32();\n\t\t\tvar vbLength: number = LoadModelV04._readData.getUint32();\n\t\t\tvar vbArrayBuffer: ArrayBuffer = arrayBuffer.slice(vbStart, vbStart + vbLength);\n\t\t\tvar vbDatas: Float32Array = new Float32Array(vbArrayBuffer);\n\t\t\tvar bufferAttribute: string = LoadModelV04._readString();\n\t\t\tvar vertexDeclaration: VertexDeclaration;\n\t\t\tswitch (LoadModelV04._version) {\n\t\t\t\tcase \"LAYAMODEL:0301\":\n\t\t\t\tcase \"LAYAMODEL:0400\":\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"LAYAMODEL:0401\":\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"LoadModelV03: unknown version.\");\n\t\t\t}\n\n\t\t\tif (!vertexDeclaration)\n\t\t\t\tthrow new Error(\"LoadModelV03: unknown vertexDeclaration.\");\n\n\t\t\tvar vertexBuffer: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vbDatas.length * 4, BufferUsage.Static, true);\n\t\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\n\t\t\tvertexBuffer.setData(vbDatas.buffer);\n\t\t\tLoadModelV04._mesh._vertexBuffer = vertexBuffer;\n\t\t\tLoadModelV04._mesh._vertexCount += vertexBuffer._byteLength / vertexDeclaration.vertexStride;\n\t\t\tmemorySize += vbDatas.length * 4;\n\t\t}\n\n\t\tvar ibStart: number = offset + LoadModelV04._readData.getUint32();\n\t\tvar ibLength: number = LoadModelV04._readData.getUint32();\n\t\tvar ibDatas: Uint16Array = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\n\t\tvar indexBuffer: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, ibLength / 2,BufferUsage.Static, true);\n\t\tindexBuffer.setData(ibDatas);\n\t\tLoadModelV04._mesh._indexBuffer = indexBuffer;\n\t\tmemorySize += indexBuffer.indexCount * 2;\n\n\t\tLoadModelV04._mesh._setBuffer(LoadModelV04._mesh._vertexBuffer, indexBuffer);\n\n\t\tLoadModelV04._mesh._setCPUMemory(memorySize);\n\t\tLoadModelV04._mesh._setGPUMemory(memorySize);\n\n\t\tvar boneNames: string[] = LoadModelV04._mesh._boneNames = [];\n\t\tvar boneCount: number = LoadModelV04._readData.getUint16();\n\t\tboneNames.length = boneCount;\n\t\tfor (i = 0; i < boneCount; i++)\n\t\t\tboneNames[i] = LoadModelV04._strings[LoadModelV04._readData.getUint16()];\n\n\t\tLoadModelV04._readData.pos += 8;//TODO:优化\n\n\t\tvar bindPoseDataStart: number = LoadModelV04._readData.getUint32();\n\t\tvar bindPoseDataLength: number = LoadModelV04._readData.getUint32();\n\t\tvar bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\n\t\tvar bindPoseFloatCount: number = bindPoseDatas.length;\n\t\tvar bindPoseBuffer: ArrayBuffer = LoadModelV04._mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\n\t\tLoadModelV04._mesh._inverseBindPoses = [];\n\t\tif(bindPoseFloatCount!=0) \n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\n\t\telse\n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\n\t\t//LoadModelV04._mesh._setInstanceBuffer(LoadModelV04._mesh._instanceBufferStateType);\n\t\tfor (i = 0; i < bindPoseFloatCount; i += 16) {\n\t\t\tvar inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\n\t\t\tLoadModelV04._mesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static READ_SUBMESH(): boolean {\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\n\t\tvar subMesh: SubMesh = new SubMesh(LoadModelV04._mesh);\n\n\t\tLoadModelV04._readData.getInt16();//TODO:vbIndex\n\t\tLoadModelV04._readData.getUint32();//TODO:vbStart\n\t\tLoadModelV04._readData.getUint32();//TODO:vbLength\n\n\t\tvar ibStart: number = LoadModelV04._readData.getUint32();\n\t\tvar ibCount: number = LoadModelV04._readData.getUint32();\n\t\tvar indexBuffer: IndexBuffer3D = LoadModelV04._mesh._indexBuffer;\n\t\tsubMesh._indexBuffer = indexBuffer;\n\t\tsubMesh._setIndexRange(ibStart, ibCount);\n\t\tvar vertexBuffer: VertexBuffer3D = LoadModelV04._mesh._vertexBuffer;\n\t\tsubMesh._vertexBuffer = vertexBuffer;\n\n\t\tvar offset: number = LoadModelV04._DATA.offset;\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\n\t\tvar drawCount: number = LoadModelV04._readData.getUint16();\n\t\tsubIndexBufferStart.length = drawCount;\n\t\tsubIndexBufferCount.length = drawCount;\n\t\tboneIndicesList.length = drawCount;\n\n\t\tvar skinnedCache: skinnedMatrixCache[] = LoadModelV04._mesh._skinnedMatrixCaches;\n\t\tvar subMeshIndex: number = LoadModelV04._subMeshes.length;\n\t\tskinnedCache.length = LoadModelV04._mesh._inverseBindPoses.length;\n\t\tfor (var i: number = 0; i < drawCount; i++) {\n\t\t\tsubIndexBufferStart[i] = LoadModelV04._readData.getUint32();\n\t\t\tsubIndexBufferCount[i] = LoadModelV04._readData.getUint32();\n\t\t\tvar boneDicofs: number = LoadModelV04._readData.getUint32();\n\t\t\tvar boneDicCount: number = LoadModelV04._readData.getUint32();\n\t\t\tvar boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\n\t\t\tvar boneIndexCount: number = boneIndices.length;\n\t\t\tfor (var j: number = 0; j < boneIndexCount; j++) {\n\t\t\t\tvar index: number = boneIndices[j];\n\t\t\t\tskinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\n\t\t\t}\n\t\t}\n\t\tLoadModelV04._subMeshes.push(subMesh);\n\t\treturn true;\n\t}\n}\n\n\n","import { LayaGL } from \"../../layagl/LayaGL\"\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\nimport { Vector3 } from \"../../maths/Vector3\"\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\"\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\"\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\"\nimport { Byte } from \"../../utils/Byte\"\nimport { HalfFloatUtils } from \"../../utils/HalfFloatUtils\"\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\nimport { SubMesh } from \"../resource/models/SubMesh\"\n\n\n/**\n * @internal\n * <code>LoadModelV05</code> 类用于模型加载。\n */\nexport class LoadModelV05 {\n\n    /**@internal */\n    private static _BLOCK: any = { count: 0 };\n    /**@internal */\n    private static _DATA: any = { offset: 0, size: 0 };\n\n    /**@internal */\n    private static _strings: any[] = [];\n    /**@internal */\n    private static _readData: Byte;\n    /**@internal */\n    private static _version: string;\n    /**@internal */\n    private static _mesh: Mesh;\n    /**@internal */\n    private static _subMeshes: SubMesh[];\n\n    /**\n     * @internal\n     */\n    static parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\n        LoadModelV05._mesh = mesh;\n        LoadModelV05._subMeshes = subMeshes;\n        LoadModelV05._version = version;\n        LoadModelV05._readData = readData;\n        LoadModelV05.READ_DATA();\n        LoadModelV05.READ_BLOCK();\n        LoadModelV05.READ_STRINGS();\n        for (var i: number = 0, n: number = LoadModelV05._BLOCK.count; i < n; i++) {\n            LoadModelV05._readData.pos = LoadModelV05._BLOCK.blockStarts[i];\n            var index: number = LoadModelV05._readData.getUint16();\n            var blockName: string = LoadModelV05._strings[index];\n            var fn: Function = (LoadModelV05 as any)[\"READ_\" + blockName];\n            if (fn == null)\n                throw new Error(\"model file err,no this function:\" + index + \" \" + blockName);\n            else\n                fn.call(null);\n        }\n        LoadModelV05._strings.length = 0;\n        LoadModelV05._readData = null;\n        LoadModelV05._version = null;\n        LoadModelV05._mesh = null;\n        LoadModelV05._subMeshes = null;\n    }\n\n    /**\n     * @internal\n     */\n    private static _readString(): string {\n        return LoadModelV05._strings[LoadModelV05._readData.getUint16()];\n    }\n\n    /**\n     * @internal\n     */\n    private static READ_DATA(): void {\n        LoadModelV05._DATA.offset = LoadModelV05._readData.getUint32();\n        LoadModelV05._DATA.size = LoadModelV05._readData.getUint32();\n    }\n\n    /**\n     * @internal\n     */\n    private static READ_BLOCK(): void {\n        var count: number = LoadModelV05._BLOCK.count = LoadModelV05._readData.getUint16();\n        var blockStarts: any[] = LoadModelV05._BLOCK.blockStarts = [];\n        var blockLengths: any[] = LoadModelV05._BLOCK.blockLengths = [];\n        for (var i: number = 0; i < count; i++) {\n            blockStarts.push(LoadModelV05._readData.getUint32());\n            blockLengths.push(LoadModelV05._readData.getUint32());\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private static READ_STRINGS(): void {\n        var offset: number = LoadModelV05._readData.getUint32();\n        var count: number = LoadModelV05._readData.getUint16();\n        var prePos: number = LoadModelV05._readData.pos;\n        LoadModelV05._readData.pos = offset + LoadModelV05._DATA.offset;\n\n        for (var i: number = 0; i < count; i++)\n            LoadModelV05._strings[i] = LoadModelV05._readData.readUTFString();\n\n        LoadModelV05._readData.pos = prePos;\n    }\n\n    /**\n     * @internal\n     */\n    private static READ_MESH(): boolean {\n        var i: number;\n        var memorySize: number = 0;\n        var name: string = LoadModelV05._readString();\n        var reader: Byte = LoadModelV05._readData;\n        var arrayBuffer: ArrayBuffer = reader.__getBuffer();\n\n\n\n        var vertexBufferCount: number = reader.getInt16();\n        var offset: number = LoadModelV05._DATA.offset;\n        for (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\n            var vbStart: number = offset + reader.getUint32();\n            var vertexCount: number = reader.getUint32();\n            var vertexFlag: string = LoadModelV05._readString();\n            var vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(vertexFlag, false);\n\n            var vertexStride: number = vertexDeclaration.vertexStride;\n            var vertexData: ArrayBuffer;\n            var floatData: Float32Array;\n            var uint8Data: Uint8Array;\n\n            var subVertexFlags: any[] = vertexFlag.split(\",\");\n            var subVertexCount: number = subVertexFlags.length;\n            var mesh: Mesh = LoadModelV05._mesh;\n\n            switch (LoadModelV05._version) {\n                case \"LAYAMODEL:05\":\n                case \"LAYAMODEL:0501\":\n                    vertexData = arrayBuffer.slice(vbStart, vbStart + vertexCount * vertexStride);\n                    floatData = new Float32Array(vertexData);\n                    uint8Data = new Uint8Array(vertexData);\n                    break;\n                case \"LAYAMODEL:COMPRESSION_05\":\n                case \"LAYAMODEL:COMPRESSION_0501\":\n                    vertexData = new ArrayBuffer(vertexStride * vertexCount);\n                    floatData = new Float32Array(vertexData);\n                    uint8Data = new Uint8Array(vertexData);\n                    var lastPosition: number = reader.pos;\n                    reader.pos = vbStart;\n\n                    for (var j: number = 0; j < vertexCount; j++) {\n                        var subOffset: number;\n                        var verOffset: number = j * vertexStride;\n                        for (var k: number = 0; k < subVertexCount; k++) {\n                            switch (subVertexFlags[k]) {\n                                case \"POSITION\":\n                                    subOffset = verOffset / 4;\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\n                                    floatData[subOffset + 2] = HalfFloatUtils.convertToNumber(reader.getUint16());\n                                    verOffset += 12;\n                                    break;\n                                case \"NORMAL\":\n                                    subOffset = verOffset / 4;\n                                    floatData[subOffset] = reader.getUint8() / 127.5 - 1;\n                                    floatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\n                                    floatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\n                                    verOffset += 12;\n                                    break;\n                                case \"COLOR\":\n                                    subOffset = verOffset / 4;\n                                    floatData[subOffset] = reader.getUint8() / 255;\n                                    floatData[subOffset + 1] = reader.getUint8() / 255;\n                                    floatData[subOffset + 2] = reader.getUint8() / 255;\n                                    floatData[subOffset + 3] = reader.getUint8() / 255;\n                                    verOffset += 16;\n                                    break;\n                                case \"UV\":\n                                    subOffset = verOffset / 4;\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\n                                    verOffset += 8;\n                                    break;\n                                case \"UV1\":\n                                    subOffset = verOffset / 4;\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\n                                    verOffset += 8;\n                                    break;\n                                case \"BLENDWEIGHT\":\n                                    subOffset = verOffset / 4;\n                                    floatData[subOffset] = reader.getUint8() / 255;\n                                    floatData[subOffset + 1] = reader.getUint8() / 255;\n                                    floatData[subOffset + 2] = reader.getUint8() / 255;\n                                    floatData[subOffset + 3] = reader.getUint8() / 255;\n                                    verOffset += 16;\n                                    break;\n                                case \"BLENDINDICES\":\n                                    uint8Data[verOffset] = reader.getUint8();\n                                    uint8Data[verOffset + 1] = reader.getUint8();\n                                    uint8Data[verOffset + 2] = reader.getUint8();\n                                    uint8Data[verOffset + 3] = reader.getUint8();\n                                    verOffset += 4;\n                                    break;\n                                case \"TANGENT\":\n                                    subOffset = verOffset / 4;\n                                    floatData[subOffset] = reader.getUint8() / 127.5 - 1;\n                                    floatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\n                                    floatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\n                                    floatData[subOffset + 3] = reader.getUint8() / 127.5 - 1;\n                                    verOffset += 16;\n                                    break;\n                            }\n                        }\n                    }\n                    reader.pos = lastPosition;\n                    break;\n            }\n\n            var vertexBuffer: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexData.byteLength, BufferUsage.Static, true);\n            vertexBuffer.vertexDeclaration = vertexDeclaration;\n            vertexBuffer.setData(vertexData);\n            var vertexCount: number = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\n            //TDDO:是否加标记\n            if (vertexCount > 65535)\n                mesh._indexFormat = IndexFormat.UInt32;\n            else\n                mesh._indexFormat = IndexFormat.UInt16;\n            mesh._vertexBuffer = vertexBuffer;\n            mesh._vertexCount += vertexCount;\n            memorySize += floatData.length * 4;\n        }\n\n        var ibStart: number = offset + reader.getUint32();\n        var ibLength: number = reader.getUint32();\n\n        var ibDatas: Uint16Array | Uint32Array;\n        if (mesh.indexFormat == IndexFormat.UInt32)\n            ibDatas = new Uint32Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\n        else\n            ibDatas = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\n\n        var indexBuffer: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(mesh.indexFormat, ibDatas.length, BufferUsage.Static, true);\n        indexBuffer.setData(ibDatas);\n        mesh._indexBuffer = indexBuffer;\n\n        mesh._setBuffer(mesh._vertexBuffer, indexBuffer);\n\n        memorySize += indexBuffer.indexCount * 2;\n        mesh._setCPUMemory(memorySize);\n        mesh._setGPUMemory(memorySize);\n\n        if (LoadModelV05._version == \"LAYAMODEL:0501\" || LoadModelV05._version == \"LAYAMODEL:COMPRESSION_0501\") {\n            var bounds = mesh.bounds;\n            var min: Vector3 = bounds.getMin();\n            var max: Vector3 = bounds.getMax();\n            min.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\n            max.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\n            bounds.setMin(min);\n            bounds.setMax(max);\n            mesh.bounds = bounds;\n        }\n\n        var boneNames: string[] = mesh._boneNames = [];\n        var boneCount: number = reader.getUint16();\n        boneNames.length = boneCount;\n        for (i = 0; i < boneCount; i++)\n            boneNames[i] = LoadModelV05._strings[reader.getUint16()];//[兼容性]\n\n        var bindPoseDataStart: number = reader.getUint32();\n        var bindPoseDataLength: number = reader.getUint32();\n        var bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\n        var bindPoseFloatCount: number = bindPoseDatas.length;\n        var bindPoseBuffer: ArrayBuffer = mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\n        mesh._inverseBindPoses = [];\n        if (bindPoseFloatCount != 0)\n            mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\n        else\n            mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\n        //mesh._setInstanceBuffer(mesh._instanceBufferStateType);\n        for (i = 0; i < bindPoseFloatCount; i += 16) {\n            var inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\n            mesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\n        }\n\n        return true;\n    }\n\n    /**\n     * @internal\n     */\n    private static READ_SUBMESH(): boolean {\n        var reader: Byte = LoadModelV05._readData;\n        var arrayBuffer: ArrayBuffer = reader.__getBuffer();\n        var subMesh: SubMesh = new SubMesh(LoadModelV05._mesh);\n\n        reader.getInt16();//TODO:vbIndex\n        var ibStart: number = reader.getUint32();\n        var ibCount: number = reader.getUint32();\n        var indexBuffer: IndexBuffer3D = LoadModelV05._mesh._indexBuffer;\n        subMesh._indexBuffer = indexBuffer;\n        subMesh._setIndexRange(ibStart, ibCount);\n        var vertexBuffer: VertexBuffer3D = LoadModelV05._mesh._vertexBuffer;\n        subMesh._vertexBuffer = vertexBuffer;\n\n        var offset: number = LoadModelV05._DATA.offset;\n        var subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\n        var subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\n        var boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\n        var drawCount: number = reader.getUint16();\n        subIndexBufferStart.length = drawCount;\n        subIndexBufferCount.length = drawCount;\n        boneIndicesList.length = drawCount;\n\n        var skinnedCache: skinnedMatrixCache[] = LoadModelV05._mesh._skinnedMatrixCaches;\n        var subMeshIndex: number = LoadModelV05._subMeshes.length;\n        skinnedCache.length = LoadModelV05._mesh._inverseBindPoses.length;\n        for (var i: number = 0; i < drawCount; i++) {\n            subIndexBufferStart[i] = reader.getUint32();\n            subIndexBufferCount[i] = reader.getUint32();\n            var boneDicofs: number = reader.getUint32();\n            var boneDicCount: number = reader.getUint32();\n            var boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\n            for (var j: number = 0, m: number = boneIndices.length; j < m; j++) {\n                var index: number = boneIndices[j];\n                skinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\n            }\n        }\n        LoadModelV05._subMeshes.push(subMesh);\n        return true;\n    }\n\n    private static READ_UVSIZE(): void {\n        LoadModelV05._mesh._width = LoadModelV05._readData.readUint16();\n        LoadModelV05._mesh._height = LoadModelV05._readData.readUint16();\n    }\n}\n\n\n","import { Byte } from \"../../utils/Byte\";\nimport { Mesh } from \"../resource/models/Mesh\";\nimport { SubMesh } from \"../resource/models/SubMesh\";\nimport { LoadModelV04 } from \"./LoadModelV04\";\nimport { LoadModelV05 } from \"./LoadModelV05\";\n\n/**\n * @internal\n */\nexport class MeshReader {\n\t/**\n\t *@internal\n\t */\n\tstatic _parse(data: ArrayBuffer): Mesh {\n\t\tvar mesh: Mesh = new Mesh();\n\t\tMeshReader.read(data, mesh, mesh._subMeshes);\n\t\treturn mesh;\n\t}\n\n\tstatic read(data: ArrayBuffer, mesh: Mesh, subMeshes: SubMesh[]): void {\n\t\tvar readData: Byte = new Byte(data);\n\t\treadData.pos = 0;\n\t\tvar version: string = readData.readUTFString();\n\t\tswitch (version) {\n\t\t\tcase \"LAYAMODEL:0301\":\n\t\t\tcase \"LAYAMODEL:0400\":\n\t\t\tcase \"LAYAMODEL:0401\":\n\t\t\t\tLoadModelV04.parse(readData, version, mesh, subMeshes);\n\t\t\t\tbreak;\n\t\t\tcase \"LAYAMODEL:05\":\n\t\t\tcase \"LAYAMODEL:COMPRESSION_05\":\n\t\t\tcase \"LAYAMODEL:0501\":\n\t\t\tcase \"LAYAMODEL:COMPRESSION_0501\":\n\t\t\t\tLoadModelV05.parse(readData, version, mesh, subMeshes);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"MeshReader: unknown mesh version.\");\n\t\t}\n\t\tmesh._setSubMeshes(subMeshes);\n\t\tif (version != \"LAYAMODEL:0501\" && version != \"LAYAMODEL:COMPRESSION_0501\")//compatible\n\t\t\tmesh.calculateBounds();\n\t}\n}\n\n","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\nimport { MeshReader } from \"./MeshReader\";\n\nclass MeshLoader implements IResourceLoader {\n    load(task: ILoadTask) {\n        return task.loader.fetch(task.url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\n            if (!data)\n                return null;\n\n            return MeshReader._parse(data);\n        });\n    }\n}\n\nLoader.registerLoader([\"lm\"], MeshLoader, Loader.MESH);","import { Component } from \"../../components/Component\";\nimport { Node } from \"../../display/Node\";\nimport { Camera } from \"../core/Camera\";\nimport { DirectionLight } from \"../core/light/DirectionLight\";\nimport { PointLight } from \"../core/light/PointLight\";\nimport { SpotLight } from \"../core/light/SpotLight\";\nimport { MeshSprite3D } from \"../core/MeshSprite3D\";\nimport { ShuriKenParticle3D } from \"../core/particleShuriKen/ShuriKenParticle3D\";\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\nimport { Scene3D } from \"../core/scene/Scene3D\";\nimport { SkinnedMeshSprite3D } from \"../core/SkinnedMeshSprite3D\";\nimport { Sprite3D } from \"../core/Sprite3D\";\nimport { TrailSprite3D } from \"../core/trail/TrailSprite3D\";\nimport { ClassUtils } from \"../../utils/ClassUtils\";\nimport { SimpleSkinnedMeshSprite3D } from \"../core/SimpleSkinnedMeshSprite3D\";\nimport { ILoadURL, Loader } from \"../../net/Loader\";\nimport { URL } from \"../../net/URL\";\nimport { HierarchyLoader } from \"../../loaders/HierarchyLoader\";\nimport { ReflectionProbe } from \"../component/Volume/reflectionProbe/ReflectionProbe\";\n\n/**\n * @internal\n * <code>Utils3D</code> 类用于创建3D工具。\n */\nclass HierarchyParserV2 {\n    /**\n     * @internal\n     * @param nodeData 创建数据\n     * @param spriteMap 精灵集合\n     * @param outBatchSprites 渲染精灵集合\n     */\n    private static _createSprite3DInstance(nodeData: any, spriteMap: any, outBatchSprites: RenderableSprite3D[]): Node {\n        let node: Node;\n        switch (nodeData.type) {\n            case \"Scene3D\":\n                node = new Scene3D();\n                break;\n            case \"Sprite3D\":\n                node = new Sprite3D();\n                break;\n            case \"MeshSprite3D\":\n                node = new MeshSprite3D();\n                (outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\n                break;\n            case \"SkinnedMeshSprite3D\":\n                node = new SkinnedMeshSprite3D();\n                break;\n            case \"SimpleSkinnedMeshSprite3D\":\n                node = new SimpleSkinnedMeshSprite3D();\n                break;\n            case \"ShuriKenParticle3D\":\n                node = new ShuriKenParticle3D();\n                break;\n            case \"Camera\":\n                node = new Camera();\n                break;\n            case \"DirectionLight\":\n                node = new DirectionLight();\n                break;\n            case \"PointLight\":\n                node = new PointLight();\n                break;\n            case \"SpotLight\":\n                node = new SpotLight();\n                break;\n            case \"TrailSprite3D\":\n                node = new TrailSprite3D();\n                break;\n            case \"ReflectionProbe\":\n                node = new Sprite3D();\n                node.addComponent(ReflectionProbe);\n                break;\n            default:\n                throw new Error(\"Utils3D:unidentified class type in (.lh) file.\");\n        }\n\n        let childData: any[] = nodeData.child;\n        if (childData) {\n            for (let i: number = 0, n: number = childData.length; i < n; i++) {\n                let child: any = HierarchyParserV2._createSprite3DInstance(childData[i], spriteMap, outBatchSprites)\n                node.addChild(child);\n            }\n        }\n\n        spriteMap[nodeData.instanceID] = node;\n        return node;\n    }\n\n    /**\n     * @internal\n     * @param nodeData \n     * @param spriteMap \n     * @param interactMap \n     */\n    private static _createComponentInstance(nodeData: any, spriteMap: any, interactMap: any): void {\n        let node: Node = spriteMap[nodeData.instanceID];\n        node._parse(nodeData.props, spriteMap);\n\n        let childData: any[] = nodeData.child;\n        if (childData) {\n            for (let i: number = 0, n: number = childData.length; i < n; i++)\n                HierarchyParserV2._createComponentInstance(childData[i], spriteMap, interactMap)\n        }\n\n        let componentsData: any[] = nodeData.components;\n        if (componentsData) {\n            for (let j: number = 0, m: number = componentsData.length; j < m; j++) {\n                let data: any = componentsData[j];\n                let cls: any = ClassUtils.getClass(data.type);\n                if (cls) {\n                    let component: Component = node.addComponent(cls);\n                    component._parse(data, interactMap);\n                } else {\n                    console.warn(`Unidentified component type: ${data.type}.`);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * @internal\n     */\n    static _createNodeByJson02(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {\n        let spriteMap: any = {};\n        let interactMap: any = { component: [], data: [] };\n        let node: Node = HierarchyParserV2._createSprite3DInstance(nodeData, spriteMap, outBatchSprites);\n        HierarchyParserV2._createComponentInstance(nodeData, spriteMap, interactMap);\n        HierarchyParserV2._createInteractInstance(interactMap, spriteMap);\n        return node;\n    }\n\n    /**\n     * @internal\n     */\n    static _createInteractInstance(interatMap: any, spriteMap: any) {\n        let components: Component[] = interatMap.component;\n        let data = interatMap.data;\n        for (let i = 0, n = components.length; i < n; i++) {\n            components[i]._parseInteractive(data[i], spriteMap);\n        }\n    }\n\n    /**\n     *@internal\n     */\n    static parse(data: any) {\n        let json: any = data.data;\n        let outBatchSprits: RenderableSprite3D[] = [];\n        let sprite: Sprite3D | Scene3D;\n        switch (data.version) {\n            case \"LAYAHIERARCHY:02\":\n            case \"LAYASCENE3D:02\":\n                sprite = (<Sprite3D | Scene3D>HierarchyParserV2._createNodeByJson02(json, outBatchSprits));\n                break;\n            default:\n                sprite = (<Sprite3D | Scene3D>HierarchyParserV2._createNodeByJson(json, outBatchSprits));\n        }\n\n        //StaticBatchManager.combine((sprite instanceof Sprite3D) ? sprite : null, outBatchSprits);\n        return sprite;\n    }\n\n    //--------------------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * @internal\n     */\n    static _createNodeByJson(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {//兼容代码\n        let node: Node;\n        switch (nodeData.type) {\n            case \"Scene3D\":\n                node = new Scene3D();\n                break;\n            case \"Sprite3D\":\n                node = new Sprite3D();\n                break;\n            case \"MeshSprite3D\":\n                node = new MeshSprite3D();\n                (outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\n                break;\n            case \"SkinnedMeshSprite3D\":\n                node = new SkinnedMeshSprite3D();\n                break;\n            case \"ShuriKenParticle3D\":\n                node = new ShuriKenParticle3D();\n                break;\n            case \"Camera\":\n                node = new Camera();\n                break;\n            case \"DirectionLight\":\n                node = new DirectionLight();\n                break;\n            case \"PointLight\":\n                node = new PointLight();\n                break;\n            case \"SpotLight\":\n                node = new SpotLight();\n                break;\n            case \"TrailSprite3D\":\n                node = new TrailSprite3D();\n                break;\n            default:\n                throw new Error(`Unidentified node type ${nodeData.type}`);\n        }\n\n        let childData: any[] = nodeData.child;\n        if (childData) {\n            for (let i: number = 0, n: number = childData.length; i < n; i++) {\n                let child: any = HierarchyParserV2._createNodeByJson(childData[i], outBatchSprites)\n                node.addChild(child);\n            }\n        }\n\n        let componentsData: any[] = nodeData.components;\n        if (componentsData) {\n            for (let j: number = 0, m: number = componentsData.length; j < m; j++) {\n                let data: any = componentsData[j];\n                let clas: any = ClassUtils.getClass(data.type);\n                if (clas) {\n                    let component: Component = node.addComponent(clas);\n                    component._parse(data);\n                } else {\n                    console.warn(`Unidentified component type: ${data.type}.`);\n                }\n            }\n        }\n        node._parse(nodeData.props, null);\n        return node;\n    }\n\n    public static collectResourceLinks(data: any, basePath: string): (string | ILoadURL)[] {\n        let test: Record<string, string> = {};\n        let innerUrls: ILoadURL[] = [];\n\n        function addInnerUrl(url: string, type: string, constructParams?: any, propertyParams?: any) {\n            let url2 = test[url];\n            if (url2 === undefined) {\n                url2 = URL.join(basePath, url);\n                innerUrls.push({ url: url2, type: type, constructParams: constructParams, propertyParams: propertyParams });\n                test[url] = url2;\n            }\n            return url2;\n        }\n\n        function check(nodeData: any) {\n            let props: any = nodeData.props;\n            switch (nodeData.type) {\n                case \"Scene3D\":\n                    let lightmaps: any[] = props.lightmaps;\n                    if (lightmaps) {\n                        for (let i = 0, n = lightmaps.length; i < n; i++) {\n                            let lightMap: any = lightmaps[i];\n                            if (lightMap.path) {\n                                lightMap.path = addInnerUrl(lightMap.path, Loader.TEXTURE2D, lightMap.constructParams, lightMap.propertyParams);\n                            }\n                            else {\n                                let lightmapColorData: any = lightMap.color;\n                                lightmapColorData.path = addInnerUrl(lightmapColorData.path, Loader.TEXTURE2D, lightmapColorData.constructParams, lightmapColorData.propertyParams);\n                                let lightmapDirectionData: any = lightMap.direction;\n                                if (lightmapDirectionData)\n                                    lightmapDirectionData.path = addInnerUrl(lightmapDirectionData.path, Loader.TEXTURE2D, lightmapDirectionData.constructParams, lightmapDirectionData.propertyParams);\n                            }\n                        }\n                    }\n\n                    //兼容\n                    let reflectionTextureData: string = props.reflectionTexture;\n                    (reflectionTextureData) && (props.reflection = addInnerUrl(reflectionTextureData, Loader.TEXTURECUBE));\n\n                    let reflectionData: string = props.reflection;\n                    (reflectionData) && (props.reflection = addInnerUrl(reflectionData, Loader.TEXTURECUBE));\n                    if (props.sky) {\n                        let skyboxMaterial: any = props.sky.material;\n                        (skyboxMaterial) && (skyboxMaterial.path = addInnerUrl(skyboxMaterial.path, Loader.MATERIAL));\n                    }\n                    break;\n                case \"Camera\":\n                    let skyboxMatData: any = props.skyboxMaterial;\n                    (skyboxMatData) && (skyboxMatData.path = addInnerUrl(skyboxMatData.path, Loader.MATERIAL));\n                    break;\n                case \"TrailSprite3D\":\n                case \"MeshSprite3D\":\n                case \"SkinnedMeshSprite3D\":\n                case \"SimpleSkinnedMeshSprite3D\":\n                    let meshPath: string = props.meshPath;\n                    (meshPath) && (props.meshPath = addInnerUrl(meshPath, Loader.MESH));\n                    let materials: any[] = props.materials;\n                    if (materials)\n                        for (let i = 0, n = materials.length; i < n; i++)\n                            materials[i].path = addInnerUrl(materials[i].path, Loader.MATERIAL);\n                    if (nodeData.type == \"SimpleSkinnedMeshSprite3D\")\n                        if (props.animatorTexture)\n                            props.animatorTexture = addInnerUrl(props.animatorTexture, Loader.TEXTURE2D)\n                    break;\n\n                case \"ShuriKenParticle3D\":\n                    if (props.main) {\n                        let resources: any = props.renderer.resources;\n                        let mesh: string = resources.mesh;\n                        let material: string = resources.material;\n                        (mesh) && (resources.mesh = addInnerUrl(mesh, Loader.MESH));\n                        (material) && (resources.material = addInnerUrl(material, Loader.MATERIAL));\n                    }\n                    else {//兼容代码\n                        let parMeshPath: string = props.meshPath;\n                        (parMeshPath) && (props.meshPath = addInnerUrl(parMeshPath, Loader.MESH));\n                        props.material.path = addInnerUrl(props.material.path, Loader.MATERIAL);\n                    }\n                    break;\n                case \"Terrain\":\n                    addInnerUrl(props.dataPath, Loader.TERRAINRES);\n                    break;\n                case \"ReflectionProbe\":\n                    let reflection = props.reflection;\n                    (reflection) && (props.reflection = addInnerUrl(reflection, Loader.TEXTURECUBE));\n                    break;\n            }\n\n            let components: any[] = nodeData.components;\n            if (components) {\n                for (let k: number = 0, p: number = components.length; k < p; k++) {\n                    let component: any = components[k];\n                    switch (component.type) {\n                        case \"Animator\":\n                            // let avatarData: any = component.avatar;\n                            // (avatarData) && (avatarData.path = addInnerUrl(avatarData.path, Loader.AVATAR));\n                            let clipPaths: string[] = component.clipPaths;\n                            if (!clipPaths) {\n                                let layersData: any[] = component.layers;\n                                for (let i = 0; i < layersData.length; i++) {\n                                    let states: any[] = layersData[i].states;\n                                    for (let j: number = 0, m: number = states.length; j < m; j++) {\n                                        let clipPath: string = states[j].clipPath;\n                                        (clipPath) && (states[j].clipPath = addInnerUrl(clipPath, Loader.ANIMATIONCLIP));\n                                    }\n                                }\n                            } else {\n                                for (let i = 0, n = clipPaths.length; i < n; i++)\n                                    clipPaths[i] = addInnerUrl(clipPaths[i], Loader.ANIMATIONCLIP);\n                            }\n                            break;\n                        case \"PhysicsCollider\":\n                        case \"Rigidbody3D\":\n                        case \"CharacterController\":\n                            let shapes: any[] = component.shapes;\n                            for (let i = 0; i < shapes.length; i++) {\n                                let shape: any = shapes[i];\n                                if (shape.type === \"MeshColliderShape\") {\n                                    let mesh: string = shape.mesh;\n                                    (mesh) && (shape.mesh = addInnerUrl(mesh, Loader.MESH));\n                                }\n                            }\n                            break;\n                    }\n                }\n            }\n\n            let children: any[] = nodeData.child;\n            if (!children) return;\n            for (let i = 0, n = children.length; i < n; i++)\n                check(children[i]);\n        }\n\n        check(data.data);\n\n        return innerUrls;\n    }\n}\n\nHierarchyLoader.v2 = HierarchyParserV2;","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\nimport { AvatarMask } from \"../component/Animator/AvatarMask\";\n\nclass AvatarMaskLoader implements IResourceLoader {\n    load(task: ILoadTask) {\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(), task.options).then(data => {\n            if (!data)\n                return null;\n\n            return new AvatarMask(data);\n        });\n}\n}\n\nLoader.registerLoader([\"lavm\"], AvatarMaskLoader);","export class ParseJSON {\n    static parse(str: string) {\n        return this.parseStart(str);\n    }\n\n    private static findIndex(str: string, i: number, fstr: string, len: number) {\n        var fi = str.indexOf(fstr, i + 1);\n        if (0 > fi) {\n            fi = len;\n        }\n        return { str: str.substring(i + 1, fi), i: fi };\n\n    }\n    private static finCurrObj(): any {\n        this.type = 1;\n        if (null == this.cobj) {\n            return null;\n        }\n        if (0 == this.currArr.length) {\n            if (this.cobj.k) {\n                this.ret[this.cobj.k] = this.cobj.val;\n            }\n            return null;\n        } else {\n            var pobj = this.currArr.pop()!;\n            if (this.cobj.k) {\n                if (Array.isArray(pobj.val)) {\n                    if (null != this.cobj.k) {\n                        var obj: any = {};\n                        obj[this.cobj.k] = this.cobj.val;\n                        pobj.val.push(obj);\n                    } else {\n                        //没有key，应该创建的时候已经push进去了\n                        //pobj.val.push(cobj.val);\n                    }\n                } else {\n                    pobj.val[this.cobj.k] = this.cobj.val;\n                }\n            } else if (Array.isArray(this.cobj.val)) {\n                if (Array.isArray(pobj.val)) {\n                    pobj.val.push(this.cobj.val);\n                } else {\n                    pobj.val = this.cobj.val;\n                }\n            } else {\n                //console.log(\"应该是已经被push过的obj对象，无需处理\");\n            }\n            return pobj;\n        }\n    }\n\n    private static formatVal(str: string | null) {\n        if (null == str) {\n            return null;\n        }\n        var numVal = Number(str);\n        if (!isNaN(numVal)) {\n            return numVal;\n        }\n\n        if (\"false\" == str.toLowerCase()) {\n            return false;\n        } else if (\"true\" == str.toLowerCase()) {\n            return true;\n        } else if (\"null\" == str) {\n            return null;\n        }\n\n\n        return str;\n    }\n\n    private static len: number;\n    private static ret: any;\n    private static currStr: string | null;\n    private static currArr: { k?: string, val: any }[];\n    private static cobj: any;\n    /**type为0代表没有找到任何状态，1为当前在寻找key，2为当前在寻找val */\n    private static type: number;\n\n    private static finCurrStr() {\n        if (null != this.currStr) {\n            this.currStr = this.currStr.trim();\n            if (\"\" != this.currStr) {\n                if (null != this.cobj) {\n                    if (Array.isArray(this.cobj.val)) {\n                        this.cobj.val.push(this.formatVal(this.currStr));\n                    } else {\n                        this.cobj.val = this.formatVal(this.currStr);\n                        this.cobj = this.finCurrObj();\n                    }\n                }\n                this.currStr = \"\";\n            }\n        }\n    }\n\n\n    private static parseStart(str: string) {\n        this.len = str.length;\n        var i = 0;\n        this.ret = {};\n        this.currStr = null;\n        this.currArr = [];\n        this.cobj = null;\n        this.type = 0;\n\n\n        while (i < this.len) {\n            var c = str.charAt(i);\n            if (\"/\" == c) {\n                if (i + 1 < this.len) {\n                    i += 1;\n                    var cNext = str.charAt(i);\n                    var cstr = null;\n                    if (\"/\" == cNext) {\n                        //单行注释\n                        cstr = \"\\n\";\n                    } else if (\"*\" == cNext) {\n                        //多行注释\n                        cstr = \"*/\"\n                    }\n                    if (null != cstr) {\n\n\n\n                        this.finCurrStr();\n\n\n                        var fi = str.indexOf(cstr, i);\n                        if (0 > fi) {\n                            console.log(\"没有找到注释结尾，应该是一直注释到最后了\");\n                            i = this.len;\n                        } else {\n                            i = fi + cstr.length - 1;\n                        }\n                    }\n                }\n            } else if (\"}\" == c) {\n                if (null != this.cobj) {\n                    this.finCurrStr();\n                    if (null != this.cobj) {\n                        this.cobj = this.finCurrObj();\n                    }\n                }\n                this.currStr = \"\";\n                this.type = 1;\n                //obj结束\n            } else if (\"{\" == c) {\n                this.currStr = \"\";\n                this.type = 1;\n\n\n\n\n            } else if (\"'\" == c || \"\\\"\" == c || \"‘\" == c || \"“\" == c) {\n                //检测发现这里是字符串\n                if (\"‘\" == c) {\n                    c = \"’\";\n                } else if (\"“\" == c) {\n                    c = \"”\";\n                }\n                var obj = this.findIndex(str, i, c, this.len);\n\n                if (2 == this.type && null != this.cobj && Array.isArray(this.cobj.val)) {\n                    if (null != this.currStr) {\n                        this.currStr = this.currStr.trim();\n                        if (\"\" != this.currStr) {\n                            this.cobj.val.push(this.formatVal(this.currStr));\n                        }\n                    }\n                    this.cobj.val.push(obj.str);\n                    this.currStr = \"\";\n                } else if (null != this.currStr) {\n                    this.currStr += obj.str;\n                }\n                i = obj.i;\n            } else if (\";\" == c || \",\" == c || \"\\n\" == c) {\n                this.finCurrStr();\n            } else if (\"]\" == c) {\n                //数组结束\n                if (null != this.currStr && null != this.cobj && Array.isArray(this.cobj.val)) {\n                    this.currStr = this.currStr.trim();\n                    if (\"\" != this.currStr) {\n                        this.cobj.val.push(this.formatVal(this.currStr));\n                    }\n                }\n                if (null != this.cobj) {\n                    //数组需要完成两次才算结束出去\n                    this.cobj = this.finCurrObj();\n                    this.cobj = this.finCurrObj();\n                }\n                this.currStr = \"\";\n            } else if (\"[\" == c) {\n                if (2 != this.type) {\n                    console.warn(\"没有key值，忽略掉一个数组\");\n                } else {\n                    if (null != this.cobj) {\n                        this.currArr.push(this.cobj);\n                    }\n                    this.cobj = { val: [] };\n                }\n            } else if (\":\" == c) {\n                if (null != this.currStr && 1 == this.type) {\n                    this.type = 2;\n                    if (null != this.cobj) {\n                        this.currArr.push(this.cobj);\n                    }\n                    if (null != this.cobj && Array.isArray(this.cobj.val)) {\n                        //数组中的obj对象 eg: {b:[{aa:3,bb:4}],}\n                        var pcobj = this.cobj;\n                        this.cobj = { val: {} };\n                        pcobj.val.push(this.cobj.val);\n                        this.currArr.push(this.cobj);\n\n                    }\n                    this.cobj = { k: this.currStr.trim(), val: {} };\n\n\n\n                    this.currStr = \"\";\n                }\n            } else if (null != this.currStr) {\n                this.currStr += c;\n            }\n            i++;\n        }\n        return this.ret;\n    }\n\n\n}","import { Color } from \"../../maths/Color\";\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { IShaderObjStructor, IShaderpassStructor, Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../RenderEngine/RenderShader/ShaderData\";\nimport { Texture2D } from \"../../resource/Texture2D\";\nimport { TextureCube } from \"../resource/TextureCube\";\nimport { ParseJSON } from \"../utils/ParseJSON\";\n\nconst CGBlock: string[] = [\"GLSL Start\", \"GLSL End\"];\nconst split: string[] = [\"#defineGLSL\", \"#endGLSL\"];\nconst shaderBlock: string[] = [\"Shader3D Start\", \"Shader3D End\"];\nconst shaderDataOBJ: Record<string, ShaderDataType> = {\n    \"Color\": ShaderDataType.Color,\n    \"Int\": ShaderDataType.Int,\n    \"Bool\": ShaderDataType.Bool,\n    \"Float\": ShaderDataType.Float,\n    \"Vector2\": ShaderDataType.Vector2,\n    \"Vector3\": ShaderDataType.Vector3,\n    \"Vector4\": ShaderDataType.Vector4,\n    \"Matrix4x4\": ShaderDataType.Matrix4x4,\n    \"Texture2D\": ShaderDataType.Texture2D,\n    \"TextureCube\": ShaderDataType.TextureCube,\n}\n\n//TODO 格式改变\nexport class ShaderParser {\n\n    static parse(data: string, basePath?: string): Shader3D {\n        let obj = ShaderParser.getShaderBlock(data);\n        let cgmap = ShaderParser.getCGBlock(data);\n        ShaderParser.bindCG(obj, cgmap);\n        let shader = Shader3D.parse(obj, basePath);\n        return shader;\n    }\n\n    static compileToTree(sliceFlag: string[], data: string, sliceIndex: number): string[] {\n        if (sliceIndex == sliceFlag.length)\n            return [data];\n        let slicedata = sliceFlag[sliceIndex];\n        let splitmap = data.split(slicedata);\n        if (splitmap.length == 1)\n            return splitmap;\n        let map: string[] = [];\n        for (let i = 0, n = splitmap.length; i < n; i++) {\n            map = map.concat(ShaderParser.compileToTree(sliceFlag, splitmap[i], sliceIndex + 1));\n            (i != n - 1) && map.push(slicedata);\n        }\n        return map;\n    }\n\n    static getMapKey(value: string) {\n        let index = value.indexOf(\"\\n\");\n        value = value.slice(0, index).replace(\"\\r\", \"\");\n        value = value.slice(0, index).replace(\" \", \"\");\n        value = value.trim();\n        return value;\n    }\n\n    /**\n     * get Shader Data\n     */\n    static getShaderBlock(source: string) {\n        let shaderData = source.substring(source.indexOf(shaderBlock[0]) + shaderBlock[0].length, source.indexOf(shaderBlock[1]));\n        let shaderObj;\n        try {\n            shaderObj = ParseJSON.parse(shaderData);//TODO new FIle parse(1、去掉繁琐的json格式报错，2、可以有注释)\n        } catch {\n            console.error(\"Shader describe Data error\");\n        }\n        return shaderObj as IShaderObjStructor;\n    }\n\n    /**\n     * get CG data for map\n     * @param source \n     * @returns \n     */\n    static getCGBlock(source: string): { [key: string]: string } {\n        let cgdata = source.substring(source.indexOf(CGBlock[0]), source.indexOf(CGBlock[1]));\n        let map = ShaderParser.compileToTree(split, cgdata, 0);\n        let cgmap: { [key: string]: string } = {};\n        for (let i = 0, n = map.length; i < n; i++) {\n            let value = map[i];\n            if (value == split[0]) {\n                i += 1\n                let datavalue = map[i];\n                let key = ShaderParser.getMapKey(datavalue);\n                cgmap[key] = datavalue.slice(datavalue.indexOf(\"\\n\"), datavalue.length - 1);\n            }\n        }\n        return cgmap;\n    }\n\n    static bindCG(shaderObj: IShaderObjStructor, cgmap: { [key: string]: string }) {\n        //pass trans\n        let passArray = shaderObj.shaderPass as Array<IShaderpassStructor>;\n        if (passArray) {\n            passArray.forEach(element => {\n                if (element.VS) {\n                    element.VS = cgmap[element.VS];\n                }\n                if (element.FS) {\n                    element.FS = cgmap[element.FS];\n                }\n            });\n        }\n        //attribute map trans\n        let attributemap = shaderObj.attributeMap;\n        if (attributemap) {\n            let indexofAttribute = 0;\n            for (let i in attributemap) {\n                //TODO  这里的格式要重新理 \"name\":type or \"name\":[type,custom Attribute Location]\n                if(attributemap[i] instanceof Array){\n                    let dataArray = attributemap[i];\n                    attributemap[i] = [dataArray[1],ShaderParser.getShaderDataType(dataArray[0])];\n                }else{\n                    attributemap[i] = [indexofAttribute, ShaderParser.getShaderDataType(attributemap[i])];\n                    indexofAttribute++;\n                }\n                \n            }\n        }\n        //uniform map trans\n        let uniformMap = shaderObj.uniformMap;\n        if (uniformMap) {\n            let defaultmap: any = {};\n            shaderObj.defaultValue = defaultmap;\n\n            let newUniformMap: any = {};\n            shaderObj.uniformMap = newUniformMap;\n\n            for (let k in uniformMap) {\n                let entry = uniformMap[k];\n                if (entry.serializable === false)\n                    continue;\n\n                let dataType = ShaderParser.getShaderDataType(entry.type);\n                if (entry.default != null)\n                    defaultmap[k] = ShaderParser.getDefaultData(dataType, entry.default);\n\n                if (entry.block) {\n                    let block: Record<string, ShaderDataType> = newUniformMap[entry.block];\n                    if (!block)\n                        newUniformMap[entry.block] = block = {};\n                    block[k] = dataType;\n                }\n                else\n                    newUniformMap[k] = dataType;\n            }\n        }\n    }\n\n    /**\n     * trans string to ShaderDataType\n     * @param value \n     * @returns \n     */\n    static getShaderDataType(value: string): ShaderDataType {\n        return shaderDataOBJ[value];\n    }\n\n    /**\n     * set ShaderData Value\n     * @param type \n     * @param data \n     * @returns \n     */\n    static getDefaultData(type: ShaderDataType, data: any) {\n        switch (type) {\n            case ShaderDataType.Int:\n            case ShaderDataType.Float:\n            case ShaderDataType.Bool:\n                return data;\n            case ShaderDataType.Vector2:\n                return new Vector2(data[0], data[1]);\n            case ShaderDataType.Vector3:\n                return new Vector3(data[0], data[1], data[2]);\n            case ShaderDataType.Vector4:\n                return new Vector4(data[0], data[1], data[2], data[3]);\n            case ShaderDataType.Color:\n                return new Color(data[0], data[1], data[2], data[3]);\n            case ShaderDataType.Matrix4x4:\n                let mat = new Matrix4x4();\n                mat.cloneByArray(data);\n                return mat;\n            case ShaderDataType.Texture2D:\n                let tex = Texture2D.whiteTexture;\n                if (data == \"write\")\n                    tex = Texture2D.whiteTexture;\n                else if (data == \"black\")\n                    tex = Texture2D.blackTexture;\n                else if (data == \"gray\")\n                    tex = Texture2D.grayTexture;\n                else if (data == \"normal\")\n                    tex = Texture2D.normalTexture;\n                return tex;\n            case ShaderDataType.TextureCube:\n                let texcube = TextureCube.grayTexture;\n                if (data == \"write\")\n                    texcube = TextureCube.whiteTexture;\n                else if (data == \"black\")\n                    texcube = TextureCube.blackTexture;\n                else if (data == \"gray\")\n                    texcube = TextureCube.grayTexture;\n                return texcube;\n        }\n    }\n}","import { ILoadTask, IResourceLoader, Loader } from \"../../net/Loader\";\nimport { URL } from \"../../net/URL\";\nimport { IShaderpassStructor, Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { AssetDb } from \"../../resource/AssetDb\";\nimport { ShaderCompile } from \"../../webgl/utils/ShaderCompile\";\nimport { ShaderParser } from \"./ShaderParser\";\n\nclass ShaderLoader implements IResourceLoader {\n    load(task: ILoadTask) {\n        let url = task.url;\n        if (task.ext === \"bps\")\n            url = AssetDb.inst.getSubAssetURL(url, task.uuid, \"0\", \"shader\");\n\n        return task.loader.fetch(url, \"text\", task.progress.createCallback(), task.options).then(data => {\n            if (!data)\n                return null;\n\n            let obj = ShaderParser.getShaderBlock(data);\n            let cgmap = ShaderParser.getCGBlock(data);\n            ShaderParser.bindCG(obj, cgmap);\n\n            if (!obj.name || !obj.uniformMap)\n                return null;\n\n            let basePath = URL.getPath(task.url);\n            let passArray: IShaderpassStructor[] = obj.shaderPass;\n            return Promise.all(passArray.map(pass => ShaderCompile.compileAsync(pass.VS, pass.FS, basePath))).then(compiledObjs => {\n                if (compiledObjs.findIndex(obj => obj == null) != -1) {\n                    console.warn(\"some pass null\");\n                    return null;\n                }\n\n                let shader = Shader3D.add(obj.name, obj.enableInstancing, obj.supportReflectionProbe);\n                let subshader = new SubShader(obj.attributeMap ? obj.attributeMap : SubShader.DefaultAttributeMap, obj.uniformMap, obj.defaultValue);\n                shader.addSubShader(subshader);\n\n                for (let i in passArray) {\n                    subshader._addShaderPass(compiledObjs[i], passArray[i].pipeline);\n                }\n                return shader;\n            });\n        });\n    }\n}\n\nLoader.registerLoader([\"shader\", \"bps\"], ShaderLoader);","import { ILoadTask, IResourceLoader, Loader } from \"../../net/Loader\";\nimport { ShaderCompile } from \"../../webgl/utils/ShaderCompile\";\n\nclass GLSLLoader implements IResourceLoader {\n    load(task: ILoadTask) {\n        let url = task.url;\n        return task.loader.fetch(url, \"text\", task.progress.createCallback(), task.options).then(data => {\n            if (!data)\n                return null;\n\n            return ShaderCompile.addInclude(task.url, data, true);\n        });\n    }\n}\n\nLoader.registerLoader([\"glsl\", \"vs\", \"fs\"], GLSLLoader);","import { AnimatorController2D } from \"../../components/AnimatorController2D\";\nimport { TypeAnimatorState } from \"../../components/AnimatorControllerParse\";\nimport { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\nimport { AnimatorController } from \"../component/Animator/AnimatorController\";\nimport { URL } from \"../../net/URL\";\n\nclass AnimationControllerLoader implements IResourceLoader {\n    load(task: ILoadTask) {\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\n            let ret = task.ext == \"controller\" ? new AnimatorController(data) : new AnimatorController2D(data);\n\n            if (ret && ret.data && ret.data.controllerLayers) {\n                let layers = ret.data.controllerLayers;\n                let promises: Array<any> = [];\n                for (let i = layers.length - 1; i >= 0; i--) {\n                    let states = layers[i].states;\n                    this.loadStates(states, promises, task);\n\n                }\n                return Promise.all(promises).then(() => ret);\n            }\n            else\n                return ret;\n        });\n    }\n\n\n    loadStates(states: TypeAnimatorState[], promises: Array<any>, task: ILoadTask) {\n        let basePath = URL.getPath(task.url);\n        for (let j = states.length - 1; j >= 0; j--) {\n            if (states[j].clip && states[j].clip._$uuid) {\n                let url = URL.getResURLByUUID(states[j].clip._$uuid);\n                if (!url.startsWith(\"res://\"))\n                    url = URL.join(basePath, url);\n                promises.push(task.loader.load(url).then(res => {\n                    states[j].clip = res;\n                }));\n\n                // promises.push(task.loader.load(\"res://\" + states[j].clip._$uuid).then(res => {\n                //     states[j].clip = res;\n                // }));\n            }\n\n            if (states[j].states) {\n                this.loadStates(states[j].states, promises, task);\n            }\n\n\n        }\n    }\n\n\n}\nLoader.registerLoader([\"controller\"], AnimationControllerLoader, \"AnimationController\");\nLoader.registerLoader([\"mcc\"], AnimationControllerLoader, \"AnimationController2D\");","import { ClassUtils } from \"../utils/ClassUtils\";\nimport { AnimationClip } from \"./animation/AnimationClip\";\nimport { Sprite3D } from \"./core/Sprite3D\";\nimport { Camera } from \"./core/Camera\";\nimport { Gradient } from \"./core/Gradient\";\nimport { DirectionLight } from \"./core/light/DirectionLight\";\nimport { LightSprite } from \"./core/light/LightSprite\";\nimport { PointLight } from \"./core/light/PointLight\";\nimport { SpotLight } from \"./core/light/SpotLight\";\nimport { BlinnPhongMaterial } from \"./core/material/BlinnPhongMaterial\";\nimport { EffectMaterial } from \"./core/material/EffectMaterial\";\nimport { ExtendTerrainMaterial } from \"./core/material/ExtendTerrainMaterial\";\nimport { Material } from \"./core/material/Material\";\nimport { PBRStandardMaterial } from \"./core/material/PBRStandardMaterial\";\nimport { SkyBoxMaterial } from \"./core/material/SkyBoxMaterial\";\nimport { SkyPanoramicMaterial } from \"./core/material/SkyPanoramicMaterial\";\nimport { SkyProceduralMaterial } from \"./core/material/SkyProceduralMaterial\";\nimport { UnlitMaterial } from \"./core/material/UnlitMaterial\";\nimport { WaterPrimaryMaterial } from \"./core/material/WaterPrimaryMaterial\";\nimport { MeshFilter } from \"./core/MeshFilter\";\nimport { MeshRenderer } from \"./core/MeshRenderer\";\nimport { MeshSprite3D } from \"./core/MeshSprite3D\";\nimport { Burst } from \"./core/particleShuriKen/module/Burst\";\nimport { ColorOverLifetime } from \"./core/particleShuriKen/module/ColorOverLifetime\";\nimport { Emission } from \"./core/particleShuriKen/module/Emission\";\nimport { FrameOverTime } from \"./core/particleShuriKen/module/FrameOverTime\";\nimport { GradientAngularVelocity } from \"./core/particleShuriKen/module/GradientAngularVelocity\";\nimport { GradientColor } from \"./core/particleShuriKen/module/GradientColor\";\nimport { GradientDataInt } from \"./core/particleShuriKen/module/GradientDataInt\";\nimport { GradientDataNumber } from \"./core/particleShuriKen/module/GradientDataNumber\";\nimport { GradientSize } from \"./core/particleShuriKen/module/GradientSize\";\nimport { GradientVelocity } from \"./core/particleShuriKen/module/GradientVelocity\";\nimport { RotationOverLifetime } from \"./core/particleShuriKen/module/RotationOverLifetime\";\nimport { BaseShape } from \"./core/particleShuriKen/module/shape/BaseShape\";\nimport { BoxShape } from \"./core/particleShuriKen/module/shape/BoxShape\";\nimport { CircleShape } from \"./core/particleShuriKen/module/shape/CircleShape\";\nimport { ConeShape } from \"./core/particleShuriKen/module/shape/ConeShape\";\nimport { HemisphereShape } from \"./core/particleShuriKen/module/shape/HemisphereShape\";\nimport { SphereShape } from \"./core/particleShuriKen/module/shape/SphereShape\";\nimport { SizeOverLifetime } from \"./core/particleShuriKen/module/SizeOverLifetime\";\nimport { StartFrame } from \"./core/particleShuriKen/module/StartFrame\";\nimport { TextureSheetAnimation } from \"./core/particleShuriKen/module/TextureSheetAnimation\";\nimport { VelocityOverLifetime } from \"./core/particleShuriKen/module/VelocityOverLifetime\";\nimport { ShuriKenParticle3D } from \"./core/particleShuriKen/ShuriKenParticle3D\";\nimport { ShurikenParticleMaterial } from \"./core/particleShuriKen/ShurikenParticleMaterial\";\nimport { ShurikenParticleRenderer } from \"./core/particleShuriKen/ShurikenParticleRenderer\";\nimport { ShurikenParticleSystem } from \"./core/particleShuriKen/ShurikenParticleSystem\";\nimport { BaseRender } from \"./core/render/BaseRender\";\nimport { RenderableSprite3D } from \"./core/RenderableSprite3D\";\nimport { Lightmap } from \"./core/scene/Lightmap\";\nimport { Scene3D } from \"./core/scene/Scene3D\";\nimport { SimpleSkinnedMeshRenderer } from \"./core/SimpleSkinnedMeshRenderer\";\nimport { SimpleSkinnedMeshSprite3D } from \"./core/SimpleSkinnedMeshSprite3D\";\nimport { SkinnedMeshRenderer } from \"./core/SkinnedMeshRenderer\";\nimport { SkinnedMeshSprite3D } from \"./core/SkinnedMeshSprite3D\";\nimport { TrailFilter } from \"./core/trail/TrailFilter\";\nimport { TrailMaterial } from \"./core/trail/TrailMaterial\";\nimport { TrailRenderer } from \"./core/trail/TrailRenderer\";\nimport { TrailSprite3D } from \"./core/trail/TrailSprite3D\";\nimport { Transform3D } from \"./core/Transform3D\";\nimport { SphericalHarmonicsL2 } from \"./graphics/SphericalHarmonicsL2\";\nimport { BoundBox } from \"./math/BoundBox\";\nimport { Viewport } from \"./math/Viewport\";\nimport { Mesh } from \"./resource/models/Mesh\";\nimport { SkyRenderer } from \"./resource/models/SkyRenderer\";\nimport { TextureCube } from \"./resource/TextureCube\";\nimport { DirectionLightCom } from \"./core/light/DirectionLightCom\";\nimport { PointLightCom } from \"./core/light/PointLightCom\";\nimport { SpotLightCom } from \"./core/light/SpotLightCom\";\nimport { Bounds } from \"./math/Bounds\";\nimport { ReflectionProbe } from \"./component/Volume/reflectionProbe/ReflectionProbe\";\nimport { AreaLightCom } from \"./core/light/AreaLightCom\";\nimport { BoxColliderShape } from \"./physics/shape/BoxColliderShape\";\nimport { CapsuleColliderShape } from \"./physics/shape/CapsuleColliderShape\";\nimport { CylinderColliderShape } from \"./physics/shape/CylinderColliderShape\";\nimport { ConeColliderShape } from \"./physics/shape/ConeColliderShape\";\nimport { SphereColliderShape } from \"./physics/shape/SphereColliderShape\";\nimport { MeshColliderShape } from \"./physics/shape/MeshColliderShape\";\nimport { LODGroup, LODInfo } from \"./component/LODGroup\";\nimport { PixelLineData } from \"./core/pixelLine/PixelLineData\";\nimport { PixelLineRenderer } from \"./core/pixelLine/PixelLineRenderer\";\nimport { FloatKeyframe } from \"./core/FloatKeyframe\";\nimport { CompoundColliderShape } from \"./physics/shape/CompoundColliderShape\";\nimport { Animator } from \"./component/Animator/Animator\";\nimport { AnimatorControllerLayer } from \"./component/Animator/AnimatorControllerLayer\";\nimport { AnimatorState } from \"./component/Animator/AnimatorState\";\nimport { AvatarMask } from \"./component/Animator/AvatarMask\";\nimport { PostProcess } from \"./component/PostProcess\";\nimport { PostProcessEffect } from \"./core/render/PostProcessEffect\";\nimport { BloomEffect } from \"./core/render/PostEffect/BloomEffect\";\nimport { GaussianDoF } from \"./core/render/PostEffect/GaussianDoF\";\nimport { ScalableAO } from \"./core/render/PostEffect/ScalableAO\";\nimport { AnimatorController } from \"./component/Animator/AnimatorController\";\nimport { StaticBatchVolume } from \"./component/Volume/BatchVolume/StaticBatchVolume\";\nimport { StaticInstanceBatchRender } from \"./component/Volume/BatchVolume/StaticInstanceBatchRender\";\nimport { RenderTexture } from \"../resource/RenderTexture\";\nimport { ColorGradEffect } from \"./core/render/PostEffect/ColorGradEffect\";\nimport \"./loaders/AnimationClipLoader\";\nimport \"./loaders/CubemapLoader\";\nimport \"./loaders/MaterialLoader\";\nimport \"./loaders/MeshLoader\";\nimport \"./loaders/HierarchyParserV2\";\nimport \"./loaders/AvatarMaskLoader\";\nimport \"./loaders/ShaderLoader\";\nimport \"./loaders/GLSLLoader\";\nimport \"./loaders/AnimationControllerLoader\";\n\n\n\n\nlet c = ClassUtils.regClass;\nc(\"Sprite3D\", Sprite3D);\nc(\"Scene3D\", Scene3D);\nc(\"Camera\", Camera);\nc(\"LightSprite\", LightSprite);\nc(\"DirectionLight\", DirectionLight);\nc(\"PointLight\", PointLight);\nc(\"SpotLight\", SpotLight);\nc(\"AreaLightCom\", AreaLightCom);\nc(\"DirectionLightCom\", DirectionLightCom);\nc(\"PointLightCom\", PointLightCom);\nc(\"SpotLightCom\", SpotLightCom);\nc(\"RenderableSprite3D\", RenderableSprite3D);\nc(\"MeshSprite3D\", MeshSprite3D);\nc(\"MeshFilter\", MeshFilter);\nc(\"BaseRender\", BaseRender);\nc(\"MeshRenderer\", MeshRenderer);\nc(\"SimpleSkinnedMeshSprite3D\", SimpleSkinnedMeshSprite3D);\nc(\"SkinnedMeshSprite3D\", SkinnedMeshSprite3D);\nc(\"SkinnedMeshRenderer\", SkinnedMeshRenderer);\nc(\"SimpleSkinnedMeshRenderer\", SimpleSkinnedMeshRenderer);\nc(\"SkyRenderer\", SkyRenderer);\nc(\"TrailSprite3D\", TrailSprite3D);\nc(\"TrailFilter\", TrailFilter);\nc(\"TrailRenderer\", TrailRenderer);\nc(\"PixelLineRenderer\", PixelLineRenderer);\nc(\"PixelLineData\", PixelLineData);\nc(\"Gradient\", Gradient);\nc(\"Transform3D\", Transform3D);\nc(\"Lightmap\", Lightmap);\nc(\"ReflectionProbe\", ReflectionProbe);\nc(\"StaticBatchVolume\",StaticBatchVolume);\nc(\"StaticInstanceBatchRender\",StaticInstanceBatchRender);\nc(\"SphericalHarmonicsL2\", SphericalHarmonicsL2);\nc(\"Viewport\", Viewport);\nc(\"Bounds\", Bounds);\nc(\"BoundBox\", BoundBox);\nc(\"TextureCube\", TextureCube);\nc(\"Mesh\", Mesh);\nc(\"FloatKeyframe\", FloatKeyframe);\nc(\"RenderTexture\", RenderTexture);\nc(\"Animator\", Animator);\nc(\"AnimatorController\", AnimatorController);\nc(\"AnimatorControllerLayer\", AnimatorControllerLayer);\nc(\"AnimatorState\", AnimatorState);\nc(\"AnimationClip\", AnimationClip);\nc(\"AvatarMask\", AvatarMask);\n\nc(\"Material\", Material);\nc(\"BlinnPhongMaterial\", BlinnPhongMaterial);\nc(\"EffectMaterial\", EffectMaterial);\nc(\"ExtendTerrainMaterial\", ExtendTerrainMaterial);\nc(\"PBRStandardMaterial\", PBRStandardMaterial);\nc(\"SkyBoxMaterial\", SkyBoxMaterial);\nc(\"SkyPanoramicMaterial\", SkyPanoramicMaterial);\nc(\"SkyProceduralMaterial\", SkyProceduralMaterial);\nc(\"UnlitMaterial\", UnlitMaterial);\nc(\"WaterPrimaryMaterial\", WaterPrimaryMaterial);\nc(\"ShurikenParticleMaterial\", ShurikenParticleMaterial);\nc(\"TrailMaterial\", TrailMaterial);\n\nc(\"ShuriKenParticle3D\", ShuriKenParticle3D);\nc(\"ShurikenParticleRenderer\", ShurikenParticleRenderer);\nc(\"ShurikenParticleSystem\", ShurikenParticleSystem);\nc(\"Burst\", Burst);\nc(\"Emission\", Emission);\nc(\"BaseShape\", BaseShape);\nc(\"BoxShape\", BoxShape);\nc(\"CircleShape\", CircleShape);\nc(\"ConeShape\", ConeShape);\nc(\"HemisphereShape\", HemisphereShape);\nc(\"SphereShape\", SphereShape);\nc(\"FrameOverTime\", FrameOverTime);\nc(\"GradientAngularVelocity\", GradientAngularVelocity);\nc(\"GradientColor\", GradientColor);\nc(\"GradientDataInt\", GradientDataInt);\nc(\"GradientDataNumber\", GradientDataNumber);\nc(\"GradientSize\", GradientSize);\nc(\"GradientVelocity\", GradientVelocity);\nc(\"StartFrame\", StartFrame);\nc(\"TextureSheetAnimation\", TextureSheetAnimation);\nc(\"ColorOverLifetime\", ColorOverLifetime);\nc(\"RotationOverLifetime\", RotationOverLifetime);\nc(\"SizeOverLifetime\", SizeOverLifetime);\nc(\"VelocityOverLifetime\", VelocityOverLifetime);\nc(\"LODInfo\", LODInfo);\nc(\"LODGroup\", LODGroup);\n\n\nc(\"DirectionLight\", DirectionLight);\nc(\"DirectionLightCom\", DirectionLightCom);\nc(\"MeshRenderer\", MeshRenderer);\nc(\"MeshFilter\", MeshFilter);\nc(\"MeshRenderer\", MeshRenderer);\nc(\"SkinnedMeshRenderer\", SkinnedMeshRenderer);\nc(\"SimpleSkinnedMeshRenderer\", SimpleSkinnedMeshRenderer);\nc(\"SkyRenderer\", SkyRenderer);\n\nc(\"BoxColliderShape\", BoxColliderShape);\nc(\"CapsuleColliderShape\", CapsuleColliderShape);\nc(\"ConeColliderShape\", ConeColliderShape);\nc(\"CylinderColliderShape\", CylinderColliderShape);\nc(\"SphereColliderShape\", SphereColliderShape);\nc(\"MeshColliderShape\", MeshColliderShape);\nc(\"CompoundColliderShape\", CompoundColliderShape);\n\nc(\"PostProcess\", PostProcess);\nc(\"PostProcessEffect\", PostProcessEffect);\nc(\"BloomEffect\", BloomEffect);\nc(\"GaussianDoF\", GaussianDoF);\nc(\"ScalableAO\", ScalableAO);\nc(\"ColorGradEffect\",ColorGradEffect);","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { GeometryElement } from \"../core/GeometryElement\";\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\nimport { SubMesh } from \"../resource/models/SubMesh\";\nimport { VertexBuffer3D } from \"./VertexBuffer3D\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\n\n/**\n * 是否要删除\n * @internal\n */\nexport class SubMeshInstanceBatch extends GeometryElement {\n\t/** @internal */\n\tstatic instance: SubMeshInstanceBatch;\n\t/** @internal */\n\tstatic maxInstanceCount: number = 1024;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tSubMeshInstanceBatch.instance = new SubMeshInstanceBatch();\n\t}\n\n\t/** @internal */\n\tinstanceWorldMatrixData: Float32Array = new Float32Array(SubMeshInstanceBatch.maxInstanceCount * 16);\n\t/** @internal */\n\tinstanceWorldMatrixBuffer: VertexBuffer3D;\n\t/**SimpleAnimator */\n\t/** @internal */\n\tinstanceSimpleAnimatorData: Float32Array = new Float32Array(SubMeshInstanceBatch.maxInstanceCount * 4);\n\t/** @internal */\n\tinstanceSimpleAnimatorBuffer: VertexBuffer3D;\n\n\t/**\n\t * 创建一个 <code>InstanceSubMesh</code> 实例。\n\t */\n\tconstructor() {\n\t\tsuper(MeshTopology.Triangles, DrawType.DrawElementInstance);\n\t\tthis.indexFormat = IndexFormat.UInt16;\n\t\tthis.instanceWorldMatrixBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this.instanceWorldMatrixData.length * 4, BufferUsage.Dynamic, false);\n\t\tthis.instanceWorldMatrixBuffer.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\n\t\tthis.instanceWorldMatrixBuffer.instanceBuffer = true;\n\t\t//SImpleAnimator\n\t\tthis.instanceSimpleAnimatorBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this.instanceSimpleAnimatorData.length * 4, BufferUsage.Dynamic, false);\n\t\tthis.instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\n\t\tthis.instanceSimpleAnimatorBuffer.instanceBuffer = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\t_updateRenderParams(state: RenderContext3D): void {\n\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>state.renderElement);\n\t\tvar subMesh: SubMesh = element.instanceSubMesh;\n\t\tvar count: number = element.instanceBatchElementList.length;\n\t\tvar indexCount: number = subMesh._indexCount;\n\t\t//subMesh._mesh._instanceBufferState.bind();\n\t\tthis.clearRenderParams();\n\t\tthis.bufferState = subMesh._mesh._instanceBufferState;\n\t\tthis.instanceCount = count;\n\t\tthis.setDrawElemenParams(indexCount, subMesh._indexStart * 2);\n\t\t//LayaGL.renderDrawConatext.drawElementsInstanced(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, subMesh._indexStart * 2, count);\n\t\t//Stat.renderBatches++;\n\t\t//Stat.savedRenderBatches += count - 1;\n\t\t//Stat.trianglesFaces += indexCount * count / 3;\n\t}\n\n\n}\n\n","import { IVertex } from \"../IVertex\"\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\"\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\n\n/**\n * @internal\n * <code>VertexPositionTerrain</code> 类用于创建位置、法线、纹理1、纹理2顶点结构。\n */\nexport class VertexPositionTerrain implements IVertex {\n\tstatic TERRAIN_POSITION0: number = 0;\n\tstatic TERRAIN_NORMAL0: number = 1;\n\tstatic TERRAIN_TEXTURECOORDINATE0: number = 2;\n\tstatic TERRAIN_TEXTURECOORDINATE1: number = 3;\n\n\tprivate static _vertexDeclaration: VertexDeclaration;\n\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\t\tVertexPositionTerrain._vertexDeclaration = new VertexDeclaration(40, [new VertexElement(0, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_POSITION0),\n\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_NORMAL0),\n\t\tnew VertexElement(24, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE0),\n\t\tnew VertexElement(32, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE1)]);\n\t}\n\n\tstatic get vertexDeclaration(): VertexDeclaration {\n\t\treturn VertexPositionTerrain._vertexDeclaration;\n\t}\n\n\tprivate _position: Vector3;\n\tprivate _normal: Vector3;\n\tprivate _textureCoord0: Vector2;\n\tprivate _textureCoord1: Vector2;\n\n\tget position(): Vector3 {\n\t\treturn this._position;\n\t}\n\n\tget normal(): Vector3 {\n\t\treturn this._normal;\n\t}\n\n\tget textureCoord0(): Vector2 {\n\t\treturn this._textureCoord0;\n\t}\n\n\tget textureCoord1(): Vector2 {\n\t\treturn this._textureCoord1;\n\t}\n\n\tget vertexDeclaration(): VertexDeclaration {\n\t\treturn VertexPositionTerrain._vertexDeclaration;\n\t}\n\n\tconstructor(position: Vector3, normal: Vector3, textureCoord0: Vector2, textureCoord1: Vector2) {\n\t\tthis._position = position;\n\t\tthis._normal = normal;\n\t\tthis._textureCoord0 = textureCoord0;\n\t\tthis._textureCoord1 = textureCoord1;\n\t}\n\n}\n\n\n","import { Rigidbody3D } from \"./Rigidbody3D\";\nimport { PhysicsComponent } from \"./PhysicsComponent\";\n\nexport interface IPhyDebugDrawer{\n    /**\n     * 设置颜色\n     * @param c \n     */\n    color(c:number):void;\n    /**\n     * 画线\n     * @param sx \n     * @param sy \n     * @param sz \n     * @param ex \n     * @param ey \n     * @param ez \n     */\n    line(sx:number,sy:number,sz:number, ex:number, ey:number,ez:number):void;\n    /**\n     * 清除画线结果\n     */\n    clear():void;\n}\n/**\n * @internal\n */\nexport class BulletInteractive {\n    mem:WebAssembly.Memory;\n    dbgLine:IPhyDebugDrawer;\n    /**\n     * \n     * @param mem \n     * @param dbgline 如果要显示物理线框，要设置这个\n     */\n    constructor(mem:WebAssembly.Memory, dbgline:IPhyDebugDrawer){\n        this.mem=mem;\n        this.dbgLine=dbgline;\n    }\n    //Dynamic刚体,初始化时调用一次,Kinematic刚体,每次物理tick时调用(如果未进入睡眠状态),让物理引擎知道刚体位置。\n    getWorldTransform(rigidBodyID: number, worldTransPointer: number) {\n        //已调整机制,引擎会统一处理通过Transform修改坐标更新包围盒队列\n        //var rigidBody:Rigidbody3D = __JS__(\"this._rigidbody\");\n        //if (!rigidBody._colliderShape)//Dynamic刚体初始化时没有colliderShape需要跳过\n        //return;\n        //\n        //rigidBody._simulation._updatedRigidbodies++;\n        //var physics3D:* = Laya3D._physics3D;\n        //var worldTrans:* = physics3D.wrapPointer(worldTransPointer, physics3D.btTransform);\n        //rigidBody._innerDerivePhysicsTransformation(worldTrans, true);\n    }\n    //Dynamic刚体,物理引擎每帧调用一次,用于更新渲染矩阵。\n    setWorldTransform(rigidBodyID: number, worldTransPointer: number) {\n        var rigidBody: Rigidbody3D = PhysicsComponent._physicObjectsMap[rigidBodyID];\n        rigidBody._simulation._updatedRigidbodies++;\n        rigidBody._updateTransformComponent(worldTransPointer);\n    }\n    drawLine=(sx: number, sy: number, sz: number, ex: number, ey: number, ez: number, color: number)=>{\n        if(!this.dbgLine) return;\n        this.dbgLine.color(color);\n        this.dbgLine.line(sx,sy,sz,ex,ey,ez);\n    }\n    clearLine=()=>{\n        if(!this.dbgLine) return;\n        this.dbgLine.clear();\n    }\n    jslog=(ptr: number, len: number)=>{\n        if(!this.mem) return;\n        let td = new TextDecoder();\n        let str = new Uint8Array(this.mem.buffer, ptr, len);\n        let jsstr = td.decode(str);\n        console.log(jsstr);\n    }\n\n}","import { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Mesh } from \"./Mesh\";\nimport { SubMesh } from \"./SubMesh\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\n/**\n * <code>PrimitiveMesh</code> 类用于创建简单网格。\n */\nexport class PrimitiveMesh {\n\n\tstatic __init__(): void {\n\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic _createMesh(vertexDeclaration: VertexDeclaration, vertices: Float32Array, indices: Uint16Array): Mesh {\n\t\tvar mesh: Mesh = new Mesh();\n\t\tvar subMesh: SubMesh = new SubMesh(mesh);\n\t\tvar vertexBuffer: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vertices.length * 4, BufferUsage.Static, true);\n\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\n\t\tvertexBuffer.setData(vertices.buffer);\n\t\tmesh._vertexBuffer = vertexBuffer;\n\t\tmesh._vertexCount = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\n\t\tvar indexBuffer: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indices.length, BufferUsage.Static, true);\n\t\tindexBuffer.setData(indices);\n\t\tmesh._indexBuffer = indexBuffer;\n\n\t\tmesh._setBuffer(vertexBuffer, indexBuffer);\n\t\t//mesh._setInstanceBuffer(mesh._instanceBufferStateType);\n\t\tsubMesh._vertexBuffer = vertexBuffer;\n\t\tsubMesh._indexBuffer = indexBuffer;\n\t\tsubMesh._setIndexRange(0, indexBuffer.indexCount);\n\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\n\t\tsubIndexBufferStart.length = 1;\n\t\tsubIndexBufferCount.length = 1;\n\t\tboneIndicesList.length = 1;\n\t\tsubIndexBufferStart[0] = 0;\n\t\tsubIndexBufferCount[0] = indexBuffer.indexCount;\n\n\t\tvar subMeshes: SubMesh[] = [];\n\t\tsubMeshes.push(subMesh);\n\t\tmesh._setSubMeshes(subMeshes);\n\t\tmesh.calculateBounds();\n\t\tvar memorySize: number = vertexBuffer._byteLength + indexBuffer._byteLength;\n\t\tmesh._setCPUMemory(memorySize);\n\t\tmesh._setGPUMemory(memorySize);\n\t\treturn mesh;\n\t}\n\n\t/**\n\t * 创建Box网格。\n\t * @param long 半径\n\t * @param height 垂直层数\n\t * @param width 水平层数\n\t * @return\n\t */\n\tstatic createBox(long: number = 1, height: number = 1, width: number = 1): Mesh {\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n\n\t\tvar halfLong: number = long / 2;\n\t\tvar halfHeight: number = height / 2;\n\t\tvar halfWidth: number = width / 2;\n\n\t\tvar vertices: Float32Array = new Float32Array([\n\t\t\t//上\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 1, 0, 0, 0, halfLong, halfHeight, -halfWidth, 0, 1, 0, 1, 0, halfLong, halfHeight, halfWidth, 0, 1, 0, 1, 1, -halfLong, halfHeight, halfWidth, 0, 1, 0, 0, 1,\n\t\t\t//下\n\t\t\t-halfLong, -halfHeight, -halfWidth, 0, -1, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 0, -1, 0, 1, 1, halfLong, -halfHeight, halfWidth, 0, -1, 0, 1, 0, -halfLong, -halfHeight, halfWidth, 0, -1, 0, 0, 0,\n\t\t\t//左\n\t\t\t-halfLong, halfHeight, -halfWidth, -1, 0, 0, 0, 0, -halfLong, halfHeight, halfWidth, -1, 0, 0, 1, 0, -halfLong, -halfHeight, halfWidth, -1, 0, 0, 1, 1, -halfLong, -halfHeight, -halfWidth, -1, 0, 0, 0, 1,\n\t\t\t//右\n\t\t\thalfLong, halfHeight, -halfWidth, 1, 0, 0, 1, 0, halfLong, halfHeight, halfWidth, 1, 0, 0, 0, 0, halfLong, -halfHeight, halfWidth, 1, 0, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 1, 0, 0, 1, 1,\n\t\t\t//前\n\t\t\t-halfLong, halfHeight, halfWidth, 0, 0, 1, 0, 0, halfLong, halfHeight, halfWidth, 0, 0, 1, 1, 0, halfLong, -halfHeight, halfWidth, 0, 0, 1, 1, 1, -halfLong, -halfHeight, halfWidth, 0, 0, 1, 0, 1,\n\t\t\t//后\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 0, -1, 1, 0, halfLong, halfHeight, -halfWidth, 0, 0, -1, 0, 0, halfLong, -halfHeight, -halfWidth, 0, 0, -1, 0, 1, -halfLong, -halfHeight, -halfWidth, 0, 0, -1, 1, 1]);\n\n\t\tvar indices: Uint16Array = new Uint16Array([\n\t\t\t//上\n\t\t\t0, 1, 2, 2, 3, 0,\n\t\t\t//下\n\t\t\t4, 7, 6, 6, 5, 4,\n\t\t\t//左\n\t\t\t8, 9, 10, 10, 11, 8,\n\t\t\t//右\n\t\t\t12, 15, 14, 14, 13, 12,\n\t\t\t//前\n\t\t\t16, 17, 18, 18, 19, 16,\n\t\t\t//后\n\t\t\t20, 23, 22, 22, 21, 20]);\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\n\t}\n\n\t/**\n\t * 创建一个胶囊体模型\n\t * @param radius 半径\n\t * @param height 高度\n\t * @param stacks 水平层数,一般设为垂直层数的一半\n\t * @param slices 垂直层数\n\t */\n\tstatic createCapsule(radius: number = 0.5, height: number = 2, stacks: number = 16, slices: number = 32): Mesh {\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1) * 2 + (slices + 1) * 2;\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2 * 2 + 2 * slices * 3;\n\n\t\t//定义顶点数据结构\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n\t\t//单个顶点数据个数,总共字节数/单个字节数\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\n\t\t//顶点\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\n\t\t//顶点索引\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\n\n\t\tvar stackAngle: number = (Math.PI / 2.0) / stacks;\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\n\n\t\t//圆柱体高度的一半\n\t\tvar hcHeight: number = height / 2 - radius;\n\n\t\tvar posX: number = 0;\n\t\tvar posY: number = 0;\n\t\tvar posZ: number = 0;\n\n\t\tvar vc: number = 0;\n\t\tvar ic: number = 0;\n\n\t\tvar verticeCount: number = 0;\n\n\t\tvar stack: number, slice: number;\n\n\t\t//顶部半球\n\t\tfor (stack = 0; stack <= stacks; stack++) {\n\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\n\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\n\t\t\t\tposY = radius * Math.sin(stack * stackAngle);\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\n\n\t\t\t\t//pos\n\t\t\t\tvertices[vc++] = posX;\n\t\t\t\tvertices[vc++] = posY + hcHeight;\n\t\t\t\tvertices[vc++] = posZ;\n\n\t\t\t\t//normal\n\t\t\t\tvertices[vc++] = posX;\n\t\t\t\tvertices[vc++] = posY;\n\t\t\t\tvertices[vc++] = posZ;\n\n\t\t\t\t//uv\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\n\t\t\t\tvertices[vc++] = (1 - stack / stacks) * ((Math.PI * radius / 2) / (height + Math.PI * radius));\n\n\t\t\t\tif (stack < stacks) {\n\n\t\t\t\t\t// First\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + 1;\n\t\t\t\t\t// Second\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices);\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\tverticeCount += (stacks + 1) * (slices + 1);\n\n\t\t//底部半球\n\t\tfor (stack = 0; stack <= stacks; stack++) {\n\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\n\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\n\t\t\t\tposY = radius * Math.sin(-stack * stackAngle);\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\n\n\t\t\t\t//pos\n\t\t\t\tvertices[vc++] = posX;\n\t\t\t\tvertices[vc++] = posY - hcHeight;\n\t\t\t\tvertices[vc++] = posZ;\n\n\t\t\t\t//normal\n\t\t\t\tvertices[vc++] = posX;\n\t\t\t\tvertices[vc++] = posY;\n\t\t\t\tvertices[vc++] = posZ;\n\n\t\t\t\t//uv\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\n\t\t\t\tvertices[vc++] = ((stack / stacks) * (Math.PI * radius / 2) + (height + Math.PI * radius / 2)) / (height + Math.PI * radius);\n\n\t\t\t\tif (stack < stacks) {\n\n\t\t\t\t\t// First\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + 1;\n\t\t\t\t\t// Second\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices);\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tverticeCount += (stacks + 1) * (slices + 1);\n\n\t\t//侧壁\n\t\tfor (slice = 0; slice <= slices; slice++) {\n\t\t\tposX = radius * Math.cos(slice * sliceAngle + Math.PI);\n\t\t\tposY = hcHeight;\n\t\t\tposZ = radius * Math.sin(slice * sliceAngle + Math.PI);\n\n\t\t\t//pos\n\t\t\tvertices[vc++] = posX;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\n\t\t\tvertices[vc++] = posY;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\n\t\t\tvertices[vc++] = posZ;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\n\t\t\t//normal\n\t\t\tvertices[vc++] = posX;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\n\t\t\tvertices[vc++] = posZ;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\n\t\t\t//uv    \n\t\t\tvertices[vc++] = 1 - slice * 1 / slices;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - slice * 1 / slices;\n\t\t\tvertices[vc++] = (Math.PI * radius / 2) / (height + Math.PI * radius);\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = (Math.PI * radius / 2 + height) / (height + Math.PI * radius);\n\t\t}\n\n\t\tfor (slice = 0; slice < slices; slice++) {\n\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\n\t\t\tindices[ic++] = slice + verticeCount + 1;\n\t\t\tindices[ic++] = slice + verticeCount;\n\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1) + 1;\n\t\t\tindices[ic++] = slice + verticeCount + 1;\n\t\t}\n\n\t\tverticeCount += 2 * (slices + 1);\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\n\t}\n\n\t/**\n\t * 创建一个圆锥体模型\n\t * @param radius 半径\n\t * @param height 高度\n\t * @param slices 分段数\n\t */\n\tstatic createCone(radius: number = 0.5, height: number = 1, slices: number = 32): Mesh {\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2;\n\t\tvar indexCount: number = 6 * slices + 3 * slices;\n\n\t\t//定义顶点数据结构\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n\t\t//单个顶点数据个数,总共字节数/单个字节数\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\n\t\t//顶点\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\n\t\t//顶点索引\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\n\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\n\n\t\tvar halfHeight: number = height / 2;\n\t\tvar curAngle: number = 0;\n\t\tvar verticeCount: number = 0;\n\n\t\tvar posX: number = 0;\n\t\tvar posY: number = 0;\n\t\tvar posZ: number = 0;\n\n\t\tvar normal: Vector3 = new Vector3();\n\t\tvar downV3: Vector3 = new Vector3(0, -1, 0);\n\t\tvar upPoint: Vector3 = new Vector3(0, halfHeight, 0);\n\t\tvar downPoint: Vector3 = new Vector3();\n\t\tvar v3: Vector3 = new Vector3();\n\t\tvar q4: Quaternion = new Quaternion();\n\t\tvar rotateAxis: Vector3 = new Vector3();\n\t\tvar rotateRadius: number;\n\n\t\tvar vc: number = 0;\n\t\tvar ic: number = 0;\n\n\t\t//壁\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\n\t\t\tcurAngle = rv * sliceAngle;\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\n\t\t\tposY = halfHeight;\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\n\n\t\t\t//pos\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\n\t\t\tvertices[vc++] = posY;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\n\n\t\t\tnormal.x = posX;\n\t\t\tnormal.y = 0;\n\t\t\tnormal.z = posZ;\n\t\t\tdownPoint.x = posX;\n\t\t\tdownPoint.y = -posY;\n\t\t\tdownPoint.z = posZ;\n\t\t\tVector3.subtract(downPoint, upPoint, v3);\n\t\t\tVector3.normalize(v3, v3);\n\t\t\trotateRadius = Math.acos(Vector3.dot(downV3, v3));\n\t\t\tVector3.cross(downV3, v3, rotateAxis);\n\t\t\tVector3.normalize(rotateAxis, rotateAxis);\n\t\t\tQuaternion.createFromAxisAngle(rotateAxis, rotateRadius, q4);\n\t\t\tVector3.normalize(normal, normal);\n\t\t\tVector3.transformQuat(normal, q4, normal);\n\t\t\tVector3.normalize(normal, normal);\n\t\t\t//normal\n\t\t\tvertices[vc++] = normal.x;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.x;\n\t\t\tvertices[vc++] = normal.y;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.y;\n\t\t\tvertices[vc++] = normal.z;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.z;\n\t\t\t//uv    \n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\n\n\t\t}\n\n\t\tvc += (slices + 1) * 8;\n\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\n\t\t\tindices[ic++] = ri + verticeCount + 1;\n\t\t\tindices[ic++] = ri + verticeCount;\n\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\n\t\t\tindices[ic++] = ri + verticeCount + 1;\n\n\t\t}\n\n\t\tverticeCount += 2 * (slices + 1);\n\n\t\t//底\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\n\t\t\tif (bv === 0) {\n\t\t\t\t//pos\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\tvertices[vc++] = -halfHeight;\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\t//normal\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\tvertices[vc++] = -1;\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\t//uv\n\t\t\t\tvertices[vc++] = 0.5;\n\t\t\t\tvertices[vc++] = 0.5;\n\t\t\t}\n\n\t\t\tcurAngle = bv * sliceAngle;\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\n\t\t\tposY = -halfHeight;\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\n\n\t\t\t//pos\n\t\t\tvertices[vc++] = posX;\n\t\t\tvertices[vc++] = posY;\n\t\t\tvertices[vc++] = posZ;\n\t\t\t//normal\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc++] = -1;\n\t\t\tvertices[vc++] = 0;\n\t\t\t//uv\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\n\n\t\t}\n\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\n\t\t\tindices[ic++] = 0 + verticeCount;\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\n\t\t}\n\n\t\tverticeCount += slices + 1 + 1;\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\n\t}\n\n\t/**\n\t * 创建一个圆柱体模型\n\t * @param radius 半径\n\t * @param height 高度\n\t * @param slices 垂直层数\n\t */\n\tstatic createCylinder(radius: number = 0.5, height: number = 2, slices: number = 32): Mesh {\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2 + (slices + 1 + 1);\n\t\tvar indexCount: number = 3 * slices + 6 * slices + 3 * slices;\n\n\t\t//定义顶点数据结构\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n\t\t//单个顶点数据个数,总共字节数/单个字节数\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\n\t\t//顶点\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\n\t\t//顶点索引\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\n\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\n\n\t\tvar halfHeight: number = height / 2;\n\t\tvar curAngle: number = 0;\n\t\tvar verticeCount: number = 0;\n\t\tvar posX: number = 0;\n\t\tvar posY: number = 0;\n\t\tvar posZ: number = 0;\n\n\t\tvar vc: number = 0;\n\t\tvar ic: number = 0;\n\n\t\t//顶\n\t\tfor (var tv: number = 0; tv <= slices; tv++) {\n\n\t\t\tif (tv === 0) {\n\t\t\t\t//pos\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\tvertices[vc++] = halfHeight;\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\t//normal\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\tvertices[vc++] = 1;\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\t//uv\n\t\t\t\tvertices[vc++] = 0.5;\n\t\t\t\tvertices[vc++] = 0.5;\n\n\t\t\t}\n\n\t\t\tcurAngle = tv * sliceAngle;\n\t\t\tposX = Math.cos(curAngle) * radius;\n\t\t\tposY = halfHeight;\n\t\t\tposZ = Math.sin(curAngle) * radius;\n\n\t\t\t//pos\n\t\t\tvertices[vc++] = posX;\n\t\t\tvertices[vc++] = posY;\n\t\t\tvertices[vc++] = posZ;\n\t\t\t//normal\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc++] = 1;\n\t\t\tvertices[vc++] = 0;\n\n\t\t\t//uv\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\n\t\t}\n\n\t\tfor (var ti: number = 0; ti < slices; ti++) {\n\t\t\tindices[ic++] = 0;\n\t\t\tindices[ic++] = ti + 1;\n\t\t\tindices[ic++] = ti + 2;\n\t\t}\n\t\tverticeCount += slices + 1 + 1;\n\n\t\t//壁\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\n\t\t\tcurAngle = rv * sliceAngle;\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\n\t\t\tposY = halfHeight;\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\n\n\t\t\t//pos\n\t\t\tvertices[vc++] = posX;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\n\t\t\tvertices[vc++] = posY;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\n\t\t\tvertices[vc++] = posZ;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\n\t\t\t//normal\n\t\t\tvertices[vc++] = posX;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\n\t\t\tvertices[vc++] = posZ;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\n\t\t\t//uv    \n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\n\n\t\t}\n\n\t\tvc += (slices + 1) * 8;\n\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\n\t\t\tindices[ic++] = ri + verticeCount + 1;\n\t\t\tindices[ic++] = ri + verticeCount;\n\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\n\t\t\tindices[ic++] = ri + verticeCount + 1;\n\n\t\t}\n\n\t\tverticeCount += 2 * (slices + 1);\n\n\t\t//底\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\n\t\t\tif (bv === 0) {\n\t\t\t\t//pos\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\tvertices[vc++] = -halfHeight;\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\t//normal\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\tvertices[vc++] = -1;\n\t\t\t\tvertices[vc++] = 0;\n\t\t\t\t//uv\n\t\t\t\tvertices[vc++] = 0.5;\n\t\t\t\tvertices[vc++] = 0.5;\n\n\t\t\t}\n\n\t\t\tcurAngle = bv * sliceAngle;\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\n\t\t\tposY = -halfHeight;\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\n\n\t\t\t//pos\n\t\t\tvertices[vc++] = posX;\n\t\t\tvertices[vc++] = posY;\n\t\t\tvertices[vc++] = posZ;\n\t\t\t//normal\n\t\t\tvertices[vc++] = 0;\n\t\t\tvertices[vc++] = -1;\n\t\t\tvertices[vc++] = 0;\n\t\t\t//uv\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\n\n\t\t}\n\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\n\t\t\tindices[ic++] = 0 + verticeCount;\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\n\t\t}\n\n\t\tverticeCount += slices + 1 + 1;\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\n\t}\n\n\t/**\n\t * 创建一个平面模型\n\t * @param long  长\n\t * @param width 宽\n\t */\n\tstatic createPlane(long: number = 10, width: number = 10, stacks: number = 10, slices: number = 10): Mesh {\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\n\t\tvar indexCount: number = stacks * slices * 2 * 3;\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\n\t\t//定义顶点数据结构\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n\t\t//单个顶点数据个数,总共字节数/单个字节数\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\n\t\t//顶点数组长度\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\n\n\t\tvar halfLong: number = long / 2;\n\t\tvar halfWidth: number = width / 2;\n\t\tvar stacksLong: number = long / stacks;\n\t\tvar slicesWidth: number = width / slices;\n\n\t\tvar verticeCount: number = 0;\n\n\t\tfor (var i: number = 0; i <= slices; i++) {\n\n\t\t\tfor (var j: number = 0; j <= stacks; j++) {\n\n\t\t\t\tvertices[verticeCount++] = j * stacksLong - halfLong;\n\t\t\t\tvertices[verticeCount++] = 0;\n\t\t\t\tvertices[verticeCount++] = i * slicesWidth - halfWidth;\n\t\t\t\tvertices[verticeCount++] = 0;\n\t\t\t\tvertices[verticeCount++] = 1;\n\t\t\t\tvertices[verticeCount++] = 0;\n\t\t\t\tvertices[verticeCount++] = j * 1 / stacks;\n\t\t\t\tvertices[verticeCount++] = i * 1 / slices;\n\t\t\t}\n\t\t}\n\n\t\tvar indiceIndex: number = 0;\n\n\t\tfor (i = 0; i < slices; i++) {\n\n\t\t\tfor (j = 0; j < stacks; j++) {\n\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j;\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\n\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j + 1;\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\n\t}\n\n\t/**\n\t * 创建一个四边形模型\n\t * @param long  长\n\t * @param width 宽\n\t */\n\tstatic createQuad(long: number = 1, width: number = 1): Mesh {\n\t\t//定义顶点数据结构\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n\t\tvar halfLong: number = long / 2;\n\t\tvar halfWidth: number = width / 2;\n\n\t\tvar vertices: Float32Array = new Float32Array([-halfLong, halfWidth, 0, 0, 0, 1, 0, 0, halfLong, halfWidth, 0, 0, 0, 1, 1, 0, -halfLong, -halfWidth, 0, 0, 0, 1, 0, 1, halfLong, -halfWidth, 0, 0, 0, 1, 1, 1]);\n\t\tvar indices: Uint16Array = new Uint16Array([0, 1, 2, 3, 2, 1]);\n\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\n\t}\n\n\t/**\n\t * 创建一个球体模型\n\t * @param radius 半径\n\t * @param stacks 水平层数\n\t * @param slices 垂直层数\n\t */\n\tstatic createSphere(radius: number = 0.5, stacks: number = 32, slices: number = 32): Mesh {\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2;\n\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\n\n\t\tvar stackAngle: number = Math.PI / stacks;\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\n\n\t\t// Generate the group of Stacks for the sphere  \n\t\tvar vertexIndex: number = 0;\n\t\tvertexCount = 0;\n\t\tindexCount = 0;\n\n\t\tfor (var stack: number = 0; stack < (stacks + 1); stack++) {\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\n\n\t\t\t// Generate the group of segments for the current Stack  \n\t\t\tfor (var slice: number = 0; slice < (slices + 1); slice++) {\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle + Math.PI * 1 / 2);\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle + Math.PI * 1 / 2);\n\t\t\t\tvertices[vertexCount + 0] = x * radius;\n\t\t\t\tvertices[vertexCount + 1] = y * radius;\n\t\t\t\tvertices[vertexCount + 2] = z * radius;\n\n\t\t\t\tvertices[vertexCount + 3] = x;\n\t\t\t\tvertices[vertexCount + 4] = y;\n\t\t\t\tvertices[vertexCount + 5] = z;\n\n\t\t\t\tvertices[vertexCount + 6] = slice / slices;\n\t\t\t\tvertices[vertexCount + 7] = stack / stacks;\n\t\t\t\tvertexCount += vertexFloatStride;\n\t\t\t\tif (stack != (stacks - 1)) {\n\t\t\t\t\t// First Face\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\n\t\t\t\t\t// Second \n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices);\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\n\t\t\t\t\tvertexIndex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\n\t}\n}\n\n","#if !defined(Utils_lib)\n    #define Utils_lib\n\n#endif // Utils_lib","#if !defined(Color_lib)\n    #define Color_lib\n\n    #include \"Math.glsl\";\n\nvec3 linearToGamma(in vec3 value)\n{\n    return vec3(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))));\n}\n\nvec4 linearToGamma(in vec4 value)\n{\n    return vec4(linearToGamma(value.rgb), value.a);\n}\n\nvec3 gammaToLinear(in vec3 value)\n{\n    return pow((value + 0.055) / 1.055, vec3(2.4));\n}\n\nvec4 gammaToLinear(in vec4 value)\n{\n    return vec4(gammaToLinear(value.rgb), value.a);\n}\n\nconst float c_RGBDMaxRange = 255.0;\n\n// float color to rgbd\nvec4 encodeRGBD(in vec3 color)\n{\n    float maxRGB = max(vecmax(color), FLT_EPS);\n    float d = max(1.0, c_RGBDMaxRange / maxRGB);\n    d = saturate(d / 255.0);\n\n    vec3 rgb = color.rgb * d;\n    rgb = saturate(rgb);\n    return vec4(rgb, d);\n}\n\n// rgbd to float color\nvec3 decodeRGBD(in vec4 rgbd)\n{\n    vec3 color = rgbd.rgb * (1.0 / rgbd.a);\n    return color;\n}\n\n// float color to rgbm\nvec4 encodeRGBM(in vec3 color, float range)\n{\n    color *= 1.0 / range;\n    float maxRGB = max(vecmax(color), FLT_EPS);\n    float m = ceil(maxRGB * 255.0) / 255.0;\n    vec3 rgb = color.rgb * 1.0 / m;\n\n    vec4 rgbm = vec4(rgb, m);\n    return rgbm;\n}\n\n// rgbm to float color\nvec3 decodeRGBM(in vec4 rgbm, float range)\n{\n    return range * rgbm.rgb * rgbm.a;\n}\n\n#endif // Color_lib","#if !defined(Math_lib)\n    #define Math_lib\n\n    #ifndef GRAPHICS_API_GLES3\nmat2 inverse(mat2 m)\n{\n    return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / (m[0][0] * m[1][1] - m[0][1] * m[1][0]);\n}\nmat3 inverse(mat3 m)\n{\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n    float b01 = a22 * a11 - a12 * a21;\n    float b11 = -a22 * a10 + a12 * a20;\n    float b21 = a21 * a10 - a11 * a20;\n\n    float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11), b11, (a22 * a00 - a02 * a20),\n\t       (-a12 * a00 + a02 * a10), b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10))\n\t/ det;\n}\n\nmat4 inverse(mat4 m)\n{\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3], a10 = m[1][0], a11 = m[1][1], a12 = m[1][2],\n\t  a13 = m[1][3], a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3], a30 = m[3][0], a31 = m[3][1],\n\t  a32 = m[3][2], a33 = m[3][3],\n\n\t  b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10,\n\t  b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12,\n\t  b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30,\n\t  b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32,\n\n\t  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    return mat4(a11 * b11 - a12 * b10 + a13 * b09, a02 * b10 - a01 * b11 - a03 * b09, a31 * b05 - a32 * b04 + a33 * b03,\n\t       a22 * b04 - a21 * b05 - a23 * b03, a12 * b08 - a10 * b11 - a13 * b07, a00 * b11 - a02 * b08 + a03 * b07,\n\t       a32 * b02 - a30 * b05 - a33 * b01, a20 * b05 - a22 * b02 + a23 * b01, a10 * b10 - a11 * b08 + a13 * b06,\n\t       a01 * b08 - a00 * b10 - a03 * b06, a30 * b04 - a31 * b02 + a33 * b00, a21 * b02 - a20 * b04 - a23 * b00,\n\t       a11 * b07 - a10 * b09 - a12 * b06, a00 * b09 - a01 * b07 + a02 * b06, a31 * b01 - a30 * b03 - a32 * b00,\n\t       a20 * b03 - a21 * b01 + a22 * b00)\n\t/ det;\n}\n\nmat4 transpose(mat4 m){\n    return mat4(m[0][0],m[1][0],m[2][0],m[3][0],\n                m[0][1],m[1][1],m[2][1],m[3][1],\n                m[0][2],m[1][2],m[2][2],m[3][2],\n                m[0][3],m[1][3],m[2][3],m[3][3]);\n}\nmat3 transpose(mat3 m){\n    return mat3(m[0][0],m[1][0],m[2][0],\n                m[0][1],m[1][1],m[2][1],\n                m[0][2],m[1][2],m[2][2]);\n}\n    #endif // GRAPHICS_API_GLES3\n\n    #define PI 3.14159265359\n\n    #define INVERT_PI 0.31830988618\n\n    #define HALF_PI 1.570796327\n\n    #define MEDIUMP_FLT_MAX 65504.0\n    #define MEDIUMP_FLT_MIN 0.00006103515625\n\n    #if defined(GL_FRAGMENT_PRECISION_HIGH)\n\t#define FLT_EPS\t\t   1e-5\n\t#define saturateMediump(x) x\n    #else\n\t#define FLT_EPS\t\t   MEDIUMP_FLT_MIN\n\t#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)\n    #endif // GL_FRAGMENT_PRECISION_HIGH\n\n    #define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nfloat pow5(float x)\n{\n    float x2 = x * x;\n    return x2 * x2 * x;\n}\n\nconst float INVERT_LOG10 = 0.43429448190325176;\n\nfloat log10(float x)\n{\n    return log(x) * INVERT_LOG10;\n}\n\nfloat vecmax(const vec2 v)\n{\n    return max(v.x, v.y);\n}\n\nfloat vecmax(const vec3 v)\n{\n    return max(v.x, max(v.y, v.z));\n}\n\nfloat vecmax(const vec4 v)\n{\n    return max(max(v.x, v.y), max(v.z, v.w));\n}\n\nfloat vecmin(const vec2 v)\n{\n    return min(v.x, v.y);\n}\n\nfloat vecmin(const vec3 v)\n{\n    return min(v.x, min(v.y, v.z));\n}\n\nfloat vecmin(const vec4 v)\n{\n    return min(min(v.x, v.y), min(v.z, v.w));\n}\n\nvec3 SafeNormalize(in vec3 inVec)\n{\n    float dp3 = max(0.001, dot(inVec, inVec));\n    return inVec * inversesqrt(dp3);\n}\n\n/**\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\n * Valid in the range -1..1.\n */\nfloat acosFast(float x)\n{\n    // Lagarde 2014, \"Inverse trigonometric functions GPU optimization for AMD GCN architecture\"\n    // This is the approximation of degree 1, with a max absolute error of 9.0x10^-3\n    float y = abs(x);\n    float p = -0.1565827 * y + 1.570796;\n    p *= sqrt(1.0 - y);\n    return x >= 0.0 ? p : PI - p;\n}\n\n/**\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\n * Valid only in the range 0..1.\n */\nfloat acosFastPositive(float x)\n{\n    float p = -0.1565827 * x + 1.570796;\n    return p * sqrt(1.0 - x);\n}\n\n/*\n * Random number between 0 and 1, using interleaved gradient noise.\n * w must not be normalized (e.g. window coordinates)\n */\nfloat interleavedGradientNoise(const highp vec2 w)\n{\n    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);\n    return fract(m.z * fract(dot(w, m.xy)));\n}\n\n/*\n * vertex rotate by Euler\n */\nvec3 rotationByEuler(in vec3 vector, in vec3 rot)\n{\n    float halfRoll = rot.z * 0.5;\n    float halfPitch = rot.x * 0.5;\n    float halfYaw = rot.y * 0.5;\n\n    float sinRoll = sin(halfRoll);\n    float cosRoll = cos(halfRoll);\n    float sinPitch = sin(halfPitch);\n    float cosPitch = cos(halfPitch);\n    float sinYaw = sin(halfYaw);\n    float cosYaw = cos(halfYaw);\n\n    float quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\n    float quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\n    float quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\n    float quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\n\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\n    float x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n    float xx = quaX * x;\n    float xy = quaX * y;\n    float xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n}\n\n/*\n * Assume that axis has been normalized\n * point rotate by one axis\n */\nvec3 rotationByAxis(in vec3 vector, in vec3 axis, in float angle)\n{\n    float halfAngle = angle * 0.5;\n    float sin = sin(halfAngle);\n\n    float quaX = axis.x * sin;\n    float quaY = axis.y * sin;\n    float quaZ = axis.z * sin;\n    float quaW = cos(halfAngle);\n\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\n    float x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n    float xx = quaX * x;\n    float xy = quaX * y;\n    float xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n}\n\n/*\n *rotate by quaternions\n */\nvec3 rotationByQuaternions(in vec3 v, in vec4 q)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\n#endif // Math_lib","#if !defined(TBNNormal_lib)\n    #define TBNNormal_lib\n\n    #ifdef NEEDTBN\n\nmat3 generateTBNMat(in VertexParams params)\n{\n    vec3 normalWS = params.normalWS;\n    vec3 tangentWS = params.tangentWS.xyz;\n    vec3 biNormalWS = params.biNormalWS;\n\n    mat3 TBNMat = mat3(tangentWS, biNormalWS, normalWS);\n    return TBNMat;\n}\n\nvec3 sampleTBNNormalMap(in VertexParams params, in mat3 TBN, sampler2D normalMap, in vec2 uv)\n{\n    // vec2 uv = params.texCoord0;\n    vec3 samplerNormal = texture2D(normalMap, uv).rgb;\n    samplerNormal = normalize(samplerNormal * 2.0 - 1.0);;\n    vec3 normalWS = normalize(TBN * samplerNormal);\n    return normalWS;\n}\n\n    #endif // NEEDTBN\n\n#endif // TBNNormal_lib","#if !defined(BakeBoneAnimSampler_lib)\n    #define BakeBoneAnimSampler_lib\n\nmat4 loadBakedMatMatrix(float FramePos, float boneIndices, float offset)\n{\n    vec2 uv;\n    float PixelPos = FramePos + boneIndices * 4.0;\n    float halfOffset = offset * 0.5;\n    float uvoffset = PixelPos / u_SimpleAnimatorTextureSize;\n    uv.y = floor(uvoffset) * offset + halfOffset;\n    uv.x = mod(float(PixelPos), u_SimpleAnimatorTextureSize) * offset + halfOffset;\n    vec4 mat0row = texture2D(u_SimpleAnimatorTexture, uv);\n    uv.x += offset;\n    vec4 mat1row = texture2D(u_SimpleAnimatorTexture, uv);\n    uv.x += offset;\n    vec4 mat2row = texture2D(u_SimpleAnimatorTexture, uv);\n    uv.x += offset;\n    vec4 mat3row = texture2D(u_SimpleAnimatorTexture, uv);\n    mat4 m = mat4(mat0row.x, mat0row.y, mat0row.z, mat0row.w,\n\tmat1row.x, mat1row.y, mat1row.z, mat1row.w,\n\tmat2row.x, mat2row.y, mat2row.z, mat2row.w,\n\tmat3row.x, mat3row.y, mat3row.z, mat3row.w);\n    return m;\n}\n\n#endif // BakeBoneAnimSampler_lib","#if !defined(VertexCommon_lib)\n    #define VertexCommon_lib\n\nstruct Vertex {\n\n    vec3 positionOS;\n\n    vec3 normalOS;\n\n    #ifdef TANGENT\n    vec4 tangentOS;\n    #endif // TANGENT\n\n    // todo  uv define ?\n    #ifdef UV\n    vec2 texCoord0;\n    #endif // UV\n\n    #ifdef UV1\n    vec2 texCoord1;\n    #endif // UV1\n\n    #ifdef COLOR\n    vec4 vertexColor;\n    #endif // COLOR\n};\n\n\n/**\n * vertex position\n */\nvec4 getVertexPosition()\n{\n    vec4 position = a_Position;\n    return position;\n}\n\nvec2 transformUV(in vec2 texcoord, in vec4 tilingOffset)\n{\n    vec2 uv = texcoord * tilingOffset.xy + tilingOffset.zw * vec2(1.0, -1.0) + vec2(0.0, 1.0 - tilingOffset.y);\n    return uv;\n}\n\nvoid getVertexParams(inout Vertex vertex)\n{\n    vertex.positionOS = getVertexPosition().xyz;\n\n    vertex.normalOS = a_Normal.xyz;\n\n    #ifdef TANGENT\n    vertex.tangentOS = a_Tangent0;\n    #endif // TANGENT\n\n    #ifdef UV\n    vertex.texCoord0 = a_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n    vertex.texCoord1 = a_Texcoord1;\n    #endif // UV1\n\n    #ifdef COLOR\n    vertex.vertexColor = a_Color;\n    #endif // COLOR\n}\n\n#endif // VertexCommon_lib","#if !defined(SceneCommon_lib)\n    #define SceneCommon_lib\n\n    #ifdef ENUNIFORMBLOCK\nuniform SceneUniformBlock\n{\n    // time\n   \n    float u_Time;\n    float u_FogStart;\n    float u_FogRange;\n    \n    vec4 u_FogColor;\n\n};\n    #else // ENUNIFORMBLOCK\n// time\nuniform float u_Time;\nuniform float u_FogStart;\nuniform float u_FogRange;\nuniform vec4 u_FogColor;\n    #endif // ENUNIFORMBLOCK\n    //rotate SH IBL\nuniform float u_GIRotate;\n\n#endif // SceneCommon_lib","#if !defined(CameraCommon_lib)\n    #define CameraCommon_lib\n\n    #ifdef ENUNIFORMBLOCK\n\nuniform CameraUniformBlock\n{\n    mat4 u_View;\n    mat4 u_Projection;\n    mat4 u_ViewProjection;\n    vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\n    vec4 u_Viewport; // x,y,width,height\n    vec3 u_CameraDirection;\n    vec3 u_CameraUp;\n    vec3 u_CameraPos;\n};\n    #else\nuniform mat4 u_View;\nuniform mat4 u_Projection;\nuniform mat4 u_ViewProjection;\nuniform vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\nuniform vec4 u_Viewport; // x, y, width, height\nuniform vec3 u_CameraDirection;\nuniform vec3 u_CameraUp;\nuniform vec3 u_CameraPos;\n    #endif // ENUNIFORMBLOCK\n\n/*Depth or DepthNormal Uniform*/\nuniform highp sampler2D u_CameraDepthTexture;\nuniform vec4 u_ZBufferParams; //(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near)\nuniform mediump sampler2D u_CameraDepthNormalsTexture;\nuniform mediump sampler2D u_CameraOpaqueTexture;\n\nvec4 getPositionCS(in vec3 positionWS)\n{\n    return u_ViewProjection * vec4(positionWS, 1.0);\n}\n\nvec3 getViewDirection(in vec3 positionWS)\n{\n    return normalize(u_CameraPos - positionWS);\n}\n\n// 根据投影剧专重映射深度\nvec4 remapPositionZ(vec4 position)\n{\n    position.z = position.z * 2.0 - position.w;\n    return position;\n}\n\n#endif // CameraCommon_lib","#if !defined(Sprite3DCommon_lib)\n    #define Sprite3DCommon_lib\n\nuniform mat4 u_WorldMat;\n\n    #ifdef LIGHTMAP\nuniform vec4 u_LightmapScaleOffset;\n    #endif // LIGHTMAP\n\nvec2 tranformLightMapUV(in vec2 texcoord, in vec4 tilingOffset)\n{\n    vec2 lightMapUV = vec2(texcoord.x, 1.0 - texcoord.y) * tilingOffset.xy + tilingOffset.zw;\n    lightMapUV.y = 1.0 - lightMapUV.y;\n    return lightMapUV;\n}\n\n#endif // Sprite3DCommon_lib","#if !defined(Sprite3DVertex_lib)\n    #define Sprite3DVertex_lib\n\n    #include \"Sprite3DCommon.glsl\";\n\n    #ifdef BONE\n// todo const int c_MaxBoneCount = 24\nuniform mat4 u_Bones[24];\n\n\t#ifdef SIMPLEBONE\nuniform vec4 u_SimpleAnimatorParams;\nuniform sampler2D u_SimpleAnimatorTexture;\nuniform float u_SimpleAnimatorTextureSize;\n\t    #include \"BakedBoneMatrixSampler.glsl\";\n\n\t#endif // SIMPLEBONE\n\n    #endif // BONE\n\n/**\n * world matrix\n */\nmat4 getWorldMatrix()\n{\n    #ifdef GPU_INSTANCE\n    mat4 worldMat = a_WorldMat;\n    #else\n    mat4 worldMat = u_WorldMat;\n    #endif // GPU_INSTANCE\n\n    #ifdef BONE\n\n\t#ifdef SIMPLEBONE\n\n\t    #ifdef GPU_INSTANCE\n    float currentPixelPos = a_SimpleTextureParams.x + a_SimpleTextureParams.y;\n\t    #else // GPU_INSTANCE\n    float currentPixelPos = u_SimpleAnimatorParams.x + u_SimpleAnimatorParams.y;\n\t    #endif // GPU_INSTANCE\n\n    float offset = 1.0 / u_SimpleAnimatorTextureSize;\n    mat4 skinTrans = loadBakedMatMatrix(currentPixelPos, a_BoneIndices.x, offset) * a_BoneWeights.x;\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.y, offset) * a_BoneWeights.y;\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.z, offset) * a_BoneWeights.z;\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.w, offset) * a_BoneWeights.w;\n    worldMat = worldMat * skinTrans;\n\n\t#else // SIMPLEBONE\n\n    ivec4 boneIndex = ivec4(a_BoneIndices);\n    mat4 skinTrans = u_Bones[boneIndex.x] * a_BoneWeights.x;\n    skinTrans += u_Bones[boneIndex.y] * a_BoneWeights.y;\n    skinTrans += u_Bones[boneIndex.z] * a_BoneWeights.z;\n    skinTrans += u_Bones[boneIndex.w] * a_BoneWeights.w;\n    worldMat = worldMat * skinTrans;\n\n\t#endif // SIMPLEBONE\n\n    #endif // BONE\n\n    return worldMat;\n}\n\n#endif // Sprite3DVertex_lib","#if !defined(Sprite3DFrag_lib)\n    #define Sprite3DFrag_lib\n\n    #include \"Sprite3DCommon.glsl\";\n\n#endif // Sprite3DFrag_lib","#if !defined(DepthVertex_lib)\n    #define DepthVertex_lib\n\n    #include \"Scene.glsl\";\n    #include \"Camera.glsl\";\n    #include \"Sprite3DVertex.glsl\";\n\n    #include \"VertexCommon.glsl\";\n\n    #if defined(SHADOW) || defined(SHADOW_SPOT)\n\n\t#ifndef DEPTHPASS\n\t    #ifdef ENUNIFORMBLOCK\nuniform ShadowUniformBlock\n{\n    vec4 u_ShadowBias; // x: depth bias, y: normal bias\n    vec3 u_ShadowLightDirection;\n};\n\t    #else // ENUNIFORMBLOCK\nuniform vec4 u_ShadowBias; // x: depth bias, y: normal bias\n\t\t#ifdef SHADOW\nuniform vec3 u_ShadowLightDirection;\n\t\t#endif // SHADOW\n\t    #endif // ENUNIFORMBLOCK\n\n// 根据投影剧专重映射深度\n//vec4 remapPositionZ(vec4 position)\n//{\n//    position.z = position.z * 2.0 - position.w;\n//    return position;\n//}\n\nvec3 applyShadowBias(vec3 positionWS, vec3 normalWS, vec3 lightDirection)\n{\n    float invNdotL = 1.0 - clamp(dot(-lightDirection, normalWS), 0.0, 1.0);\n    float scale = invNdotL * u_ShadowBias.y;\n\n    // normal bias is negative since we want to apply an inset normal offset\n    positionWS += -lightDirection * u_ShadowBias.xxx;\n    positionWS += normalWS * vec3(scale);\n    return positionWS;\n}\n\t#endif // DEPTHPASS\n    #endif // SHADOW || SHADOW_SPOT\n\n    #ifdef DEPTHPASS\n\t#include \"Camera.glsl\";\n    #endif // DEPTHPASS\n\nvec4 DepthPositionCS(in vec3 positionWS, in vec3 normalWS)\n{\n    #ifdef DEPTHPASS\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\n    #endif // DEPTHPASS\n\n    #ifdef SHADOW\n\t#ifndef DEPTHPASS\n    positionWS = applyShadowBias(positionWS, normalWS, u_ShadowLightDirection);\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\n\t#endif // DEPTHPASS\n    #endif // SHADOW\n\n    #ifdef SHADOW_SPOT\n\t#ifndef DEPTHPASS\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\n    positionCS.z = positionCS.z - u_ShadowBias.x / positionCS.w;\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\n\t#endif // DEPTHPASS\n    #endif // SHADOW_SPOT\n\n    return positionCS;\n}\n\n\n#endif // DepthVertex_lib","#if !defined(DepthFrag_lib)\n    #define DepthFrag_lib\n\nvec4 getDepthColor()\n{\n    return vec4(0.0);\n}\n\n#endif // DepthFrag_lib","#define SAMPLE_DEPTH_TEXTURE(textureName,coord2) (texture2D(textureName,coord2).r)\n//此方法库用来压缩解析深度贴图，法线深度贴图\n\n// Encoding/decoding view space normals into 2D 0..1 vector\nvec2 EncodeViewNormalStereo( vec3 n )\n{\n    n.z = abs(n.z);\n    float kScale = 1.7777;\n    vec2 enc;\n    enc = n.xy / (n.z+1.0);\n    enc /= kScale;\n    enc = enc*0.5+0.5;\n    return enc;\n}\n\nvec3 DecodeViewNormalStereo( vec4 enc4 )\n{\n    float kScale = 1.7777;\n    vec3 nn = enc4.xyz*vec3(2.0*kScale,2.0*kScale,0.0) + vec3(-kScale,-kScale,1.0);\n    float g = 2.0 / dot(nn.xyz,nn.xyz);\n    vec3 n;\n    n.xy = g*nn.xy;\n    n.z = g-1.0;\n    return n;\n}\n\n\n// Encoding/decoding [0..1) floats into 8 bit/channel RG. Note that 1.0 will not be encoded properly.\nvec2 EncodeFloatRG( float v )\n{\n    vec2 kEncodeMul = vec2(1.0, 255.0);\n    float kEncodeBit = 1.0/255.0;\n    vec2 enc = kEncodeMul * v;\n    enc = fract(enc);\n    enc.x -= enc.y * kEncodeBit;\n    return enc;\n}\n\n\n\nfloat DecodeFloatRG( vec2 enc )\n{\n    vec2 kDecodeDot = vec2(1.0, 1.0/255.0);\n    return dot( enc, kDecodeDot );\n}\n\nvec4 EncodeDepthNormal(float depth,vec3 normals){\n\tvec4 encode;\n\tencode.xy = EncodeViewNormalStereo(normals);\n\tencode.zw = EncodeFloatRG(depth);\n    return encode;\n}\n\nvoid DecodeDepthNormal( vec4 enc, out float depth, out vec3 normal )\n{\n    depth = DecodeFloatRG (enc.zw);\n    normal = DecodeViewNormalStereo (enc);\n}\n\n\n\nvec4 depthNormalsFragment(vec4 depthNormal)\n{\n    return EncodeDepthNormal(depthNormal.w,depthNormal.xyz);\n}\n\n\n// Z buffer to linear 0..1 depth\nfloat Linear01Depth(float z,vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\n}\n// Z buffer to linear depth\nfloat LinearEyeDepth(float z,vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\n}\n","// ------------------------------------------------------------------\n//  PCF Filtering Tent Functions\n// ------------------------------------------------------------------\n\n// Assuming a isoceles right angled triangle of height \"triangleHeight\" (as drawn below).\n// This function return the area of the triangle above the first texel(in Y the first texel).\n//\n// |\\      <-- 45 degree slop isosceles right angled triangle\n// | \\\n// ----    <-- length of this side is \"triangleHeight\"\n// _ _ _ _ <-- texels\nfloat sampleShadowGetIRTriangleTexelArea(float triangleHeight)\n{\n    return triangleHeight - 0.5;\n}\n\n// Assuming a isoceles triangle of 1.5 texels height and 3 texels wide lying on 4 texels.\n// This function return the area of the triangle above each of those texels.\n//    |    <-- offset from -0.5 to 0.5, 0 meaning triangle is exactly in the center\n//   / \\   <-- 45 degree slop isosceles triangle (ie tent projected in 2D)\n//  /   \\\n// _ _ _ _ <-- texels\n// X Y Z W <-- result indices (in computedArea.xyzw and computedAreaUncut.xyzw)\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\nvoid sampleShadowGetTexelAreasTent3x3(float offset, out vec4 computedArea, out vec4 computedAreaUncut)\n{\n    // Compute the exterior areas,a and h is same.\n    float a = offset + 0.5;\n    float offsetSquaredHalved = a * a * 0.5;\n    computedAreaUncut.x = computedArea.x = offsetSquaredHalved - offset;\n    computedAreaUncut.w = computedArea.w = offsetSquaredHalved;\n\n    // Compute the middle areas\n    // For Y : We find the area in Y of as if the left section of the isoceles triangle would\n    // intersect the axis between Y and Z (ie where offset = 0).\n    computedAreaUncut.y = sampleShadowGetIRTriangleTexelArea(1.5 - offset);\n    // This area is superior to the one we are looking for if (offset < 0) thus we need to\n    // subtract the area of the triangle defined by (0,1.5-offset), (0,1.5+offset), (-offset,1.5).\n    float clampedOffsetLeft = min(offset,0.0);\n    float areaOfSmallLeftTriangle = clampedOffsetLeft * clampedOffsetLeft;\n    computedArea.y = computedAreaUncut.y - areaOfSmallLeftTriangle;\n\n    // We do the same for the Z but with the right part of the isoceles triangle\n    computedAreaUncut.z = sampleShadowGetIRTriangleTexelArea(1.5 + offset);\n    float clampedOffsetRight = max(offset,0.0);\n    float areaOfSmallRightTriangle = clampedOffsetRight * clampedOffsetRight;\n    computedArea.z = computedAreaUncut.z - areaOfSmallRightTriangle;\n}\n\n// Assuming a isoceles triangle of 2.5 texel height and 5 texels wide lying on 6 texels.\n// This function return the weight of each texels area relative to the full triangle area.\n//  /       \\\n// _ _ _ _ _ _ <-- texels\n// 0 1 2 3 4 5 <-- computed area indices (in texelsWeights[])\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\nvoid sampleShadowGetTexelWeightsTent5x5(float offset, out vec3 texelsWeightsA, out vec3 texelsWeightsB)\n{\n    vec4 areaFrom3texelTriangle;\n    vec4 areaUncutFrom3texelTriangle;\n    sampleShadowGetTexelAreasTent3x3(offset, areaFrom3texelTriangle, areaUncutFrom3texelTriangle);\n\n    // Triangle slope is 45 degree thus we can almost reuse the result of the 3 texel wide computation.\n    // the 5 texel wide triangle can be seen as the 3 texel wide one but shifted up by one unit/texel.\n    // 0.16 is 1/(the triangle area)\n    texelsWeightsA.x = 0.16 * (areaFrom3texelTriangle.x);\n    texelsWeightsA.y = 0.16 * (areaUncutFrom3texelTriangle.y);\n    texelsWeightsA.z = 0.16 * (areaFrom3texelTriangle.y + 1.0);\n    texelsWeightsB.x = 0.16 * (areaFrom3texelTriangle.z + 1.0);\n    texelsWeightsB.y = 0.16 * (areaUncutFrom3texelTriangle.z);\n    texelsWeightsB.z = 0.16 * (areaFrom3texelTriangle.w);\n}\n\n// 5x5 Tent filter (45 degree sloped triangles in U and V)\nvoid sampleShadowComputeSamplesTent5x5(vec4 shadowMapTextureTexelSize, vec2 coord, out float fetchesWeights[9], out vec2 fetchesUV[9])\n{\n    // tent base is 5x5 base thus covering from 25 to 36 texels, thus we need 9 bilinear PCF fetches\n    vec2 tentCenterInTexelSpace = coord.xy * shadowMapTextureTexelSize.zw;\n    vec2 centerOfFetchesInTexelSpace = floor(tentCenterInTexelSpace + 0.5);\n    vec2 offsetFromTentCenterToCenterOfFetches = tentCenterInTexelSpace - centerOfFetchesInTexelSpace;\n\n    // find the weight of each texel based on the area of a 45 degree slop tent above each of them.\n    vec3 texelsWeightsUA, texelsWeightsUB;\n    vec3 texelsWeightsVA, texelsWeightsVB;\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.x, texelsWeightsUA, texelsWeightsUB);\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.y, texelsWeightsVA, texelsWeightsVB);\n\n    // each fetch will cover a group of 2x2 texels, the weight of each group is the sum of the weights of the texels\n    vec3 fetchesWeightsU = vec3(texelsWeightsUA.xz, texelsWeightsUB.y) + vec3(texelsWeightsUA.y, texelsWeightsUB.xz);\n    vec3 fetchesWeightsV = vec3(texelsWeightsVA.xz, texelsWeightsVB.y) + vec3(texelsWeightsVA.y, texelsWeightsVB.xz);\n\n    // move the PCF bilinear fetches to respect texels weights\n    vec3 fetchesOffsetsU = vec3(texelsWeightsUA.y, texelsWeightsUB.xz) / fetchesWeightsU.xyz + vec3(-2.5,-0.5,1.5);\n    vec3 fetchesOffsetsV = vec3(texelsWeightsVA.y, texelsWeightsVB.xz) / fetchesWeightsV.xyz + vec3(-2.5,-0.5,1.5);\n    fetchesOffsetsU *= shadowMapTextureTexelSize.xxx;\n    fetchesOffsetsV *= shadowMapTextureTexelSize.yyy;\n\n    vec2 bilinearFetchOrigin = centerOfFetchesInTexelSpace * shadowMapTextureTexelSize.xy;\n    fetchesUV[0] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.x);\n    fetchesUV[1] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.x);\n    fetchesUV[2] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.x);\n    fetchesUV[3] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.y);\n    fetchesUV[4] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.y);\n    fetchesUV[5] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.y);\n    fetchesUV[6] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.z);\n    fetchesUV[7] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.z);\n    fetchesUV[8] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.z);\n\n    fetchesWeights[0] = fetchesWeightsU.x * fetchesWeightsV.x;\n    fetchesWeights[1] = fetchesWeightsU.y * fetchesWeightsV.x;\n    fetchesWeights[2] = fetchesWeightsU.z * fetchesWeightsV.x;\n    fetchesWeights[3] = fetchesWeightsU.x * fetchesWeightsV.y;\n    fetchesWeights[4] = fetchesWeightsU.y * fetchesWeightsV.y;\n    fetchesWeights[5] = fetchesWeightsU.z * fetchesWeightsV.y;\n    fetchesWeights[6] = fetchesWeightsU.x * fetchesWeightsV.z;\n    fetchesWeights[7] = fetchesWeightsU.y * fetchesWeightsV.z;\n    fetchesWeights[8] = fetchesWeightsU.z * fetchesWeightsV.z;\n}","#if !defined(ShadowSampler_lib)\n    #define ShadowSampler_lib\n\n    #ifndef GRAPHICS_API_GLES3\n\t#define NO_NATIVE_SHADOWMAP\n    #endif // GRAPHICS_API_GLES3\n\n    #if defined(NO_NATIVE_SHADOWMAP)\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2D textureName\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (texture2D(textureName, coord3.xy).r < coord3.z ? 0.0 : 1.0)\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2D shadowMap\n    #else // NO_NATIVE_SHADOWMAP\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2DShadow textureName\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) textureLod(textureName, coord3, 0.0)\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2DShadow shadowMap\n    #endif // NO_NATIVE_SHADOWMAP\n\n    // 计算阴影\n    #ifdef RECEIVESHADOW\n\n\t#include \"ShadowSampleTent.glsl\";\n\nuniform vec4 u_ShadowParams;\n\n\t#define ShadowStrength\t   u_ShadowParams.x\n\t#define SpotShadowStrength u_ShadowParams.y\n\n    // 平行光阴影\n\t#ifdef SHADOW\n\t    #define CALCULATE_SHADOWS\nvarying vec4 v_ShadowCoord;\nTEXTURE2D_SHADOW(u_ShadowMap);\nuniform vec4 u_ShadowMapSize;\n\n#ifdef SHADOW_CASCADE\nconst int c_MaxCascadeCount = 4;\n#else //SHADOW_CASCADE\nconst int c_MaxCascadeCount = 1;\n#endif//SHADOW_CASCADE\n\nuniform mat4 u_ShadowMatrices[c_MaxCascadeCount];\nuniform vec4 u_ShadowSplitSpheres[c_MaxCascadeCount];\n\t#endif // SHADOW\n\n\t// 聚光灯阴影\n\t#ifdef SHADOW_SPOT\n\t    #define CALCULATE_SPOTSHADOWS\nvarying vec4 v_SpotShadowCoord;\nTEXTURE2D_SHADOW(u_SpotShadowMap);\nuniform vec4 u_SpotShadowMapSize;\nuniform mat4 u_SpotViewProjectMatrix;\n\t#endif // SHADOW_SPOT\n\nfloat sampleShdowMapFiltered4(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowMapSize)\n{\n    float attenuation;\n    vec4 attenuation4;\n    vec2 offset = shadowMapSize.xy / 2.0;\n    vec3 shadowCoord0 = shadowCoord + vec3(-offset, 0.0);\n    vec3 shadowCoord1 = shadowCoord + vec3(offset.x, -offset.y, 0.0);\n    vec3 shadowCoord2 = shadowCoord + vec3(-offset.x, offset.y, 0.0);\n    vec3 shadowCoord3 = shadowCoord + vec3(offset, 0.0);\n    attenuation4.x = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord0);\n    attenuation4.y = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord1);\n    attenuation4.z = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord2);\n    attenuation4.w = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord3);\n    attenuation = dot(attenuation4, vec4(0.25));\n    return attenuation;\n}\n\nfloat sampleShdowMapFiltered9(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowmapSize)\n{\n    float attenuation;\n    float fetchesWeights[9];\n    vec2 fetchesUV[9];\n    sampleShadowComputeSamplesTent5x5(shadowmapSize, shadowCoord.xy, fetchesWeights, fetchesUV);\n    attenuation = fetchesWeights[0] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[0].xy, shadowCoord.z));\n    attenuation += fetchesWeights[1] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[1].xy, shadowCoord.z));\n    attenuation += fetchesWeights[2] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[2].xy, shadowCoord.z));\n    attenuation += fetchesWeights[3] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[3].xy, shadowCoord.z));\n    attenuation += fetchesWeights[4] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[4].xy, shadowCoord.z));\n    attenuation += fetchesWeights[5] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[5].xy, shadowCoord.z));\n    attenuation += fetchesWeights[6] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[6].xy, shadowCoord.z));\n    attenuation += fetchesWeights[7] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[7].xy, shadowCoord.z));\n    attenuation += fetchesWeights[8] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[8].xy, shadowCoord.z));\n    return attenuation;\n}\n    #endif // RECEIVESHADOW\n\n    // 计算平行光阴影\n    #if defined(CALCULATE_SHADOWS)\n\n#ifdef SHADOW_CASCADE\n// 平行光阴影级联索引\nmediump int computeCascadeIndex(in vec3 positionWS)\n{\n    vec3 fromCenter0 = positionWS - u_ShadowSplitSpheres[0].xyz;\n    vec3 fromCenter1 = positionWS - u_ShadowSplitSpheres[1].xyz;\n    vec3 fromCenter2 = positionWS - u_ShadowSplitSpheres[2].xyz;\n    vec3 fromCenter3 = positionWS - u_ShadowSplitSpheres[3].xyz;\n\n    mediump vec4 comparison = vec4(dot(fromCenter0, fromCenter0) < u_ShadowSplitSpheres[0].w,\n\tdot(fromCenter1, fromCenter1) < u_ShadowSplitSpheres[1].w,\n\tdot(fromCenter2, fromCenter2) < u_ShadowSplitSpheres[2].w,\n\tdot(fromCenter3, fromCenter3) < u_ShadowSplitSpheres[3].w);\n\n    comparison.yzw = clamp(comparison.yzw - comparison.xyz, 0.0, 1.0); // keep the nearest\n    mediump vec4 indexCoefficient = vec4(4.0, 3.0, 2.0, 1.0);\n    mediump int index = 4 - int(dot(comparison, indexCoefficient));\n    return index;\n}\n#endif\n\n// 平行光阴影坐标\nvec4 getShadowCoord(in vec3 positionWS)\n{\n\t#ifdef SHADOW_CASCADE\n    mediump int cascadeIndex = computeCascadeIndex(positionWS);\n\t    #ifdef GRAPHICS_API_GLES3\n    mat4 shadowMat = u_ShadowMatrices[cascadeIndex];\n\t    #else // GRAPHICS_API_GLES3\n    mat4 shadowMat;\n    if (cascadeIndex == 0)\n\t{\n\t    shadowMat = u_ShadowMatrices[0];\n\t}\n    else if (cascadeIndex == 1)\n\t{\n\t    shadowMat = u_ShadowMatrices[1];\n\t}\n    else if (cascadeIndex == 2)\n\t{\n\t    shadowMat = u_ShadowMatrices[2];\n\t}\n    else\n\t{\n\t    shadowMat = u_ShadowMatrices[3];\n\t}\n\t    #endif // GRAPHICS_API_GLES3\n\n    return shadowMat * vec4(positionWS, 1.0);\n\n\t#else // SHADOW_CASCADE\n\n    return u_ShadowMatrices[0] * vec4(positionWS, 1.0);\n\n\t#endif // SHADOW_CASCADE\n}\n\n// 采样平行光阴影\nfloat sampleShadowmap(in vec4 shadowCoord)\n{\n    float attenuation = 1.0;\n\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\n\n    vec4 shadowmapSize = u_ShadowMapSize;\n\n    if (coord.z > 0.0 && coord.z < 1.0)\n\t{\n\t#if defined(SHADOW_SOFT_SHADOW_HIGH)\n\t    attenuation = sampleShdowMapFiltered9(u_ShadowMap, coord, shadowmapSize);\n\t#elif defined(SHADOW_SOFT_SHADOW_LOW)\n\t    attenuation = sampleShdowMapFiltered4(u_ShadowMap, coord, shadowmapSize);\n\t#else // hard\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_ShadowMap, coord);\n\t#endif // SHADOW_SOFT_SHADOW_HIGH\n\t    attenuation = mix(1.0, attenuation, ShadowStrength);\n\t}\n\n    return attenuation;\n}\n\n    #endif // CALCULATE_SHADOWS\n\n    // 计算 聚光灯 阴影\n    #if defined(CALCULATE_SPOTSHADOWS)\n\n// 聚光灯阴影坐标\nvec4 getSpotShadowCoord(in vec3 positionWS)\n{\n    vec4 coordinate = u_SpotViewProjectMatrix * vec4(positionWS, 1.0);\n\n    return coordinate;\n}\n\n// 采样聚光灯阴影\nfloat sampleSpotShadowmap(vec4 shadowCoord)\n{\n    float attenuation = 1.0;\n\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\n    coord.xy = coord.xy * 0.5 + 0.5;\n\n    vec4 shadowmapSize = u_SpotShadowMapSize;\n    // todo\n    if (coord.z > 0.0 && coord.z < 1.0)\n\t{\n\t#if defined(SHADOW_SPOT_SOFT_SHADOW_HIGH)\n\t    attenuation = sampleShdowMapFiltered9(u_SpotShadowMap, coord, shadowmapSize);\n\t#elif defined(SHADOW_SPOT_SOFT_SHADOW_LOW)\n\t    attenuation = sampleShdowMapFiltered4(u_SpotShadowMap, coord, shadowmapSize);\n\t#else // hard\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_SpotShadowMap, coord);\n\t#endif\n\t    attenuation = mix(1.0, attenuation, SpotShadowStrength);\n\t}\n\n    return attenuation;\n}\n\n    #endif // CALCULATE_SPOTSHADOWS\n\n#endif // ShadowSampler_lib","#if !defined(SceneFog_lib)\n    #define SceneFog_lib\n\nvec3 scenUnlitFog(in vec3 color)\n{\n    float lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\n    #ifdef ADDTIVEFOG\n    return mix(color, vec3(0.0), lerpFact);\n    #else\n    return mix(color, u_FogColor.rgb, lerpFact);\n    #endif // ADDTIVEFOG\n}\n\nvec3 sceneLitFog(in vec3 color)\n{\n    float lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\n    return mix(color, u_FogColor.rgb, lerpFact);\n}\n\n#endif // SceneFog_lib","#if !defined(Lighting_lib)\n    #define Lighting_lib\n\n    #include \"ShadowSampler.glsl\";\n\nstruct Light {\n    vec3 color;\n    vec3 dir;\n    float attenuation;\n};\n\nstruct DirectionLight {\n    vec3 color;\n    vec3 direction;\n    float attenuation;\n    int lightMode;\n};\n\nstruct PointLight {\n    vec3 color;\n    vec3 position;\n    float range;\n    float attenuation;\n    int lightMode;\n};\n\nstruct SpotLight {\n    vec3 color;\n    vec3 position;\n    float range;\n    vec3 direction;\n    float spot;\n    float attenuation;\n    int lightMode;\n};\n\n    #define LightMode_Mix      0\n    #define LightMode_RealTime 1\n\nint getAttenuationByMode(float lightMapMode)\n{\n    #ifdef LIGHTMAP // mix 0 realtime 1\n    return int(lightMapMode);\n    #endif\n    return LightMode_RealTime;\n}\n\n    #if defined(DIRECTIONLIGHT) || defined(POINTLIGHT) || defined(SPOTLIGHT)\n\n\t#define LIGHTING\n\n// 灯光衰减函数\nfloat attenuation(in vec3 L, in float invLightRadius)\n{\n    float fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\n    fRatio *= fRatio;\n    return 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0 * (1.0 - fRatio), 0.0, 1.0);\n}\n\n// 平行光\nLight getLight(in DirectionLight directionLight)\n{\n    Light light;\n    light.color = directionLight.color;\n    light.dir = directionLight.direction;\n    light.attenuation = directionLight.attenuation;\n    return light;\n}\n\n// 点光\nLight getLight(in PointLight pointLight, in vec3 normalWS, in vec3 positionWS)\n{\n    vec3 lightDirection = positionWS - pointLight.position;\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / pointLight.range);\n\n    Light light;\n    light.color = pointLight.color * rangeAttenuate;\n    light.dir = normalize(lightDirection);\n    light.attenuation = pointLight.attenuation;\n    return light;\n}\n\n// 聚光灯\nLight getLight(in SpotLight spotLight, in vec3 normalWS, in vec3 positionWS)\n{\n    vec3 lightDirection = positionWS - spotLight.position;\n    vec3 normalizeLightDir = normalize(lightDirection);\n\n    vec2 cosAngles = cos(vec2(spotLight.spot, spotLight.spot * 0.5) * 0.5);\n    float dirAttenuate = dot(spotLight.direction, normalizeLightDir);\n    dirAttenuate *= smoothstep(cosAngles.x, cosAngles.y, dirAttenuate);\n\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / spotLight.range);\n\n    Light light;\n    light.color = spotLight.color * rangeAttenuate * dirAttenuate;\n    light.dir = normalizeLightDir;\n    light.attenuation = spotLight.attenuation;\n    return light;\n}\n\n\t#ifdef LEGACYSINGLELIGHTING\n\t    #define CalculateLightCount 1\n\t    #define DirectionCount\t1\n\n\t    #ifdef DIRECTIONLIGHT\nuniform DirectionLight u_DirectionLight;\n\t    #endif // DIRECTIONLIGHT\n\n\t    #ifdef POINTLIGHT\nuniform PointLight u_PointLight;\n\t    #endif // POINTLIGHT\n\n\t    #ifdef SPOTLIGHT\nuniform SpotLight u_SpotLight;\n\t    #endif // SPOTLIGHT\n\n\t#else // LEGACYSINGLELIGHTING\n\t    #define CalculateLightCount MAX_LIGHT_COUNT\n\t    #define DirectionCount\tu_DirationLightCount\n\nuniform sampler2D u_LightBuffer;\n\n\t    #ifdef DIRECTIONLIGHT\nuniform mediump int u_DirationLightCount;\n\t    #endif\n\n\t    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\nconst int c_ClusterBufferWidth = CLUSTER_X_COUNT * CLUSTER_Y_COUNT;\nconst int c_ClusterBufferHeight = CLUSTER_Z_COUNT * (1 + int(ceil(float(MAX_LIGHT_COUNT_PER_CLUSTER) / 4.0)));\nconst int c_ClusterBufferFloatWidth = c_ClusterBufferWidth * 4;\nuniform sampler2D u_LightClusterBuffer;\n\nint getLightIndex(in int offset, in int index)\n{\n    int totalOffset = offset + index;\n    int row = totalOffset / c_ClusterBufferFloatWidth;\n    int lastRowFloat = totalOffset - row * c_ClusterBufferFloatWidth;\n    int col = lastRowFloat / 4;\n    vec2 uv = vec2((float(col) + 0.5) / float(c_ClusterBufferWidth), (float(row) + 0.5) / float(c_ClusterBufferHeight));\n    vec4 texPixel = texture2D(u_LightClusterBuffer, uv);\n    int pixelComponent = lastRowFloat - col * 4;\n\n\t\t#ifdef GRAPHICS_API_GLES3\n    return int(texPixel[pixelComponent]);\n\t\t#else\n    if (pixelComponent == 0)\n\treturn int(texPixel.x);\n    else if (pixelComponent == 1)\n\treturn int(texPixel.y);\n    else if (pixelComponent == 2)\n\treturn int(texPixel.z);\n    else\n\treturn int(texPixel.w);\n\t\t#endif\n}\n\t    #endif // POINTLIGHT || SPOTLIGHT\n\n\t#endif // LEGACYSINGLELIGHTING\n\n\t#ifdef DIRECTIONLIGHT\nDirectionLight getDirectionLight(in int index, in vec3 positionWS)\n{\n    DirectionLight light;\n\t    #ifdef LEGACYSINGLELIGHTING\n    light.color = u_DirectionLight.color;\n    light.direction = u_DirectionLight.direction;\n    light.attenuation = 1.0;\n    light.lightMode = LightMode_RealTime;\n\t    #else // LEGACYSINGLELIGHTING\n    float v = (float(index) + 0.5) / float(CalculateLightCount);\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\n    light.color = p1.rgb;\n    light.direction = p2.rgb;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(p1.a);\n\t    #endif // LEGACYSINGLELIGHTING\n\n\t    #if defined(CALCULATE_SHADOWS)\n    if (index == 0)\n\t{\n\t    vec4 shadowCoord = getShadowCoord(positionWS);\n\t    float shadowAttenuation = sampleShadowmap(shadowCoord);\n\t    light.attenuation = shadowAttenuation;\n\t}\n\t    #endif // CALCULATE_SHADOWS\n\n    return light;\n}\n\t#endif // DIRECTIONLIGHT\n\n\t#if defined(POINTLIGHT) || defined(SPOTLIGHT)\nivec4 getClusterInfo(mat4 viewMatrix, vec4 viewport, vec3 positionWS, vec4 fragCoord, vec4 projectParams)\n{\n\t    #ifdef LEGACYSINGLELIGHTING\n    return ivec4(1, 1, 0, 0);\n\t    #else // LEGACYSINGLELIGHTING\n    // todo  这个地方 用 positionVS 替换?\n    vec3 viewPos = vec3(viewMatrix * vec4(positionWS, 1.0));\n    int clusterXIndex = int(floor(fragCoord.x / (float(viewport.z) / float(CLUSTER_X_COUNT))));\n    int clusterYIndex = int(floor((viewport.w * (projectParams.z < 0.0 ? 0.0 : 1.0) - fragCoord.y * projectParams.z) / (float(viewport.w) / float(CLUSTER_Y_COUNT))));\n    float zSliceParam = float(CLUSTER_Z_COUNT) / log2(projectParams.y / projectParams.x);\n    int clusterZIndex = int(floor(log2(-viewPos.z) * zSliceParam - log2(projectParams.x) * zSliceParam));\n    // todo 化简\n    vec2 uv = vec2((float(clusterXIndex + clusterYIndex * CLUSTER_X_COUNT) + 0.5) / float(c_ClusterBufferWidth), (float(clusterZIndex) + 0.5) / float(c_ClusterBufferHeight));\n    vec4 clusterPixel = texture2D(u_LightClusterBuffer, uv);\n    return ivec4(clusterPixel); // X:Point Count Y:Spot Count Z、W:Light Offset\n\t    #endif // LEGACYSINGLELIGHTING\n}\n\t#endif // POINTLIGHT || SPOTLIGHT\n\n\t#ifdef POINTLIGHT\nPointLight getPointLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\n{\n\n    PointLight light;\n\t    #ifdef LEGACYSINGLELIGHTING\n    light.color = u_PointLight.color;\n    light.position = u_PointLight.position;\n    light.range = u_PointLight.range;\n    light.attenuation = 1.0;\n\t    #else // LEGACYSINGLELIGHTING\n    // todo  重复计算\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\n    int pointIndex = getLightIndex(indexOffset, index);\n    float v = (float(pointIndex) + 0.5) / float(CalculateLightCount);\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\n    light.color = p1.rgb;\n    light.range = p1.a;\n    light.position = p2.rgb;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(p2.a);\n\t    #endif // LEGACYSINGLELIGHTING\n    return light;\n}\n\t#endif // POINTLIGHT\n\n\t#ifdef SPOTLIGHT\nSpotLight getSpotLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\n{\n    SpotLight light;\n\n\t    #ifdef LEGACYSINGLELIGHTING\n    light.color = u_SpotLight.color;\n    light.position = u_SpotLight.position;\n    light.range = u_SpotLight.range;\n    light.direction = u_SpotLight.direction;\n    light.spot = u_SpotLight.spot;\n    light.attenuation = 1.0;\n\t    #else // LEGACYSINGLELIGHTING\n    // todo  重复计算\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\n    int spotIndex = getLightIndex(indexOffset, index + clusterInfo.x);\n    float v = (float(spotIndex) + 0.5) / float(CalculateLightCount);\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\n    vec4 p3 = texture2D(u_LightBuffer, vec2(0.625, v));\n    light.color = p1.rgb;\n    light.range = p1.a;\n    light.position = p2.rgb;\n    light.spot = p2.a;\n    light.direction = p3.rgb;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(p3.a);\n\t    #endif // LEGACYSINGLELIGHTING\n\n\t    #if defined(CALCULATE_SPOTSHADOWS)\n    if (index == 0)\n\t{\n\t    vec4 shadowCoord = getSpotShadowCoord(positionWS);\n\t    float shadowAttenuation = sampleSpotShadowmap(shadowCoord);\n\t    light.attenuation = shadowAttenuation;\n\t}\n\t    #endif // CALCULATE_SPOTSHADOWS\n\n    return light;\n}\n\t#endif // SPOTLIGHT\n\n    #endif // DIRECTIONLIGHT || POINTLIGHT || SPOTLIGHT\n\n#endif // Lighting_lib","#if !defined(globalIllumination_lib)\n    #define globalIllumination_lib\n\nvec3 rotateByYAixs(in vec3 normal)\n{\n    float co = cos(u_GIRotate);\n    float si = sin(u_GIRotate);\n    float x = normal.x * co - normal.z * si;\n    float z = normal.x * si + normal.z * co;\n    return vec3(x, normal.y, z);\n}\n\nvec4 rotateByYAixs(in vec4 normal)\n{\n    float co = cos(u_GIRotate);\n    float si = sin(u_GIRotate);\n    float x = normal.x * co - normal.z * si;\n    float z = normal.x * si + normal.z * co;\n    return vec4(x, normal.y, z, normal.w);\n}\nuniform float u_AmbientIntensity;\nuniform float u_ReflectionIntensity;\n\n    #ifdef GI_IBL\n\nuniform vec3 u_IblSH[9];\n\n\t#define IBL_ROUGHNESS_LEVEL 4.0\nuniform samplerCube u_IBLTex;\n\n// todo 格式\nvec3 diffuseIrradiance(in vec3 normal)\n{\n    // todo cmeng 生成的数据问题， 临时转换下\n    vec3 n = normal * vec3(-1.0, 1.0, 1.0);\n    n = rotateByYAixs(n);\n    return max(\n\tu_IblSH[0]\n\t    + u_IblSH[1] * n.y\n\t    + u_IblSH[2] * n.z\n\t    + u_IblSH[3] * n.x\n\t    + u_IblSH[4] * (n.y * n.x)\n\t    + u_IblSH[5] * (n.y * n.z)\n\t    + u_IblSH[6] * (3.0 * n.z * n.z - 1.0)\n\t    + u_IblSH[7] * (n.z * n.x)\n\t    + u_IblSH[8] * (n.x * n.x - n.y * n.y),\n\t0.0);\n}\n\nvec3 specularIrradiance(in vec3 r, in float perceptualRoughness)\n{\n    float lod = IBL_ROUGHNESS_LEVEL * perceptualRoughness;\n\n    // todo 临时转换\n    vec3 reflectDir = r * vec3(-1.0, 1.0, 1.0);\n\n    // todo rotateY SceneConfig\n    reflectDir = rotateByYAixs(reflectDir);\n\n    // todo float 编码 ?\n    vec4 reflectSampler = textureCubeLodEXT(u_IBLTex, reflectDir, lod);\n\n\t#ifdef IBL_RGBD\n    return decodeRGBD(reflectSampler);\n\t#else // IBL_RGBD\n    return reflectSampler.rgb;\n\t#endif // IBL_RGBD\n}\n\n    #endif // GI_IBL\n\n    #ifdef GI_LEGACYIBL\n\nuniform vec4 u_AmbientSHAr;\nuniform vec4 u_AmbientSHAg;\nuniform vec4 u_AmbientSHAb;\nuniform vec4 u_AmbientSHBr;\nuniform vec4 u_AmbientSHBg;\nuniform vec4 u_AmbientSHBb;\nuniform vec4 u_AmbientSHC;\n\n\t#define LAYA_SPECCUBE_LOD_STEPS 6.0\nuniform samplerCube u_ReflectTexture;\nuniform vec4 u_ReflectCubeHDRParams;\n\nvec3 shEvalLinearL0L1(in vec4 normal)\n{\n    vec3 x;\n    x.r = dot(u_AmbientSHAr, normal);\n    x.g = dot(u_AmbientSHAg, normal);\n    x.b = dot(u_AmbientSHAb, normal);\n    return x;\n}\n\nvec3 shEvalLinearL2(in vec4 normal)\n{\n    vec3 x1, x2;\n    // 4 of the quadratic (L2) polynomials\n    vec4 vB = normal.xyzz * normal.yzzx;\n    x1.r = dot(u_AmbientSHBr, vB);\n    x1.g = dot(u_AmbientSHBg, vB);\n    x1.b = dot(u_AmbientSHBb, vB);\n\n    // Final (5th) quadratic (L2) polynomial\n    float vC = normal.x * normal.x - normal.y * normal.y;\n    x2 = u_AmbientSHC.rgb * vC;\n\n    return x1 + x2;\n}\n\nvec3 diffuseIrradiance(in vec3 normalWS)\n{\n    // todo -x 坐标转换\n    vec4 normal = vec4(-normalWS.x, normalWS.yz, 1.0);\n\n    // TODO rotate y SceneConfig\n\n    normal = rotateByYAixs(normal);\n\n    vec3 ambientContrib = shEvalLinearL0L1(normal);\n    ambientContrib += shEvalLinearL2(normal);\n    vec3 ambient = max(vec3(0.0), ambientContrib);\n\n    return ambient;\n}\n\nvec3 specularIrradiance(in vec3 r, in float perceptualRoughness)\n{\n    float roughness = perceptualRoughness * (1.7 - 0.7 * perceptualRoughness);\n    // todo 临时转换\n    r *= vec3(-1.0, 1.0, 1.0);\n    r = rotateByYAixs(r);\n\n    float lod = roughness * LAYA_SPECCUBE_LOD_STEPS;\n    vec4 rgbm = textureCubeLodEXT(u_ReflectTexture, r, lod);\n    float range = u_ReflectCubeHDRParams.x;\n    vec3 color = decodeRGBM(rgbm, range);\n    color = gammaToLinear(color);\n    return color;\n}\n\n    #endif // GI_LEGACYIBL\n\n    #ifndef GI_IBL\n\t#ifndef GI_LEGACYIBL\n\nuniform vec4 u_AmbientColor;\n\nvec3 diffuseIrradiance(in vec3 normalWS)\n{\n    return u_AmbientColor.rgb;\n}\n\nvec3 specularIrradiance(in vec3 r, in float perceptualRoughness)\n{\n    // todo\n    return u_AmbientColor.rgb;\n}\n\n\t#endif // GI_LEGACYIBL\n    #endif // GI_IBL\n\n    #ifdef LIGHTMAP\nuniform sampler2D u_LightMap;\nvec3 getBakedLightmapColor(in vec2 lightmapUV)\n{\n    vec4 lightmapSampler = texture2D(u_LightMap, lightmapUV);\n\t// todo lightmap rgbm encode color space\n\t#ifdef Gamma_u_LightMap\n    lightmapSampler = gammaToLinear(lightmapSampler);\n\t#endif // Gamma_u_LightMap\n    return lightmapSampler.rgb;\n}\n    #endif // LIGHTMAP\n\n#ifdef SPECCUBE_BOX_PROJECTION\n\nuniform vec3 u_SpecCubeProbePosition;\nuniform vec3 u_SpecCubeBoxMax;\nuniform vec3 u_SpecCubeBoxMin;\n\nvec3 getBoxProjectionReflectedVector(vec3 r, vec3 positionWS, vec3 boxCenter, vec3 boxMin, vec3 boxMax)\n{\n    vec3 nr = normalize(r);\n    vec3 rbmax = boxMax - positionWS;\n    vec3 rbmin = boxMin - positionWS;\n    vec3 select = step(vec3(0.0), r);\n    vec3 rbminmax = mix(rbmin, rbmax, select) / nr;\n    float scalar = vecmin(rbminmax);\n    vec3 boxr = nr * scalar + positionWS - boxCenter;\n    return boxr;\n}\n\n#endif // SPECCUBE_BOX_PROJECTION\n\n#endif // globalIllumination_lib","#if !defined(BlinnPhongLighting_lib)\n    #define BlinnPhongLighting_lib\n\n    #include \"Lighting.glsl\";\n    #include \"globalIllumination.glsl\";\n\nstruct PixelInfo {\n    vec3 positionWS;\n    vec3 normalWS;\n    vec3 viewDir;\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    vec2 lightmapUV;\n\t#endif // UV1\n    #endif // LIGHTMAP\n};\n\nstruct Surface {\n    vec3 diffuseColor;\n    vec3 specularColor;\n    float shininess;\n    vec3 gloss;\n    float alpha;\n    float alphaClip;\n};\n\nvec3 BlinnPhongLighting(in Surface surface, in Light light, in PixelInfo pixel)\n{\n    vec3 l = normalize(-light.dir);\n    vec3 v = pixel.viewDir;\n\n    vec3 normalWS = pixel.normalWS;\n\n    vec3 diffuseColor = surface.diffuseColor;\n    float shininess = surface.shininess;\n    vec3 specularColor = surface.specularColor;\n    vec3 gloss = surface.gloss;\n\n    // difffuse\n    float ndl = max(0.0, dot(normalWS, l));\n    vec3 lightDiffuse = light.color * diffuseColor * ndl;\n\n    // specular\n    mediump vec3 h = normalize(v + l);\n    lowp float ndh = max(0.0, dot(h, normalWS));\n    float specularIntensity = pow(ndh, shininess * 128.0);\n    vec3 lightSpecular = light.color * specularColor * specularIntensity * gloss;\n\n    return lightDiffuse + lightSpecular;\n}\n\nvec3 BlinnPhongGI(const in Surface surface, const in PixelInfo info)\n{\n    vec3 indirect = vec3(0.0);\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n\n    vec2 lightmapUV = info.lightmapUV;\n    vec3 bakedColor = getBakedLightmapColor(lightmapUV);\n    // todo  surface.diffuseColor ？\n    indirect = bakedColor;\n\n\t#endif // UV1\n\n    #else // LIGHTMAP\n\n    vec3 n = info.normalWS;\n    indirect = diffuseIrradiance(n) * surface.diffuseColor * u_AmbientIntensity;\n\n    #endif // LIGHTMAP\n\n    return indirect;\n}\n\n#endif // BlinnPhongLighting_lib","#if !defined(PBRLighting_lib)\n    #define PBRLighting_lib\n\n    #include \"Lighting.glsl\";\n\n    // 精度\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.089\n\t#define MIN_ROUGHNESS\t\t 0.007921\n    #else\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.045\n\t#define MIN_ROUGHNESS\t\t 0.002025\n    #endif\n\n    #define MIN_N_DOT_V 1e-4\n\n    #include \"BRDF.glsl\";\n\nstruct PixelInfo {\n    vec3 positionWS;\n    vec3 normalWS;\n\n    #ifdef NEEDTBN\n    vec3 tangentWS;\n    vec3 biNormalWS;\n\n\t#ifdef ANISOTROPIC\n    float ToV;\n    float BoV;\n\t#endif // ANISOTROPIC\n\n    #endif // NEEDTBN\n\n    vec3 viewDir;\n    float NoV;\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    vec2 lightmapUV;\n\t#endif // UV1\n    #endif // LIGHTMAP\n};\n\nstruct Surface {\n    vec3 diffuseColor;\n    float alpha;\n    vec3 f0;\n    float roughness;\n    float perceptualRoughness;\n    float occlusion;\n\n    #ifdef ANISOTROPIC\n    float anisotropy;\n    #endif // ANISOTROPIC\n};\n\nstruct LightParams {\n    vec3 h;\n    float NoL;\n    float NoH;\n    float LoH;\n\n    #ifdef ANISOTROPIC\n    float ToL;\n    float BoL;\n    #endif // ANISOTROPIC\n};\n\n// 获取反射向量\nvec3 getReflectedVector(const in Surface surface, const in PixelInfo info)\n{\n    vec3 v = info.viewDir;\n    vec3 n = info.normalWS;\n\n    #ifdef ANISOTROPIC\n\n    vec3 direction = surface.anisotropy >= 0.0 ? info.biNormalWS : info.tangentWS;\n    vec3 at = cross(direction, v);\n    vec3 an = cross(at, direction);\n    float bendFactor = abs(surface.anisotropy) * saturate(5.0 * surface.perceptualRoughness);\n    vec3 bentNormal = normalize(mix(n, an, bendFactor));\n    return reflect(-v, bentNormal);\n\n    #else // ANISOTROPIC\n    return reflect(-v, n);\n    #endif // ANISOTROPIC\n}\n\nvoid initLightParams(inout LightParams params, const in PixelInfo pixel, const in Light light)\n{\n    vec3 l = normalize(-light.dir);\n    vec3 v = pixel.viewDir;\n    vec3 n = pixel.normalWS;\n\n    vec3 h = SafeNormalize(v + l);\n    params.h = h;\n    params.NoL = saturate(dot(n, l));\n    params.NoH = saturate(dot(n, h));\n    params.LoH = saturate(dot(l, h));\n\n    #ifdef ANISOTROPIC\n    params.ToL = dot(pixel.tangentWS, l);\n    params.BoL = dot(pixel.biNormalWS, l);\n    #endif // ANISOTROPIC\n}\n\nvec3 diffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    return surface.diffuseColor * diffuse();\n    // return surface.diffuseColor * Fd_Burley(surface.roughness, pixel.NoV, lightParams.NoL, lightParams.LoH);\n}\n\nvec3 specularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    float roughness = surface.roughness;\n    #ifdef ANISOTROPIC\n\n\t#ifdef NEEDTBN\n\n    float at = max(roughness * (1.0 + surface.anisotropy), 0.001);\n    float ab = max(roughness * (1.0 - surface.anisotropy), 0.001);\n\n    float D = D_GGX_Anisotropic(lightParams.NoH, lightParams.h, pixel.tangentWS, pixel.biNormalWS, at, ab);\n    float V = V_SmithGGXCorrelated_Anisotropic(at, ab, pixel.ToV, pixel.BoV, lightParams.ToL, lightParams.BoL, pixel.NoV, lightParams.NoL);\n\n\t#endif // NEEDTBN\n\n    #else // ANISOTROPIC\n\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\n\n    #endif // ANISOTROPIC\n\n    vec3 F = fresnel(surface.f0, lightParams.LoH);\n\n    return (D * V) * F;\n}\n\nvec3 PBRLighting(const in Surface surface, const in PixelInfo pixel, const in Light light)\n{\n    LightParams lightParams;\n    initLightParams(lightParams, pixel, light);\n\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\n\n    vec3 Fr = specularLobe(surface, pixel, lightParams);\n\n    return (Fd + Fr) * light.color * lightParams.NoL;\n}\n\n    // gi\n    #include \"PBRGI.glsl\";\n\n#endif // PBRLighting_lib","#define SHADER_NAME BlitFS\n\n#include \"Color.glsl\";\n#include \"FastApproximateAntiAliasing.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n#ifdef FXAA\n    gl_FragColor = FXAAMain(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.zw);\n#else\n    gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\n#endif\n\n#ifdef GAMMAOUT\n    gl_FragColor = linearToGamma(gl_FragColor);\n#endif\n    // gl_FragColor.rgb = FXAAMain(u_MainTex,v_Texcoord0,u_MainTex_TexelSize.zw);\n}\n","#if !defined(FXAA_lib)\n    #define FXAA_lib\n#ifdef FXAA\n    #define EDGE_THRESHOLD_MIN 0.0312\n    #define EDGE_THRESHOLD_MAX 0.125\n    #define QUALITY(q)\t       ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))\n    #define ITERATIONS\t       12\n    #define SUBPIXEL_QUALITY   0.75\n\nfloat rgb2luma(in vec3 rgb)\n{\n    return dot(rgb, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 textureOffsetbyScreenSize(in sampler2D mainTex, in vec2 uv, in vec2 offset, in vec2 inverseScreenSize)\n{\n    vec2 sampleruv = uv + inverseScreenSize * offset; // u_texturesize表示每个像素的偏移量\n    return texture2D(mainTex, sampleruv).rgb;\n}\n\nvec4 FXAAMain(in sampler2D mainTex, in vec2 texuv, in vec2 inverseScreenSize)\n{\n\n    vec4 mainColor = texture2D(mainTex, texuv);\n    vec3 colorCenter = mainColor.rgb;\n    // Luma at the current fragment\n    float lumaCenter = rgb2luma(colorCenter);\n\n    // Luma at the four direct neighbours of the current fragment.\n    float lumaDown = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, -1), inverseScreenSize));\n    float lumaUp = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, 1), inverseScreenSize));\n    float lumaLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 0), inverseScreenSize));\n    float lumaRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 0), inverseScreenSize));\n\n    // Find the maximum and minimum luma around the current fragment.\n    float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));\n    float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));\n\n    // Compute the delta.\n    float lumaRange = lumaMax - lumaMin;\n\n    // If the luma variation is lower that a threshold (or if we are in a really dark area), we are not on an edge, don't perform any AA.\n    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX))\n\t{\n\t    return mainColor;\n\t}\n\n    // Query the 4 remaining corners lumas.\n    float lumaDownLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, -1), inverseScreenSize));\n    float lumaUpRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 1), inverseScreenSize));\n    float lumaUpLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 1), inverseScreenSize));\n    float lumaDownRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, -1), inverseScreenSize));\n\n    // Combine the four edges lumas (using intermediary variables for future computations with the same values).\n    float lumaDownUp = lumaDown + lumaUp;\n    float lumaLeftRight = lumaLeft + lumaRight;\n\n    // Same for corners\n    float lumaLeftCorners = lumaDownLeft + lumaUpLeft;\n    float lumaDownCorners = lumaDownLeft + lumaDownRight;\n    float lumaRightCorners = lumaDownRight + lumaUpRight;\n    float lumaUpCorners = lumaUpRight + lumaUpLeft;\n\n    // Compute an estimation of the gradient along the horizontal and vertical axis.\n    float edgeHorizontal = abs(-2.0 * lumaLeft + lumaLeftCorners) + abs(-2.0 * lumaCenter + lumaDownUp) * 2.0 + abs(-2.0 * lumaRight + lumaRightCorners);\n    float edgeVertical = abs(-2.0 * lumaUp + lumaUpCorners) + abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 + abs(-2.0 * lumaDown + lumaDownCorners);\n\n    // Is the local edge horizontal or vertical ?\n    bool isHorizontal = (edgeHorizontal >= edgeVertical);\n\n    // Choose the step size (one pixel) accordingly.\n    float stepLength = isHorizontal ? inverseScreenSize.y : inverseScreenSize.x;\n\n    // Select the two neighboring texels lumas in the opposite direction to the local edge.\n    float luma1 = isHorizontal ? lumaDown : lumaLeft;\n    float luma2 = isHorizontal ? lumaUp : lumaRight;\n    // Compute gradients in this direction.\n    float gradient1 = luma1 - lumaCenter;\n    float gradient2 = luma2 - lumaCenter;\n\n    // Which direction is the steepest ?\n    bool is1Steepest = abs(gradient1) >= abs(gradient2);\n\n    // Gradient in the corresponding direction, normalized.\n    float gradientScaled = 0.25 * max(abs(gradient1), abs(gradient2));\n\n    // Average luma in the correct direction.\n    float lumaLocalAverage = 0.0;\n    if (is1Steepest)\n\t{\n\t    // Switch the direction\n\t    stepLength = -stepLength;\n\t    lumaLocalAverage = 0.5 * (luma1 + lumaCenter);\n\t}\n    else\n\t{\n\t    lumaLocalAverage = 0.5 * (luma2 + lumaCenter);\n\t}\n\n    // Shift UV in the correct direction by half a pixel.\n    vec2 currentUv = texuv;\n    if (isHorizontal)\n\t{\n\t    currentUv.y += stepLength * 0.5;\n\t}\n    else\n\t{\n\t    currentUv.x += stepLength * 0.5;\n\t}\n\n    // Compute offset (for each iteration step) in the right direction.\n    vec2 offset = isHorizontal ? vec2(inverseScreenSize.x, 0.0) : vec2(0.0, inverseScreenSize.y);\n    // Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.\n    vec2 uv1 = currentUv - offset * QUALITY(0);\n    vec2 uv2 = currentUv + offset * QUALITY(0);\n\n    // Read the lumas at both current extremities of the exploration segment, and compute the delta wrt to the local average luma.\n    float lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\n    float lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\n    lumaEnd1 -= lumaLocalAverage;\n    lumaEnd2 -= lumaLocalAverage;\n\n    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\n    bool reached1 = abs(lumaEnd1) >= gradientScaled;\n    bool reached2 = abs(lumaEnd2) >= gradientScaled;\n    bool reachedBoth = reached1 && reached2;\n\n    // If the side is not reached, we continue to explore in this direction.\n    if (!reached1)\n\t{\n\t    uv1 -= offset * QUALITY(1);\n\t}\n    if (!reached2)\n\t{\n\t    uv2 += offset * QUALITY(1);\n\t}\n\n    // If both sides have not been reached, continue to explore.\n    if (!reachedBoth)\n\t{\n\n\t    for (int i = 2; i < ITERATIONS; i++)\n\t\t{\n\t\t    // If needed, read luma in 1st direction, compute delta.\n\t\t    if (!reached1)\n\t\t\t{\n\t\t\t    lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\n\t\t\t    lumaEnd1 = lumaEnd1 - lumaLocalAverage;\n\t\t\t}\n\t\t    // If needed, read luma in opposite direction, compute delta.\n\t\t    if (!reached2)\n\t\t\t{\n\t\t\t    lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\n\t\t\t    lumaEnd2 = lumaEnd2 - lumaLocalAverage;\n\t\t\t}\n\t\t    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\n\t\t    reached1 = abs(lumaEnd1) >= gradientScaled;\n\t\t    reached2 = abs(lumaEnd2) >= gradientScaled;\n\t\t    reachedBoth = reached1 && reached2;\n\n\t\t    // If the side is not reached, we continue to explore in this direction, with a variable quality.\n\t\t    if (!reached1)\n\t\t\t{\n\t\t\t    uv1 -= offset * QUALITY(i);\n\t\t\t}\n\t\t    if (!reached2)\n\t\t\t{\n\t\t\t    uv2 += offset * QUALITY(i);\n\t\t\t}\n\n\t\t    // If both sides have been reached, stop the exploration.\n\t\t    if (reachedBoth)\n\t\t\t{\n\t\t\t    break;\n\t\t\t}\n\t\t}\n\t}\n\n    // Compute the distances to each side edge of the edge (!).\n    float distance1 = isHorizontal ? (texuv.x - uv1.x) : (texuv.y - uv1.y);\n    float distance2 = isHorizontal ? (uv2.x - texuv.x) : (uv2.y - texuv.y);\n\n    // In which direction is the side of the edge closer ?\n    bool isDirection1 = distance1 < distance2;\n    float distanceFinal = min(distance1, distance2);\n\n    // Thickness of the edge.\n    float edgeThickness = (distance1 + distance2);\n\n    // Is the luma at center smaller than the local average ?\n    bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;\n\n    // If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).\n    bool correctVariation1 = (lumaEnd1 < 0.0) != isLumaCenterSmaller;\n    bool correctVariation2 = (lumaEnd2 < 0.0) != isLumaCenterSmaller;\n\n    // Only keep the result in the direction of the closer side of the edge.\n    bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;\n\n    // UV offset: read in the direction of the closest side of the edge.\n    float pixelOffset = -distanceFinal / edgeThickness + 0.5;\n\n    // If the luma variation is incorrect, do not offset.\n    float finalOffset = correctVariation ? pixelOffset : 0.0;\n\n    // Sub-pixel shifting\n    // Full weighted average of the luma over the 3x3 neighborhood.\n    float lumaAverage = (1.0 / 12.0) * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);\n    // Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.\n    float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);\n    float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;\n    // Compute a sub-pixel offset based on this delta.\n    float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;\n\n    // Pick the biggest of the two offsets.\n    finalOffset = max(finalOffset, subPixelOffsetFinal);\n\n    // Compute the final UV coordinates.\n    vec2 finalUv = texuv;\n    if (isHorizontal)\n\t{\n\t    finalUv.y += finalOffset * stepLength;\n\t}\n    else\n\t{\n\t    finalUv.x += finalOffset * stepLength;\n\t}\n\n    // Read the color at the new UV coordinates, and use it.\n    return texture2D(mainTex, finalUv);\n}\n#endif//FXAA\n#endif // Color_lib\n","#if !defined(ColorGrading_lib)\n    #define ColorGrading_lib\n\nconst float ACEScc_MAX = 1.4679964;\nconst float ACEScc_MIDGRAY = 0.4135884;\n\nconst float LogC_cut = 0.011361;\nconst float LogC_a = 5.555556;\nconst float LogC_b = 0.047996;\nconst float LogC_c = 0.244161;\nconst float LogC_d = 0.386036;\nconst float LogC_e = 5.301883;\nconst float LogC_f = 0.092819;\n\nfloat linearToLogC(float x)\n{\n    float o;\n    if (x > LogC_cut)\n\t{\n\t    o = LogC_c * log10(max(LogC_a * x + LogC_b, 0.0)) + LogC_d;\n\t}\n    else\n\t{\n\t    o = LogC_e * x + LogC_f;\n\t}\n    return o;\n}\n\nvec3 linearToLogC(vec3 x)\n{\n    vec3 logc;\n    logc.x = linearToLogC(x.x);\n    logc.y = linearToLogC(x.y);\n    logc.z = linearToLogC(x.z);\n    return logc;\n}\n\nfloat logCToLinear(float x)\n{\n    float o;\n    if (x > LogC_e * LogC_cut + LogC_f)\n\to = (pow(10.0, (x - LogC_d) / LogC_c) - LogC_b) / LogC_a;\n    else\n\to = (x - LogC_f) / LogC_e;\n    return o;\n}\n\nvec3 logCToLinear(vec3 x)\n{\n    vec3 linear;\n    linear.x = logCToLinear(x.x);\n    linear.y = logCToLinear(x.y);\n    linear.z = logCToLinear(x.z);\n    return linear;\n}\n\n// Hue, Saturation, Value\n// Ranges:\n//  Hue [0.0, 1.0]\n//  Sat [0.0, 1.0]\n//  Lum [0.0, HALF_MAX]\nvec3 RgbToHsv(vec3 c)\n{\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    const float e = 1.0e-4;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 HsvToRgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(c.x) + K.xyz) * 6.0 - K.www);\n    return c.z * mix(vec3(K.x) , saturate(p - vec3(K.x)), c.y);\n}\n\nfloat RotateHue(float value, float low, float hi)\n{\n    return (value < low)\n            ? value + hi\n            : (value > hi)\n                ? value - hi\n                : value;\n}\n\n\nconst mat3 Linear_to_LMS_MAT = mat3(\n    vec3(3.90405e-1, 7.08416e-2, 2.31082e-2),\n    vec3(5.49941e-1, 9.63172e-1, 1.28021e-1),\n    vec3(8.92632e-3, 1.35775e-3, 9.36245e-1));\n\nconst mat3 LMS_to_Linear_MAT = mat3(\n    vec3(2.85847e+0, -2.10182e-1, -4.18120e-2),\n    vec3(-1.62879e+0, 1.15820e+0, -1.18169e-1),\n    vec3(-2.48910e-2, 3.24281e-4, 1.06867e+0));\n\n// white balance\nuniform vec3 u_ColorBalance;\n\n// split toning\nuniform vec4 u_SplitShadows;\nuniform vec3 u_Splithighlights;\n\n// shadows, midtones, highlights\nuniform vec3 u_Shadows;\nuniform vec3 u_Midtones;\nuniform vec3 u_Highlights;\nuniform vec4 u_Limits;\n\n// lift, gamma, gain\nuniform vec3 u_Lift;\nuniform vec3 u_Gamma;\nuniform vec3 u_Gain;\n\n//color adjusted\nuniform vec4 u_ColorFilter;\nuniform vec4 u_HueSatCon;\n\nfloat luminance(in vec3 color)\n{\n    #ifdef ACES\n    float luma = dot(color, AP1_RGB2Y);\n    #else\n    float luma = dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\n    #endif // ACES\n    return luma;\n}\n\nvec3 softlight(vec3 base, vec3 blend)\n{\n    vec3 r1 = 2.0 * base * blend + base * base * (1.0 - 2.0 * blend);\n    vec3 r2 = sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend);\n    vec3 t = step(0.5, blend);\n    return r2 * t + (1.0 - t) * r1;\n}\n\n// input linear sRGB\n// if ACES tonemap, calculate in ACEScg, return ACEScg\n// else calculate in logC, return linear sRGB\nvec3 colorGrade(in vec3 color)\n{\n    // White balance in LMS space\n    vec3 colorLMS = Linear_to_LMS_MAT * color;\n    colorLMS *= u_ColorBalance.xyz;\n    color = LMS_to_Linear_MAT * colorLMS;\n\n    // Do contrast in log after white balance\n    #ifdef ACES\n        vec3 colorLog = ACES_to_ACEScc(sRGB_to_AP0_MAT * color);\n    #else\n        vec3 colorLog = linearToLogC(color);\n    #endif\n    \n    colorLog = (colorLog - vec3(ACEScc_MIDGRAY)) * u_HueSatCon.z + vec3(ACEScc_MIDGRAY);\n\n\n    #ifdef ACES\n        //colorLinear = ACES_to_ACEScg(ACEScc_to_ACES(colorLog));\n        color = AP0_to_AP1_MAT * ACEScc_to_ACES(colorLog);\n    #else\n        color = logCToLinear(colorLog);\n    #endif // ACES\n\n    // Color filter is just an unclipped multiplier\n    color = color * u_ColorFilter.rgb;\n\n    color = max(vec3(0.0), color);\n\n    // split toning\n    float balance = u_SplitShadows.w;\n    vec3 gamma = linearToGamma(color);\n    float splitLuma = saturate(luminance(color)) + balance;\n    vec3 splitShadows = mix(vec3(0.5, 0.5, 0.5), u_SplitShadows.xyz, 1.0 - splitLuma);\n    vec3 splitHeighlights = mix(vec3(0.5, 0.5, 0.5), u_Splithighlights.xyz, splitLuma);\n    gamma = softlight(gamma, splitShadows);\n    gamma = softlight(gamma, splitHeighlights);\n    color = gammaToLinear(gamma);\n\n    // shadows, midtones, highlights\n    float luma = luminance(color);\n    float shadowFactor = 1.0 - smoothstep(u_Limits.x, u_Limits.y, luma);\n    float highlightsFactor = smoothstep(u_Limits.z, u_Limits.w, luma);\n    float midtonesFactor = 1.0 - shadowFactor - highlightsFactor;\n    color = color * u_Shadows.xyz * shadowFactor + color * u_Midtones.xyz * midtonesFactor + color * u_Highlights.xyz * highlightsFactor;\n\n    // Lift, gamma, gain\n    color = color * u_Gain.xyz + u_Lift.xyz;\n    color = sign(color) * pow(abs(color), u_Gamma.xyz);\n    \n    // HSV operations\n    vec3 hsv = RgbToHsv(color);\n    // Hue Shift & Hue Vs Hue\n    float hue = hsv.x + u_HueSatCon.x;\n    hsv.x = RotateHue(hsv.x, 0.0, 1.0);\n    color = HsvToRgb(hsv);\n\n    // Global saturation\n    luma = luminance(color);\n    color = vec3(luma) + (vec3(u_HueSatCon.y)) * (color - vec3(luma));\n    \n    return color;\n}\n\n#endif // ColorGrading_lib","#if !defined(Tonemapping_lib)\n    #define Tonemapping_lib\n\n// ACES Tonemapping color grading in ACEScg space\nvec3 tonemap(in vec3 ap1)\n{\n    vec3 color = ap1;\n\n    #ifdef ACES\n    vec3 aces = AP1_to_AP0_MAT * color;\n    vec3 oces = RRT(aces);\n    color = ODT_sRGB_100nits(oces);\n    #endif // ACES\n\n    // todo other tonemap\n\n    return color;\n}\n\n#endif // Tonemapping_lib","#if !defined(LUT_lib)\n    #define LUT_lib\n\n// scaleOffset = (1 / lut_width, 1 / lut_height, lut_height - 1)\nvec3 applyLut(sampler2D lut, vec3 uvw, vec3 scaleOffset)\n{\n    uvw.z *= scaleOffset.z;\n\n    float shift = floor(uvw.z);\n    uvw.xy = uvw.xy * scaleOffset.z * scaleOffset.xy + scaleOffset.xy * 0.5;\n    uvw.x += shift * scaleOffset.y;\n\n    uvw.xyz = mix(\n\ttexture2DLodEXT(lut, uvw.xy, 0.0).rgb,\n\ttexture2DLodEXT(lut, uvw.xy + vec2(scaleOffset.y, 0.0), 0.0).rgb,\n\tuvw.z - shift);\n    return uvw;\n}\n\n#endif // LUT_lib","#define SHADER_NAME LutBuilder\n\n#include \"Color.glsl\";\n\n#ifdef ACES\n    #include \"ACES.glsl\";\n#endif // ACES\n\n#include \"ColorGrading.glsl\";\n\n#include \"Tonemapping.glsl\";\n\nvarying vec2 v_Texcoord0;\n\n// lut params: (lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeidht / (lutHeight - 1))\nvec3 lutValue(vec2 uv, vec4 params)\n{\n    vec3 color;\n    uv -= params.yz;\n    color.r = fract(uv.x * params.x);\n    color.b = uv.x - color.r / params.x;\n    color.g = uv.y;\n    return color * params.w;\n}\n\n// internal lut logC space\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n    vec3 color = lutValue(uv, u_LutParams);\n    color = logCToLinear(color);\n    vec3 grade = colorGrade(color);\n    vec3 tone = tonemap(grade);\n\n    gl_FragColor = vec4(tone, 1.0);\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport BlitVS from \"./BlitScreen.vs\";\nimport BlitFS from \"./BlitScreen.fs\";\nimport FXAA from \"./FastApproximateAntiAliasing.glsl\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\nimport ColorGradingGLSL from \"./ColorGrading.glsl\";\nimport TonemappingGLSL from \"./Tonemapping.glsl\";\nimport LUTGLSL from \"./LUT.glsl\";\n\nimport LUTBuilderFS from \"./LUTBuilder.fs\";\n\nexport class BlitScreenShaderInit {\n\n    static init() {\n        Shader3D.addInclude(\"FastApproximateAntiAliasing.glsl\", FXAA);\n\n        Shader3D.addInclude(\"ColorGrading.glsl\", ColorGradingGLSL);\n        Shader3D.addInclude(\"Tonemapping.glsl\", TonemappingGLSL);\n        Shader3D.addInclude(\"LUT.glsl\", LUTGLSL);\n\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n\n        let uniformMap = {\n            \"u_OffsetScale\": ShaderDataType.Vector4,\n            \"u_MainTex\": ShaderDataType.Texture2D,\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\n        };\n\n        let shader = Shader3D.add(\"BlitScreen\");\n        let subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let blitPass = subShader.addShaderPass(BlitVS, BlitFS);\n        blitPass.statefirst = true;\n        let blitState = blitPass.renderState;\n        blitState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        blitState.depthWrite = false;\n        blitState.cull = RenderState.CULL_NONE;\n        blitState.blend = RenderState.BLEND_DISABLE;\n\n        let transparentShader = Shader3D.add(\"BlitScreen_Transparnet\");\n        let transparentSubShader = new SubShader(attributeMap, uniformMap);\n        transparentShader.addSubShader(transparentSubShader);\n        let blitPassTrans = transparentSubShader.addShaderPass(BlitVS, BlitFS);\n        blitPass.statefirst = true;\n        blitState = blitPassTrans.renderState;\n        blitState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        blitState.depthWrite = false;\n        blitState.cull = RenderState.CULL_NONE;\n        blitState.blend = RenderState.BLEND_ENABLE_ALL;\n        blitState.srcBlend = RenderState.BLENDPARAM_SRC_ALPHA;\n        blitState.dstBlend = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n\n        this.lutBuilderInit();\n    }\n\n    private static lutBuilderInit() {\n\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n\n        let uniformMap = {\n            \"u_OffsetScale\": ShaderDataType.Vector4,\n            \"u_MainTex\": ShaderDataType.Texture2D,\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\n            \"u_LutParams\": ShaderDataType.Vector4\n        };\n\n        let shader = Shader3D.add(\"LUTBuilder\");\n        let subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let pass = subShader.addShaderPass(BlitVS, LUTBuilderFS);\n        pass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        pass.renderState.depthWrite = false;\n        pass.renderState.cull = RenderState.CULL_NONE;\n        pass.renderState.blend = RenderState.BLEND_DISABLE;\n        pass.statefirst = true;\n    }\n\n}","\n#define SHADER_NAME UnlitVS\n\n#include \"Camera.glsl\";\n#include \"Sprite3DVertex.glsl\";\n\n#include \"VertexCommon.glsl\";\n#include \"Color.glsl\";\n\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\t\n#if defined(UV)\n    v_Texcoord0 = transformUV(vertex.texCoord0, u_TilingOffset);\n#else\n\tv_Texcoord0 = vec2(0);\n#endif // UV\n\n#if defined(COLOR) && defined(ENABLEVERTEXCOLOR)\n    v_Color = gammaToLinear(vertex.vertexColor);\n#endif // COLOR && ENABLEVERTEXCOLOR\n\n    mat4 worldMat = getWorldMatrix();\n\n    vec3 positionWS = (worldMat * vec4(vertex.positionOS, 1.0)).xyz;\n\n    gl_Position = getPositionCS(positionWS);\n\n    gl_Position = remapPositionZ(gl_Position);\n}","\n#define SHADER_NAME UNLITFS\n\n#include \"Color.glsl\";\n\n#include \"Scene.glsl\";\n#include \"SceneFog.glsl\";\n\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n\n    vec3 color = u_AlbedoColor.rgb;\n    float alpha = u_AlbedoColor.a;\n#ifdef ALBEDOTEXTURE\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\n\n    #ifdef Gamma_u_AlbedoTexture\n    albedoSampler = gammaToLinear(albedoSampler);\n    #endif // Gamma_u_AlbedoTexture\n\n    color *= albedoSampler.rgb;\n    alpha *= albedoSampler.a;\n#endif // ALBEDOTEXTURE\n\n#if defined(COLOR) && defined(ENABLEVERTEXCOLOR)\n    vec4 vertexColor = v_Color;\n    color *= vertexColor.rgb;\n    alpha *= vertexColor.a;\n#endif\n\n#ifdef ALPHATEST\n    if (alpha < u_AlphaTestValue)\n\tdiscard;\n#endif // ALPHATEST\n\n#ifdef FOG\n    color = scenUnlitFog(color);\n#endif // FOG\n\n    gl_FragColor = vec4(color, alpha);\n}","#define SHADER_NAME DepthVS\n\n#include \"DepthVertex.glsl\";\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    mat4 worldMat = getWorldMatrix();\n    vec3 positionWS = (worldMat * vec4(vertex.positionOS, 1.0)).xyz;\n\n    vec3 normalWS = normalize((worldMat * vec4(vertex.normalOS, 0.0)).xyz);\n\n    vec4 positionCS = DepthPositionCS(positionWS, normalWS);\n    gl_Position = remapPositionZ(positionCS);\n}","#define SHADER_NAME DepthFS\n\n#include \"DepthFrag.glsl\";\n\nvoid main()\n{\n    gl_FragColor = getDepthColor();\n}","import UnlitVS from \"./Unlit.vs\";\nimport UnlitFS from \"./Unlit.fs\";\nimport DepthVS from \"../depth/Depth.vs\";\nimport DepthFS from \"../depth/Depth.fs\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\n\n\nexport class UnlitShaderInit {\n\n    static init() {\n\n        let uniformMap = {\n            \"UnlitBlock\": {\n                \"u_AlbedoColor\": ShaderDataType.Color,\n                \"u_TilingOffset\": ShaderDataType.Vector4,\n            },\n            \"u_AlbedoTexture\": ShaderDataType.Texture2D,\n            \"u_AlphaTestValue\": ShaderDataType.Float,\n        };\n\n        let defaultValue = {\n            \"u_AlbedoColor\": Color.WHITE,\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\n            \"u_AlphaTestValue\": 0.5\n        }\n\n        let shader = Shader3D.add(\"Unlit\", true, false);\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let forwardPass = subShader.addShaderPass(UnlitVS, UnlitFS);\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\n    }\n}","#if !defined(BlinnPhongCommon_lib)\n    #define BlinnPhongCommon_lib\n\n// varying\nvarying vec3 v_PositionWS;\nvarying vec3 v_NormalWS;\n\n    #ifdef UV\nvarying vec2 v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\nvarying vec2 v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef NEEDTBN\nvarying vec3 v_TangentWS;\nvarying vec3 v_BiNormalWS;\n    #endif // NEEDTBN\n\n    #ifdef COLOR\nvarying vec4 v_VertexColor;\n    #endif // COLOR\n\n// 记录顶点信息, 用于由vs向fs传递数据\nstruct PixelParams {\n    vec3 positionWS;\n    vec3 normalWS;\n\n    #ifdef UV\n    vec2 uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    vec2 uv1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef NEEDTBN\n    vec3 tangentWS;\n    vec3 biNormalWS;\n    #endif // NEEDTBN\n\n    #ifdef COLOR\n    vec4 vertexColor;\n    #endif // COLOR\n\n    vec3 viewDir;\n};\n\n#endif // BlinnPhongCommon_lib","#if !defined(BlinnPhongVertex_lib)\n    #define BlinnPhongVertex_lib\n\n    #include \"BlinnPhongCommon.glsl\";\n\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\n{\n    mat4 worldMat = getWorldMatrix();\n    params.positionWS = (worldMat * vec4(vertex.positionOS, 1.0)).xyz;\n    v_PositionWS = params.positionWS;\n\n    params.normalWS = normalize((worldMat * vec4(vertex.normalOS, 0.0)).xyz);\n    v_NormalWS = params.normalWS;\n\n    #ifdef TANGENT\n\t#ifdef NEEDTBN\n    params.tangentWS = normalize((worldMat * vec4(vertex.tangentOS.xyz, 0.0)).xyz);\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS) * sign(vertex.tangentOS.w));\n    v_TangentWS = params.tangentWS;\n    v_BiNormalWS = params.biNormalWS;\n\t#endif // NEEDTBN\n    #endif // TANGENT\n\n    #ifdef UV\n    params.uv0 = transformUV(vertex.texCoord0, u_TilingOffset);\n    v_Texcoord0 = params.uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    params.uv1 = tranformLightMapUV(vertex.texCoord1, u_LightmapScaleOffset);\n    v_Texcoord1 = params.uv1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    params.vertexColor = a_Color;\n    v_VertexColor = params.vertexColor;\n    #endif // COLOR\n}\n\n#endif // BlinnPhongVertex_lib","#if !defined(BlinnPhongFrag_lib)\n    #define BlinnPhongFrag_lib\n\n    #include \"BlinnPhongLighting.glsl\";\n\n    #include \"BlinnPhongCommon.glsl\";\n\nvoid getPixelParams(inout PixelParams params)\n{\n    params.positionWS = v_PositionWS;\n    params.normalWS = normalize(v_NormalWS);\n\n    #ifdef UV\n    params.uv0 = v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    params.uv1 = v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    params.vertexColor = v_VertexColor;\n    #endif // COLOR\n\n    params.viewDir = normalize(u_CameraPos - params.positionWS);\n\n    #ifdef TANGENT\n\t#ifdef NEEDTBN\n    params.tangentWS = normalize(v_TangentWS);\n    params.biNormalWS = normalize(v_BiNormalWS);\n    mat3 TBN = mat3(params.tangentWS, params.biNormalWS, params.normalWS);\n\n\t    #ifdef NORMALMAP\n    vec3 normalSampler = texture2D(u_NormalTexture, params.uv0).rgb;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    params.normalWS = normalize(TBN * normalSampler);\n\t    #endif // NORMALMAP\n\n\t#endif // NEEDTBN\n    #endif TANGENT\n}\n\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel)\n{\n    info.positionWS = pixel.positionWS;\n    info.normalWS = pixel.normalWS;\n    info.viewDir = pixel.viewDir;\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    info.lightmapUV = pixel.uv1;\n\t#endif // UV1\n    #endif // LIGHTMAP\n}\n\nvec3 BlinnPhongLighting(const in Surface surface, const in PixelParams pixel)\n{\n    vec3 positionWS = pixel.positionWS;\n    vec3 v = pixel.viewDir;\n    vec3 normalWS = pixel.normalWS;\n\n    PixelInfo info;\n    getPixelInfo(info, pixel);\n\n    vec3 lightColor = vec3(0.0, 0.0, 0.0);\n\n    #ifdef DIRECTIONLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= DirectionCount)\n\t\tbreak;\n\t    DirectionLight directionLight = getDirectionLight(i, positionWS);\n\t    if (directionLight.lightMode == LightMode_Mix)\n\t\t{\n\t\t    continue;\n\t\t}\n\t    Light light = getLight(directionLight);\n\t    lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\n\t}\n    #endif // DIRECTIONLIGHT\n\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, positionWS, gl_FragCoord, u_ProjectionParams);\n    #endif // POINTLIGHT || SPOTLIGHT\n\n    #ifdef POINTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= clusterInfo.x)\n\t\tbreak;\n\t    PointLight pointLight = getPointLight(i, clusterInfo, positionWS);\n\t    if (pointLight.lightMode == LightMode_Mix)\n\t\t{\n\t\t    continue;\n\t\t}\n\t    Light light = getLight(pointLight, normalWS, positionWS);\n\t    lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\n\t}\n    #endif // POINTLIGHT\n\n    #ifdef SPOTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= clusterInfo.y)\n\t\tbreak;\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, positionWS);\n\t    if (spotLight.lightMode == LightMode_Mix)\n\t\t{\n\t\t    continue;\n\t\t}\n\t    Light light = getLight(spotLight, normalWS, positionWS);\n\t    lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\n\t}\n    #endif // SPOTLIGHT\n\n    vec3 giColor = BlinnPhongGI(surface, info);\n\n    return lightColor + giColor;\n}\n\n#endif // BlinnPhongFrag_lib","#define SHADER_NAME BlinnPhongVS\n\n#include \"Color.glsl\";\n\n#include \"Scene.glsl\";\n#include \"Camera.glsl\";\n#include \"Sprite3DVertex.glsl\";\n\n#include \"VertexCommon.glsl\";\n\n#include \"BlinnPhongVertex.glsl\";\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n    gl_Position = getPositionCS(pixel.positionWS);\n\n    gl_Position = remapPositionZ(gl_Position);\n}\n","#define SHADER_NAME BlinnPhongFS\n\n#include \"Color.glsl\";\n\n#include \"Scene.glsl\";\n#include \"Camera.glsl\";\n#include \"Sprite3DFrag.glsl\";\n\n#include \"SceneFog.glsl\";\n\n#include \"BlinnPhongFrag.glsl\";\n\nvoid getBinnPhongSurfaceParams(inout Surface surface, in PixelParams pixel)\n{\n    surface.diffuseColor = u_DiffuseColor.rgb;\n    surface.alpha = u_DiffuseColor.a;\n\n#if defined(COLOR) && defined(ENABLEVERTEXCOLOR)\n    surface.diffuseColor *= pixel.vertexColor.xyz;\n    surface.alpha *= pixel.vertexColor.a;\n#endif // COLOR && ENABLEVERTEXCOLOR\n\n#ifdef UV\n    vec2 uv = pixel.uv0;\n#else // UV\n    vec2 uv = vec2(0.0);\n#endif // UV\n\n#ifdef DIFFUSEMAP\n    vec4 diffuseSampler = texture2D(u_DiffuseTexture, uv);\n    #ifdef Gamma_u_DiffuseTexture\n    diffuseSampler = gammaToLinear(diffuseSampler);\n    #endif // Gamma_u_DiffuseTexture\n    surface.diffuseColor *= u_DiffuseColor.rgb * diffuseSampler.rgb * u_AlbedoIntensity;\n    surface.alpha *= diffuseSampler.a;\n#endif // DIFFUSEMAP\n\n    surface.diffuseColor *= u_AlbedoIntensity;\n\n#ifdef ALPHATEST\n    if (surface.alpha < u_AlphaTestValue)\n\t{\n\t    discard;\n\t}\n#endif // ALPHATEST\n\n#ifdef SPECULARMAP\n    vec4 specularSampler = texture2D(u_SpecularTexture, uv);\n    #ifdef Gamma_u_SpecularTexture\n    specularSampler = gammaToLinear(specularSampler);\n    #endif // Gamma_u_SpecularTexture\n    surface.gloss = specularSampler.rgb;\n#else // SPECULARMAP\n    #ifdef DIFFUSEMAP\n    surface.gloss = vec3(diffuseSampler.a);\n    #else // DIFFUSEMAP\n    surface.gloss = vec3(1.0, 1.0, 1.0);\n    #endif // DIFFUSEMAP\n#endif // SPECULARMAP\n    surface.specularColor = u_MaterialSpecular.rgb;\n    surface.shininess = u_Shininess;\n}\n\nvoid main()\n{\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    Surface surface;\n    getBinnPhongSurfaceParams(surface, pixel);\n\n    vec3 surfaceColor = vec3(0.0);\n\n    surfaceColor = BlinnPhongLighting(surface, pixel);\n\n#ifdef FOG\n    surfaceColor = sceneLitFog(surfaceColor);\n#endif // FOG\n\n    gl_FragColor = vec4(surfaceColor, surface.alpha);\n}\n","#define SHADER_NAME DepthNormalVS\n\n#include \"Scene.glsl\";\n#include \"Sprite3DVertex.glsl\";\n\n#include \"VertexCommon.glsl\";\n#include \"Camera.glsl\";\n\n\n\n// uniform mat4 u_View;\n// uniform mat4 u_ViewProjection;\n// uniform vec4 u_ProjectionParams;\n\n//传入法线\nvarying vec4 v_depthNormals;\n\n\nvec4 depthNormalsVertex()\n{\n\t Vertex vertex;\n    getVertexParams(vertex);\n\n    mat4 worldMat = getWorldMatrix();\n    vec3 positionWS = (worldMat * vec4(vertex.positionOS, 1.0)).xyz;\n\n    vec3 normalWS = normalize((worldMat * vec4(vertex.normalOS, 0.0)).xyz);\n\t\n\t//存储View空间法线\n\tvec3 normalVS = mat3(u_View) * normalWS;\n\tv_depthNormals.xyz = normalVS;\n\t\n\tvec4 positionCS = u_ViewProjection * vec4(positionWS,1.0);\n\tv_depthNormals.w = (positionCS.z * 2.0 - positionCS.w)*u_ProjectionParams.w;\n\t\n    return positionCS;\n}\n\nvoid main()\n{\n\tvec4 positionCS =  depthNormalsVertex();\n\tgl_Position=remapPositionZ(positionCS);\n}","#define SHADER_NAME DepthNormalFS\n\n\n#include \"DepthNormalUtil.glsl\";\n\nvarying vec4 v_depthNormals;\n\nvoid main()\n{\n\tgl_FragColor=depthNormalsFragment(v_depthNormals);\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport BlinnPhongCommonGLSL from \"./BlinnPhongCommon.glsl\";\nimport BlinnPhongVertexGLSL from \"./BlinnPhongVertex.glsl\";\nimport BlinnPhongFragGLSL from \"./BlinnPhongFrag.glsl\";\nimport BlinnPhongVS from \"./BlinnPhong.vs\";\nimport BlinnPhongFS from \"./BlinnPhong.fs\";\nimport DepthVS from \"../depth/Depth.vs\";\nimport DepthFS from \"../depth/Depth.fs\";\nimport DepthNormalVS from \"../depth/DepthNormal.vs\";\nimport DepthNormalFS from \"../depth/DepthNormal.fs\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\n\nexport class BlinnPhongShaderInit {\n\n    static init() {\n\n        Shader3D.addInclude(\"BlinnPhongCommon.glsl\", BlinnPhongCommonGLSL);\n        Shader3D.addInclude(\"BlinnPhongVertex.glsl\", BlinnPhongVertexGLSL);\n        Shader3D.addInclude(\"BlinnPhongFrag.glsl\", BlinnPhongFragGLSL);\n\n        let uniformMap = {\n            \"u_DiffuseTexture\": ShaderDataType.Texture2D,\n            \"u_NormalTexture\": ShaderDataType.Texture2D,\n            \"u_SpecularTexture\": ShaderDataType.Texture2D,\n            \"u_DiffuseColor\": ShaderDataType.Color,\n            \"u_MaterialSpecular\": ShaderDataType.Color,\n            \"u_Shininess\": ShaderDataType.Float,\n            \"u_TilingOffset\": ShaderDataType.Vector4,\n            \"u_AlbedoIntensity\": ShaderDataType.Float,\n            \"u_AlphaTestValue\": ShaderDataType.Float\n        };\n\n        let defaultValue = {\n            \"u_AlbedoIntensity\": 1.0,\n            \"u_DiffuseColor\": Color.WHITE,\n            \"u_MaterialSpecular\": Color.WHITE,\n            \"u_Shininess\": 0.078125,\n            \"u_AlphaTestValue\": 0.5,\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\n        };\n\n        let shader = Shader3D.add(\"BLINNPHONG\", true,true);\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let shadingPass = subShader.addShaderPass(BlinnPhongVS, BlinnPhongFS);\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\n        let depthNormal = subShader.addShaderPass(DepthNormalVS, DepthNormalFS, \"DepthNormal\");\n    }\n\n}","#define SHADER_NAME TrailVS\n\n#include \"Camera.glsl\";\n\n// Sprite uniform\nuniform float u_CurTime;\nuniform float u_LifeTime;\nuniform vec4 u_WidthCurve[10];\nuniform int u_WidthCurveKeyLength;\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\n{\n    float t2 = t * t;\n    float t3 = t2 * t;\n    float a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    float b = t3 - 2.0 * t2 + t;\n    float c = t3 - t2;\n    float d = -2.0 * t3 + 3.0 * t2;\n    return a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\n}\n\nfloat getCurWidth(in float normalizeTime)\n{\n    float width;\n    if (normalizeTime == 0.0)\n\t{\n\t    width = u_WidthCurve[0].w;\n\t}\n    else if (normalizeTime >= 1.0)\n\t{\n\t    width = u_WidthCurve[u_WidthCurveKeyLength - 1].w;\n\t}\n    else\n\t{\n\t    for (int i = 0; i < 10; i++)\n\t\t{\n\t\t    if (normalizeTime == u_WidthCurve[i].x)\n\t\t\t{\n\t\t\t    width = u_WidthCurve[i].w;\n\t\t\t    break;\n\t\t\t}\n\n\t\t    vec4 lastFrame = u_WidthCurve[i];\n\t\t    vec4 nextFrame = u_WidthCurve[i + 1];\n\t\t    if (normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\n\t\t\t{\n\t\t\t    float duration = nextFrame.x - lastFrame.x;\n\t\t\t    float t = (normalizeTime - lastFrame.x) / duration;\n\t\t\t    float outTangent = lastFrame.z;\n\t\t\t    float inTangent = nextFrame.y;\n\t\t\t    float value1 = lastFrame.w;\n\t\t\t    float value2 = nextFrame.w;\n\t\t\t    width = hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\n\t\t\t    break;\n\t\t\t}\n\t\t}\n\t}\n    return width;\n}\n\nvoid main()\n{\n    float normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\n\n    v_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\n\n    v_Color = a_Color;\n\n    vec3 cameraPos = (u_View * a_Position).rgb;\n    gl_Position = u_Projection * vec4(cameraPos + a_OffsetVector * getCurWidth(normalizeTime), 1.0);\n\n    gl_Position = remapPositionZ(gl_Position);\n}","#define SHADER_NAME TrailFS\n\n#include \"Scene.glsl\";\n#include \"SceneFog.glsl\";\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nvoid main()\n{\n    vec4 color = 2.0 * u_MainColor * v_Color;\n#ifdef MAINTEXTURE\n    vec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\n    color *= mainTextureColor;\n#endif\n\n#ifdef FOG\n    color.xyz = scenUnlitFog(color.xyz);\n#endif // FOG\n    gl_FragColor = color;\n}\n","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\"\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\"\nimport { VertexTrail } from \"../../core/trail/VertexTrail\";\nimport TrailVS from \"./Trail.vs\";\nimport TrailFS from \"./Trail.fs\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\nexport class TrailShaderInit {\n    static init() {\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\n            'a_Position': [VertexTrail.TRAIL_POSITION0, ShaderDataType.Vector4],\n            'a_OffsetVector': [VertexTrail.TRAIL_OFFSETVECTOR, ShaderDataType.Vector3],\n            'a_Texcoord0X': [VertexTrail.TRAIL_TEXTURECOORDINATE0X, ShaderDataType.Float],\n            'a_Texcoord0Y': [VertexTrail.TRAIL_TEXTURECOORDINATE0Y, ShaderDataType.Float],\n            'a_BirthTime': [VertexTrail.TRAIL_TIME0, ShaderDataType.Float],\n            'a_Color': [VertexTrail.TRAIL_COLOR, ShaderDataType.Vector4],\n        };\n\n        let uniformMap = {\n            \"u_TilingOffset\": ShaderDataType.Vector4,\n            \"u_MainTexture\": ShaderDataType.Texture2D,\n            \"u_MainColor\": ShaderDataType.Color,\n        };\n\n        let defaultValue = {\n            \"u_MainColor\": Color.WHITE,\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\n        };\n\n        let shader = Shader3D.add(\"Trail\", false, false);\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let forwardPass = subShader.addShaderPass(TrailVS, TrailFS);\n    }\n}","#if !defined(BRDF)\n    #define BRDF\n\n// Specular implementations\nfloat D_GGX(float roughness, float NoH, vec3 h, vec3 n)\n{\n    // todo 精度\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\n    vec3 NxH = cross(n, h);\n    float oneMinusNoHSquared = dot(NxH, NxH);\n    #else\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\n    #endif\n\n    float a = NoH * roughness;\n    float k = roughness / (oneMinusNoHSquared + a * a);\n    float d = k * k * INVERT_PI;\n\n    return saturateMediump(d);\n}\n\nfloat D_GGX_Anisotropic(float NoH, const vec3 h, const vec3 t, const vec3 b, float at, float ab)\n{\n    float ToH = dot(t, h);\n    float BoH = dot(b, h);\n    float a2 = at * ab;\n    highp vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);\n    highp float v2 = dot(v, v);\n    float w2 = a2 / v2;\n    return a2 * w2 * w2 * INVERT_PI;\n}\n\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL)\n{\n    float a2 = roughness * roughness;\n    float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\n    float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\n    float v = 0.5 / (lambdaV + lambdaL);\n\n    return saturateMediump(v);\n}\n\nfloat V_SmithGGXCorrelated_Anisotropic(float at, float ab, float ToV, float BoV, float ToL, float BoL, float NoV, float NoL)\n{\n    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\n    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\n    float v = 0.5 / (lambdaV + lambdaL);\n    return saturateMediump(v);\n}\n\nvec3 F_Schlick(vec3 f0, float f90, float VoH)\n{\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n}\n\nvec3 F_Schlick(vec3 f0, float VoH)\n{\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\n}\n\nfloat F_Schlick(float f0, float f90, float VoH)\n{\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n}\n\n// Specular dispatch\n\n// D\nfloat distribution(float roughness, float NoH, vec3 h, vec3 n)\n{\n    return D_GGX(roughness, NoH, h, n);\n}\n\n// V\nfloat visibility(float roughness, float NoV, float NoL)\n{\n    return V_SmithGGXCorrelated(roughness, NoV, NoL);\n}\n\n// F\nvec3 fresnel(vec3 f0, float LoH)\n{\n    float f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\n    return F_Schlick(f0, f90, LoH);\n\n    // return F_Schlick(f0, LoH);\n}\n\n// diffuse BRDF implementations\n\nfloat Fd_Lambert()\n{\n    // return 1.0 / PI;\n    return 1.0;\n}\n\nfloat Fd_Burley(float roughness, float NoV, float NoL, float LoH)\n{\n    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;\n    float lightScatter = F_Schlick(1.0, f90, NoL);\n    float veiwScatter = F_Schlick(1.0, f90, NoV);\n    return lightScatter * veiwScatter;\n}\n\n// diffuse dispatch \nfloat diffuse()\n{\n    return Fd_Lambert();\n}\n\n#endif // BRDF","#if !defined(pbrGI_lib)\n    #define pbrGI_lib\n\n    #include \"globalIllumination.glsl\";\n\n    // todo cpu 拼接？\n    #define IBL_ROUGHNESS_LEVEL 4.0\n\nvec2 prefilteredDFG_LUT(float coord, float NoV)\n{\n    return texture2DLodEXT(u_IBLDGF, vec2(NoV, 1.0 - coord), 0.0).rg;\n}\n\nvec2 EnvBRDFApproxLazarov(float roughness, float NoV)\n{\n    vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\n    vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    return AB;\n}\n\nvec3 PBRGI(const in Surface surface, const in PixelInfo info)\n{\n    vec3 indirect = vec3(0.0);\n\n    #ifdef LIGHTMAP\n\n\t#ifdef UV1\n    vec2 lightmapUV = info.lightmapUV;\n    vec3 bakedColor = getBakedLightmapColor(lightmapUV);\n    // todo  surface.diffuseColor ？\n    vec3 Fd = bakedColor;\n\t#endif // UV1\n\n    #else // LIGHTMAP\n\n    vec3 n = info.normalWS;\n    vec3 Fd = diffuseIrradiance(n) * surface.diffuseColor * surface.occlusion * u_AmbientIntensity;\n\n    #endif // LIGHTMAP\n\n    // specular\n    float perceptualRoughness = surface.perceptualRoughness;\n    float NoV = info.NoV;\n    vec2 env = EnvBRDFApproxLazarov(perceptualRoughness, NoV);\n    vec3 f0 = surface.f0;\n    // todo f90 用 1.0 近似 f90\n    float f90 = 1.0;\n    vec3 specularColor = f0 * env.x + f90 * env.y;\n\n    vec3 r = getReflectedVector(surface, info);\n\n    #ifdef SPECCUBE_BOX_PROJECTION\n    r = getBoxProjectionReflectedVector(r, info.positionWS, u_SpecCubeProbePosition, u_SpecCubeBoxMin, u_SpecCubeBoxMax);\n    #endif // SPECCUBE_BOX_PROJECTION\n\n    vec3 indirectSpecular = specularIrradiance(r, perceptualRoughness) * u_ReflectionIntensity;\n\n    vec3 Fr = indirectSpecular * specularColor * surface.occlusion;\n\n    indirect = Fd + Fr;\n\n    return indirect;\n}\n\n#endif // pbrGI_lib","#if !defined(pbrCommon_lib)\n    #define pbrCommon_lib\n\n// varying\nvarying vec3 v_PositionWS;\nvarying vec3 v_NormalWS;\n\n    #ifdef UV\nvarying vec2 v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\nvarying vec2 v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef NEEDTBN\nvarying vec3 v_TangentWS;\nvarying vec3 v_BiNormalWS;\n    #endif // NEEDTBN\n\n    #ifdef COLOR\nvarying vec4 v_VertexColor;\n    #endif // COLOR\n\n// 记录顶点信息, 用于由vs向fs传递数据\nstruct PixelParams {\n    vec3 positionWS;\n    vec3 normalWS;\n    vec3 normalTS;\n\n    #ifdef UV\n    vec2 uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    vec2 uv1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef NEEDTBN\n    vec3 tangentWS;\n    vec3 biNormalWS;\n    mat3 TBN;\n\t#ifdef ANISOTROPIC\n    float ToV;\n    float BoV;\n\t#endif // ANISOTROPIC\n\n    #endif // NEEDTBN\n\n    #ifdef COLOR\n    vec4 vertexColor;\n    #endif // COLOR\n\n    vec3 viewDir;\n    float NoV;\n};\n\n#endif // pbrCommon_lib","#if !defined(pbrVertex_lib)\n    #define pbrVertex_lib\n\n    #include \"PBRCommon.glsl\";\n\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\n{\n    mat4 worldMat = getWorldMatrix();\n    params.positionWS = (worldMat * vec4(vertex.positionOS, 1.0)).xyz;\n    v_PositionWS = params.positionWS;\n\n    params.normalWS = normalize((worldMat * vec4(vertex.normalOS, 0.0)).xyz);\n    v_NormalWS = params.normalWS;\n\n    #ifdef NEEDTBN\n\t#ifdef TANGENT\n    params.tangentWS = normalize((worldMat * vec4(a_Tangent0.xyz, 0.0)).xyz);\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS) * sign(a_Tangent0.w));\n\t#else // TANGENT\n    params.tangentWS = normalize((worldMat * vec4(1.0, 0.0, 0.0, 0.0)).xyz);\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS));\n\t#endif // TANGENT\n    v_TangentWS = params.tangentWS;\n    v_BiNormalWS = params.biNormalWS;\n    #endif // NEEDTBN\n\n    #ifdef UV\n    params.uv0 = transformUV(vertex.texCoord0, u_TilingOffset);\n    v_Texcoord0 = params.uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    params.uv1 = tranformLightMapUV(vertex.texCoord1, u_LightmapScaleOffset);\n    v_Texcoord1 = params.uv1;\n\t#endif LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    params.vertexColor = a_Color;\n    v_VertexColor = params.vertexColor;\n    #endif // COLOR\n}\n\n#endif // pbrVertex_lib","#if !defined(pbrFrag_lib)\n    #define pbrFrag_lib\n\n    #include \"PBRLighting.glsl\";\n\n    #include \"PBRCommon.glsl\";\n\nvoid getPixelParams(inout PixelParams params)\n{\n    params.positionWS = v_PositionWS;\n    params.normalWS = normalize(v_NormalWS);\n    params.normalTS = vec3(0.0,0.0,1.0);\n    #ifdef UV\n    params.uv0 = v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    params.uv1 = v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    params.vertexColor = v_VertexColor;\n    #endif // COLOR\n\n    params.viewDir = normalize(u_CameraPos - params.positionWS);\n    // todo NoV varying ?\n    params.NoV = max(abs(dot(params.normalWS, params.viewDir)), MIN_N_DOT_V);\n\n    #ifdef NEEDTBN\n    params.tangentWS = normalize(v_TangentWS);\n    params.biNormalWS = normalize(v_BiNormalWS);\n    mat3 TBN = mat3(params.tangentWS, params.biNormalWS, params.normalWS);\n    params.TBN = TBN;\n    \n\t#ifdef NORMALTEXTURE\n    vec3 normalSampler = texture2D(u_NormalTexture, params.uv0).rgb;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    params.normalTS = normalSampler;\n    params.normalWS = normalize(TBN * normalSampler);\n\t// params.normalWS = normalize(TBN * normalSampler);\n\t#endif // NORMALTEXTURE\n\n\t#ifdef TANGENTTEXTURE\n    vec3 tangentSampler = texture2D(u_TangentTexture, params.uv0).rgb;\n    tangentSampler = normalize(tangentSampler * 2.0 - 1.0);\n    params.tangentWS = normalize(TBN * tangentSampler);\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS));\n\t#endif // TANGENTTEXTURE\n\n\t#ifdef ANISOTROPIC\n    params.ToV = dot(params.tangentWS, params.viewDir);\n    params.BoV = dot(params.biNormalWS, params.viewDir);\n\t#endif // ANISOTROPIC\n\n    #endif // NEEDTBN\n}\n\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel)\n{\n    info.positionWS = pixel.positionWS;\n    info.normalWS = pixel.normalWS;\n    info.viewDir = pixel.viewDir;\n    info.NoV = pixel.NoV;\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    info.lightmapUV = pixel.uv1;\n\t#endif // UV1\n    #endif // LIGHTMAP\n\n    #ifdef NEEDTBN\n    info.tangentWS = pixel.tangentWS;\n    info.biNormalWS = pixel.biNormalWS;\n\n\t#ifdef ANISOTROPIC\n    info.ToV = pixel.ToV;\n    info.BoV = pixel.BoV;\n\t#endif // ANISOTROPIC\n\n    #endif // NEEDTBN\n}\n\nvec3 PBRLighting(const in Surface surface, const in PixelParams pixel)\n{\n\n    PixelInfo info;\n    getPixelInfo(info, pixel);\n\n    vec3 lightColor = vec3(0.0);\n    #ifdef DIRECTIONLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= DirectionCount)\n\t\tbreak;\n\t    DirectionLight directionLight = getDirectionLight(i, pixel.positionWS);\n        if (directionLight.lightMode == LightMode_Mix)\n\t\t{\n\t\t    continue;\n\t\t}\n\t    Light light = getLight(directionLight);\n\t    lightColor += PBRLighting(surface, info, light) * light.attenuation;\n\t}\n    #endif // DIRECTIONLIGHT\n\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, pixel.positionWS, gl_FragCoord, u_ProjectionParams);\n    #endif // POINTLIGHT || SPOTLIGHT\n\n    #ifdef POINTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= clusterInfo.x)\n\t\tbreak;\n\t    PointLight pointLight = getPointLight(i, clusterInfo, pixel.positionWS);\n        if (pointLight.lightMode == LightMode_Mix)\n\t\t{\n\t\t    continue;\n\t\t}\n\t    Light light = getLight(pointLight, pixel.normalWS, pixel.positionWS);\n\t    lightColor += PBRLighting(surface, info, light) * light.attenuation;\n\t}\n    #endif // POINTLIGHT\n\n    #ifdef SPOTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= clusterInfo.y)\n\t\tbreak;\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, pixel.positionWS);\n        if (spotLight.lightMode == LightMode_Mix)\n\t\t{\n\t\t    continue;\n\t\t}\n\t    Light light = getLight(spotLight, pixel.normalWS, pixel.positionWS);\n\t    lightColor += PBRLighting(surface, info, light) * light.attenuation;\n\t}\n    #endif // SPOTLIGHT\n\n    vec3 giColor = PBRGI(surface, info);\n\n\n    return lightColor + giColor;\n}\n\n#endif // pbrFrag_lib","#include \"PBRFrag.glsl\";\n\nstruct SurfaceInputs {\n    vec3 diffuseColor;\n    float alpha;\n    float alphaTest;\n    float metallic;\n    float smoothness;\n    float occlusion;\n    vec3 emissionColor;\n    float anisotropy;\n};\n\nvoid initSurface(inout Surface surface, const in SurfaceInputs inputs)\n{\n    surface.alpha = inputs.alpha;\n\n    vec3 baseColor = inputs.diffuseColor;\n    float metallic = inputs.metallic;\n    float perceptualRoughness = 1.0 - inputs.smoothness;\n    float reflectance = 0.5;\n\n    surface.diffuseColor = (1.0 - metallic) * baseColor;\n    surface.perceptualRoughness = clamp(perceptualRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\n    surface.roughness = surface.perceptualRoughness * surface.perceptualRoughness;\n    surface.f0 = baseColor * metallic + (0.16 * reflectance * reflectance * (1.0 - metallic));\n\n    surface.occlusion = inputs.occlusion;\n#ifdef ANISOTROPIC\n    surface.anisotropy = inputs.anisotropy;\n#endif // ANISOTROPIC\n}\n\nvec4 PBR_Metallic_Flow(const in SurfaceInputs inputs, in PixelParams pixel)\n{\n#ifdef ALPHATEST\n    if (inputs.alpha < inputs.alphaTest)\n\t{\n\t    discard;\n\t}\n#endif // ALPHATEST\n\n    Surface surface;\n    initSurface(surface, inputs);\n\n    vec3 surfaceColor = vec3(0.0);\n\n    surfaceColor += PBRLighting(surface, pixel);\n\n// todo emission calculate\n#ifdef EMISSION\n    surfaceColor += inputs.emissionColor;\n#endif // EMISSION\n\n    return vec4(surfaceColor, surface.alpha);\n}\n","import { HDRTextureInfo } from \"../../../RenderEngine/HDRTextureInfo\";\nimport { WrapMode } from \"../../../RenderEngine/RenderEnum/WrapMode\";\nimport { Texture2D } from \"../../../resource/Texture2D\";\nimport { Base64Tool } from \"../../../utils/Base64Tool\";\n\n\nconst defaultdfg = \"\";\n\n/**\n * @internal\n */\nexport class PBRDefaultDFG {\n\n    // todo 销毁\n    private static _defaultDFG: Texture2D;\n    public static get defaultDFG(): Texture2D {\n        return PBRDefaultDFG._defaultDFG;\n    }\n    public static set defaultDFG(value: Texture2D) {\n        PBRDefaultDFG._defaultDFG = value;\n    }\n\n    static DefaultDfgTexture() {\n        let hdrBuffer = Base64Tool.decode(defaultdfg);\n        let hdrInfo = HDRTextureInfo.getHDRInfo(hdrBuffer);\n        let tex = new Texture2D(hdrInfo.width, hdrInfo.height, hdrInfo.format, false, false, false);\n        tex.setHDRData(hdrInfo);\n        tex.lock = true;\n        tex.wrapModeU = WrapMode.Clamp;\n        tex.wrapModeV = WrapMode.Clamp;\n        tex.anisoLevel = 1;\n\n        this._defaultDFG = tex;\n    }\n\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\n\nimport BRDFGLSL from \"./BRDF.glsl\";\nimport PBRGIGLSL from \"./pbrGI.glsl\";\n\nimport PBRCommonGLSL from \"./pbrCommon.glsl\";\nimport PBRVertexGLSL from \"./pbrVertex.glsl\";\nimport PBRFragGLSL from \"./pbrFrag.glsl\";\nimport PBRMetallicGLSL from \"./pbrMetallicFrag.glsl\";\nimport { PBRDefaultDFG } from \"./PBRDefaultDFG\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\n\nexport class PBRShaderLib {\n\n    static init() {\n        // pbr lib\n        Shader3D.addInclude(\"BRDF.glsl\", BRDFGLSL);\n        Shader3D.addInclude(\"PBRGI.glsl\", PBRGIGLSL);\n      \n\n        Shader3D.addInclude(\"PBRCommon.glsl\", PBRCommonGLSL);\n        Shader3D.addInclude(\"PBRVertex.glsl\", PBRVertexGLSL);\n        Shader3D.addInclude(\"PBRFrag.glsl\", PBRFragGLSL);\n\n        Shader3D.addInclude(\"PBRMetallicFrag.glsl\",PBRMetallicGLSL);\n\n        PBRDefaultDFG.DefaultDfgTexture();\n        SubShader.regIncludeBindUnifrom(\"PBRGI.glsl\",{\"u_IBLDGF\": ShaderDataType.Texture2D},{\"u_IBLDGF\": PBRDefaultDFG.defaultDFG});\n    }\n}","#define SHADER_NAME PBRStandardVS\n\n#include \"Scene.glsl\";\n#include \"Camera.glsl\";\n#include \"Sprite3DVertex.glsl\";\n\n#include \"VertexCommon.glsl\";\n\n#include \"PBRVertex.glsl\";\n\n#if defined(DETAILTEXTURE)||defined(DETAILNORMAL)\n    varying vec2 v_DetailUV;\n#endif\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n    #if defined(DETAILTEXTURE)||defined(DETAILNORMAL)\n        #ifdef UV\n            v_DetailUV = transformUV(vertex.texCoord0, u_DetailTillingOffset);\n        #else // UV\n            v_DetailUV = vec2(0.0);\n        #endif\n    #endif\n\n\n    gl_Position = getPositionCS(pixel.positionWS);\n\n    gl_Position = remapPositionZ(gl_Position);\n}","#define SHADER_NAME PBRStandardFS\n\n#include \"Color.glsl\";\n\n#include \"Scene.glsl\";\n#include \"Camera.glsl\";\n#include \"Sprite3DFrag.glsl\";\n\n#include \"PBRMetallicFrag.glsl\"\n\n#if defined(DETAILTEXTURE)|| defined(DETAILNORMAL)\n    varying vec2 v_DetailUV;\n    #define ColorSpaceDouble vec3(4.59479380, 4.59479380, 4.59479380);\n    vec3 BlendNormals(vec3 n1, vec3 n2)\n    {\n        return normalize(vec3(n1.xy + n2.xy, n1.z*n2.z));\n    }\n    \n#endif\n\n#if defined(DETAILNORMAL)||defined(NORMALTEXTURE)\n    vec3 normalScale(vec3 normal,float scale){\n        normal.xy *= scale;    \n        normal.z = sqrt(1.0 - clamp(dot(normal.xy, normal.xy),0.0,1.0));\n        return normal;\n    }\n#endif\n\nvoid initSurfaceInputs(inout SurfaceInputs inputs,inout PixelParams pixel)\n{\n\n#ifdef UV\n    vec2 uv = pixel.uv0;\n#else // UV\n    vec2 uv = vec2(0.0);\n#endif // UV\n    inputs.diffuseColor = u_AlbedoColor.rgb;\n    inputs.alpha = u_AlbedoColor.a;\n\n#ifdef COLOR\n    #ifdef ENABLEVERTEXCOLOR\n    inputs.diffuseColor *= pixel.vertexColor.xyz;\n    inputs.alpha *= pixel.vertexColor.a;\n    #endif // ENABLEVERTEXCOLOR\n#endif // COLOR\n\n    inputs.alphaTest = u_AlphaTestValue;\n\n#ifdef ALBEDOTEXTURE\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\n    #ifdef Gamma_u_AlbedoTexture\n    albedoSampler = gammaToLinear(albedoSampler);\n    #endif // Gamma_u_AlbedoTexture\n    inputs.diffuseColor *= albedoSampler.rgb;\n    inputs.alpha *= albedoSampler.a;\n#endif // ALBEDOTEXTURE\n\n//Detail Albedo\n#ifdef DETAILTEXTURE\n    vec3 detailSampler = texture2D(u_DetailAlbedoTexture,v_DetailUV).rgb;\n    #ifdef Gamma_u_DetailAlbedoTexture\n        detailSampler = gammaToLinear(detailSampler);\n    #endif // Gamma_u_DetailAlbedoTexture\n        detailSampler *= ColorSpaceDouble;\n        inputs.diffuseColor *=detailSampler;\n#endif\n\n#ifdef NORMALTEXTURE\n    vec3 normalTS = pixel.normalTS;\n    pixel.normalTS =normalScale(normalTS,u_NormalScale) ;\n    pixel.normalWS = normalize(pixel.TBN * pixel.normalTS);\n#endif\n\n#ifdef DETAILNORMAL\n    vec3 detailnormalSampler = texture2D(u_DetailNormalTexture, v_DetailUV).rgb;\n    detailnormalSampler = normalize(detailnormalSampler * 2.0 - 1.0);\n    detailnormalSampler.y *= -1.0;\n    detailnormalSampler = normalScale(detailnormalSampler,u_DetailNormalScale);\n    pixel.normalTS = BlendNormals(pixel.normalTS,detailnormalSampler);\n    pixel.normalWS = normalize(pixel.TBN * pixel.normalTS);\n#endif\n\n    inputs.metallic = u_Metallic;\n    inputs.smoothness = u_Smoothness;\n\n#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n    inputs.smoothness = u_SmoothnessScale;\n    #ifdef ALBEDOTEXTURE\n    inputs.smoothness *= albedoSampler.a;\n    #endif // ALBEDOTEXTURE\n#endif // SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\n#ifdef METALLICGLOSSTEXTURE\n\n    vec4 metallicSampler = texture2D(u_MetallicGlossTexture, uv);\n    #ifdef Gamma_u_MetallicGlossTexture\n    metallicSampler = gammaToLinear(metallicSampler);\n    #endif // Gamma_u_MetallicGlossTexture\n\n    inputs.metallic = metallicSampler.x;\n    inputs.smoothness = metallicSampler.w * u_SmoothnessScale;\n\n    #ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n    inputs.smoothness = u_SmoothnessScale;\n\t#ifdef ALBEDOTEXTURE\n    inputs.smoothness *= albedoSampler.a;\n\t#endif // ALBEDOTEXTURE\n    #endif // SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\n#endif // METALLICGLOSSTEXTURE\n\n    inputs.occlusion = 1.0;\n#ifdef OCCLUSIONTEXTURE\n    vec4 occlusionSampler = texture2D(u_OcclusionTexture, uv);\n    #ifdef Gamma_u_OcclusionTexture\n    occlusionSampler = gammaToLinear(occlusionSampler);\n    #endif // Gamma_u_OcclusionTexture\n\n    float occlusion = occlusionSampler.g;\n    inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\n#endif // OCCLUSIONTEXTURE\n\n#ifdef EMISSION\n    inputs.emissionColor = u_EmissionColor.rgb * u_EmissionIntensity;\n    #ifdef EMISSIONTEXTURE\n    vec4 emissionSampler = texture2D(u_EmissionTexture, uv);\n\t#ifdef Gamma_u_EmissionTexture\n    emissionSampler = gammaToLinear(emissionSampler);\n\t#endif // Gamma_u_EmissionTexture\n    inputs.emissionColor *= emissionSampler.rgb;\n    #endif // EMISSIONTEXTURE\n#endif // EMISSION\n\n#ifdef ANISOTROPIC\n    inputs.anisotropy = u_Anisotropy;\n#endif // ANISOTROPIC\n}\n\nvoid main()\n{\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    SurfaceInputs inputs;\n    initSurfaceInputs(inputs, pixel);\n\n    vec4 surfaceColor = PBR_Metallic_Flow(inputs, pixel);\n    gl_FragColor = surfaceColor;\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\n\nimport PBRStandardVS from \"./pbrStandard.vs\";\nimport PBRStandardFS from \"./pbrStandard.fs\";\n\nimport DepthVS from \"../depth/Depth.vs\";\nimport DepthFS from \"../depth/Depth.fs\";\nimport DepthNormalVS from \"../depth/DepthNormal.vs\";\nimport DepthNormalFS from \"../depth/DepthNormal.fs\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\n\n\nexport class PBRStandardShaderInit {\n\n    static init() {\n\n        let uniformMap = {\n            \"u_AlbedoColor\": ShaderDataType.Color,\n            \"u_TilingOffset\": ShaderDataType.Vector4,\n            \"u_NormalScale\": ShaderDataType.Float,\n            \"u_Metallic\": ShaderDataType.Float,\n            \"u_Smoothness\": ShaderDataType.Float,\n            \"u_SmoothnessScale\": ShaderDataType.Float,\n            \"u_OcclusionStrength\": ShaderDataType.Float,\n            \"u_AlphaTestValue\": ShaderDataType.Float,\n            \"u_EmissionColor\": ShaderDataType.Color,\n            \"u_EmissionIntensity\":ShaderDataType.Float,\n            \"u_AlbedoTexture\": ShaderDataType.Texture2D,\n            \"u_NormalTexture\": ShaderDataType.Texture2D,\n            \"u_OcclusionTexture\": ShaderDataType.Texture2D,\n            \"u_EmissionTexture\": ShaderDataType.Texture2D,\n            \"u_MetallicGlossTexture\": ShaderDataType.Texture2D,\n            \"u_Anisotropy\": ShaderDataType.Float,\n            \"u_TangentTexture\": ShaderDataType.Texture2D,\n            //detail \n            \"u_DetailAlbedoTexture\":ShaderDataType.Texture2D,\n            \"u_DetailNormalTexture\":ShaderDataType.Texture2D,\n            \"u_DetailNormalScale\":ShaderDataType.Float,\n            \"u_DetailTillingOffset\":ShaderDataType.Vector4\n        };\n\n        let defaultValue = {\n            \"u_AlbedoColor\": Color.WHITE,\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\n            \"u_DetailTillingOffset\":new Vector4(1,1,0,0),\n            \"u_NormalScale\": 1,\n            \"u_DetailNormalScale\":1,\n            \"u_Metallic\": 0,\n            \"u_Smoothness\": 0.5,\n            \"u_SmoothnessScale\": 1,\n            \"u_OcclusionStrength\": 1,\n            \"u_EmissionColor\": Color.WHITE,\n            \"u_EmissionIntensity\":1,\n            \"u_Anisotropy\": 0\n        };\n\n        let shader = Shader3D.add(\"PBR\", true, true);\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let shadingPass = subShader.addShaderPass(PBRStandardVS, PBRStandardFS);\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\n        let depthNormal = subShader.addShaderPass(DepthNormalVS, DepthNormalFS, \"DepthNormal\");\n    }\n\n}","#define SHADER_NAME SkyBoxVS\n\n#include \"Camera.glsl\";\n\nconst float c_deg2ang = 3.141593 / 180.0;\n\nvec4 rotateAroundYInDegrees(vec4 vertex, float deg)\n{\n    float angle = deg * c_deg2ang;\n    float sina = sin(angle);\n    float cosa = cos(angle);\n    mat2 m = mat2(cosa, -sina, sina, cosa);\n    return vec4(m * vertex.xz, vertex.yw).xzyw;\n}\n\nvec4 remapSkyPositionZ(in vec4 position)\n{\n    position.z = position.w;\n    return position;\n}\n\nvarying vec3 v_Texcoord;\n\nvoid main()\n{\n    // todo 这个转换 ？\n    v_Texcoord = vec3(-a_Position.x, a_Position.yz); //转换坐标系\n\n    vec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\n    // gl_Position = getPositionCS(position.xyz);\n\n    gl_Position = u_ViewProjection * position;\n\n    gl_Position = remapSkyPositionZ(gl_Position);\n}","#define SHADER_NAME SkyBoxFS\n\n#include \"Color.glsl\";\n\nvarying vec3 v_Texcoord;\n\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\n\nvoid main()\n{\n    vec3 uv = v_Texcoord;\n    vec4 cubeSampler = textureCube(u_CubeTexture, uv);\n#ifdef Gamma_u_CubeTexture\n    cubeSampler = gammaToLinear(cubeSampler);\n#endif // Gamma_u_CubeTexture\n\n    vec3 color = cubeSampler.rgb * u_TintColor.rgb * u_Exposure * c_ColorSpace.rgb;\n\n    gl_FragColor = vec4(color, 1.0);\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport SkyboxVS from \"./SkyBox.vs\";\nimport SkyboxFS from \"./SkyBox.fs\";\nimport { Color } from \"../../../maths/Color\";\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\nexport class SkyBoxShaderInit {\n\n    static init() {\n\n        let attributeMap: AttributeMapType = {\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n\n        let uniformMap = {\n            \"u_TintColor\": ShaderDataType.Color,\n            \"u_Exposure\": ShaderDataType.Float,\n            \"u_Rotation\": ShaderDataType.Float,\n            \"u_CubeTexture\": ShaderDataType.TextureCube\n        };\n\n        let defaultValue = {\n            \"u_TintColor\": new Color(0.5, 0.5, 0.5, 0.5),\n            \"u_Exposure\": 1,\n            \"u_Rotation\": 0\n        };\n\n        let shader = Shader3D.add(\"SkyBox\");\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let pass = subShader.addShaderPass(SkyboxVS, SkyboxFS);\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\n        pass.statefirst = true;\n\n\n    }\n\n}","#define SHADER_NAME ParticleVS\n\n#include \"Camera.glsl\";\n#include \"particleShuriKenSpriteVS.glsl\";\n#include \"Math.glsl\";\n#include \"MathGradient.glsl\";\n#include \"Color.glsl\";\n\n#ifdef RENDERMODE_MESH\nvarying vec4 v_MeshColor;\n#endif\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\n\n//修改这里剔除没有用到的光照函数，增加粒子的编译速度\nvec2 TransformUV(vec2 texcoord, vec4 tilingOffset)\n{\n    vec2 transTexcoord = vec2(texcoord.x, texcoord.y - 1.0) * tilingOffset.xy + vec2(tilingOffset.z, -tilingOffset.w);\n    transTexcoord.y += 1.0;\n    return transTexcoord;\n}\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\nvec3 computeParticleLifeVelocity(in float normalizedAge)\n{\n    vec3 outLifeVelocity;\n    #ifdef VELOCITYOVERLIFETIMECONSTANT\n    outLifeVelocity = u_VOLVelocityConst;\n    #endif\n    #ifdef VELOCITYOVERLIFETIMECURVE\n    outLifeVelocity = vec3(getCurValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\n\tgetCurValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\n\tgetCurValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge));\n    #endif\n    #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n    outLifeVelocity = mix(u_VOLVelocityConst,\n\tu_VOLVelocityConstMax,\n\tvec3(a_Random1.y, a_Random1.z, a_Random1.w));\n    #endif\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n    outLifeVelocity = vec3(\n\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\n\t    getCurValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\n\t    a_Random1.y),\n\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\n\t    getCurValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\n\t    a_Random1.z),\n\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\n\t    getCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\n\t    a_Random1.w));\n    #endif\n\n    return outLifeVelocity;\n}\n#endif\n\n// drag\nvec3 getStartPosition(vec3 startVelocity, float age, vec3 dragData)\n{\n    vec3 startPosition;\n    float lasttime = min(startVelocity.x / dragData.x, age);\n    startPosition = lasttime * (startVelocity - 0.5 * dragData * lasttime);\n    return startPosition;\n}\n\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity, in float age, in float normalizedAge, vec3 gravityVelocity, vec4 worldRotation, vec3 dragData)\n{\n    vec3 startPosition = getStartPosition(startVelocity, age, dragData);\n    vec3 lifePosition;\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n    #ifdef VELOCITYOVERLIFETIMECONSTANT\n    // startPosition = startVelocity * age;\n    lifePosition = lifeVelocity * age;\n    #endif\n    #ifdef VELOCITYOVERLIFETIMECURVE\n    // startPosition = startVelocity * age;\n    lifePosition = vec3(getTotalValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\n\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\n\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge));\n    #endif\n    #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n    // startPosition = startVelocity * age;\n    lifePosition = lifeVelocity * age;\n    #endif\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n    // startPosition = startVelocity * age;\n    lifePosition = vec3(\n\tmix(\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\n\t    a_Random1.y),\n\tmix(\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\n\t    a_Random1.z),\n\tmix(\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\n\t    a_Random1.w));\n    #endif\n\n    vec3 finalPosition;\n    if (u_VOLSpaceType == 0)\n\t{\n\t    if (u_ScalingMode != 2)\n\t\tfinalPosition = rotationByQuaternions(\n\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition),\n\t\t    worldRotation);\n\t    else\n\t\tfinalPosition = rotationByQuaternions(\n\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition,\n\t\t    worldRotation);\n\t}\n    else\n\t{\n\t    if (u_ScalingMode != 2)\n\t\tfinalPosition = rotationByQuaternions(\n\t\t\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\n\t\t\t\t    worldRotation)\n\t\t    + lifePosition;\n\t    else\n\t\tfinalPosition = rotationByQuaternions(\n\t\t\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\n\t\t\t\t    worldRotation)\n\t\t    + lifePosition;\n\t}\n#else\n    // startPosition = startVelocity * age;\n    vec3 finalPosition;\n    if (u_ScalingMode != 2)\n\tfinalPosition = rotationByQuaternions(\n\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\n\t    worldRotation);\n    else\n\tfinalPosition = rotationByQuaternions(\n\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\n\t    worldRotation);\n#endif\n\n    if (u_SimulationSpace == 0)\n\tfinalPosition = finalPosition + a_SimulationWorldPostion;\n    else if (u_SimulationSpace == 1)\n\tfinalPosition = finalPosition + u_WorldPosition;\n\n    finalPosition += 0.5 * gravityVelocity * age;\n\n    return finalPosition;\n}\n\nvec4 computeParticleColor(in vec4 color, in float normalizedAge)\n{\n#ifdef COLOROVERLIFETIME\n    color *= getColorFromGradient(u_ColorOverLifeGradientAlphas,\n\tu_ColorOverLifeGradientColors,\n\tnormalizedAge, u_ColorOverLifeGradientRanges);\n#endif\n\n#ifdef RANDOMCOLOROVERLIFETIME\n    color *= mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,\n\t\t     u_ColorOverLifeGradientColors,\n\t\t     normalizedAge, u_ColorOverLifeGradientRanges),\n\tgetColorFromGradient(u_MaxColorOverLifeGradientAlphas,\n\t    u_MaxColorOverLifeGradientColors,\n\t    normalizedAge, u_MaxColorOverLifeGradientRanges),\n\ta_Random0.y);\n#endif\n\n    return color;\n}\n\nvec2 computeParticleSizeBillbard(in vec2 size, in float normalizedAge)\n{\n#ifdef SIZEOVERLIFETIMECURVE\n    size *= getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge);\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\n    size *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\n\ta_Random0.z);\n#endif\n#ifdef SIZEOVERLIFETIMECURVESEPERATE\n    size *= vec2(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge));\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n    size *= vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\n\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\n\t\t     a_Random0.z),\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\n\t    a_Random0.z));\n#endif\n    return size;\n}\n\n#ifdef RENDERMODE_MESH\nvec3 computeParticleSizeMesh(in vec3 size, in float normalizedAge)\n{\n    #ifdef SIZEOVERLIFETIMECURVE\n    size *= getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge);\n    #endif\n    #ifdef SIZEOVERLIFETIMERANDOMCURVES\n    size *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\n\ta_Random0.z);\n    #endif\n    #ifdef SIZEOVERLIFETIMECURVESEPERATE\n    size *= vec3(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientZ, normalizedAge));\n    #endif\n    #ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n    size *= vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\n\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\n\t\t     a_Random0.z),\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\n\t    a_Random0.z),\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientZ, normalizedAge),\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxZ, normalizedAge),\n\t    a_Random0.z));\n    #endif\n    return size;\n}\n#endif\n\nfloat computeParticleRotationFloat(in float rotation,\n    in float age,\n    in float normalizedAge)\n{\n#ifdef ROTATIONOVERLIFETIME\n    #ifdef ROTATIONOVERLIFETIMECONSTANT\n    float ageRot = u_ROLAngularVelocityConst * age;\n    rotation += ageRot;\n    #endif\n    #ifdef ROTATIONOVERLIFETIMECURVE\n    rotation += getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge);\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    float ageRot = mix(u_ROLAngularVelocityConst, u_ROLAngularVelocityConstMax, a_Random0.w) * age;\n    rotation += ageRot;\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    rotation += mix(\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,\n\t    normalizedAge),\n\ta_Random0.w);\n    #endif\n#endif\n#ifdef ROTATIONOVERLIFETIMESEPERATE\n    #ifdef ROTATIONOVERLIFETIMECONSTANT\n    float ageRot = u_ROLAngularVelocityConstSeprarate.z * age;\n    rotation += ageRot;\n    #endif\n    #ifdef ROTATIONOVERLIFETIMECURVE\n    rotation += getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\n\tnormalizedAge);\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    float ageRot = mix(u_ROLAngularVelocityConstSeprarate.z,\n\t\t       u_ROLAngularVelocityConstMaxSeprarate.z,\n\t\t       a_Random0.w)\n\t* age;\n    rotation += ageRot;\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    rotation += mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\n\t\t\tnormalizedAge),\n\tgetTotalValueFromGradientFloat(\n\t    u_ROLAngularVelocityGradientMaxZ, normalizedAge),\n\ta_Random0.w);\n    #endif\n#endif\n    return rotation;\n}\n\n#if defined(RENDERMODE_MESH) && (defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE))\nvec3 computeParticleRotationVec3(in vec3 rotation,\n    in float age,\n    in float normalizedAge)\n{\n    #ifdef ROTATIONOVERLIFETIME\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n    float ageRot = u_ROLAngularVelocityConst * age;\n    rotation += ageRot;\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMECURVE\n    rotation += getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge);\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    float ageRot = mix(u_ROLAngularVelocityConst, u_ROLAngularVelocityConstMax, a_Random0.w) * age;\n    rotation += ageRot;\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    rotation += mix(\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,\n\t    normalizedAge),\n\ta_Random0.w);\n\t#endif\n    #endif\n    #ifdef ROTATIONOVERLIFETIMESEPERATE\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n    vec3 ageRot = u_ROLAngularVelocityConstSeprarate * age;\n    rotation += ageRot;\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMECURVE\n    rotation += vec3(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,\n\t\t\t normalizedAge),\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,\n\t    normalizedAge),\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\n\t    normalizedAge));\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    vec3 ageRot = mix(u_ROLAngularVelocityConstSeprarate,\n\t\t      u_ROLAngularVelocityConstMaxSeprarate,\n\t\t      a_Random0.w)\n\t* age;\n    rotation += ageRot;\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    rotation += vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,\n\t\t\t     normalizedAge),\n\t\t\t getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,\n\t\t\t     normalizedAge),\n\t\t\t a_Random0.w),\n\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,\n\t\tnormalizedAge),\n\t    getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,\n\t\tnormalizedAge),\n\t    a_Random0.w),\n\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\n\t\tnormalizedAge),\n\t    getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,\n\t\tnormalizedAge),\n\t    a_Random0.w));\n\t#endif\n    #endif\n    return rotation;\n}\n#endif\n\nvec2 computeParticleUV(in vec2 uv, in float normalizedAge)\n{\n#ifdef TEXTURESHEETANIMATIONCURVE\n    float cycleNormalizedAge = normalizedAge * u_TSACycles;\n    float frame = getFrameFromGradient(\n\tu_TSAGradientUVs, cycleNormalizedAge - floor(cycleNormalizedAge));\n    float totalULength = frame * u_TSASubUVLength.x;\n    float floorTotalULength = floor(totalULength);\n    uv.x += totalULength - floorTotalULength;\n    uv.y += floorTotalULength * u_TSASubUVLength.y;\n#endif\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n    float cycleNormalizedAge = normalizedAge * u_TSACycles;\n    float uvNormalizedAge = cycleNormalizedAge - floor(cycleNormalizedAge);\n    float frame = floor(mix(getFrameFromGradient(u_TSAGradientUVs, uvNormalizedAge),\n\tgetFrameFromGradient(u_TSAMaxGradientUVs, uvNormalizedAge),\n\ta_Random1.x));\n    float totalULength = frame * u_TSASubUVLength.x;\n    float floorTotalULength = floor(totalULength);\n    uv.x += totalULength - floorTotalULength;\n    uv.y += floorTotalULength * u_TSASubUVLength.y;\n#endif\n    return uv;\n}\n\nvoid main()\n{\n    float age = u_CurrentTime - a_DirectionTime.w;\n    float normalizedAge = age / a_ShapePositionStartLifeTime.w;\n    vec3 lifeVelocity;\n    if (normalizedAge < 1.0)\n\t{\n\t    vec3 startVelocity = a_DirectionTime.xyz * a_StartSpeed;\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t    lifeVelocity = computeParticleLifeVelocity(normalizedAge); //计算粒子生命周期速度\n#endif\n\t    vec3 gravityVelocity = u_Gravity * age;\n\n\t    vec4 worldRotation;\n\t    if (u_SimulationSpace == 0)\n\t\tworldRotation = a_SimulationWorldRotation;\n\t    else\n\t\tworldRotation = u_WorldRotation;\n\n\t    // drag\n\t    vec3 dragData = a_DirectionTime.xyz * mix(u_DragConstanct.x, u_DragConstanct.y, a_Random0.x);\n\t    vec3 center = computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge, gravityVelocity, worldRotation, dragData); //计算粒子位置\n\n#ifdef SPHERHBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    vec3 cameraUpVector = normalize(u_CameraUp); // TODO:是否外面归一化\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\n\t    vec3 upVector = normalize(cross(sideVector, u_CameraDirection));\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n    #if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\n\t    if (u_ThreeDStartRotation)\n\t\t{\n\t\t    vec3 rotation = vec3(\n\t\t\ta_StartRotation0.xy,\n\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, rotation);\n\t\t}\n\t    else\n\t\t{\n\t\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t\t    float c = cos(rot);\n\t\t    float s = sin(rot);\n\t\t    mat2 rotation = mat2(c, -s, s, c);\n\t\t    corner = rotation * corner;\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\n\t\t}\n    #else\n\t    if (u_ThreeDStartRotation)\n\t\t{\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, a_StartRotation0);\n\t\t}\n\t    else\n\t\t{\n\t\t    float c = cos(a_StartRotation0.x);\n\t\t    float s = sin(a_StartRotation0.x);\n\t\t    mat2 rotation = mat2(c, -s, s, c);\n\t\t    corner = rotation * corner;\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\n\t\t}\n    #endif\n#endif\n\n#ifdef STRETCHEDBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    vec3 velocity;\n    #if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t    if (u_VOLSpaceType == 0)\n\t\tvelocity = rotationByQuaternions(u_SizeScale * (startVelocity + lifeVelocity),\n\t\t\t       worldRotation)\n\t\t    + gravityVelocity;\n\t    else\n\t\tvelocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + lifeVelocity + gravityVelocity;\n    #else\n\t    velocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + gravityVelocity;\n    #endif\n\t    vec3 cameraUpVector = normalize(velocity);\n\t    vec3 direction = normalize(center - u_CameraPos);\n\t    vec3 sideVector = normalize(cross(direction, normalize(velocity)));\n\n\t    sideVector = u_SizeScale.xzy * sideVector;\n\t    cameraUpVector = length(vec3(u_SizeScale.x, 0.0, 0.0)) * cameraUpVector;\n\n\t    vec2 size = computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n\n\t    const mat2 rotaionZHalfPI = mat2(0.0, -1.0, 1.0, 0.0);\n\t    corner = rotaionZHalfPI * corner;\n\t    corner.y = corner.y - abs(corner.y);\n\n\t    float speed = length(velocity); // TODO:\n\t    center += sign(u_SizeScale.x) * (sign(u_StretchedBillboardLengthScale) * size.x * corner.x * sideVector + (speed * u_StretchedBillboardSpeedScale + size.y * u_StretchedBillboardLengthScale) * corner.y * cameraUpVector);\n#endif\n\n#ifdef HORIZONTALBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    const vec3 cameraUpVector = vec3(0.0, 0.0, 1.0);\n\t    const vec3 sideVector = vec3(-1.0, 0.0, 0.0);\n\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t    float c = cos(rot);\n\t    float s = sin(rot);\n\t    mat2 rotation = mat2(c, -s, s, c);\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\n#endif\n\n#ifdef VERTICALBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    const vec3 cameraUpVector = vec3(0.0, 1.0, 0.0);\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\n\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t    float c = cos(rot);\n\t    float s = sin(rot);\n\t    mat2 rotation = mat2(c, -s, s, c);\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\n#endif\n\n#ifdef RENDERMODE_MESH\n\t    vec3 size = computeParticleSizeMesh(a_StartSize, normalizedAge);\n    #if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\n\t    if (u_ThreeDStartRotation)\n\t\t{\n\t\t    vec3 rotation = vec3(\n\t\t\ta_StartRotation0.xy,\n\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\n\t\t    center += rotationByQuaternions(\n\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, rotation),\n\t\t\tworldRotation);\n\t\t}\n\t    else\n\t\t{\n\t#ifdef ROTATIONOVERLIFETIME\n\t\t    float angle = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t\t    if (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\n\t\t\t{\n\t\t\t    center += (rotationByQuaternions(\n\t\t\t\trotationByAxis(\n\t\t\t\t    u_SizeScale * a_MeshPosition * size,\n\t\t\t\t    normalize(cross(vec3(0.0, 0.0, 1.0),\n\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\n\t\t\t\t    angle),\n\t\t\t\tworldRotation)); //已验证\n\t\t\t}\n\t\t    else\n\t\t\t{\n\t    #ifdef SHAPE\n\t\t\t    center += u_SizeScale.xzy * (rotationByQuaternions(rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), angle), worldRotation));\n\t    #else\n\t\t\t    if (u_SimulationSpace == 0)\n\t\t\t\tcenter += rotationByAxis(u_SizeScale * a_MeshPosition * size,\n\t\t\t\t    vec3(0.0, 0.0, -1.0),\n\t\t\t\t    angle); //已验证\n\t\t\t    else if (u_SimulationSpace == 1)\n\t\t\t\tcenter += rotationByQuaternions(\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, 0.0, -1.0), angle),\n\t\t\t\t    worldRotation); //已验证\n\t    #endif\n\t\t\t}\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t    // TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\n\t\t    vec3 angle = computeParticleRotationVec3(\n\t\t\tvec3(0.0, 0.0, -a_StartRotation0.x), age, normalizedAge);\n\t\t    center += (rotationByQuaternions(\n\t\t\trotationByEuler(u_SizeScale * a_MeshPosition * size,\n\t\t\t    vec3(angle.x, angle.y, angle.z)),\n\t\t\tworldRotation)); //已验证\n\t#endif\n\t\t}\n    #else\n\t    if (u_ThreeDStartRotation)\n\t\t{\n\t\t    center += rotationByQuaternions(\n\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, a_StartRotation0),\n\t\t\tworldRotation); //已验证\n\t\t}\n\t    else\n\t\t{\n\t\t    if (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\n\t\t\t{\n\t\t\t    if (u_SimulationSpace == 0)\n\t\t\t\tcenter += rotationByAxis(\n\t\t\t\t    u_SizeScale * a_MeshPosition * size,\n\t\t\t\t    normalize(cross(vec3(0.0, 0.0, 1.0),\n\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\n\t\t\t\t    a_StartRotation0.x);\n\t\t\t    else if (u_SimulationSpace == 1)\n\t\t\t\tcenter += (rotationByQuaternions(\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, normalize(cross(vec3(0.0, 0.0, 1.0), vec3(a_ShapePositionStartLifeTime.xy, 0.0))), a_StartRotation0.x),\n\t\t\t\t    worldRotation)); //已验证\n\t\t\t}\n\t\t    else\n\t\t\t{\n\t#ifdef SHAPE\n\t\t\t    if (u_SimulationSpace == 0)\n\t\t\t\tcenter += u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), a_StartRotation0.x);\n\t\t\t    else if (u_SimulationSpace == 1)\n\t\t\t\tcenter += rotationByQuaternions(\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), a_StartRotation0.x),\n\t\t\t\t    worldRotation);\n\t#else\n\t\t\t    if (u_SimulationSpace == 0)\n\t\t\t\tcenter += rotationByAxis(u_SizeScale * a_MeshPosition * size,\n\t\t\t\t    vec3(0.0, 0.0, -1.0),\n\t\t\t\t    a_StartRotation0.x);\n\t\t\t    else if (u_SimulationSpace == 1)\n\t\t\t\tcenter += rotationByQuaternions(\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, 0.0, -1.0), a_StartRotation0.x),\n\t\t\t\t    worldRotation); //已验证\n\t#endif\n\t\t\t}\n\t\t}\n    #endif\n\t    v_MeshColor = a_MeshColor;\n#endif\n\t    gl_Position = u_Projection * u_View * vec4(center, 1.0);\n\t\tvec4 startcolor = gammaToLinear(a_StartColor);\n\t    v_Color = computeParticleColor(startcolor, normalizedAge);\n#ifdef DIFFUSEMAP\n\t    vec2 simulateUV;\n    #if defined(SPHERHBILLBOARD) || defined(STRETCHEDBILLBOARD) || defined(HORIZONTALBILLBOARD) || defined(VERTICALBILLBOARD)\n\t    simulateUV = a_SimulationUV.xy + a_CornerTextureCoordinate.zw * a_SimulationUV.zw;\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\n    #endif\n    #ifdef RENDERMODE_MESH\n\t    simulateUV = a_SimulationUV.xy + a_MeshTextureCoordinate * a_SimulationUV.zw;\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\n    #endif\n\t    v_TextureCoordinate = TransformUV(v_TextureCoordinate, u_TilingOffset);\n#endif\n\t}\n    else\n\t{\n\t    gl_Position = vec4(2.0, 2.0, 2.0, 1.0); // Discard use out of X(-1,1),Y(-1,1),Z(0,1)\n\t}\n    gl_Position = remapPositionZ(gl_Position);\n}\n","#define SHADER_NAME ParticleFS\n\n#include \"Scene.glsl\";\n#include \"SceneFog.glsl\";\n#include \"Color.glsl\";\n\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\n// uniform sampler2D u_texture;\n// uniform vec4 u_Tintcolor;\n\n#ifdef RENDERMODE_MESH\nvarying vec4 v_MeshColor;\n#endif\n\nvoid main()\n{\n    vec4 color;\n#ifdef RENDERMODE_MESH\n    color = v_MeshColor;\n#else\n    color = vec4(1.0);\n#endif\n\n#ifdef DIFFUSEMAP\n    vec4 colorT = texture2D(u_texture, v_TextureCoordinate);\n    #ifdef Gamma_u_texture\n        colorT = gammaToLinear(colorT);\n    #endif // Gamma_u_SpecularTexture\n    #ifdef TINTCOLOR\n    color *= colorT * u_Tintcolor * c_ColorSpace * v_Color;\n    #else\n    color *= colorT * v_Color;\n    #endif // TINTCOLORd\n#else\n    #ifdef TINTCOLOR\n    color *= u_Tintcolor * c_ColorSpace * v_Color;\n    #else\n    color *= v_Color;\n    #endif // TINTCOLOR\n#endif\n\n#ifdef FOG\n    color.rgb = scenUnlitFog(color.rgb);\n#endif // FOG\n    gl_FragColor = color;\n\n}","float getCurValueFromGradientFloat(in vec2 gradientNumbers[4], in float normalizedAge)\n{\n    float curValue;\n    for (int i = 1; i < 4; i++)\n\t{\n\t    vec2 gradientNumber = gradientNumbers[i];\n\t    float key = gradientNumber.x;\n\t    if (key >= normalizedAge)\n\t\t{\n\t\t    vec2 lastGradientNumber = gradientNumbers[i - 1];\n\t\t    float lastKey = lastGradientNumber.x;\n\t\t    float age = (normalizedAge - lastKey) / (key - lastKey);\n\t\t    curValue = mix(lastGradientNumber.y, gradientNumber.y, age);\n\t\t    break;\n\t\t}\n\t}\n    return curValue;\n}\n\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],\n    in float normalizedAge)\n{\n    float totalValue = 0.0;\n    for (int i = 1; i < 4; i++)\n\t{\n\t    vec2 gradientNumber = gradientNumbers[i];\n\t    float key = gradientNumber.x;\n\t    vec2 lastGradientNumber = gradientNumbers[i - 1];\n\t    float lastValue = lastGradientNumber.y;\n\n\t    if (key >= normalizedAge)\n\t\t{\n\t\t    float lastKey = lastGradientNumber.x;\n\t\t    float age = (normalizedAge - lastKey) / (key - lastKey);\n\t\t    totalValue += (lastValue + mix(lastValue, gradientNumber.y, age)) / 2.0 * a_ShapePositionStartLifeTime.w * (normalizedAge - lastKey);\n\t\t    break;\n\t\t}\n\t    else\n\t\t{\n\t\t    totalValue += (lastValue + gradientNumber.y) / 2.0 * a_ShapePositionStartLifeTime.w * (key - lastGradientNumber.x);\n\t\t}\n\t}\n    return totalValue;\n}\n\nvec4 getColorFromGradient(in vec2 gradientAlphas[COLORCOUNT],\n    in vec4 gradientColors[COLORCOUNT],\n    in float normalizedAge, in vec4 keyRanges)\n{\n    float alphaAge = clamp(normalizedAge, keyRanges.z, keyRanges.w);\n    vec4 overTimeColor;\n    for (int i = 1; i < COLORCOUNT; i++)\n\t{\n\t    vec2 gradientAlpha = gradientAlphas[i];\n\t    float alphaKey = gradientAlpha.x;\n\t    if (alphaKey >= alphaAge)\n\t\t{\n\t\t    vec2 lastGradientAlpha = gradientAlphas[i - 1];\n\t\t    float lastAlphaKey = lastGradientAlpha.x;\n\t\t    float age = (alphaAge - lastAlphaKey) / (alphaKey - lastAlphaKey);\n\t\t    overTimeColor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\n\t\t    break;\n\t\t}\n\t}\n\n    float colorAge = clamp(normalizedAge, keyRanges.x, keyRanges.y);\n    for (int i = 1; i < COLORCOUNT; i++)\n\t{\n\t    vec4 gradientColor = gradientColors[i];\n\t    float colorKey = gradientColor.x;\n\t    if (colorKey >= colorAge)\n\t\t{\n\t\t    vec4 lastGradientColor = gradientColors[i - 1];\n\t\t    float lastColorKey = lastGradientColor.x;\n\t\t    float age = (colorAge - lastColorKey) / (colorKey - lastColorKey);\n\t\t    overTimeColor.rgb = mix(gradientColors[i - 1].yzw, gradientColor.yzw, age);\n\t\t    break;\n\t\t}\n\t}\n    return overTimeColor;\n}\n\nfloat getFrameFromGradient(in vec2 gradientFrames[4], in float normalizedAge)\n{\n    float overTimeFrame;\n    for (int i = 1; i < 4; i++)\n\t{\n\t    vec2 gradientFrame = gradientFrames[i];\n\t    float key = gradientFrame.x;\n\t    if (key >= normalizedAge)\n\t\t{\n\t\t    vec2 lastGradientFrame = gradientFrames[i - 1];\n\t\t    float lastKey = lastGradientFrame.x;\n\t\t    float age = (normalizedAge - lastKey) / (key - lastKey);\n\t\t    overTimeFrame = mix(lastGradientFrame.y, gradientFrame.y, age);\n\t\t    break;\n\t\t}\n\t}\n    return floor(overTimeFrame);\n}\n","// sprite Uniform\nuniform float u_CurrentTime;\nuniform vec3 u_Gravity;\nuniform vec2 u_DragConstanct;\nuniform vec3 u_WorldPosition;\nuniform vec4 u_WorldRotation;\nuniform bool u_ThreeDStartRotation;\nuniform int u_ScalingMode;\nuniform vec3 u_PositionScale;\nuniform vec3 u_SizeScale;\n\nuniform float u_StretchedBillboardLengthScale;\nuniform float u_StretchedBillboardSpeedScale;\nuniform int u_SimulationSpace;\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\nuniform int u_VOLSpaceType;\n#endif\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)\nuniform vec3 u_VOLVelocityConst;\n#endif\n#if defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\nuniform vec2 u_VOLVelocityGradientX[4]; // x为key,y为速度\nuniform vec2 u_VOLVelocityGradientY[4]; // x为key,y为速度\nuniform vec2 u_VOLVelocityGradientZ[4]; // x为key,y为速度\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\nuniform vec3 u_VOLVelocityConstMax;\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\nuniform vec2 u_VOLVelocityGradientMaxX[4]; // x为key,y为速度\nuniform vec2 u_VOLVelocityGradientMaxY[4]; // x为key,y为速度\nuniform vec2 u_VOLVelocityGradientMaxZ[4]; // x为key,y为速度\n#endif\n\n#ifdef COLORKEYCOUNT_8\n    #define COLORCOUNT 8\n#else\n    #define COLORCOUNT 4\n#endif\n\n#ifdef COLOROVERLIFETIME\nuniform vec4 u_ColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\nuniform vec2 u_ColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\nuniform vec4 u_ColorOverLifeGradientRanges;\n#endif\n#ifdef RANDOMCOLOROVERLIFETIME\nuniform vec4 u_ColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\nuniform vec2 u_ColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\nuniform vec4 u_ColorOverLifeGradientRanges;\nuniform vec4 u_MaxColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\nuniform vec2 u_MaxColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\nuniform vec4 u_MaxColorOverLifeGradientRanges;\n#endif\n\n#if defined(SIZEOVERLIFETIMECURVE) || defined(SIZEOVERLIFETIMERANDOMCURVES)\nuniform vec2 u_SOLSizeGradient[4]; // x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\nuniform vec2 u_SOLSizeGradientMax[4]; // x为key,y为尺寸\n#endif\n#if defined(SIZEOVERLIFETIMECURVESEPERATE) || defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\nuniform vec2 u_SOLSizeGradientX[4]; // x为key,y为尺寸\nuniform vec2 u_SOLSizeGradientY[4]; // x为key,y为尺寸\nuniform vec2 u_SOLSizeGradientZ[4]; // x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\nuniform vec2 u_SOLSizeGradientMaxX[4]; // x为key,y为尺寸\nuniform vec2 u_SOLSizeGradientMaxY[4]; // x为key,y为尺寸\nuniform vec2 u_SOLSizeGradientMaxZ[4]; // x为key,y为尺寸\n#endif\n\n#ifdef ROTATIONOVERLIFETIME\n    #if defined(ROTATIONOVERLIFETIMECONSTANT) || defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\nuniform float u_ROLAngularVelocityConst;\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\nuniform float u_ROLAngularVelocityConstMax;\n    #endif\n    #if defined(ROTATIONOVERLIFETIMECURVE) || defined(ROTATIONOVERLIFETIMERANDOMCURVES)\nuniform vec2 u_ROLAngularVelocityGradient[4]; // x为key,y为旋转\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\nuniform vec2 u_ROLAngularVelocityGradientMax[4]; // x为key,y为旋转\n    #endif\n#endif\n#ifdef ROTATIONOVERLIFETIMESEPERATE\n    #if defined(ROTATIONOVERLIFETIMECONSTANT) || defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\nuniform vec3 u_ROLAngularVelocityConstSeprarate;\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\nuniform vec3 u_ROLAngularVelocityConstMaxSeprarate;\n    #endif\n    #if defined(ROTATIONOVERLIFETIMECURVE) || defined(ROTATIONOVERLIFETIMERANDOMCURVES)\nuniform vec2 u_ROLAngularVelocityGradientX[4];\nuniform vec2 u_ROLAngularVelocityGradientY[4];\nuniform vec2 u_ROLAngularVelocityGradientZ[4];\n    #endif\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\nuniform vec2 u_ROLAngularVelocityGradientMaxX[4];\nuniform vec2 u_ROLAngularVelocityGradientMaxY[4];\nuniform vec2 u_ROLAngularVelocityGradientMaxZ[4];\nuniform vec2 u_ROLAngularVelocityGradientMaxW[4];\n    #endif\n#endif\n\n#if defined(TEXTURESHEETANIMATIONCURVE) || defined(TEXTURESHEETANIMATIONRANDOMCURVE)\nuniform float u_TSACycles;\nuniform vec2 u_TSASubUVLength;\nuniform vec2 u_TSAGradientUVs[4]; // x为key,y为frame\n#endif\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\nuniform vec2 u_TSAMaxGradientUVs[4]; // x为key,y为frame\n#endif","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\nimport ShurikenVS from \"./particleShuriKen.vs\";\nimport ShurikenFS from \"./particleShuriKen.fs\";\nimport MathGradient from \"./MathGradient.glsl\";\nimport ParticleSpriteVS from \"./particleShuriKenSpriteVS.glsl\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\n/**\n * ParticleShuriKen Shader init\n */\nexport class ParticleShuriKenShaderInit{\n    static init(){\n        \n        Shader3D.addInclude(\"MathGradient.glsl\", MathGradient);\n        Shader3D.addInclude(\"particleShuriKenSpriteVS.glsl\", ParticleSpriteVS);\n\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\n            'a_CornerTextureCoordinate': [VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0, ShaderDataType.Vector4],\n\t\t \t'a_MeshPosition': [VertexShuriKenParticle.PARTICLE_POSITION0,ShaderDataType.Vector3],\n            'a_MeshColor':[VertexShuriKenParticle.PARTICLE_COLOR0,ShaderDataType.Vector4],\n\t\t \t'a_MeshTextureCoordinate': [VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0,ShaderDataType.Vector2],\n\t\t \t'a_ShapePositionStartLifeTime': [VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,ShaderDataType.Vector4],\n\t\t    'a_DirectionTime': [VertexShuriKenParticle.PARTICLE_DIRECTIONTIME,ShaderDataType.Vector4],\n\t\t \t'a_StartColor': [VertexShuriKenParticle.PARTICLE_STARTCOLOR0,ShaderDataType.Vector4],\n\t\t \t'a_StartSize': [VertexShuriKenParticle.PARTICLE_STARTSIZE,ShaderDataType.Vector3],\n\t\t \t'a_StartRotation0': [VertexShuriKenParticle.PARTICLE_STARTROTATION,ShaderDataType.Vector3],\n\t\t \t'a_StartSpeed': [VertexShuriKenParticle.PARTICLE_STARTSPEED,ShaderDataType.Float],\n\t\t \t'a_Random0': [VertexShuriKenParticle.PARTICLE_RANDOM0,ShaderDataType.Vector4],\n\t\t \t'a_Random1': [VertexShuriKenParticle.PARTICLE_RANDOM1,ShaderDataType.Vector4],\n\t\t \t'a_SimulationWorldPostion': [VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION,ShaderDataType.Vector3],\n\t\t \t'a_SimulationWorldRotation': [VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION,ShaderDataType.Vector4],\n\t\t \t'a_SimulationUV': [VertexShuriKenParticle.PARTICLE_SIMULATIONUV,ShaderDataType.Vector4]\n        };\n\n        let uniformMap = {\n            \"u_Tintcolor\": ShaderDataType.Color,\n            \"u_texture\": ShaderDataType.Texture2D,\n            \"u_TilingOffset\": ShaderDataType.Vector4\n        };\n\n        let defaultValue = {\n            \"u_Tintcolor\": new Color(0.5, 0.5, 0.5, 0.5),\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\n        };\n\n        let shader = Shader3D.add(\"PARTICLESHURIKEN\", false, false);\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let forwardPass = subShader.addShaderPass(ShurikenVS, ShurikenFS);\n\n    }\n}","#define SHADER_NAME SkyProceduralVS\n\n#include \"Camera.glsl\";\n\nconst float c_deg2ang = 3.141593 / 180.0;\n\n#define OUTER_RADIUS 1.025\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\n#define MIE 0.0010             // Mie constant 米氏散射\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\n\nconst float SKY_GROUND_THRESHOLD = 0.02;\nconst float outerRadius = OUTER_RADIUS;\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\nconst float innerRadius = 1.0;\nconst float innerRadius2 = 1.0;\nconst float cameraHeight = 0.0001;\n\nconst float HDSundiskIntensityFactor = 15.0;\nconst float simpleSundiskIntensityFactor = 27.0;\n\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\nconst float kmESun = MIE * SUN_BRIGHTNESS;\nconst float km4PI = MIE * 4.0 * 3.14159265;\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\nconst float scaleDepth = 0.25;\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\n\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\n\n// uniform vec4 u_SkyTint;\n// uniform vec4 u_GroundTint;\n// uniform float u_Exposure;\n// uniform float u_AtmosphereThickness;\nvec4 skyRemapGLPositionZ(vec4 position){\n\tposition.z = position.w;\n\treturn position;\n}\n//sprite\nuniform vec3 u_SunLight_direction;\nuniform vec4 u_SunLight_color;\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Rayleigh phase function\nfloat getRayleighPhase(vec3 light, vec3 ray) \n{\n\tfloat eyeCos = dot(light, ray);\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\n}\n\nfloat scaleAngle(float inCos)\n{\n\tfloat x = 1.0 - inCos;\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\n\nvoid main(){\n    gl_Position = u_ViewProjection*a_Position;\n\n    vec3 skyTintInGammaSpace = pow(u_SkyTint.xyz,vec3(0.45));//u_SkyTint.xyz;//支持非GAMMA空间后要调整\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\n\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\n\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\n\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n\tvec3 eyeRay = normalize(a_Position.xyz);\n\n\tfloat far = 0.0;\n\tvec3 cIn, cOut;\n\tif (eyeRay.y >= 0.0) {// Sky\n\t\t// Calculate the length of the \"atmosphere\"\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat height = innerRadius + cameraHeight;\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\tvec3 frontColor = vec3(0.0);\n\t\t//unrolling this manually to avoid some platform for loop slow\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\n\t\tcIn = frontColor * (invWavelength * krESun);\n\t\tcOut = frontColor * kmESun;\n\t} else {// Ground\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\n\t\tvec3 pos = cameraPos + far * eyeRay;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\n\t\tfloat lightAngle = dot(-u_SunLight_direction, pos);\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\n\t\tfloat lightScale = scaleAngle(lightAngle);\n\t\tfloat cameraOffset = depth*cameraScale;\n\t\tfloat temp = lightScale + cameraScale;\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\t// Now loop through the sample rays\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\n\t\tvec3 attenuate;\n\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat scatter = depth*temp - cameraOffset;\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\n\t}\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tv_Vertex = -a_Position.xyz;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_RayDir = -eyeRay;\n\t#else\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\n\t#endif\n\n\t// if we want to calculate color in vprog:\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint.xyz * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_SunLight_direction, -eyeRay));\n\n\t\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\n\tfloat lightColorIntensity = clamp(length(u_SunLight_color.xyz), 0.25, 1.0);\n\n\t#ifdef SUN_HIGH_QUALITY \n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\n\t#endif\n\tgl_Position=skyRemapGLPositionZ(gl_Position);\n}","#define SHADER_NAME SkyProceduralFS\n\nconst float MIE_G = -0.990;\nconst float MIE_G2 = 0.9801;\nconst float SKY_GROUND_THRESHOLD = 0.02;\n\n// uniform float u_SunSize;\n// uniform float u_SunSizeConvergence;\n\nuniform vec3 u_SunLight_direction;\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Mie phase function\nfloat getMiePhase(float eyeCos, float eyeCos2) {\n\tfloat temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\n\ttemp = pow(temp, pow(u_SunSize,0.65) * 10.0);\n\ttemp = max(temp,1.0e-4); // prevent division by zero, esp. in half precision\n\ttemp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\n\treturn temp;\n}\n\n// Calculates the sun shape\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray) {\n\t#ifdef SUN_HIGH_QUALITY\n\t\tfloat focusedEyeCos = pow(clamp(dot(lightPos, ray),0.0,1.0), u_SunSizeConvergence);\n\t\treturn getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\n\t#else //SUN_SIMPLE\n\t\tvec3 delta = lightPos - ray;\n\t\tfloat dist = length(delta);\n\t\tfloat spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\n\t\treturn spot * spot;\n\t#endif\n}\n\nvoid main() {\n\t// if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\n\t// if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\n\t// if y < 0 [eyeRay.y > 0] - sky\n\tvec3 col = vec3(0.0, 0.0, 0.0);\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tvec3 ray = normalize(v_Vertex);\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\n\t#elif defined(SUN_SIMPLE) \n\t\tvec3 ray = v_RayDir;\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\t\n\t#else\n\t\tfloat y = v_SkyGroundFactor;\n\t#endif\n\n\t// if we did precalculate color in vprog: just do lerp between them\n\tcol = mix(v_SkyColor, v_GroundColor, clamp(y,0.0,1.0));\n\n\t#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\t\tif (y < 0.0)\n\t\t\tcol += v_SunColor * calcSunAttenuation(-u_SunLight_direction, -ray);\n\t#endif\n\n\t//col = sqrt(col);//linear space convert to gamma space\n\tgl_FragColor=vec4(col,1.0);\n}\n","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport SkyProceduralVS from \"./SkyProceduralShader.vs\";\nimport SkyProceduralFS from \"./SkyProceduralShader.fs\";\nimport { Color } from \"../../../maths/Color\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\nexport class SkyProceduralShaderInit {\n    static init() {\n        let attributeMap: AttributeMapType = {\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n\n        let uniformMap = {\n            \"u_SunSize\": ShaderDataType.Float,\n            \"u_SunSizeConvergence\": ShaderDataType.Float,\n            \"u_AtmosphereThickness\": ShaderDataType.Float,\n            \"u_SkyTint\": ShaderDataType.Color,\n            \"u_GroundTint\": ShaderDataType.Color,\n            \"u_Exposure\": ShaderDataType.Float,\n        };\n\n        let defaultValue = {\n            \"u_SunSize\": 0.04,\n            \"u_SunSizeConvergence\": 5,\n            \"u_AtmosphereThickness\": 1.0,\n            \"u_SkyTint\": new Color(0.5, 0.5, 0.5, 1.0),\n            \"u_GroundTint\": new Color(0.369, 0.349, 0.341, 1.0),\n            \"u_Exposure\": 1.3,\n        };\n        let shader = Shader3D.add(\"SkyProcedural\");\n        \n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let pass = subShader.addShaderPass(SkyProceduralVS, SkyProceduralFS);\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\n        pass.statefirst = true;\n    }\n}","#define SHADER_NAME SkyPanoramicVS\n\n#include \"Camera.glsl\";\n#define PI 3.14159265359\n\n//attribute vec4 a_Position;\n\n//uniform float u_Rotation;\n\nvarying vec3 v_Texcoord;\nvarying vec2 v_Image180ScaleAndCutoff;\nvarying vec4 v_Layout3DScaleAndOffset;\n\nvec4 skyRemapGLPositionZ(vec4 position){\n\tposition.z = position.w;\n\treturn position;\n}\n\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\n{\n\tfloat angle = degrees * PI / 180.0;\n\tfloat sina=sin(angle);\n\tfloat cosa=cos(angle);\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\n}\n\t\nvoid main()\n{\n\tvec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\n\t\n\n\tv_Texcoord=vec3(-a_Position.x,-a_Position.y,a_Position.z);// NOTE: -a_Position.x convert coords system\n\n\t// Calculate constant horizontal scale and cutoff for 180 (vs 360) image type\n\tv_Image180ScaleAndCutoff = vec2(1.0, 1.0);// 360 degree mode\n\n\t// Calculate constant scale and offset for 3D layouts\n\tv_Layout3DScaleAndOffset = vec4(0,0,1,1);\n\tgl_Position = u_ViewProjection*position;\n\tgl_Position=skyRemapGLPositionZ(gl_Position);\n\n}\n","#define SHADER_NAME SkyPanoramicVS\n\n#define PI 3.14159265359\n\nvarying vec3 v_Texcoord;\nvarying vec2 v_Image180ScaleAndCutoff;\nvarying vec4 v_Layout3DScaleAndOffset;\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\n\nvec2 ToRadialCoords(vec3 coords)\n{\n    vec3 normalizedCoords = normalize(coords);\n    float latitude = acos(normalizedCoords.y);\n    float longitude = atan(normalizedCoords.z, normalizedCoords.x);\n    vec2 sphereCoords = vec2(longitude, latitude) * vec2(0.5 / PI, 1.0 / PI);\n    return vec2(0.5, 1.0) - sphereCoords;\n}\n\nvoid main()\n{\n    vec2 tc = ToRadialCoords(v_Texcoord);\n    if (tc.x > v_Image180ScaleAndCutoff.y)\n\tgl_FragColor = vec4(0, 0, 0, 1);\n    tc.x = mod(tc.x * v_Image180ScaleAndCutoff.x, 1.0);\n    tc = (tc + v_Layout3DScaleAndOffset.xy) * v_Layout3DScaleAndOffset.zw;\n\n    mediump vec4 tex = texture2D(u_Texture, tc);\n    mediump vec3 c = tex.xyz;\n    c = c * u_TintColor.rgb * c_ColorSpace.rgb;\n    c *= u_Exposure;\n    gl_FragColor = vec4(c, 1.0);\n}\n","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport SkyPanoramicVS from \"./SkyPanoramic.vs\";\nimport SkyPanoramicFS from \"./SkyPanoramic.fs\";\nimport { Texture2D } from \"../../../resource/Texture2D\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\n\nexport class SkyPanoramicShaderInit {\n    static init() {\n        let attributeMap: AttributeMapType = {\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n\n        let uniformMap = {\n            'u_TintColor': ShaderDataType.Color,\n            'u_Rotation': ShaderDataType.Float,\n            'u_Texture': ShaderDataType.Texture2D,\n            'u_Exposure':ShaderDataType.Float,\n        };\n\n        let defaultValue = {\n            'u_TintColor': new Color(0.5,0.5,0.5,1.0),\n            'u_Exposure': 1.3,\n            'u_Rotation': 0,\n            'u_Texture': Texture2D.grayTexture,\n        };\n        let shader = Shader3D.add(\"SkyPanoramic\");\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let pass = subShader.addShaderPass(SkyPanoramicVS, SkyPanoramicFS);\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\n        pass.statefirst = true;\n    }\n}","#if !defined(UtillitiesColor_lib)\n#define UtillitiesColor_lib\n\n// Transformations between CIE XYZ tristimulus values and CIE x,y\n// chromaticity coordinates\nvec3 XYZ_2_xyY(vec3 XYZ)\n{\n    vec3 xyY;\n    float divisor = max(XYZ.x + XYZ.y + XYZ.z, 1e-10);\n    xyY.x = XYZ.x / divisor;\n    xyY.y = XYZ.y / divisor;\n    xyY.z = XYZ.y;\n    return xyY;\n}\n\nvec3 xyY_2_XYZ(vec3 xyY)\n{\n    vec3 XYZ;\n    XYZ.x = xyY.x * xyY.z / max(xyY.y, 1e-10);\n    XYZ.y = xyY.z;\n    XYZ.z = (1.0 - xyY.x - xyY.y) * xyY.z / max(xyY.y, 1e-10);\n    return XYZ;\n}\n\nfloat rgb_2_yc(vec3 rgb, float ycRadiusWeight)\n{\n    float r = rgb.r;\n    float g = rgb.g;\n    float b = rgb.b;\n    float k = b * (b - g) + g * (g - r) + r * (r - b);\n    k = max(MEDIUMP_FLT_MIN, k);\n    float chroma = sqrt(k);\n    return (b + g + r + ycRadiusWeight * chroma) / 3.0;\n}\n\nfloat rgb_2_yc(vec3 rgb)\n{\n    return rgb_2_yc(rgb, 1.75);\n}\n\n// Transformations from RGB to other color representations\n\n// Returns a geometric hue angle in degrees (0-360) based on RGB values.\nfloat rgb_2_hue(vec3 rgb)\n{\n    float hue;\n    // For neutral colors, hue is undefined and the function will return a quiet NaN value.\n    // if (rgb.r == rgb.g && rgb.g == rgb.b) {\n    //     // hue = FLT_NAN;\n    //     // todo FLT_NAN\n    //     hue = 0.0;\n    // } else {\n    //     hue = (180.0 * INVERT_PI) * atan2(sqrt(3.0) * (rgb.g - rgb.b), 2.0 * rgb.r - rgb.g - rgb.b);\n    // }\n    if (rgb.x == rgb.y && rgb.y == rgb.z)\n        hue = 0.0; // RGB triplets where RGB are equal have an undefined hue\n    else\n        hue = (180.0 * INVERT_PI) * atan(sqrt(3.0) * (rgb.y - rgb.z), 2.0 * rgb.x - rgb.y - rgb.z);\n\n    if (hue < 0.0) {\n        hue = hue + 360.0;\n    }\n\n    return hue;\n}\n\n#endif // UtillitiesColor_lib","#if !defined(TransformCommon_lib)\n    #define TransformCommon_lib\n\nconst float TINY = 1e-10;\n\n// sRGB D65 to AP0 D60\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\nconst mat3 sRGB_to_AP0_MAT = mat3(\n    vec3(0.4395856442, 0.0895395735, 0.0173871832),\n    vec3(0.3839294030, 0.8147498351, 0.1087391143),\n    vec3(0.1765327364, 0.0956836061, 0.8738205876));\n\n// sRGB D65 to AP1 D60\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\nconst mat3 sRGB_to_AP1_MAT = mat3(\n    vec3(0.6131178129, 0.0699340823, 0.0204629926),\n    vec3(0.3411819959, 0.9181030375, 0.1067686634),\n    vec3(0.0457873443, 0.0119327755, 0.8727159106));\n\nconst mat3 AP1_to_XYZ_MAT = mat3(\n    vec3(0.6624541811, 0.2722287168, -0.0055746495),\n    vec3(0.1340042065, 0.6740817658, 0.0040607335),\n    vec3(0.1561876870, 0.0536895174, 1.0103391003));\n\nconst mat3 AP0_to_AP1_MAT = mat3(\n    vec3(1.4514393161, -0.0765537734, 0.0083161484),\n    vec3(-0.2365107469, 1.1762296998, -0.0060324498),\n    vec3(-0.2149285693, -0.0996759264, 0.9977163014));\n\nconst mat3 AP1_to_AP0_MAT = mat3(\n    vec3(0.6954522414, 0.0447945634, -0.0055258826),\n    vec3(0.1406786965, 0.8596711185, 0.0040252103),\n    vec3(0.1638690622, 0.0955343182, 1.0015006723));\n\nconst mat3 XYZ_to_AP1_MAT = mat3(\n    vec3(1.6410233797, -0.6636628587, 0.0117218943),\n    vec3(-0.3248032942, 1.6153315917, -0.0082844420),\n    vec3(-0.2364246952, 0.0167563477, 0.9883948585));\n\nconst vec3 AP1_RGB2Y = vec3(0.2722287168, 0.6740817658, 0.0536895174);\n\nfloat ACES_to_ACEScc(float x)\n{\n    // if (x <= 0.0)\n    // return -0.35828683;\n    // else if (x < pow(2.0, -15.0))\n    // return (log2(pow(2.0, -16.0) + x * 0.5) + 9.72) / 17.52;\n    // else\n    // return (log2(x) + 9.72) / 17.52;\n\n    return (x < 0.00003051757) ? (log2(0.00001525878 + x * 0.5) + 9.72) / 17.52 : (log2(x) + 9.72) / 17.52;\n}\n\nvec3 ACES_to_ACEScc(vec3 x)\n{\n    x = clamp(x, vec3(0.0), vec3(MEDIUMP_FLT_MAX));\n    x.x = ACES_to_ACEScc(x.x);\n    x.y = ACES_to_ACEScc(x.y);\n    x.z = ACES_to_ACEScc(x.z);\n\n    return x;\n}\n\nfloat ACEScc_to_ACES(float x)\n{\n    if (x < -0.3013698630)\n\treturn (pow(2.0, x * 17.52 - 9.72) - pow(2.0, -16.0)) * 2.0;\n    else if (x < (log2(MEDIUMP_FLT_MAX) + 9.72) / 17.52)\n\treturn pow(2.0, x * 17.52 - 9.72);\n    else\n\treturn MEDIUMP_FLT_MAX;\n}\n\nvec3 ACEScc_to_ACES(vec3 x)\n{\n    x.x = ACEScc_to_ACES(x.x);\n    x.y = ACEScc_to_ACES(x.y);\n    x.z = ACEScc_to_ACES(x.z);\n    return x;\n}\n\nfloat rgb_2_saturation(vec3 rgb)\n{\n    float rgbmax = vecmax(rgb);\n    float rgbmin = vecmin(rgb);\n    return (max(rgbmax, TINY) - max(rgbmin, TINY)) / max(rgbmax, 1e-2);\n}\n\n#endif // TransformCommon_lib","#if !defined(RRTCommon_lib)\n#define RRTCommon_lib\n\n// \"Glow\" module constants\nconst float RRT_GLOW_GAIN = 0.05;\nconst float RRT_GLOW_MID = 0.08;\n\n// Red modifier constants\nconst float RRT_RED_SCALE = 0.82;\nconst float RRT_RED_PIVOT = 0.03;\nconst float RRT_RED_HUE = 0.;\nconst float RRT_RED_WIDTH = 135.;\n\n// Desaturation contants\nconst float RRT_SAT_FACTOR = 0.96;\n\n// ------- Glow module functions\n\nfloat glow_fwd(float ycIn, float glowGainIn, float glowMid)\n{\n    float glowGainOut;\n    if (ycIn <= 2.0 / 3.0 * glowMid) {\n        glowGainOut = glowGainIn;\n    } else if (ycIn >= 2.0 * glowMid) {\n        glowGainOut = 0.0;\n    } else {\n        glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);\n    }\n    return glowGainOut;\n}\n\n// Sigmoid function in the range 0 to 1 spanning -2 to +2.\nfloat sigmoid_shaper(float x)\n{\n    float t = max(1.0 - abs(x * 0.5), 0.0);\n    float y = 1.0 + sign(x) * (1.0 - t * t);\n\n    return y * 0.5;\n}\n\n// ------- Red modifier functions\nfloat center_hue(float hue, float centerH)\n{\n    float hueCentered = hue - centerH;\n    if (hueCentered < -180.0) {\n        hueCentered = hueCentered + 360.0;\n    } else if (hueCentered > 180.0) {\n        hueCentered -= 360.0;\n    }\n    return hueCentered;\n}\n\n#endif // RRTCommon_lib","#if !defined(ODTCommon_lib)\n#define ODTCommon_lib\n\nconst float CINEMA_WHITE = 48.0;\nconst float CINEMA_BLACK = 0.02; // CINEMA_WHITE / 2400.\n\n// Gamma compensation factor\nconst float DIM_SURROUND_GAMMA = 0.9811;\n\n// Saturation compensation factor\nconst float ODT_SAT_FACTOR = 0.93;\n\n// white point D60 to D65\n// ACES white point D60\nconst mat3 D60_to_D65_MAT = mat3(\n    vec3(0.987224, -0.00759836, 0.00307257),\n    vec3(-0.00611327, 1.00186, -0.00509595),\n    vec3(0.0159533, 0.00533002, 1.08168));\n\nfloat Y_2_linCV(float Y, float Ymax, float Ymin)\n{\n    return (Y - Ymin) / (Ymax - Ymin);\n}\n\nvec3 darkSurround_to_dimSurround(vec3 linearCV)\n{\n    vec3 XYZ = linearCV * AP1_to_XYZ_MAT;\n    vec3 xyY = XYZ_2_xyY(XYZ);\n    xyY.z = clamp(xyY.z, 0.0, MEDIUMP_FLT_MAX);\n    xyY.z = pow(xyY.z, DIM_SURROUND_GAMMA);\n    XYZ = xyY_2_XYZ(xyY);\n\n    return XYZ * XYZ_to_AP1_MAT;\n}\n\n#endif // ODTCommon_lib","#if !defined(Tonescales_lib)\n#define Tonescales_lib\n\nconst mat3 M = mat3(\n    vec3(0.5, -1.0, 0.5),\n    vec3(-1.0, 1.0, 0.5),\n    vec3(0.5, 0.0, 0.0));\n\nfloat segmented_spline_c5_fwd(float x)\n{\n#ifdef GRAPHICS_API_GLES3\n    const float coefsLow[6] = float[6](-4.0000000000, -4.0000000000, -3.1573765773, -0.4852499958, 1.8477324706, 1.8477324706);\n    const float coefsHigh[6] = float[6](-0.7185482425, 2.0810307172, 3.6681241237, 4.0000000000, 4.0000000000, 4.0000000000);\n#else\n    const float coefsLow_0 = -4.0000000000;\n    const float coefsLow_1 = -4.0000000000;\n    const float coefsLow_2 = -3.1573765773;\n    const float coefsLow_3 = -0.4852499958;\n    const float coefsLow_4 = 1.8477324706;\n    const float coefsLow_5 = 1.8477324706;\n\n    const float coefsHigh_0 = -0.7185482425;\n    const float coefsHigh_1 = 2.0810307172;\n    const float coefsHigh_2 = 3.6681241237;\n    const float coefsHigh_3 = 4.0000000000;\n    const float coefsHigh_4 = 4.0000000000;\n    const float coefsHigh_5 = 4.0000000000;\n#endif // GRAPHICS_API_GLES3\n\n    const vec2 minPoint = vec2(0.0000054931640625, 0.0001);\n    const vec2 midPoint = vec2(0.18, 4.8);\n    const vec2 maxPoint = vec2(47185.92, 10000.);\n    const float slopeLow = 0.0;\n    const float slopeHigh = 0.0;\n\n    const int N_KNOTS_LOW = 4;\n    const int N_KNOTS_HIGH = 4;\n\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\n    float logy;\n\n    if (logx <= log10(minPoint.x)) {\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\n        } else if (j == 1) {\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\n        } else if (j == 2) {\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\n        } else { // if (j == 3)\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\n        }\n#endif // GRAPHICS_API_GLES3\n\n        vec3 monomials = vec3(t * t, t, 1.);\n        logy = dot(monomials, M * cf);\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\n        } else if (j == 1) {\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\n        } else if (j == 2) {\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\n        } else { // if (j == 3)\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\n        }\n#endif // #ifdef GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.);\n        logy = dot(monomials, M * cf);\n    } else {\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\n    }\n    return pow(10.0, logy);\n}\n\nfloat segmented_spline_c9_fwd(float x)\n{\n// ODT_48nits\n#ifdef GRAPHICS_API_GLES3\n    const float coefsLow[10] = float[10](-1.6989700043, -1.6989700043, -1.4779000000, -1.2291000000, -0.8648000000, -0.4480000000, 0.0051800000, 0.4511080334, 0.9113744414, 0.9113744414);\n    const float coefsHigh[10] = float[10](0.5154386965, 0.8470437783, 1.1358000000, 1.3802000000, 1.5197000000, 1.5985000000, 1.6467000000, 1.6746091357, 1.6878733390, 1.6878733390);\n#else\n    const float coefsLow_0 = -1.6989700043;\n    const float coefsLow_1 = -1.6989700043;\n    const float coefsLow_2 = -1.4779000000;\n    const float coefsLow_3 = -1.2291000000;\n    const float coefsLow_4 = -0.8648000000;\n    const float coefsLow_5 = -0.4480000000;\n    const float coefsLow_6 = 0.0051800000;\n    const float coefsLow_7 = 0.4511080334;\n    const float coefsLow_8 = 0.9113744414;\n    const float coefsLow_9 = 0.9113744414;\n\n    const float coefsHigh_0 = 0.5154386965;\n    const float coefsHigh_1 = 0.8470437783;\n    const float coefsHigh_2 = 1.1358000000;\n    const float coefsHigh_3 = 1.3802000000;\n    const float coefsHigh_4 = 1.5197000000;\n    const float coefsHigh_5 = 1.5985000000;\n    const float coefsHigh_6 = 1.6467000000;\n    const float coefsHigh_7 = 1.6746091357;\n    const float coefsHigh_8 = 1.6878733390;\n    const float coefsHigh_9 = 1.6878733390;\n#endif // GRAPHICS_API_GLES3\n\n    // todo const\n    vec2 minPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2.0, -6.5)), 0.02);\n    vec2 midPoint = vec2(segmented_spline_c5_fwd(0.18), 4.8);\n    vec2 maxPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2., 6.5)), 48.0);\n\n    const float slopeLow = 0.0;\n    const float slopeHigh = 0.04;\n\n    const int N_KNOTS_LOW = 8;\n    const int N_KNOTS_HIGH = 8;\n\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\n    float logy;\n\n    if (logx <= log10(minPoint.x)) {\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\n        } else if (j == 1) {\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\n        } else if (j == 2) {\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\n        } else if (j == 3) {\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\n        } else if (j == 4) {\n            cf = vec3(coefsLow_4, coefsLow_5, coefsLow_6);\n        } else if (j == 5) {\n            cf = vec3(coefsLow_5, coefsLow_6, coefsLow_7);\n        } else if (j == 6) {\n            cf = vec3(coefsLow_6, coefsLow_7, coefsLow_8);\n        } else { // if (j == 7)\n            cf = vec3(coefsLow_7, coefsLow_8, coefsLow_9);\n        }\n#endif // GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.0);\n        logy = dot(monomials, M * cf);\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\n        } else if (j == 1) {\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\n        } else if (j == 2) {\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\n        } else if (j == 3) {\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\n        } else if (j == 4) {\n            cf = vec3(coefsHigh_4, coefsHigh_5, coefsHigh_6);\n        } else if (j == 5) {\n            cf = vec3(coefsHigh_5, coefsHigh_6, coefsHigh_7);\n        } else if (j == 6) {\n            cf = vec3(coefsHigh_6, coefsHigh_7, coefsHigh_8);\n        } else { // if (j == 7)\n            cf = vec3(coefsHigh_7, coefsHigh_8, coefsHigh_9);\n        }\n#endif // GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.0);\n        logy = dot(monomials, M * cf);\n    } else {\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\n    }\n\n    return pow(10.0, logy);\n}\n\n#endif // Tonescales_lib","#if !defined(RRT_lib)\n#define RRT_lib\n\n#include \"ACES_RRTCommon.glsl\";\n\n/**\n * @param ACES AP0\n * @returns OCES\n */\nvec3 RRT(vec3 aces)\n{\n    // --- Glow module --- //\n    float saturation = rgb_2_saturation(aces);\n    float ycIn = rgb_2_yc(aces);\n    float s = sigmoid_shaper((saturation - 0.4) / 0.2);\n    float addedGlow = 1.0 + glow_fwd(ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);\n\n    aces *= addedGlow;\n\n    // --- Red modifier --- //\n    float hue = rgb_2_hue(aces);\n    float centeredHue = center_hue(hue, RRT_RED_HUE);\n\n    float hueWeight = smoothstep(0.0, 1.0, 1.0 - abs(2.0 * centeredHue / RRT_RED_WIDTH));\n    hueWeight *= hueWeight;\n\n    aces.r += hueWeight * saturation * (RRT_RED_PIVOT - aces.r) * (1. - RRT_RED_SCALE);\n\n    // --- ACES to RGB rendering space --- //\n    vec3 rgbPre = AP0_to_AP1_MAT * aces;\n    rgbPre = clamp(rgbPre, 0.0, MEDIUMP_FLT_MAX);\n\n    // --- Global desaturation --- //\n    rgbPre = mix(vec3(dot(rgbPre, AP1_RGB2Y)), rgbPre, RRT_SAT_FACTOR);\n\n    // --- Apply the tonescale independently in rendering-space RGB --- //\n    vec3 rgbPost;\n    rgbPost.x = segmented_spline_c5_fwd(rgbPre.x);\n    rgbPost.y = segmented_spline_c5_fwd(rgbPre.y);\n    rgbPost.z = segmented_spline_c5_fwd(rgbPre.z);\n\n    // --- RGB rendering space to OCES --- //\n    vec3 rgbOces = AP1_to_AP0_MAT * rgbPost;\n\n    return rgbOces;\n}\n\n#endif // RRT_lib","#if !defined(ODT_sRGB_100nits_lib)\n#define ODT_sRGB_100nits_lib\n\n#include \"ACES_ODTCommon.glsl\";\n\n// CIE XYZ to REC.709\nconst mat3 XYZ_to_REC709_MAT = mat3(\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\n\nconst float DISPGAMMA = 2.4;\nconst float OFFSET = 0.055;\n\nvec3 ODT_sRGB_100nits(vec3 oces)\n{\n    // OCES to RGB rendering space\n    vec3 rgbPre = AP0_to_AP1_MAT * oces;\n\n    // Apply the tonescale independently in rendering-space RGB\n    vec3 rgbPost;\n    rgbPost.r = segmented_spline_c9_fwd(rgbPre.r);\n    rgbPost.g = segmented_spline_c9_fwd(rgbPre.g);\n    rgbPost.b = segmented_spline_c9_fwd(rgbPre.b);\n\n    // Scale luminance to linear code value\n    vec3 linearCV;\n    linearCV.r = Y_2_linCV(rgbPost.r, CINEMA_WHITE, CINEMA_BLACK);\n    linearCV.g = Y_2_linCV(rgbPost.g, CINEMA_WHITE, CINEMA_BLACK);\n    linearCV.b = Y_2_linCV(rgbPost.b, CINEMA_WHITE, CINEMA_BLACK);\n\n    // Apply gamma adjustment to compensate for dim surround\n    linearCV = darkSurround_to_dimSurround(linearCV);\n\n    // Convert to display primary encoding\n    // Rendering space RGB to XYZ\n    vec3 XYZ = AP1_to_XYZ_MAT * linearCV;\n\n    // Apply CAT from ACES white point to assumed observer adapted white point\n    XYZ = D60_to_D65_MAT * XYZ;\n\n    // CIE XYZ to display primaries\n    linearCV = XYZ_to_REC709_MAT * XYZ;\n\n    linearCV = clamp(linearCV, vec3(0.0), vec3(1.0));\n    return linearCV;\n}\n\n#endif // ODT_sRGB_100nits_lib","// Academy Color Encoding System (ACES) software and tools are provided by the\n// Academy under the following terms and conditions: A worldwide, royalty-free,\n// non-exclusive right to copy, modify, create derivatives, and use, in source\n// and binary forms, is hereby granted, subject to acceptance of this license.\n\n// Copyright 2019 Academy of Motion Picture Arts and Sciences (A.M.P.A.S.).\n// Portions contributed by others as indicated. All rights reserved.\n\n// Performance of any of the aforementioned acts indicates acceptance to be\n// bound by the following terms and conditions:\n\n// Copies of source code, in whole or in part, must retain the above copyright\n// notice, this list of conditions and the Disclaimer of Warranty.\n\n// Use in binary form must retain the above copyright notice, this list of\n// conditions and the Disclaimer of Warranty in the documentation and/or other\n// materials provided with the distribution.\n\n// Nothing in this license shall be deemed to grant any rights to trademarks,\n// copyrights, patents, trade secrets or any other intellectual property of\n// A.M.P.A.S. or any contributors, except as expressly stated herein.\n\n// Neither the name \"A.M.P.A.S.\" nor the name of any other contributors to this\n// software may be used to endorse or promote products derivative of or based on\n// this software without express prior written permission of A.M.P.A.S. or the\n// contributors, as appropriate.\n\n// This license shall be construed pursuant to the laws of the State of\n// California, and any disputes related thereto shall be subject to the\n// jurisdiction of the courts therein.\n\n// Disclaimer of Warranty: THIS SOFTWARE IS PROVIDED BY A.M.P.A.S. AND\n// CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n// NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL\n// A.M.P.A.S., OR ANY CONTRIBUTORS OR DISTRIBUTORS, BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, RESITUTIONARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n// WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE ACADEMY SPECIFICALLY\n// DISCLAIMS ANY REPRESENTATIONS OR WARRANTIES WHATSOEVER RELATED TO PATENT OR\n// OTHER INTELLECTUAL PROPERTY RIGHTS IN THE ACADEMY COLOR ENCODING SYSTEM, OR\n// APPLICATIONS THEREOF, HELD BY PARTIES OTHER THAN A.M.P.A.S.,WHETHER DISCLOSED\n// OR UNDISCLOSED.\n\n#if !defined(ACES_lib)\n#define ACES_lib\n\n#include \"ACES_TransformCommon.glsl\";\n#include \"ACES_UtillitiesColor.glsl\";\n#include \"ACES_Tonescales.glsl\";\n\n#include \"ACES_RRT.glsl\";\n#include \"ACES_ODT_sRGB_100nits.glsl\";\n\n// idt\n\n// linear D65 sRGB to D60 ACES AP0\nvec3 sRGB_to_AP0(vec3 sRGB)\n{\n    return sRGB_to_AP0_MAT * sRGB;\n}\n\n// linear D65 sRGB to D60 ACES AP1\nvec3 sRGB_to_AP1(vec3 sRGB)\n{\n    return sRGB_to_AP1_MAT * sRGB;\n}\n\n// lmt\n// todo\n\n#endif // ACES_lib","import { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\n\nimport UtillitiesColorGLSL from \"./lib/UtillitiesColor.glsl\";\nimport TransformCommonGLSL from \"./lib/TransformCommon.glsl\";\nimport RRTCommonGLSL from \"./lib/RRTCommon.glsl\";\nimport ODTCommonGLSL from \"./lib/ODTCommon.glsl\";\nimport TonescalesGLSL from \"./lib/Tonescales.glsl\";\n\nimport RRTGLSL from \"./rrt/RRT.glsl\";\nimport ODT_sRGB_100nits_GLSL from \"./odt/ODT_sRGB_100nits.glsl\";\n\nimport ACESGLSL from \"./ACES.glsl\";\n\nexport class ACESShaderLib {\n\n    static init() {\n        Shader3D.addInclude(\"ACES_UtillitiesColor.glsl\", UtillitiesColorGLSL);\n        Shader3D.addInclude(\"ACES_TransformCommon.glsl\", TransformCommonGLSL);\n        Shader3D.addInclude(\"ACES_Tonescales.glsl\", TonescalesGLSL);\n        Shader3D.addInclude(\"ACES_RRTCommon.glsl\", RRTCommonGLSL);\n        Shader3D.addInclude(\"ACES_ODTCommon.glsl\", ODTCommonGLSL);\n\n        Shader3D.addInclude(\"ACES_RRT.glsl\", RRTGLSL);\n        Shader3D.addInclude(\"ACES_ODT_sRGB_100nits.glsl\", ODT_sRGB_100nits_GLSL);\n\n        Shader3D.addInclude(\"ACES.glsl\", ACESGLSL);\n    }\n\n}","\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport UtilsGLSL from \"./utils/Utils.glsl\";\nimport ColorGLSL from \"./utils/Color.glsl\";\nimport MathGLSL from \"./utils/Math.glsl\";\nimport TBNNormalGLSL from \"./utils/TBNNormal.glsl\";\nimport BakedBoneMatrixSamplerGLSL from \"./utils/BakedBoneMatrixSampler.glsl\";\n\nimport VertexGLSL from \"./common/VertexCommon.glsl\";\n\nimport SceneGLSL from \"./common/SceneCommon.glsl\";\nimport CameraGLSL from \"./common/CameraCommon.glsl\";\nimport Sprite3DCommonGLSL from \"./common/Sprite3DCommon.glsl\";\nimport Sprite3DVertexGLSL from \"./common/Sprite3DVertex.glsl\";\nimport Sprite3DFragGLSL from \"./common/Sprite3DFrag.glsl\";\n\nimport DepthVertexGLSL from \"./depth/DepthVertex.glsl\";\nimport DepthFragGLSL from \"./depth/DepthFrag.glsl\";\nimport DepthNormalUtilGLSL from \"./depth/DepthNormalUtil.glsl\";\n\nimport ShadowSampleTentGLSL from \"./lighting/ShadowSampleTent.glsl\";\nimport ShadowSamplerGLSL from \"./lighting/ShadowSampler.glsl\";\n\nimport SceneFogGLSL from \"./utils/SceneFog.glsl\";\n\nimport LightingGLSL from \"./lighting/Lighting.glsl\";\nimport GlobalIlluminationGLSL from \"./lighting/globalIllumination.glsl\";\n\nimport BlinnPhongLightingGLSL from \"./lightingmode/BlinnPhongLighting.glsl\";\nimport PBRLightingGLSL from \"./lightingmode/PBRLighting.glsl\";\n\nimport { BlitScreenShaderInit } from \"./postprocess/BlitScreenShaderInit\";\nimport { UnlitShaderInit } from \"./unlit/UnlitShaderInit\";\nimport { BlinnPhongShaderInit } from \"./blinnphong/BlinnPhongShaderInit\";\nimport { TrailShaderInit } from \"./Trail/TrailShaderInit\";\nimport { PBRShaderLib } from \"./pbr/PBRShaderLib\";\nimport { PBRStandardShaderInit } from \"./pbr/PBRStandardShaderInit\";\nimport { SkyBoxShaderInit } from \"./sky/SkyBoxShaderInit\";\nimport { ParticleShuriKenShaderInit } from \"./ShurikenParticle/ParticleShuriKenShaderInit\";\nimport { SkyProceduralShaderInit } from \"./sky/SkyProceduralShaderInit\";\nimport { SkyPanoramicShaderInit } from \"./sky/SkyPanoramicShaderInit\";\nimport { ACESShaderLib } from \"./postprocess/ACES/ACESShaderLib\";\n\n/**\n * @internal\n * <code>ShaderInit</code> 类用于初始化内置Shader。\n */\nexport class ShaderInit3D {\n\t/**\n\t * @internal\n\t */\n\tstatic __init__(): void {\n\n\t\t// utils\n\t\tShader3D.addInclude(\"Utils.glsl\", UtilsGLSL);\n\t\tShader3D.addInclude(\"Color.glsl\", ColorGLSL);\n\t\tShader3D.addInclude(\"Math.glsl\", MathGLSL);\n\t\tShader3D.addInclude(\"TBNNormal.glsl\", TBNNormalGLSL);\n\t\tShader3D.addInclude(\"BakedBoneMatrixSampler.glsl\", BakedBoneMatrixSamplerGLSL);\n\t\tShader3D.addInclude(\"VertexCommon.glsl\", VertexGLSL);\n\n\t\t// scene\n\t\tShader3D.addInclude(\"Scene.glsl\", SceneGLSL);\n\n\t\t// camera\n\t\tShader3D.addInclude(\"Camera.glsl\", CameraGLSL);\n\n\t\t// sprite3D\n\t\tShader3D.addInclude(\"Sprite3DCommon.glsl\", Sprite3DCommonGLSL);\n\t\tShader3D.addInclude(\"Sprite3DVertex.glsl\", Sprite3DVertexGLSL);\n\t\tShader3D.addInclude(\"Sprite3DFrag.glsl\", Sprite3DFragGLSL);\n\n\t\t// depth\n\t\tShader3D.addInclude(\"DepthVertex.glsl\", DepthVertexGLSL);\n\t\tShader3D.addInclude(\"DepthFrag.glsl\", DepthFragGLSL);\n\t\tShader3D.addInclude(\"DepthNormalUtil.glsl\", DepthNormalUtilGLSL);\n\n\t\t// scene fog\n\t\tShader3D.addInclude(\"SceneFog.glsl\", SceneFogGLSL);\n\n\t\t// shadow sampler\n\t\tShader3D.addInclude(\"ShadowSampleTent.glsl\", ShadowSampleTentGLSL);\n\t\tShader3D.addInclude(\"ShadowSampler.glsl\", ShadowSamplerGLSL);\n\n\t\t// lighting\n\t\tShader3D.addInclude(\"Lighting.glsl\", LightingGLSL);\n\t\tShader3D.addInclude(\"globalIllumination.glsl\", GlobalIlluminationGLSL);\n\n\t\t// lighting mode\n\t\tShader3D.addInclude(\"BlinnPhongLighting.glsl\", BlinnPhongLightingGLSL);\n\t\tShader3D.addInclude(\"PBRLighting.glsl\", PBRLightingGLSL);\n\n\t\t// lib\n\t\tPBRShaderLib.init();\n\t\tACESShaderLib.init();\n\n\t\t// shader init\n\t\tBlitScreenShaderInit.init();\n\t\tUnlitShaderInit.init();\n\t\tPBRStandardShaderInit.init();\n\t\t//PBRShaderInit.init();\n\t\tBlinnPhongShaderInit.init();\n\t\tTrailShaderInit.init();\n\t\tParticleShuriKenShaderInit.init();\n\t\tSkyBoxShaderInit.init();\n\t\tSkyProceduralShaderInit.init();\n\t\tSkyPanoramicShaderInit.init();\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\tShader3D.SHADERDEFINE_LEGACYSINGALLIGHTING = Shader3D.getDefineByName(\"LEGACYSINGLELIGHTING\");\n\t\tShader3D.SHADERDEFINE_GRAPHICS_API_GLES2 = Shader3D.getDefineByName(\"GRAPHICS_API_GLES2\");\n\t\tShader3D.SHADERDEFINE_GRAPHICS_API_GLES3 = Shader3D.getDefineByName(\"GRAPHICS_API_GLES3\");\n\t\tShader3D.SHADERDEFINE_ENUNIFORMBLOCK = Shader3D.getDefineByName(\"ENUNIFORMBLOCK\");\n\t\t// Shader3D.addInclude(\"LayaComInput.glsl\", LayaComInput);\n\t\t// Shader3D.addInclude(\"DepthCasterInput.glsl\", DepthCasterInput);\n\t\t// Shader3D.addInclude(\"Lighting.glsl\", LightingGLSL);\n\t\t// Shader3D.addInclude(\"ShadowSampleTent.glsl\", ShadowSampleTentGLSL);\n\t\t// Shader3D.addInclude(\"GlobalIllumination.glsl\", GlobalIllumination);\n\t\t// Shader3D.addInclude(\"Shadow.glsl\", ShadowGLSL);\n\t\t// Shader3D.addInclude(\"ShadowCasterVS.glsl\", ShadowCasterVSGLSL);\n\t\t// Shader3D.addInclude(\"ShadowCasterFS.glsl\", ShadowCasterFSGLSL);\n\t\t// Shader3D.addInclude(\"Colors.glsl\", ColorsGLSL);\n\t\t// Shader3D.addInclude(\"Sampling.glsl\", SamplingGLSL);\n\t\t// Shader3D.addInclude(\"StdLib.glsl\", StdLibGLSL);\n\t\t// Shader3D.addInclude(\"PBRVSInput.glsl\", PBRVSInput);\n\t\t// Shader3D.addInclude(\"PBRFSInput.glsl\", PBRFSInput);\n\t\t// Shader3D.addInclude(\"LayaPBRBRDF.glsl\", LayaPBRBRDF);\n\t\t// Shader3D.addInclude(\"PBRCore.glsl\", PBRCore);\n\t\t// Shader3D.addInclude(\"PBRVertex.glsl\", PBRVertex);\n\t\t// Shader3D.addInclude(\"LayaUtile.glsl\", LayaUtile);\n\t\t// Shader3D.addInclude(\"DepthNormalUtil.glsl\", DepthNormalUtil);\n\t\t//Blinnphong\n\t\t// var shader: Shader3D = Shader3D.add(\"BLINNPHONG\", true);\n\t\t// var subShader: SubShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(MeshBlinnPhongVS, MeshBlinnPhongPS, \"Forward\");\n\t\t// var shaderPass: ShaderPass = subShader.addShaderPass(MeshBlinnPhongShadowCasterVS, MeshBlinnPhongShadowCasterPS, \"ShadowCaster\");\n\t\t// shaderPass = subShader.addShaderPass(DepthNormalsTextureVS, DepthNormalsTextureFS, \"DepthNormal\");\n\t\t// //LineShader\n\t\t// shader = Shader3D.add(\"LineShader\");\n\t\t// subShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(lineVS, linePS);\n\t\t// //unlit\n\t\t// shader = Shader3D.add(\"Unlit\", true);\n\t\t// subShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(UnlitVS, UnlitPS);\n\t\t// //meshEffect\n\t\t// shader = Shader3D.add(\"Effect\", true);\n\t\t// subShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(EffectVS, EffectPS);\n\n\t\t// //ShurikenParticle\n\t\t// var attributeMap = {\n\t\t// \t'a_CornerTextureCoordinate': VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0,\n\t\t// \t'a_MeshPosition': VertexShuriKenParticle.PARTICLE_POSITION0,\n\t\t// \t'a_MeshColor': VertexShuriKenParticle.PARTICLE_COLOR0,\n\t\t// \t'a_MeshTextureCoordinate': VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0,\n\t\t// \t'a_ShapePositionStartLifeTime': VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,\n\t\t// \t'a_DirectionTime': VertexShuriKenParticle.PARTICLE_DIRECTIONTIME,\n\t\t// \t'a_StartColor': VertexShuriKenParticle.PARTICLE_STARTCOLOR0,\n\t\t// \t'a_EndColor': VertexShuriKenParticle.PARTICLE_ENDCOLOR0,\n\t\t// \t'a_StartSize': VertexShuriKenParticle.PARTICLE_STARTSIZE,\n\t\t// \t'a_StartRotation0': VertexShuriKenParticle.PARTICLE_STARTROTATION,\n\t\t// \t'a_StartSpeed': VertexShuriKenParticle.PARTICLE_STARTSPEED,\n\t\t// \t'a_Random0': VertexShuriKenParticle.PARTICLE_RANDOM0,\n\t\t// \t'a_Random1': VertexShuriKenParticle.PARTICLE_RANDOM1,\n\t\t// \t'a_SimulationWorldPostion': VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION,\n\t\t// \t'a_SimulationWorldRotation': VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION,\n\t\t// \t'a_SimulationUV': VertexShuriKenParticle.PARTICLE_SIMULATIONUV\n\t\t// };\n\t\t// shader = Shader3D.add(\"PARTICLESHURIKEN\");\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(ParticleShuriKenVS, ParticleShuriKenPS);\n\t\t// //SkyBox\n\t\t// shader = Shader3D.add(\"SkyBox\");\n\t\t// subShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(SkyBoxVS, SkyBoxPS);\n\t\t// // //SkyBoxProcedural\n\t\t// shader = Shader3D.add(\"SkyBoxProcedural\");\n\t\t// subShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(SkyBoxProceduralVS, SkyBoxProceduralPS);\n\t\t// //extendTerrain的shader TODO delete\n\t\t// shader = Shader3D.add(\"ExtendTerrain\");\n\t\t// subShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(extendTerrainVS, extendTerrainPS);\n\t\t// //Trail\n\t\t// (attributeMap as any) = {\n\t\t// \t'a_Position': VertexTrail.TRAIL_POSITION0,\n\t\t// \t'a_OffsetVector': VertexTrail.TRAIL_OFFSETVECTOR,\n\t\t// \t'a_Texcoord0X': VertexTrail.TRAIL_TEXTURECOORDINATE0X,\n\t\t// \t'a_Texcoord0Y': VertexTrail.TRAIL_TEXTURECOORDINATE0Y,\n\t\t// \t'a_BirthTime': VertexTrail.TRAIL_TIME0,\n\t\t// \t'a_Color': VertexTrail.TRAIL_COLOR\n\t\t// };\n\t\t// shader = Shader3D.add(\"Trail\");\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(TrailVS, TrailPS);\n\n\t\t// // //WaterPrimary TODO delete\n\t\t// shader = Shader3D.add(\"WaterPrimary\");\n\t\t// subShader = new SubShader();\n\t\t// shader.addSubShader(subShader);\n\t\t// subShader.addShaderPass(WaterPrimaryVS, WaterPrimaryPS);\n\t\t// //BlitScreen\n\t\t// // (attributeMap as any) = {\n\t\t// // \t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\n\t\t// // };\n\t\t// // shader = Shader3D.add(\"BlitScreen\");\n\t\t// // subShader = new SubShader(attributeMap);\n\t\t// // shader.addSubShader(subShader);\n\t\t// // var shaderPass: ShaderPass = subShader.addShaderPass(BlitScreenVS, BlitScreenPS);\n\t\t// var renderState: RenderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\t\t// //PostProcessBloom\n\t\t// (attributeMap as any) = {\n\t\t// \t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\n\t\t// };\n\t\t// shader = Shader3D.add(\"PostProcessBloom\");\n\t\t// //subShader0\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter13PS);\n\t\t// renderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\t\t// //subShader1\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter4PS);\n\t\t// renderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\t\t// //subShader2\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomDownsample13PS);\n\t\t// renderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\t\t// //subShader3\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomDownsample4PS);\n\t\t// renderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\t\t// //subShader4\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleTentPS);\n\t\t// renderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\t\t// //subShader5\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleBoxPS);\n\t\t// renderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\n\t\t// //PostProcessComposite\n\t\t// (attributeMap as any) = {\n\t\t// \t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\n\t\t// };\n\t\t// shader = Shader3D.add(\"PostProcessComposite\");\n\n\t\t// subShader = new SubShader(attributeMap);\n\t\t// shader.addSubShader(subShader);\n\t\t// shaderPass = subShader.addShaderPass(CompositeVS, CompositePS);\n\t\t// renderState = shaderPass.renderState;\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n\t\t// renderState.depthWrite = false;\n\t\t// renderState.cull = RenderState.CULL_NONE;\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\n\t}\n}\n\n","import { IndexBuffer } from \"../../RenderEngine/IndexBuffer\";\nimport { BufferTargetType, BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\n/**\n * @internal\n * 请使用LayaGL.RenderOBJCreate.createIndexBuffer3D来创建\n * <code>IndexBuffer3D</code> 类用于创建索引缓冲。\n */\nexport class IndexBuffer3D extends IndexBuffer {\n\t/** @internal */\n\tprivate _canRead: boolean;\n\n\t/**\n\t * 索引类型。\n\t */\n\tget indexType(): IndexFormat {\n\t\treturn this._indexType;\n\t}\n\n\t/**\n\t * 索引类型字节数量。\n\t */\n\tget indexTypeByteCount(): number {\n\t\treturn this._indexTypeByteCount;\n\t}\n\n\t/**\n\t * 索引个数。\n\t */\n\tget indexCount(): number {\n\t\treturn this._indexCount;\n\t}\n\n\t/**\n\t * 是否可读。\n\t */\n\tget canRead(): boolean {\n\t\treturn this._canRead;\n\t}\n\n\t/**\n\t * 创建一个 <code>IndexBuffer3D,不建议开发者使用并用IndexBuffer3D.create()代替</code> 实例。\n\t * @param\tindexType 索引类型。\n\t * @param\tindexCount 索引个数。\n\t * @param\tbufferUsage IndexBuffer3D用途类型。\n\t * @param\tcanRead 是否可读。\n\t */\n\tconstructor(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false) {\n\t\tsuper(BufferTargetType.ELEMENT_ARRAY_BUFFER, bufferUsage);\n\t\tthis._indexType = indexType;\n\t\tthis._indexCount = indexCount;\n\n\t\tthis._canRead = canRead;\n\n\t\tswitch (indexType) {\n\t\t\tcase IndexFormat.UInt32:\n\t\t\t\tthis._indexTypeByteCount = 4;\n\t\t\t\tbreak;\n\t\t\tcase IndexFormat.UInt16:\n\t\t\t\tthis._indexTypeByteCount = 2;\n\t\t\t\tbreak;\n\t\t\tcase IndexFormat.UInt8:\n\t\t\t\tthis._indexTypeByteCount = 1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"unidentification index type.\");\n\t\t}\n\t\tvar byteLength: number = this._indexTypeByteCount * indexCount;\n\t\tthis._byteLength = byteLength;\n\t\tthis._setIndexData(byteLength);\n\t\tif (canRead) {\n\t\t\tswitch (indexType) {\n\t\t\t\tcase IndexFormat.UInt32:\n\t\t\t\t\tthis._buffer = new Uint32Array(indexCount);\n\t\t\t\t\tbreak;\n\t\t\t\tcase IndexFormat.UInt16:\n\t\t\t\t\tthis._buffer = new Uint16Array(indexCount);\n\t\t\t\t\tbreak;\n\t\t\t\tcase IndexFormat.UInt8:\n\t\t\t\t\tthis._buffer = new Uint8Array(indexCount);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 设置数据。\n\t * @param\tdata 索引数据。\n\t * @param\tbufferOffset 索引缓冲中的偏移。\n\t * @param\tdataStartIndex 索引数据的偏移。\n\t * @param\tdataCount 索引数据的数量。\n\t */\n\tsetData(data: any, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = 4294967295/*uint.MAX_VALUE*/): void {\n\t\tvar byteCount: number = this._indexTypeByteCount;\n\t\tif (dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\n\t\t\tswitch (this._indexType) {\n\t\t\t\tcase IndexFormat.UInt32:\n\t\t\t\t\tdata = new Uint32Array(data.buffer, dataStartIndex * byteCount, dataCount);\n\t\t\t\t\tbreak;\n\t\t\t\tcase IndexFormat.UInt16:\n\t\t\t\t\tdata = new Uint16Array(data.buffer, dataStartIndex * byteCount, dataCount);\n\t\t\t\t\tbreak;\n\t\t\t\tcase IndexFormat.UInt8:\n\t\t\t\t\tdata = new Uint8Array(data.buffer, dataStartIndex * byteCount, dataCount);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._setIndexData(data, bufferOffset * byteCount);\n\n\t\tif (this._canRead) {\n\t\t\tif (bufferOffset !== 0 || dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\n\t\t\t\tvar maxLength: number = this._buffer.length - bufferOffset;\n\t\t\t\tif (dataCount > maxLength)\n\t\t\t\t\tdataCount = maxLength;\n\t\t\t\tif (typeof data == typeof this._buffer && data.length == dataCount)\n\t\t\t\t\tthis._buffer.set(data, bufferOffset);\n\t\t\t\telse\n\t\t\t\t\tfor (var i: number = 0; i < dataCount; i++)\n\t\t\t\t\t\tthis._buffer[bufferOffset + i] = data[i];\n\t\t\t} else {\n\t\t\t\tthis._buffer = data;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 获取索引数据。\n\t * @return\t索引数据。\n\t */\n\tgetData(): Uint16Array {\n\t\tif (this._canRead)\n\t\t\treturn <Uint16Array>this._buffer;\n\t\telse\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tdestroy(): void {\n\t\tsuper.destroy();\n\t\tthis._buffer = null;\n\t\tthis._byteLength = 0;\n\t\tthis._indexCount = 0;\n\t}\n\n}\n\n\n","import { BufferTargetType, BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { VertexBuffer } from \"../../RenderEngine/VertexBuffer\";\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\";\n\n\n/**\n * @internal\n * 请使用LayaGL.RenderOBJCreate.createIndexBuffer3D来创建\n * <code>VertexBuffer3D</code> 类用于创建顶点缓冲。\n */\nexport class VertexBuffer3D extends VertexBuffer {\n\n\t/** @internal */\n\tprotected _canRead: boolean;\n\n\n\t/** @internal */\n\t_float32Reader: Float32Array | null = null;\n\n\t/**\n\t * 获取顶点声明。\n\t */\n\tget vertexDeclaration(): VertexDeclaration | null {\n\t\treturn this._vertexDeclaration;\n\t}\n\n\tset vertexDeclaration(value: VertexDeclaration | null) {\n\t\tthis._vertexDeclaration = value;\n\t}\n\n\t/**\n\t * 是否可读。\n\t */\n\tget canRead(): boolean {\n\t\treturn this._canRead;\n\t}\n\n\t/**\n\t * 创建一个 <code>VertexBuffer3D</code> 实例。\n\t * @param\tbyteLength 字节长度。\n\t * @param\tbufferUsage VertexBuffer3D用途类型。\n\t * @param\tcanRead 是否可读。\n\t */\n\tconstructor(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\n\t\tsuper(BufferTargetType.ARRAY_BUFFER, bufferUsage);\n\t\tthis._canRead = canRead;\n\t\tthis._byteLength = byteLength;\n\t\tthis.bind();\n\t\tthis._glBuffer.setDataLength(byteLength)\n\t\tif (this._canRead) {\n\t\t\tthis._buffer = new Uint8Array(byteLength);\n\t\t\tthis._float32Reader = new Float32Array(this._buffer.buffer);\n\t\t}\n\t}\n\n\t/**\n\t * 剥离内存块存储。\n\t */\n\torphanStorage(): void {\n\t\tthis.bind();\n\t\tthis._glBuffer.setDataLength(this._byteLength);\n\t}\n\n\t/**\n\t * 设置数据。\n\t * @param\tdata 顶点数据。\n\t * @param\tbufferOffset 顶点缓冲中的偏移,以字节为单位。\n\t * @param\tdataStartIndex 顶点数据的偏移,以字节为单位。\n\t * @param\tdataCount 顶点数据的长度,以字节为单位。\n\t */\n\tsetData(buffer: ArrayBuffer, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = Number.MAX_SAFE_INTEGER): void {\n\t\tthis.bind();\n\t\tvar needSubData: boolean = dataStartIndex !== 0 || dataCount !== Number.MAX_SAFE_INTEGER;\n\t\tif (needSubData) {\n\t\t\tvar subData: Uint8Array = new Uint8Array(buffer, dataStartIndex, dataCount);\n\t\t\tthis._glBuffer.setData(subData, bufferOffset);\n\t\t\tif (this._canRead)\n\t\t\t\tthis._buffer.set(subData, bufferOffset);\n\t\t}\n\t\telse {\n\t\t\tthis._glBuffer.setData(buffer, bufferOffset);\n\t\t\tif (this._canRead)\n\t\t\t\tthis._buffer.set(new Uint8Array(buffer), bufferOffset);\n\t\t}\n\t}\n\n\t/**\n\t * 获取顶点数据。\n\t * @return\t顶点数据。\n\t */\n\tgetUint8Data(): Uint8Array {\n\t\tif (this._canRead)\n\t\t\treturn <Uint8Array>this._buffer;\n\t\telse\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tgetFloat32Data(): Float32Array | null {\n\t\tif (this._canRead)\n\t\t\treturn this._float32Reader;\n\t\telse\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tmarkAsUnreadbale(): void {\n\t\tthis._canRead = false;\n\t\tthis._buffer = null;\n\t\tthis._float32Reader = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tdestroy(): void {\n\t\tsuper.destroy();\n\t\tthis._buffer = null;\n\t\tthis._float32Reader = null;\n\t\tthis._vertexDeclaration = null;\n\t\tthis._byteLength = 0;\n\t}\n}\n\n\n\n\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { IClone } from \"../../utils/IClone\";\nimport { BoundBox } from \"./BoundBox\";\n\n/**\n * <code>BoundsImp</code> 类用于创建包围体。\n */\nexport class BoundsImpl implements IClone {\n    /**@internal */\n    static _UPDATE_MIN: number = 0x01;\n    /**@internal */\n    static _UPDATE_MAX: number = 0x02;\n    /**@internal */\n    static _UPDATE_CENTER: number = 0x04;\n    /**@internal */\n    static _UPDATE_EXTENT: number = 0x08;\n\n    protected _updateFlag: number = 0;\n\n    /**@internal\t*/\n    _center: Vector3 = new Vector3();\n    /**@internal\t*/\n    _extent: Vector3 = new Vector3();\n    /***/\n    _boundBox: BoundBox = new BoundBox(new Vector3(), new Vector3());\n\n    get min() {\n        return this.getMin();\n    }\n\n    set min(value: Vector3) {\n        this.setMin(value);\n    }\n\n    get max() {\n        return this.getMax();\n    }\n\n    set max(value: Vector3) {\n        this.setMax(value);\n    }\n\n    /**\n     * 设置包围盒的最小点。\n     * @param value\t包围盒的最小点。\n     */\n    setMin(value: Vector3): void {\n        var min: Vector3 = this._boundBox.min;\n        if (value !== min)\n            value.cloneTo(min);\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\n    }\n\n    /**\n     * 获取包围盒的最小点。\n     * @return\t包围盒的最小点。\n     */\n    getMin(): Vector3 {\n        var min: Vector3 = this._boundBox.min;\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_MIN)) {\n            this._getMin(this.getCenter(), this.getExtent(), min);\n            this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\n        }\n        return min;\n    }\n\n    /**\n     * 设置包围盒的最大点。\n     * @param value\t包围盒的最大点。\n     */\n    setMax(value: Vector3): void {\n        var max: Vector3 = this._boundBox.max;\n        if (value !== max)\n            value.cloneTo(max);\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\n        this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\n    }\n\n    /**\n     * 获取包围盒的最大点。\n     * @return\t包围盒的最大点。\n     */\n    getMax(): Vector3 {\n        var max: Vector3 = this._boundBox.max;\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_MAX)) {\n            this._getMax(this.getCenter(), this.getExtent(), max);\n            this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\n        }\n        return max;\n    }\n\n    /**\n     * 设置包围盒的中心点。\n     * @param value\t包围盒的中心点。\n     */\n    setCenter(value: Vector3): void {\n        if (value !== this._center)\n            value.cloneTo(this._center);\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN | BoundsImpl._UPDATE_MAX, true);\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER, false);\n    }\n\n    /**\n     * 获取包围盒的中心点。\n     * @return\t包围盒的中心点。\n     */\n    getCenter(): Vector3 {\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_CENTER)) {\n            this._getCenter(this.getMin(), this.getMax(), this._center);\n            this._setUpdateFlag(BoundsImpl._UPDATE_CENTER, false);\n        }\n        return this._center;\n    }\n\n    /**\n     * 设置包围盒的范围。\n     * @param value\t包围盒的范围。\n     */\n    setExtent(value: Vector3): void {\n        if (value !== this._extent)\n            value.cloneTo(this._extent);\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN | BoundsImpl._UPDATE_MAX, true);\n        this._setUpdateFlag(BoundsImpl._UPDATE_EXTENT, false);\n    }\n\n    /**\n     * 获取包围盒的范围。\n     * @return\t包围盒的范围。\n     */\n    getExtent(): Vector3 {\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_EXTENT)) {\n            this._getExtent(this.getMin(), this.getMax(), this._extent);\n            this._setUpdateFlag(BoundsImpl._UPDATE_EXTENT, false);\n        }\n        return this._extent;\n    }\n\n    /**\n     * 创建一个 <code>BoundsImp</code> 实例。\n     * @param\tmin  min 最小坐标\n     * @param\tmax  max 最大坐标。\n     */\n    constructor(min?: Vector3, max?: Vector3) {\n        min && min.cloneTo(this._boundBox.min);\n        max && max.cloneTo(this._boundBox.max);\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\n    }\n\n    protected _getUpdateFlag(type: number): boolean {\n        return (this._updateFlag & type) != 0;\n    }\n\n\n    protected _setUpdateFlag(type: number, value: boolean): void {\n        if (value)\n            this._updateFlag |= type;\n        else\n            this._updateFlag &= ~type;\n    }\n\n\n    protected _getCenter(min: Vector3, max: Vector3, out: Vector3): void {\n        Vector3.add(min, max, out);\n        Vector3.scale(out, 0.5, out);\n    }\n\n\n    protected _getExtent(min: Vector3, max: Vector3, out: Vector3): void {\n        Vector3.subtract(max, min, out);\n        Vector3.scale(out, 0.5, out);\n    }\n\n\n    protected _getMin(center: Vector3, extent: Vector3, out: Vector3): void {\n        Vector3.subtract(center, extent, out);\n    }\n\n\n    protected _getMax(center: Vector3, extent: Vector3, out: Vector3): void {\n        Vector3.add(center, extent, out);\n    }\n\n    protected _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\n        var extentsX: number = extents.x;\n        var extentsY: number = extents.y;\n        var extentsZ: number = extents.z;\n        var matE: Float32Array = rotation.elements;\n        out.x = Math.abs(matE[0] * extentsX) + Math.abs(matE[4] * extentsY) + Math.abs(matE[8] * extentsZ);\n        out.y = Math.abs(matE[1] * extentsX) + Math.abs(matE[5] * extentsY) + Math.abs(matE[9] * extentsZ);\n        out.z = Math.abs(matE[2] * extentsX) + Math.abs(matE[6] * extentsY) + Math.abs(matE[10] * extentsZ);\n    }\n\n    /**\n     * @internal\n     */\n    _tranform(matrix: Matrix4x4, out: BoundsImpl): void {\n        var outCen: Vector3 = out._center;\n        var outExt: Vector3 = out._extent;\n\n        Vector3.transformCoordinate(this.getCenter(), matrix, outCen);\n        this._rotateExtents(this.getExtent(), matrix, outExt);\n\n        out._boundBox.setCenterAndExtent(outCen, outExt);\n        out._updateFlag = 0;\n    }\n\n    /**\n     * @internal\n     */\n    _getBoundBox(): BoundBox {\n        if (this._updateFlag & BoundsImpl._UPDATE_MIN) {\n            var min: Vector3 = this._boundBox.min;\n            this._getMin(this.getCenter(), this.getExtent(), min);\n            this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\n        }\n        if (this._updateFlag & BoundsImpl._UPDATE_MAX) {\n            var max: Vector3 = this._boundBox.max;\n            this._getMax(this.getCenter(), this.getExtent(), max);\n            this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\n        }\n        return this._boundBox;\n    }\n\n    /**\n     * @returns -1为不相交 不为0的时候返回值为相交体积\n     */\n    calculateBoundsintersection(bounds: BoundsImpl): number {\n        var ownMax: Vector3 = this.getMax();\n        var ownMin: Vector3 = this.getMin();\n        var calMax: Vector3 = bounds.getMax();\n        var calMin: Vector3 = bounds.getMin();\n        var tempV0: Vector3 = TEMP_VECTOR3_MAX0;\n        var tempV1: Vector3 = TEMP_VECTOR3_MAX1;\n        var thisExtends: Vector3 = this.getExtent();\n        var boundExtends: Vector3 = bounds.getExtent();\n        tempV0.setValue(Math.max(ownMax.x, calMax.x) - Math.min(ownMin.x, calMin.x),\n            Math.max(ownMax.y, calMax.y) - Math.min(ownMin.y, calMin.y),\n            Math.max(ownMax.z, calMax.z) - Math.min(ownMin.z, calMin.z));\n        tempV1.setValue((thisExtends.x + boundExtends.x) * 2.0,\n            (thisExtends.y + boundExtends.y) * 2.0,\n            (thisExtends.z + boundExtends.z) * 2.0);\n        if ((tempV0.x) > (tempV1.x)) return -1;\n        if ((tempV0.y) > (tempV1.y)) return -1;\n        if ((tempV0.z) > (tempV1.z)) return -1;\n        return (tempV1.x - tempV0.x) * (tempV1.y - tempV0.y) * (tempV1.z - tempV0.z);\n    }\n\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        var destBounds: BoundsImpl = (<BoundsImpl>destObject);\n        this.getMin().cloneTo(destBounds._boundBox.min);\n        this.getMax().cloneTo(destBounds._boundBox.max);\n        this.getCenter().cloneTo(destBounds._center);\n        this.getExtent().cloneTo(destBounds._extent);\n        destBounds._updateFlag = 0;\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: BoundsImpl = new BoundsImpl(new Vector3(), new Vector3());\n        this.cloneTo(dest);\n        return dest;\n    }\n}\n\nconst TEMP_VECTOR3_MAX0 = new Vector3();\nconst TEMP_VECTOR3_MAX1 = new Vector3();","import { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\nimport { Transform3D } from \"../../core/Transform3D\";\nimport { Bounds } from \"../../math/Bounds\";\n\n\nexport class BaseRenderNode implements IBaseRenderNode {\n   \n    /**@interanl */\n    boundsChange: boolean;\n    /**@internal ID */\n    renderId: number;\n    /**@internal Shadow Mode */\n    receiveShadow: boolean;\n    /**@internal shadow mode */\n    castShadow: boolean;\n    /**@internal 包围盒 */\n    bounds: Bounds;\n    /**@internal 排序矫正值 */\n    sortingFudge: number;\n    /**@internal 距离矫正 */\n    distanceForSort: number;\n    /**@internal transform3D */\n    transform: Transform3D;\n    /**@internal baseRender */\n    owner: BaseRender | null;\n    /**@internal TODO Base Bounds/can update Bounds by transform*GeometryBounds*/\n    geometryBounds: Bounds | null;\n    /**@internal layer */\n    layer:number;\n    /**@internal */\n    renderbitFlag:number;\n    /**@internal */\n    staticMask: number;\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { RenderElement } from \"../../core/render/RenderElement\";\nimport { SubMeshInstanceBatch } from \"../SubMeshInstanceBatch\";\nimport { InstanceBatchManager } from \"./InstanceBatchManager\";\nimport { InstanceRenderElement } from \"../../core/render/InstanceRenderElement\";\nimport { MeshInstanceGeometry } from \"../MeshInstanceGeometry\";\nimport { SubMesh } from \"../../resource/models/SubMesh\";\nimport { Config3D } from \"../../../../Config3D\";\n\n/**\n * @internal\n */\nexport class RenderElementBatch {\n    static instance: RenderElementBatch;\n    private _instanceBatchManager: InstanceBatchManager;\n    private _recoverList: SingletonList<InstanceRenderElement>;\n    constructor() {\n        RenderElementBatch.instance = this;\n        this._instanceBatchManager = InstanceBatchManager.instance;\n        this._recoverList = new SingletonList();\n    }\n\n    /**\n     * after batchRender\n     */\n    recoverData() {\n        let elements = this._recoverList.elements;\n        for (let i = 0, n = this._recoverList.length; i < n; i++) {\n            let element = elements[i];\n            element.recover();\n        }\n        this._recoverList.length = 0;\n    }\n\n    /**\n     * BatchData\n     * @param elements \n     */\n    batch(elements: SingletonList<RenderElement>) {\n        let len = elements.length;\n        elements.length = 0;\n        this._instanceBatchManager.updateCountMark++;//每个批次是一个新的标签，保证更新不重复\n        let elementArray = elements.elements;\n        for (var i = 0; i < len; i++) {\n            let element = elements.elements[i];\n            if (!element._canBatch) {\n                elements.add(element);\n                continue;\n            }\n            if (element.staticBatch && (!element.render._probReflection || element.render._probReflection._isScene) && Config3D.enableStaticBatch) {\n                //static Batch TODO\n                elements.add(element);\n            }\n            else if (Config3D.enableDynamicBatch && LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance)) {\n                if (element.renderSubShader._owner._enableInstancing && element.render.lightmapIndex < 0) {\n                    var insManager = this._instanceBatchManager;\n                    var insBatchMarks = insManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\n                    if (insManager.updateCountMark === insBatchMarks.updateMark) {\n                        //can batch\n                        var insBatchIndex: number = insBatchMarks.indexInList;\n                        var insOriElement: RenderElement = elementArray[insBatchIndex];\n                        if (insBatchMarks.batched) {\n                            var instanceelements: SingletonList<RenderElement> = (insOriElement as InstanceRenderElement)._instanceBatchElementList;\n                            if (instanceelements.length === SubMeshInstanceBatch.maxInstanceCount) {\n                                insBatchMarks.updateMark = insManager.updateCountMark;\n                                insBatchMarks.indexInList = elements.length;\n                                insBatchMarks.batched = false;\n                                elements.add(element);\n                            } else {\n                                instanceelements.add(element);\n                            }\n                        } else {\n                            //替换Elements中的RenderElement为InstanceElement\n                            let instanceRenderElement = InstanceRenderElement.create();\n                            this._recoverList.add(instanceRenderElement);\n                            instanceRenderElement.render = insOriElement.render;\n                            instanceRenderElement.renderType = RenderElement.RENDERTYPE_INSTANCEBATCH;\n                            //Geometry updaste\n                            (instanceRenderElement._geometry as MeshInstanceGeometry).subMesh = (insOriElement._geometry as SubMesh);\n                            instanceRenderElement.material = insOriElement.material;\n                            instanceRenderElement.setTransform(null);\n                            instanceRenderElement.renderSubShader = insOriElement.renderSubShader;\n                            let list = instanceRenderElement._instanceBatchElementList;\n                            list.length = 0;\n                            list.add(insOriElement);\n                            list.add(element);\n                            elementArray[insBatchIndex] = instanceRenderElement;\n                            insBatchMarks.batched = true;\n                            instanceRenderElement._isUpdataData = true;\n                        }\n                    } else {\n                        insBatchMarks.updateMark = insManager.updateCountMark;\n                        insBatchMarks.indexInList = elements.length;\n                        insBatchMarks.batched = false;\n                        elements.add(element);\n                    }\n                } else\n                    elements.add(element);\n            }\n            else\n                elements.add(element);\n        }\n    }\n}","import { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { Camera } from \"../../core/Camera\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { RenderElement } from \"../../core/render/RenderElement\";\nimport { RenderElementBatch } from \"../../graphics/Batch/RenderElementBatch\";\n\nexport class BaseRenderQueue implements IRenderQueue {\n    /** @interanl */\n    _isTransparent: boolean = false;\n    /** @internal */\n    elements: SingletonList<RenderElement> = new SingletonList<RenderElement>();\n    /**sort function*/\n    _sortPass: ISortPass;\n    /** context*/\n    _context: IRenderContext3D;\n\n    _batch: RenderElementBatch;\n\n    set sortPass(value: ISortPass) {\n        this._sortPass = value;\n    }\n    constructor(isTransparent: boolean) {\n        this._isTransparent = isTransparent;\n        this._batch = RenderElementBatch.instance ? RenderElementBatch.instance : new RenderElementBatch();\n    }\n\n\n    set context(value: RenderContext3D) {\n        this._context = value._contextOBJ;\n    }\n\n    addRenderElement(renderelement: RenderElement) {\n        this.elements.add(renderelement);\n    }\n\n    clear(): void {\n        this.elements.length = 0;\n    }\n\n    renderQueue(context: RenderContext3D): number {\n        this.context = context;\n        this._context.applyContext(Camera._updateMark);\n\n        var elements: RenderElement[] = this.elements.elements;\n\n        this._batchQueue();//合并的地方\n        for (var i: number = 0, n = this.elements.length; i < n; i++) {\n            elements[i]._renderUpdatePre(context);//Update Data\n        }\n        //更新所有大buffer数据 nativeTODO\n\n        this._sort();\n        for (var i: number = 0, n: number = this.elements.length; i < n; i++)\n            elements[i]._render(this._context);//Update Data\n        BufferState._curBindedBufferState && BufferState._curBindedBufferState.unBind();\n        this._batch.recoverData();\n        return n;\n    }\n\n    private _batchQueue() {\n        this._isTransparent || this._batch.batch(this.elements);\n    }\n\n    private _sort() {\n        var count: number = this.elements.length;\n        this._sortPass.sort(this.elements, this._isTransparent, 0, count - 1);\n    }\n\n    destroy(): void {\n        this.elements.destroy();\n    }\n}","import { Vector3 } from \"../../../maths/Vector3\";\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\n\n\n/**\n * camera裁剪数据\n */\nexport class CameraCullInfo implements ICameraCullInfo {\n\t/**位置 */\n\tposition: Vector3;\n\t/**是否遮挡剔除 */\n\tuseOcclusionCulling: Boolean;\n\t/**锥体包围盒 */\n\tboundFrustum: BoundFrustum;\n\t/**遮挡标记 */\n\tcullingMask: number;\n\t/**静态标记 */\n\tstaticMask: number;\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { Transform3D } from \"../../core/Transform3D\";\n\n\nexport class RenderElementOBJ implements IRenderElement {\n\n    _geometry: IRenderGeometryElement;\n\n    _shaderInstances: SingletonList<ShaderInstance>;\n\n    _materialShaderData: ShaderData;\n\n    _renderShaderData: ShaderData;\n\n    _transform: Transform3D;\n\n    _isRender: boolean;\n\n    _owner: IBaseRenderNode;\n\n    _invertFront: boolean;\n\n    constructor() {\n        this._shaderInstances = new SingletonList();\n    }\n\n    _addShaderInstance(shader: ShaderInstance) {\n        this._shaderInstances.add(shader);\n    }\n\n    _clearShaderInstance() {\n        this._shaderInstances.length = 0;\n    }\n\n    /**\n     * render RenderElement\n     * @param renderqueue \n     */\n    _render(context: IRenderContext3D): void {\n        var forceInvertFace: boolean = context.invertY;\n        var updateMark: number = context.cameraUpdateMark;\n        var sceneID = context.sceneID;\n        var sceneShaderData: ShaderData = context.sceneShaderData;\n        var cameraShaderData: ShaderData = context.cameraShaderData;\n        if (this._isRender) {\n            var passes: ShaderInstance[] = this._shaderInstances.elements;\n            for (var j: number = 0, m: number = this._shaderInstances.length; j < m; j++) {\n                const shaderIns: ShaderInstance = passes[j];\n                if(!shaderIns.complete)\n                    continue;\n                var switchShader: boolean = shaderIns.bind();\n                var switchUpdateMark: boolean = (updateMark !== shaderIns._uploadMark);\n                var uploadScene: boolean = (shaderIns._uploadScene !== sceneID) || switchUpdateMark;\n                //Scene\n                if (uploadScene || switchShader) {\n                    sceneShaderData && shaderIns.uploadUniforms(shaderIns._sceneUniformParamsMap, sceneShaderData, uploadScene);\n                    shaderIns._uploadScene = sceneID;\n                }\n                //render\n                if (this._renderShaderData) {\n                    var uploadSprite3D: boolean = (shaderIns._uploadRender !== this._renderShaderData) || switchUpdateMark;\n                    if (uploadSprite3D || switchShader) {\n                        shaderIns.uploadUniforms(shaderIns._spriteUniformParamsMap, this._renderShaderData, uploadSprite3D);\n                        shaderIns._uploadRender = this._renderShaderData;\n                    }\n                }\n                //camera\n                var uploadCamera: boolean = shaderIns._uploadCameraShaderValue !== cameraShaderData || switchUpdateMark;\n                if (uploadCamera || switchShader) {\n                    cameraShaderData && shaderIns.uploadUniforms(shaderIns._cameraUniformParamsMap, cameraShaderData, uploadCamera);\n                    shaderIns._uploadCameraShaderValue = cameraShaderData;\n                }\n                //material\n                var uploadMaterial: boolean = (shaderIns._uploadMaterial !== this._materialShaderData) || switchUpdateMark;\n                if (uploadMaterial || switchShader) {\n                    shaderIns.uploadUniforms(shaderIns._materialUniformParamsMap, this._materialShaderData, uploadMaterial);\n                    shaderIns._uploadMaterial = this._materialShaderData;\n                    //GlobalData\n                    context.globalShaderData && shaderIns.uploadUniforms(shaderIns._materialUniformParamsMap, context.globalShaderData, uploadMaterial);\n                }\n                //renderData update\n                //TODO：Renderstate as a Object to less upload\n                shaderIns.uploadRenderStateBlendDepth(this._materialShaderData);\n                shaderIns.uploadRenderStateFrontFace(this._materialShaderData, forceInvertFace, this._invertFront);\n                this.drawGeometry(shaderIns);\n            }\n        }\n    }\n\n    drawGeometry(shaderIns: ShaderInstance) {\n        LayaGL.renderDrawContext.drawGeometryElement(this._geometry);\n    }\n\n    _destroy() {\n        this._geometry = null;\n        this._shaderInstances = null;\n        this._materialShaderData = null;\n        this._renderShaderData = null;\n        this._transform = null;\n        this._isRender = null;\n    }\n}","\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\n\nexport class InstanceRenderElementOBJ extends RenderElementOBJ {\n\n    /**@internal 当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据*/\n    private _vertexBuffer3D: Array<VertexBuffer3D> = [];\n\n    private _updateData: Array<Float32Array> = [];\n\n    private _updateDataNum: Array<number> = [];\n\n    drawCount: number;\n\n    updateNums: number;\n\n    /**\n     * 增加UpdateBuffer\n     * @param vb \n     * @param length 每个instance属性的数据长度\n     */\n    addUpdateBuffer(vb: VertexBuffer3D,length:number) {\n        this._vertexBuffer3D[this.updateNums] = vb;\n        this._updateDataNum[this.updateNums++] = length;\n    }\n\n    /**\n     * \n     * @param index index of Buffer3D\n     * @param length length of array\n     */\n    getUpdateData(index: number,length:number): Float32Array {\n        let data = this._updateData[index];\n        if (!data || data.length < length) {\n            data = this._updateData[index] = new Float32Array(length);\n        }\n        return data;\n    }\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * draw geometry\n     * @param shaderIns \n     */\n    drawGeometry(shaderIns: ShaderInstance) {\n        //当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据\n        let data: Float32Array;\n        let buffer: VertexBuffer3D;\n        for (let i = 0; i < this.updateNums; i++) {\n            buffer = this._vertexBuffer3D[i];\n            if (!buffer) break;\n            data = this._updateData[i];\n            buffer.orphanStorage();\n            buffer.setData(data.buffer, 0, 0, this.drawCount * this._updateDataNum[i] * 4);\n        }\n        LayaGL.renderDrawContext.drawGeometryElement(this._geometry);\n    }\n\n    clear() {\n        this.updateNums = 0;\n    }\n}","import { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { RenderElement } from \"../../core/render/RenderElement\";\n\n\n\nexport class QuickSort implements ISortPass{\n    private elementArray:SingletonList<RenderElement>;\n    private isTransparent:boolean;\n\n    sort(elements: SingletonList<RenderElement>,isTransparent:boolean, left: number, right: number): void {\n        this.elementArray = elements;\n        this.isTransparent = isTransparent;\n        this._quickSort(left,right);\n    }\n\n    /**\n\t * @internal\n\t */\n\t_quickSort(left: number, right: number): void {\n\t\tif (this.elementArray.length > 1) {\n\t\t\tvar index: number = this._partitionRenderObject(left, right);\n\t\t\tvar leftIndex: number = index - 1;\n\t\t\tif (left < leftIndex)\n\t\t\t\tthis._quickSort(left, leftIndex);\n\n\t\t\tif (index < right)\n\t\t\t\tthis._quickSort(index, right);\n\t\t}\n\t}\n\n    \n\t/**\n\t * @internal\n\t */\n\tprivate _partitionRenderObject(left: number, right: number): number {\n\t\tvar elements: RenderElement[] = this.elementArray.elements;\n\t\tvar pivot: RenderElement = elements[Math.floor((right + left) / 2)];\n\t\twhile (left <= right) {\n\t\t\twhile (this._compare(elements[left], pivot) < 0)\n\t\t\t\tleft++;\n\t\t\twhile (this._compare(elements[right], pivot) > 0)\n\t\t\t\tright--;\n\t\t\tif (left < right) {\n\t\t\t\tvar temp: RenderElement = elements[left];\n\t\t\t\telements[left] = elements[right];\n\t\t\t\telements[right] = temp;\n\t\t\t\tleft++;\n\t\t\t\tright--;\n\t\t\t} else if (left === right) {\n\t\t\t\tleft++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn left;\n\t}\n\n    /**\n\t * @internal\n\t */\n\tprivate _compare(left: RenderElement, right: RenderElement): number {\n\t\tvar renderQueue: number = left.material.renderQueue - right.material.renderQueue;\n\t\tif (renderQueue === 0) {\n\t\t\tvar sort: number = this.isTransparent ? right.render.distanceForSort - left.render.distanceForSort : left.render.distanceForSort - right.render.distanceForSort;\n\t\t\treturn sort + right.render.sortingFudge - left.render.sortingFudge;\n\t\t} else {\n\t\t\treturn renderQueue;\n\t\t}\n\t}\n\n}","\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { IRenderTarget } from \"../../../RenderEngine/RenderInterface/IRenderTarget\";\nimport { IRenderContext3D, PipelineMode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { Viewport } from \"../../math/Viewport\";\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\n\nexport class RenderContext3DOBJ implements IRenderContext3D {\n\n    //dest Texture\n    destTarget: IRenderTarget;\n    //viewPort\n    viewPort: Viewport;\n    //scissor\n    scissor: Vector4;\n    //is invert Y\n    invertY: boolean = false;\n    //pipeLineMode\n    pipelineMode: PipelineMode;\n    //Camera Shader Data\n    cameraShaderData: ShaderData;\n    //Scene cache\n    sceneID: number;\n    //scene Shader Data\n    sceneShaderData: ShaderData;\n    //Camera Update Mark\n    cameraUpdateMark: number;\n    //Global ShaderData\n    globalShaderData: ShaderData;\n\n    constructor() {\n        this.viewPort = new Viewport(0, 0, 0, 0);\n        this.scissor = new Vector4();\n        this.pipelineMode = \"Forward\";\n    }\n\n    /**设置IRenderContext */\n    applyContext(cameraUpdateMark: number): void {\n        this.destTarget && this.destTarget._start();\n        this.cameraUpdateMark = cameraUpdateMark;\n        LayaGL.renderEngine.viewport(this.viewPort.x, this.viewPort.y, this.viewPort.width, this.viewPort.height);\n        LayaGL.renderEngine.scissor(this.scissor.x, this.scissor.y, this.scissor.z, this.scissor.w);\n    }\n\n    drawRenderElement(renderelemt: RenderElementOBJ): void {\n        renderelemt._render(this);\n    }\n}","import { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\n\n\nexport class RenderGeometryElementOBJ implements IRenderGeometryElement {\n  /**@internal */\n  bufferState: BufferState;\n\n  /**@internal */\n  mode: MeshTopology;\n\n  /**@internal */\n  drawType: DrawType;\n\n  /**@internal */\n  drawParams: SingletonList<number>;\n\n  /**@internal */\n  instanceCount: number;\n\n  /**@internal */\n  indexFormat: IndexFormat;\n\n  /**@internal */\n  constructor(mode: MeshTopology, drawType: DrawType) {\n    this.mode = mode;\n    this.drawParams = new SingletonList();\n    this.drawType = drawType;\n  }\n\n  /**@internal */\n  setDrawArrayParams(first: number, count: number): void {\n    this.drawParams.add(first);\n    this.drawParams.add(count);\n  }\n\n  /**@internal */\n  setDrawElemenParams(count: number, offset: number): void {\n    this.drawParams.add(offset);\n    this.drawParams.add(count);\n  }\n  \n  /**@internal */\n  destroy(): void {\n    \n  }\n\n  clearRenderParams() {\n    this.drawParams.length = 0;\n  }\n}","import { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\n\n\nexport class SceneRenderManagerOBJ implements ISceneRenderManager {\n    /** @internal */\n    _renders: SingletonList<BaseRender> = new SingletonList();\n    _motionRenders: SingletonList<BaseRender> = new SingletonList();\n    constructor() {\n\n    }\n\n    get list() {\n        return this._renders;\n    }\n\n    set list(value) {\n        this._renders = value;\n    }\n\n    addRenderObject(object: BaseRender): void {\n        this._renders.add(object);\n    }\n    removeRenderObject(object: BaseRender): void {\n        this._renders.remove(object);\n        this.removeMotionObject(object);\n    }\n\n    removeMotionObject(object: BaseRender): void {\n        let index = object._motionIndexList;\n        if (index != -1) {//remove\n            let elements = this._motionRenders.elements;\n            this._motionRenders.length -= 1;\n            elements[length]._motionIndexList = index;\n            elements[index] = elements[length];\n        }\n\n        //TODO\n    }\n    updateMotionObjects(): void {\n        for (let i = 0; i < this._motionRenders.length; i++) {\n            this._motionRenders.elements[i].bounds;\n            this._motionRenders.elements[i]._motionIndexList = -1;\n        }\n        this._motionRenders.length = 0;\n\n        //TODO\n    }\n    addMotionObject(object: BaseRender): void {\n        if (object._motionIndexList == -1) {\n            object._motionIndexList = this._motionRenders.length;\n            this._motionRenders.add(object);\n        }\n\n        //TODO\n    }\n    destroy(): void {\n        this._renders.destroy();\n    }\n\n}","import { Vector3 } from \"../../../maths/Vector3\";\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { BoundSphere } from \"../../math/BoundSphere\";\nimport { Plane } from \"../../math/Plane\";\n\nexport class ShadowCullInfo implements IShadowCullInfo {\n    position: Vector3;\n    cullPlanes: Plane[];\n    cullSphere: BoundSphere;\n    cullPlaneCount: number;\n    direction: Vector3;\n}","\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\nimport { SkinnedMeshSprite3D } from \"../../core/SkinnedMeshSprite3D\";\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\n\nexport class SkinRenderElementOBJ extends RenderElementOBJ {\n    \n    skinnedData:Float32Array[];\n\n    constructor(){\n        super();\n    }\n\n    /** 更新数据并且 */\n    drawGeometry(shaderIns:ShaderInstance){\n        let length = this._shaderInstances.length;\n        let element =this._geometry.drawParams.elements;\n        if(!this.skinnedData)\n            return;\n        this._geometry.bufferState.bind();\n        for (var i: number = 0, n: number =length; i < n; i++) {\n            for(var j = 0,m = this._geometry.drawParams.length/2;j<m;j++){\n                var subSkinnedDatas: Float32Array = this.skinnedData[j];\n                shaderIns.uploadCustomUniform(SkinnedMeshSprite3D.BONES,subSkinnedDatas);\n                var offset = j*2;\n                LayaGL.renderDrawContext.drawElements(this._geometry.mode,element[offset+1],this._geometry.indexFormat,element[offset]);\n            }\n        }\n    }\n}","\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { IRenderOBJCreate } from \"../../../RenderEngine/RenderInterface/IRenderOBJCreate\";\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\nimport { RenderStateCommand } from \"../../../RenderEngine/RenderStateCommand\";\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\nimport { ShaderCompileDefineBase } from \"../../../webgl/utils/ShaderCompileDefineBase\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Transform3D } from \"../../core/Transform3D\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { BoundsImpl } from \"../../math/BoundsImpl\";\nimport { BaseRenderNode } from \"./BaseRenderNode\";\nimport { BaseRenderQueue } from \"./BaseRenderQueue\";\nimport { CameraCullInfo } from \"./CameraCullInfo\";\nimport { CullPassBase } from \"./CullPass\";\nimport { InstanceRenderElementOBJ } from \"./InstanceRenderElementOBJ\";\nimport { QuickSort } from \"./QuickSort\";\nimport { RenderContext3DOBJ } from \"./RenderContext3DOBJ\";\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\nimport { RenderGeometryElementOBJ } from \"./RenderGeometryElementOBJ\";\nimport { SceneRenderManagerOBJ } from \"./SceneRenderManagerOBJ\";\nimport { ShadowCullInfo } from \"./ShadowCullInfo\";\nimport { SkinRenderElementOBJ } from \"./SkinRenderElementOBJ\";\n\nexport class RenderOBJCreateUtil implements IRenderOBJCreate {\n    \n    /**@internal */\n\tprivate globalBlockMap: any = {};\n\n\t\n    createTransform(owner: Sprite3D): Transform3D {\n        return new Transform3D(owner);\n    }\n\n    createBounds(min: Vector3, max: Vector3): any {\n        return new BoundsImpl(min, max);\n    }\n\n    createShaderData(): ShaderData {\n        return new ShaderData();\n    }\n\n    createRenderElement(): IRenderElement {\n        return new RenderElementOBJ();\n    }\n    createSkinRenderElement(): IRenderElement {\n        return new SkinRenderElementOBJ();\n    }\n    createInstanceRenderElement() {\n        return new InstanceRenderElementOBJ();\n    }\n\n    createBaseRenderQueue(isTransparent: boolean): IRenderQueue {\n        var queue: BaseRenderQueue = new BaseRenderQueue(isTransparent);\n        queue.sortPass = this.createSortPass();\n        return queue;\n    }\n\n    createRenderGeometry(mode: MeshTopology, drayType: DrawType): IRenderGeometryElement {\n        return new RenderGeometryElementOBJ(mode, drayType);\n    }\n\n    createVertexBuffer3D(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\n        return new VertexBuffer3D(byteLength, bufferUsage, canRead);\n    }\n\n    createIndexBuffer3D(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false): IndexBuffer3D {\n        return new IndexBuffer3D(indexType, indexCount, bufferUsage, canRead);\n    }\n\n    createShaderInstance(vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }, shaderPass: ShaderCompileDefineBase): ShaderInstance {\n        return new ShaderInstance(vs, ps, attributeMap, shaderPass);\n    }\n\n    createBaseRenderNode(): IBaseRenderNode {\n        return new BaseRenderNode();\n    }\n\n    createRenderContext3D(): IRenderContext3D {\n        return new RenderContext3DOBJ();\n    }\n\n    createSceneRenderManager(): ISceneRenderManager {\n        return new SceneRenderManagerOBJ();\n    }\n\n    createCullPass(): ICullPass {\n        return new CullPassBase();\n    }\n\n    createSortPass(): ISortPass {\n        return new QuickSort();\n    }\n\n    createShadowCullInfo(): IShadowCullInfo {\n        return new ShadowCullInfo();\n    }\n\n    createCameraCullInfo(): ICameraCullInfo {\n        return new CameraCullInfo();\n    }\n\n    createRenderStateComand(): RenderStateCommand {\n        return new RenderStateCommand();\n    }\n\n    createRenderState(): RenderState {\n        return new RenderState();\n    }\n\n    createUniformBufferObject(glPointer: number, name: string, bufferUsage: BufferUsage, byteLength: number, isSingle: boolean): UniformBufferObject {\n        return new UniformBufferObject(glPointer, name, bufferUsage, byteLength, isSingle);\n    }\n\n    createGlobalUniformMap(blockName: string): CommandUniformMap {\n\t\tlet comMap = this.globalBlockMap[blockName];\n\t\tif (!comMap)\n\t\t\tcomMap = this.globalBlockMap[blockName] = new CommandUniformMap(blockName);;\n\t\treturn comMap;\n\t}\n}","import { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\nimport { Transform3D } from \"../../core/Transform3D\";\nimport { Bounds } from \"../../math/Bounds\";\n\n\nexport class NativeBaseRenderNode implements IBaseRenderNode {\n\n    private _nativeObj: any;\n    private _bounds: Bounds = null;\n    private _geometryBounds: Bounds = null;\n    private _transform: Transform3D = null;\n    constructor() {\n        this._nativeObj = new (window as any).conchRenderNode();\n    }\n    set boundsChange(value: boolean) {\n        this._nativeObj.boundsChange = value;\n    }\n    get boundsChange(): boolean {\n        return this._nativeObj.boundsChange;\n    }\n\n    set layer(value: number) {\n        this._nativeObj.layer = value;\n    }\n\n    get layer(): number {\n        return this._nativeObj.layer;\n    }\n\n    get renderId(): number {\n        return this._nativeObj.renderId;\n    }\n    set renderId(value: number) {\n        this._nativeObj.renderId = value;\n    }\n\n    get receiveShadow(): boolean {\n        return this._nativeObj.receiveShadow;\n    }\n    set receiveShadow(value: boolean) {\n        this._nativeObj.receiveShadow = value;\n    }\n\n    get castShadow(): boolean {\n        return this._nativeObj.castShadow;\n    }\n    set castShadow(value: boolean) {\n        this._nativeObj.castShadow = value;\n    }\n\n    get bounds(): Bounds {\n        return this._bounds;\n    }\n    set bounds(value: Bounds) {\n        this._bounds = value;\n        this._nativeObj.bounds = (value as any)._imp._nativeObj;\n    }\n\n    sortingFudge: number;\n\n    get distanceForSort(): number {\n        return this._nativeObj.distanceForSort;\n    }\n    set distanceForSort(value: number) {\n        this._nativeObj.distanceForSort = value;\n    }\n\n    get transform(): Transform3D {\n        return this._transform;\n    }\n    set transform(value: Transform3D) {\n        this._transform = value;\n        this._nativeObj.transform = value ? (value as any)._nativeObj : null;\n    }\n    \n    get owner(): BaseRender | null {\n        return this._nativeObj.owner;\n    }\n    set owner(value: BaseRender | null) {\n        this._nativeObj.owner = value;\n    }\n\n    get geometryBounds(): Bounds | null {\n        return this._geometryBounds;\n    }\n\n    set geometryBounds(value: Bounds | null) {\n        this._geometryBounds = value;\n        this._nativeObj.geometryBounds = (value as any)._imp._nativeObj;\n    }\n\n    get renderbitFlag(): number {\n        return this._nativeObj.renderbitFlag;\n    }\n    set renderbitFlag(value: number | null) {\n        this._nativeObj.renderbitFlag = value;\n    }\n    get staticMask(): number {\n        return this._nativeObj.staticMask;\n    }\n    set staticMask(value: number | null) {\n        this._nativeObj.staticMask = value;\n    }\n}","import { UploadMemoryManager } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemoryManager\";\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { Camera } from \"../../core/Camera\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { RenderElement } from \"../../core/render/RenderElement\";\nimport { RenderElementBatch } from \"../../graphics/Batch/RenderElementBatch\";\n\n\nexport class NativeBaseRenderQueue implements IRenderQueue {\n   /** @interanl */\n    _isTransparent: boolean = false;\n   /** @internal */\n   elements: SingletonList<RenderElement> = new SingletonList<RenderElement>();\n   /**sort function*/\n   _sortPass: ISortPass;\n   /** context*/\n   _context: IRenderContext3D;\n   _batch: RenderElementBatch;\n    private _nativeObj: any;\n    set sortPass(value: ISortPass) {\n        this._nativeObj.sortPass = value;\n    }\n    constructor(isTransparent: boolean) {\n        this._isTransparent = isTransparent;\n        this._nativeObj = new (window as any).conchRenderQueue(isTransparent);\n \t    this._batch = RenderElementBatch.instance ? RenderElementBatch.instance : new RenderElementBatch();\n    }\n    destroy(): void {\n        this._nativeObj.destroy();\n    }\n\n    set context(value:RenderContext3D){\n        this._context = value._contextOBJ;\n    }\n\n    addRenderElement(renderelement: RenderElement) {\n        this.elements.add(renderelement);\n    }\n\n    clear(): void {\n        this._nativeObj.clear();\n        this.elements.length = 0;\n    }\n\n    renderQueue(context:RenderContext3D):number {\n        this.context = context;\n        this._context.applyContext(Camera._updateMark);\n        \n        var elements: RenderElement[] = this.elements.elements;\n\n\t\tthis._batchQueue();\n        this._nativeObj.clear();\n        for (var i: number = 0, n: number = this.elements.length; i < n; i++){\n            var render_element = elements[i];\n            this._nativeObj.addRenderElement((render_element._renderElementOBJ as any)._nativeObj, \n            (render_element.render.renderNode as any)._nativeObj,\n            render_element.material.renderQueue, \n            render_element.render.sortingFudge);\n            render_element._renderUpdatePre(context);//Update Data\n        }\n\n        UploadMemoryManager.syncRenderMemory();\n\n        BufferState._curBindedBufferState && BufferState._curBindedBufferState.unBind();\n        this._nativeObj.renderQueue((this._context as any)._nativeObj);\n        \n        this._batch.recoverData();\n\n        return n;\n    }\n\n    private _batchQueue() {\n       this._isTransparent || this._batch.batch(this.elements);\n    }\n}","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\nimport { IClone } from \"../../../utils/IClone\";\nimport { BoundBox } from \"../../math/BoundBox\";\nimport { Bounds } from \"../../math/Bounds\";\n\n\n\nexport class NativeBounds implements IClone {\n\n    /**native Share Memory */\n    static MemoryBlock_size: number = Math.max(6 * 8, 16 * 4);\n    /**@internal\t*/\n    nativeMemory: NativeMemory;\n    /**@internal\t*/\n    float32Array: Float32Array;\n    /**@internal\t*/\n    float64Array: Float64Array;\n    /**@internal\t*/\n    _nativeObj: any;\n    /**@internal\t*/\n    _center: Vector3 = new Vector3();\n    /**@internal\t*/\n    _extent: Vector3 = new Vector3();\n    /**@internal */\n    private _boundBox: BoundBox = new BoundBox(new Vector3(), new Vector3());\n\n    get min() {\n        return this.getMin();\n    }\n\n    set min(value: Vector3) {\n        this.setMin(value);\n    }\n\n    get max() {\n        return this.getMax();\n    }\n\n    set max(value: Vector3) {\n        this.setMax(value);\n    }\n\n    /**\n     * 设置包围盒的最小点。\n     * @param value\t包围盒的最小点。\n     */\n    setMin(value: Vector3): void {\n        this.float64Array[0] = value.x;\n        this.float64Array[1] = value.y;\n        this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setMin();\n    }\n\n    /**\n     * 获取包围盒的最小点。\n     * @return\t包围盒的最小点。\n     */\n    getMin(): Vector3 {\n        var min: Vector3 = this._boundBox.min;\n        this._nativeObj.getMin();\n        min.x = this.float64Array[0];\n        min.y = this.float64Array[1];\n        min.z = this.float64Array[2];\n        return min;\n    }\n\n    /**\n     * 设置包围盒的最大点。\n     * @param value\t包围盒的最大点。\n     */\n    setMax(value: Vector3): void {\n        this.float64Array[0] = value.x;\n        this.float64Array[1] = value.y;\n        this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setMax();\n    }\n\n    /**\n     * 获取包围盒的最大点。\n     * @return\t包围盒的最大点。\n     */\n    getMax(): Vector3 {\n        var max: Vector3 = this._boundBox.max;\n        this._nativeObj.getMax();\n        max.x = this.float64Array[0];\n        max.y = this.float64Array[1];\n        max.z = this.float64Array[2];\n        return max;\n    }\n\n    /**\n     * 设置包围盒的中心点。\n     * @param value\t包围盒的中心点。\n     */\n    setCenter(value: Vector3): void {\n        this.float64Array[0] = value.x;\n        this.float64Array[1] = value.y;\n        this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setCenter();\n    }\n\n    /**\n     * 获取包围盒的中心点。\n     * @return\t包围盒的中心点。\n     */\n    getCenter(): Vector3 {\n        var center: Vector3 = this._center;\n        this._nativeObj.getCenter();\n        center.x = this.float64Array[0];\n        center.y = this.float64Array[1];\n        center.z = this.float64Array[2];\n        return center;\n    }\n\n    /**\n     * 设置包围盒的范围。\n     * @param value\t包围盒的范围。\n     */\n    setExtent(value: Vector3): void {\n        this.float64Array[0] = value.x;\n        this.float64Array[1] = value.y;\n        this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setExtent();\n    }\n\n    /**\n     * 获取包围盒的范围。\n     * @return\t包围盒的范围。\n     */\n    getExtent(): Vector3 {\n        var extent: Vector3 = this._extent;\n        this._nativeObj.getExtent();\n        extent.x = this.float64Array[0];\n        extent.y = this.float64Array[1];\n        extent.z = this.float64Array[2];\n        return extent;\n    }\n\n    /**\n     * 创建一个 <code>Bounds</code> 实例。\n     * @param\tmin  min 最小坐标\n     * @param\tmax  max 最大坐标。\n     */\n    constructor(min?: Vector3, max?: Vector3) {\n        this.nativeMemory = new NativeMemory(NativeBounds.MemoryBlock_size, true);\n        this.float32Array = this.nativeMemory.float32Array;\n        this.float64Array = this.nativeMemory.float64Array;\n        this._nativeObj = new (window as any).conchBounds(this.nativeMemory._buffer); \n        min && this.setMin(min);\n        max && this.setMax(max);\n    }\n    /**\n     * @internal\n     */\n    _tranform(matrix: Matrix4x4, out: NativeBounds): void {\n        this.float32Array.set(matrix.elements);\n        this._nativeObj._tranform(out._nativeObj);\n    }\n\n    _getBoundBox(): BoundBox {\n        this._nativeObj._getBoundBox();\n        this._boundBox.min.x = this.float64Array[0];\n        this._boundBox.min.y = this.float64Array[1];\n        this._boundBox.min.z = this.float64Array[2];\n        this._boundBox.max.x = this.float64Array[3];\n        this._boundBox.max.y = this.float64Array[4];\n        this._boundBox.max.z = this.float64Array[5];\n        return this._boundBox;\n    }\n    /**\n     * @returns -1为不相交 不为0的时候返回值为相交体积\n     */\n    calculateBoundsintersection(bounds: Bounds): number {\n        var ownMax: Vector3 = this.getMax();\n        var ownMin: Vector3 = this.getMin();\n        var calMax: Vector3 = bounds.getMax();\n        var calMin: Vector3 = bounds.getMin();\n        var tempV0: Vector3 = TEMP_VECTOR3_MAX0;\n        var tempV1: Vector3 = TEMP_VECTOR3_MAX1;\n        var thisExtends: Vector3 = this.getExtent();\n        var boundExtends: Vector3 = bounds.getExtent();\n        tempV0.setValue(Math.max(ownMax.x, calMax.x) - Math.min(ownMin.x, calMin.x),\n            Math.max(ownMax.y, calMax.y) - Math.min(ownMin.y, calMin.y),\n            Math.max(ownMax.z, calMax.z) - Math.min(ownMin.z, calMin.z));\n        tempV1.setValue((thisExtends.x + boundExtends.x) * 2.0,\n            (thisExtends.y + boundExtends.y) * 2.0,\n            (thisExtends.z + boundExtends.z) * 2.0);\n        if ((tempV0.x) > (tempV1.x)) return -1;\n        if ((tempV0.y) > (tempV1.y)) return -1;\n        if ((tempV0.z) > (tempV1.z)) return -1;\n        return (tempV1.x - tempV0.x) * (tempV1.y - tempV0.y) * (tempV1.z - tempV0.z);\n    }\n\n\n    /**\n     * 克隆。\n     * @param\tdestObject 克隆源。\n     */\n    cloneTo(destObject: any): void {\n        var destBounds: NativeBounds = (<NativeBounds>destObject);\n        this._nativeObj.cloneTo(destBounds._nativeObj);\n    }\n\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: NativeBounds = new NativeBounds(new Vector3(), new Vector3());\n        this.cloneTo(dest);\n        return dest;\n    }\n\n}\nconst TEMP_VECTOR3_MAX0 = new Vector3();\nconst TEMP_VECTOR3_MAX1 = new Vector3();","import { Vector3 } from \"../../../maths/Vector3\";\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\nimport { Plane } from \"../../math/Plane\";\n\n\n/**\n * camera裁剪数据\n */\nexport class NativeCameraCullInfo implements ICameraCullInfo {\n\t/**位置 */\n\tprivate _position: Vector3;\n\n\tprivate _useOcclusionCulling: Boolean;\n\n\tprivate _cullingMask: number;\n\t/**静态标记 */\n\tprivate _staticMask: number;\n\n\tprivate _nativeObj: any;\n\n\tprivate static MemoryBlock_size = 192;\n\t/**native Share Memory */\n\tprivate nativeMemory: NativeMemory;\n\tprivate float64Array: Float64Array;\n\n\tboundFrustum: BoundFrustum;\n\n\tconstructor() {\n\t\tthis.nativeMemory = new NativeMemory(NativeCameraCullInfo.MemoryBlock_size, true);\n\t\tthis.float64Array = this.nativeMemory.float64Array;\n\t\tthis._nativeObj = new (window as any).conchCameraCullInfo(this.nativeMemory._buffer);\n\t}\n\n\tset position(position: Vector3) {\n\t\tthis._position = position;\n\t\tthis._nativeObj.setPosition(position.x, position.y, position.z);\n\t}\n\n\tget position(): Vector3 {\n\t\treturn this._position;\n\t}\n\n\tset useOcclusionCulling(useOcclusionCulling: Boolean) {\n\t\tthis._useOcclusionCulling = useOcclusionCulling;\n\t\tthis._nativeObj.useOcclusionCulling = useOcclusionCulling;\n\t}\n\n\tget useOcclusionCulling(): Boolean {\n\t\treturn this._useOcclusionCulling;\n\t}\n\n\tset cullingMask(cullingMask: number) {\n\t\tthis._cullingMask = cullingMask;\n\t\tthis._nativeObj.cullingMask = cullingMask;\n\t}\n\n\tget cullingMask(): number {\n\t\treturn this._cullingMask;\n\t}\n\n\n\tset staticMask(value: number) {\n\t\tthis._staticMask = value;\n\t\tthis._nativeObj.staticMask = value;\n\t}\n\n\tget staticMask(): number {\n\t\treturn this._staticMask;\n\t}\n\t\n\n\t/**\n\t * @internal\n\t */\n\tserialize(): void {\n\t\tif (this.boundFrustum) {\n\t\t\tthis.setPlane(0, this.boundFrustum.near);\n\t\t\tthis.setPlane(4, this.boundFrustum.far);\n\t\t\tthis.setPlane(8, this.boundFrustum.left);\n\t\t\tthis.setPlane(12, this.boundFrustum.right);\n\t\t\tthis.setPlane(16, this.boundFrustum.top);\n\t\t\tthis.setPlane(20, this.boundFrustum.bottom);\n\t\t\tthis._nativeObj.setBoundFrustum();\n\t\t}\n\t}\n\t/**\n\t * @internal\n\t */\n\tsetPlane(index: number, value: Plane): void {\n\t\tthis.float64Array[index] = value.normal.x;\n\t\tthis.float64Array[index + 1] = value.normal.y;\n\t\tthis.float64Array[index + 2] = value.normal.z;\n\t\tthis.float64Array[index + 3] = value.distance;\n\t}\n}","import { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\n\nexport class NativeCommandUniformMap extends CommandUniformMap {\n\n\tprivate _nativeObj: any;\n\n    constructor(_nativeObj: any, stateName: string){\n        super(stateName);\n\t\tthis._nativeObj = _nativeObj;\n    }\n    hasPtrID(propertyID: number): boolean {\n\t\treturn this._nativeObj.hasPtrID(propertyID);\n\t}\n\n\tgetMap() {\n\t\treturn this._idata;\n\t}\n\n\t/**\n\t * 增加一个UniformMap\n\t * @internal\n\t * @param propertyID \n\t * @param propertyKey \n\t */\n\taddShaderUniform(propertyID: number, propertyKey: string): void {\n\t\tthis._idata[propertyID] = propertyKey;\n        this._nativeObj.addShaderUniform(propertyID, propertyKey);\n\t}\n}","\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { Stat } from \"../../../utils/Stat\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\nimport { NativeCameraCullInfo } from \"./NativeCameraCullInfo\";\n\n\nexport class NativeCullPassBase implements ICullPass {\n\n    private _nativeObj: any;\n    private _tempRenderList: SingletonList<BaseRender>;\n    get cullList(): SingletonList<BaseRender> {\n        this._tempRenderList.elements = this._nativeObj.cullList;\n        this._tempRenderList.length = this._nativeObj.cullList.length;\n        return this._tempRenderList;\n    }\n\n    constructor() {\n        this._nativeObj = new (window as any).conchCullPass();\n        this._tempRenderList = new SingletonList<BaseRender>();\n    }\n\n    cullByCameraCullInfo(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\n        //native Cull \n        (cameraCullInfo as NativeCameraCullInfo).serialize();\n        Stat.frustumCulling += this._nativeObj.cullByCameraCullInfo((cameraCullInfo as any)._nativeObj, (renderManager as any)._sceneManagerOBJ._nativeObj);\n        //Custom list Cull\n        var customRenderList = (renderManager as any)._sceneManagerOBJ._customCullList;\n        var boundFrustum = cameraCullInfo.boundFrustum;\n        var cullMask: number = cameraCullInfo.cullingMask;\n        let staticMask = cameraCullInfo.staticMask;\n        var renders = customRenderList.elements;\n        let context = RenderContext3D._instance;\n        for (var i: number = 0, n: number = customRenderList.length; i < n; i++) {\n            var render: BaseRender = <BaseRender>renders[i];\n            var canPass: boolean;\n            canPass = (Math.pow(2, render.renderNode.layer & cullMask) != 0) && render._enabled && (render.renderbitFlag == 0);\n            canPass = canPass && (( render.renderNode.staticMask & staticMask) != 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                if (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum, context)) {\n                    this._nativeObj.cullList.push(render);\n                }\n            }\n        }\n    }\n    cullByShadowCullInfo(cullInfo: IShadowCullInfo, renderManager: ISceneRenderManager): void {\n        //native Cull\n        //TODO transparent filter\n        Stat.frustumCulling += this._nativeObj.cullByShadowCullInfo((cullInfo as any)._nativeObj, (renderManager as any)._sceneManagerOBJ._nativeObj);\n        //Custom list Cull\n        var customRenderList = (renderManager as any)._sceneManagerOBJ._customCullList;\n        var renders = customRenderList.elements;\n        for (var i: number = 0, n: number = customRenderList.length; i < n; i++) {\n            var render: BaseRender = <BaseRender>renders[i];\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                let pass = FrustumCulling.cullingRenderBounds(render.bounds, cullInfo);\n                pass && this._nativeObj.cullList.push(render);\n            }\n        }\n    }\n    cullingSpotShadow(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\n        //native Cull\n        (cameraCullInfo as NativeCameraCullInfo).serialize();\n        //TODO transparent filter\n        Stat.frustumCulling += this._nativeObj.cullingSpotShadow((cameraCullInfo as any)._nativeObj, (renderManager as any)._sceneManagerOBJ._nativeObj);\n\n        //Custom list Cull\n        var customRenderList = (renderManager as any)._sceneManagerOBJ._customCullList;\n        var renders = customRenderList.elements;\n        let context = RenderContext3D._instance;\n        for (var i: number = 0, n: number = customRenderList.length; i < n; i++) {\n            var render: BaseRender = <BaseRender>renders[i];\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\n            if (canPass) {\n                Stat.frustumCulling++;\n                var render: BaseRender = <BaseRender>renders[i];\n                if (render._needRender(cameraCullInfo.boundFrustum, context))\n                    this._nativeObj.cullList.push(render);\n            }\n        }\n    }\n\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\n\n\nexport class NativeIndexBuffer3D extends IndexBuffer3D {\n\n    _conchIndexBuffer3D:any = null;\n\n    /**\n     * 创建一个 <code>VertexBuffer3D</code> 实例。\n     * @param\tbyteLength 字节长度。\n     * @param\tbufferUsage VertexBuffer3D用途类型。\n     * @param\tcanRead 是否可读。\n     */\n    constructor(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false) {\n        super(indexType,indexCount,bufferUsage,canRead)\n        this._conchIndexBuffer3D = new (window as any).conchIndexBuffer3D( (LayaGL.renderEngine as any)._nativeObj,indexType,indexCount,bufferUsage,false);\n        this._conchIndexBuffer3D.setGLBuffer(this._glBuffer);\n     }\n}","\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { Transform3D } from \"../../core/Transform3D\";\nimport { NativeShaderData } from \"./NativeShaderData\";\nexport enum RenderElementType {\n    Base = 0,\n    Skin = 1,\n    Instance = 2,\n}\nexport class NativeRenderElementOBJ implements IRenderElement {\n\n    private geometry: IRenderGeometryElement;\n\n    private materialShaderData: NativeShaderData;\n\n    private renderShaderData: NativeShaderData;\n\n    private transform: Transform3D;\n\n    //private isRender: boolean;\n\n    private owner: IBaseRenderNode;\n\n    set _geometry(data: IRenderGeometryElement) {\n        this.geometry = data;\n        this._nativeObj._geometry = (data as any)._nativeObj;\n    }\n\n    get _geometry(): IRenderGeometryElement {\n        return this.geometry;\n    }\n\n    set _materialShaderData(data: NativeShaderData) {\n        this.materialShaderData = data;\n        this._nativeObj._materialShaderData = data ? (data as any)._nativeObj : null;\n    }\n\n    get _materialShaderData(): NativeShaderData {\n        return this.materialShaderData;\n    }\n\n    set _renderShaderData(data: NativeShaderData) {\n        this.renderShaderData = data;\n        this._nativeObj._renderShaderData = data ? (data as any)._nativeObj : null;\n    }\n\n    get _renderShaderData(): NativeShaderData {\n        return this.renderShaderData;\n    }\n\n    set _transform(data: Transform3D) {\n        this.transform = data;\n        this._nativeObj._transform = data ? (data as any)._nativeObj : null;\n    }\n\n    get _transform(): Transform3D {\n        return this.transform;\n    }\n\n    get _isRender(): boolean {\n        return this._nativeObj._isRender;\n    }\n\n    set _isRender(data: boolean) {\n        this._nativeObj._isRender = data;\n    }\n\n    get _invertFront(): boolean {\n        return this._nativeObj._invertFront;\n    }\n\n    set _invertFront(data: boolean) {\n        this._nativeObj._invertFront = data;\n    }\n\n    _nativeObj: any;\n    _shaderInstances: SingletonList<ShaderInstance>;\n    constructor() { \n        this._shaderInstances = new SingletonList();\n        this.init();\n    }\n    init(): void {\n       \n        this._nativeObj = new (window as any).conchRenderElement(RenderElementType.Base, (LayaGL.renderEngine as any)._nativeObj);\n    }\n\n    _owner: IBaseRenderNode;\n\n    _addShaderInstance(shader: ShaderInstance) {\n        this._shaderInstances.add(shader);\n        this._nativeObj._addShaderInstance((shader as any)._nativeObj);\n    }\n\n    _clearShaderInstance() {\n        this._shaderInstances.length = 0;\n        this._nativeObj._clearShaderInstance();\n    }\n    /**\n     * render RenderElement\n     * @param renderqueue \n     */\n    _render(context: IRenderContext3D): void {\n        this._nativeObj._render((context as any)._nativeObj);\n    }\n\n    _destroy() {\n        this._nativeObj._destroy();\n        this._shaderInstances = null;\n        this.transform = null;\n    }\n}","\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { NativeRenderElementOBJ, RenderElementType } from \"./NativeRenderElementOBJ\";\n\nexport class NativeInstanceRenderElementOBJ extends NativeRenderElementOBJ {\n    /**@internal 当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据*/\n    private _vertexBuffer3D: Array<VertexBuffer3D> = [];\n\n    private _updateData: Array<Float32Array> = [];\n\n\n    private _updateNums: number;\n\n    /**\n     * 增加UpdateBuffer\n     * @param vb \n     * @param length 每个instance属性的数据长度\n     */\n    addUpdateBuffer(vb: VertexBuffer3D,length:number) {\n        this._vertexBuffer3D[this._updateNums++] = vb;\n        this._nativeObj.addUpdateBuffer((vb as any)._conchVertexBuffer3D, length);\n    }\n\n    /**\n     * \n     * @param index index of Buffer3D\n     * @param length length of array\n     */\n    getUpdateData(index: number,length:number): Float32Array {\n        let data = this._updateData[index];\n        if (!data || data.length < length) {\n            data = this._updateData[index] = new Float32Array(length);\n            this._nativeObj.getUpdateData(index, data);\n        }\n        return data;\n    }\n\n    constructor() {\n        super();\n    }\n\n    clear() {\n        this._updateNums = 0;\n        this._nativeObj.clear();\n    }\n\n    init(): void {\n        this._nativeObj = new (window as any).conchRenderElement(RenderElementType.Instance, (LayaGL.renderEngine as any)._nativeObj);\n    }\n\n    set drawCount(drawCount: number) {\n\t\tthis._nativeObj.drawCount = drawCount;\n\t} \n\n\tget drawCount(): number {\n\t\treturn this._nativeObj.drawCount;\n\t}\n}","\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { UploadMemoryManager } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemoryManager\";\nimport { IRenderTarget } from \"../../../RenderEngine/RenderInterface/IRenderTarget\";\nimport { IRenderContext3D, PipelineMode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { Viewport } from \"../../math/Viewport\";\nimport { NativeRenderElementOBJ } from \"./NativeRenderElementOBJ\";\n\nexport class NativeRenderContext3DOBJ implements IRenderContext3D {\n\n    //dest Texture\n    private _destTarget: IRenderTarget;\n\n    //viewPort\n    private _viewPort: Viewport;\n    //scissor\n    private _scissor: Vector4;\n\n    //Camera Shader Data\n    private _cameraShaderData: ShaderData;\n    //scene Shader Data\n    private _sceneShaderData: ShaderData;\n    //Global ShaderData\n    private _globalShaderData: ShaderData;\n\n    private _nativeObj: any;\n\n    constructor() {\n        this._viewPort = new Viewport(0, 0, 0, 0);\n        this._scissor = new Vector4();\n        this._nativeObj = new (window as any).conchRenderContext3D((LayaGL.renderEngine as any)._nativeObj);\n    }\n\n    drawRenderElement(renderelemt: NativeRenderElementOBJ): void {\n        UploadMemoryManager.syncRenderMemory();//同步数据\n        renderelemt._render(this);\n    }\n\n    /**设置IRenderContext */\n    applyContext(cameraUpdateMark: number): void {\n        this._nativeObj.changeViewport(this._viewPort.x, this._viewPort.y, this._viewPort.width, this._viewPort.height);\n        this._nativeObj.changeScissor(this._scissor.x, this._scissor.y, this._scissor.z, this._scissor.w);\n        this.destTarget && this.destTarget._start();\n        this._nativeObj.applyContext(cameraUpdateMark);\n    }\n    set destTarget(destTarget: IRenderTarget) {\n        this._destTarget = destTarget;\n        this._nativeObj.destTarget = destTarget ? destTarget._renderTarget : null;\n    }\n\n    get destTarget(): IRenderTarget {\n        return this._destTarget;\n    }\n\n    set viewPort(viewPort: Viewport) {\n        this._viewPort = viewPort;\n        this._nativeObj.changeViewport(viewPort.x, viewPort.y, viewPort.width, viewPort.height)\n    }\n\n    get viewPort(): Viewport {\n        return this._viewPort;\n    }\n\n    set scissor(scissor: Vector4) {\n        this._scissor = scissor;\n        this._nativeObj.changeScissor(scissor.x, scissor.y, scissor.z, scissor.w)\n    }\n\n    get scissor(): Vector4 {\n        return this._scissor;\n    }\n\n    set invertY(invertY: boolean) {\n        this._nativeObj.invertY = invertY;\n    }\n\n    get invertY(): boolean {\n        return this._nativeObj.invertY;\n    }\n\n    set pipelineMode(pipelineMode: PipelineMode) {\n        this._nativeObj.pipelineMode = pipelineMode;\n    }\n\n    get pipelineMode(): PipelineMode {\n        return this._nativeObj.pipelineMode;\n    }\n\n    set globalShaderData(globalShaderData: ShaderData) {\n        this._globalShaderData = globalShaderData;\n        this._nativeObj.globalShaderData = globalShaderData ? (globalShaderData as any)._nativeObj : null;\n    }\n\n    get globalShaderData(): ShaderData {\n        return this._globalShaderData;\n    }\n\n    set sceneShaderData(sceneShaderData: ShaderData) {\n        this._sceneShaderData = sceneShaderData;\n        this._nativeObj.sceneShaderData = sceneShaderData ? (sceneShaderData as any)._nativeObj : null;\n    }\n\n    get sceneShaderData(): ShaderData {\n        return this._sceneShaderData;\n    }\n\n    set cameraShaderData(cameraShaderData: ShaderData) {\n        this._cameraShaderData = cameraShaderData;\n        this._nativeObj.cameraShaderData = cameraShaderData ? (cameraShaderData as any)._nativeObj : null;\n    }\n\n    get cameraShaderData(): ShaderData {\n        return this._cameraShaderData;\n    }\n\n    set sceneID(sceneID: number) {\n        this._nativeObj.sceneID = sceneID;\n    }\n\n    get sceneID(): number {\n        return this._nativeObj.sceneID;\n    }\n\n    set cameraUpdateMark(cameraUpdateMark: number) {\n        this._nativeObj.cameraUpdateMark = cameraUpdateMark;\n    }\n\n    get cameraUpdateMark(): number {\n        return this._nativeObj.cameraUpdateMark;\n    }\n\n\n}","import { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\n\n\n\nexport class NativeRenderGeometryElementOBJ implements IRenderGeometryElement {\n  /**@internal */\n  private _bufferState: BufferState;\n\n   /**@internal */\n   drawParams: SingletonList<number>;\n   \n  _nativeObj: any;\n\n  /**@internal */\n  constructor(mode: MeshTopology, drawType: DrawType) {\n    this._nativeObj = new (window as any).conchRenderGeometryElement(mode, drawType);\n    this.drawParams = new SingletonList();\n  }\n\n  /**@internal */\n  setDrawArrayParams(first: number, count: number): void {\n    this.drawParams.add(first);\n    this.drawParams.add(count);\n    this._nativeObj.setDrawArrayParams(first, count);\n  }\n\n  /**@internal */\n  setDrawElemenParams(count: number, offset: number): void {\n    this.drawParams.add(offset);\n    this.drawParams.add(count);\n    this._nativeObj.setDrawElemenParams(count, offset);\n  }\n  \n  /**@internal */\n  destroy(): void {\n    this._nativeObj.destroy();\n  }\n\n  clearRenderParams() {\n    this.drawParams.length = 0;\n    this._nativeObj.clearRenderParams();\n  }\n\n  set bufferState(value: BufferState) {\n    this._bufferState = value;\n    if (value) {\n      this._nativeObj.bufferState = (value as any)._nativeVertexArrayObject._nativeObj;\n    }\n    else {\n      this._nativeObj.bufferState = null;\n    }\n  }\n\n  get bufferState(): BufferState {\n    return this._bufferState;\n  }\n\n  set mode(value: MeshTopology) {\n    this._nativeObj.mode = value;\n  }\n\n  get mode(): MeshTopology {\n    return this._nativeObj.mode;\n  }\n\n  set drawType(value: DrawType) {\n    this._nativeObj.drawType = value;\n  }\n\n  get drawType(): DrawType {\n    return this._nativeObj.drawType;\n  }\n\n  set instanceCount(value: number) {\n    this._nativeObj.instanceCount = value;\n  }\n\n  get instanceCount(): number {\n    return this._nativeObj.instanceCount;\n  }\n\n  set indexFormat(value: IndexFormat) {\n    this._nativeObj.indexFormat = value;\n  }\n\n  get indexFormat(): IndexFormat {\n    return this._nativeObj.indexFormat;\n  }\n}","import { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\n\n\nexport class NativeRenderState {\n\t_nativeObj: any;\n\n\tset cull(value: number) {\n\t\tthis._nativeObj.cull = value;\n\t}\n\tget cull(): number {\n\t\treturn this._nativeObj.cull;\n\t}\n\n\tset blend(value: number) {\n\t\tthis._nativeObj.blend = value;\n\t}\n\tget blend(): number {\n\t\treturn this._nativeObj.blend;\n\t}\n\n\tset srcBlend(value: number) {\n\t\tthis._nativeObj.srcBlend = value;\n\t}\n\tget srcBlend(): number {\n\t\treturn this._nativeObj.srcBlend;\n\t}\n\n\tset dstBlend(value: number) {\n\t\tthis._nativeObj.dstBlend = value;\n\t}\n\tget dstBlend(): number {\n\t\treturn this._nativeObj.dstBlend;\n\t}\n\t\n\tset srcBlendRGB(value: number) {\n\t\tthis._nativeObj.srcBlendRGB = value;\n\t}\n\tget srcBlendRGB(): number {\n\t\treturn this._nativeObj.srcBlendRGB;\n\t}\n\t\n\tset dstBlendRGB(value: number) {\n\t\tthis._nativeObj.dstBlendRGB = value;\n\t}\n\tget dstBlendRGB(): number {\n\t\treturn this._nativeObj.dstBlendRGB;\n\t}\n\t\n\tset srcBlendAlpha(value: number) {\n\t\tthis._nativeObj.srcBlendAlpha = value;\n\t}\n\tget srcBlendAlpha(): number {\n\t\treturn this._nativeObj.srcBlendAlpha;\n\t}\n\t\n\tset dstBlendAlpha(value: number) {\n\t\tthis._nativeObj.dstBlendAlpha = value;\n\t}\n\tget dstBlendAlpha(): number {\n\t\treturn this._nativeObj.dstBlendAlpha;\n\t}\n\t\n\tset blendEquation(value: number) {\n\t\tthis._nativeObj.blendEquation = value;\n\t}\n\tget blendEquation(): number {\n\t\treturn this._nativeObj.blendEquation;\n\t}\n\t\n\tset blendEquationRGB(value: number) {\n\t\tthis._nativeObj.blendEquationRGB = value;\n\t}\n\tget blendEquationRGB(): number {\n\t\treturn this._nativeObj.blendEquationRGB;\n\t}\n\t\n\tset blendEquationAlpha(value: number) {\n\t\tthis._nativeObj.blendEquationAlpha = value;\n\t}\n\tget blendEquationAlpha(): number {\n\t\treturn this._nativeObj.blendEquationAlpha;\n\t}\n\t\n\tset depthTest(value: number) {\n\t\tthis._nativeObj.depthTest = value;\n\t}\n\tget depthTest(): number {\n\t\treturn this._nativeObj.depthTest;\n\t}\n\t\n\tset depthWrite(value: boolean) {\n\t\tthis._nativeObj.depthWrite = value;\n\t}\n\tget depthWrite(): boolean {\n\t\treturn this._nativeObj.depthWrite;\n\t}\n\t\n\tset stencilWrite(value: boolean) {\n\t\tthis._nativeObj.stencilWrite = value;\n\t}\n\tget stencilWrite(): boolean {\n\t\treturn this._nativeObj.stencilWrite;\n\t}\n\t\n\tset stencilTest(value: number) {\n\t\tthis._nativeObj.stencilTest = value;\n\t}\n\tget stencilTest(): number {\n\t\treturn this._nativeObj.stencilTest;\n\t}\n\t\n\tset stencilRef(value: number) {\n\t\tthis._nativeObj.stencilRef = value;\n\t}\n\tget stencilRef(): number {\n\t\treturn this._nativeObj.stencilRef;\n\t}\n\n\tset stencilOp(value: Vector3) {\n\t\tthis._nativeObj.setStencilOp(value.x, value.y, value.z);\n\t}\n\tsetNull():void\n\t{\n\n\t}\n\tconstructor() {\n\t\tthis._nativeObj = new (window as any).conchRenderState();\n\t}\n\n}\n\n\n","import { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { SingletonList } from \"../../../utils/SingletonList\";\nimport { BaseRender } from \"../../core/render/BaseRender\";\n\n\n\nexport class NativeSceneRenderManager implements ISceneRenderManager {\n    /** @internal */\n    _renders: SingletonList<BaseRender> = new SingletonList();\n    //自定义更新的Bounds渲染节点\n    _customUpdateList: SingletonList<BaseRender> = new SingletonList();\n    //自定义裁剪的渲染节点\n    _customCullList: SingletonList<BaseRender> = new SingletonList();\n    private _nativeObj: any;\n    constructor() {\n        this._nativeObj = new (window as any).conchSceneCullManger();\n    }\n\n    get list() {\n        return this._renders;\n    }\n\n    set list(value) {\n        this._customCullList.elements = [];\n        this._customCullList.length = 0;\n        this._nativeObj.clear();  \n        this._renders.clear();\n        for (let i = 0, len = value.length; i < len; i++) {\n            this.addRenderObject((value.elements[i] as BaseRender));\n        }\n    }\n\n    addRenderObject(object: BaseRender): void {\n        \n        this._renders.add(object);\n        if (!object._customCull && object.renderNode.geometryBounds) {\n            this._nativeObj.addRenderObject((object.renderNode as any)._nativeObj);\n        }\n        else {\n             this._customCullList.add(object);\n        }\n\n    }\n\n    removeRenderObject(object: BaseRender): void {\n        \n        if (!object._customCull && object.renderNode.geometryBounds) {\n            this._nativeObj.removeRenderObject((object.renderNode as any)._nativeObj);\n        }\n        else {\n            //remove\n            let elements = this._customCullList.elements;\n            let index = elements.indexOf(object);\n            if (index < this._customCullList.length) {\n                this._customCullList.length -= 1;\n                elements[index] = elements[this._customCullList.length];\n            }\n        }\n        this._renders.remove(object);\n        this.removeMotionObject(object);\n    }\n\n    removeMotionObject(object: BaseRender): void {\n        \n        if (object.renderNode.geometryBounds) {\n            //可以在native更新Bounds的渲染节点\n            this._nativeObj.removeMotionObject((object.renderNode as any)._nativeObj);\n        } else {\n            let index = object._motionIndexList;\n            if (index != -1) {//remove\n                let elements = this._customUpdateList.elements;\n                this._customUpdateList.length -= 1;\n                elements[length]._motionIndexList = index;\n                elements[index] = elements[length];\n            }\n        }\n    }\n\n    updateMotionObjects(): void {\n        \n        //update native Motion Node\n        this._nativeObj.updateMotionObjects();\n\n        for (let i = 0; i < this._customUpdateList.length; i++) {\n            this._customUpdateList.elements[i].bounds;\n            this._customUpdateList.elements[i]._motionIndexList = -1;\n        }\n        this._customUpdateList.length = 0;\n    }\n\n    addMotionObject(object: BaseRender): void {\n        \n        if (object.renderNode.geometryBounds) {\n            this._nativeObj.addMotionObject((object.renderNode as any)._nativeObj);\n        } else {\n            if (object._motionIndexList == -1) {\n                object._motionIndexList = this._customUpdateList.length;\n                this._customUpdateList.add(object);\n            }\n        }\n    }\n\n    destroy(): void {\n        this._nativeObj.destroy(); \n        this._renders.destroy();\n        //Destroy\n        this._customUpdateList.destroy();\n        this._customCullList.destroy();\n    }\n\n}","import { Color } from \"../../../maths/Color\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { INativeUploadNode } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/INativeUploadNode\";\nimport { MemoryDataType } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/MemoryDataType\";\nimport { UploadMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemory\";\nimport { UploadMemoryManager } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemoryManager\";\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { Resource } from \"../../../resource/Resource\";\nimport { Texture } from \"../../../resource/Texture\";\nimport { Texture2D } from \"../../../resource/Texture2D\";\nimport { NativeUniformBufferObject } from \"./NativeUniformBufferObject\";\n\n\nexport enum NativeShaderDataType {\n    Number32,\n    Vector2,\n    Vector3,\n    Vector4,\n    Matrix4x4,\n    Number32Array,\n    Texture,\n    ShaderDefine,\n    UBO,\n}\n\nexport class NativeShaderData extends ShaderData implements INativeUploadNode {\n    private inUploadList: boolean = false;\n    _dataType: MemoryDataType;\n    nativeObjID: number;\n    _nativeObj: any;\n    updateMap: Map<number, Function>;\n    updataSizeMap: Map<number, number>;\n    payload32bitNum: number = 0;\n    /**\n     * @internal\t\n     */\n    constructor(ownerResource: Resource = null) {\n        super(ownerResource)\n        this._initData();\n        this._nativeObj = new (window as any).conchShaderData();\n        this.nativeObjID = this._nativeObj.nativeID;\n        this._dataType = MemoryDataType.ShaderData;\n        this.updateMap = new Map();\n        this.updataSizeMap = new Map();\n    }\n\n    /**\n     * @override interface INativeUploadNode\n     * @internal\n     */\n    getUploadMemoryLength(): number {\n        let head = 4;//header\n        this.updataSizeMap.forEach((value) => {\n            this.payload32bitNum += value;\n        });\n        return (this.payload32bitNum + head) * 4;\n    }\n\n    /**\n     * @override interface INativeUploadNode\n     * @internal\n     * @param memoryBlock \n     * @param stride \n     */\n    uploadDataTOShareMemory(memoryBlock: UploadMemory, strideInByte: number): boolean {\n        if (!this._data) {\n            return false;\n        }\n        let array = memoryBlock.int32Array;\n        let strideFloat = strideInByte / 4;\n        //type\n        array[strideFloat++] = MemoryDataType.ShaderData;\n        //instanceID\n        array[strideFloat++] = this.nativeObjID;\n        //dataLength\n        array[strideFloat++] = this.payload32bitNum;\n        //Shaderdata property change nums\n        array[strideFloat++] = this.updateMap.size;\n        this.updateMap.forEach((value, key) => {\n            strideFloat += value.call(this, key, memoryBlock, strideFloat);\n        });\n        this.clearUpload();\n        this.inUploadList = false;\n        return true;\n    }\n\n    clearUpload() {\n        this.payload32bitNum = 0;\n        this.updataSizeMap.clear();\n        this.updateMap.clear();\n    }\n\n    compressNumber(index: number, memoryBlock: UploadMemory, stride: number): number {\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Number32 \" + NativeShaderDataType.Number32 + \"stride \" + stride);\n        var length = 3;\n        memoryBlock.int32Array[stride] = index;\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Number32;\n        memoryBlock.float32Array[stride + 2] = this._data[index];\n        return length;\n    }\n\n    compressVector2(index: number, memoryBlock: UploadMemory, stride: number): number {\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Vector2 \" + NativeShaderDataType.Vector2 + \"stride \" + stride);\n        var length = 4;\n        memoryBlock.int32Array[stride] = index;\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Vector2;\n        var value: Vector2 = this._data[index];\n        memoryBlock.float32Array[stride + 2] = value.x;\n        memoryBlock.float32Array[stride + 3] = value.y;\n        return length;\n    }\n\n    compressVector3(index: number, memoryBlock: UploadMemory, stride: number): number {\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Vector3 \" + NativeShaderDataType.Vector2 + \"stride \" + stride);\n        var length = 5;\n        memoryBlock.int32Array[stride] = index;\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Vector3;\n        var value: Vector3 = this._data[index];\n        memoryBlock.float32Array[stride + 2] = value.x;\n        memoryBlock.float32Array[stride + 3] = value.y;\n        memoryBlock.float32Array[stride + 4] = value.z;\n        return length;\n    }\n\n    compressVector4(index: number, memoryBlock: UploadMemory, stride: number): number {\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Vector4 \" + NativeShaderDataType.Vector4 + \"stride \" + stride);\n        var length = 6;\n        memoryBlock.int32Array[stride] = index;\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Vector4;\n        var value: Vector4 = this._data[index];\n        memoryBlock.float32Array[stride + 2] = value.x;\n        memoryBlock.float32Array[stride + 3] = value.y;\n        memoryBlock.float32Array[stride + 4] = value.z;\n        memoryBlock.float32Array[stride + 5] = value.w;\n        return length;\n    }\n\n    compressMatrix4x4(index: number, memoryBlock: UploadMemory, stride: number): number {\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Matrix4x4 \" + NativeShaderDataType.Matrix4x4 + \"stride \" + stride);\n        var length = 18;\n        memoryBlock.int32Array[stride] = index;\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Matrix4x4;\n        var value: Matrix4x4 = this._data[index];\n        memoryBlock.float32Array.set(value.elements, stride + 2);\n        return length;\n    }\n\n    compressNumberArray(index: number, memoryBlock: UploadMemory, stride: number): number {\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Number32Array \" + NativeShaderDataType.Number32Array + \"stride \" + stride);\n        memoryBlock.int32Array[stride] = index\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Number32Array;\n        var value: Float32Array = this._data[index];\n        memoryBlock.int32Array[stride + 2] = value.length;\n        memoryBlock.float32Array.set(value, stride + 3);\n        return value.length + 3;\n    }\n\n    compressTexture(index: number, memoryBlock: UploadMemory, stride: number): number {\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Texture \" + NativeShaderDataType.Texture + \"stride \" + stride);\n        var value: any = this._data[index];\n        memoryBlock.int32Array[stride] = index;\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Texture;\n        if (value && value instanceof Texture) {\n            memoryBlock.int32Array[stride + 2] = (value.bitmap._texture as any).id;\n        }\n        else if (value && value._texture) {\n            memoryBlock.int32Array[stride + 2] = (value._texture as any).id;\n        }\n        else {\n            memoryBlock.int32Array[stride + 2] = (Texture2D.erroTextur._texture as any).id;\n        }\n        return 3;\n    }\n\n    compressUBO(index: number, memoryBlock: UploadMemory, stride: number): number {\n        var value:NativeUniformBufferObject = this._data[index];\n        memoryBlock.int32Array[stride] = index;\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.UBO;\n        memoryBlock.int32Array[stride + 2] = (value._conchUniformBufferObject as any).nativeID;\n        return 3;\n    }\n\n    private configMotionProperty(key: number, length: number, callBack: Function) {\n        this.updateMap.set(key, callBack);\n        this.updataSizeMap.set(key, length);\n        if (!this.inUploadList) {\n            this.inUploadList = true;\n            UploadMemoryManager.getInstance()._dataNodeList.add(this);\n        }\n    }\n\n    /**\n     * 设置布尔。\n     * @param\tindex shader索引。\n     * @param\tvalue 布尔。\n     */\n    setBool(index: number, value: boolean): void {\n        super.setBool(index, value);\n        this.configMotionProperty(index, 3, this.compressNumber);\n    }\n\n    /**\n     * 设置整型。\n     * @param\tindex shader索引。\n     * @param\tvalue 整形。\n     */\n    setInt(index: number, value: number): void {\n        //this._data[index] = value;\n        super.setInt(index, value);\n        this.configMotionProperty(index, 3, this.compressNumber);\n    }\n\n    /**\n     * 设置浮点。\n     * @param\tindex shader索引。\n     * @param\tvalue 浮点。\n     */\n    setNumber(index: number, value: number): void {\n        super.setNumber(index, value);\n        this.configMotionProperty(index, 3, this.compressNumber);\n    }\n\n    /**\n     * 设置Vector2向量。\n     * @param\tindex shader索引。\n     * @param\tvalue Vector2向量。\n     */\n    setVector2(index: number, value: Vector2): void {\n        super.setVector2(index, value);\n        this.configMotionProperty(index, 4, this.compressVector2);\n    }\n\n    /**\n     * 设置Vector3向量。\n     * @param\tindex shader索引。\n     * @param\tvalue Vector3向量。\n     */\n    setVector3(index: number, value: Vector3): void {\n        super.setVector3(index, value);\n        this.configMotionProperty(index, 5, this.compressVector3);\n    }\n\n    /**\n     * 设置向量。\n     * @param\tindex shader索引。\n     * @param\tvalue 向量。\n     */\n    setVector(index: number, value: Vector4): void {\n        super.setVector(index, value);\n        this.configMotionProperty(index, 6, this.compressVector4);\n    }\n\n    /**\n     * 设置颜色\n     * @param index 索引\n     * @param value 颜色值\n     */\n    setColor(index: number, value: Color): void {\n        super.setColor(index, value);\n        this.configMotionProperty(index, 6, this.compressVector4);\n    }\n\n    /**\n     * 设置矩阵。\n     * @param\tindex shader索引。\n     * @param\tvalue  矩阵。\n     */\n    setMatrix4x4(index: number, value: Matrix4x4): void {\n        super.setMatrix4x4(index, value);\n        this.configMotionProperty(index, 18, this.compressMatrix4x4);\n    }\n\n\n    /**\n     * 设置Buffer。\n     * @param\tindex shader索引。\n     * @param\tvalue  buffer数据。\n     */\n    setBuffer(index: number, value: Float32Array): void {\n        super.setBuffer(index, value);\n        this.configMotionProperty(index, 3 + value.length, this.compressNumberArray);\n    }\n\n    /**\n     * 设置纹理。\n     * @param\tindex shader索引。\n     * @param\tvalue 纹理。\n     */\n    setTexture(index: number, value: BaseTexture): void {\n        super.setTexture(index, value);\n        this.configMotionProperty(index, 3, this.compressTexture);\n    }\n\n    /**\n     * \n     * @param index \n     * @param value \n     */\n    setUniformBuffer(index: number, value: NativeUniformBufferObject) {\n        this._data[index] = value;\n        this.configMotionProperty(index, 3, this.compressUBO);\n    }\n\n    /**\n     * set shader data\n     * @deprecated\n     * @param index uniformID\n     * @param value data\n     */\n    setValueData(index: number, value: any) {\n        // if (!!value.clone)\n        //     this._data[index] = value.clone();\n        // else\n        //     this._data[index] = value;\n        //有点恶心\n        if (typeof value == \"boolean\") {\n            this.setBool(index, <boolean>value);\n        } else if (typeof value == \"number\") {\n            this.setNumber(index, <number>value);\n        } else if (value instanceof Color) {\n            this.setColor(index, <Color>value);\n        } else if (value instanceof Vector2) {\n            this.setVector2(index, <Vector2>value);\n        } else if (value instanceof Vector3) {\n            this.setVector3(index, <Vector3>value);\n        } else if (value instanceof Vector4 || value instanceof Quaternion) {\n            this.setVector(index, <Vector4>value);\n        } else if (value instanceof Matrix4x4) {\n            this.setMatrix4x4(index, <Matrix4x4>value);\n        } else if (value.ArrayBuffer != null) {\n            this.setBuffer(index, value);\n        } else if (value._texture != null) {\n            this.setTexture(index, value);\n        }\n    }\n\n    cloneTo(destObject: NativeShaderData) {\n        var dest: NativeShaderData = <NativeShaderData>destObject;\n        for (var k in this._data) {//TODO:需要优化,杜绝is判断，慢\n            var value: any = this._data[k];\n            if (value != null) {\n                if (typeof (value) == 'boolean') {\n                    destObject.setBool((k as any), value);\n                } else if (typeof (value) == 'number') {\n                    destObject.setNumber(k as any, <number>value);\n                } else if (value instanceof Vector2) {\n                    destObject.setVector2(k as any, <Vector2>value);\n                } else if (value instanceof Vector3) {\n                    destObject.setVector3(k as any, <Vector3>value);\n                } else if (value instanceof Vector4) {\n                    destObject.setVector(k as any, <Vector4>value);\n                } else if (value instanceof Matrix4x4) {\n                    destObject.setMatrix4x4(k as any, <Matrix4x4>value);\n                } else if (value instanceof BaseTexture) {\n                    destObject.setTexture(k as any, value);\n                }\n            }\n        }\n        this._defineDatas.cloneTo(dest._defineDatas);\n        this._gammaColorMap.forEach((color, index) => {\n\t\t    destObject._gammaColorMap.set(index, color.clone());\n\t    })\n    }\n    /**\n     * 克隆。\n     * @return\t 克隆副本。\n     */\n    clone(): any {\n        var dest: NativeShaderData = new NativeShaderData();\n        this.cloneTo(dest);\n        return dest;\n    }\n\n}","import { CommandEncoder } from \"../../../layagl/CommandEncoder\";\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { ShaderDataType, ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\nimport { ShaderCompileDefineBase } from \"../../../webgl/utils/ShaderCompileDefineBase\";\n\n\n\nenum UniformParamsMapType {\n\tScene = 0,\n\tCamera,\n\tSprite,\n\tMaterial,\n}\n/**\n * @internal\n * <code>ShaderInstance</code> 类用于实现ShaderInstance。\n */\nexport class NativeShaderInstance/* extends ShaderInstance */ {\n\n\t_nativeObj: any;\n\n\t/**@internal */\n\tprivate _shaderPass: ShaderCompileDefineBase | ShaderPass;\n\n\tconstructor(vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }, shaderPass: ShaderCompileDefineBase) {\n\t\t//super(vs, ps, attributeMap, shaderPass);\n\t\tthis._shaderPass = shaderPass;\n\t\tvar pConchAttributeMap: any = new (window as any).conchAttributeMap();\n\t\tfor (var k in attributeMap) {\n\t\t\tpConchAttributeMap.setAttributeValue(k, attributeMap[k][0]);\n\t\t}\n\t\t\n\t\tvar stateMap: { [stateID: number]: number } = SubShader.StateParamsMap;\n\t\tfor (var s in stateMap) {\n\t\t\tpConchAttributeMap.setStateValue(parseInt(s), stateMap[s]);\n\t\t}\n\t\tpConchAttributeMap.statefirst = (<ShaderPass>this._shaderPass).statefirst;\n\t\tvar renderState: any = (<ShaderPass>shaderPass).renderState;\n\t\tthis._nativeObj = new (window as any).conchShaderInstance((LayaGL.renderEngine as any)._nativeObj, vs, ps, pConchAttributeMap, renderState._nativeObj);\n\t}\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tprotected _disposeResource(): void {\n\t\tthis._nativeObj.destroy();\n\t}\n\n\n\tbind() {\n\t\treturn this._nativeObj.bind();\n\t}\n\n\tuploadUniforms(shaderUniform: CommandEncoder, shaderDatas: ShaderData, uploadUnTexture: boolean) {\n\t\tthis._nativeObj.uploadUniforms(shaderUniform, (shaderDatas as any)._nativeObj, uploadUnTexture);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tuploadCustomUniform(index: number, data: any): void {\n\t\tthis._nativeObj.uploadCustomUniforms(index, data);\n\t}\n\tget _sceneUniformParamsMap(): CommandEncoder {\n\t\treturn (UniformParamsMapType.Scene as unknown as CommandEncoder);\n\t}\n\n\tget _cameraUniformParamsMap(): CommandEncoder {\n\t\treturn (UniformParamsMapType.Camera as unknown as CommandEncoder);\n\t}\n\n\tget _spriteUniformParamsMap(): CommandEncoder {\n\t\treturn (UniformParamsMapType.Sprite as unknown as CommandEncoder);\n\t}\n\n\tget _materialUniformParamsMap(): CommandEncoder {\n\t\treturn (UniformParamsMapType.Material as unknown as CommandEncoder);\n\t}\n\n\tuploadRenderStateBlendDepth(shaderDatas: ShaderData): void {\n\t\tthis._nativeObj.uploadRenderStateBlendDepth((shaderDatas as any)._nativeObj);\n\t}\n\n\tuploadRenderStateFrontFace(shaderDatas: ShaderData, isTarget: boolean, invertFront: boolean): void {\n\t\tthis._nativeObj.uploadRenderStateFrontFace((shaderDatas as any)._nativeObj, isTarget, invertFront);\n\t}\n}\n\n","import { Vector3 } from \"../../../maths/Vector3\";\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { BoundSphere } from \"../../math/BoundSphere\";\nimport { Plane } from \"../../math/Plane\";\n\n\nexport class NativeShadowCullInfo implements IShadowCullInfo {\n\n    private _position: Vector3;\n\n\tprivate _cullPlanes: Plane[];\n\n    private _direction: Vector3;\n\n    private _nativeObj: any;\n\t\n\tprivate _cullSphere: BoundSphere;\n\n\tprivate _cullPlaneCount: number;\n\n\t/**native Share Memory */\n\tstatic MemoryBlock_size: number = 4 * 8;\n\n\tprivate nativeMemory: NativeMemory;\n\t\n\tprivate float64Array: Float64Array;\n\n\tconstructor() {\n\t\tthis.nativeMemory = new NativeMemory(NativeShadowCullInfo.MemoryBlock_size, true);\n\t\tthis.float64Array = this.nativeMemory.float64Array;\n    \tthis._nativeObj = new (window as any).conchShadowCullInfo(this.nativeMemory._buffer);\n  \t}\n    set cullPlanes(cullPlanes: Plane[]) {\n\t\tthis._cullPlanes = cullPlanes;\n        this._nativeObj.clearCullPlanes();\n        cullPlanes.forEach((element) => {\n\t\t\tthis.float64Array[0] = element.normal.x;\n        \tthis.float64Array[1] = element.normal.y;\n        \tthis.float64Array[2] = element.normal.z;\n\t\t\tthis.float64Array[3] = element.distance;\n            this._nativeObj.addCullPlane();\n        });\n\t}\n\tget cullPlanes(): Plane[] {\n\t\treturn this._cullPlanes;\n\t}\n    set cullSphere(cullSphere: BoundSphere) {\n\t\tthis._cullSphere = cullSphere;\n\t\tthis.float64Array[0] = cullSphere.center.x;\n        this.float64Array[1] = cullSphere.center.y;\n        this.float64Array[2] = cullSphere.center.z;\n\t\tthis.float64Array[3] = cullSphere.radius;\n\t\tthis._nativeObj.setCullSphere();\n\t}\n\t\n\tget cullSphere(): BoundSphere {\n\t\treturn this._cullSphere;\n\t}\n    set position(position: Vector3) {\n\t\tthis._position = position;\n\t\tthis.float64Array[0] = position.x;\n        this.float64Array[1] = position.y;\n        this.float64Array[2] = position.z;\n\t\tthis._nativeObj.setPosition();\n\t} \n\n\tget position(): Vector3 {\n\t\treturn this._position;\n\t}\n    set direction(direction: Vector3) {\n\t\tthis._direction = direction;\n\t\tthis.float64Array[0] = direction.x;\n        this.float64Array[1] = direction.y;\n        this.float64Array[2] = direction.z;\n\t\tthis._nativeObj.setDirection();\n\t} \n\n\tget direction(): Vector3 {\n\t\treturn this._direction;\n\t}\n\n    set cullPlaneCount(cullPlaneCount: number) {\n\t\tthis._cullPlaneCount = cullPlaneCount;\n\t\tthis._nativeObj.cullPlaneCount = cullPlaneCount;\n\t} \n\n\tget cullPlaneCount(): number {\n\t\treturn this._cullPlaneCount;\n\t}\n}","\nimport { LayaGL } from \"../../../layagl/LayaGL\";\nimport { NativeRenderElementOBJ, RenderElementType } from \"./NativeRenderElementOBJ\";\n\nexport class NativeSkinRenderElementOBJ extends  NativeRenderElementOBJ {\n    \n    _skinnedData:Float32Array[];\n\n    constructor(){\n        super();\n    }\n    get skinnedData():Float32Array[] {\n        return this._skinnedData;\n    }\n    set skinnedData(data:Float32Array[]) {\n        this._skinnedData = data;\n        this._nativeObj._skinnedData = data;\n    }\n    init(): void {\n        this._nativeObj = new (window as any).conchRenderElement(RenderElementType.Skin, (LayaGL.renderEngine as any)._nativeObj);\n    }\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Transform3D } from \"../../core/Transform3D\";\n\n/**\n * <code>Transform3D</code> 类用于实现3D变换。\n */\nexport class NativeTransform3D  extends Transform3D {\n\n    static MemoryBlock_size: number = 16 * 4;\n\n    /**native Share Memory */\n    private nativeMemory: NativeMemory;\n    private float32Array: Float32Array;\n\tprivate float64Array: Float64Array;\n    private int32Array: Int32Array;\n\tprivate eventDispatcher: EventDispatcher;\n    _nativeObj: any;\n\n\t/**\n\t * @internal\n\t */\n\tget _isFrontFaceInvert(): boolean {\n        return this._nativeObj._isFrontFaceInvert;\n\t}\n\n\t/**\n\t * 所属精灵。\n\t */\n\tget owner(): Sprite3D {\n\t\treturn this._owner;\n\t}\n\n\t/**\n\t * 局部位置X轴分量。\n\t */\n\tget localPositionX(): number {\n\t\treturn this.localPosition.x;\n\t}\n\n\tset localPositionX(x: number) {\n\t\tthis._localPosition.x = x;\n\t\tthis.localPosition = this._localPosition;\n\t}\n\n\t/**\n\t * 局部位置Y轴分量。\n\t */\n\tget localPositionY(): number {\n\t\treturn this.localPosition.y;\n\t}\n\n\tset localPositionY(y: number) {\n\t\tthis._localPosition.y = y;\n\t\tthis.localPosition = this._localPosition;\n\t}\n\n\t/**\n\t * 局部位置Z轴分量。\n\t */\n\tget localPositionZ(): number {\n\t\treturn this.localPosition.z;\n\t}\n\n\tset localPositionZ(z: number) {\n\t\tthis._localPosition.z = z;\n\t\tthis.localPosition = this._localPosition;\n\t}\n\n\t/**\n\t * 局部位置。\n\t */\n\tget localPosition(): Vector3 {\n        if (this._nativeObj.getLocalPosition()) {\n        \tthis._localPosition.x = this.float64Array[0];\n       \t \tthis._localPosition.y = this.float64Array[1];\n        \tthis._localPosition.z = this.float64Array[2];\n\t\t}\n\t\treturn this._localPosition;\n\t}\n\n\tset localPosition(value: Vector3) {\n        this._localPosition.x = this.float64Array[0] = value.x;\n        this._localPosition.y = this.float64Array[1] = value.y;\n        this._localPosition.z = this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setLocalPosition();\n\t}\n\n\t/**\n\t * 局部旋转四元数X分量。\n\t */\n\tget localRotationX(): number {\n\t\treturn this.localRotation.x;\n\t}\n\n\tset localRotationX(x: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.x = x;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转四元数Y分量。\n\t */\n\tget localRotationY(): number {\n\t\treturn this.localRotation.y;\n\t}\n\n\tset localRotationY(y: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.y = y;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转四元数Z分量。\n\t */\n\tget localRotationZ(): number {\n\t\treturn this.localRotation.z;\n\t}\n\n\tset localRotationZ(z: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.z = z;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转四元数W分量。\n\t */\n\tget localRotationW(): number {\n\t\treturn this.localRotation.w;\n\t}\n\n\tset localRotationW(w: number) {\n\t\tlet rot = this.localRotation;\n\t\trot.w = w;\n\t\tthis.localRotation = rot;\n\t}\n\n\t/**\n\t * 局部旋转。\n\t */\n\tget localRotation(): Quaternion {\n        if (this._nativeObj.getLocalRotation()) {\n        \tthis._localRotation.x = this.float64Array[0];\n        \tthis._localRotation.y = this.float64Array[1];\n        \tthis._localRotation.z = this.float64Array[2];\n        \tthis._localRotation.w = this.float64Array[3];\n\t\t}\n\t\treturn this._localRotation;\n\t}\n\n\tset localRotation(value: Quaternion) {\n        this._localRotation.x = this.float64Array[0] = value.x;\n        this._localRotation.y = this.float64Array[1] = value.y;\n        this._localRotation.z = this.float64Array[2] = value.z;\n        this._localRotation.w = this.float64Array[3] = value.w;\n\t\tthis._nativeObj.setLocalRotation();\n\t}\n\n\t/**\n\t * 局部缩放X。\n\t */\n\tget localScaleX(): number {\n\t\treturn this.localScale.x;\n\t}\n\n\tset localScaleX(value: number) {\n\t\tthis._localScale.x = value;\n\t\tthis.localScale = this._localScale;\n\t}\n\n\t/**\n\t * 局部缩放Y。\n\t */\n\tget localScaleY(): number {\n\t\treturn this.localScale.y;\n\t}\n\n\tset localScaleY(value: number) {\n\t\tthis._localScale.y = value;\n\t\tthis.localScale = this._localScale;\n\t}\n\n\t/**\n\t * 局部缩放Z。\n\t */\n\tget localScaleZ(): number {\n\t\treturn this.localScale.z;\n\t}\n\n\tset localScaleZ(value: number) {\n\t\tthis._localScale.z = value;\n\t\tthis.localScale = this._localScale;\n\t}\n\n\t/**\n\t * 局部缩放。\n\t */\n\tget localScale(): Vector3 {\n        if (this._nativeObj.getLocalScale())\n\t\t{\n        \tthis._localScale.x = this.float64Array[0];\n        \tthis._localScale.y = this.float64Array[1];\n        \tthis._localScale.z = this.float64Array[2];\n\t\t}\n\t\treturn this._localScale;\n\t}\n\n\tset localScale(value: Vector3) {\n\t\tthis._localScale.x = this.float64Array[0] = value.x;\n        this._localScale.y = this.float64Array[1] = value.y;\n        this._localScale.z = this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setLocalScale();\n\t}\n\n\t/**\n\t * 局部空间的X轴欧拉角。\n\t */\n\tget localRotationEulerX(): number {\n\t\treturn this.localRotationEuler.x;\n\t}\n\n\tset localRotationEulerX(value: number) {\n\t\tlet rot = this.localRotationEuler;\n\t\trot.x = value;\n\t\tthis.localRotationEuler = rot;\n\t}\n\n\t/**\n\t * 局部空间的Y轴欧拉角。\n\t */\n\tget localRotationEulerY(): number {\n\t\treturn this.localRotationEuler.y;\n\t}\n\n\tset localRotationEulerY(value: number) {\n\t\tlet rot = this.localRotationEuler;\n\t\trot.y = value;\n\t\tthis.localRotationEuler = rot;\n\t}\n\n\t/**\n\t * 局部空间的Z轴欧拉角。\n\t */\n\tget localRotationEulerZ(): number {\n\t\treturn this.localRotationEuler.z;\n\t}\n\n\tset localRotationEulerZ(value: number) {\n\t\tlet rot = this.localRotationEuler;\n\t\trot.z = value;\n\t\tthis.localRotationEuler = rot;\n\t}                                                                                                      \n\n\t/**\n\t * 局部空间欧拉角。\n\t */\n\tget localRotationEuler(): Vector3 {\n\t\tif (this._nativeObj.getLocalRotationEuler()) {\n        \tthis._localRotationEuler.x = this.float64Array[0];\n       \t \tthis._localRotationEuler.y = this.float64Array[1];\n        \tthis._localRotationEuler.z = this.float64Array[2];\n\t\t}\n\t\treturn this._localRotationEuler;\n\t}\n\n\tset localRotationEuler(value: Vector3) {\n\t\tthis._localRotationEuler.x = this.float64Array[0] = value.x;\n        this._localRotationEuler.y = this.float64Array[1] = value.y;\n        this._localRotationEuler.z = this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setLocalRotationEuler();\n\t}\n\n\t/**\n\t * 局部矩阵。\n\t */\n\tget localMatrix(): Matrix4x4 {\n        if (this._nativeObj.getLocalMatrix()) {\n        \tfor (var i = 0; i < 16; ++i) {\n\t\t\t\tthis._localMatrix.elements[i] = this.float32Array[i];\n\t\t\t}\n\t\t}\n\t\treturn this._localMatrix;\n\t}\n\n\tset localMatrix(value: Matrix4x4) {\n\t\tif (this._localMatrix !== value)\n\t\t\tvalue.cloneTo(this._localMatrix);\n        this.float32Array.set(value.elements);\n\t\tthis._nativeObj.setLocalMatrix();\n\t}\n\n\t/**\n\t * 世界位置。\n\t */\n\tget position(): Vector3 {  \n        if (this._nativeObj.getPosition()) {\n        \tthis._position.x = this.float64Array[0];\n        \tthis._position.y = this.float64Array[1];\n        \tthis._position.z = this.float64Array[2];\n\t\t}\n\t\treturn this._position;\n\t}\n\n\tset position(value: Vector3) {\n        this._position.x = this.float64Array[0] = value.x;\n        this._position.y = this.float64Array[1] = value.y;\n        this._position.z = this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setPosition();\n\t}\n\n\t/**\n\t * 世界旋转。\n\t */\n\tget rotation(): Quaternion {\n\t\tif (this._nativeObj.getRotation()) {\n        \tthis._rotation.x = this.float64Array[0];\n        \tthis._rotation.y = this.float64Array[1];\n        \tthis._rotation.z = this.float64Array[2];\n        \tthis._rotation.w = this.float64Array[3];\n\t\t}\n\t\treturn this._rotation;\n\t}\n\n\tset rotation(value: Quaternion) {\n        this._rotation.x = this.float64Array[0] = value.x;\n        this._rotation.y = this.float64Array[1] = value.y;\n        this._rotation.z = this.float64Array[2] = value.z;\n        this._rotation.w = this.float64Array[3] = value.w;\n\t\tthis._nativeObj.setRotation();\n\t}\n\n\n\t/**\n\t * 世界空间的旋转角度，顺序为x、y、z。\n\t */\n\tget rotationEuler(): Vector3 {\n\t\tif (this._nativeObj.getRotationEuler()) {\n        \tthis._rotationEuler.x = this.float64Array[0];\n        \tthis._rotationEuler.y = this.float64Array[1];\n        \tthis._rotationEuler.z = this.float64Array[2];\n\t\t}\n\t\treturn this._rotationEuler;\n\t}\n\n\tset rotationEuler(value: Vector3) {\n\t\tthis._rotationEuler.x = this.float64Array[0] = value.x;\n        this._rotationEuler.y = this.float64Array[1] = value.y;\n        this._rotationEuler.z = this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setRotationEuler();\n\t}\n\n\t/**\n\t * 世界矩阵。\n\t */\n\tget worldMatrix(): Matrix4x4 {\n\t\tif (this._nativeObj.getWorldMatrix()) {\n        \tfor (var i = 0; i < 16; i++) {\n\t\t\t\tthis._worldMatrix.elements[i] = this.float32Array[i];\n\t\t\t}\n\t\t}\n\t\treturn this._worldMatrix;\n\t}\n\n\tset worldMatrix(value: Matrix4x4) {\n\t\tif (this._worldMatrix !== value)\n\t\t\tvalue.cloneTo(this._worldMatrix);\n        this.float32Array.set(value.elements);\n\t\tthis._nativeObj.setWorldMatrix();\n\t}\n\n\t/**\n\t * 创建一个 <code>Transform3D</code> 实例。\n\t * @param owner 所属精灵。\n\t */\n\tconstructor(owner: Sprite3D) {\n\t\tsuper(owner);\n        //native memory\n        this.nativeMemory = new NativeMemory(NativeTransform3D.MemoryBlock_size, true);\n        this.float32Array = this.nativeMemory.float32Array;\n\t\tthis.float64Array = this.nativeMemory.float64Array;\n        this.int32Array = this.nativeMemory.int32Array;\n\t\tthis.eventDispatcher = new EventDispatcher();\n        this._nativeObj = new (window as any).conchTransform(this.nativeMemory._buffer, this.eventDispatcher.event.bind(this.eventDispatcher));\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t _setTransformFlag(type: number, value: boolean): void {\n\t\tthis._nativeObj && this._nativeObj._setTransformFlag(type, value);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_getTransformFlag(type: number): boolean {\n\t\treturn this._nativeObj._getTransformFlag(type);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_setParent(value: Transform3D): void {\n        this._nativeObj.setParent(value ? (value as any)._nativeObj : null);\n\t}\n\n\t/**\n\t * 平移变换。\n\t * @param \ttranslation 移动距离。\n\t * @param \tisLocal 是否局部空间。\n\t */\n\ttranslate(translation: Vector3, isLocal: boolean = true): void {\n\t\tthis.float64Array[0] = translation.x;\n        this.float64Array[1] = translation.y;\n        this.float64Array[2] = translation.z;\n        this.int32Array[6] = isLocal ? 1 : 0;\n\t\tthis._nativeObj.translate();\n\t}\n\n\t/**\n\t * 旋转变换。\n\t * @param \trotations 旋转幅度。\n\t * @param \tisLocal 是否局部空间。\n\t * @param \tisRadian 是否弧度制。\n\t */\n\trotate(rotation: Vector3, isLocal: boolean = true, isRadian: boolean = true): void {\n\t\tthis.float64Array[0] = rotation.x;\n        this.float64Array[1] = rotation.y;\n        this.float64Array[2] = rotation.z;\n        this.int32Array[6] = isLocal ? 1 : 0;\n        this.int32Array[7] = isRadian ? 1 : 0;\n\t\tthis._nativeObj.rotate();\n\t}\n\n\t/**\n\t * 获取向前方向。\n\t * @param forward 前方向。\n\t */\n\tgetForward(forward: Vector3): void {\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\n\t\tforward.x = -worldMatElem[8];\n\t\tforward.y = -worldMatElem[9];\n\t\tforward.z = -worldMatElem[10];\n\t}\n\n\t/**\n\t * 获取向上方向。\n\t * @param up 上方向。\n\t */\n\tgetUp(up: Vector3): void {\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\n\t\tup.x = worldMatElem[4];\n\t\tup.y = worldMatElem[5];\n\t\tup.z = worldMatElem[6];\n\t}\n\n\t/**\n\t * 获取向右方向。\n\t * @param 右方向。\n\t */\n\tgetRight(right: Vector3): void {\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\n\t\tright.x = worldMatElem[0];\n\t\tright.y = worldMatElem[1];\n\t\tright.z = worldMatElem[2];\n\t}\n\n\t/**\n\t * 观察目标位置。\n\t * @param\ttarget 观察目标。\n\t * @param\tup 向上向量。\n\t * @param\tisLocal 是否局部空间。\n\t */\n\tlookAt(target: Vector3, up: Vector3, isLocal: boolean = false,isCamera:boolean = true): void {\n\t\tthis.float64Array[0] = target.x;\n        this.float64Array[1] = target.y;\n        this.float64Array[2] = target.z;\n        this.float64Array[3] = up.x;\n        this.float64Array[4] = up.y;\n        this.float64Array[5] = up.z;\n        this.int32Array[12] = isLocal ? 1 : 0;\n        this.int32Array[13] = isCamera ? 1 : 0;\n\t\tthis._nativeObj.lookAt();\n\t}\n\n\t/**\n\t * 对象朝向目标\n\t * @param target \n\t * @param up \n\t * @param isLocal \n\t */\n\tobjLookat(target: Vector3, up: Vector3, isLocal: boolean = false):void{\n\n\t}\n\n\t\n\n\t/**\n\t * 世界缩放。\n\t * 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\n\t * @return\t世界缩放。\n\t */\n\tgetWorldLossyScale(): Vector3 {\n        if (this._nativeObj.getWorldLossyScale()) {\n        \tthis._scale.x = this.float64Array[0];\n        \tthis._scale.y = this.float64Array[1];\n        \tthis._scale.z = this.float64Array[2];\n\t\t}\n\t\treturn this._scale;\n\t}\n\n\t/**\n\t * 设置世界缩放。\n\t * 某种条件下设置该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\n\t * @return\t世界缩放。\n\t */\n\tsetWorldLossyScale(value: Vector3) {\n\t\tthis._scale.x = this.float64Array[0] = value.x;\n        this._scale.y = this.float64Array[1] = value.y;\n        this._scale.z = this.float64Array[2] = value.z;\n\t\tthis._nativeObj.setWorldLossyScale();\n\t}\n\thasListener(type: string): boolean {\n        return this.eventDispatcher.hasListener(type);\n    }\n\n    event(type: string, data?: any): boolean {\n        return this.eventDispatcher.event(type, data);\n    }\n\n    on(type: string, listener: Function): EventDispatcher;\n    on(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;\n    on(type: string, caller: any, listener?: Function, args?: any[]): EventDispatcher {\n\t\tif (arguments.length == 2) {\n            listener = caller;\n            caller = null;\n        }\n\t\treturn this.eventDispatcher.on(type, caller, listener, args);\n    }\n\n    once(type: string, listener: Function): EventDispatcher;\n    once(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;\n    once(type: string, caller: any, listener?: Function, args?: any[]): EventDispatcher {\n\t\tif (arguments.length == 2) {\n            listener = caller;\n            caller = null;\n        }\n\t\treturn this.eventDispatcher.once(type, caller, listener, args);\n    }\n\n    off(type: string, listener: Function): EventDispatcher;\n    off(type: string, caller: any, listener?: Function, args?: any[]): EventDispatcher;\n    off(type: string, caller: any, listener?: Function): EventDispatcher {\n\t\tif (arguments.length == 2) {\n            listener = caller;\n            caller = null;\n        }\n\t\treturn this.eventDispatcher.off(type, caller, listener);\n    }\n\n    offAll(type?: string): EventDispatcher {\n        return this.eventDispatcher.offAll(type);\n    }\n\n    offAllCaller(caller: any): EventDispatcher {\n        return this.eventDispatcher.offAllCaller(caller);\n    }\n}\n\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\n\n\nexport class NativeUniformBufferObject extends UniformBufferObject{\n    _conchUniformBufferObject:any = null;\n\n    constructor(glPointer: number, name: string, bufferUsage: BufferUsage, byteLength: number, isSingle: boolean) {\n        super(glPointer, name, bufferUsage, byteLength, isSingle);\n        this._conchUniformBufferObject = new (window as any).conchUniformBufferObject((LayaGL.renderEngine as any)._nativeObj, glPointer);\n        this._conchUniformBufferObject.setGLBuffer(this._glBuffer);\n    }\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\n\n\nexport class NativeVertexBuffer3D extends VertexBuffer3D {\n\n\n    _conchVertexBuffer3D:any = null;\n\n    /**\n     * 获取顶点声明。\n     */\n    get vertexDeclaration(): VertexDeclaration | null {\n        return this._vertexDeclaration;\n    }\n\n    set vertexDeclaration(value: VertexDeclaration | null) {\n        this._vertexDeclaration = value;\n        this._conchVertexBuffer3D.setVertexDeclaration( this.serilizeVertexDeclaration(value) );\n    }\n\n    serilizeVertexDeclaration(value: VertexDeclaration): Int32Array {\n        let array = new Int32Array(value._vertexElements.length * 6);\n        let offset = 0;\n        var valueData: any = value._shaderValues;\n        for (var k in valueData) {\n            var loc: number = parseInt(k);\n            var attribute: Int32Array = valueData[k];\n            array[offset++] = loc;\n            array.set(attribute, offset);\n            offset += 5;\n        }\n        return array;\n    }\n\n    get instanceBuffer(): boolean {\n\t\treturn this._conchVertexBuffer3D._instanceBuffer;\n\t}\n\n\tset instanceBuffer(value: boolean) {\n\t\tthis._conchVertexBuffer3D._instanceBuffer = value;\n\t}\n    /**\n     * 创建一个 <code>VertexBuffer3D</code> 实例。\n     * @param\tbyteLength 字节长度。\n     * @param\tbufferUsage VertexBuffer3D用途类型。\n     * @param\tcanRead 是否可读。\n     */\n    constructor(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\n        super(byteLength, bufferUsage, canRead);\n        this._conchVertexBuffer3D = new (window as any).conchVertexBuffer3D( (LayaGL.renderEngine as any)._nativeObj,byteLength,bufferUsage,false);\n        this._conchVertexBuffer3D.setGLBuffer(this._glBuffer);\n    }\n}","import { Vector3 } from \"../../../maths/Vector3\";\nimport { NativeRenderStateCommand } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/NativeRenderStateCommand\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { IRenderOBJCreate } from \"../../../RenderEngine/RenderInterface/IRenderOBJCreate\";\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\nimport { ShaderCompileDefineBase } from \"../../../webgl/utils/ShaderCompileDefineBase\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Transform3D } from \"../../core/Transform3D\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { NativeBaseRenderNode } from \"./NativeBaseRenderNode\";\nimport { NativeBaseRenderQueue } from \"./NativeBaseRenderQueue\";\nimport { NativeBounds } from \"./NativeBounds\";\nimport { NativeCameraCullInfo } from \"./NativeCameraCullInfo\";\nimport { NativeCommandUniformMap } from \"./NativeCommandUniformMap\";\nimport { NativeCullPassBase } from \"./NativeCullPass\";\nimport { NativeIndexBuffer3D } from \"./NativeIndexBuffer3D\";\nimport { NativeInstanceRenderElementOBJ } from \"./NativeInstanceRenderElementOBJ\";\nimport { NativeRenderContext3DOBJ } from \"./NativeRenderContext3DOBJ\";\nimport { NativeRenderElementOBJ } from \"./NativeRenderElementOBJ\";\nimport { NativeRenderGeometryElementOBJ } from \"./NativeRenderGeometryElementOBJ\";\nimport { NativeRenderState } from \"./NativeRenderState\";\nimport { NativeSceneRenderManager } from \"./NativeSceneRenderManager\";\nimport { NativeShaderData } from \"./NativeShaderData\";\nimport { NativeShaderInstance } from \"./NativeShaderInstance\";\nimport { NativeShadowCullInfo } from \"./NativeShadowCullInfo\";\nimport { NativeSkinRenderElementOBJ } from \"./NativeSkinRenderElementOBJ\";\nimport { NativeTransform3D } from \"./NativeTransform3D\";\nimport { NativeUniformBufferObject } from \"./NativeUniformBufferObject\";\nimport { NativeVertexBuffer3D } from \"./NativeVertexBuffer3D\";\n\n\nexport class NativeRenderOBJCreateUtil implements IRenderOBJCreate {\n\n    createTransform(owner: Sprite3D): Transform3D {\n        return new NativeTransform3D(owner);\n    }\n\n    createBounds(min: Vector3, max: Vector3): any {\n        return new NativeBounds(min, max);\n    }\n\n    createShaderData(): ShaderData {\n        return new NativeShaderData();\n    }\n\n    createRenderElement(): IRenderElement {\n        return new NativeRenderElementOBJ();\n    }\n    createSkinRenderElement(): IRenderElement {\n        return new NativeSkinRenderElementOBJ();\n    }\n    createInstanceRenderElement(): IRenderElement {\n        return new NativeInstanceRenderElementOBJ();\n    }\n    createBaseRenderQueue(isTransparent: boolean): IRenderQueue {\n        var queue: NativeBaseRenderQueue = new NativeBaseRenderQueue(isTransparent);\n        queue.sortPass = this.createSortPass();\n        return queue;\n    }\n\n    createRenderGeometry(mode: MeshTopology, drayType: DrawType): IRenderGeometryElement {\n        return new NativeRenderGeometryElementOBJ(mode, drayType);\n    }\n\n    createVertexBuffer3D(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\n        return new NativeVertexBuffer3D(byteLength, bufferUsage, canRead);\n    }\n\n    createIndexBuffer3D(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false): IndexBuffer3D {\n        return new NativeIndexBuffer3D(indexType, indexCount, bufferUsage, canRead);\n    }\n\n    createShaderInstance(vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }, shaderPass: ShaderCompileDefineBase): ShaderInstance {\n        return new NativeShaderInstance(vs, ps, attributeMap, shaderPass) as unknown as ShaderInstance;\n    }\n\n    createBaseRenderNode(): IBaseRenderNode {\n        return new NativeBaseRenderNode();\n    }\n\n    createRenderContext3D(): IRenderContext3D {\n        return new NativeRenderContext3DOBJ();\n    }\n\n    createSceneRenderManager(): ISceneRenderManager {\n        return new NativeSceneRenderManager();\n    }\n\n    createCullPass(): ICullPass {\n        return new NativeCullPassBase();\n    }\n\n    createSortPass(): ISortPass {\n        return new (window as any).conchQuickSort();\n    }\n\n    createShadowCullInfo(): IShadowCullInfo {\n        return new NativeShadowCullInfo();\n    }\n\n    createCameraCullInfo(): ICameraCullInfo {\n        return new NativeCameraCullInfo();\n    }\n\n    createRenderStateComand(): NativeRenderStateCommand {\n        return new NativeRenderStateCommand();\n    }\n    createRenderState(): RenderState {\n        return new NativeRenderState() as unknown as RenderState;\n    }\n\n    createUniformBufferObject(glPointer: number, name: string, bufferUsage: BufferUsage, byteLength: number, isSingle: boolean): UniformBufferObject {\n        return new NativeUniformBufferObject(glPointer, name, bufferUsage, byteLength, isSingle);\n    }\n\n    createGlobalUniformMap(blockName: string): NativeCommandUniformMap{\n        return new NativeCommandUniformMap((window as any).conchCommandUniformMap.createGlobalUniformMap(blockName), blockName);\n    }\n}","import { Config3D } from \"./Config3D\";\r\nimport { ILaya3D } from \"./ILaya3D\";\r\nimport { Laya } from \"./Laya\";\r\nimport { PostProcess } from \"./laya/d3/component/PostProcess\";\r\nimport { BlinnPhongMaterial } from \"./laya/d3/core/material/BlinnPhongMaterial\";\r\nimport { Material } from \"./laya/d3/core/material/Material\";\r\nimport { PBRMaterial } from \"./laya/d3/core/material/PBRMaterial\";\r\nimport { PBRStandardMaterial } from \"./laya/d3/core/material/PBRStandardMaterial\";\r\nimport { SkyBoxMaterial } from \"./laya/d3/core/material/SkyBoxMaterial\";\r\nimport { SkyProceduralMaterial } from \"./laya/d3/core/material/SkyProceduralMaterial\";\r\nimport { UnlitMaterial } from \"./laya/d3/core/material/UnlitMaterial\";\r\nimport { MeshRenderer } from \"./laya/d3/core/MeshRenderer\";\r\nimport { MeshSprite3D } from \"./laya/d3/core/MeshSprite3D\";\r\nimport { ShuriKenParticle3D } from \"./laya/d3/core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { ShurikenParticleMaterial } from \"./laya/d3/core/particleShuriKen/ShurikenParticleMaterial\";\r\nimport { PixelLineVertex } from \"./laya/d3/core/pixelLine/PixelLineVertex\";\r\nimport { Command } from \"./laya/d3/core/render/command/Command\";\r\nimport { RenderContext3D } from \"./laya/d3/core/render/RenderContext3D\";\r\nimport { ScreenQuad } from \"./laya/d3/core/render/ScreenQuad\";\r\nimport { RenderableSprite3D } from \"./laya/d3/core/RenderableSprite3D\";\r\nimport { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\r\nimport { SkinnedMeshSprite3D } from \"./laya/d3/core/SkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"./laya/d3/core/Sprite3D\";\r\nimport { TrailMaterial } from \"./laya/d3/core/trail/TrailMaterial\";\r\nimport { TrailSprite3D } from \"./laya/d3/core/trail/TrailSprite3D\";\r\nimport { VertexTrail } from \"./laya/d3/core/trail/VertexTrail\";\r\nimport { FrustumCulling } from \"./laya/d3/graphics/FrustumCulling\";\r\nimport { SubMeshInstanceBatch } from \"./laya/d3/graphics/SubMeshInstanceBatch\";\r\nimport { VertexPositionTerrain } from \"./laya/d3/graphics/Vertex/VertexPositionTerrain\";\r\nimport { VertexPositionTexture0 } from \"./laya/d3/graphics/Vertex/VertexPositionTexture0\";\r\nimport { VertexShurikenParticleBillboard } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { BulletInteractive } from \"./laya/d3/physics/BulletInteractive\";\r\nimport { Mesh } from \"./laya/d3/resource/models/Mesh\";\r\nimport { PrimitiveMesh } from \"./laya/d3/resource/models/PrimitiveMesh\";\r\nimport { SkyBox } from \"./laya/d3/resource/models/SkyBox\";\r\nimport { SkyDome } from \"./laya/d3/resource/models/SkyDome\";\r\nimport { TextureCube } from \"./laya/d3/resource/TextureCube\";\r\nimport { ShaderInit3D } from \"./laya/d3/shader/ShaderInit3D\";\r\nimport { LayaGL } from \"./laya/layagl/LayaGL\";\r\nimport { Render } from \"./laya/renders/Render\";\r\nimport { Texture2D } from \"./laya/resource/Texture2D\";\r\nimport { Handler } from \"./laya/utils/Handler\";\r\nimport { RunDriver } from \"./laya/utils/RunDriver\";\r\nimport { WebGL } from \"./laya/webgl/WebGL\";\r\nimport { ShadowUtils } from \"./laya/d3/core/light/ShadowUtils\";\r\nimport { ShadowCasterPass } from \"./laya/d3/shadowMap/ShadowCasterPass\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"./laya/d3/core/SimpleSkinnedMeshSprite3D\";\r\nimport { HalfFloatUtils } from \"./laya/utils/HalfFloatUtils\";\r\nimport { Physics3D } from \"./laya/d3/Physics3D\";\r\nimport { Camera } from \"./laya/d3/core/Camera\";\r\nimport { BaseCamera } from \"./laya/d3/core/BaseCamera\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./laya/d3/core/particleShuriKen/ShuriKenParticle3DShaderDeclaration\";\r\nimport { BaseRender } from \"./laya/d3/core/render/BaseRender\";\r\nimport { TrailFilter } from \"./laya/d3/core/trail/TrailFilter\";\r\nimport { DepthPass } from \"./laya/d3/depthMap/DepthPass\";\r\nimport { RenderCapable } from \"./laya/RenderEngine/RenderEnum/RenderCapable\";\r\nimport { BlitFrameBufferCMD } from \"./laya/d3/core/render/command/BlitFrameBufferCMD\";\r\nimport { SkyRenderer } from \"./laya/d3/resource/models/SkyRenderer\";\r\nimport { SkyPanoramicMaterial } from \"./laya/d3/core/material/SkyPanoramicMaterial\";\r\nimport { BloomEffect } from \"./laya/d3/core/render/PostEffect/BloomEffect\";\r\nimport { ScalableAO } from \"./laya/d3/core/render/PostEffect/ScalableAO\";\r\nimport { GaussianDoF } from \"./laya/d3/core/render/PostEffect/GaussianDoF\";\r\nimport { LayaEnv } from \"./LayaEnv\";\r\nimport { SkinnedMeshRenderer } from \"./laya/d3/core/SkinnedMeshRenderer\";\r\nimport { RenderOBJCreateUtil } from \"./laya/d3/RenderObjs/RenderObj/RenderOBJCreateUtil\";\r\nimport { NativeRenderOBJCreateUtil } from \"./laya/d3/RenderObjs/NativeOBJ/NativeRenderOBJCreateUtil\";\r\nimport { SubShader } from \"./laya/RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"./laya/RenderEngine/RenderShader/VertexMesh\";\r\nimport { RenderTexture } from \"./laya/resource/RenderTexture\";\r\nimport { ColorGradEffect } from \"./laya/d3/core/render/PostEffect/ColorGradEffect\";\r\n\r\n/**\r\n * <code>Laya3D</code> 类用于初始化3D设置。\r\n */\r\nexport class Laya3D {\r\n\r\n    /**\r\n     * 获取是否可以启用物理。\r\n     * @param 是否启用物理。\r\n     */\r\n    static get enablePhysics(): any {\r\n        return Physics3D._enablePhysics;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    static _changeWebGLSize(width: number, height: number): void {\r\n        WebGL.onStageResize(width, height);\r\n        RenderContext3D.clientWidth = width;\r\n        RenderContext3D.clientHeight = height;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    static __init__(checkPhysics?: boolean): Promise<void> {\r\n        if (checkPhysics !== false) {\r\n            let physics3D: Function = (window as any).Physics3D;\r\n            if (physics3D == null)\r\n                Physics3D._enablePhysics = false;\r\n            else {\r\n                Physics3D._enablePhysics = true;\r\n                //physics3D返回的可能不是正经的promise，所以包一下\r\n                return new Promise<void>(resolve => {\r\n                    physics3D(Math.max(16, Config3D.defaultPhysicsMemory) * 16, new BulletInteractive(null, null)).then(() => {\r\n                        Laya3D.__init__(false).then(resolve);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        Laya3D.createRenderObjInit();\r\n        if (LayaEnv.isConch && !(window as any).conchConfig.conchWebGL) {\r\n            var skinnedMeshRender: any = SkinnedMeshRenderer;\r\n            skinnedMeshRender.prototype._computeSkinnedData = skinnedMeshRender.prototype._computeSkinnedDataForNative;\r\n        }\r\n        Config3D._multiLighting = Config3D.enableMultiLight && LayaGL.renderEngine.getCapable(RenderCapable.TextureFormat_R32G32B32A32);\r\n        Config3D._uniformBlock = Config3D.enableUniformBufferObject && LayaGL.renderEngine.getCapable(RenderCapable.UnifromBufferObject);\r\n\r\n        if (Config3D.maxLightCount > 2048) {\r\n            Config3D.maxLightCount = 2048;\r\n            console.warn(\"Config3D: maxLightCount must less equal 2048.\");\r\n        }\r\n\r\n        let lcc = Config3D.lightClusterCount;\r\n        if (lcc.x > 128 || lcc.y > 128 || lcc.z > 128) {\r\n            lcc.setValue(Math.min(lcc.x, 128), Math.min(lcc.y, 128), Math.min(lcc.z, 128));\r\n            console.warn(\"Config3D: lightClusterCount X and Y、Z must less equal 128.\");\r\n        }\r\n\r\n        let maxAreaLightCountWithZ = Math.floor(2048 / Config3D.lightClusterCount.z - 1) * 4;\r\n        if (maxAreaLightCountWithZ < Config3D.maxLightCount)\r\n            console.warn(\"Config3D: if the area light(PointLight、SpotLight) count is large than \" + maxAreaLightCountWithZ + \",maybe the far away culster will ingonre some light.\");\r\n        Config3D._maxAreaLightCountPerClusterAverage = Math.min(maxAreaLightCountWithZ, Config3D.maxLightCount);\r\n\r\n        ILaya3D.Scene3D = Scene3D;\r\n        ILaya3D.Laya3D = Laya3D;\r\n        ILaya3D.Physics3D = Physics3D;\r\n\r\n        Physics3D.__bulletinit__();\r\n        SubShader.__init__();\r\n        VertexMesh.__init__();\r\n        VertexShurikenParticleBillboard.__init__();\r\n        VertexShurikenParticleMesh.__init__();\r\n        VertexPositionTexture0.__init__();\r\n        VertexTrail.__init__();\r\n        VertexPositionTerrain.__init__();\r\n        PixelLineVertex.__init__();\r\n        SubMeshInstanceBatch.__init__();\r\n        ShaderInit3D.__init__();\r\n        ShuriKenParticle3DShaderDeclaration.__init__();\r\n        SimpleSkinnedMeshSprite3D.__init__();\r\n        PBRMaterial.__init__();\r\n        PBRStandardMaterial.__init__();\r\n        SkyPanoramicMaterial.__init__();\r\n        BloomEffect.init();\r\n        ScalableAO.init();\r\n        GaussianDoF.init();\r\n        ColorGradEffect.init();\r\n\r\n        Mesh.__init__();\r\n        PrimitiveMesh.__init__();\r\n        Sprite3D.__init__();\r\n        RenderableSprite3D.__init__();\r\n        MeshSprite3D.__init__();\r\n        DepthPass.__init__();\r\n        SkinnedMeshSprite3D.__init__();\r\n        SimpleSkinnedMeshSprite3D.__init__();\r\n        TrailFilter.__init__();\r\n        ShuriKenParticle3D.__init__();\r\n        TrailSprite3D.__init__();\r\n        PostProcess.__init__();\r\n        Scene3D.__init__();\r\n        ShadowCasterPass.__init__();\r\n        BaseCamera.__init__();\r\n        BaseRender.__init__();\r\n        MeshRenderer.__init__();\r\n        SkyRenderer.__init__();\r\n        Camera.__init__();\r\n        ShadowUtils.init();\r\n        RenderContext3D.__init__();\r\n        RenderTexture.configRenderContextInstance(RenderContext3D._instance);\r\n        Material.__initDefine__();\r\n        BlinnPhongMaterial.__initDefine__();\r\n        // PBRStandardMaterial.__initDefine__();\r\n        // PBRSpecularMaterial.__initDefine__();\r\n        SkyProceduralMaterial.__initDefine__();\r\n        UnlitMaterial.__initDefine__();\r\n        TrailMaterial.__initDefine__();\r\n\r\n        // EffectMaterial.__initDefine__();\r\n        // WaterPrimaryMaterial.__initDefine__();\r\n        ShurikenParticleMaterial.__initDefine__();\r\n        // ExtendTerrainMaterial.__initDefine__();\r\n        // PixelLineMaterial.__initDefine__();\r\n        SkyBoxMaterial.__initDefine__();\r\n        // BloomEffect.__init__();\r\n\r\n        Command.__init__();\r\n        BlitFrameBufferCMD.__init__();\r\n\r\n        // PixelLineMaterial.defaultMaterial = new PixelLineMaterial();\r\n        BlinnPhongMaterial.defaultMaterial = new BlinnPhongMaterial();\r\n        BlinnPhongMaterial.defaultMaterial.lock = true;\r\n        // EffectMaterial.defaultMaterial = new EffectMaterial();\r\n        // PBRStandardMaterial.defaultMaterial = new PBRStandardMaterial();\r\n        // PBRSpecularMaterial.defaultMaterial = new PBRSpecularMaterial();\r\n        // UnlitMaterial.defaultMaterial = new UnlitMaterial();\r\n        // ShurikenParticleMaterial.defaultMaterial = new ShurikenParticleMaterial();\r\n        // TrailMaterial.defaultMaterial = new TrailMaterial();\r\n        // SkyProceduralMaterial.defaultMaterial = new SkyProceduralMaterial();\r\n        // SkyBoxMaterial.defaultMaterial = new SkyBoxMaterial();\r\n        // WaterPrimaryMaterial.defaultMaterial = new WaterPrimaryMaterial();\r\n\r\n        // PixelLineMaterial.defaultMaterial.lock = true;//todo:\r\n        // BlinnPhongMaterial.defaultMaterial.lock = true;\r\n        // EffectMaterial.defaultMaterial.lock = true;\r\n        // // PBRStandardMaterial.defaultMaterial.lock = true;\r\n        // // PBRSpecularMaterial.defaultMaterial.lock = true;\r\n        // // UnlitMaterial.defaultMaterial.lock = true;\r\n        // ShurikenParticleMaterial.defaultMaterial.lock = true;\r\n        // TrailMaterial.defaultMaterial.lock = true;\r\n        // SkyProceduralMaterial.defaultMaterial.lock = true;\r\n        // SkyBoxMaterial.defaultMaterial.lock = true;\r\n        // WaterPrimaryMaterial.defaultMaterial.lock = true;\r\n        Texture2D.__init__();\r\n        TextureCube.__init__();\r\n        SkyBox.__init__();\r\n        SkyDome.__init__();\r\n        ScreenQuad.__init__();\r\n        FrustumCulling.__init__();\r\n        HalfFloatUtils.__init__();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * 初始化Laya3D相关设置。\r\n     * @deprecated use Laya.init instead.\r\n     */\r\n    static init(width: number, height: number, config: any = null, complete: Handler = null): void {\r\n        Laya.init(width, height).then(() => {\r\n            complete && complete.run();\r\n        });\r\n    }\r\n\r\n    static createRenderObjInit() {\r\n        if (LayaEnv.isConch && !(window as any).conchConfig.conchWebGL) {\r\n            LayaGL.renderEngine._renderOBJCreateContext = new NativeRenderOBJCreateUtil();\r\n            LayaGL.renderOBJCreate = LayaGL.renderEngine.getCreateRenderOBJContext();\r\n        } else {\r\n            LayaGL.renderEngine._renderOBJCreateContext = new RenderOBJCreateUtil();\r\n            LayaGL.renderOBJCreate = LayaGL.renderEngine.getCreateRenderOBJContext();\r\n        }\r\n\r\n    }\r\n}\r\n\r\n(window as any).Laya3D = Laya3D;\r\n\r\n","/**\n * <code>AnimatorStateScript</code> 类用于动画状态脚本的父类,该类为抽象类,不允许实例。\n */\nexport class AnimatorStateScript {\n\n\t/**\n\t * 创建一个新的 <code>AnimatorStateScript</code> 实例。\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * 动画状态开始时执行。\n\t */\n\tonStateEnter(): void {\n\n\t}\n\n\t/**\n\t * 动画状态运行中\n\t * @param normalizeTime 0-1动画播放状态\n\t */\n\tonStateUpdate(normalizeTime: number): void {\n\n\t}\n\n\t/**\n\t * 动画状态退出时执行。\n\t */\n\tonStateExit(): void {\n\n\t}\n\n}\n\n\n","/**\n\t * <code>Rand</code> 类用于通过128位整型种子创建随机数,算法来自:https://github.com/AndreasMadsen/xorshift。\n\t */\nexport class RandX {\n\t/**@internal */\n\tprivate static _CONVERTION_BUFFER: DataView = new DataView(new ArrayBuffer(8));\n\n\t/**@internal */\n\tprivate _state0U: number;\n\t/**@internal */\n\tprivate _state0L: number;\n\t/**@internal */\n\tprivate _state1U: number;\n\t/**@internal */\n\tprivate _state1L: number;\n\n\t/**基于时间种子的随机数。*/\n\tstatic defaultRand: RandX = new RandX([0, Date.now() / 65536, 0, Date.now() % 65536]);\n\n\t/**\n\t * 创建一个 <code>Rand</code> 实例。\n\t * @param\tseed  随机种子。\n\t */\n\tconstructor(seed: any[]) {\n\t\tif (!(seed instanceof Array) || seed.length !== 4)\n\t\t\tthrow new Error('Rand:Seed must be an array with 4 numbers');\n\n\t\tthis._state0U = seed[0] | 0;\n\t\tthis._state0L = seed[1] | 0;\n\t\tthis._state1U = seed[2] | 0;\n\t\tthis._state1L = seed[3] | 0;\n\t}\n\n\t/**\n\t * 通过2x32位的数组，返回64位的随机数。\n\t * @return 64位的随机数。\n\t */\n\trandomint(): any[] {\n\t\t// uint64_t s1 = s[0]\n\t\tvar s1U: number = this._state0U, s1L: number = this._state0L;\n\t\t// uint64_t s0 = s[1]\n\t\tvar s0U: number = this._state1U, s0L: number = this._state1L;\n\n\t\t// result = s0 + s1\n\t\tvar sumL: number = (s0L >>> 0) + (s1L >>> 0);\n\t\tvar resU: number = (s0U + s1U + (sumL / 2 >>> 31)) >>> 0;\n\t\tvar resL: number = sumL >>> 0;\n\n\t\t// s[0] = s0\n\t\tthis._state0U = s0U;\n\t\tthis._state0L = s0L;\n\n\t\t// - t1 = [0, 0]\n\t\tvar t1U: number = 0, t1L: number = 0;\n\t\t// - t2 = [0, 0]\n\t\tvar t2U: number = 0, t2L: number = 0;\n\n\t\t// s1 ^= s1 << 23;\n\t\t// :: t1 = s1 << 23\n\t\tvar a1: number = 23;\n\t\tvar m1: number = 0xFFFFFFFF << (32 - a1);\n\t\tt1U = (s1U << a1) | ((s1L & m1) >>> (32 - a1));\n\t\tt1L = s1L << a1;\n\t\t// :: s1 = s1 ^ t1\n\t\ts1U = s1U ^ t1U;\n\t\ts1L = s1L ^ t1L;\n\n\t\t// t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\n\t\t// :: t1 = s1 ^ s0\n\t\tt1U = s1U ^ s0U;\n\t\tt1L = s1L ^ s0L;\n\t\t// :: t2 = s1 >> 18\n\t\tvar a2: number = 18;\n\t\tvar m2: number = 0xFFFFFFFF >>> (32 - a2);\n\t\tt2U = s1U >>> a2;\n\t\tt2L = (s1L >>> a2) | ((s1U & m2) << (32 - a2));\n\t\t// :: t1 = t1 ^ t2\n\t\tt1U = t1U ^ t2U;\n\t\tt1L = t1L ^ t2L;\n\t\t// :: t2 = s0 >> 5\n\t\tvar a3: number = 5;\n\t\tvar m3: number = 0xFFFFFFFF >>> (32 - a3);\n\t\tt2U = s0U >>> a3;\n\t\tt2L = (s0L >>> a3) | ((s0U & m3) << (32 - a3));\n\t\t// :: t1 = t1 ^ t2\n\t\tt1U = t1U ^ t2U;\n\t\tt1L = t1L ^ t2L;\n\n\t\t// s[1] = t1\n\t\tthis._state1U = t1U;\n\t\tthis._state1L = t1L;\n\n\t\t// return result\n\t\treturn [resU, resL];\n\t}\n\n\t/**\n\t * 返回[0,1)之间的随机数。\n\t * @return\n\t */\n\trandom(): number {\n\t\t// :: t2 = randomint()\n\t\tvar t2: any[] = this.randomint();\n\t\tvar t2U: number = t2[0];\n\t\tvar t2L: number = t2[1];\n\n\t\t// :: e = UINT64_C(0x3FF) << 52\n\t\tvar eU: number = 0x3FF << (52 - 32);\n\t\tvar eL: number = 0;\n\n\t\t// :: s = t2 >> 12\n\t\tvar a1: number = 12;\n\t\tvar m1: number = 0xFFFFFFFF >>> (32 - a1);\n\t\tvar sU: number = t2U >>> a1;\n\t\tvar sL: number = (t2L >>> a1) | ((t2U & m1) << (32 - a1));\n\n\t\t// :: x = e | s\n\t\tvar xU: number = eU | sU;\n\t\tvar xL: number = eL | sL;\n\n\t\t// :: double d = *((double *)&x)\n\t\tRandX._CONVERTION_BUFFER.setUint32(0, xU, false);\n\t\tRandX._CONVERTION_BUFFER.setUint32(4, xL, false);\n\t\tvar d: number = RandX._CONVERTION_BUFFER.getFloat64(0, false);\n\n\t\t// :: d - 1\n\t\treturn d - 1;\n\t}\n}\n\n\n","import { Color } from \"../../maths/Color\";\n\n\t\n\t/**\n\t * <code>TextMesh</code> 类用于创建文本网格。\n\t */\n\texport class TextMesh {\n\t\tprivate _text:string;\n\t\tprivate _fontSize:number;\n\t\tprivate _color:Color;\n\t\t\n\t\t/**\n\t\t * 获取文本。\n\t\t * @return 文本。\n\t\t */\n\t\t get text():string {\n\t\t\treturn this._text;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 设置文本。\n\t\t * @param value 文本。\n\t\t */\n\t\t set text(value:string) {\n\t\t\tthis._text = value;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 获取字体尺寸。\n\t\t * @param  value 字体尺寸。\n\t\t */\n\t\t get fontSize():number {\n\t\t\treturn this._fontSize;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 设置字体储存。\n\t\t * @return 字体尺寸。\n\t\t */\n\t\t set fontSize(value:number) {\n\t\t\tthis._fontSize = value;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 获取颜色。\n\t\t * @return 颜色。\n\t\t */\n\t\t get color():Color {\n\t\t\treturn this._color;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 设置颜色。\n\t\t * @param 颜色。\n\t\t */\n\t\t set color(value:Color) {\n\t\t\tthis._color = value;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 创建一个新的 <code>TextMesh</code> 实例。\n\t\t */\n\t\tconstructor(){\n\t\t\n\t\t}\n\t\t\n\t\n\t\t// private _createVertexBuffer(charCount:number):void {\n\t\t// }\n\t\t\n\t\n\t\t// private _resizeVertexBuffer(charCount:number):void {\n\t\t\n\t\t// }\n\t\t\n\t\n\t\t// private _addChar():void {\n\t\t// \t//_vertexBuffer\n\t\t// }\n\t\n\t}\n\n\n","import { RenderContext3D } from \"../core/render/RenderContext3D\"\n\t/**\n\t * \n\t */\n\texport class Size {\n\t\t/**\n\t\t * 全局场景的屏幕大小\n\t\t */\n\t\t static get fullScreen():Size {\n\t\t\treturn new Size(-1, -1);\n\t\t}\n\t\t\n\t\tprivate _width:number = 0;\n\t\tprivate _height:number = 0;\n\t\t\n\t\t/**\n\t\t * 宽度\n\t\t */\n\t\tget width():number {\n\t\t\tif (this._width === -1)\n\t\t\t\treturn RenderContext3D.clientWidth;\n\t\t\t\n\t\t\treturn this._width;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 高度\n\t\t */\n\t\tget height():number {\n\t\t\tif (this._height === -1)\n\t\t\t\treturn RenderContext3D.clientHeight;\n\t\t\treturn this._height;\n\t\t}\n\t\t\n\t\t/**\n\t\t * 创建Size实例\n\t\t * @param width 宽度 \n\t\t * @param height 高度\n\t\t */\n\t\tconstructor(width:number, height:number){\n\t\t\tthis._width = width;\n\t\t\tthis._height = height;\n\t\t}\n\t\n\t}\n\n\n","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { TextureDimension } from \"../../RenderEngine/RenderEnum/TextureDimension\";\nimport { RenderTexture } from \"../../resource/RenderTexture\";\n\n/**\n * <code>SpotLight</code> 类用于创建RenderTextureCube。\n */\nexport class RenderTextureCube extends RenderTexture {\n\n    faceIndex: number;\n\n    /**\n     * 实例化一个RendertextureCube\n     * @param size 像素\n     * @param colorFormat 颜色格式\n     * @param depthFormat 深度格式\n     * @param generateMipmap 是否生成mipmap\n     * @param multiSamples \n     */\n    constructor(size: number, colorFormat: RenderTargetFormat, depthFormat: RenderTargetFormat, generateMipmap: boolean, multiSamples: number) {\n        super(size, size, colorFormat, depthFormat, generateMipmap, multiSamples);\n        this.faceIndex = 0;\n    }\n\n    /**\n     * @internal\n     */\n    _createRenderTarget(): void {\n        this._dimension = TextureDimension.Cube;\n        this._renderTarget = LayaGL.textureContext.createRenderTargetCubeInternal(this.width, <RenderTargetFormat><any>this._format, this._depthStencilFormat, this._generateMipmap, this._gammaSpace, this._multiSamples);\n\n        this._texture = this._renderTarget._textures[0];\n    }\n\n    _start() {\n        RenderTexture._configInstance.invertY = this._isCameraTarget;\n        if (RenderTexture._currentActive != this) {\n            RenderTexture._currentActive && RenderTexture._currentActive._end();\n            RenderTexture._currentActive = this;\n            LayaGL.textureContext.bindRenderTarget(this._renderTarget, this.faceIndex);\n        }\n    }\n\n}","import { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\nimport { WebXRExperienceHelper } from \"./WebXRExperienceHelper\";\n\n\n/**\n * @author miner\n * 类用来创建WebXRRenderTexture\n */\nexport class WebXRRenderTexture extends RenderTexture {\n\n\t/** @internal */\n\tprotected _frameBuffer: any;\n\t/**update mask */\n\tpublic frameLoop: number = -1;\n\n\t/**\n\t * 创建WebXRFrameBuffer\n\t * @param frameBuffer \n\t */\n\tconstructor() {\n\t\tsuper(1, 1, 1, RenderTargetFormat.STENCIL_8, false, 1);\n\t}\n\n\t/**\n\t * set frameBuffer\n\t */\n\tset frameBuffer(value: any) {\n\t\tthis._frameBuffer = value;\n\t}\n\n\t/**\n\t * No glframeBuffer create\n\t * @param width \n\t * @param height \n\t */\n\tprotected _create(width: number, height: number): void {\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_start(): void {\n\t\tvar gl: WebGLRenderingContext =  WebXRExperienceHelper.glInstance;\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\t\tRenderTexture._currentActive = this;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\t_end(): void {\n\t\tvar gl: WebGLRenderingContext = WebXRExperienceHelper.glInstance;\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\tRenderTexture._currentActive = null;\n\t}\n\n}","import { ILaya } from \"../../../../ILaya\";\nimport { EventDispatcher } from \"../../../events/EventDispatcher\";\n\n/**\n * Manages an XRSession to work with layaAir engine\n * @author miner\n */\nexport class WebXRSessionManager extends EventDispatcher {\n\n    static EVENT_MANAGER_END:string = \"xrManagerDestory\";\n    static EVENT_FRAME_LOOP:string = \"xrFrameLoop\";\n\n    \n    /**\n     * Underlying xr session\n     */\n    public session: any//: \n    /**\n     * XRReferenceSpace TODO\n     */\n    public viewerReferenceSpace: any; //XRReferenceSpace;\n\n    /** baseRefernceSpace */\n    public baseReferenceSpace: any;//;\n    /** Current XR  XRFrame*/\n    public currentFrame: any;//\n    /** WebXR timestamp updated every frame */\n    public currentTimestamp: number = -1;\n    /**默认高度补偿,在init失败后使用 */\n    public defaultHeightCompensation = 1.7;\n\n    /**\n     * XRReferenceSpace\n     */\n    private _referenceSpace: any;\n    /** \"inline\" | \"immersive-vr\" | \"immersive-ar\"*/\n    private _sessionMode: any;\n    /** session enable state */\n    private _sessionEnded: boolean = false;\n    /**WebXR Base Layer */\n    private _baseLayer:any;\n    /**web XRSystem */\n    private _xrNavigator: any;\n    /**\n     * @internal\n     * 类用来管理WebXR状态\n     */\n    constructor() {\n        super();\n    }\n    /**\n    * The current reference space used in this session.\n    * @returns XRReferenceSpace;\n    */\n    public get referenceSpace() {\n        return this._referenceSpace;\n    }\n\n    /**\n     * set 参考空间\n     */\n    public set referenceSpace(newReferenceSpace) {\n        this._referenceSpace = newReferenceSpace;\n    }\n\n    /**\n    * The mode for the managed XR session\n    */\n    public get sessionMode() {\n        return this._sessionMode;\n    }\n\n    /**\n     * Stops the xrSession and restores the render loop\n     */\n    exitXR() {\n        this.endXRRenderLoop();\n        this.event(WebXRSessionManager.EVENT_MANAGER_END);\n    }\n    \n    /**\n     * Initializes the xr layer for the session \n     * @param xrSession \n     * @param gl \n     * @returns \n     */\n    public initializeXRGL(xrSession: any, gl: WebGLRenderingContext): Promise<boolean> {//: XRWebGLLayer {\n        return (gl as any).makeXRCompatible().then(()=> {\n            return true;\n        });\n    };\n\n    /**\n     * 浏览器是否支持WebXR\n     * @returns WebXR\n     */\n    public initializeAsync(): Promise<void> {\n        // Check if the browser supports webXR\n        this._xrNavigator = navigator;\n        if (!this._xrNavigator.xr) {\n            return Promise.reject(\"WebXR not available\");\n        }\n        return Promise.resolve();\n    }\n\n    /**\n     * Sessiopn模式是否支持\n     * @param sessionMode \"inline\" | \"immersive-vr\" | \"immersive-ar\"\n     * @returns A Promise that resolves to true if supported and false if not\n     */\n    public isSessionSupportedAsync(sessionMode: string): Promise<boolean> {\n        if (!(navigator as any).xr) {\n            return Promise.resolve(false);\n        } else {\n            this._xrNavigator = navigator;\n        }\n        const functionToUse = (navigator as any).xr.isSessionSupported || (navigator as any).xr.supportsSession;\n        if (!functionToUse)\n            return Promise.resolve(false);\n        else {\n            return (navigator as any).xr.isSessionSupported(sessionMode);\n        }\n    }\n\n    /**\n     * 初始化Session\n     * @param xrSessionMode xrsessionMode\n     * @param xrSessionInit any initInfo\n     * @returns \n     */\n    public initializeSessionAsync(xrSessionMode = 'immersive-vr', xrSessionInit = {}): Promise<any> {\n        return this._xrNavigator.xr.requestSession('immersive-vr').then((session: any) => {\n            this.session = session;\n            this._sessionMode = xrSessionMode;\n            this._sessionEnded = false;\n\n            // 增加结束handle\n            this.session.addEventListener(\n                \"end\",\n                () => {\n                    this._sessionEnded = true;\n                    this.exitXR();\n                },\n                { once: true }\n            );\n\n            return this.session;\n        });\n    }\n\n    /**\n     * Resets the reference space to the one started the session\n     */\n    public resetReferenceSpace() {\n        this.referenceSpace = this.baseReferenceSpace;\n    }\n\n    /**\n     * Starts rendering to the xr layer\n     */\n    public runXRRenderLoop() {\n        this.session.requestAnimationFrame.bind(this.session);\n        let fn = (timestamp: any, xrFrame: any) => {\n            this._updateByXrFrame(xrFrame, timestamp);\n            this.event(WebXRSessionManager.EVENT_FRAME_LOOP, [xrFrame]);\n            ILaya.stage._loop();\n            this.session.requestAnimationFrame(fn);\n        };\n        this.session.requestAnimationFrame(fn);\n    }\n\n    public endXRRenderLoop(){\n\n    }\n\n    /**\n     * Update\n     * @param xrFrame \n     */\n    private _updateByXrFrame(xrFrame: any, timestamp: number) {\n        this.currentFrame = xrFrame;\n        this.currentTimestamp = timestamp;\n    }\n\n    /**\n    * Sets the reference space on the xr session\n    * @param referenceSpaceType space to set\n    * @returns a promise that will resolve once the reference space has been set\n    */\n    public setReferenceSpaceTypeAsync(referenceSpaceType = \"local-floor\"): Promise<any> {//XRReferenceSpace\n        return this.session\n            .requestReferenceSpace(referenceSpaceType)\n            .then(\n                (referenceSpace: any) => {\n                    return referenceSpace;\n                },\n                (rejectionReason: any) => {\n                    return this.session.requestReferenceSpace(\"viewer\").then(\n                        (referenceSpace: any) => {\n                            //@ts-ignore\n                            const heightCompensation = new XRRigidTransform({ x: 0, y: -this.defaultHeightCompensation, z: 0 });\n                            return (referenceSpace).getOffsetReferenceSpace(heightCompensation);\n                        },\n                        (rejectionReason: any) => {\n\n                            throw 'XR initialization failed: required \"viewer\" reference space type not supported.';\n                        }\n                    );\n                }\n            ).then((referenceSpace: any) => {\n                // initialize the base and offset (currently the same)\n                this.referenceSpace = this.baseReferenceSpace = referenceSpace;\n                return this.referenceSpace;\n            });\n    }\n\n    /**\n    * Updates the render state of the session\n    * @param state state to set\n    * @returns a promise that resolves once the render state has been updated\n    */\n    public updateRenderStateAsync(state: any) {//: XRRenderState) {\n        if (state.baseLayer) {\n            this._baseLayer = state.baseLayer;\n        }\n        return this.session.updateRenderState(state);\n    }\n\n    /**\n     * The current frame rate as reported by the device\n     */\n    public get currentFrameRate(): number | undefined {\n        return this.session?.frameRate;\n    }\n\n    /**\n    * A list of supported frame rates (only available in-session!\n    */\n    public get supportedFrameRates(): Float32Array | undefined {\n        return this.session?.supportedFrameRates;\n    }\n\n    /**\n     * Set the framerate of the session.\n     * @param rate the new framerate. This value needs to be in the supportedFrameRates array\n     * @returns a promise that resolves once the framerate has been set\n     */\n    public updateTargetFrameRate(rate: number): Promise<void> {\n        return this.session.updateTargetFrameRate(rate);\n    }\n\n    destroy() {\n        if (!this._sessionEnded) {\n            this.exitXR();\n        }\n    }\n}","import { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { WebXRCamera } from \"./WebXRCamera\";\nimport { WebXRRenderTexture } from \"./WebXRRenderTexture\";\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\n\n\n/**\n * @author miner\n * 此类用来管理XRCamera\n */\nexport class WebXRCameraManager {\n    /**\n     * reference Quaternin\n     */\n    private _referenceQuaternion: Quaternion = new Quaternion();\n    /**\n     * reference Position\n     */\n    private _referencedPosition: Vector3 = new Vector3();\n    /**\n     * WebXR Session Manager\n     */\n    private _webXRSessionManager: WebXRSessionManager;\n    /**\n     * first Frame Flag\n     */\n    private _firstFrame = true;//初始帧\n    /**\n     * WebXR RenderTexture\n     */\n    private _XRRenderTexture: WebXRRenderTexture = new WebXRRenderTexture();\n    /**\n     * WebXRCamera Array\n     */\n    private _rigCameras = new Array<WebXRCamera>();\n    /**\n     * Reference position\n     */\n    private _position = new Vector3();\n\n    /**\n     * parent\n     */\n    public owner: any;\n\n    get position(): Vector3 {\n        return this._position;\n    }\n\n    set position(newPosition: Vector3) {\n\n        newPosition.cloneTo(this._position);\n    }\n\n    set rotationQuaternion(value: Quaternion) {\n        value.cloneTo(this._referenceQuaternion);\n    }\n\n    get rotationQuaternion(): Quaternion {\n        return this._referenceQuaternion;\n    }\n\n    get rigCameras(): WebXRCamera[] {\n        return this._rigCameras;\n    }\n\n    /**\n     * 用来创建XRCamera管理类\n     * @param camera \n     * @param manager \n     */\n    constructor(camera: any, manager: WebXRSessionManager = null) {\n        this.owner = camera;\n        this.owner.enableRender = false;\n        if (!this.owner.aspectRatio) {\n            console.warn(\"owner is not Camera\");\n        }\n        this._webXRSessionManager = manager;\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRSession);\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateReferenceSpace);\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END, this, this.destroy);\n    }\n\n    /**\n     * updateFrame by WebXR Session\n     */\n    _updateFromXRSession() {\n        //XRViewerPose\n        let pose = this._webXRSessionManager.currentFrame && this._webXRSessionManager.currentFrame.getViewerPose(this._webXRSessionManager.referenceSpace);\n        //update pose data\n        const pos = pose.transform.position;\n        const orientation = pose.transform.orientation;\n        this._referenceQuaternion.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\n        this._referencedPosition.setValue(pos.x, pos.y, pos.z);\n        if (this._firstFrame) {\n            this._firstFrame = false;\n            this.position.y += this._referencedPosition.y;\n            // avoid using the head rotation on the first frame.\n            this._referenceQuaternion.setValue(0, 0, 0, 1);\n        } else {\n            // update position and rotation as reference\n            this.rotationQuaternion = this._referenceQuaternion;\n            this.position = this._referencedPosition;\n        }\n        // Update camera rigs\n        if (this.rigCameras.length !== pose.views.length) {\n            this._updateNumberOfRigCameras(pose.views.length);\n        }\n        //XRView\n        pose.views.forEach((view: any, i: any) => {\n            const currentRig = this.rigCameras[i];\n            if (view.eye === \"right\")\n                currentRig.name = \"right\";\n            else if (view.eye === \"left\")\n                currentRig.name = \"left\";\n            // Update view/projection matrix\n            const pos = view.transform.position;\n            const orientation = view.transform.orientation;\n            currentRig.transform.position.setValue(pos.x, pos.y, pos.z);\n            currentRig.transform.rotation.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\n            currentRig.transform.position = currentRig.transform.position;\n            currentRig.transform.rotation = currentRig.transform.rotation;\n            // Update viewport\n            if (this._webXRSessionManager.session.renderState.baseLayer) {\n                var viewport = this._webXRSessionManager.session.renderState.baseLayer.getViewport(view);\n                var width = this._webXRSessionManager.session.renderState.baseLayer.framebufferWidth;\n                var height = this._webXRSessionManager.session.renderState.baseLayer.framebufferHeight;\n                this._XRRenderTexture.frameBuffer = this._webXRSessionManager.session.renderState.baseLayer.framebuffer;\n                //update FrameBuffer\n                currentRig.renderTarget = this._XRRenderTexture;\n                //update clientSize\n                currentRig.clientWidth = width;\n                currentRig.clientHeight = height;\n                //update viewPort\n                var cameraViewPort = currentRig.viewport;\n                cameraViewPort.x = viewport.x;\n                cameraViewPort.y = viewport.y;\n                cameraViewPort.width = viewport.width;\n                cameraViewPort.height = viewport.height;\n                currentRig.viewport = cameraViewPort;\n                currentRig.projectionMatrix.cloneByArray(view.projectionMatrix);\n            }\n        });\n    }\n\n    /**\n     * update number of WebXRCamera\n     * @param viewCount \n     */\n    private _updateNumberOfRigCameras(viewCount = 1) {\n        while (this.rigCameras.length < viewCount) {\n            //add camera\n            var xrcamera = new WebXRCamera(this.owner.aspectRatio, this.owner.nearPlane, this.owner.farPlane);\n            xrcamera.clearFlag = this.owner.clearFlag;\n            xrcamera.clearColor = this.owner.clearColor;\n            this.owner.addChild(xrcamera);\n            this.rigCameras.push(xrcamera);\n        }\n        while (this.rigCameras.length > viewCount) {\n            //remove camera\n            let xrcamera = this.rigCameras.pop();\n            this.owner.removeChild(xrcamera);\n        }\n    }\n\n    /**\n     * TODO:update of Reference Space\n     */\n    private _updateReferenceSpace() {\n        //TODO:\n    }\n\n    /**\n     * destroy\n     */\n    destroy() {\n        this.owner.enableRender = true;\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRSession);\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateReferenceSpace);\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_MANAGER_END, this, this.destroy);\n        this._rigCameras.forEach(element => {\n            element.destroy();\n        });\n        this._rigCameras = null;\n        this._XRRenderTexture.destroy();\n    }\n\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\nimport { Vector2 } from \"../../../maths/Vector2\";\n\n/**\n * 类用来描述gamepad Axis\n */\nexport class AxiGamepad extends EventDispatcher {\n    static EVENT_OUTPUT: string = \"outputAxi_id\";\n    /**\n     * 轴设备名字\n     */\n    public handness: string;\n    /**\n     * 轴数量\n     */\n    public axisLength: number;\n    /**\n     * axis Array\n     */\n    private axisData: Array<Vector2> = new Array();\n\n    /**\n     * 类用于创建轴数据\n     * @internal\n     * @param handness 轴设备名字\n     * @param length 轴数量\n     */\n    constructor(handness: string, length: number) {\n        super();\n        this.handness = handness;\n        this.axisData.length = length;\n        this.axisLength = length;\n    }\n\n    /**\n     * @internal\n     * @param padGameAxi 轴数据\n     */\n    update(padGameAxi: any) {\n        for (let i = 0, j = 0; i < padGameAxi.axes.length; i += 2, ++j) {\n            if (!this.axisData[j])\n                this.axisData[j] = new Vector2();\n            this.axisData[j].setValue(padGameAxi.axes[i], padGameAxi.axes[i + 1]);\n            this.outPutStickValue(this.axisData[j], j);\n        }\n    }\n\n    /**\n     * 派发轴事件\n     * @internal\n     * @param value \n     * @param index \n     */\n    outPutStickValue(value: Vector2, index: number) {\n        const eventnam = AxiGamepad.EVENT_OUTPUT + index.toString();\n        this.event(eventnam, [value]);\n    }\n\n    /**\n     * destroy\n     */\n    destroy() {\n        for (let i = 0; i < this.axisLength; i++) {\n            let eventname = AxiGamepad.EVENT_OUTPUT + i.toString();\n            this.offAll(eventname);\n        }\n    }\n\n}\n\n/**\n * 类用来描述gamepad Button\n */\nexport class ButtonGamepad extends EventDispatcher {\n    static EVENT_TOUCH_ENTER: string = \"touchEnter\";\n    static EVENT_TOUCH_STAY: string = \"touchStay\";\n    static EVENT_TOUCH_OUT: string = \"touchOut\";\n    static EVENT_PRESS_ENTER: string = \"pressEnter\";\n    static EVENT_PRESS_STAY: string = \"pressStay\";\n    static EVENT_PRESS_OUT: string = \"pressOut\";\n    static EVENT_PRESS_VALUE: string = \"outpressed\";\n\n    /**\n     * The id of the gamepad\n     */\n    public handness: string;\n    /**\n    * The index of the gamepad\n    */\n    public index: number;\n\n    /**\n     * front touch state\n     */\n    private lastTouch: boolean = false;\n    private lastPress: boolean = false;\n    private lastPressValue: number = 0;\n\n    /**\n     * current touch state\n     */\n    private touch: boolean = false;\n    private press: boolean = false;\n    private pressValue: number = 0;\n\n\n    /**\n     * 类用于创建Button对象\n     * @param handness 设备名称\n     * @param index button缩影\n     */\n    constructor(handness: string, index: number) {\n        super();\n        this.handness = handness;\n        this.index = index;\n    }\n\n    /**\n     * @internal\n     * GamePadButton update\n     */\n    update(padButton: any) {\n        //set Data\n        this.lastTouch = this.touch;\n        this.lastPress = this.press;\n        this.lastPressValue = this.pressValue;\n        this.touch = padButton.touched;\n        this.press = padButton.pressed;\n        this.pressValue = padButton.value;\n        if (!this.lastTouch && !this.touch) {\n            return;\n        }\n        if (this.lastTouch != this.touch && this.touch) {\n            this.touchEnter();\n        } else if (this.lastTouch == this.touch && this.touch) {\n            this.touchStay();\n        } else if (this.lastTouch != this.touch && !this.touch) {\n            this.touchOut();\n        }\n        if (this.lastPress != this.press && this.press) {\n            this.pressEnter();\n        } else if (this.lastPress == this.press && this.press) {\n            this.pressStay();\n        } else if (this.lastPress != this.press && !this.press) {\n            this.pressOut();\n        }\n        if (this.touch) {\n            this.outpressed();\n        }\n    }\n\n    /**\n     * @internal\n     * event touch enter\n     */\n    private touchEnter() {\n        this.event(ButtonGamepad.EVENT_TOUCH_ENTER);\n    }\n\n    /**\n     * @internal\n     * event touch Stay\n     */\n    private touchStay() {\n        this.event(ButtonGamepad.EVENT_TOUCH_STAY);\n    }\n\n    /**\n     * @internal\n     * event touch Out\n     */\n    private touchOut() {\n        this.event(ButtonGamepad.EVENT_TOUCH_OUT);\n    }\n\n    /**\n     * @internal\n     * event press enter\n     */\n    private pressEnter() {\n        this.event(ButtonGamepad.EVENT_PRESS_ENTER);\n    }\n\n    /**\n     * @internal\n     * event press Stay\n     */\n    private pressStay() {\n        this.event(ButtonGamepad.EVENT_PRESS_STAY);\n    }\n\n    /**\n     * @internal\n     * event press Out\n     */\n    private pressOut() {\n        this.event(ButtonGamepad.EVENT_PRESS_OUT);\n    }\n\n    /**\n     * @internal\n     * event press value\n     */\n    private outpressed() {\n        this.event(ButtonGamepad.EVENT_PRESS_VALUE, [this.pressValue]);\n    }\n\n    /**\n     * destroy\n     */\n    destroy() {\n        this.offAll(ButtonGamepad.EVENT_PRESS_ENTER);\n        this.offAll(ButtonGamepad.EVENT_PRESS_STAY);\n        this.offAll(ButtonGamepad.EVENT_PRESS_OUT);\n        this.offAll(ButtonGamepad.EVENT_PRESS_ENTER);\n        this.offAll(ButtonGamepad.EVENT_PRESS_STAY);\n        this.offAll(ButtonGamepad.EVENT_PRESS_OUT);\n        this.offAll(ButtonGamepad.EVENT_PRESS_VALUE);\n    }\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\nimport { Quaternion } from \"../../../maths/Quaternion\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Ray } from \"../../math/Ray\";\nimport { ButtonGamepad, AxiGamepad } from \"./WebXRGamepad\";\n\n\n/**\n * @author miner\n * 类用来描述输入设备\n */\nexport class WebXRInput extends EventDispatcher {\n    static HANDNESS_LEFT: string = \"left\";\n    static HANDNESS_RIGHT: string = \"right\";\n    static EVENT_FRAMEUPDATA_WEBXRINPUT: string = \"frameXRInputUpdate\";\n    private static tempQua: Quaternion = new Quaternion();\n    /**\n     * 预处理Button事件\n     */\n    private preButtonEventList: Array<any> = [];\n    /**\n     * 预处理axis事件\n     */\n    private preAxisEventList: Array<any> = [];\n    /**\n     * @internal\n     */\n    public _inputSource: any;//XRInputSource\n\n    public lastXRPose: any;\n    /**\n     * handMode\n     */\n    public handness: string;\n    /**\n     * input Ray\n     */\n    public ray: Ray;\n    /**\n     * hand Pos\n     */\n    public position: Vector3;\n    /**\n     * hand Rotate\n     */\n    public rotation: Quaternion;\n    /**\n     * lastRayPos\n     */\n    public _lastXRPose: any;\n\n    /**\n     * gamepad Button info\n     */\n    public gamepadButton: Array<ButtonGamepad>;\n\n    /**\n     * gamepad axis Info\n     */\n    public gamepadAxis: AxiGamepad;\n\n    constructor(handness: string) {\n        super();\n        this.handness = handness;\n        this.position = new Vector3();\n        this.rotation = new Quaternion();\n        this.ray = new Ray(new Vector3(), new Vector3());\n    }\n\n    /**\n     * 更新XRInput数据\n     * @internal\n     * @param xrFrame WebXR帧数据\n     * @param referenceSpace 参考空间\n     */\n    _updateByXRPose(xrFrame: any, referenceSpace: any) {\n        //updateRay\n        const rayPose = xrFrame.getPose(this._inputSource.targetRaySpace, referenceSpace);\n        this._lastXRPose = rayPose;\n        if (rayPose) {\n            const pos = rayPose.transform.position;\n            const orientation = rayPose.transform.orientation;\n            WebXRInput.tempQua.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\n            this.ray.origin.setValue(pos.x, pos.y, pos.z);\n            Vector3.transformQuat(Vector3.UnitZ, WebXRInput.tempQua, this.ray.direction);\n            Vector3.scale(this.ray.direction, -1, this.ray.direction);\n        }\n        //updateMesh\n        if (this._inputSource.gripSpace) {\n            let meshPose = xrFrame.getPose(this._inputSource.gripSpace, referenceSpace);\n            if (meshPose) {\n                const pos = meshPose.transform.position;\n                const orientation = meshPose.transform.orientation;\n                this.position.setValue(pos.x, pos.y, pos.z);\n                this.rotation.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\n            }\n        }\n        this.event(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT, [this]);\n        //handle gamepad\n        this._handleProcessGamepad();\n    }\n\n\n    /**\n     * handle gamepad Event\n     */\n    private _handleProcessGamepad() {\n        //axis init\n        const gamepad = this._inputSource.gamepad;\n        if (!this.gamepadAxis) {\n            this.gamepadAxis = new AxiGamepad(this.handness, gamepad.axes.length);\n            //preEvent\n            this.preAxisEventList.forEach(element => {\n                this.gamepadAxis.on(element.eventnam, element.caller, element.listener);\n            });\n        }\n        if (!this.gamepadButton) {\n            this.gamepadButton = [];\n            for (let i = 0; i < gamepad.buttons.length; ++i) {\n                this.gamepadButton.push(new ButtonGamepad(this.handness, i));\n            }\n            //preEvent\n            this.preButtonEventList.forEach(element => {\n                this.addButtonEvent(element.index, element.type, element.caller, element.listener);\n            });\n        }\n        //axis\n        this.gamepadAxis.update(gamepad);\n        //button\n        for (let i = 0; i < gamepad.buttons.length; ++i) {\n            let button = this.gamepadButton[i];\n            button.update(gamepad.buttons[i]);\n        }\n    }\n\n    /**\n     * add button event\n     * @param index button索引\n     * @param type 事件类型\n     * @param caller 事件侦听函数的执行域。\n     * @param listener 事件侦听函数。\n     */\n    addButtonEvent(index: number, type: string, caller: any, listener: Function) {\n        if (!this.gamepadButton) {\n            this.preButtonEventList.push({\n                \"index\": index,\n                \"type\": type,\n                \"caller\": caller,\n                \"listener\": listener\n            });\n        } else {\n            let button = this.gamepadButton[index];\n            button.on(type, caller, listener);\n        }\n    }\n\n    /**\n     * add axis event\n     * @param index axis索引\n     * @param type 事件类型\n     * @param caller 事件侦听函数的执行域。\n     * @param listener 事件侦听函数。\n     */\n    addAxisEvent(index: number, type: string, caller: any, listener: Function) {\n        if (!this.gamepadAxis) {\n            this.preAxisEventList.push({\n                \"eventnam\": type + index.toString(),\n                \"caller\": caller,\n                \"listener\": listener\n            });\n        } else {\n            const eventnam = type + index.toString();\n            this.gamepadAxis.on(eventnam, caller, listener);\n        }\n    }\n\n    /**\n     * remove axis event\n     * @param index axis索引\n     * @param type 事件类型\n     * @param caller 事件侦听函数的执行域。\n     * @param listener 事件侦听函数。\n     */\n    offAxisEvent(index: number, type: string, caller: any, listener: Function) {\n        if (this.gamepadAxis) {\n            const eventnam = type + index.toString();\n            this.gamepadAxis.off(eventnam, caller, listener);\n        }\n    }\n\n    /**\n     * remove Button event\n     * @param index axis索引\n     * @param type 事件类型\n     * @param caller 事件侦听函数的执行域。\n     * @param listener 事件侦听函数。\n     */\n    offButtonEvent(index: number, type: string, caller: any, listener: Function) {\n        if (this.gamepadButton) {\n            let button = this.gamepadButton[index];\n            button.off(type, caller, listener);\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    destroy() {\n        this.preButtonEventList = null;\n        this.ray = null;\n        this.position = null;\n        this.rotation = null;\n        this.gamepadAxis.destroy();\n        this.gamepadButton.forEach(element => {\n            element.destroy();\n        });\n    }\n}","import { Color } from \"../../../maths/Color\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { PixelLineSprite3D } from \"../../core/pixelLine/PixelLineSprite3D\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\nimport { WebXRInput } from \"./WebXRInput\";\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\n\n\n/**\n * @author miner\n * 类用来管理输入设备\n * The path of the CDN the sample will fetch controller models from：\n * MeshSource https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0.9/dist/profiles/\n */\nexport class WebXRInputManager {\n    static tempVec: Vector3 = new Vector3();\n    static tempVec1: Vector3 = new Vector3();\n    /**\n     * Session Manager\n     */\n    private webXRSessionManager: WebXRSessionManager;\n    /**\n     * webXRCamera Manager\n     */\n    private webXRCameraManager: WebXRCameraManager;\n    /**\n     * array of XRInput\n     */\n    private controllers: Map<string, WebXRInput> = new Map();\n    /**\n     * bind of XRInput Node Render\n     */\n    private controllerHandMesh: Map<string, Sprite3D> = new Map();\n    /**\n     * bind of XRInput Ray Render\n     */\n    private controllerLineRender: Map<string, PixelLineSprite3D> = new Map();\n    /**\n     * line Color\n     */\n    private lineColor: Color = Color.RED;\n    /**\n     * Ray length\n     */\n    private rayLength: number = 2;\n\n    /**\n     * 类用于创建WebXRInput管理类\n     * @param webxrManager WebXR Session manager\n     * @param webXRCamera WebXR Manager\n     */\n    constructor(webxrManager: WebXRSessionManager, webXRCamera: WebXRCameraManager) {\n        this.webXRSessionManager = webxrManager;\n        this.webXRCameraManager = webXRCamera;\n        this.webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END, this, this.destory);\n        this.webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRFrame);\n    }\n\n    /**\n     * 更新输入挂点\n     * @param xrInput \n     */\n    private _updataMeshRender(xrInput: WebXRInput) {\n        const handness = xrInput.handness;\n        //mesh\n        if (this.controllerHandMesh.has(handness)) {\n            let meshNode = this.controllerHandMesh.get(handness);\n            meshNode.transform.position = xrInput.position;\n            meshNode.transform.rotation = xrInput.rotation;\n        }\n        //rayLine\n        if (this.controllerLineRender.has(handness)) {\n            let line = this.controllerLineRender.get(handness);\n            line.clear();\n            let ray = xrInput.ray;\n            WebXRInputManager.tempVec.setValue(ray.origin.x, ray.origin.y, ray.origin.z);\n            Vector3.scale(ray.direction, this.rayLength, WebXRInputManager.tempVec1);\n            Vector3.add(WebXRInputManager.tempVec, WebXRInputManager.tempVec1, WebXRInputManager.tempVec1);\n            line.addLine(WebXRInputManager.tempVec, WebXRInputManager.tempVec1, this.lineColor, this.lineColor);\n        }\n    }\n\n    /**\n     * WebXRInput帧循环\n     * @param xrFrame \n     */\n    private _updateFromXRFrame(xrFrame: any) {\n        //frame, this.xrSessionManager.referenceSpace, this.xrCamera\n        const session = this.webXRSessionManager.session;\n        const refSpace = this.webXRSessionManager.referenceSpace;\n        for (let inputSource of session.inputSources) {\n            const key = inputSource.handedness;\n            let xrInput: WebXRInput;\n            if (!this.controllers.has(key)) {\n                xrInput = this.getController(key);\n            }else\n                xrInput = this.controllers.get(key);\n            if(xrInput){\n                xrInput = this.controllers.get(key);\n                xrInput._inputSource = inputSource;\n                xrInput._updateByXRPose(xrFrame, refSpace);\n            }\n            \n        }\n    }\n\n    /**\n     * 绑定输入设备渲染节点\n     * @param meshSprite 渲染挂点\n     * @param handness 设备名称left/right\n     */\n    bindMeshNode(meshSprite: Sprite3D, handness: string) {\n        this.controllerHandMesh.set(handness, meshSprite);\n    }\n\n    /**\n     * 绑定输入设备射线\n     * @param lineSprite 线\n     * @param handness 设备名称left/right\n     */\n    bindRayNode(lineSprite: PixelLineSprite3D, handness: string) {\n        this.controllerLineRender.set(handness, lineSprite);\n    }\n\n    /**\n     * 获得输入设备\n     * @param handness 设备名称left/right\n     * @returns \n     */\n    getController(handness: string): WebXRInput {\n        if (handness != \"left\" && handness != \"right\")\n            return null;\n        if (!this.controllers.has(handness)) {\n            let value = new WebXRInput(handness);\n            this.controllers.set(handness, value);\n            value.on(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT, this, this._updataMeshRender);\n        }\n        return this.controllers.get(handness);\n    }\n\n    /**\n     * @internal\n     * 删除\n     */\n    destory() {\n        this.webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRFrame);\n        for (let key in this.controllers) {\n            this.controllers.get(key).off(\"frameXRInputUpdate\", this, this._updataMeshRender);\n            this.controllers.get(key).destroy();\n        }\n        this.controllers = null;\n        this.controllerHandMesh = null;\n        this.controllerLineRender = null;\n    }\n}\n\n","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Camera } from \"../../core/Camera\";\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\nimport { WebXRInputManager } from \"./WebXRInputManager\";\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\nexport class WebXRCameraInfo {\n    /**depth far */\n    depthFar: number;\n    /**depth near */\n    depthNear: number;\n    /**camera */\n    camera: any;\n}\n\n/**\n * 类用来管理WebXR\n * @author miner\n */\nexport class WebXRExperienceHelper {\n\n    static glInstance: any;\n    /**\n     * single XRManager \n     */\n    public static xr_Manager = new WebXRSessionManager();\n    /**\n     * support webXR\n     */\n    public static supported = false;\n    /**\n     * default WebLayer option\n     * XRWebGLLayerInit\n     */\n    public static canvasOptions = {\n        antialias: true,\n        depth: true,\n        stencil: false,\n        alpha: true,\n        multiview: false,\n        framebufferScaleFactor: 1,\n    };\n\n    /**\n     * 支持XRSession模式\n     * @param sessionMode XRSessionMode = \"inline\" | \"immersive-vr\" | \"immersive-ar\";\n     * @returns \n     */\n    public static supportXR(sessionMode: string): Promise<boolean> {\n        return WebXRExperienceHelper.xr_Manager.isSessionSupportedAsync(sessionMode).then(value => {\n            WebXRExperienceHelper.supported = value;\n            return value;\n        });\n    }\n\n    /**\n     * 申请WewXR交互\n     * @param sessionMode XRSessionMode\n     * @param referenceSpaceType referenceType = \"viewer\" | \"local\" | \"local-floor\" | \"unbounded\";\n     * @param cameraInfo WebXRCameraInfo webXRCamera设置\n     * @returns Promise<WebXRSessionManager> \n     */\n    public static enterXRAsync(sessionMode: string, referenceSpaceType: string, cameraInfo: WebXRCameraInfo): Promise<WebXRSessionManager> {\n        if (sessionMode === \"immersive-ar\" && referenceSpaceType !== \"unbounded\") {\n            console.warn(\"We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode\");\n        }\n\n        //session\n        return WebXRExperienceHelper.xr_Manager.initializeSessionAsync(sessionMode).then(() => {\n            //refernceSpace\n            return WebXRExperienceHelper.xr_Manager.setReferenceSpaceTypeAsync(referenceSpaceType);\n        }).then(() => {\n            //webglSurport\n            //@ts-ignore\n            return WebXRExperienceHelper.xr_Manager.initializeXRGL(sessionMode, LayaGL.renderEngine._gl);\n        }).then(() => {\n            //@ts-ignore\n            WebXRExperienceHelper.glInstance = LayaGL.renderEngine._gl;\n            return WebXRExperienceHelper.xr_Manager.updateRenderStateAsync({\n                depthFar: cameraInfo.depthFar,\n                depthNear: cameraInfo.depthNear,\n                //@ts-ignore\n                baseLayer: new XRWebGLLayer(WebXRExperienceHelper.xr_Manager.session, LayaGL.instance),\n            });\n        }).then(() => {\n            WebXRExperienceHelper.xr_Manager.runXRRenderLoop();\n            return WebXRExperienceHelper.xr_Manager;\n        });\n    }\n\n    /**\n     * config WebXRCameraManager\n     * @param camera Camera\n     * @param manager WebXRSessionManager\n     * @returns \n     */\n    public static setWebXRCamera(camera: Camera, manager: WebXRSessionManager): WebXRCameraManager {\n        return new WebXRCameraManager(camera, manager);\n    }\n\n    /**\n     * config WebXRInputManager\n     * @param sessionManager WebXRSessionManager\n     * @param cameraManager WebXRCameraManager\n     * @returns \n     */\n    public static setWebXRInput(sessionManager: WebXRSessionManager, cameraManager: WebXRCameraManager): WebXRInputManager {\n        return new WebXRInputManager(sessionManager, cameraManager);\n    }\n}","import { Config3D } from \"../../../../Config3D\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { Camera, CameraEventFlags } from \"../../core/Camera\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { Scene3D } from \"../../core/scene/Scene3D\";\nimport { Cluster } from \"../../graphics/renderPath/Cluster\";\nimport { Viewport } from \"../../math/Viewport\";\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\nimport { WebXRRenderTexture } from \"./WebXRRenderTexture\";\nimport { RenderStateContext } from \"../../../RenderEngine/RenderStateContext\";\nimport { WebXRExperienceHelper } from \"./WebXRExperienceHelper\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\n\n\n/**\n * @author miner\n * 类用于创建WebXR摄像机。\n */\nexport class WebXRCamera extends Camera {\n\t/**\n\t * @internal\n\t */\n\tpublic isWebXR = true;\n\t/**\n\t * WebXRSessionManager\n\t */\n\tprivate _webXRManager: WebXRCameraManager;\n\n\t/**\n\t * override client\n\t */\n\tprivate _clientWidth: number;\n\t/**\n\t * override client\n\t */\n\tprivate _clientHeight: number;\n\n\t/**\n\t * 自定义渲染场景的渲染目标。\n\t */\n\tget renderTarget(): RenderTexture {\n\t\treturn this._internalRenderTexture;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tset renderTarget(value: RenderTexture) {\n\t\tthis._internalRenderTexture = value;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tset clientWidth(value: number) {\n\t\tthis._clientWidth = value;\n\t}\n\t/**\n\t * @internal\n\t */\n\tset clientHeight(value: number) {\n\t\tthis._clientHeight = value;\n\t}\n\t/**\n\t * @internal\n\t */\n\tget clientWidth(): number {\n\t\treturn this._clientWidth;\n\t}\n\t/**\n\t * @internal\n\t */\n\tget clientHeight(): number {\n\t\treturn this._clientHeight;\n\t}\n\n\t/**\n\t * restore view state\n\t * @internal\n\t */\n\tprivate _restoreView(gl: WebGLRenderingContext) {\n\t\t//恢复渲染区\n\t\tvar viewport: Viewport = this.viewport;\n\t\tvar vpX: number, vpY: number;\n\t\tvar vpW: number = viewport.width;\n\t\tvar vpH: number = viewport.height;\n\t\tif (this._needInternalRenderTexture()) {\n\t\t\tvpX = 0;\n\t\t\tvpY = 0;\n\t\t}\n\t\telse {\n\t\t\tvpX = viewport.x;\n\t\t\tvpY = this._getCanvasHeight() - viewport.y - vpH;\n\t\t}\n\t\tgl.viewport(vpX, vpY, vpW, vpH);\n\t}\n\n\t/**\n\t * 渲染\n\t * @override\n\t * @param shader \n\t * @param replacementTag \n\t */\n\trender(shader: Shader3D = null, replacementTag: string = null): void {\n\t\tif (!this.activeInHierarchy) //custom render should protected with activeInHierarchy=true\n\t\t\treturn;\n\n\t\tvar viewport: Viewport = this.viewport;\n\t\tvar needInternalRT: boolean = true;\n\t\tvar context: RenderContext3D = RenderContext3D._instance;\n\t\tvar scene: Scene3D = context.scene = <Scene3D>this._scene;\n\t\tcontext.pipelineMode = context.configPipeLineMode;\n\t\tcontext.replaceTag = replacementTag;\n\t\tcontext.customShader = shader;\n\t\tvar needShadowCasterPass: boolean = this._renderShadowMap(scene, context);\n\t\tthis._preRenderMainPass(context, scene, needInternalRT, viewport);\n\t\tthis._renderMainPass(context, viewport, scene, shader, replacementTag, needInternalRT);\n\t\tthis._aftRenderMainPass(needShadowCasterPass);\n\t}\n\n\t/**\n * 渲染主流程\n * @internal\n * @param context 渲染上下文\n * @param viewport 视口\n * @param scene 场景\n * @param shader shader\n * @param replacementTag 替换标签\n * @param needInternalRT 是否需要内部RT\n */\n\t_renderMainPass(context: RenderContext3D, viewport: Viewport, scene: Scene3D, shader: Shader3D, replacementTag: string, needInternalRT: boolean) {\n\t\tvar gl: WebGLRenderingContext = WebXRExperienceHelper.glInstance;\n\t\tvar renderTex: RenderTexture = this._internalRenderTexture;\n\n\t\tcontext.viewport = viewport;\n\t\tthis._prepareCameraToRender();\n\t\tvar multiLighting: boolean = Config3D._multiLighting;\n\t\t(multiLighting) && (Cluster.instance.update(this, <Scene3D>(scene)));\n\t\tscene._preCulling(context, this);\n\n\t\tif (renderTex && renderTex._isCameraTarget)//保证反转Y状态正确\n\t\t\tcontext.invertY = true;\n\t\tthis._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\n\t\tif (this.depthTextureMode != 0) {\n\t\t\t//TODO:是否可以不多次\n\t\t\tthis._renderDepthMode(context);\n\t\t}\n\t\t(renderTex) && (renderTex._start());\n\t\tif ((renderTex as any).frameLoop != Scene3D._updateMark) {\n\t\t\t(renderTex as any).frameLoop = Scene3D._updateMark;\n\t\t\t//scene._clear(gl, context);\n\t\t\tthis.clear(gl);\n\t\t}\n\t\tthis._restoreView(gl);\n\t\tthis._prepareCameraToRender();\n\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeForwardOpaque, context);\n\t\tscene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERQPAQUE);\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeSkyBox, context);\n\t\tscene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_SKYBOX);\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeTransparent, context);\n\t\tscene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT);\n\t\tscene._componentDriver.callPostRender();//TODO:duo相机是否重复\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeImageEffect, context);\n\t\t(renderTex) && (renderTex._end());\n\t\t//PostProcess TODO\n\t\t// if (needInternalRT) {\n\t\t// \tif (this._postProcess && this._postProcess.enable) {\n\t\t// \t\tthis._postProcess.commandContext = context;\n\t\t// \t\tthis._postProcess._render();\n\t\t// \t\tthis._postProcess._applyPostProcessCommandBuffers();\n\t\t// \t} else if (this._enableHDR || this._needBuiltInRenderTexture) {\n\t\t// \t\tvar canvasWidth: number = this._getCanvasWidth(), canvasHeight: number = this._getCanvasHeight();\n\t\t// \t\tif (this._offScreenRenderTexture) {\n\t\t// \t\t\tthis._screenOffsetScale.setValue(viewport.x / canvasWidth, viewport.y / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\n\t\t// \t\t\tthis._internalCommandBuffer._camera = this;\n\t\t// \t\t\tthis._internalCommandBuffer._context = context;\n\t\t// \t\t\tthis._internalCommandBuffer.blitScreenQuad(this._internalRenderTexture, this._offScreenRenderTexture, this._screenOffsetScale, null, null, 0, true);\n\t\t// \t\t\tthis._internalCommandBuffer._apply();\n\t\t// \t\t\tthis._internalCommandBuffer.clear();\n\t\t// \t\t}\n\t\t// \t}\n\t\t// \tRenderTexture.bindCanvasRender = this._internalRenderTexture;\n\t\t// \t//RenderTexture.recoverToPool(this._internalRenderTexture);\n\t\t// } else {\n\t\t// \tRenderTexture.bindCanvasRender = null;\n\t\t// }\n\t\tthis._applyCommandBuffer(CameraEventFlags.AfterEveryThing, context);\n\t}\n\n\t/**\n\t * null function\n\t */\n\tprotected _calculateProjectionMatrix(): void {\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tclear(gl: WebGLRenderingContext) {\n\t\tgl.viewport(0, 0, this._clientWidth, this._clientHeight);\n\t\tgl.scissor(0, 0, this._clientWidth, this._clientHeight);\n\t\tgl.clearColor(this.clearColor.r, this.clearColor.g, this.clearColor.b, this.clearColor.a);\n\t\tRenderStateContext.setDepthMask(true);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\t}\n\n\t/**\n\t * destroy\n\t */\n\tdestroy() {\n\t\tsuper.destroy(true);\n\t}\n}\n\n\n","import { Rigidbody3D } from \"./Rigidbody3D\";\nimport { PhysicsSimulation } from \"./PhysicsSimulation\"\n\n/**\n * ...\n * @author ...\n */\nexport class Constraint3D {\n\t/**@internal */\n\t_btConstraint: number;\n\t/**@internal */\n\t_simulation: PhysicsSimulation;\n\n\t/**获取刚体A。[只读]*/\n\trigidbodyA: Rigidbody3D;\n\t/**获取刚体A。[只读]*/\n\trigidbodyB: Rigidbody3D;\n\n\tconstructor() {\n\n\t}\n\n}\n\n\n","import { Component } from \"../../../components/Component\";\nimport { Rigidbody3D } from \"../Rigidbody3D\";\nimport { PhysicsSimulation } from \"../PhysicsSimulation\";\nimport { Physics3D } from \"../../Physics3D\";\nimport { Sprite3D } from \"laya/d3/core/Sprite3D\";\nimport { Scene3D } from \"laya/d3/core/scene/Scene3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>ConstraintComponent</code> 类用于创建约束的父类。\n */\nexport class ConstraintComponent extends Component {\n    /** @internal TODO*/\n    static CONSTRAINT_POINT2POINT_CONSTRAINT_TYPE = 3;\n    /** @internal TODO*/\n    static CONSTRAINT_HINGE_CONSTRAINT_TYPE = 4;\n    /** @internal TODO*/\n    static CONSTRAINT_CONETWIST_CONSTRAINT_TYPE = 5;\n    /** @internal TODO*/\n    static CONSTRAINT_D6_CONSTRAINT_TYPE = 6;\n    /** @internal TODO*/\n    static CONSTRAINT_SLIDER_CONSTRAINT_TYPE = 7;\n    /** @internal TODO*/\n    static CONSTRAINT_CONTACT_CONSTRAINT_TYPE = 8;\n    /** @internal TODO*/\n    static CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE = 9;\n    /** @internal TODO*/\n    static CONSTRAINT_GEAR_CONSTRAINT_TYPE = 10;\n    /** @internal */\n    static CONSTRAINT_FIXED_CONSTRAINT_TYPE = 11;\n    /** @internal TODO*/\n    static CONSTRAINT_MAX_CONSTRAINT_TYPE = 12;\n    /** @internal error reduction parameter (ERP)*/\n    static CONSTRAINT_CONSTRAINT_ERP = 1;\n    /** @internal*/\n    static CONSTRAINT_CONSTRAINT_STOP_ERP = 2;\n    /** @internal constraint force mixing（CFM）*/\n    static CONSTRAINT_CONSTRAINT_CFM = 3;\n    /** @internal*/\n    static CONSTRAINT_CONSTRAINT_STOP_CFM = 4;\n    /** @internal */\n    static tempForceV3: Vector3 = new Vector3();\n    /**@internal */\n    _btConstraint: any;\n    /** @internal */\n    _simulation: PhysicsSimulation;\n    /**@internal 回调参数*/\n    _btJointFeedBackObj: number;\n    /** @internal */\n    _anchor = new Vector3();\n    /** @internal */\n    _connectAnchor = new Vector3();\n    /** @internal */\n    _btframAPos: number;\t\t\t//TODO 记得删除\n    /** @internal */\n    _btframBPos: number;\t\t\t//TODO 记得删除\n    /** @internal */\n    _btframATrans: number;\t\t//TODO 记得删除\n    /** @internal */\n    _btframBTrans: number;\t\t//TODO 记得删除\n    /**@internal */\n    _constraintType: number;\n    /**@internal */\n    private _connectedBody: Rigidbody3D;\n    /**@internal */\n    private _ownBody: Rigidbody3D;\n    /**@internal */\n    private _feedbackEnabled = false;\n    /**@internal */\n    private _getJointFeedBack = false;\n    /**@internal */\n    private _currentForce = new Vector3();\n    /**@internal */\n    private _currentTorque = new Vector3();\n    /**@internal */\n    private _breakForce: number;\n    /**@internal */\n    private _breakTorque: number;\n\n    /** 连接的两个物体是否进行碰撞检测 */\n    disableCollisionsBetweenLinkedBodies = true;\n\n    /**\n     * 获取应用的冲力。\n     */\n    get appliedImpulse(): number {\n        if (!this._feedbackEnabled) {\n            this._btConstraint.EnableFeedback(true);\n            this._feedbackEnabled = true;\n        }\n        return this._btConstraint.AppliedImpulse;\n    }\n\n    /**@internal */\n    set connectedBody(value: Rigidbody3D) {\n        this._connectedBody = value;\n    }\n\n    /**\n     * 获取连接的刚体B。\n     * @return 已连接刚体B。\n     */\n    get connectedBody(): Rigidbody3D {\n        return this._connectedBody;\n    }\n\n\n    /**\n     * 获取连接的刚体A。\n     * @return 已连接刚体A。\n     */\n    get ownBody(): Rigidbody3D {\n        return this._ownBody;\n    }\n\n    /**@internal */\n    set ownBody(value: Rigidbody3D) {\n        this._ownBody = value;\n    }\n    /**\n     * 获得收到的总力\n     */\n    get currentForce(): Vector3 {\n        if (!this._getJointFeedBack)\n            this._getFeedBackInfo();\n        return this._currentForce;\n    }\n\n    /**\n     * 获取的总力矩\n     */\n    get currentTorque(): Vector3 {\n        if (!this._getJointFeedBack)\n            this._getFeedBackInfo();\n        return this._currentTorque;\n    }\n\n    /**\n     * 设置最大承受力\n     * @param value 最大承受力\n     */\n    get breakForce(): number {\n        return this._breakForce;\n    }\n    set breakForce(value: number) {\n        this._breakForce = value;\n    }\n\n    /**\n     * 设置最大承受力矩\n     * @param value 最大承受力矩\n     */\n    get breakTorque(): number {\n        return this._breakTorque;\n    }\n    set breakTorque(value: number) {\n        this._breakTorque = value;\n    }\n\n    /**\n     * 设置锚点\n     */\n    set anchor(value: Vector3) {\n        value.cloneTo(this._anchor);\n        this.setFrames();\n    }\n\n    get anchor() {\n        return this._anchor;\n    }\n\n    /**\n     * 设置链接锚点\n     */\n    set connectAnchor(value: Vector3) {\n        value.cloneTo(this._connectAnchor);\n        this.setFrames();\n    }\n\n    get connectAnchor(): Vector3 {\n        return this._connectAnchor;\n    }\n\n    /**\n     * 创建一个 <code>ConstraintComponent</code> 实例。\n     */\n    constructor(constraintType: number) {\n        super();\n        this._constraintType = constraintType;\n        var bt = Physics3D._bullet;\n        this._btframATrans = bt.btTransform_create();\n        this._btframBTrans = bt.btTransform_create();\n        bt.btTransform_setIdentity(this._btframATrans);\n        bt.btTransform_setIdentity(this._btframBTrans);\n        this._btframAPos = bt.btVector3_create(0, 0, 0);\n        this._btframBPos = bt.btVector3_create(0, 0, 0);\n        bt.btTransform_setOrigin(this._btframATrans, this._btframAPos);\n        bt.btTransform_setOrigin(this._btframBTrans, this._btframBPos);\n        this._breakForce = -1;\n        this._breakTorque = -1;\n    }\n\n    /**\n     * 设置迭代的次数，次数越高，越精确\n     * @param overideNumIterations \n     */\n    setOverrideNumSolverIterations(overideNumIterations: number): void {\n        var bt = Physics3D._bullet;\n        bt.btTypedConstraint_setOverrideNumSolverIterations(this._btConstraint, overideNumIterations);\n    }\n\n    /**\n     * 设置约束是否可用\n     * @param enable \n     */\n    setConstraintEnabled(enable: boolean): void {\n        var bt = Physics3D._bullet;\n        bt.btTypedConstraint_setEnabled(this._btConstraint, enable);\n    }\n\n    /**\n     * 设置约束的本地空间\n     */\n    setFrames() {\n        var bt = Physics3D._bullet;\n        bt.btVector3_setValue(this._btframAPos, this._anchor.x, this.anchor.y, this.anchor.z);\n        bt.btVector3_setValue(this._btframBPos, this._connectAnchor.x, this._connectAnchor.y, this._connectAnchor.z);\n        bt.btTransform_setOrigin(this._btframATrans, this._btframAPos);\n        bt.btTransform_setOrigin(this._btframBTrans, this._btframBPos);\n        /*\n        let q = new Quaternion();\n        Quaternion.createFromAxisAngle(new Vector3(0,0,1), Math.PI/2, q);\n        let q1 = bt.btQuaternion_create(q.x,q.y,q.z,q.w);\n        bt.btTransform_setRotation(this._btframBTrans,q1)\n        bt.btQuaternion_delete(q1);\n        */\n    }\n\n    /**\n     * @internal\n     */\n    _addToSimulation(): void {\n    }\n\n    /**\n     * @internal\n     */\n    _removeFromSimulation(): void {\n    }\n\n    /**\n     * @internal\n     */\n    _createConstraint(): void {\n    }\n\n    /**\n     * 设置约束刚体\n     * @param ownerRigid \n     * @param connectRigidBody \n     * @override\n     */\n    setConnectRigidBody(ownerRigid: Rigidbody3D, connectRigidBody: Rigidbody3D) {\n        var ownerCanInSimulation = ownerRigid && !!(ownerRigid._simulation && ownerRigid._enabled && ownerRigid.colliderShape);\n        var connectCanInSimulation = connectRigidBody && !!(connectRigidBody._simulation && connectRigidBody._enabled && connectRigidBody.colliderShape);\n        if (!(ownerCanInSimulation && connectCanInSimulation))\n            throw \"ownerRigid or connectRigidBody is not in Simulation\";\n        if (ownerRigid != this._ownBody || connectRigidBody != this._connectedBody) {\n            var canInSimulation = !!(this.enabled && this._simulation);\n            canInSimulation && this._removeFromSimulation();\n            this._ownBody = ownerRigid;\n            this._connectedBody = connectRigidBody;\n            //this._ownBody.constaintRigidbodyA = this;\n            //this._connectedBody.constaintRigidbodyB = this;\n            this._createConstraint();\n        }\n    }\n\n    /**\n     * 连接两个刚体。\n     * 上面的限制太多，例如希望可以没有shape\n     * @param A \n     * @param B \n     */\n    _setConnectRigidBody(A: Rigidbody3D, B: Rigidbody3D) {\n        this.ownBody = A;\n        this.connectedBody = B;\n        this._createConstraint();\n    }\n\n\n    /**\n     * 获得当前力\n     * @param out \n     */\n    getcurrentForce(out: Vector3) {\n        if (!this._btJointFeedBackObj)\n            throw \"this Constraint is not simulation\";\n        var bt = Physics3D._bullet;\n        var applyForce: number = bt.btJointFeedback_getAppliedForceBodyA(this._btJointFeedBackObj);\n        out.setValue(bt.btVector3_x(applyForce), bt.btVector3_y(applyForce), bt.btVector3_z(applyForce));\n        return;\n    }\n\n    /**\n     * 获取物理世界。\n     * 缺省的是从所属的scene3d取，子类可以提供另外的方法\n     * @returns \n     */\n    getPhysicsSimulation() {\n        return ((this.owner as Sprite3D)._scene as Scene3D).physicsSimulation;\n    }\n\n    /**\n     * 获得当前力矩\n     * @param out \n     */\n    getcurrentTorque(out: Vector3) {\n        if (!this._btJointFeedBackObj)\n            throw \"this Constraint is not simulation\";\n        var bt = Physics3D._bullet;\n        var applyTorque: number = bt.btJointFeedback_getAppliedTorqueBodyA(this._btJointFeedBackObj);\n        out.setValue(bt.btVector3_x(applyTorque), bt.btVector3_y(applyTorque), bt.btVector3_z(applyTorque));\n        return;\n    }\n\n    protected _onDestroy() {\n        var physics3D: any = Physics3D._bullet;\n        this._simulation && this._removeFromSimulation();\n        if (this._btConstraint && this._btJointFeedBackObj && this._simulation) {\n            physics3D.btTypedConstraint_destroy(this._btConstraint);\n            physics3D.btJointFeedback_destroy(this._btJointFeedBackObj);\n            this._btJointFeedBackObj = null;\n            this._btConstraint = null;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    _isBreakConstrained(): Boolean {\n        this._getJointFeedBack = false;\n        if (this.breakForce == -1 && this.breakTorque == -1)\n            return false;\n        this._getFeedBackInfo();\n        var isBreakForce: Boolean = this._breakForce != -1 && (Vector3.scalarLength(this._currentForce) > this._breakForce);\n        var isBreakTorque: Boolean = this._breakTorque != -1 && (Vector3.scalarLength(this._currentTorque) > this._breakTorque);\n        if (isBreakForce || isBreakTorque) {\n            this._breakConstrained();\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _parse(data: any): void {\n        this._anchor.fromArray(data.anchor);\n        this._connectAnchor.fromArray(data.connectAnchor);\n        this.setFrames();\n    }\n    /**\n     * @internal\n     */\n    private _getFeedBackInfo() {\n        var bt = Physics3D._bullet;\n        var applyForce: number = bt.btJointFeedback_getAppliedForceBodyA(this._btJointFeedBackObj);\n        var applyTorque: number = bt.btJointFeedback_getAppliedTorqueBodyA(this._btJointFeedBackObj);\n        this._currentTorque.setValue(bt.btVector3_x(applyTorque), bt.btVector3_y(applyTorque), bt.btVector3_z(applyTorque));\n        this._currentForce.setValue(bt.btVector3_x(applyForce), bt.btVector3_y(applyForce), bt.btVector3_z(applyForce));\n        this._getJointFeedBack = true;\n    }\n\n    /**\n     * @internal\n     */\n    _breakConstrained(): void {\n        this.destroy();\n    }\n}\n\n","import { ConstraintComponent } from \"./ConstraintComponent\";\nimport { Rigidbody3D } from \"../Rigidbody3D\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Physics3D } from \"../../Physics3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>ConfigurableConstraint</code>类用于可设置的约束组件\n */\nexport class ConfigurableConstraint extends ConstraintComponent {\n    /** 约束限制模式  完全限制 */\n    static CONFIG_MOTION_TYPE_LOCKED = 0;\n    /** 约束限制模式  范围限制 */\n    static CONFIG_MOTION_TYPE_LIMITED = 1;\n    /** 约束限制模式  不限制 */\n    static CONFIG_MOTION_TYPE_FREE = 2;\n    /** @internal 线性x轴*/\n    static MOTION_LINEAR_INDEX_X = 0;\n    /** @internal 线性Y轴*/\n    static MOTION_LINEAR_INDEX_Y = 1;\n    /** @internal 线性Z轴*/\n    static MOTION_LINEAR_INDEX_Z = 2;\n    /** @internal 旋转X轴*/\n    static MOTION_ANGULAR_INDEX_X = 3;\n    /** @internal 旋转Y轴*/\n    static MOTION_ANGULAR_INDEX_Y = 4;\n    /** @internal 旋转Z轴*/\n    static MOTION_ANGULAR_INDEX_Z = 5;\n    /** @internal */\n    static RO_XYZ = 0;\n    /** @internal */\n    static RO_XZY = 1;\n    /** @internal */\n    static RO_YXZ = 2;\n    /** @internal */\n    static RO_YZX = 3;\n    /** @internal */\n    static RO_ZXY = 4;\n    /** @internal */\n    static RO_ZYX = 5;\n    /** @internal */\n    private _btAxis: number;\n    /** @internal */\n    private _btSecondaryAxis: number;\n    /** @internal */\n    private _axis = new Vector3();\n    /** @internal */\n    private _secondaryAxis = new Vector3();\n    /** @internal */\n    private _minLinearLimit = new Vector3();\n    /** @internal */\n    private _maxLinearLimit = new Vector3();\n    /** @internal */\n    private _minAngularLimit = new Vector3();\n    /** @internal */\n    private _maxAngularLimit = new Vector3();\n    /** @internal */\n    private _linearLimitSpring = new Vector3();\n    /** @internal */\n    private _angularLimitSpring = new Vector3();\n    /** @internal */\n    private _linearBounce = new Vector3();\n    /** @internal */\n    private _angularBounce = new Vector3();\n    /** @internal */\n    private _linearDamp = new Vector3();\n    /** @internal */\n    private _angularDamp = new Vector3();\n    /** @internal */\n    private _xMotion = 0;\n    /** @internal */\n    private _yMotion = 0;\n    /** @internal */\n    private _zMotion = 0;\n    /** @internal */\n    private _angularXMotion = 0;\n    /** @internal */\n    private _angularYMotion = 0;\n    /** @internal */\n    private _angularZMotion = 0;\n    /**\n     * 创建一个<code>ConfigurableConstraint</code>实例\t可设置的约束组件\n     */\n    constructor() {\n        super(ConstraintComponent.CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE);\n        var bt = Physics3D._bullet;\n        this._btAxis = bt.btVector3_create(0, 0.0, 1);\n        this._btSecondaryAxis = bt.btVector3_create(0.0, 1.0, 0.0);\n    }\n\n    /**\n     * 主轴\n     */\n    get axis(): Vector3 {\n        return this._axis;\n    }\n\n    /**\n     * 副轴\n     */\n    get secondaryAxis(): Vector3 {\n        return this._secondaryAxis;\n    }\n\n    /**\n     * 旋转角度最大值\n     */\n    set maxAngularLimit(value: Vector3) {\n        value.cloneTo(this._maxAngularLimit);\n    }\n\n    /**\n     * 旋转角度最小值\n     */\n    set minAngularLimit(value: Vector3) {\n        value.cloneTo(this._minAngularLimit);\n    }\n\n    get maxAngularLimit(): Vector3 {\n        return this._maxAngularLimit;\n    }\n\n    get minAngularLimit(): Vector3 {\n        return this._minAngularLimit;\n    }\n\n    /**\n     * 最大线性位置\n     */\n    set maxLinearLimit(value: Vector3) {\n        value.cloneTo(this._maxLinearLimit);\n    }\n\n    /**\n     * 最小线性位置\n     */\n    set minLinearLimit(value: Vector3) {\n        value.cloneTo(this._minLinearLimit);\n    }\n\n\n    get maxLinearLimit(): Vector3 {\n        return this._maxLinearLimit;\n    }\n\n    get minLinearLimit(): Vector3 {\n        return this._minLinearLimit;\n    }\n    /**\n     * X轴线性约束模式\n     */\n    set XMotion(value: number) {\n        //坐标系转换\n        if (this._xMotion != value) {\n            this._xMotion = value;\n            this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value, this._minLinearLimit.x, this._maxLinearLimit.x);\n        }\n    }\n\n    get XMotion(): number {\n        return this._xMotion;\n    }\n\n    /**\n     * Y轴线性约束模式\n     */\n    set YMotion(value: number) {\n        if (this._yMotion != value) {\n            this._yMotion = value;\n            this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value, this._minLinearLimit.y, this._maxLinearLimit.y);\n        }\n\n    }\n\n    get YMotion(): number {\n        return this._yMotion;\n    }\n\n    /**\n     * Z轴线性约束模式\n     */\n    set ZMotion(value: number) {\n        if (this._zMotion != value) {\n            this._zMotion = value;\n            this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value, this._minLinearLimit.z, this._maxLinearLimit.z);\n        }\n    }\n\n    get ZMotion(): number {\n        return this._zMotion;\n    }\n\n    /**\n     * X轴旋转约束模式\n     */\n    set angularXMotion(value: number) {\n        //坐标系转换\n        if (this._angularXMotion != value) {\n            this._angularXMotion = value;\n            this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value, this._minAngularLimit.x, this._maxAngularLimit.x);\n        }\n    }\n\n    get angularXMotion(): number {\n        return this._angularXMotion;\n    }\n\n    /**\n     * Y轴旋转约束模式\n     */\n    set angularYMotion(value: number) {\n        if (this._angularYMotion != value) {\n            this._angularYMotion = value;\n            this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value, this._minAngularLimit.y, this._maxAngularLimit.y);\n        }\n    }\n\n    get angularYMotion(): number {\n        return this._angularYMotion;\n    }\n\n    /**\n     * Z轴旋转约束模式\n     */\n    set angularZMotion(value: number) {\n        if (this._angularZMotion != value) {\n            this._angularZMotion = value;\n            this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value, this._minAngularLimit.z, this._maxAngularLimit.z);\n        }\n    }\n\n    get angularZMotion(): number {\n        return this._angularZMotion;\n    }\n\n    /**\n     * 线性弹簧\n     */\n    set linearLimitSpring(value: Vector3) {\n        if (!Vector3.equals(this._linearLimitSpring, value)) {\n            value.cloneTo(this._linearLimitSpring);\n            this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value.x);\n            this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value.y);\n            this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value.z);\n        }\n    }\n\n    get linearLimitSpring(): Vector3 {\n        return this._linearLimitSpring;\n    }\n\n    /**\n     * 角度弹簧\n     */\n    set angularLimitSpring(value: Vector3) {\n        if (!Vector3.equals(this._angularLimitSpring, value)) {\n            value.cloneTo(this._angularLimitSpring);\n            this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value.x);\n            this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value.y);\n            this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value.z);\n        }\n    }\n\n    get angularLimitSpring(): Vector3 {\n        return this._angularLimitSpring;\n    }\n\n    /**\n     * 线性弹力\n     */\n    set linearBounce(value: Vector3) {\n        if (!Vector3.equals(this._linearBounce, value)) {\n            value.cloneTo(this._linearBounce);\n            this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value.x);\n            this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value.y);\n            this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value.z);\n        }\n    }\n\n    get linearBounce(): Vector3 {\n        return this._linearBounce;\n    }\n\n    /**\n     * 角度弹力\n     */\n    set angularBounce(value: Vector3) {\n        if (!Vector3.equals(this._angularBounce, value)) {\n            value.cloneTo(this._angularBounce);\n            this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value.x);\n            this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value.y);\n            this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value.z);\n        }\n    }\n\n    get angularBounce(): Vector3 {\n        return this._angularBounce;\n    }\n\n    /**\n     * 线性阻力\n     */\n    set linearDamp(value: Vector3) {\n        if (!Vector3.equals(this._linearDamp, value)) {\n            value.cloneTo(this._linearDamp);\n            this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value.x);\n            this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value.y);\n            this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value.z);\n        }\n    }\n\n    get linearDamp(): Vector3 {\n        return this._linearDamp;\n    }\n\n    /**\n     * 角度阻力\n     */\n    set angularDamp(value: Vector3) {\n        if (!Vector3.equals(this._angularDamp, value)) {\n            value.cloneTo(this._angularDamp);\n            this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value.x);\n            this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value.y);\n            this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value.z);\n        }\n    }\n\n    get angularDamp(): Vector3 {\n        return this._angularDamp;\n    }\n\n    /**\n     * 设置锚点\n     */\n    set anchor(value: Vector3) {\n        value.cloneTo(this._anchor);\n        this.setFrames();\n    }\n\n    get anchor() {\n        return this._anchor;\n    }\n\n    /**\n     * 设置链接锚点\n     */\n    set connectAnchor(value: Vector3) {\n        value.cloneTo(this._connectAnchor);\n        this.setFrames();\n    }\n\n    get connectAnchor(): Vector3 {\n        return this._connectAnchor;\n    }\n\n    /**\n     * 设置对象自然旋转的局部轴主轴，axis2为副轴\n     * @param axis1 \n     * @param axis2 \n     */\n    setAxis(axis: Vector3, secondaryAxis: Vector3): void {\n        if (!this._btConstraint)\n            return;\n        var bt = Physics3D._bullet;\n        this._axis.setValue(axis.x, axis.y, axis.y);\n        this._secondaryAxis.setValue(secondaryAxis.x, secondaryAxis.y, secondaryAxis.z);\n        bt.btVector3_setValue(this._btAxis, axis.x, axis.y, axis.z);\n        bt.btVector3_setValue(this._btSecondaryAxis, secondaryAxis.x, secondaryAxis.y, secondaryAxis.z);\n        bt.btGeneric6DofSpring2Constraint_setAxis(this._btConstraint, this._btAxis, this._btSecondaryAxis);\n    }\n\n    /**\n     * @internal \n     * 当LOCKED或者FREE的时候,low,high就没有用了\n     */\n    setLimit(axis: number, motionType: number, low?: number, high?: number): void {\n        if (!this._btConstraint)\n            return;\n        var bt = Physics3D._bullet;\n        switch (motionType) {\n            case ConfigurableConstraint.CONFIG_MOTION_TYPE_LOCKED:\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, 0, 0);\n                break;\n            case ConfigurableConstraint.CONFIG_MOTION_TYPE_LIMITED:\n                if (low < high)\n                    bt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, low, high);\n                break;\n            case ConfigurableConstraint.CONFIG_MOTION_TYPE_FREE:\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, 1, 0);\n                break;\n            default:\n                throw \"No Type of Axis Motion\";\n        }\n    }\n    /**\n     * @internal\n     */\n    setSpring(axis: number, springValue: number, limitIfNeeded: boolean = true): void {\n        if (!this._btConstraint)\n            return;\n        var bt = Physics3D._bullet;\n        var enableSpring: Boolean = springValue > 0;\n        bt.btGeneric6DofSpring2Constraint_enableSpring(this._btConstraint, axis, enableSpring);\n        if (enableSpring)\n            bt.btGeneric6DofSpring2Constraint_setStiffness(this._btConstraint, axis, springValue, limitIfNeeded);\n    }\n    /**\n     * @internal\n     */\n    setBounce(axis: number, bounce: number): void {\n        if (!this._btConstraint)\n            return;\n        var bt = Physics3D._bullet;\n        bounce = bounce <= 0 ? 0 : bounce;\n        bt.btGeneric6DofSpring2Constraint_setBounce(this._btConstraint, axis, bounce);\n    }\n\n    /**\n     * @internal\n     */\n    setDamping(axis: number, damp: number, limitIfNeeded: boolean = true): void {\n        if (!this._btConstraint)\n            return;\n        var bt = Physics3D._bullet;\n        damp = damp <= 0 ? 0 : damp;\n        bt.btGeneric6DofSpring2Constraint_setDamping(this._btConstraint, axis, damp, limitIfNeeded);\n    }\n    /**\n     * TODO\n     * @internal\n     */\n    setEquilibriumPoint(axis: number, equilibriumPoint: number): void {\n        var bt = Physics3D._bullet;\n        bt.btGeneric6DofSpring2Constraint_setEquilibriumPoint(this._btConstraint, axis, equilibriumPoint);\n    }\n    /**\n     * @internal\n     */\n    enableMotor(axis: number, isEnableMotor: boolean): void {\n        var bt = Physics3D._bullet;\n        bt.btGeneric6DofSpring2Constraint_enableMotor(this._btConstraint, axis, isEnableMotor);\n    }\n    /**\n     * TODO\n     * @internal\n     */\n    setServo(axis: number, onOff: boolean): void {\n        var bt = Physics3D._bullet;\n        bt.btGeneric6DofSpring2Constraint_setServo(this._btConstraint, axis, onOff);\n    }\n    /**\n     * TODO\n     * @internal\n     */\n    setTargetVelocity(axis: number, velocity: number): void {\n        var bt = Physics3D._bullet;\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btConstraint, axis, velocity);\n    }\n    /**\n     * TODO\n     * @internal\n     */\n    setTargetPosition(axis: number, target: number): void {\n        var bt = Physics3D._bullet;\n        bt.btGeneric6DofSpring2Constraint_setServoTarget(this._btConstraint, axis, target);\n    }\n    /**\n     * TODO\n     * @internal\n     */\n    setMaxMotorForce(axis: number, force: number): void {\n        var bt = Physics3D._bullet;\n        bt.btGeneric6DofSpring2Constraint_setMaxMotorForce(this._btConstraint, axis, force);\n    }\n    /**\n     * TODO\n     * @internal\n     */\n    setParam(axis: number, constraintParams: number, value: number): void {\n        var bt = Physics3D._bullet;\n        bt.btTypedConstraint_setParam(this._btConstraint, axis, constraintParams, value);\n    }\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    setFrames(): void {\n        super.setFrames();\n        var bt = Physics3D._bullet;\n        if (!this._btConstraint)\n            return;\n        bt.btGeneric6DofSpring2Constraint_setFrames(this._btConstraint, this._btframATrans, this._btframBTrans);\n    }\n\n    /**\n     * @internal\n     */\n    _addToSimulation(): void {\n        this._simulation && this._simulation.addConstraint(this, this.disableCollisionsBetweenLinkedBodies);\n    }\n\n    /**\n    * @internal\n    */\n    _removeFromSimulation(): void {\n        this._simulation.removeConstraint(this);\n        this._simulation = null;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _createConstraint(): void {\n        var bt = Physics3D._bullet;\n        this._btConstraint = bt.btGeneric6DofSpring2Constraint_create(this.ownBody.btColliderObject, this._btframATrans, this.connectedBody.btColliderObject, this._btframBTrans, ConfigurableConstraint.RO_XYZ);\n        this._btJointFeedBackObj = bt.btJointFeedback_create(this._btConstraint);\n        bt.btTypedConstraint_setJointFeedback(this._btConstraint, this._btJointFeedBackObj);\n        this._initAllConstraintInfo();\n        bt.btTypedConstraint_setEnabled(this._btConstraint, true);\n\n        this._simulation = this.getPhysicsSimulation();// (<Scene3D>this.owner._scene).physicsSimulation;\n        this._addToSimulation();\n    }\n\n    _initAllConstraintInfo(): void {\n        //MotionMode\n        this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._xMotion, this._minLinearLimit.x, this._maxLinearLimit.x);\n        this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._yMotion, this._minLinearLimit.y, this._maxLinearLimit.y);\n        this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._zMotion, this._minLinearLimit.z, this._maxLinearLimit.z);\n        this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularXMotion, this._minAngularLimit.x, this._maxAngularLimit.x);\n        this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularYMotion, this._minAngularLimit.y, this._maxAngularLimit.y);\n        this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularZMotion, this._minAngularLimit.z, this._maxAngularLimit.z);\n        this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._linearLimitSpring.x);\n        this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._linearLimitSpring.y);\n        this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._linearLimitSpring.z);\n        this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularLimitSpring.x);\n        this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularLimitSpring.y);\n        this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularLimitSpring.z);\n        this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._linearBounce.x);\n        this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._linearBounce.y);\n        this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._linearBounce.z);\n        this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularBounce.x);\n        this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularBounce.y);\n        this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularBounce.z);\n        this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._linearDamp.x);\n        this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._linearDamp.y);\n        this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._linearDamp.z);\n        this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularDamp.x);\n        this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularDamp.y);\n        this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularDamp.z);\n        this.setFrames();\n        this.setEquilibriumPoint(0, 0);\n    }\n\n\n    protected _onEnable(): void {\n        if (this._btConstraint)\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, true);\n    }\n\n    protected _onDisable(): void {\n        if (!this.connectedBody && this._simulation)\n            this._removeFromSimulation();\n        if (this._btConstraint)\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, false);\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _parse(data: any, interactMap: any = null): void {\n        super._parse(data);\n        this._axis.fromArray(data.axis);\n        this._secondaryAxis.fromArray(data.secondaryAxis);\n        var limitlimit: number = data.linearLimit;\n        this._minLinearLimit.setValue(-limitlimit, -limitlimit, -limitlimit);\n        this._maxLinearLimit.setValue(limitlimit, limitlimit, limitlimit);\n        var limitSpring: number = data.linearLimitSpring;\n        this._linearLimitSpring.setValue(limitSpring, limitSpring, limitSpring);\n        var limitDamp: number = data.linearLimitDamper;\n        this._linearDamp.setValue(limitDamp, limitDamp, limitDamp);\n        var limitBounciness: number = data.linearLimitBounciness;\n        this._linearBounce.setValue(limitBounciness, limitBounciness, limitBounciness);\n        var xlowAngularLimit: number = data.lowAngularXLimit;\n        var xhighAngularLimit: number = data.highAngularXLimit;\n        var yAngularLimit: number = data.angularYLimit;\n        var zAngularLimit: number = data.angularZLimit;\n        this._minAngularLimit.setValue(xlowAngularLimit, -yAngularLimit, -zAngularLimit);\n        this._maxAngularLimit.setValue(xhighAngularLimit, yAngularLimit, zAngularLimit);\n        var xhighAngularBounciness: number = data.highAngularXLimitBounciness;\n        var ybounciness: number = data.angularYLimitBounciness;\n        var zbounciness: number = data.angularZLimitBounciness;\n        this._angularBounce.setValue(xhighAngularBounciness, ybounciness, zbounciness);\n        var xAngularSpring: number = data.angularXLimitSpring;\n        var yzAngularSpriny: number = data.angularYZLimitSpring;\n        this._angularLimitSpring.setValue(xAngularSpring, yzAngularSpriny, yzAngularSpriny);\n        var xAngularDamper: number = data.angularXLimitDamper;\n        var yzAngularDamper: number = data.angularYZLimitDamper;\n        this._angularDamp.setValue(xAngularDamper, yzAngularDamper, yzAngularDamper);\n\n        this.XMotion = data.xMotion;\n        this.YMotion = data.yMotion;\n        this.ZMotion = data.zMotion;\n        this.angularXMotion = data.angularXMotion;\n        this.angularYMotion = data.angularYMotion;\n        this.angularZMotion = data.angularZMotion;\n\n        if (data.rigidbodyID != -1 && data.connectRigidbodyID != -1) {\n            interactMap.component.push(this);\n            interactMap.data.push(data);\n        }\n        (data.breakForce != undefined) && (this.breakForce = data.breakForce);\n        (data.breakTorque != undefined) && (this.breakTorque = data.breakTorque);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _parseInteractive(data: any = null, spriteMap: any = null) {\n        var rigidBodySprite: Sprite3D = spriteMap[data.rigidbodyID];\n        var rigidBody: Rigidbody3D = rigidBodySprite.getComponent(Rigidbody3D);\n        var connectSprite: Sprite3D = spriteMap[data.connectRigidbodyID];\n        var connectRigidbody: Rigidbody3D = connectSprite.getComponent(Rigidbody3D);\n        this.ownBody = rigidBody;\n        this.connectedBody = connectRigidbody;\n\n    }\n}","import { ConstraintComponent } from \"./ConstraintComponent\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Rigidbody3D } from \"../Rigidbody3D\";\nimport { Physics3D } from \"../../Physics3D\";\n\nexport class FixedConstraint extends ConstraintComponent {\n    /**\n     * 创建一个<code>FixedConstraint</code>实例\n     */\n    constructor() {\n        super(ConstraintComponent.CONSTRAINT_FIXED_CONSTRAINT_TYPE);\n        this.breakForce = -1;\n        this.breakTorque = -1;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _addToSimulation(): void {\n        this._simulation && this._simulation.addConstraint(this, this.disableCollisionsBetweenLinkedBodies);\n    }\n\n    /**\n    * @inheritDoc\n    * @override\n    * @internal\n    */\n    _removeFromSimulation(): void {\n        this._simulation.removeConstraint(this);\n        this._simulation = null;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _createConstraint(): void {\n        if (this.ownBody && this.ownBody._simulation && this.connectedBody && this.connectedBody._simulation) {\n            var bt = Physics3D._bullet;\n            this._btConstraint = bt.btFixedConstraint_create(this.ownBody.btColliderObject, this._btframATrans, this.connectedBody.btColliderObject, this._btframBTrans)\n            this._btJointFeedBackObj = bt.btJointFeedback_create(this._btConstraint);\n            bt.btTypedConstraint_setJointFeedback(this._btConstraint, this._btJointFeedBackObj);\n            bt.btTypedConstraint_setEnabled(this._btConstraint, true);\n\n            this._simulation = this.getPhysicsSimulation();// (<Scene3D>this.owner._scene).physicsSimulation;\n            this._addToSimulation();\n        }\n    }\n\n    protected _onEnable(): void {\n        if (this._btConstraint)\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, true);\n    }\n\n    protected _onDisable(): void {\n        if (!this.connectedBody)\n            this._removeFromSimulation();\n        if (this._btConstraint)\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, false);\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _parse(data: any, interactMap: any = null): void {\n        super._parse(data);\n        if (data.rigidbodyID != -1 && data.connectRigidbodyID != -1) {\n            interactMap.component.push(this);\n            interactMap.data.push(data);\n        }\n        (data.breakForce != undefined) && (this.breakForce = data.breakForce);\n        (data.breakTorque != undefined) && (this.breakTorque = data.breakTorque);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _parseInteractive(data: any = null, spriteMap: any = null) {\n        var rigidBodySprite: Sprite3D = spriteMap[data.rigidbodyID];\n        var rigidBody: Rigidbody3D = rigidBodySprite.getComponent(Rigidbody3D);\n        var connectSprite: Sprite3D = spriteMap[data.connectRigidbodyID];\n        var connectRigidbody: Rigidbody3D = connectSprite.getComponent(Rigidbody3D);\n        this.ownBody = rigidBody;\n        this.connectedBody = connectRigidbody;\n\n    }\n}","import { Sprite3D } from \"../core/Sprite3D\";\nimport { Physics3D } from \"../Physics3D\";\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\nimport { PhysicsComponent } from \"./PhysicsComponent\";\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\n\n/**\n * <code>PhysicsCollider</code> 类用于创建物理碰撞器。\n */\nexport class PhysicsCollider extends PhysicsTriggerComponent {\n\n    /**\n     * 创建一个 <code>PhysicsCollider</code> 实例。\n     * @param collisionGroup 所属碰撞组。\n     * @param canCollideWith 可产生碰撞的碰撞组。\n     */\n    constructor(collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\n        super(collisionGroup, canCollideWith);\n        this._enableProcessCollisions = false;\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _addToSimulation(): void {\n        this._simulation._addPhysicsCollider(this, this._collisionGroup, this._canCollideWith);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _removeFromSimulation(): void {\n        this._simulation._removePhysicsCollider(this);\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    _parse(data: any): void {\n        (data.friction != null) && (this.friction = data.friction);\n        (data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\n        (data.restitution != null) && (this.restitution = data.restitution);\n        (data.isTrigger != null) && (this.isTrigger = data.isTrigger);\n        super._parse(data);\n        this._parseShape(data.shapes);\n    }\n\n    protected _onAdded(): void {\n        var bt: any = Physics3D._bullet;\n        var btColObj: number = bt.btCollisionObject_create();\n        bt.btCollisionObject_setUserIndex(btColObj, this.id);\n        bt.btCollisionObject_forceActivationState(btColObj, PhysicsComponent.ACTIVATIONSTATE_DISABLE_SIMULATION);//prevent simulation\n\n        var flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\n        if ((<Sprite3D>this.owner).isStatic) {//TODO:\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\n                flags = flags ^ PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\n            flags = flags | PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT;\n        } else {\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT) > 0)\n                flags = flags ^ PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT;\n            flags = flags | PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\n        }\n        bt.btCollisionObject_setCollisionFlags(btColObj, flags);\n        this._btColliderObject = btColObj;\n        super._onAdded();\n    }\n}\n\n\n","import { ClassUtils } from \"../../utils/ClassUtils\";\nimport { CharacterController } from \"./CharacterController\";\nimport { ConfigurableConstraint } from \"./constraints/ConfigurableConstraint\";\nimport { FixedConstraint } from \"./constraints/FixedConstraint\";\nimport { PhysicsCollider } from \"./PhysicsCollider\";\nimport { Rigidbody3D } from \"./Rigidbody3D\";\n\nlet c = ClassUtils.regClass;\nc(\"CharacterController\", CharacterController);\nc(\"Rigidbody3D\", Rigidbody3D);\nc(\"PhysicsCollider\", PhysicsCollider);\nc(\"ConfigurableConstraint\", ConfigurableConstraint);\nc(\"FixedConstraint\", FixedConstraint);","import { ILaya } from \"../../../../ILaya\";\nimport { ILaya3D } from \"../../../../ILaya3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { ColliderShape } from \"./ColliderShape\";\n\n/**\n * <code>BoxColliderShape</code> 类用于创建高度图地形形状碰撞器。\n * \n */\nexport class HeightfieldTerrainShape extends ColliderShape {\n    dataPtr = 0;\n    initSize = new Vector3();\n\n    constructor(heightfieldData: Uint16Array | Float32Array | Uint8Array, heightStickWidth: number, heightStickLength: number, minHeight: number, maxHeight: number, heightScale: number) {\n        super();\n        this._type = ColliderShape.SHAPETYPES_HEIGHTFIELDTERRAIN;\n        var bt: any = ILaya3D.Physics3D._bullet;\n        this.needsCustomCollisionCallback = true;\n        let hfdatatype = 5; //PHY_UCHAR\n        if (heightfieldData instanceof Uint16Array) {\n            hfdatatype = 3;\t//PHY_SHORT\n        } else if (heightfieldData instanceof Uint8Array) {\n            hfdatatype = 5;\t//PHY_UCHAR\n        } else if (heightfieldData instanceof Float32Array) {\n            hfdatatype = 0;\t//PHY_FLOAT\n        } else {\n            throw 'bad heightfield data';\n        }\n\n        this.dataPtr = bt._malloc(heightfieldData.byteLength);\n        // 拷贝数据\n        let conch = (window as any).conch;\n        if (conch) {\n            bt.copyJSArray(this.dataPtr, heightfieldData.buffer);\n        } else {\n            let bulletwasm = ILaya.Laya.WasmModules['bullet'];\n            let buff = bulletwasm.memory.buffer;\n            let dstbuff = new Uint8Array(buff, this.dataPtr, heightfieldData.byteLength);\n            // 拷贝数据\n            dstbuff.set(new Uint8Array(heightfieldData.buffer));\n        }\n        /*\n        PHY_FLOAT,\t\t\t0\n        //PHY_DOUBLE,\t\t1\n        //PHY_INTEGER,\t\t2\n        PHY_SHORT,\t\t\t3\n        //PHY_FIXEDPOINT88,\t4\n        PHY_UCHAR\t\t\t5\n        */\n\n        this._btShape = bt.btHeightfieldTerrainShape_create(heightStickWidth, heightStickLength, this.dataPtr, heightScale, minHeight, maxHeight, hfdatatype);\n    }\n    /**\n    * 设置地形的margin\n    * margin有助于提高稳定性\n    * @param margin \n    */\n    setMargin(margin: number) {\n        var bt: any = ILaya3D.Physics3D._bullet;\n        bt.btConcaveShape_setMargin(this._btShape, margin);\n    }\n    /**\n     * @internal\n     */\n    _setScale(value: Vector3): void {\n        super._setScale(value);\n    }\n\n    destroy() {\n        super.destroy();\n        if (this.dataPtr) {\n            var bt: any = ILaya3D.Physics3D._bullet;\n            bt._free(this.dataPtr);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     */\n    clone(): any {\n        debugger;\n        throw 'not imp'\n    }\n}\n\n\n","import { Script } from \"../../components/Script\";\n\n/**\n * 保持对2.0的兼容。新脚本支持使用Script即可。\n */\nexport var Script3D = Script;\nexport type Script3D = Script;\n","import { Vector3 } from \"../../../maths/Vector3\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { GeometryElement } from \"../../core/GeometryElement\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { Bounds } from \"../../math/Bounds\";\n\n\n/**\n * @internal\n */\nexport class StaticBatchSubInfo {\n\n    indexStart: number;\n    indexCount: number;\n\n    meshBounds: Bounds;\n\n    needRender: boolean;\n\n    constructor() {\n        this.indexStart = 0;\n        this.indexCount = 0;\n        this.meshBounds = new Bounds(new Vector3(), new Vector3());\n        this.needRender = false;\n    }\n\n}\n\n/**\n * @internal\n */\nexport class StaticBatchSubMesh extends GeometryElement {\n\n    /**@internal */\n    private static _type: number = GeometryElement._typeCounter++;\n\n    subInfos: StaticBatchSubInfo[];\n\n    indexByteCount: number;\n\n    constructor() {\n        super(MeshTopology.Triangles, DrawType.DrawElement);\n        this.subInfos = [];\n    }\n\n    addSubMesh(indexCount: number, indexStart: number, bounds: Bounds) {\n\n        let info = new StaticBatchSubInfo();\n        info.indexCount = indexCount;\n        info.indexStart = indexStart;\n        bounds.cloneTo(info.meshBounds);\n\n        this.subInfos.push(info);\n    }\n\n    _getType(): number {\n        return StaticBatchSubMesh._type;\n    }\n\n    _updateRenderParams(state: RenderContext3D): void {\n\n        this.clearRenderParams();\n        // todo\n        let cameraPos = state.camera.transform.position;\n        this.subInfos.sort((a, b) => {\n            let centerA = a.meshBounds.getCenter();\n            let distanceA = Vector3.distanceSquared(centerA, cameraPos);\n            let centerB = b.meshBounds.getCenter();\n            let distanceB = Vector3.distanceSquared(centerB, cameraPos);\n            return distanceA - distanceB;\n        });\n        for (const info of this.subInfos) {\n            if (info.needRender) {\n                this.setDrawElemenParams(info.indexCount, info.indexStart * this.indexByteCount);\n            }\n        }\n\n    }\n\n    _prepareRender(state: RenderContext3D): boolean {\n        return !!this.subInfos.find(info => info.needRender);\n    }\n\n    _render(state: RenderContext3D): void {\n        super._render(state);\n    }\n\n    destroy() {\n        for (const info of this.subInfos) {\n        }\n        this.subInfos = null;\n    }\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { BlinnPhongMaterial } from \"../../core/material/BlinnPhongMaterial\";\nimport { Material } from \"../../core/material/Material\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { Utils3D } from \"../../utils/Utils3D\";\nimport { StaticBatchSubMesh } from \"./StaticBatchSubMesh\";\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\n\n\nconst tempMatrix = new Matrix4x4;\n\nconst TriangleIndices = [0, 1, 2];\nconst InvertTriangleIndices = [0, 2, 1];\n\n/**\n * @internal\n */\nexport class StaticBatchMesh {\n\n    static create(info: StaticMeshMergeInfo): StaticBatchMesh {\n        let staticMesh = new StaticBatchMesh();\n\n        let vertexCount = info.vertexCount;\n        let indexCount = info.indexCount;\n        let vertexDec = info.vertexDec;\n        let vertexFloatStride = vertexDec.vertexStride / 4;\n        let vertexData = new ArrayBuffer(vertexDec.vertexStride * vertexCount);\n        let vertexFloatArray = new Float32Array(vertexData);\n\n        let mergeIndexFormat = IndexFormat.UInt16;\n        let mergeIndexByteCount = 2;\n\n        let indexArray: Uint16Array | Uint32Array;\n\n        if (vertexCount > 65535) {\n            mergeIndexFormat = IndexFormat.UInt32;\n            mergeIndexByteCount = 4;\n            indexArray = new Uint32Array(indexCount);\n        }\n        else {\n            indexArray = new Uint16Array(indexCount);\n        }\n\n        let positionElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_POSITION0);\n        let normalElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_NORMAL0);\n        let lightmapUVElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE1);\n        let tangentElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_TANGENT0);\n\n        let vertexDataOffset = 0;\n        let vertexCountOffset = 0;\n        let indexOffset = 0;\n\n        let bounds: Bounds;\n\n        for (const render of info.renders) {\n            let lightmapScaleOffset = render.lightmapScaleOffset;\n\n            if (!bounds) {\n                bounds = staticMesh.bounds;\n                render.bounds.cloneTo(bounds);\n            }\n\n            Bounds.merge(bounds, render.bounds, bounds);\n\n            let sp = <Sprite3D>render.owner;\n            let invertFront = sp.transform._isFrontFaceInvert;\n            let worldMat = sp.transform.worldMatrix;\n            let normalMat = tempMatrix;\n            worldMat.invert(normalMat);\n            normalMat.transpose();\n\n            let mesh = render.getMesh();\n            let meshVertexCount = mesh.vertexCount;\n            let meshIndexCount = mesh.indexCount;\n\n            // todo 复制数据\n            // todo 是否存在根节点\n            let meshVertexData = mesh._vertexBuffer.getFloat32Data();\n            vertexFloatArray.set(meshVertexData, vertexDataOffset);\n\n            // todo 根据 vertex element 数据类型转换数据\n            for (let index = 0; index < meshVertexCount; index++) {\n                let elementOffset = index * vertexFloatStride;\n                for (const element of vertexDec._vertexElements) {\n                    elementOffset += element.offset / 4;\n                    switch (element.elementUsage) {\n                        case VertexMesh.MESH_POSITION0:\n                            Utils3D.transformVector3ArrayToVector3ArrayCoordinate(meshVertexData, elementOffset, worldMat, vertexFloatArray, vertexDataOffset + elementOffset);\n                            break;\n                        case VertexMesh.MESH_NORMAL0:\n                        case VertexMesh.MESH_TANGENT0:\n                            Utils3D.transformVector3ArrayToVector3ArrayNormal(meshVertexData, elementOffset, normalMat, vertexFloatArray, vertexDataOffset + elementOffset);\n                            break;\n                        case VertexMesh.MESH_TEXTURECOORDINATE1:\n                            Utils3D.transformLightingMapTexcoordArray(meshVertexData, elementOffset, lightmapScaleOffset, vertexFloatArray, vertexDataOffset + elementOffset);\n                            break;\n                    }\n                }\n            }\n\n            let meshIndexData = mesh._indexBuffer.getData();\n            // todo 非三角形渲染方式\n            let triangleIndices = invertFront ? InvertTriangleIndices : TriangleIndices;\n            for (let index = 0; index < meshIndexCount; index += 3) {\n                indexArray[indexOffset + index] = meshIndexData[index + triangleIndices[0]] + vertexCountOffset;\n                indexArray[indexOffset + index + 1] = meshIndexData[index + triangleIndices[1]] + vertexCountOffset;\n                indexArray[indexOffset + index + 2] = meshIndexData[index + triangleIndices[2]] + vertexCountOffset;\n            }\n\n            let subMeshCount = mesh.subMeshCount;\n\n            for (let index = 0; index < subMeshCount; index++) {\n                // todo default material\n                let material = render.sharedMaterials[index] || BlinnPhongMaterial.defaultMaterial;\n                let staticSubMesh = staticMesh._staticSubMeshes.get(material);\n                if (!staticSubMesh) {\n                    staticSubMesh = new StaticBatchSubMesh();\n                    staticSubMesh.indexByteCount = mergeIndexByteCount;\n                    staticMesh._staticSubMeshes.set(material, staticSubMesh);\n                    staticSubMesh.bufferState = staticMesh._bufferState;\n                    staticSubMesh.indexFormat = mergeIndexFormat;\n                }\n\n                let subMesh = mesh.getSubMesh(index);\n                // submesh bounds 使用 mesh bounds 代替\n                // 视锥裁剪仍按照整个mesh\n                // todo 换成单独的包围盒 ？\n                staticSubMesh.addSubMesh(subMesh.indexCount, subMesh._indexStart + indexOffset, render.bounds);\n            }\n\n            vertexDataOffset += meshVertexData.length;\n            vertexCountOffset += meshVertexCount;\n            indexOffset += meshIndexData.length;\n        }\n\n        let vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexData.byteLength, BufferUsage.Static, false);\n        vertexBuffer.vertexDeclaration = vertexDec;\n        vertexBuffer.setData(vertexData);\n\n        let indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(mergeIndexFormat, indexCount, BufferUsage.Static, false);\n        indexBuffer.setData(indexArray);\n\n        staticMesh.setBuffer(vertexBuffer, indexBuffer);\n\n        return staticMesh;\n    }\n\n    _bufferState: BufferState;\n\n    _vertexBuffer: VertexBuffer3D;\n\n    _indexBuffer: IndexBuffer3D;\n\n    _staticSubMeshes: Map<Material, StaticBatchSubMesh>;\n\n    bounds: Bounds;\n\n    constructor() {\n        this._bufferState = new BufferState();\n        this._staticSubMeshes = new Map();\n        this.bounds = new Bounds();\n    }\n\n    setBuffer(vertex: VertexBuffer3D, index: IndexBuffer3D) {\n        let bufferState = this._bufferState;\n\n        this._vertexBuffer = vertex;\n        this._indexBuffer = index;\n\n        bufferState.applyState([vertex], index);\n    }\n\n    destroy() {\n        this._staticSubMeshes.forEach(submesh => {\n            submesh.destroy();\n        });\n        this._staticSubMeshes.clear();\n        this._staticSubMeshes = null;\n        this._bufferState.destroy();\n    }\n\n\n}","import { RenderElement } from \"../../core/render/RenderElement\";\n\n/**\n * @internal\n */\nexport class StaticBatchMeshRenderElement extends RenderElement {\n\n    constructor() {\n        super();\n    }\n\n    getInvertFront(): boolean {\n        return false;\n    }\n\n}","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\nimport { MeshFilter } from \"../../core/MeshFilter\";\nimport { MeshSprite3DShaderDeclaration } from \"../../core/MeshSprite3DShaderDeclaration\";\nimport { BaseRender, RenderBitFlag } from \"../../core/render/BaseRender\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Transform3D } from \"../../core/Transform3D\";\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\nimport { StaticBatchMesh } from \"./StaticBatchMesh\";\nimport { StaticBatchMeshRenderElement } from \"./StaticBatchMeshRenderElement\";\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\n\nexport class StaticBatchMeshRender extends BaseRender {\n\n    static create(info: StaticMeshMergeInfo): StaticBatchMeshRender {\n\n        let render = new StaticBatchMeshRender();\n\n        render.mergeInfo = info;\n\n        return render;\n    }\n\n    private _staticMesh: StaticBatchMesh;\n    public get staticMesh(): StaticBatchMesh {\n        return this._staticMesh;\n    }\n\n    private _mergeInfo: StaticMeshMergeInfo;\n    public get mergeInfo(): StaticMeshMergeInfo {\n        return this._mergeInfo;\n    }\n    public set mergeInfo(value: StaticMeshMergeInfo) {\n        this._mergeInfo = value;\n\n        let staticMesh = StaticBatchMesh.create(value);\n        this._staticMesh = staticMesh;\n        this.lightmapIndex = value.lightmapIndex;\n\n        this._staticMesh = staticMesh;\n        this.geometryBounds = staticMesh.bounds;\n        let meshDefines = MeshFilter._meshVerticeDefine;\n        let defineDatas = this._shaderValues;\n        this._getMeshDefine(staticMesh, meshDefines);\n\n        for (const meshDef of meshDefines) {\n            defineDatas.addDefine(meshDef);\n        }\n\n        this._renderElements.forEach(element => {\n            element.material._removeReference();\n            element.destroy();\n        })\n\n        this._renderElements = [];\n\n        staticMesh._staticSubMeshes.forEach((subMesh, material) => {\n            let element = new StaticBatchMeshRenderElement();\n            this._renderElements.push(element);\n            element.render = this;\n            element.material = material;\n            element.setGeometry(subMesh);\n\n            material._addReference();\n        });\n\n        staticMesh.bounds.cloneTo(this.bounds);\n\n    }\n\n    _singleton: boolean;\n\n    private constructor() {\n        super();\n        this._singleton = false;\n    }\n\n    _calculateBoundingBox() {\n        // todo 根节点移动更新包围盒\n        // this._bounds.setCenter(Vector3.ZERO);\n        // this._bounds.setExtent(Vector3.ONE);\n    }\n\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\n        this._applyLightMapParams();\n        // todo 若有根节点, 在这里更新 worldmatrix\n        this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, Matrix4x4.DEFAULT);\n    }\n\n    _getMeshDefine(mesh: StaticBatchMesh, out: Array<ShaderDefine>) {\n        let vertexElements = mesh._vertexBuffer.vertexDeclaration._vertexElements;\n        for (const element of vertexElements) {\n            switch (element.elementUsage) {\n                case VertexMesh.MESH_COLOR0:\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\n                    break;\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\n                    break;\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\n                    break;\n                case VertexMesh.MESH_TANGENT0:\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\n                    break;\n            }\n        }\n    }\n\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\n        if (boundFrustum) {\n            if (boundFrustum.intersects(this.bounds)) {\n                let needRender = false;\n                this.staticMesh._staticSubMeshes.forEach(subMesh => {\n                    for (const info of subMesh.subInfos) {\n                        info.needRender = boundFrustum.intersects(info.meshBounds);\n                        needRender = needRender || info.needRender;\n                    }\n                });\n                return needRender;\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    onEnable() {\n        super.onEnable();\n        this.mergeInfo.renders.forEach(render => {\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Batch, true);\n        });\n\n    }\n\n    onDisable() {\n        super.onDisable();\n        this.mergeInfo.renders.forEach(render => {\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Batch, false);\n        });\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._renderElements.forEach(element => {\n            element.material._removeReference();\n            element.destroy();\n        });\n        this._renderElements = null;\n        this._staticMesh.destroy();\n        this._staticMesh = null;\n    }\n\n    _cloneTo(dest: StaticBatchMeshRender) {\n        dest.mergeInfo = this.mergeInfo;\n    }\n}","\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { MeshRenderer } from \"../../core/MeshRenderer\";\nimport { Sprite3D } from \"../../core/Sprite3D\";\nimport { Mesh } from \"../../resource/models/Mesh\";\n\n\ndeclare module \"../../core/MeshRenderer\" {\n    export interface MeshRenderer {\n        getMesh: () => Mesh;\n    }\n}\n\nMeshRenderer.prototype.getMesh = function () {\n    // @ts-ignore\n    return this._mesh;\n}\n\n/**\n * @internal\n */\nexport class StaticMeshMergeInfo {\n\n    static create(render: MeshRenderer) {\n\n        let mesh = render.getMesh();\n        let owner = <Sprite3D>render.owner;\n\n        let info = new StaticMeshMergeInfo();\n        info.lightmapIndex = render.lightmapIndex;\n        info.receiveShadow = render.receiveShadow;\n        info.vertexDec = mesh ? mesh.getVertexDeclaration() : null;\n        // info.invertFrontFace = owner ? owner.transform._isFrontFaceInvert : false;\n        return info;\n    }\n\n    receiveShadow: boolean;\n\n    lightmapIndex: number;\n\n    vertexDec: VertexDeclaration;\n\n    // invertFrontFace: boolean;\n\n    private _renders: MeshRenderer[];\n    public get renders(): MeshRenderer[] {\n        return this._renders;\n    }\n\n    vertexCount: number;\n    indexCount: number;\n\n    private constructor() {\n        this._renders = [];\n        this.vertexCount = 0;\n        this.indexCount = 0;\n    }\n\n    match(render: MeshRenderer): boolean {\n\n        let mesh = render.getMesh();\n        let owner = <Sprite3D>render.owner;\n\n        let match = true;\n\n        match = match && this.lightmapIndex == render.lightmapIndex;\n        match = match && this.receiveShadow == render.receiveShadow;\n        match = match && this.vertexDec == mesh.getVertexDeclaration();\n        // match = match && this.invertFrontFace == owner.transform._isFrontFaceInvert;\n        return match;\n    }\n\n    addElement(render: MeshRenderer) {\n        this.renders.push(render);\n        let mesh = render.getMesh();\n        this.vertexCount += mesh.vertexCount;\n        this.indexCount += mesh.indexCount;\n    }\n\n    destroy() {\n        this._renders = null;\n    }\n}","import { MeshRenderer } from \"laya/d3/core/MeshRenderer\";\nimport { StaticBatchMeshRender } from \"./StaticBatchMeshRender\";\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\n\n/**\n * @internal\n */\nexport class StaticMeshBatchManager {\n\n    private meshVertexDecSet: Set<StaticMeshMergeInfo>;\n\n    constructor() {\n        this.meshVertexDecSet = new Set();\n    }\n    /**\n     * 合并\n     * @param renders \n     * @returns \n     */\n    combine(renders: MeshRenderer[]) {\n        // todo 检测方式\n        for (const render of renders) {\n            let haveMatch = false;\n            for (const info of this.meshVertexDecSet) {\n                if (info.match(render)) {\n                    haveMatch = true;\n                    info.addElement(render);\n                }\n            }\n            if (!haveMatch) {\n                let info = StaticMeshMergeInfo.create(render);\n                info.addElement(render);\n                this.meshVertexDecSet.add(info);\n            }\n        }\n\n        let staticRenders: StaticBatchMeshRender[] = [];\n        for (const info of this.meshVertexDecSet) {\n            staticRenders.push(StaticBatchMeshRender.create(info));\n        }\n        this.meshVertexDecSet.clear();\n        return staticRenders;\n    }\n    \n    merge(info: StaticMeshMergeInfo) {\n        let staticMeshRender = StaticBatchMeshRender.create(info);\n        return staticMeshRender;\n    }\n\n}","import { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubUniformBufferData } from \"../../RenderEngine/SubUniformBufferData\";\nimport { UniformBufferParamsType } from \"../../RenderEngine/UniformBufferData\";\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\n/**\n * @internal\n */\nexport class TransLargeUBOUtils {\n    static configStartLength: number = 1024;\n\n    static addStep: number = 512;\n\n    bindUBO: UniformBufferObject;\n\n    maxlength: number;\n\n    currentlength: number = 0;\n\n    pool: SubUniformBufferData[];\n\n    subDataMap: SubUniformBufferData[];\n\n    subDataParamMap: Map<string, UniformBufferParamsType>;\n\n    defaultSubData: SubUniformBufferData;\n\n    /**\n     * @internal\n     * @param UBO\n     * @param paramsMap\n     * @param defautSubData \n     */\n    constructor(UBO: UniformBufferObject, paramsMap: Map<string, UniformBufferParamsType>, defautSubData: SubUniformBufferData) {\n        this.bindUBO = UBO;\n        this.defaultSubData = defautSubData;\n        UBO._reset(TransLargeUBOUtils.configStartLength * this.defaultSubData.getbyteLength());\n        this.subDataParamMap = paramsMap;\n        this.maxlength = TransLargeUBOUtils.configStartLength;\n        this.subDataMap = [];\n        this.pool = [];\n        this.subDataMap.push(defautSubData);\n        this.currentlength++;\n    }\n\n    /**\n     * \n     * @returns \n     */\n    create(): SubUniformBufferData {\n        if (this.pool.length > 0) {\n            const re = this.pool.pop();\n            re._isInPool = false;\n            return re;\n        }\n        if (this.maxlength == this.currentlength)\n            this.reset();\n\n        let uniformMap = new Map<number, UniformBufferParamsType>();\n        this.subDataParamMap.forEach((value, key) => {\n            uniformMap.set(Shader3D.propertyNameToID(key), value);\n        })\n        let subdata = new SubUniformBufferData(uniformMap, this.currentlength++);\n        this.subDataMap.push(subdata);\n        return subdata;\n    }\n\n    /**\n     * \n     * @param subModuleData \n     */\n    recover(subModuleData: SubUniformBufferData) {\n        if (!subModuleData._isInPool) {\n            this.pool.push(subModuleData);\n            subModuleData._isInPool = true;\n        }\n    }\n\n    /**\n     * \n     */\n    reset() {\n        this.maxlength += TransLargeUBOUtils.addStep;\n        this.bindUBO._reset(this.maxlength * this.defaultSubData.getbyteLength());\n        //all update\n        this.subDataMap.forEach(element => {\n            this.bindUBO.setDataByByUniformBufferDataOffset(element, element._offset);\n        });\n    }\n\n    /**\n     * Update One subData\n     * @param data \n     */\n    updateSubData(data: SubUniformBufferData) {\n        this.bindUBO.setDataByByUniformBufferDataOffset(data, data._offset);\n        data._needUpdate = false;\n    }\n\n    updateBindRange(data: SubUniformBufferData) {\n        let bytelenth = data.getbyteLength();\n        this.bindUBO._bindBufferRange(data._offset * bytelenth, bytelenth);\n    }\n\n\n    /**\n     * destroy\n     */\n    destroy() {\n        this.subDataMap.forEach(element => {\n            element.destroy();\n        });\n\n        delete this.subDataMap;\n        delete this.pool;\n        this.subDataMap = null;\n        this.pool = null;\n    }\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\nimport { Bounds } from \"../../math/Bounds\";\nimport { GeometryElement } from \"../GeometryElement\";\nimport { RenderContext3D } from \"../render/RenderContext3D\";\nimport { UI3D } from \"./UI3D\";\n\nexport class UI3DGeometry extends GeometryElement {\n    /**@internal */\n    private static _type: number = GeometryElement._typeCounter++;\n\n    private _vertexBuffer: VertexBuffer3D;\n    private _vertex: Float32Array;\n    private _indexBuffer: IndexBuffer3D;\n    private _index: Uint16Array;\n    private _scale: Vector2;\n    private _offset: Vector2;\n    private _bound: Bounds;\n    constructor(owner: UI3D) {\n        super(MeshTopology.TriangleStrip, DrawType.DrawArray);\n        this._owner = owner;\n        //初始化_segementCount\n        this.bufferState = new BufferState();\n        this._createBuffer();\n        this._scale = new Vector2(1, 1);\n        this._offset = new Vector2(0, 0);\n        this._bound = new Bounds();\n    }\n\n    /**\n     * @internal\n     */\n    set scale(value: Vector2) {\n        value && value.cloneTo(this._scale);\n        this._resizeVertexData();\n    }\n\n    /**\n     *  @internal\n     */\n    get scale(): Vector2 {\n        return this._scale;\n    }\n\n    /**\n     * @internal\n     */\n    set offset(value: Vector2) {\n        value && value.cloneTo(this._offset);\n        this._resizeVertexData();\n    }\n\n    /**\n     *  @internal\n     */\n    get offset(): Vector2 {\n        return this._offset;\n    }\n\n    /**@internal */\n    get bounds() {\n        return this._bound;\n    }\n\n    /**\n     * @internal\n     */\n    private _createBuffer() {\n        var vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\n        var halfLong: number = 1 / 2;\n        var halfWidth: number = 1 / 2;\n        this._vertex = new Float32Array([-halfLong, halfWidth, 0, 0, 0, 1, 0, 0, halfLong, halfWidth, 0, 0, 0, 1, 1, 0, -halfLong, -halfWidth, 0, 0, 0, 1, 0, 1, halfLong, -halfWidth, 0, 0, 0, 1, 1, 1]);\n        this._index = new Uint16Array([0, 1, 2, 3, 2, 1]);\n        //VB\n        this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this._vertex.length * 4, BufferUsage.Dynamic, false);\n        this._vertexBuffer.vertexDeclaration = vertexDeclaration;\n        this._vertexBuffer.setData(this._vertex.buffer);\n        //IB\n        var indexBuffer: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, this._index.length, BufferUsage.Static, false);\n        indexBuffer.setData(this._index);\n        //VAO\n        this.bufferState = new BufferState();\n        this.bufferState.applyState([this._vertexBuffer], this._indexBuffer);\n        this._bound.setExtent(new Vector3(0.5, 0.5, 0.05));\n        this._bound.setCenter(new Vector3(0, 0, 0));\n    }\n\n    /**\n     * @internal\n     * reset vertex data\n     */\n    private _resizeVertexData(): void {\n        var halfLong = this._scale.x / 2 + this._offset.x;\n        var halfWidth = this._scale.y / 2 + this._offset.y;\n        this._vertex[0] = -halfLong;\n        this._vertex[1] = halfWidth;\n        this._vertex[8] = halfLong;\n        this._vertex[9] = halfWidth;\n        this._vertex[16] = -halfLong;\n        this._vertex[17] = -halfWidth;\n        this._vertex[24] = halfLong;\n        this._vertex[25] = -halfWidth;\n        this._vertexBuffer.setData(this._vertex.buffer, 0, 0, this._vertex.length * 4);\n        this._bound.setExtent(new Vector3(this._scale.x / 2, this._scale.y / 2, 0.05));\n        this._bound.setCenter(new Vector3(this._offset.x, this._offset.y, 0));\n    }\n\n    /**\n     * @inheritDoc\n     * @internal\n     * @override\n     */\n    _updateRenderParams(state: RenderContext3D): void {\n        //this._bufferState.bind();\n        this.clearRenderParams();\n        var count: number = 6;\n        this.setDrawArrayParams(0, count);\n        // LayaGL.renderDrawConatext.drawArrays(MeshTopology.TriangleStrip,start,count);\n        // Stat.trianglesFaces += count - 2;\n    }\n    /**\n     * @inheritDoc\n     * @override\n     */\n    destroy() {\n        super.destroy();\n        this.bufferState.destroy();\n        this._vertexBuffer.destroy();\n        this._indexBuffer.destroy();\n        this.bufferState = null;\n        this._vertexBuffer = null;\n        this._indexBuffer = null;\n        delete this._vertex;\n        delete this._index;\n    }\n}","import { Sprite } from \"../../../display/Sprite\";\nimport { Event } from \"../../../events/Event\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\nimport { RenderTexture2D } from \"../../../resource/RenderTexture2D\";\nimport { Plane } from \"../../math/Plane\";\nimport { Ray } from \"../../math/Ray\";\nimport { Picker } from \"../../utils/Picker\";\nimport { BlinnPhongMaterial } from \"../material/BlinnPhongMaterial\";\nimport { Material } from \"../material/Material\";\nimport { BaseRender } from \"../render/BaseRender\";\nimport { RenderElement } from \"../render/RenderElement\";\nimport { Scene3D } from \"../scene/Scene3D\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { UI3DGeometry } from \"./UI3DGeometry\";\n\n/**\n * <code>BaseCamera</code> 类用于创建摄像机的父类。\n */\nexport class UI3D extends BaseRender {\n    static temp0: Vector3 = new Vector3();\n    static temp1: Vector3 = new Vector3();\n    static temp2: Vector3 = new Vector3();\n    //功能,将2DUI显示到3D面板上 并检测射线\n    /**@internal */\n    private _uisprite: Sprite;\n    /**@internal */\n    private _rendertexure2D: RenderTexture2D;\n    /**@internal */\n    private _geometry: UI3DGeometry;\n    /**@internal 2D是否需要重新绘制*/\n    private _needUpdate: boolean;\n    /**@internal */\n    private _uiPlane: Plane;\n\n    /**\n     * 3D渲染的UI节点\n     */\n    set sprite(value: Sprite) {\n        this._uisprite = value;\n        //TODO这里需要传入value设置的width，height\n        this._resizeRT(value.width, value.height);\n    }\n\n    get sprite() {\n        return this._uisprite;\n    }\n\n    /**\n     * @internal\n     */\n    set scale(value: Vector2) {\n        this._geometry.scale = value;\n    }\n\n    /**\n     *  @internal\n     */\n    get scale(): Vector2 {\n        return this._geometry.scale;\n    }\n\n    /**\n     * @internal\n     */\n    set offset(value: Vector2) {\n        this._geometry.offset = value;\n    }\n\n    /**\n     *  @internal\n     */\n    get offset(): Vector2 {\n        return this._geometry.offset;\n    }\n\n    get UIRender():BaseTexture{\n        return this._rendertexure2D;\n    }\n\n    constructor() {\n        super();\n        this._uiPlane = new Plane(new Vector3(), 0);\n    }\n\n    /**\n     * @internal add renderelement\n     */\n    private _addRenderElement() {\n        var elements: RenderElement[] = this._renderElements;\n        var material: Material = (<Material>this.sharedMaterials[0]);\n        (material) || (material = BlinnPhongMaterial.defaultMaterial);\n        var element: RenderElement = new RenderElement();\n        element.setTransform((this.owner as Sprite3D)._transform);\n        element.render = this;\n        element.material = material;\n        this._geometry = new UI3DGeometry(this);\n        element.setGeometry(this._geometry);\n        elements.push(element);\n    }\n\n    private _resizeRT(width: number, height: number) {\n        if (!this._rendertexure2D) {\n            this._rendertexure2D = new RenderTexture2D(width, height, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None);\n        } else {\n            if (this._rendertexure2D.width == width && this._rendertexure2D.height == height) {\n                this._rendertexure2D.destroy();\n                this._rendertexure2D = new RenderTexture2D(width, height, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None);\n            }\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @override\n     * @internal\n     */\n    protected _calculateBoundingBox(): void {\n        var worldMat: Matrix4x4 = this._transform.worldMatrix;\n        this._geometry.bounds._tranform(worldMat, this._bounds);\n    }\n\n    /**\n     * 更新Sprite的RT\n     */\n    _submitRT() {\n        //判断是否需要重置\n        this._uisprite && this._uisprite.drawToTexture(0, 0, 0, 0, this._rendertexure2D, true);\n    }\n\n    /**\n     * @internal \n     * @param ray \n     * @returns \n     */\n    _checkUIPos(ray: Ray) {\n        let hitPoint = Picker.rayPlaneIntersection(ray, this._uiPlane);\n        return hitPoint;\n    }\n\n    _changePlane() {\n        let up = Vector3.Up;\n        let right = Vector3.ForwardLH;\n        let worldMat = (this.owner as Sprite3D).transform.worldMatrix;\n        \n    }\n\n    protected _onAdded(): void {\n        super._onAdded();\n        this._addRenderElement();\n        \n\n    }\n\n\n    protected _onDisable(): void {\n        super._onDisable();\n        (this.owner.scene as Scene3D)._UI3DManager.remove(this);\n        (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED,this,this._changePlane);\n    }\n\n    /**\n     * @internal\n     */\n    protected _onEnable(): void {\n        super._onEnable();\n        (this.owner.scene as Scene3D)._UI3DManager.add(this);\n        (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED,this,this._changePlane);\n    }\n\n    /**\n     * @internal\n     */\n    protected _onDestroy() {\n        super._onDestroy();\n    }\n\n}\n\n","import { PixelLineFilter } from \"./PixelLineFilter\";\nimport { PixelLineRenderer } from \"./PixelLineRenderer\";\nimport { PixelLineData } from \"./PixelLineData\";\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\nimport { Node } from \"../../../display/Node\"\nimport { Sprite3D } from \"../Sprite3D\";\nimport { UnlitMaterial } from \"../material/UnlitMaterial\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\n/**\n * <code>PixelLineSprite3D</code> 类用于像素线渲染精灵。\n */\nexport class PixelLineSprite3D extends RenderableSprite3D {\n    /** @private 是否调用active */\n    private _isRenderActive: Boolean = false;\n    /** @private 是否加入渲染队列*/\n    private _isInRenders: Boolean = false;\n    /** @internal */\n    public _geometryFilter: PixelLineFilter;\n\n    /**\n     * 最大线数量\n     */\n    get maxLineCount(): number {\n        return (this._render as PixelLineRenderer).maxLineCount;\n    }\n\n    set maxLineCount(value: number) {\n        (this._render as PixelLineRenderer).maxLineCount = value;\n    }\n\n    /**\n     * 获取线数量。\n     */\n    get lineCount(): number {\n        return (this._render as PixelLineRenderer).lineCount;\n    }\n\n    /**\n     * line渲染器。\n     */\n    get pixelLineRenderer(): PixelLineRenderer {\n        return (<PixelLineRenderer>this._render);\n    }\n\n    /**\n     * 创建一个 <code>PixelLineSprite3D</code> 实例。\n     * @param maxCount 最大线段数量。\n     * @param name 名字。\n     */\n    constructor(maxCount: number = 2, name: string = null) {\n        super(name);\n\n        this._render = this.addComponent(PixelLineRenderer);\n        this._geometryFilter = (this._render as PixelLineRenderer)._pixelLineFilter;\n        (this._render as PixelLineRenderer).maxLineCount = maxCount;\n        let material = this._render.material = new UnlitMaterial();\n        material.enableVertexColor = true;\n    }\n\n    /**\n     * 增加一条线。\n     * @param\tstartPosition  初始点位置\n     * @param\tendPosition\t   结束点位置\n     * @param\tstartColor\t   初始点颜色\n     * @param\tendColor\t   结束点颜色\n     */\n    addLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n        (this._render as PixelLineRenderer).addLine(startPosition, endPosition, startColor, endColor);\n    }\n\n    /**\n     * 添加多条线段。\n     * @param\tlines  线段数据\n     */\n    addLines(lines: PixelLineData[]): void {\n        (this._render as PixelLineRenderer).addLines(lines);\n    }\n\n    /**\n     * 移除一条线段。\n     * @param index 索引。\n     */\n    removeLine(index: number): void {\n        (this._render as PixelLineRenderer).removeLine(index);\n    }\n\n    /**\n     * 更新线\n     * @param\tindex  \t\t   索引\n     * @param\tstartPosition  初始点位置\n     * @param\tendPosition\t   结束点位置\n     * @param\tstartColor\t   初始点颜色\n     * @param\tendColor\t   结束点颜色\n     */\n    setLine(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\n        (this._render as PixelLineRenderer).setLine(index, startPosition, endPosition, startColor, endColor);\n    }\n\n    /**\n     * 获取线段数据\n     * @param out 线段数据。\n     */\n    getLine(index: number, out: PixelLineData): void {\n        (this._render as PixelLineRenderer).getLine(index, out);\n    }\n\n    /**\n     * 清除所有线段。\n     */\n    clear(): void {\n        (this._render as PixelLineRenderer).clear();\n    }\n\n    /**\n     * @internal\n     */\n    protected _create(): Node {\n        return new Sprite3D();\n    }\n\n}\n\n","import { Camera, CameraClearFlags } from \"../Camera\";\nimport { Sprite3D } from \"../Sprite3D\";\nimport { Ray } from \"../../math/Ray\";\nimport { Viewport } from \"../../math/Viewport\";\nimport { HitResult } from \"../../physics/HitResult\";\nimport { Config3D } from \"../../../../Config3D\";\nimport { InputManager } from \"../../../events/InputManager\";\nimport { Node } from \"../../../display/Node\";\nimport { Scene3D } from \"./Scene3D\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\n\nconst _vec2 = new Vector2();\nconst _ray = new Ray(new Vector3(), new Vector3());\nconst _hitResult = new HitResult();\n\nInputManager.prototype.getSprite3DUnderPoint = function (this: InputManager, x: number, y: number): Node {\n    _hitResult.succeeded = false;\n    _vec2.setValue(x, y);\n\n    for (let scene of <Scene3D[]>this._stage._scene3Ds) {\n        let sim = scene._physicsSimulation;\n        if (!sim)\n            continue;\n\n        let cameras = scene._cameraPool;\n        for (let i = cameras.length - 1; i >= 0; i--) {\n            let camera = <Camera>cameras[i];\n            let viewport: Viewport = camera.viewport;\n            let ratio = Config3D.pixelRatio;\n            if (x >= viewport.x && y >= viewport.y && x <= viewport.width / ratio && y <= viewport.height / ratio) {\n                camera.viewportPointToRay(_vec2, _ray);\n\n                var sucess: boolean = sim.rayCast(_ray, <any>_hitResult);\n                if (sucess || (camera.clearFlag === CameraClearFlags.SolidColor || camera.clearFlag === CameraClearFlags.Sky))\n                    break;\n            }\n        }\n\n        if (_hitResult.succeeded)\n            return (<Sprite3D>_hitResult.collider.owner);\n    }\n\n    return null;\n}\n","import { Vector2 } from \"../../../../maths/Vector2\";\nimport { IClone } from \"../../../../utils/IClone\"\n\n/**\n * <code>GradientDataVector2</code> 类用于创建二维向量渐变。\n */\nexport class GradientDataVector2 implements IClone {\n\tprivate _currentLength: number = 0;\n\t/**@internal 开发者禁止修改。*/\n\t_elements: Float32Array;\n\n\t/**二维向量渐变数量。*/\n\tget gradientCount(): number {\n\t\treturn this._currentLength / 3;\n\t}\n\n\t/**\n\t * 创建一个 <code>GradientDataVector2</code> 实例。\n\t */\n\tconstructor() {\n\t\tthis._elements = new Float32Array(12);\n\t}\n\n\t/**\n\t * 增加二维向量渐变。\n\t * @param\tkey 生命周期，范围为0到1。\n\t * @param\tvalue 二维向量值。\n\t */\n\tadd(key: number, value: Vector2): void {\n\t\tif (this._currentLength < 8) {\n\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\n\t\t\t\tkey = 1;\n\t\t\t\tconsole.log(\"GradientDataVector2 warning:the forth key is  be force set to 1.\");\n\t\t\t}\n\n\t\t\tthis._elements[this._currentLength++] = key;\n\t\t\tthis._elements[this._currentLength++] = value.x;\n\t\t\tthis._elements[this._currentLength++] = value.y;\n\t\t} else {\n\t\t\tconsole.log(\"GradientDataVector2 warning:data count must lessEqual than 4\");\n\t\t}\n\t}\n\n\t/**\n\t * 克隆。\n\t * @param\tdestObject 克隆源。\n\t */\n\tcloneTo(destObject: any): void {\n\t\tvar destGradientDataVector2: GradientDataVector2 = <GradientDataVector2>destObject;\n\t\tdestGradientDataVector2._currentLength = this._currentLength;\n\t\tvar destElements: Float32Array = destGradientDataVector2._elements;\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\n\t\t\tdestElements[i] = this._elements[i];\n\t\t}\n\t}\n\n\t/**\n\t * 克隆。\n\t * @return\t 克隆副本。\n\t */\n\tclone(): any {\n\t\tvar destGradientDataVector2: GradientDataVector2 = new GradientDataVector2();\n\t\tthis.cloneTo(destGradientDataVector2);\n\t\treturn destGradientDataVector2;\n\t}\n\n}\n\n\n","import { LayaGL } from \"../../../../layagl/LayaGL\";\nimport { Vector2 } from \"../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { BufferUsage } from \"../../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { VertexDeclaration } from \"../../../../RenderEngine/VertexDeclaration\";\nimport { VertexBuffer3D } from \"../../../graphics/VertexBuffer3D\";\nimport { DrawMeshInstancedCMD } from \"./DrawMeshInstancedCMD\";\n\n/**\n * @internal\n * <code>Mesh</code> 类用于创建CustomInstance属性。\n */\nexport class MaterialInstanceProperty{\n\t/**@internal instanceProperty name*/\n\tpublic _name:string;\n\t/**@internal property Data*/\n\tpublic _value:Vector4[]|Vector3[]|Vector2[]|Float32Array;\n\t/**@internal vertex Declaration */\n\tpublic _vertexDeclaration:VertexDeclaration;\n\t/**@internal */\n\tpublic _isNeedUpdate:boolean = false;\n\t/**@internal */\n\tpublic _vertexStride:number;\n\t/**@internal */\n\tpublic _instanceData:Float32Array;\n\t/**@internal */\n\tpublic _vertexBuffer:VertexBuffer3D;\n\n\t/**\n\t * @internal\n\t * 创建instance顶点Buffer\n\t */\n\tcreateInstanceVertexBuffer3D(){\n\t\tthis._instanceData = new Float32Array(DrawMeshInstancedCMD.maxInstanceCount*this._vertexStride);\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this._instanceData.length*4,BufferUsage.Dynamic,false);\n\t\tthis._vertexBuffer.vertexDeclaration = this._vertexDeclaration;\n\t\tthis._vertexBuffer.instanceBuffer = true;\n\t}\n\n\t/**\n\t * @internal\n\t * 更新顶点数据\n\t */\n\tupdateVertexBufferData(drawNums:number){\n\t\t//更新数据\n\t\tif(!this._isNeedUpdate)\n\t\t\treturn;\n\t\tlet instanceData = this._instanceData;\n\t\tlet dataValue = this._value;\n\t\tlet datalength = this._value.length;\n\t\tlet data:Vector2|Vector3|Vector4;\n\t\tlet stride = this._vertexStride;\n\t\tlet updateType = 0;\n\t\tif(!(this._value instanceof Float32Array)){\n\t\t\tupdateType = 1;//判断为Vector数据\n\t\t}\n\n\t\tswitch(updateType){\n\t\t\tcase 0:\n\t\t\t\tinstanceData.set(<Float32Array>dataValue,0);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tfor (let i = 0; i < datalength; i++) {\n\t\t\t\t\tdata = <Vector2|Vector3|Vector4>dataValue[i];\n\t\t\t\t\tdata.writeTo(instanceData,i*stride);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tthis._vertexBuffer.orphanStorage();\n\t\tthis._vertexBuffer.setData(instanceData.buffer,0,0,drawNums*4*stride);\n\t}\n\n\tdestroy(){\n\t\tdelete this._value;\n\t\tdelete this._instanceData;\n\t\tthis._vertexDeclaration = null;\n\t\tthis._vertexBuffer.destroy();\n\t}\n}","import { Vector2 } from \"../../../../maths/Vector2\";\nimport { Vector3 } from \"../../../../maths/Vector3\";\nimport { Vector4 } from \"../../../../maths/Vector4\";\nimport { VertexDeclaration } from \"../../../../RenderEngine/VertexDeclaration\";\nimport { VertexElement } from \"../../../../renders/VertexElement\";\nimport { VertexElementFormat } from \"../../../../renders/VertexElementFormat\";\nimport { MaterialInstanceProperty } from \"./MaterialInstanceProperty\";\n\nexport enum InstanceLocation{\n\tCUSTOME0 = 12,\n\tCUSTOME1 = 13,\n\tCUSTOME2 = 14,\n\tCUSTOME3 = 15\n}\n\n/**\n * <code>Mesh</code> 类用于创建CustomInstance属性块。\n */\nexport class MaterialInstancePropertyBlock{\n\t\n\t/**Instance合并方案 */\n\t/**attribute instance渲染方案 优点：合并数量多,合并效率高，渲染性能优 缺点：instance变量元素少*/\n\tpublic static INSTANCETYPE_ATTRIBUTE:number = 0;\n\t/**uniform instance渲染方案 优点：instance变量多，灵活  缺点：合并数量受WebGLContext._maxUniformFragmentVectors的影响，合并效率低 */\n\tpublic static INSTANCETYPE_UNIFORMBUFFER:number = 1;\n\n\n\t/**@internal instance type*/\n\tprotected _type:number = 0;\n\n\n\t/**@internal property map*/\n\t_propertyMap:{[key:number]:MaterialInstanceProperty} = {};\n\n\tconstructor(){\n\t}\n\n\n\t/**\n\t * @internal 检查传入的参数是否符合规则\n\t * @param vertexElementFormat 顶点元素\n\t * @param propertyName 属性名\n\t * @param attributeLocation attribute位置\n\t * @param prob 材质属性\n\t */\n\tprivate _checkPropertyLegal(vertexElementFormat:VertexElementFormat,propertyName:string,attributeLocation:InstanceLocation,prob:MaterialInstanceProperty){\n\t\t\tvar vecDec = prob._vertexDeclaration;\n\t\t\t//顶点描述是否保持一致\n\t\t\tif(vecDec._vertexElements[0]._elementFormat !== vertexElementFormat)\n\t\t\t\tthrow \"Data exists and format does not match\";//数据存在且类型不匹配\n\t\t\tif(prob._name !== propertyName)\n\t\t\t\tthrow \"You cannot add a new property to an existing attributeLocation,Please use another attributeLocation\";//属性名字不匹配\t\n\t}\n\n\t/**\n\t * 创建instance属性\n\t * @param attributeName name\n\t * @param arrays data\n\t * @param vertexStride vertex size\n\t * @param vertexformat vertexFormat\n\t * @param attributeLocation  attribute location\n\t */\n\tprivate _creatProperty(attributeName:string,arrays:Vector4[]|Vector3[]|Vector2[]|Float32Array,vertexStride:number,vertexformat:string,attributeLocation:InstanceLocation){\n\t\tvar prob = this._propertyMap[attributeLocation] = new MaterialInstanceProperty();\n\t\tprob._name = attributeName;\n\t\tprob._value = arrays;\n\t\tprob._vertexDeclaration = new VertexDeclaration(vertexStride,[new VertexElement(0,vertexformat,attributeLocation)]);\n\t\tprob._isNeedUpdate = true;\n\t\tprob._vertexStride = vertexStride / 4;\n\t\tprob.createInstanceVertexBuffer3D();\n\t}\n\t\n\t/**\n\t * 设置Vector4材质数组属性\n\t * @param attributeName 属性名称（要对应到Shader中）\n\t * @param arrays 数据\n\t * @param attributeLocation  属性Shader位置（需要与shader中的声明Attribute一一对应）\n\t */\n\tsetVectorArray(attributeName:string,arrays:Vector4[]|Float32Array,attributeLocation:InstanceLocation):void{\n\t\tvar prob = this._propertyMap[attributeLocation];\n\t\tif(prob){\n\t\t\t//判断匹配\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector4,attributeName,attributeLocation,prob);\n\t\t\tprob._value = arrays;\n\t\t\tprob._isNeedUpdate = true;\n\t\t}else//创建自定义属性\n\t\t\tthis._creatProperty(attributeName,arrays,16,VertexElementFormat.Vector4,attributeLocation);\n\t}\n\n\t/**\n\t * 设置Vector3材质数组属性\n\t * @param attributeName 属性名称（要对应到Shader中）\n\t * @param arrays 数据\n\t * @param attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）\n\t */\n\tsetVector3Array(attributeName:string,arrays:Vector3[]|Float32Array,attributeLocation:InstanceLocation){\n\t\tvar prob = this._propertyMap[attributeLocation];\n\t\tif(prob){\n\t\t\t//判断匹配\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector3,attributeName,attributeLocation,prob);\n\t\t\tprob._value = arrays;\n\t\t\tprob._isNeedUpdate = true;\n\t\t}else//创建自定义属性\n\t\t\tthis._creatProperty(attributeName,arrays,12,VertexElementFormat.Vector3,attributeLocation);\n\t}\n\n\t/**\n\t * 设置Vector2材质数组属性\n\t * @param attributeName 属性名称（要对应到Shader中）\n\t * @param arrays 数据\n\t * @param attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）\n\t */\n\tsetVector2Array(attributeName:string,arrays:Vector2[]|Float32Array,attributeLocation:InstanceLocation){\n\t\tvar prob = this._propertyMap[attributeLocation];\n\t\tif(prob){\n\t\t\t//判断匹配\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector2,attributeName,attributeLocation,prob);\n\t\t\tprob._value = arrays;\n\t\t\tprob._isNeedUpdate = true;\n\t\t}else//创建自定义属性\n\t\t\tthis._creatProperty(attributeName,arrays,8,VertexElementFormat.Vector2,attributeLocation);\n\t}\n\n\t/**\n \t * 设置Number材质数组属性\n\t * @param attributeName 属性名称（要对应到Shader中）\n\t * @param arrays 数据\n\t * @param attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）\n\t */\n\tsetNumberArray(attributeName:string,arrays:Float32Array,attributeLocation:InstanceLocation){\n\t\tvar prob = this._propertyMap[attributeLocation];\n\t\tif(prob){\n\t\t\t//判断匹配\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Single,attributeName,attributeLocation,prob);\n\t\t\tprob._value = arrays;\n\t\t\tprob._isNeedUpdate = true;\n\t\t}else//创建自定义属性\n\t\t\tthis._creatProperty(attributeName,arrays,4,VertexElementFormat.Single,attributeLocation);\n\t}\n\n\t/**\n\t * 获得属性数据\n\t * @param attributeLocation  属性shader位置\n\t */\n\tgetPropertyArray(attributeLocation:InstanceLocation):Vector4[]|Vector3[]|Vector2[]|Float32Array{\n\t\tvar prob = this._propertyMap[attributeLocation];\n\t\treturn prob?prob._value:null;\n\t}\n\n\tclear(){\n\t\tfor(var i in this._propertyMap){\n\t\t\tthis._propertyMap[i].destroy();\n\t\t}\n\t\tthis._propertyMap = {};\n\t}\n\n}"],"names":["Shader3D","UniformBufferParamsType","UnifromBufferData","DepthTextureMode","UniformBufferObject","Color","Vector4","Config3D","BufferUsage","RenderTexture","RenderTargetFormat","LayaGL","RenderClearFlag","Stat","Vector3","TextureFormat","Texture2D","FilterMode","WrapMode","LayaEnv","HTMLCanvas","EventDispatcher","Quaternion","Matrix4x4","Matrix3x3","Event","MathUtils3D","Component","Loader","SingletonList","ILaya","NodeFlags","WeightedMode","Vector2","KeyFrameValueType","HalfFloatUtils","Resource","Byte","StaticFlag","Node","FrustumCorner","TextureCubeFace","BaseTexture","TextureDimension","volumeIntersectType","AmbientMode","ReflectionProbeMode","TextureDecodeFormat","ShaderDataType","RenderBitFlag","VertexMesh","DefineDatas","MeshTopology","DrawType","IndexFormat","BufferState","VertexDeclaration","VertexElement","VertexElementFormat","CullMode","CompareFunction","ShadowMode","ShadowCascadesMode","LightType","LightMode","ShadowMapFormat","RenderCapable","TextureCompareMode","MaterialRenderMode","RenderState","ShaderDataDefaultValue","ShadowLightType","Sprite","WebGL","Scene","SubmitKey","ComponentDriver","CameraClearFlags","Context","CameraEventFlags","PBRRenderQuality","PBRRenderMode","PBRMaterialType","PBRMetallicSmoothnessSource","ParticleSystemShapeType","MathUtil","Texture","TrailAlignment","AreaShape","tempVec","tempVec1","ClassUtils","AnimatorUpdateMode","AnimatorStateCondition","ToneMappingType","SubShader","AOQUALITY","BlitScreenVS","AniStateConditionType","AnimatorControllerParse","AniParmType","AnimatorStateBoolCondition","AnimatorStateNumberCondition","AnimatorStateTriggerCondition","Utils","AssetDb","KTXTextureInfo","URL","BlendFactor","BlendEquationSeparate","HierarchyLoader","ShaderCompile","AnimatorController2D","c","Base64Tool","HDRTextureInfo","IndexBuffer","BufferTargetType","VertexBuffer","TEMP_VECTOR3_MAX0","TEMP_VECTOR3_MAX1","ShaderData","ShaderInstance","RenderStateCommand","CommandUniformMap","UploadMemoryManager","NativeMemory","RenderElementType","NativeShaderDataType","MemoryDataType","NativeRenderStateCommand","Laya","RenderStateContext","Script","SubUniformBufferData","RenderTexture2D","InputManager","InstanceLocation"],"mappings":"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GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IACzE,QAAA,CAAC,CAAC,SAAS,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GA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AE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAElM,YAAA,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAE1M,YAAA,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAE1M,YAAA,QAAQ,EAAE,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE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"}